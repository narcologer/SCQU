00000000                            ; /=========================================================================\
00000000                            ; º	This file is generated by The Interactive Disassembler (IDA)	    º
00000000                            ; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            ; HACKED BY NARCOLOGER
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            ; Vladikcomper:	Remember, that this ASM code and some files were heavy
00000000                            ;		modificated, so replacing them may cause compilation errors.
00000000                            
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            
00000000                            		include	"config.asm"	; S1HS hack configuration
00000000                            ; ===========================================================================
00000000                            ; *                   S1HS - Hack configuration file                        *
00000000                            ; ===========================================================================
00000000                            ; This file is generated by S1HS to configure the hack.
00000000                            ; Note: this file is getting overriten every time you press Save button in
00000000                            ;	S1HS until you disable Tweaking in Options tab.
00000000                            ; ===========================================================================
00000000                            
00000000 =00000000                  _DEBUG_		equ 0
00000000                            
00000000                            ; Sonic Tweaking
00000000 =00000001                  _SPINDASH_	equ 1
00000000 =00000001                  _JUMPDASH_	equ 1
00000000 =00000001                  _SPEEDCAPFIX_	equ 1
00000000 =00000001                  _SPIKEBUGFIX_	equ 1
00000000 =00000000                  _LSS2_   equ 0
00000000 =00000002                  _SEGASCREEN_    equ 2
00000000                            
00000000                            ; Boss Hits
00000000 =0000000F                  var_BHits_GHZ	= 15
00000000 =0000000C                  var_BHits_MZ	= 12
00000000 =00000014                  var_BHits_SYZ	= 20
00000000 =0000000C                  var_BHits_LZ	= 12
00000000 =0000000F                  var_BHits_SLZ	= 15
00000000 =0000000F                  var_BHits_FZ	= 15
00000000 =0000000F                  var_BHits_FZ	= 15
00000000                            		include	"macro.asm"	; S1HS macros
00000000                            
00000000                            ; =============================================================
00000000                            ; Joypad button indexes & values
00000000                            ; For theld and tpress macros
00000000                            ; -------------------------------------------------------------
00000000 =00000007                  iStart		equ 	7
00000000 =00000006                  iA		equ 	6
00000000 =00000005                  iB		equ 	5
00000000 =00000004                  iC		equ 	4
00000000 =00000003                  iRight		equ 	3
00000000 =00000002                  iLeft		equ 	2
00000000 =00000001                  iDown		equ 	1
00000000 =00000000                  iUp		equ 	0
00000000                            
00000000 =00000080                  Start		equ 	1<<7
00000000 =00000040                  A		equ 	1<<6
00000000 =00000020                  B		equ 	1<<5
00000000 =00000010                  C		equ 	1<<4
00000000 =00000008                  Right		equ 	1<<3
00000000 =00000004                  Left		equ 	1<<2
00000000 =00000002                  Down		equ 	1<<1
00000000 =00000001                  Up		equ 	1
00000000                            
00000000 =FFFFF602                  SonicControl	equ	$FFFFF602
00000000 =FFFFF604                  Joypad		equ	$FFFFF604
00000000                            
00000000 =00000000                  Held		equ	0
00000000 =00000001                  Press		equ	1
00000000                            
00000000                            *$FFFFF602	SonicControl|Held
00000000                            *$FFFFF603	SonicControl|Press
00000000                            *$FFFFF604	Joypad|Held
00000000                            *$FFFFF605	Joypad|Press
00000000                            
00000000                            ; =============================================================
00000000                            ; Macro to check button presses
00000000                            ; Arguments:	1 - buttons to check
00000000                            ;		2 - bitfield to check
00000000                            ; -------------------------------------------------------------
00000000                            tpress	macro
00000000                            	move.b	(\2+1),d0
00000000                            	andi.b	#\1,d0
00000000                            	endm
00000000                            
00000000                            ; =============================================================
00000000                            ; Macro to check if buttons are held
00000000                            ; Arguments:	1 - buttons to check
00000000                            ;		2 - bitfield to check
00000000                            ; -------------------------------------------------------------
00000000                            theld	macro
00000000                            	move.b	\2,d0
00000000                            	andi.b	#\1,d0
00000000                            	endm
00000000                            
00000000                            ; =============================================================
00000000                            ; Macro to align data
00000000                            ; Arguments:	1 - align value
00000000                            ; -------------------------------------------------------------
00000000                            align	macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            
00000000                            ; =============================================================
00000000                            ; Macro to set VRAM write access
00000000                            ; Arguments:	1 - raw VRAM offset
00000000                            ;		2 - register to write access bitfield in (Optional)
00000000                            ; -------------------------------------------------------------
00000000                            vram	macro
00000000                            	if (narg=1)
00000000                            		move.l	#($40000000+((\1&$3FFF)<<16)+((\1&$C000)>>14)),($C00004).l
00000000                            	else
00000000                            		move.l	#($40000000+((\1&$3FFF)<<16)+((\1&$C000)>>14)),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; =============================================================
00000000                            ; Macro to raise an error in vectors
00000000                            ; Arguments:	1 - error number
00000000                            ;		2 - branch location
00000000                            ;		3 - if exists, adds 2 to stack pointer
00000000                            ; -------------------------------------------------------------
00000000                            raise	macro
00000000                            	move.b	#\1,($FFFFFC44).w
00000000                            	if narg=3
00000000                            		addq.l	#2,2(sp)
00000000                            	endc
00000000                            	bra.s	\2
00000000                            	endm
00000000                            	endm
00000000                            
00000000 =000000E0                  Snd_Special_FadeOut		equ	$E0
00000000 =000000E1                  Snd_Special_SEGA		equ	$E1
00000000 =000000E4                  Snd_Special_StopSng		equ	$E4
00000000 =FFFFD000                  RAM_SpriteAddr			equ	$FFFFD000		;(Only used in SegaScreen) Change: $FFFFD000 for s1 or $FFFFB000 for s2
00000000                            
00000000 =FFFFF600                  Game_Mode			equ	$FFFFF600		;Delete this variable if you are using the S2 AS disasm
00000000 =00000004                  ModeID_Title			equ	$4
00000000                            
00000000                            ;Don't add these variables if you used the 6 button guide
00000000 =FFFFF605                  RAM_Control_1_Press 		equ	$FFFFF605
00000000 =00000080                  JoyStart			equ	$80
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l HBlank, ErrorTrap, VBlank, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3139+  Date:		dc.b '(C)SEGA 1991.APR' ; Release date
00000120 534F 4E49 4320 5448 4520+  Title_Local:	dc.b 'SONIC THE               HEDGEHOG                ' ; Domestic name
00000150 534F 4E49 4320 5448 4520+  Title_Int:	dc.b 'SONIC THE               HEDGEHOG                ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200 5331 4853 2D32 3020 2020+  Generator:	dc.b 'S1HS-20         ' ; Generator
00000210                            
00000210                            ; ===========================================================================
00000210                            
00000210                            ErrorTrap:
00000210 4E71                       		nop	
00000212 4E71                       		nop	
00000214 60FA                       		bra.s	ErrorTrap
00000216                            ; ===========================================================================
00000216                            
00000216                            EntryPoint:
00000216 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000021C 6600                       		bne.s	PortA_Ok
0000021E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000224                            
00000224                            PortA_Ok:
00000224 6600                       		bne.s	PortC_Ok
00000226 4BFA 0000                  		lea	SetupValues(pc),a5
0000022A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000022E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000232 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000236 0200 000F                  		andi.b	#$F,d0
0000023A 6700                       		beq.s	SkipSecurity
0000023C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000244                            
00000244                            SkipSecurity:
00000244 3014                       		move.w	(a4),d0		; check	if VDP works
00000246 7000                       		moveq	#0,d0
00000248 2C40                       		movea.l	d0,a6
0000024A 4E66                       		move.l	a6,usp		; set usp to $0
0000024C 7217                       		moveq	#$17,d1
0000024E                            
0000024E                            VDPInitLoop:
0000024E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000250 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000252 DA47                       		add.w	d7,d5		; next register
00000254 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000258 289D                       		move.l	(a5)+,(a4)
0000025A 3680                       		move.w	d0,(a3)		; clear	the screen
0000025C 3287                       		move.w	d7,(a1)		; stop the Z80
0000025E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000260                            
00000260                            WaitForZ80:
00000260 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000262 66FC                       		bne.s	WaitForZ80	; if not, branch
00000264 7425                       		moveq	#$25,d2
00000266                            
00000266                            Z80InitLoop:
00000266 10DD                       		move.b	(a5)+,(a0)+
00000268 51CA FFFC                  		dbf	d2,Z80InitLoop
0000026C 3480                       		move.w	d0,(a2)
0000026E 3280                       		move.w	d0,(a1)		; start	the Z80
00000270 3487                       		move.w	d7,(a2)		; reset	the Z80
00000272                            
00000272                            ClrRAMLoop:
00000272 2D00                       		move.l	d0,-(a6)
00000274 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000278 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000027A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000027C 761F                       		moveq	#$1F,d3
0000027E                            
0000027E                            ClrCRAMLoop:
0000027E 2680                       		move.l	d0,(a3)
00000280 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000284 289D                       		move.l	(a5)+,(a4)
00000286 7813                       		moveq	#$13,d4
00000288                            
00000288                            ClrVDPStuff:
00000288 2680                       		move.l	d0,(a3)
0000028A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000028E 7A03                       		moveq	#3,d5
00000290                            
00000290                            PSGInitLoop:
00000290 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000294 51CD FFFA                  		dbf	d5,PSGInitLoop
00000298 3480                       		move.w	d0,(a2)
0000029A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000029E 46FC 2700                  		move	#$2700,sr	; set the sr
000002A2                            
000002A2                            PortC_Ok:
000002A2 6000                       		bra.s	GameProgram
000002A4                            ; ===========================================================================
000002A4 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
000002A6 3FFF                       		dc.w $3FFF
000002A8 0100                       		dc.w $100
000002AA                            
000002AA 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
000002AE 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002B2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002B6 00C0 0000                  		dc.l $C00000
000002BA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002BE                            
000002BE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002C2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002C6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002CA 8137 0001                  		dc.b $81, $37, 0, 1
000002CE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002D2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002D6                            
000002D6 4000 0080                  		dc.l $40000080
000002DA                            
000002DA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002E6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002F0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002FB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
00000300                            
00000300 8104                       		dc.w $8104		; value	for VDP	display	mode
00000302 8F02                       		dc.w $8F02		; value	for VDP	increment
00000304 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
00000308 4000 0010                  		dc.l $40000010
0000030C                            
0000030C 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000310                            ; ===========================================================================
00000310                            
00000310                            GameProgram:
00000310 4A79 00C0 0004             		tst.w	($C00004).l
00000316 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000031E 6700                       		beq.s	CheckSumCheck
00000320 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w   ; has checksum routine already run?
00000328 6700 0000                  		beq.w	GameInit		; if yes, branch
0000032C                              
0000032C                            CheckSumCheck:
0000032C                            
0000032C                            ; Vladikcomper: The code that checks cheksum is now commented out
0000032C                            
0000032C                            ;		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
0000032C                            ;		movea.l	#RomEndLoc,a1	; stop at end of ROM
0000032C                            ;		move.l	(a1),d0
0000032C                            ;		moveq	#0,d1
0000032C                            ;
0000032C                            ;loc_32C:
0000032C                            ;		add.w	(a0)+,d1
0000032C                            ;		cmp.l	a0,d0
0000032C                            ;		bcc.s	loc_32C
0000032C                            ;		movea.l	#Checksum,a1	; read the checksum
0000032C                            ;		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000032C                            ;		bne.w	CheckSumError	; if they don't match, branch
0000032C 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000330 7E00                       		moveq	#0,d7
00000332 3C3C 007F                  		move.w	#$7F,d6
00000336                            
00000336 2CC7                       @ClearLoop:	move.l	d7,(a6)+
00000338 51CE FFFC                  		dbf	d6,@ClearLoop	; repeat $7F more times
0000033C 1039 00A1 0001             		move.b	($A10001).l,d0
00000342 0200 00C0                  		andi.b	#$C0,d0
00000346 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000034A 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000352                            
00000352                            GameInit:
00000352 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000358 7E00                       		moveq	#0,d7
0000035A 3C3C 3F7F                  		move.w	#$3F7F,d6
0000035E                            
0000035E                            GameClrRAM:
0000035E 2CC7                       		move.l	d7,(a6)+
00000360 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000364 6100 0000                  		bsr.w	VDPSetupGame
00000368 6100 0000                  		bsr.w	SoundDriverLoad
0000036C 6100 0000                  		bsr.w	JoypadInit
00000370 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000376                            
00000376                            MainGameLoop:
00000376 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000037A 0240 001C                  		andi.w	#%11100,d0	; apply bit mask, so d0 will be <= $1C and multiple of 4
0000037E 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000382 60F2                       		bra.s	MainGameLoop
00000384                            
00000384                            ; ===========================================================================
00000384                            ; ---------------------------------------------------------------------------
00000384                            ; Main game mode array
00000384                            ; ---------------------------------------------------------------------------
00000384                            
00000384                            GameModeArray:
00000384 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
00000388 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)    
0000038C 6000 0000                  		bra.w	Level		; Demo Mode ($08)
00000390 6000 0000                  		bra.w	Level		; Normal Level ($0C)
00000394 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
00000398 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
0000039C 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003A0 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003A4 6000 0000                                  bra.w	SSRGScreen	; SSRG Screen ($20)
000003A8 4E75                       		rts
000003AA                            ; ===========================================================================
000003AA                            
000003AA                            ; Vladikcomper:	Red Screen is now commented out
000003AA                            
000003AA                            ;CheckSumError:
000003AA                            ;		bsr.w	VDPSetupGame
000003AA                            ;		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003AA                            ;		moveq	#$3F,d7
000003AA                            ;
000003AA                            ;CheckSum_Red:
000003AA                            ;		move.w	#$E,($C00000).l	; fill screen with colour red
000003AA                            ;		dbf	d7,CheckSum_Red	; repeat $3F more times
000003AA                            ;
000003AA                            ;CheckSum_Loop:
000003AA                            ;		bra.s	CheckSum_Loop
000003AA                            ; ===========================================================================
000003AA                            
000003AA                            ; Error vectors are now powered by macro, that helped to save lots of space
000003AA                            
0000040E                            
0000040E                            ; ===========================================================================
0000040E                            
0000040E                            loc_43A:
0000040E 46FC 2700                  		move	#$2700,sr	; disable interrupts
00000412 544F                       		addq.w	#2,sp
00000414 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000418 544F                       		addq.w	#2,sp
0000041A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w ; save all registers to RAM
00000420 6100 0000                  		bsr.w	ShowErrorMsg
00000424 202F 0002                  		move.l	2(sp),d0	; load offset where the error happened to d0
00000428 6100 0000                  		bsr.w	ShowErrorOffset	; display the offset
0000042C 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000430 6100 0000                  		bsr.w	ShowErrorOffset
00000434 6000                       		bra.s	QuitError
00000436                            ; ===========================================================================
00000436                            
00000436                            loc_462:
00000436 46FC 2700                  		move	#$2700,sr	; disable interrupts
0000043A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w ; save all registers to RAM
00000440 6100 0000                  		bsr.w	ShowErrorMsg
00000444 202F 0002                  		move.l	2(sp),d0	; load offset where the error happened to d0
00000448 6100 0000                  		bsr.w	ShowErrorOffset	; display the offset
0000044C                            
0000044C                            QuitError:
0000044C 6100 0000                  		bsr.w	ErrorWaitForC
00000450 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7 ; load saved registers from RAM
00000456 46FC 2300                  		move	#$2300,sr
0000045A 4E73                       		rte	
0000045C                            
0000045C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000045C                            
0000045C                            
0000045C                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000045C 4DF9 00C0 0000             		lea	($C00000).l,a6
0000046C 41F9 0000 0000             		lea	(Art_Text).l,a0
00000472 323C 027F                  		move.w	#$27F,d1
00000476                            
00000476                            Error_LoadGfx:
00000476 3C98                       		move.w	(a0)+,(a6)
00000478 51C9 FFFC                  		dbf	d1,Error_LoadGfx
0000047C                            
0000047C 7000                       		moveq	#0,d0			; clear	d0
0000047E 1038 FC44                  		move.b	($FFFFFC44).w,d0	; load error code
00000482 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000486 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000494 7212                       		moveq	#$12,d1			; number of characters
00000496                            
00000496                            Error_LoopChars:
00000496 7000                       		moveq	#0,d0
00000498 1018                       		move.b	(a0)+,d0
0000049A 0640 0790                  		addi.w	#$790,d0
0000049E 3C80                       		move.w	d0,(a6)			; display char
000004A0 51C9 FFF4                  		dbf	d1,Error_LoopChars	; repeat for number of characters
000004A4 4E75                       		rts	
000004A6                            ; End of function ShowErrorMsg
000004A6                            
000004A6                            ; ===========================================================================
000004A6 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004AA 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004AE 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004B2 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004B6 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004BA 0000                       		dc.w asc_5A6-ErrorText
000004BC 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004CF 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
000004E2 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
000004F5 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000508 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000051B 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000052E 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000541 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000554 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000567 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
0000057A 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
0000058E 00                         		even
0000058E                            
0000058E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000058E                            
0000058E                            
0000058E                            ;sub_5BA:				; XREF: loc_43A; loc_462
0000058E                            ShowErrorOffset:
0000058E 3CBC 07CA                  		move.w	#$7CA,(a6)	; display '$' char
00000592 7407                       		moveq	#7,d2
00000594                            
00000594 E998                       @loop:		rol.l	#4,d0
00000596 6100                       		bsr.s	ErrOffsetDigit
00000598 51CA FFFA                  		dbf	d2,@loop	; repeat 7 more times
0000059C 4E75                       		rts
0000059E                            
0000059E                            ; ---------------------------------------------------------------------------
0000059E                            
0000059E                            ErrOffsetDigit:
0000059E 3200                       		move.w	d0,d1
000005A0 0241 000F                  		andi.w	#$F,d1
000005A4 0C41 000A                  		cmpi.w	#$A,d1		; is digit more or equals to $A?
000005A8 6500                       		bcs.s	@display	; if not, branch
000005AA 5E41                       		addq.w	#7,d1
000005AC                            
000005AC 0641 07C0                  @display:	addi.w	#$7C0,d1
000005B0 3C81                       		move.w	d1,(a6)		; display digit
000005B2 4E75                       		rts
000005B4                            ; End of function ShowErrorOffset
000005B4                            
000005B4                            
000005B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005B4                            
000005B4                            
000005B4                            ErrorWaitForC:				; XREF: loc_478
000005B4 6100 0000                  		bsr.w	ReadJoypads
000005B8 0C38 0010 F605             		cmpi.b	#C,(Joypad|Press)	; is button C pressed?
000005BE 6600 FFF4                  		bne.w	ErrorWaitForC		; if not, branch
000005C2 4E75                       		rts	
000005C4                            ; End of function ErrorWaitForC
000005C4                            
000005C4                            ; ===========================================================================
000005C4                            
000005C4                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000AE4                            		even
00000AE4                            
00000AE4                            
00000AE4                            ; ===========================================================================
00000AE4                            ; Subroutine that runs during Vertical Interruption
00000AE4                            ; ===========================================================================
00000AE4                            
00000AE4                            ;loc_B10:
00000AE4                            VBlank:					; XREF: Vectors
00000AE4 48E7 FFFE                  		movem.l	d0-a6,-(sp)	; save all the registers to the stack
00000AE8 4A38 F62A                  		tst.b	($FFFFF62A).w	; is VBlank routine set to #0?
00000AEC 6700                       		beq.s	VBlank_Sub00	; if yes, branch
00000AEE 3039 00C0 0004             		move.w	($C00004).l,d0
00000AF4 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000AFE 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000B06 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w ; is Sega PAL (European)?
00000B0C 6700                       		beq.s	loc_B42		; if not, branch
00000B0E 303C 0700                  		move.w	#$700,d0
00000B12 51C8 FFFE                  		dbf	d0,*		; delay processor
00000B16                            
00000B16                            loc_B42:
00000B16 1038 F62A                  		move.b	($FFFFF62A).w,d0 ; load VBlank routine number
00000B1A 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w ; clear it
00000B20 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B26 0240 003E                  		andi.w	#$3E,d0
00000B2A 303B 0000                  		move.w	VBlank_Routines(pc,d0.w),d0
00000B2E 4EBB 0000                  		jsr	VBlank_Routines(pc,d0.w)
00000B32                            
00000B32                            loc_B5E:				; XREF: VBlank_Sub00
00000B32 4EB9 0000 0000             		jsr	UpdateMusic
00000B38                            
00000B38                            loc_B64:				; XREF: loc_D50
00000B38 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000B3C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6	; load saved registers from the stack
00000B40 4E73                       		rte
00000B42                            
00000B42                            ; ===========================================================================
00000B42                            ;off_B6E:
00000B42                            VBlank_Routines:
00000B42 0000                       		dc.w VBlank_Sub00-VBlank_Routines ; $00
00000B44 0000                       		dc.w VBlank_Sub02-VBlank_Routines ; $02
00000B46 0000                       		dc.w VBlank_Sub04-VBlank_Routines ; $04
00000B48 0000                       		dc.w VBlank_Sub06-VBlank_Routines ; $06
00000B4A 0000                       		dc.w VBlank_Sub08-VBlank_Routines ; $08
00000B4C 0000                       		dc.w VBlank_Sub0A-VBlank_Routines ; $0A
00000B4E 0000                       		dc.w VBlank_Sub0C-VBlank_Routines ; $0C
00000B50 0000                       		dc.w VBlank_Sub0E-VBlank_Routines ; $0E
00000B52 0000                       		dc.w VBlank_Sub10-VBlank_Routines ; $10
00000B54 0000                       		dc.w VBlank_Sub12-VBlank_Routines ; $12
00000B56 0000                       		dc.w VBlank_Sub14-VBlank_Routines ; $14
00000B58 0000                       		dc.w VBlank_Sub16-VBlank_Routines ; $16
00000B5A 0000                       		dc.w VBlank_Sub0C-VBlank_Routines ; $18
00000B5C                            ; ===========================================================================
00000B5C                            
00000B5C                            ;loc_B88:				; XREF: VBlank; VBlank_Routines
00000B5C                            VBlank_Sub00:
00000B5C 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w	; is mode pre-Level?
00000B62 6700                       		beq.s	loc_B9A			; if yes, branch
00000B64 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w	; is mode Level?
00000B6A 6600 FFC6                  		bne.w	loc_B5E			; if yes, branch
00000B6E                            
00000B6E                            loc_B9A:
00000B6E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w	; is level LZ ?
00000B74 6600 FFBC                  		bne.w	loc_B5E			; if not, branch
00000B78 3039 00C0 0004             		move.w	($C00004).l,d0
00000B7E 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; is Sega PAL (European)?
00000B84 6700                       		beq.s	loc_BBA			; if not, branch
00000B86 303C 0700                  		move.w	#$700,d0
00000B8A 51C8 FFFE                  		dbf	d0,*			; delay processor
00000B8E                            
00000B8E                            loc_BBA:
00000B8E 31FC 0001 F644             		move.w	#1,($FFFFF644).w	; enable HBlank
00000B94 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000B9C                            
00000B9C                            loc_BC8:
00000B9C 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000BA4 66F6                       		bne.s	loc_BC8
00000BA6 4A38 F64E                  		tst.b	($FFFFF64E).w		; is water above top of screen?
00000BAA 6600                       		bne.s	loc_BFE			; if yes, branch
00000BAC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BB2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BB8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BBE 3ABC 977F                  		move.w	#$977F,(a5)
00000BC2 3ABC C000                  		move.w	#$C000,(a5)
00000BC6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BCC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BD0 6000                       		bra.s	loc_C22
00000BD2                            ; ===========================================================================
00000BD2                            
00000BD2                            loc_BFE:				; XREF: loc_BC8
00000BD2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BD8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BDE 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000BE4 3ABC 977F                  		move.w	#$977F,(a5)
00000BE8 3ABC C000                  		move.w	#$C000,(a5)
00000BEC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BF2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BF6                            
00000BF6                            loc_C22:				; XREF: loc_BC8
00000BF6 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000BFA 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000C02 6000 FF2E                  		bra.w	loc_B5E
00000C06                            ; ===========================================================================
00000C06                            
00000C06                            ;loc_C32:
00000C06                            VBlank_Sub02:				; XREF: VBlank_Routines
00000C06 6100 0000                  		bsr.w	sub_106E
00000C0A                            
00000C0A                            ;loc_F9A:
00000C0A                            VBlank_Sub14:				; XREF: VBlank_Routines
00000C0A 4A78 F614                  		tst.w	($FFFFF614).w
00000C0E 6700 0000                  		beq.w	locret_C42
00000C12 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C16                            
00000C16                            locret_C42:
00000C16 4E75                       		rts	
00000C18                            ; ===========================================================================
00000C18                            
00000C18                            ;loc_C44:
00000C18                            VBlank_Sub04:				; XREF: VBlank_Routines
00000C18 6100 0000                  		bsr.w	sub_106E
00000C1C 4EB9 0000 0000             		jsr	sub_6886
00000C22 6100 0000                  		bsr.w	sub_1642
00000C26 4A78 F614                  		tst.w	($FFFFF614).w		; is there time	left on	the demo?
00000C2A 6700 0000                  		beq.w	locret_C5C		; if time is over, branch
00000C2E 5378 F614                  		subq.w	#1,($FFFFF614).w	; subtract 1 from time left
00000C32                            
00000C32                            locret_C5C:
00000C32 4E75                       		rts	
00000C34                            ; ===========================================================================
00000C34                            
00000C34                            ;loc_C5E:
00000C34                            VBlank_Sub06:				; XREF: VBlank_Routines
00000C34 6100 0000                  		bsr.w	sub_106E
00000C38 4E75                       		rts	
00000C3A                            ; ===========================================================================
00000C3A                            
00000C3A                            ;loc_C64:
00000C3A                            VBlank_Sub10:				; XREF: VBlank_Routines
00000C3A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000C40 6700 0000                  		beq.w	VBlank_Sub0A		; if yes, branch
00000C44                            
00000C44                            ;loc_C5E:
00000C44                            VBlank_Sub08:				; XREF: VBlank_Routines
00000C44 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000C4C                            
00000C4C                            loc_C76:
00000C4C 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000C54 66F6                       		bne.s	loc_C76		; if not, branch
00000C56 6100 0000                  		bsr.w	ReadJoypads
00000C5A 4A38 F64E                  		tst.b	($FFFFF64E).w
00000C5E 6600                       		bne.s	loc_CB0
00000C60 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C66 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C6C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C72 3ABC 977F                  		move.w	#$977F,(a5)
00000C76 3ABC C000                  		move.w	#$C000,(a5)
00000C7A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C80 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C84 6000                       		bra.s	loc_CD4
00000C86                            ; ===========================================================================
00000C86                            
00000C86                            loc_CB0:				; XREF: loc_C76
00000C86 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C8C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C92 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000C98 3ABC 977F                  		move.w	#$977F,(a5)
00000C9C 3ABC C000                  		move.w	#$C000,(a5)
00000CA0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CA6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CAA                            
00000CAA                            loc_CD4:				; XREF: loc_C76
00000CAA 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000CAE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CB4 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000CBA 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000CC0 3ABC 977F                  		move.w	#$977F,(a5)
00000CC4 3ABC 7C00                  		move.w	#$7C00,(a5)
00000CC8 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CCE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CD2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CD8 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000CDE 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000CE4 3ABC 977F                  		move.w	#$977F,(a5)
00000CE8 3ABC 7800                  		move.w	#$7800,(a5)
00000CEC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CF2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CF6 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CFC                            
00000CFC                            loc_D50:
00000CFC 33FC 0000 00A1 1100                        move.w	#0,($A11100).l
00000D04 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000D0A 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000D10 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000D16 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000D1C 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000D22 6400                       		bcc.s	Demo_Time
00000D24 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D2A 588F                       		addq.l	#4,sp
00000D2C 6000 FE0A                  		bra.w	loc_B64
00000D30                            
00000D30                            ; ---------------------------------------------------------------------------
00000D30                            ; Subroutine to	run a demo for an amount of time
00000D30                            ; ---------------------------------------------------------------------------
00000D30                            
00000D30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D30                            
00000D30                            
00000D30                            Demo_Time:				; XREF: loc_D50; HBlank
00000D30 4EB9 0000 0000             		jsr	LoadTilesAsYouMove
00000D36 4EB9 0000 0000             		jsr	AniArt_Load
00000D3C 4EB9 0000 0000             		jsr	HudUpdate
00000D42 6100 0000                  		bsr.w	sub_165E
00000D46 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000D4A 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000D4E 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000D52                            
00000D52                            Demo_TimeEnd:
00000D52 4E75                       		rts	
00000D54                            ; End of function Demo_Time
00000D54                            
00000D54                            ; ===========================================================================
00000D54                            
00000D54                            ;loc_DA6:
00000D54                            VBlank_Sub0A:				; XREF: VBlank_Routines
00000D54 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000D5C                            
00000D5C                            loc_DAE:
00000D5C 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000D64 66F6                       		bne.s	loc_DAE		; if not, branch
00000D66 6100 0000                  		bsr.w	ReadJoypads
00000D6A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D70 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000D76 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000D7C 3ABC 977F                  		move.w	#$977F,(a5)
00000D80 3ABC C000                  		move.w	#$C000,(a5)
00000D84 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000D8A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D8E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D94 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D9A 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000DA0 3ABC 977F                  		move.w	#$977F,(a5)
00000DA4 3ABC 7800                  		move.w	#$7800,(a5)
00000DA8 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000DAE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DB2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DB8 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000DBE 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000DC4 3ABC 977F                  		move.w	#$977F,(a5)
00000DC8 3ABC 7C00                  		move.w	#$7C00,(a5)
00000DCC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000DD2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DD6 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000DDE 6100 0000                  		bsr.w	PalCycle_SS
00000DE2 4EB9 0000 0000             		jsr	ProcessDMAQueue
00000DE8                            
00000DE8                            loc_E64:
00000DE8 4A78 F614                  		tst.w	($FFFFF614).w
00000DEC 6700 0000                  		beq.w	locret_E70
00000DF0 5378 F614                  		subq.w	#1,($FFFFF614).w
00000DF4                            
00000DF4                            locret_E70:
00000DF4 4E75                       		rts	
00000DF6                            ; ===========================================================================
00000DF6                            
00000DF6                            ;loc_E72:
00000DF6                            VBlank_Sub0C:				; XREF: VBlank_Routines
00000DF6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000DFE                            
00000DFE                            loc_E7A:
00000DFE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E06 66F6                       		bne.s	loc_E7A		; if not, branch
00000E08 6100 0000                  		bsr.w	ReadJoypads
00000E0C 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E10 6600                       		bne.s	loc_EB4
00000E12 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E18 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E1E 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E24 3ABC 977F                  		move.w	#$977F,(a5)
00000E28 3ABC C000                  		move.w	#$C000,(a5)
00000E2C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E32 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E36 6000                       		bra.s	loc_ED8
00000E38                            ; ===========================================================================
00000E38                            
00000E38                            loc_EB4:				; XREF: loc_E7A
00000E38 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E3E 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E44 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E4A 3ABC 977F                  		move.w	#$977F,(a5)
00000E4E 3ABC C000                  		move.w	#$C000,(a5)
00000E52 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E58 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E5C                            
00000E5C                            loc_ED8:				; XREF: loc_E7A
00000E5C 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E60 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E66 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000E6C 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000E72                            
00000E72                            loc_EEE:
00000E72 3ABC 977F                  		move.w	#$977F,(a5)
00000E76 3ABC 7C00                  		move.w	#$7C00,(a5)
00000E7A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E80 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E84 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E8A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000E90 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000E96 3ABC 977F                  		move.w	#$977F,(a5)
00000E9A 3ABC 7800                  		move.w	#$7800,(a5)
00000E9E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EA4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EA8 4EB9 0000 0000             		jsr	ProcessDMAQueue
00000EAE                            
00000EAE                            loc_F54:
00000EAE 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000EB6 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000EBC 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000EC2 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000EC8 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000ECE 4EB9 0000 0000             		jsr	LoadTilesAsYouMove
00000ED4 4EB9 0000 0000             		jsr	AniArt_Load
00000EDA 4EB9 0000 0000             		jsr	HudUpdate
00000EE0 6100 0000                  		bsr.w	sub_1642
00000EE4 4E75                       		rts	
00000EE6                            ; ===========================================================================
00000EE6                            
00000EE6                            ;loc_F8A:
00000EE6                            VBlank_Sub0E:				; XREF: VBlank_Routines
00000EE6 6100 0000                  		bsr.w	sub_106E
00000EEA 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EEE 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000EF4 4E75                       		rts	
00000EF6                            ; ===========================================================================
00000EF6                            
00000EF6                            ;loc_F9A:
00000EF6                            VBlank_Sub12:				; XREF: VBlank_Routines
00000EF6 6100 0000                  		bsr.w	sub_106E
00000EFA 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EFE 6000 0000                  		bra.w	sub_1642
00000F02                            ; ===========================================================================
00000F02                            
00000F02                            ;loc_F9A:
00000F02                            VBlank_Sub16:				; XREF: VBlank_Routines
00000F02 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000F0A                            
00000F0A                            loc_FAE:
00000F0A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000F12 66F6                       		bne.s	loc_FAE		; if not, branch
00000F14 6100 0000                  		bsr.w	ReadJoypads
00000F18 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F1E 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000F24 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000F2A 3ABC 977F                  		move.w	#$977F,(a5)
00000F2E 3ABC C000                  		move.w	#$C000,(a5)
00000F32 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F38 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F3C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F42 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F48 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F4E 3ABC 977F                  		move.w	#$977F,(a5)
00000F52 3ABC 7800                  		move.w	#$7800,(a5)
00000F56 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F5C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F60 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F66 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F6C 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F72 3ABC 977F                  		move.w	#$977F,(a5)
00000F76 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F7A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F80 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F84 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000F8C 4EB9 0000 0000             		jsr	ProcessDMAQueue
00000F92                            
00000F92                            loc_1060:
00000F92 4A78 F614                  		tst.w	($FFFFF614).w
00000F96 6700 0000                  		beq.w	locret_106C
00000F9A 5378 F614                  		subq.w	#1,($FFFFF614).w
00000F9E                            
00000F9E                            locret_106C:
00000F9E 4E75                       		rts	
00000FA0                            
00000FA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA0                            
00000FA0                            
00000FA0                            sub_106E:				; XREF: VBlank_Sub02; et al
00000FA0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FA8                            
00000FA8                            loc_1076:
00000FA8 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FB0 66F6                       		bne.s	loc_1076	; if not, branch
00000FB2 6100 0000                  		bsr.w	ReadJoypads
00000FB6 4A38 F64E                  		tst.b	($FFFFF64E).w
00000FBA 6600                       		bne.s	loc_10B0
00000FBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FC2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FC8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FCE 3ABC 977F                  		move.w	#$977F,(a5)
00000FD2 3ABC C000                  		move.w	#$C000,(a5)
00000FD6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FDC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FE0 6000                       		bra.s	loc_10D4
00000FE2                            ; ===========================================================================
00000FE2                            
00000FE2                            loc_10B0:				; XREF: sub_106E
00000FE2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FEE 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000FF4 3ABC 977F                  		move.w	#$977F,(a5)
00000FF8 3ABC C000                  		move.w	#$C000,(a5)
00000FFC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001002 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001006                            
00001006                            loc_10D4:				; XREF: sub_106E
00001006 4BF9 00C0 0004             		lea	($C00004).l,a5
0000100C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001012 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001018 3ABC 977F                  		move.w	#$977F,(a5)
0000101C 3ABC 7800                  		move.w	#$7800,(a5)
00001020 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001026 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000102A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001030 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001036 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000103C 3ABC 977F                  		move.w	#$977F,(a5)
00001040 3ABC 7C00                  		move.w	#$7C00,(a5)
00001044 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000104A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000104E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001056 4E75                       		rts
00001058                            ; End of function sub_106E
00001058                            
00001058                            ; ---------------------------------------------------------------------------
00001058                            ; Subroutine which runs during Horizontal Interruption
00001058                            ; Moves pallets from the RAM to CRAM
00001058                            ; ---------------------------------------------------------------------------
00001058                            
00001058                            ;PalToCRAM:
00001058                            HBlank:
00001058 46FC 2700                  		move	#$2700,sr	; disable interrupts
0000105C 4A78 F644                  		tst.w	($FFFFF644).w	; was the pallete set to change?
00001060 6700                       		beq.s	HBlank_Rts	; if not, branch
00001062 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001068 48E7 00C0                  		movem.l	a0-a1,-(sp)	; move registers to the stack
0000106C 43F9 00C0 0000             		lea	($C00000).l,a1
00001072 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001076 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000107E 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001080 2298                       		move.l	(a0)+,(a1)
00001082 2298                       		move.l	(a0)+,(a1)
00001084 2298                       		move.l	(a0)+,(a1)
00001086 2298                       		move.l	(a0)+,(a1)
00001088 2298                       		move.l	(a0)+,(a1)
0000108A 2298                       		move.l	(a0)+,(a1)
0000108C 2298                       		move.l	(a0)+,(a1)
0000108E 2298                       		move.l	(a0)+,(a1)
00001090 2298                       		move.l	(a0)+,(a1)
00001092 2298                       		move.l	(a0)+,(a1)
00001094 2298                       		move.l	(a0)+,(a1)
00001096 2298                       		move.l	(a0)+,(a1)
00001098 2298                       		move.l	(a0)+,(a1)
0000109A 2298                       		move.l	(a0)+,(a1)
0000109C 2298                       		move.l	(a0)+,(a1)
0000109E 2298                       		move.l	(a0)+,(a1)
000010A0 2298                       		move.l	(a0)+,(a1)
000010A2 2298                       		move.l	(a0)+,(a1)
000010A4 2298                       		move.l	(a0)+,(a1)
000010A6 2298                       		move.l	(a0)+,(a1)
000010A8 2298                       		move.l	(a0)+,(a1)
000010AA 2298                       		move.l	(a0)+,(a1)
000010AC 2298                       		move.l	(a0)+,(a1)
000010AE 2298                       		move.l	(a0)+,(a1)
000010B0 2298                       		move.l	(a0)+,(a1)
000010B2 2298                       		move.l	(a0)+,(a1)
000010B4 2298                       		move.l	(a0)+,(a1)
000010B6 2298                       		move.l	(a0)+,(a1)
000010B8 2298                       		move.l	(a0)+,(a1)
000010BA 2298                       		move.l	(a0)+,(a1)
000010BC 2298                       		move.l	(a0)+,(a1)
000010BE 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000010C4 4CDF 0300                  		movem.l	(sp)+,a0-a1	; load saved registers from the stack
000010C8 4A38 F64F                  		tst.b	($FFFFF64F).w
000010CC 6600                       		bne.s	loc_119E
000010CE                            
000010CE                            HBlank_Rts:
000010CE 4E73                       		rte
000010D0                            ; ===========================================================================
000010D0                            
000010D0                            loc_119E:				; XREF: PalToCRAM
000010D0 4238 F64F                  		clr.b	($FFFFF64F).w
000010D4 48E7 FFFE                  		movem.l	d0-a6,-(sp)	; move all the registers to the stack
000010D8 6100 FC56                  		bsr.w	Demo_Time
000010DC 4EB9 0000 0000             		jsr	UpdateMusic
000010E2 4CDF 7FFF                  		movem.l	(sp)+,d0-a6	; load saved registers from the stack
000010E6 4E73                       		rte	
000010E8                            ; End of function PalToCRAM
000010E8                            
000010E8                            ; ---------------------------------------------------------------------------
000010E8                            ; Subroutine to	initialise joypads
000010E8                            ; ---------------------------------------------------------------------------
000010E8                            
000010E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010E8                            
000010E8                            
000010E8                            JoypadInit:				; XREF: GameClrRAM
000010E8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000010F0                            
000010F0                            Joypad_WaitZ80:
000010F0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000010F8 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000010FA 7040                       		moveq	#$40,d0
000010FC 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00001102 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001108 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
0000110E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001116 4E75                       		rts	
00001118                            ; End of function JoypadInit
00001118                            
00001118                            ; ---------------------------------------------------------------------------
00001118                            ; Subroutine to	read joypad input, and send it to the RAM
00001118                            ; ---------------------------------------------------------------------------
00001118                            
00001118                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001118                            
00001118                            
00001118                            ReadJoypads:
00001118 41F8 F604                  		lea	(Joypad),a0	; address where joypad states are written
0000111C 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001122 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001124 5449                       		addq.w	#2,a1		; do the second	joypad
00001126                            
00001126                            Joypad_Read:
00001126 12BC 0000                  		move.b	#0,(a1)
0000112A 4E71                       		nop	
0000112C 4E71                       		nop	
0000112E 1011                       		move.b	(a1),d0
00001130 E508                       		lsl.b	#2,d0
00001132 0200 00C0                  		andi.b	#$C0,d0
00001136 12BC 0040                  		move.b	#$40,(a1)
0000113A 4E71                       		nop	
0000113C 4E71                       		nop	
0000113E 1211                       		move.b	(a1),d1
00001140 0201 003F                  		andi.b	#$3F,d1
00001144 8001                       		or.b	d1,d0
00001146 4600                       		not.b	d0
00001148 1210                       		move.b	(a0),d1
0000114A B101                       		eor.b	d0,d1
0000114C 10C0                       		move.b	d0,(a0)+
0000114E C200                       		and.b	d0,d1
00001150 10C1                       		move.b	d1,(a0)+
00001152 4E75                       		rts	
00001154                            ; End of function ReadJoypads
00001154                            
00001154                            
00001154                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001154                            
00001154                            
00001154                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001154 41F9 00C0 0004             		lea	($C00004).l,a0
0000115A 43F9 00C0 0000             		lea	($C00000).l,a1
00001160 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001166 7E12                       		moveq	#$12,d7
00001168                            
00001168                            VDP_Loop:
00001168 309A                       		move.w	(a2)+,(a0)
0000116A 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000116E                            
0000116E 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001174 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001178 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000117E 7000                       		moveq	#0,d0
00001180 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000118A 3E3C 003F                  		move.w	#$3F,d7
0000118E                            
0000118E                            VDP_ClrCRAM:
0000118E 3280                       		move.w	d0,(a1)
00001190 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001194                            
00001194 42B8 F616                  		clr.l	($FFFFF616).w
00001198 42B8 F61A                  		clr.l	($FFFFF61A).w
0000119C 2F01                       		move.l	d1,-(sp)
0000119E 4BF9 00C0 0004             		lea	($C00004).l,a5
000011A4 3ABC 8F01                  		move.w	#$8F01,(a5)
000011A8 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000011AE 3ABC 9780                  		move.w	#$9780,(a5)
000011B2 2ABC 4000 0080             		move.l	#$40000080,(a5)
000011B8 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000011C0                            
000011C0                            loc_128E:
000011C0 3215                       		move.w	(a5),d1
000011C2 0801 0001                  		btst	#1,d1
000011C6 66F8                       		bne.s	loc_128E
000011C8                            
000011C8 3ABC 8F02                  		move.w	#$8F02,(a5)
000011CC 221F                       		move.l	(sp)+,d1
000011CE 4E75                       		rts	
000011D0                            ; End of function VDPSetupGame
000011D0                            
000011D0                            ; ===========================================================================
000011D0 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000011D8 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000011E0 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000011E8 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000011F0 9001 9100 9200             		dc.w $9001, $9100, $9200
000011F6                            
000011F6                            ; ---------------------------------------------------------------------------
000011F6                            ; Subroutine to	clear the screen
000011F6                            ; ---------------------------------------------------------------------------
000011F6                            
000011F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011F6                            
000011F6                            
000011F6                            ClearScreen:
000011F6 4BF9 00C0 0004             		lea	($C00004).l,a5
000011FC 3ABC 8F01                  		move.w	#$8F01,(a5)
00001200 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001206 3ABC 9780                  		move.w	#$9780,(a5)
0000120A 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001210 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001218                            
00001218                            loc_12E6:
00001218 3215                       		move.w	(a5),d1
0000121A 0801 0001                  		btst	#1,d1
0000121E 66F8                       		bne.s	loc_12E6
00001220                            
00001220 3ABC 8F02                  		move.w	#$8F02,(a5)
00001224 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122A 3ABC 8F01                  		move.w	#$8F01,(a5)
0000122E 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001234 3ABC 9780                  		move.w	#$9780,(a5)
00001238 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000123E 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001246                            
00001246                            loc_1314:
00001246 3215                       		move.w	(a5),d1
00001248 0801 0001                  		btst	#1,d1
0000124C 66F8                       		bne.s	loc_1314
0000124E                            
0000124E 3ABC 8F02                  		move.w	#$8F02,(a5)
00001252 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000125A 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001262 43F8 F800                  		lea	($FFFFF800).w,a1
00001266 7000                       		moveq	#0,d0
00001268 323C 00A0                  		move.w	#$A0,d1
0000126C                            
0000126C                            loc_133A:
0000126C 22C0                       		move.l	d0,(a1)+
0000126E 51C9 FFFC                  		dbf	d1,loc_133A
00001272                            
00001272 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001276 7000                       		moveq	#0,d0
00001278 323C 0100                  		move.w	#$100,d1
0000127C                            
0000127C                            loc_134A:
0000127C 22C0                       		move.l	d0,(a1)+
0000127E 51C9 FFFC                  		dbf	d1,loc_134A
00001282 4E75                       		rts	
00001284                            ; End of function ClearScreen
00001284                            
00001284                            ; ---------------------------------------------------------------------------
00001284                            ; Subroutine to	load the sound driver
00001284                            ; ---------------------------------------------------------------------------
00001284                            
00001284                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001284                            
00001284                            
00001284                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001284 4E71                       		nop
00001286 303C 0100                  		move.w	#$100,d0
0000128A 33C0 00A1 1100             		move.w	d0,($A11100).l
00001290 33C0 00A1 1200             		move.w	d0,($A11200).l
00001296 41F9 0000 0000             		lea	(MegaPCM).l,a0
0000129C 43F9 00A0 0000             		lea	($A00000).l,a1
000012A2 323C 0000                  		move.w	#(MegaPCM_End-MegaPCM)-1,d1
000012A6                            
000012A6 12D8                       	@Load:	move.b	(a0)+,(a1)+
000012A8 51C9 FFFC                  		dbf	d1,@Load
000012AC 7200                       		moveq	#0,d1
000012AE 33C1 00A1 1200             		move.w	d1,($A11200).l
000012B4 4E71                       		nop
000012B6 4E71                       		nop
000012B8 4E71                       		nop
000012BA 4E71                       		nop
000012BC 33C0 00A1 1200             		move.w	d0,($A11200).l
000012C2 33C1 00A1 1100             		move.w	d1,($A11100).l
000012C8 4E75                       		rts
000012CA                            ; End of function SoundDriverLoad
000012CA                            
000012CA                            ; ---------------------------------------------------------------------------
000012CA                            ; Subroutine to	play a sound or	music track
000012CA                            ; ---------------------------------------------------------------------------
000012CA                            
000012CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012CA                            
000012CA                            
000012CA                            PlaySound:
000012CA 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000012CE 4E75                       		rts	
000012D0                            ; End of function PlaySound
000012D0                            
000012D0                            ; ---------------------------------------------------------------------------
000012D0                            ; Subroutine to	play a special sound/music (E0-E4)
000012D0                            ;
000012D0                            ; E0 - Fade out
000012D0                            ; E1 - Sega
000012D0                            ; E2 - Speed up
000012D0                            ; E3 - Normal speed
000012D0                            ; E4 - Stop
000012D0                            ; ---------------------------------------------------------------------------
000012D0                            
000012D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012D0                            
000012D0                            
000012D0                            PlaySound_Special:
000012D0 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000012D4 4E75                       		rts	
000012D6                            ; End of function PlaySound_Special
000012D6                            
000012D6                            ; ===========================================================================
000012D6                            
000012D6                            ; ---------------------------------------------------------------------------
000012D6                            ; Subroutine to	pause the game
000012D6                            ; ---------------------------------------------------------------------------
000012D6                            
000012D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012D6                            
000012D6                            
000012D6                            PauseGame:				; XREF: Level_MainLoop; et al
000012D6 4E71                       		nop	
000012D8 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000012DC 6700                       		beq.s	Unpause		; if not, branch
000012DE 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000012E2 6600                       		bne.s	loc_13BE	; if yes, branch
000012E4                            
000012E4 0838 0007 F605             		btst	#iStart,(Joypad|Press)	; is Start button pressed?
000012EA 6700                       		beq.s	Pause_DoNothing		; if not, branch
000012EC                            
000012EC                            loc_13BE:
000012EC 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000012F2 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000012F8                            
000012F8                            loc_13CA:
000012F8 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000012FE 6100 0000                  		bsr.w	DelayProgram
00001302 4A38 FFE1                  		tst.b	($FFFFFFE1).w		; is slow-motion cheat on?
00001306 6700                       		beq.s	Pause_ChkStart		; if not, branch
00001308 0838 0006 F605             		btst	#iA,(Joypad|Press)	; is button A pressed?
0000130E 6700                       		beq.s	Pause_ChkBC		; if not, branch
00001310 11FC 0004 F600             		move.b	#4,($FFFFF600).w	; set game mode to 4 (title screen)
00001316 4E71                       		nop	
00001318 6000                       		bra.s	loc_1404
0000131A                            ; ===========================================================================
0000131A                            
0000131A                            Pause_ChkBC:				; XREF: PauseGame
0000131A 0838 0005 F604             		btst	#iB,(Joypad|Held)	; is button B held?
00001320 6600                       		bne.s	Pause_SlowMo		; if yes, branch
00001322 0838 0004 F605             		btst	#iC,(Joypad|Press) 	; is button C pressed?
00001328 6600                       		bne.s	Pause_SlowMo		; if yes, branch
0000132A                            
0000132A                            Pause_ChkStart:
0000132A 0838 0007 F605             		btst	#iStart,(Joypad|Press)	; is Start button pressed?
00001330 67C6                       		beq.s	loc_13CA		; if not, branch
00001332                            
00001332                            loc_1404:
00001332 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001338                            
00001338                            Unpause:
00001338 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
0000133E                            
0000133E                            Pause_DoNothing:
0000133E 4E75                       		rts	
00001340                            ; ===========================================================================
00001340                            
00001340                            Pause_SlowMo:				; XREF: PauseGame
00001340 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001346 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000134C 4E75                       		rts	
0000134E                            ; End of function PauseGame
0000134E                            
0000134E                            ; ---------------------------------------------------------------------------
0000134E                            ; Subroutine to	display	patterns via the VDP
0000134E                            ; ---------------------------------------------------------------------------
0000134E                            
0000134E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000134E                            
0000134E                            
0000134E                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
0000134E 4DF9 00C0 0000             		lea	($C00000).l,a6
00001354 283C 0080 0000             		move.l	#$800000,d4
0000135A                            ;loc_142C:
0000135A                            VDPGfx_Loop:
0000135A 2D40 0004                  		move.l	d0,4(a6)	; set VDP access
0000135E 3601                       		move.w	d1,d3		; load cols counter to d3
00001360                            ;loc_1432:
00001360                            VDPGfx_Char:
00001360 3C99                       		move.w	(a1)+,(a6)	; move plane mappings to VRAM
00001362 51CB FFFC                  		dbf	d3,VDPGfx_Char	; repeat for the amount of cols
00001366                            
00001366 D084                       		add.l	d4,d0		; switch to the next screen row
00001368 51CA FFF0                                  dbf	d2,VDPGfx_Loop	; repeat for the amount of rows
0000136C 4E75                       		rts
0000136E                            ; End of function ShowVDPGraphics
0000136E                            
0000136E                            ; ---------------------------------------------------------------------------
0000136E                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
0000136E                            ; to be issued the next time ProcessDMAQueue is called.
0000136E                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
0000136E                            ; by issuing the commands (this subroutine DOES check for overflow)
0000136E                            ; ---------------------------------------------------------------------------
0000136E                             
0000136E                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000136E                            
0000136E                            QueueDMATransfer:
0000136E 2278 C8FC                  		movea.l	($FFFFC8FC).w,a1
00001372 B2FC C8FC                  		cmpa.w	#$C8FC,a1
00001376 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
00001378                             
00001378 303C 9300                  		move.w	#$9300,d0 ; command to specify DMA transfer length & $00FF
0000137C 1003                       		move.b	d3,d0
0000137E 32C0                       		move.w	d0,(a1)+ ; store command
00001380                             
00001380 303C 9400                  		move.w	#$9400,d0 ; command to specify DMA transfer length & $FF00
00001384 E04B                       		lsr.w	#8,d3
00001386 1003                       		move.b	d3,d0
00001388 32C0                       		move.w	d0,(a1)+ ; store command
0000138A                             
0000138A 303C 9500                  		move.w	#$9500,d0 ; command to specify source address & $0001FE
0000138E E289                       		lsr.l	#1,d1
00001390 1001                       		move.b	d1,d0
00001392 32C0                       		move.w	d0,(a1)+ ; store command
00001394                             
00001394 303C 9600                  		move.w	#$9600,d0 ; command to specify source address & $01FE00
00001398 E089                       		lsr.l	#8,d1
0000139A 1001                       		move.b	d1,d0
0000139C 32C0                       		move.w	d0,(a1)+ ; store command
0000139E                             
0000139E 303C 9700                  		move.w	#$9700,d0 ; command to specify source address & $FE0000
000013A2 E089                       		lsr.l	#8,d1
000013A4 1001                       		move.b	d1,d0
000013A6 32C0                       		move.w	d0,(a1)+ ; store command
000013A8                             
000013A8 0282 0000 FFFF             		andi.l	#$FFFF,d2 ; command to specify destination address and begin DMA
000013AE E58A                       		lsl.l	#2,d2
000013B0 E44A                       		lsr.w	#2,d2
000013B2 4842                       		swap	d2
000013B4 0082 4000 0080             		ori.l	#$40000080,d2 ; set bits to specify VRAM transfer
000013BA 22C2                       		move.l	d2,(a1)+ ; store command
000013BC                             
000013BC 21C9 C8FC                  		move.l	a1,($FFFFC8FC).w ; set the next free slot address
000013C0 B2FC C8FC                  		cmpa.w	#$C8FC,a1
000013C4 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
000013C6 32BC 0000                  		move.w	#0,(a1) ; put a stop token at the end of the used part of the buffer
000013CA                            
000013CA                            QueueDMATransfer_Done:
000013CA 4E75                       		rts
000013CC                            ; End of function QueueDMATransfer
000013CC                             
000013CC                             
000013CC                            ; ---------------------------------------------------------------------------
000013CC                            ; Subroutine for issuing all VDP commands that were queued
000013CC                            ; ---------------------------------------------------------------------------
000013CC                             
000013CC                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000013CC                            
000013CC                            ProcessDMAQueue:
000013CC 4BF9 00C0 0004             		lea	($C00004).l,a5
000013D2 43F8 C800                  		lea	($FFFFC800).w,a1
000013D6                            
000013D6                            ProcessDMAQueue_Loop:
000013D6 3019                       		move.w	(a1)+,d0
000013D8 6700                       		beq.s	ProcessDMAQueue_Done ; branch if we reached a stop token
000013DA 3A80                       		move.w	d0,(a5)		; transfer length
000013DC 3A99                       		move.w	(a1)+,(a5)	; transfer length
000013DE 3A99                       		move.w	(a1)+,(a5)	; source address
000013E0 3A99                       		move.w	(a1)+,(a5)	; source address
000013E2 3A99                       		move.w	(a1)+,(a5)	; source address
000013E4 3A99                       		move.w	(a1)+,(a5)	; destination
000013E6 3A99                       		move.w	(a1)+,(a5)	; destination
000013E8 B2FC C8FC                  		cmpa.w	#$C8FC,a1
000013EC 66E8                       		bne.s	ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
000013EE                            
000013EE                            ProcessDMAQueue_Done:
000013EE 31FC 0000 C800             		move.w	#0,($FFFFC800).w
000013F4 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
000013FC 4E75                       		rts
000013FE                            ; End of function ProcessDMAQueue
000013FE                            
000013FE                            
000013FE                            ; ---------------------------------------------------------------------------
000013FE                            ; Nemesis decompression	algorithm
000013FE                            ; ---------------------------------------------------------------------------
000013FE                            
000013FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013FE                            
000013FE                            
000013FE                            NemDec:
000013FE 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)	; save registers to the stack
00001402 47F9 0000 0000             		lea	(loc_1502).l,a3
00001408 49F9 00C0 0000             		lea	($C00000).l,a4
0000140E 6000                       		bra.s	loc_145C
00001410                            ; ===========================================================================
00001410 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)	; save registers to the stack
00001414 47F9 0000 0000             		lea	(loc_1518).l,a3
0000141A                            
0000141A                            loc_145C:				; XREF: NemDec
0000141A 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000141E 3418                       		move.w	(a0)+,d2
00001420 E34A                       		lsl.w	#1,d2
00001422 6400                       		bcc.s	loc_146A
00001424 D6FC 000A                  		adda.w	#$A,a3
00001428                            
00001428                            loc_146A:
00001428 E54A                       		lsl.w	#2,d2
0000142A 3A42                       		movea.w	d2,a5
0000142C 7608                       		moveq	#8,d3
0000142E 7400                       		moveq	#0,d2
00001430 7800                       		moveq	#0,d4
00001432 6100 0000                  		bsr.w	NemDec4
00001436 1A18                       		move.b	(a0)+,d5
00001438 E145                       		asl.w	#8,d5
0000143A 1A18                       		move.b	(a0)+,d5
0000143C 3C3C 0010                  		move.w	#$10,d6
00001440 6100                       		bsr.s	NemDec2
00001442 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5	; load saved registers
00001446 4E75                       		rts	
00001448                            ; End of function NemDec
00001448                            
00001448                            
00001448                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001448                            
00001448                            
00001448                            NemDec2:				; XREF: NemDec
00001448 3E06                       		move.w	d6,d7
0000144A 5147                       		subq.w	#8,d7
0000144C 3205                       		move.w	d5,d1
0000144E EE69                       		lsr.w	d7,d1
00001450 0C01 00FC                  		cmpi.b	#-4,d1
00001454 6400                       		bcc.s	loc_14D6
00001456 0241 00FF                  		andi.w	#$FF,d1
0000145A D241                       		add.w	d1,d1
0000145C 1031 1000                  		move.b	(a1,d1.w),d0
00001460 4880                       		ext.w	d0
00001462 9C40                       		sub.w	d0,d6
00001464 0C46 0009                  		cmpi.w	#9,d6
00001468 6400                       		bcc.s	loc_14B2
0000146A 5046                       		addq.w	#8,d6
0000146C E145                       		asl.w	#8,d5
0000146E 1A18                       		move.b	(a0)+,d5
00001470                            
00001470                            loc_14B2:
00001470 1231 1001                  		move.b	1(a1,d1.w),d1
00001474 3001                       		move.w	d1,d0
00001476 0241 000F                  		andi.w	#$F,d1
0000147A 0240 00F0                  		andi.w	#$F0,d0
0000147E                            
0000147E                            loc_14C0:				; XREF: NemDec3
0000147E E848                       		lsr.w	#4,d0
00001480                            
00001480                            loc_14C2:				; XREF: NemDec3
00001480 E98C                       		lsl.l	#4,d4
00001482 8801                       		or.b	d1,d4
00001484 5343                       		subq.w	#1,d3
00001486 6600                       		bne.s	loc_14D0
00001488 4ED3                       		jmp	(a3)
0000148A                            ; End of function NemDec2
0000148A                            
0000148A                            
0000148A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000148A                            
0000148A                            
0000148A                            NemDec3:				; XREF: loc_1502
0000148A 7800                       		moveq	#0,d4
0000148C 7608                       		moveq	#8,d3
0000148E                            
0000148E                            loc_14D0:				; XREF: NemDec2
0000148E 51C8 FFF0                  		dbf	d0,loc_14C2
00001492 60B4                       		bra.s	NemDec2
00001494                            ; ===========================================================================
00001494                            
00001494                            loc_14D6:				; XREF: NemDec2
00001494 5D46                       		subq.w	#6,d6
00001496 0C46 0009                  		cmpi.w	#9,d6
0000149A 6400                       		bcc.s	loc_14E4
0000149C 5046                       		addq.w	#8,d6
0000149E E145                       		asl.w	#8,d5
000014A0 1A18                       		move.b	(a0)+,d5
000014A2                            
000014A2                            loc_14E4:				; XREF: NemDec3
000014A2 5F46                       		subq.w	#7,d6
000014A4 3205                       		move.w	d5,d1
000014A6 EC69                       		lsr.w	d6,d1
000014A8 3001                       		move.w	d1,d0
000014AA 0241 000F                  		andi.w	#$F,d1
000014AE 0240 0070                  		andi.w	#$70,d0
000014B2 0C46 0009                  		cmpi.w	#9,d6
000014B6 64C6                       		bcc.s	loc_14C0
000014B8 5046                       		addq.w	#8,d6
000014BA E145                       		asl.w	#8,d5
000014BC 1A18                       		move.b	(a0)+,d5
000014BE 60BE                       		bra.s	loc_14C0
000014C0                            ; End of function NemDec3
000014C0                            
000014C0                            ; ===========================================================================
000014C0                            
000014C0                            loc_1502:				; XREF: NemDec
000014C0 2884                       		move.l	d4,(a4)
000014C2 534D                       		subq.w	#1,a5
000014C4 380D                       		move.w	a5,d4
000014C6 66C2                       		bne.s	NemDec3
000014C8 4E75                       		rts	
000014CA                            ; ===========================================================================
000014CA B982                       		eor.l	d4,d2
000014CC 2882                       		move.l	d2,(a4)
000014CE 534D                       		subq.w	#1,a5
000014D0 380D                       		move.w	a5,d4
000014D2 66B6                       		bne.s	NemDec3
000014D4 4E75                       		rts	
000014D6                            ; ===========================================================================
000014D6                            
000014D6                            loc_1518:				; XREF: NemDec
000014D6 28C4                       		move.l	d4,(a4)+
000014D8 534D                       		subq.w	#1,a5
000014DA 380D                       		move.w	a5,d4
000014DC 66AC                       		bne.s	NemDec3
000014DE 4E75                       		rts	
000014E0                            ; ===========================================================================
000014E0 B982                       		eor.l	d4,d2
000014E2 28C2                       		move.l	d2,(a4)+
000014E4 534D                       		subq.w	#1,a5
000014E6 380D                       		move.w	a5,d4
000014E8 66A0                       		bne.s	NemDec3
000014EA 4E75                       		rts	
000014EC                            
000014EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014EC                            
000014EC                            
000014EC                            NemDec4:				; XREF: NemDec
000014EC 1018                       		move.b	(a0)+,d0
000014EE                            
000014EE                            loc_1530:
000014EE 0C00 00FF                  		cmpi.b	#-1,d0
000014F2 6600                       		bne.s	loc_1538
000014F4 4E75                       		rts	
000014F6                            ; ===========================================================================
000014F6                            
000014F6                            loc_1538:				; XREF: NemDec4
000014F6 3E00                       		move.w	d0,d7
000014F8                            
000014F8                            loc_153A:
000014F8 1018                       		move.b	(a0)+,d0
000014FA 0C00 0080                  		cmpi.b	#$80,d0
000014FE 64EE                       		bcc.s	loc_1530
00001500 1200                       		move.b	d0,d1
00001502 0247 000F                  		andi.w	#$F,d7
00001506 0241 0070                  		andi.w	#$70,d1
0000150A 8E41                       		or.w	d1,d7
0000150C 0240 000F                  		andi.w	#$F,d0
00001510 1200                       		move.b	d0,d1
00001512 E149                       		lsl.w	#8,d1
00001514 8E41                       		or.w	d1,d7
00001516 7208                       		moveq	#8,d1
00001518 9240                       		sub.w	d0,d1
0000151A 6600                       		bne.s	loc_1568
0000151C 1018                       		move.b	(a0)+,d0
0000151E D040                       		add.w	d0,d0
00001520 3387 0000                  		move.w	d7,(a1,d0.w)
00001524 60D2                       		bra.s	loc_153A
00001526                            ; ===========================================================================
00001526                            
00001526                            loc_1568:				; XREF: NemDec4
00001526 1018                       		move.b	(a0)+,d0
00001528 E368                       		lsl.w	d1,d0
0000152A D040                       		add.w	d0,d0
0000152C 7A01                       		moveq	#1,d5
0000152E E36D                       		lsl.w	d1,d5
00001530 5345                       		subq.w	#1,d5
00001532                            
00001532                            loc_1574:
00001532 3387 0000                  		move.w	d7,(a1,d0.w)
00001536 5440                       		addq.w	#2,d0
00001538 51CD FFF8                  		dbf	d5,loc_1574
0000153C 60BA                       		bra.s	loc_153A
0000153E                            ; End of function NemDec4
0000153E                            
0000153E                            ; ===========================================================================
0000153E                            ; Subroutines to put PLC block into the queue
0000153E                            ; ===========================================================================
0000153E                            ; Note:		Queue can hold no more than 21 items
0000153E                            ; Input:	d0 - PLC block index
0000153E                            ; ---------------------------------------------------------------------------
0000153E                            
0000153E                            LoadPLC:
0000153E 48E7 0060                  		movem.l	a1-a2,-(sp)	; move registers to the stack
00001542 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001548 D040                       		add.w	d0,d0		; double block index
0000154A 3031 0000                  		move.w	(a1,d0.w),d0
0000154E 43F1 0000                  		lea	(a1,d0.w),a1	 ; load PLC block to a1
00001552 45F8 F680                  		lea	($FFFFF680).w,a2 ; load PLC queue to a2
00001556                            
00001556                            @FindSlot:
00001556 4A92                       		tst.l	(a2)		; is the slot in queue empty?
00001558 6700                       		beq.s	@AddToQueue	; if yes, branch
0000155A 5C4A                       		addq.w	#6,a2		; next slot
0000155C 60F8                       		bra.s	@FindSlot
0000155E                            ; ===========================================================================
0000155E                            
0000155E                            @AddToQueue:
0000155E 3019                       		move.w	(a1)+,d0	; move number of items in block to d0
00001560 6B00                       		bmi.s	LoadPLC_Rts	; if it's negative (>=$80), then something is wrong, exit
00001562                            
00001562                            @WriteCues:
00001562 24D9                       		move.l	(a1)+,(a2)+
00001564 34D9                       		move.w	(a1)+,(a2)+
00001566 51C8 FFFA                  		dbf	d0,@WriteCues	; repeat for the number of items
0000156A                            
0000156A                            LoadPLC_Rts:
0000156A 4CDF 0600                  		movem.l	(sp)+,a1-a2	; load saved registers from the stack
0000156E 4E75                       		rts	
00001570                            ; End of function LoadPLC
00001570                            
00001570                            
00001570                            ; ---------------------------------------------------------------------------
00001570                            ; This subroutine does the same as LoadPLC, but it clears PLC queue first
00001570                            ; ---------------------------------------------------------------------------
00001570                            
00001570                            LoadPLC2:
00001570 48E7 0060                  		movem.l	a1-a2,-(sp)	; move registers to the stack
00001574 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000157A D040                       		add.w	d0,d0		; double block index
0000157C 3031 0000                  		move.w	(a1,d0.w),d0
00001580 43F1 0000                  		lea	(a1,d0.w),a1	; load PLC block to a1
00001584 6100                       		bsr.s	ClearPLC
00001586 45F8 F680                  		lea	($FFFFF680).w,a2 ; load PLC queue to a2
0000158A 3019                       		move.w	(a1)+,d0	; move number of items in block to d0
0000158C 6B00                       		bmi.s	LoadPLC2_Rts	; if it's negative (>=$80), then something is wrong, exit
0000158E                            
0000158E                            @WriteCues:
0000158E 24D9                       		move.l	(a1)+,(a2)+
00001590 34D9                       		move.w	(a1)+,(a2)+
00001592 51C8 FFFA                  		dbf	d0,@WriteCues	; repeat for the number of items
00001596                            
00001596                            LoadPLC2_Rts:
00001596 4CDF 0600                  		movem.l	(sp)+,a1-a2	; load saved registers from the stack
0000159A 4E75                       		rts	
0000159C                            ; End of function LoadPLC2
0000159C                            
0000159C                            ; ---------------------------------------------------------------------------
0000159C                            ; Subroutine to	clear the pattern load cues
0000159C                            ; ---------------------------------------------------------------------------
0000159C                            
0000159C                            ClearPLC:				; XREF: LoadPLC2
0000159C 45F8 F680                  		lea	($FFFFF680).w,a2 ; load PLC queue
000015A0 701F                       		moveq	#$1F,d0
000015A2 429A                       @ClearLoop:	clr.l	(a2)+
000015A4 51C8 FFFC                  		dbf	d0,@ClearLoop	; repeat $1F more times
000015A8 4E75                       		rts
000015AA                            ; End of function ClearPLC
000015AA                            
000015AA                            
000015AA                            ; ---------------------------------------------------------------------------
000015AA                            ; Subroutine to decompress graphics in PLC queue
000015AA                            ; Decompress 3 tiles every frame
000015AA                            ; ---------------------------------------------------------------------------
000015AA                            
000015AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015AA                            
000015AA                            
000015AA                            RunPLC_RAM:				; XREF: Pal_FadeTo
000015AA 4AB8 F680                  		tst.l	($FFFFF680).w	; is PLC queue empty?
000015AE 6700                       		beq.s	RunPLC_Rts	; if yes, branch
000015B0 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000015B4 6600                       		bne.s	RunPLC_Rts
000015B6 2078 F680                  		movea.l	($FFFFF680).w,a0 ; load PLC queue
000015BA 47F9 0000 14C0             		lea	(loc_1502).l,a3
000015C0 43F8 AA00                  		lea	($FFFFAA00).w,a1
000015C4 3418                       		move.w	(a0)+,d2
000015C6 6A00                       		bpl.s	loc_160E
000015C8 D6FC 000A                  		adda.w	#$A,a3
000015CC                            
000015CC                            loc_160E:
000015CC 0242 7FFF                  		andi.w	#$7FFF,d2
000015D0 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
000015D4 6100 FF16                  		bsr.w	NemDec4
000015D8 1A18                       		move.b	(a0)+,d5
000015DA E145                       		asl.w	#8,d5
000015DC 1A18                       		move.b	(a0)+,d5
000015DE 7C10                       		moveq	#$10,d6
000015E0 7000                       		moveq	#0,d0
000015E2 21C8 F680                  		move.l	a0,($FFFFF680).w
000015E6 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000015EA 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000015EE 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000015F2 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000015F6 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000015FA 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000015FE                            
000015FE                            RunPLC_Rts:
000015FE 4E75                       		rts	
00001600                            ; End of function RunPLC_RAM
00001600                            
00001600                            
00001600                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001600                            
00001600                            
00001600                            sub_1642:				; XREF: VBlank_Sub04; loc_F54; VBlank_Sub12
00001600 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001604 6700 0000                  		beq.w	locret_16DA
00001608 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
0000160E 7000                       		moveq	#0,d0
00001610 3038 F684                  		move.w	($FFFFF684).w,d0
00001614 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000161A 6000                       		bra.s	loc_1676
0000161C                            ; End of function sub_1642
0000161C                            
0000161C                            
0000161C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000161C                            
0000161C                            
0000161C                            sub_165E:				; XREF: Demo_Time
0000161C 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001620 6700                       		beq.s	locret_16DA
00001622 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001628 7000                       		moveq	#0,d0
0000162A 3038 F684                  		move.w	($FFFFF684).w,d0
0000162E 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001634                            
00001634                            loc_1676:				; XREF: sub_1642
00001634 49F9 00C0 0004             		lea	($C00004).l,a4
0000163A E588                       		lsl.l	#2,d0
0000163C E448                       		lsr.w	#2,d0
0000163E 0040 4000                  		ori.w	#$4000,d0
00001642 4840                       		swap	d0
00001644 2880                       		move.l	d0,(a4)
00001646 594C                       		subq.w	#4,a4
00001648 2078 F680                  		movea.l	($FFFFF680).w,a0
0000164C 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001650 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001654 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001658 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
0000165C 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001660 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001664 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001668                            
00001668                            loc_16AA:				; XREF: sub_165E
00001668 3A7C 0008                  		movea.w	#8,a5
0000166C 6100 FE1C                  		bsr.w	NemDec3
00001670 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
00001674 6700                       		beq.s	loc_16DC
00001676 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
0000167A 66EC                       		bne.s	loc_16AA
0000167C 21C8 F680                  		move.l	a0,($FFFFF680).w
00001680 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001684 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001688 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
0000168C 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001690 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001694 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001698                            
00001698                            locret_16DA:				; XREF: sub_1642
00001698 4E75                       		rts	
0000169A                            ; ===========================================================================
0000169A                            
0000169A                            loc_16DC:				; XREF: sub_165E
0000169A 41F8 F680                  		lea	($FFFFF680).w,a0
0000169E 7015                       		moveq	#$15,d0
000016A0                            
000016A0                            loc_16E2:				; XREF: sub_165E
000016A0 20E8 0006                  		move.l	6(a0),(a0)+
000016A4 51C8 FFFA                  		dbf	d0,loc_16E2
000016A8 4E75                       		rts	
000016AA                            ; End of function sub_165E
000016AA                            
000016AA                            ; ---------------------------------------------------------------------------
000016AA                            ; Subroutine to	execute	the pattern load cue
000016AA                            ; ---------------------------------------------------------------------------
000016AA                            
000016AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AA                            
000016AA                            
000016AA                            RunPLC_ROM:
000016AA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000016B0 D040                       		add.w	d0,d0
000016B2 3031 0000                  		move.w	(a1,d0.w),d0
000016B6 43F1 0000                  		lea	(a1,d0.w),a1
000016BA 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
000016BC                            
000016BC                            RunPLC_Loop:
000016BC 2059                       		movea.l	(a1)+,a0	; get art pointer
000016BE 7000                       		moveq	#0,d0
000016C0 3019                       		move.w	(a1)+,d0	; get VRAM address
000016C2 E588                       		lsl.l	#2,d0		; divide address by $20
000016C4 E448                       		lsr.w	#2,d0
000016C6 0040 4000                  		ori.w	#$4000,d0
000016CA 4840                       		swap	d0
000016CC 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
000016D2 6100 FD2A                  		bsr.w	NemDec		; decompress
000016D6 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
000016DA 4E75                       		rts	
000016DC                            ; End of function RunPLC_ROM
000016DC                            
000016DC                            ; ---------------------------------------------------------------------------
000016DC                            ; Enigma decompression algorithm
000016DC                            ; ---------------------------------------------------------------------------
000016DC                            
000016DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016DC                            
000016DC                            
000016DC                            EniDec:
000016DC 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)	; save registers to the stack
000016E0 3640                       		movea.w	d0,a3
000016E2 1018                       		move.b	(a0)+,d0
000016E4 4880                       		ext.w	d0
000016E6 3A40                       		movea.w	d0,a5
000016E8 1818                       		move.b	(a0)+,d4
000016EA E70C                       		lsl.b	#3,d4
000016EC 3458                       		movea.w	(a0)+,a2
000016EE D4CB                       		adda.w	a3,a2
000016F0 3858                       		movea.w	(a0)+,a4
000016F2 D8CB                       		adda.w	a3,a4
000016F4 1A18                       		move.b	(a0)+,d5
000016F6 E145                       		asl.w	#8,d5
000016F8 1A18                       		move.b	(a0)+,d5
000016FA 7C10                       		moveq	#$10,d6
000016FC                            
000016FC                            loc_173E:				; XREF: loc_1768
000016FC 7007                       		moveq	#7,d0
000016FE 3E06                       		move.w	d6,d7
00001700 9E40                       		sub.w	d0,d7
00001702 3205                       		move.w	d5,d1
00001704 EE69                       		lsr.w	d7,d1
00001706 0241 007F                  		andi.w	#$7F,d1
0000170A 3401                       		move.w	d1,d2
0000170C 0C41 0040                  		cmpi.w	#$40,d1
00001710 6400                       		bcc.s	loc_1758
00001712 7006                       		moveq	#6,d0
00001714 E24A                       		lsr.w	#1,d2
00001716                            
00001716                            loc_1758:
00001716 6100 0000                  		bsr.w	sub_188C
0000171A 0242 000F                  		andi.w	#$F,d2
0000171E E849                       		lsr.w	#4,d1
00001720 D241                       		add.w	d1,d1
00001722 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001726                            ; End of function EniDec
00001726                            
00001726                            ; ===========================================================================
00001726                            
00001726                            loc_1768:				; XREF: loc_17B4
00001726 32CA                       		move.w	a2,(a1)+
00001728 524A                       		addq.w	#1,a2
0000172A 51CA FFFA                  		dbf	d2,loc_1768
0000172E 60CC                       		bra.s	loc_173E
00001730                            ; ===========================================================================
00001730                            
00001730                            loc_1772:				; XREF: loc_17B4
00001730 32CC                       		move.w	a4,(a1)+
00001732 51CA FFFC                  		dbf	d2,loc_1772
00001736 60C4                       		bra.s	loc_173E
00001738                            ; ===========================================================================
00001738                            
00001738                            loc_177A:				; XREF: loc_17B4
00001738 6100 0000                  		bsr.w	loc_17DC
0000173C                            
0000173C                            loc_177E:
0000173C 32C1                       		move.w	d1,(a1)+
0000173E 51CA FFFC                  		dbf	d2,loc_177E
00001742 60B8                       		bra.s	loc_173E
00001744                            ; ===========================================================================
00001744                            
00001744                            loc_1786:				; XREF: loc_17B4
00001744 6100 0000                  		bsr.w	loc_17DC
00001748                            
00001748                            loc_178A:
00001748 32C1                       		move.w	d1,(a1)+
0000174A 5241                       		addq.w	#1,d1
0000174C 51CA FFFA                  		dbf	d2,loc_178A
00001750 60AA                       		bra.s	loc_173E
00001752                            ; ===========================================================================
00001752                            
00001752                            loc_1794:				; XREF: loc_17B4
00001752 6100 0000                  		bsr.w	loc_17DC
00001756                            
00001756                            loc_1798:
00001756 32C1                       		move.w	d1,(a1)+
00001758 5341                       		subq.w	#1,d1
0000175A 51CA FFFA                  		dbf	d2,loc_1798
0000175E 609C                       		bra.s	loc_173E
00001760                            ; ===========================================================================
00001760                            
00001760                            loc_17A2:				; XREF: loc_17B4
00001760 0C42 000F                  		cmpi.w	#$F,d2
00001764 6700                       		beq.s	loc_17C4
00001766                            
00001766                            loc_17A8:
00001766 6100 0000                  		bsr.w	loc_17DC
0000176A 32C1                       		move.w	d1,(a1)+
0000176C 51CA FFF8                  		dbf	d2,loc_17A8
00001770 608A                       		bra.s	loc_173E
00001772                            ; ===========================================================================
00001772                            
00001772                            loc_17B4:				; XREF: EniDec
00001772 60B2                       		bra.s	loc_1768
00001774                            ; ===========================================================================
00001774 60B0                       		bra.s	loc_1768
00001776                            ; ===========================================================================
00001776 60B8                       		bra.s	loc_1772
00001778                            ; ===========================================================================
00001778 60B6                       		bra.s	loc_1772
0000177A                            ; ===========================================================================
0000177A 60BC                       		bra.s	loc_177A
0000177C                            ; ===========================================================================
0000177C 60C6                       		bra.s	loc_1786
0000177E                            ; ===========================================================================
0000177E 60D2                       		bra.s	loc_1794
00001780                            ; ===========================================================================
00001780 60DE                       		bra.s	loc_17A2
00001782                            ; ===========================================================================
00001782                            
00001782                            loc_17C4:				; XREF: loc_17A2
00001782 5348                       		subq.w	#1,a0
00001784 0C46 0010                  		cmpi.w	#$10,d6
00001788 6600                       		bne.s	loc_17CE
0000178A 5348                       		subq.w	#1,a0
0000178C                            
0000178C                            loc_17CE:
0000178C 3008                       		move.w	a0,d0
0000178E E248                       		lsr.w	#1,d0
00001790 6400                       		bcc.s	loc_17D6
00001792 5248                       		addq.w	#1,a0
00001794                            
00001794                            loc_17D6:
00001794 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001798 4E75                       		rts	
0000179A                            ; ===========================================================================
0000179A                            
0000179A                            loc_17DC:				; XREF: loc_17A2
0000179A 360B                       		move.w	a3,d3
0000179C 1204                       		move.b	d4,d1
0000179E D201                       		add.b	d1,d1
000017A0 6400                       		bcc.s	loc_17EE
000017A2 5346                       		subq.w	#1,d6
000017A4 0D05                       		btst	d6,d5
000017A6 6700                       		beq.s	loc_17EE
000017A8 0043 8000                  		ori.w	#-$8000,d3
000017AC                            
000017AC                            loc_17EE:
000017AC D201                       		add.b	d1,d1
000017AE 6400                       		bcc.s	loc_17FC
000017B0 5346                       		subq.w	#1,d6
000017B2 0D05                       		btst	d6,d5
000017B4 6700                       		beq.s	loc_17FC
000017B6 0643 4000                  		addi.w	#$4000,d3
000017BA                            
000017BA                            loc_17FC:
000017BA D201                       		add.b	d1,d1
000017BC 6400                       		bcc.s	loc_180A
000017BE 5346                       		subq.w	#1,d6
000017C0 0D05                       		btst	d6,d5
000017C2 6700                       		beq.s	loc_180A
000017C4 0643 2000                  		addi.w	#$2000,d3
000017C8                            
000017C8                            loc_180A:
000017C8 D201                       		add.b	d1,d1
000017CA 6400                       		bcc.s	loc_1818
000017CC 5346                       		subq.w	#1,d6
000017CE 0D05                       		btst	d6,d5
000017D0 6700                       		beq.s	loc_1818
000017D2 0043 1000                  		ori.w	#$1000,d3
000017D6                            
000017D6                            loc_1818:
000017D6 D201                       		add.b	d1,d1
000017D8 6400                       		bcc.s	loc_1826
000017DA 5346                       		subq.w	#1,d6
000017DC 0D05                       		btst	d6,d5
000017DE 6700                       		beq.s	loc_1826
000017E0 0043 0800                  		ori.w	#$800,d3
000017E4                            
000017E4                            loc_1826:
000017E4 3205                       		move.w	d5,d1
000017E6 3E06                       		move.w	d6,d7
000017E8 9E4D                       		sub.w	a5,d7
000017EA 6400                       		bcc.s	loc_1856
000017EC 3C07                       		move.w	d7,d6
000017EE 0646 0010                  		addi.w	#$10,d6
000017F2 4447                       		neg.w	d7
000017F4 EF69                       		lsl.w	d7,d1
000017F6 1A10                       		move.b	(a0),d5
000017F8 EF3D                       		rol.b	d7,d5
000017FA DE47                       		add.w	d7,d7
000017FC CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001800 D245                       		add.w	d5,d1
00001802                            
00001802                            loc_1844:				; XREF: loc_1868
00001802 300D                       		move.w	a5,d0
00001804 D040                       		add.w	d0,d0
00001806 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
0000180A D243                       		add.w	d3,d1
0000180C 1A18                       		move.b	(a0)+,d5
0000180E E14D                       		lsl.w	#8,d5
00001810 1A18                       		move.b	(a0)+,d5
00001812 4E75                       		rts	
00001814                            ; ===========================================================================
00001814                            
00001814                            loc_1856:				; XREF: loc_1826
00001814 6700                       		beq.s	loc_1868
00001816 EE69                       		lsr.w	d7,d1
00001818 300D                       		move.w	a5,d0
0000181A D040                       		add.w	d0,d0
0000181C C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001820 D243                       		add.w	d3,d1
00001822 300D                       		move.w	a5,d0
00001824 6000                       		bra.s	sub_188C
00001826                            ; ===========================================================================
00001826                            
00001826                            loc_1868:				; XREF: loc_1856
00001826 7C10                       		moveq	#$10,d6
00001828                            
00001828                            loc_186A:
00001828 60D8                       		bra.s	loc_1844
0000182A                            ; ===========================================================================
0000182A 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001840 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
0000184A                            
0000184A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000184A                            
0000184A                            
0000184A                            sub_188C:				; XREF: EniDec
0000184A 9C40                       		sub.w	d0,d6
0000184C 0C46 0009                  		cmpi.w	#9,d6
00001850 6400                       		bcc.s	locret_189A
00001852 5046                       		addq.w	#8,d6
00001854 E145                       		asl.w	#8,d5
00001856 1A18                       		move.b	(a0)+,d5
00001858                            
00001858                            locret_189A:
00001858 4E75                       		rts	
0000185A                            ; End of function sub_188C
0000185A                            
0000185A                            ; ---------------------------------------------------------------------------
0000185A                            ; Kosinski decompression algorithm
0000185A                            ; ---------------------------------------------------------------------------
0000185A                            
0000185A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000185A                            
0000185A                            
0000185A                            KosDec:
0000185A                            
0000185A =FFFFFFFE                  var_2		= -2
0000185A =FFFFFFFF                  var_1		= -1
0000185A                            
0000185A 558F                       		subq.l	#2,sp
0000185C 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001860 1E98                       		move.b	(a0)+,(sp)
00001862 3A17                       		move.w	(sp),d5
00001864 780F                       		moveq	#$F,d4
00001866                            
00001866                            loc_18A8:
00001866 E24D                       		lsr.w	#1,d5
00001868 40C6                       		move	sr,d6
0000186A 51CC 0000                  		dbf	d4,loc_18BA
0000186E 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001872 1E98                       		move.b	(a0)+,(sp)
00001874 3A17                       		move.w	(sp),d5
00001876 780F                       		moveq	#$F,d4
00001878                            
00001878                            loc_18BA:
00001878 44C6                       		move	d6,ccr
0000187A 6400                       		bcc.s	loc_18C2
0000187C 12D8                       		move.b	(a0)+,(a1)+
0000187E 60E6                       		bra.s	loc_18A8
00001880                            ; ===========================================================================
00001880                            
00001880                            loc_18C2:				; XREF: KosDec
00001880 7600                       		moveq	#0,d3
00001882 E24D                       		lsr.w	#1,d5
00001884 40C6                       		move	sr,d6
00001886 51CC 0000                  		dbf	d4,loc_18D6
0000188A 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
0000188E 1E98                       		move.b	(a0)+,(sp)
00001890 3A17                       		move.w	(sp),d5
00001892 780F                       		moveq	#$F,d4
00001894                            
00001894                            loc_18D6:
00001894 44C6                       		move	d6,ccr
00001896 6500                       		bcs.s	loc_1906
00001898 E24D                       		lsr.w	#1,d5
0000189A 51CC 0000                  		dbf	d4,loc_18EA
0000189E 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018A2 1E98                       		move.b	(a0)+,(sp)
000018A4 3A17                       		move.w	(sp),d5
000018A6 780F                       		moveq	#$F,d4
000018A8                            
000018A8                            loc_18EA:
000018A8 E353                       		roxl.w	#1,d3
000018AA E24D                       		lsr.w	#1,d5
000018AC 51CC 0000                  		dbf	d4,loc_18FC
000018B0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018B4 1E98                       		move.b	(a0)+,(sp)
000018B6 3A17                       		move.w	(sp),d5
000018B8 780F                       		moveq	#$F,d4
000018BA                            
000018BA                            loc_18FC:
000018BA E353                       		roxl.w	#1,d3
000018BC 5243                       		addq.w	#1,d3
000018BE 74FF                       		moveq	#-1,d2
000018C0 1418                       		move.b	(a0)+,d2
000018C2 6000                       		bra.s	loc_191C
000018C4                            ; ===========================================================================
000018C4                            
000018C4                            loc_1906:				; XREF: loc_18C2
000018C4 1018                       		move.b	(a0)+,d0
000018C6 1218                       		move.b	(a0)+,d1
000018C8 74FF                       		moveq	#-1,d2
000018CA 1401                       		move.b	d1,d2
000018CC EB4A                       		lsl.w	#5,d2
000018CE 1400                       		move.b	d0,d2
000018D0 0241 0007                  		andi.w	#7,d1
000018D4 6700                       		beq.s	loc_1928
000018D6 1601                       		move.b	d1,d3
000018D8 5243                       		addq.w	#1,d3
000018DA                            
000018DA                            loc_191C:
000018DA 1031 2000                  		move.b	(a1,d2.w),d0
000018DE 12C0                       		move.b	d0,(a1)+
000018E0 51CB FFF8                  		dbf	d3,loc_191C
000018E4 6080                       		bra.s	loc_18A8
000018E6                            ; ===========================================================================
000018E6                            
000018E6                            loc_1928:				; XREF: loc_1906
000018E6 1218                       		move.b	(a0)+,d1
000018E8 6700                       		beq.s	loc_1938
000018EA 0C01 0001                  		cmpi.b	#1,d1
000018EE 6700 FF76                  		beq.w	loc_18A8
000018F2 1601                       		move.b	d1,d3
000018F4 60E4                       		bra.s	loc_191C
000018F6                            ; ===========================================================================
000018F6                            
000018F6                            loc_1938:				; XREF: loc_1928
000018F6 548F                       		addq.l	#2,sp
000018F8 4E75                       		rts	
000018FA                            ; End of function KosDec
000018FA                            
000018FA                            ; ---------------------------------------------------------------------------
000018FA                            ; Pallet cycling routine loading subroutine
000018FA                            ; ---------------------------------------------------------------------------
000018FA                            
000018FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018FA                            
000018FA                            
000018FA                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
000018FA 7400                       		moveq	#0,d2
000018FC 7000                       		moveq	#0,d0
000018FE 1038 FE10                  		move.b	($FFFFFE10).w,d0 	; get level number
00001902 D040                       		add.w	d0,d0		 	; multiply by 2
00001904 303B 0000                  		move.w	PalCycle(pc,d0.w),d0	; get animation routine realative offset
00001908 4EFB 0000                  		jmp	PalCycle(pc,d0.w)	; jump to routine
0000190C                            ; End of function PalCycle_Load
0000190C                            
0000190C                            ; ===========================================================================
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            ; Pallet cycling routines
0000190C                            ; ---------------------------------------------------------------------------
0000190C 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
0000190E 0000                       		dc.w PalCycle_LZ-PalCycle
00001910 0000                       		dc.w PalCycle_MZ-PalCycle
00001912 0000                       		dc.w PalCycle_SLZ-PalCycle
00001914 0000                       		dc.w PalCycle_SYZ-PalCycle
00001916 0000                       		dc.w PalCycle_SBZ-PalCycle
00001918                                            ;dc.w PalCycle_GHZ-PalCycle 
00001918 0000                       		dc.w PalCycle_GHZ-PalCycle
0000191A                            
0000191A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000191A                            
0000191A                            
0000191A                            PalCycle_Title:				; XREF: TitleScreen
0000191A 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001920 6000                       		bra.s	loc_196A
00001922                            ; ===========================================================================
00001922                            
00001922                            PalCycle_GHZ:				; XREF: PalCycle
00001922 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001928                            
00001928                            loc_196A:				; XREF: PalCycle_Title
00001928 5378 F634                  		subq.w	#1,($FFFFF634).w
0000192C 6A00                       		bpl.s	locret_1990
0000192E 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001934 3038 F632                  		move.w	($FFFFF632).w,d0
00001938 5278 F632                  		addq.w	#1,($FFFFF632).w
0000193C 0240 0003                  		andi.w	#3,d0
00001940 E748                       		lsl.w	#3,d0
00001942 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001946 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000194A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
0000194E                            
0000194E                            locret_1990:
0000194E 4E75                       		rts	
00001950                            ; End of function PalCycle_Title
00001950                            
00001950                            
00001950                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001950                            
00001950                            
00001950                            PalCycle_LZ:				; XREF: PalCycle
00001950 5378 F634                  		subq.w	#1,($FFFFF634).w
00001954 6A00                       		bpl.s	loc_19D8
00001956 31FC 0002 F634             		move.w	#2,($FFFFF634).w
0000195C 3038 F632                  		move.w	($FFFFF632).w,d0
00001960 5278 F632                  		addq.w	#1,($FFFFF632).w
00001964 0240 0003                  		andi.w	#3,d0
00001968 E748                       		lsl.w	#3,d0
0000196A 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001970 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001976 6600                       		bne.s	loc_19C0
00001978 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
0000197E                            
0000197E                            loc_19C0:
0000197E 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001982 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001986 22B0 0004                  		move.l	4(a0,d0.w),(a1)
0000198A 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
0000198E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001992 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001996                            
00001996                            loc_19D8:
00001996 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000199A 0240 0007                  		andi.w	#7,d0
0000199E 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
000019A2 6700                       		beq.s	locret_1A3A
000019A4 7201                       		moveq	#1,d1
000019A6 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000019AA 6700                       		beq.s	loc_19F0
000019AC 4441                       		neg.w	d1
000019AE                            
000019AE                            loc_19F0:
000019AE 3038 F650                  		move.w	($FFFFF650).w,d0
000019B2 0240 0003                  		andi.w	#3,d0
000019B6 D041                       		add.w	d1,d0
000019B8 0C40 0003                  		cmpi.w	#3,d0
000019BC 6500                       		bcs.s	loc_1A0A
000019BE 3200                       		move.w	d0,d1
000019C0 7000                       		moveq	#0,d0
000019C2 4A41                       		tst.w	d1
000019C4 6A00                       		bpl.s	loc_1A0A
000019C6 7002                       		moveq	#2,d0
000019C8                            
000019C8                            loc_1A0A:
000019C8 31C0 F650                  		move.w	d0,($FFFFF650).w
000019CC D040                       		add.w	d0,d0
000019CE 3200                       		move.w	d0,d1
000019D0 D040                       		add.w	d0,d0
000019D2 D041                       		add.w	d1,d0
000019D4 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
000019DA 43F8 FB76                  		lea	($FFFFFB76).w,a1
000019DE 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019E2 32B0 0004                  		move.w	4(a0,d0.w),(a1)
000019E6 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
000019EC 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
000019F0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019F4 32B0 0004                  		move.w	4(a0,d0.w),(a1)
000019F8                            
000019F8                            locret_1A3A:
000019F8 4E75                       		rts	
000019FA                            ; End of function PalCycle_LZ
000019FA                            
000019FA                            ; ===========================================================================
000019FA 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001A02                            ; ===========================================================================
00001A02                            
00001A02                            PalCycle_MZ:				; XREF: PalCycle
00001A02 4E75                       		rts	
00001A04                            
00001A04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A04                            
00001A04                            
00001A04                            PalCycle_SLZ:				; XREF: PalCycle
00001A04 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A08 6A00                       		bpl.s	locret_1A80
00001A0A 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001A10 3038 F632                  		move.w	($FFFFF632).w,d0
00001A14 5240                       		addq.w	#1,d0
00001A16 0C40 0006                  		cmpi.w	#6,d0
00001A1A 6500                       		bcs.s	loc_1A60
00001A1C 7000                       		moveq	#0,d0
00001A1E                            
00001A1E                            loc_1A60:
00001A1E 31C0 F632                  		move.w	d0,($FFFFF632).w
00001A22 3200                       		move.w	d0,d1
00001A24 D241                       		add.w	d1,d1
00001A26 D041                       		add.w	d1,d0
00001A28 D040                       		add.w	d0,d0
00001A2A 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001A30 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001A34 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001A38 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001A3E                            
00001A3E                            locret_1A80:
00001A3E 4E75                       		rts	
00001A40                            ; End of function PalCycle_SLZ
00001A40                            
00001A40                            
00001A40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A40                            
00001A40                            
00001A40                            PalCycle_SYZ:				; XREF: PalCycle
00001A40 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A44 6A00                       		bpl.s	locret_1AC6
00001A46 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001A4C 3038 F632                  		move.w	($FFFFF632).w,d0
00001A50 5278 F632                  		addq.w	#1,($FFFFF632).w
00001A54 0240 0003                  		andi.w	#3,d0
00001A58 E548                       		lsl.w	#2,d0
00001A5A 3200                       		move.w	d0,d1
00001A5C D040                       		add.w	d0,d0
00001A5E 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001A64 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001A68 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A6C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001A70 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001A76 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001A7A 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001A7E 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001A84                            
00001A84                            locret_1AC6:
00001A84 4E75                       		rts	
00001A86                            ; End of function PalCycle_SYZ
00001A86                            
00001A86                            
00001A86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A86                            
00001A86                            
00001A86                            PalCycle_SBZ:				; XREF: PalCycle
00001A86 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001A8C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001A90 6700                       		beq.s	loc_1ADA
00001A92 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001A98                            
00001A98                            loc_1ADA:
00001A98 43F8 F650                  		lea	($FFFFF650).w,a1
00001A9C 321A                       		move.w	(a2)+,d1
00001A9E                            
00001A9E                            loc_1AE0:
00001A9E 5311                       		subq.b	#1,(a1)
00001AA0 6B00                       		bmi.s	loc_1AEA
00001AA2 5489                       		addq.l	#2,a1
00001AA4 5C8A                       		addq.l	#6,a2
00001AA6 6000                       		bra.s	loc_1B06
00001AA8                            ; ===========================================================================
00001AA8                            
00001AA8                            loc_1AEA:				; XREF: PalCycle_SBZ
00001AA8 12DA                       		move.b	(a2)+,(a1)+
00001AAA 1011                       		move.b	(a1),d0
00001AAC 5200                       		addq.b	#1,d0
00001AAE B01A                       		cmp.b	(a2)+,d0
00001AB0 6500                       		bcs.s	loc_1AF6
00001AB2 7000                       		moveq	#0,d0
00001AB4                            
00001AB4                            loc_1AF6:
00001AB4 12C0                       		move.b	d0,(a1)+
00001AB6 0240 000F                  		andi.w	#$F,d0
00001ABA D040                       		add.w	d0,d0
00001ABC 305A                       		movea.w	(a2)+,a0
00001ABE 365A                       		movea.w	(a2)+,a3
00001AC0 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001AC4                            
00001AC4                            loc_1B06:				; XREF: PalCycle_SBZ
00001AC4 51C9 FFD8                  		dbf	d1,loc_1AE0
00001AC8 5378 F634                  		subq.w	#1,($FFFFF634).w
00001ACC 6A00                       		bpl.s	locret_1B64
00001ACE 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001AD4 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001ADA 4A38 FE11                  		tst.b	($FFFFFE11).w
00001ADE 6700                       		beq.s	loc_1B2E
00001AE0 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001AE6 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001AEC                            
00001AEC                            loc_1B2E:
00001AEC 72FF                       		moveq	#-1,d1
00001AEE 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001AF2 6700                       		beq.s	loc_1B38
00001AF4 4441                       		neg.w	d1
00001AF6                            
00001AF6                            loc_1B38:
00001AF6 3038 F632                  		move.w	($FFFFF632).w,d0
00001AFA 0240 0003                  		andi.w	#3,d0
00001AFE D041                       		add.w	d1,d0
00001B00 0C40 0003                  		cmpi.w	#3,d0
00001B04 6500                       		bcs.s	loc_1B52
00001B06 3200                       		move.w	d0,d1
00001B08 7000                       		moveq	#0,d0
00001B0A 4A41                       		tst.w	d1
00001B0C 6A00                       		bpl.s	loc_1B52
00001B0E 7002                       		moveq	#2,d0
00001B10                            
00001B10                            loc_1B52:
00001B10 31C0 F632                  		move.w	d0,($FFFFF632).w
00001B14 D040                       		add.w	d0,d0
00001B16 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001B1A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B1E 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B22                            
00001B22                            locret_1B64:
00001B22 4E75                       		rts	
00001B24                            ; End of function PalCycle_SBZ
00001B24                            
00001B24                            ; ===========================================================================
00001B24                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001B44                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001B64                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001B84                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001B96                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001BA8                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001BC8                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001BE8                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001C08                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001C18                            
00001C18                            Pal_SBZCycList:	include "_inc\SBZ pallet script 1.asm"
00001C18                            ; ---------------------------------------------------------------------------
00001C18                            ; Scrap Brain Zone 1 pallet cycling script
00001C18                            ; ---------------------------------------------------------------------------
00001C18 0008                       	dc.w 8			; number of entries - 1
00001C1A 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001C1C 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001C1E FB50                       	dc.w $FB50		; RAM address
00001C20 0D08                       	dc.b $D, 8
00001C22 0000                       	dc.w Pal_SBZCyc2
00001C24 FB52                       	dc.w $FB52
00001C26 0E08                       	dc.b $E, 8
00001C28 0000                       	dc.w Pal_SBZCyc3
00001C2A FB6E                       	dc.w $FB6E
00001C2C 0B08                       	dc.b $B, 8
00001C2E 0000                       	dc.w Pal_SBZCyc5
00001C30 FB70                       	dc.w $FB70
00001C32 0708                       	dc.b 7,	8
00001C34 0000                       	dc.w Pal_SBZCyc6
00001C36 FB72                       	dc.w $FB72
00001C38 1C10                       	dc.b $1C, $10
00001C3A 0000                       	dc.w Pal_SBZCyc7
00001C3C FB7E                       	dc.w $FB7E
00001C3E 0303                       	dc.b 3,	3
00001C40 0000                       	dc.w Pal_SBZCyc8
00001C42 FB78                       	dc.w $FB78
00001C44 0303                       	dc.b 3,	3
00001C46 0000                       	dc.w Pal_SBZCyc8+2
00001C48 FB7A                       	dc.w $FB7A
00001C4A 0303                       	dc.b 3,	3
00001C4C 0000                       	dc.w Pal_SBZCyc8+4
00001C4E FB7C                       	dc.w $FB7C
00001C50                            	even
00001C50                            	even
00001C50                            Pal_SBZCycList2:include "_inc\SBZ pallet script 2.asm"
00001C50                            ; ---------------------------------------------------------------------------
00001C50                            ; Scrap Brain Zone 2 pallet cycling script
00001C50                            ; ---------------------------------------------------------------------------
00001C50 0006                       	dc.w 6
00001C52 0708                       	dc.b 7,	8
00001C54 0000                       	dc.w Pal_SBZCyc1
00001C56 FB50                       	dc.w $FB50
00001C58 0D08                       	dc.b $D, 8
00001C5A 0000                       	dc.w Pal_SBZCyc2
00001C5C FB52                       	dc.w $FB52
00001C5E 0908                       	dc.b 9,	8
00001C60 0000                       	dc.w Pal_SBZCyc9
00001C62 FB70                       	dc.w $FB70
00001C64 0708                       	dc.b 7,	8
00001C66 0000                       	dc.w Pal_SBZCyc6
00001C68 FB72                       	dc.w $FB72
00001C6A 0303                       	dc.b 3,	3
00001C6C 0000                       	dc.w Pal_SBZCyc8
00001C6E FB78                       	dc.w $FB78
00001C70 0303                       	dc.b 3,	3
00001C72 0000                       	dc.w Pal_SBZCyc8+2
00001C74 FB7A                       	dc.w $FB7A
00001C76 0303                       	dc.b 3,	3
00001C78 0000                       	dc.w Pal_SBZCyc8+4
00001C7A FB7C                       	dc.w $FB7C
00001C7C                            	even
00001C7C                            	even
00001C7C                            
00001C7C                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001C8C                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001C9C                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001CAC                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001CB6                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001CC6                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001CD6                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001CF6                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001D00                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001D10                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001D1A                            ; ---------------------------------------------------------------------------
00001D1A                            ; Subroutine to	fade out and fade in
00001D1A                            ; ---------------------------------------------------------------------------
00001D1A                            
00001D1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D1A                            
00001D1A                            
00001D1A                            Pal_FadeTo:
00001D1A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w ; set start position to $3F
00001D20                            
00001D20                            Pal_FadeTo2:
00001D20 7000                       		moveq	#0,d0
00001D22 41F8 FB00                  		lea	($FFFFFB00).w,a0 ; load pallete to a0
00001D26 1038 F626                  		move.b	($FFFFF626).w,d0 ; load fadding start position
00001D2A D0C0                       		adda.w	d0,a0		 ; add it to pallete start offset
00001D2C 7200                       		moveq	#0,d1
00001D2E 1038 F627                  		move.b	($FFFFF627).w,d0 ; load number of colours to fade
00001D32                            
00001D32                            Pal_ToBlack:
00001D32 30C1                       		move.w	d1,(a0)+	; fill colour with black
00001D34 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; repeat for the amount of colours
00001D38                            
00001D38 383C 0015                  		move.w	#$15,d4
00001D3C                            ;loc_1DCE:
00001D3C                            Pal_FadeTo_Loop:
00001D3C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001D42 6100 0000                  		bsr.w	DelayProgram
00001D46 6100                       		bsr.s	Pal_FadeIn
00001D48 6100 F860                  		bsr.w	RunPLC_RAM
00001D4C 51CC FFEE                  		dbf	d4,Pal_FadeTo_Loop	; repeat $15 more times
00001D50 4E75                       		rts
00001D52                            ; End of function Pal_FadeTo
00001D52                            
00001D52                            ; ---------------------------------------------------------------------------
00001D52                            ; Pallet fade-in subroutine
00001D52                            ; ---------------------------------------------------------------------------
00001D52                            
00001D52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D52                            
00001D52                            
00001D52                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001D52 7000                       		moveq	#0,d0
00001D54 41F8 FB00                  		lea	($FFFFFB00).w,a0 ; load current pallete to a0
00001D58 43F8 FB80                  		lea	($FFFFFB80).w,a1 ; load target pallete to a1
00001D5C 1038 F626                  		move.b	($FFFFF626).w,d0
00001D60 D0C0                       		adda.w	d0,a0
00001D62 D2C0                       		adda.w	d0,a1
00001D64 1038 F627                  		move.b	($FFFFF627).w,d0
00001D68                            
00001D68                            loc_1DFA:
00001D68 6100                       		bsr.s	Pal_AddColor
00001D6A 51C8 FFFC                  		dbf	d0,loc_1DFA
00001D6E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001D74 6600                       		bne.s	locret_1E24
00001D76 7000                       		moveq	#0,d0
00001D78 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001D7C 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001D80 1038 F626                  		move.b	($FFFFF626).w,d0
00001D84 D0C0                       		adda.w	d0,a0
00001D86 D2C0                       		adda.w	d0,a1
00001D88 1038 F627                  		move.b	($FFFFF627).w,d0
00001D8C                            
00001D8C                            loc_1E1E:
00001D8C 6100                       		bsr.s	Pal_AddColor
00001D8E 51C8 FFFC                  		dbf	d0,loc_1E1E
00001D92                            
00001D92                            locret_1E24:
00001D92 4E75                       		rts	
00001D94                            ; End of function Pal_FadeIn
00001D94                            
00001D94                            
00001D94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D94                            
00001D94                            
00001D94                            Pal_AddColor:				; XREF: Pal_FadeIn
00001D94 3419                       		move.w	(a1)+,d2
00001D96 3610                       		move.w	(a0),d3
00001D98 B642                       		cmp.w	d2,d3
00001D9A 6700                       		beq.s	loc_1E4E
00001D9C 3203                       		move.w	d3,d1
00001D9E 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001DA2 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001DA4 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00001DA6 30C1                       		move.w	d1,(a0)+	; update pallet
00001DA8 4E75                       		rts	
00001DAA                            ; ===========================================================================
00001DAA                            
00001DAA                            Pal_AddGreen:				; XREF: Pal_AddColor
00001DAA 3203                       		move.w	d3,d1
00001DAC 0641 0020                  		addi.w	#$20,d1		; increase green value
00001DB0 B242                       		cmp.w	d2,d1
00001DB2 6200                       		bhi.s	Pal_AddRed
00001DB4 30C1                       		move.w	d1,(a0)+	; update pallet
00001DB6 4E75                       		rts	
00001DB8                            ; ===========================================================================
00001DB8                            
00001DB8                            Pal_AddRed:				; XREF: Pal_AddGreen
00001DB8 5458                       		addq.w	#2,(a0)+	; increase red value
00001DBA 4E75                       		rts	
00001DBC                            ; ===========================================================================
00001DBC                            
00001DBC                            loc_1E4E:				; XREF: Pal_AddColor
00001DBC 5448                       		addq.w	#2,a0
00001DBE 4E75                       		rts	
00001DC0                            ; End of function Pal_AddColor
00001DC0                            
00001DC0                            
00001DC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DC0                            
00001DC0                            
00001DC0                            Pal_FadeFrom:
00001DC0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001DC6 383C 0015                  		move.w	#$15,d4
00001DCA                            
00001DCA                            loc_1E5C:
00001DCA 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001DD0 6100 0000                  		bsr.w	DelayProgram
00001DD4 6100                       		bsr.s	Pal_FadeOut
00001DD6 6100 F7D2                  		bsr.w	RunPLC_RAM
00001DDA 51CC FFEE                  		dbf	d4,loc_1E5C
00001DDE 4E75                       		rts	
00001DE0                            ; End of function Pal_FadeFrom
00001DE0                            
00001DE0                            ; ---------------------------------------------------------------------------
00001DE0                            ; Pallet fade-out subroutine
00001DE0                            ; ---------------------------------------------------------------------------
00001DE0                            
00001DE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DE0                            
00001DE0                            
00001DE0                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001DE0 7000                       		moveq	#0,d0
00001DE2 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DE6 1038 F626                  		move.b	($FFFFF626).w,d0
00001DEA D0C0                       		adda.w	d0,a0
00001DEC 1038 F627                  		move.b	($FFFFF627).w,d0
00001DF0                            
00001DF0                            loc_1E82:
00001DF0 6100                       		bsr.s	Pal_DecColor
00001DF2 51C8 FFFC                  		dbf	d0,loc_1E82
00001DF6                            
00001DF6 7000                       		moveq	#0,d0
00001DF8 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001DFC 1038 F626                  		move.b	($FFFFF626).w,d0
00001E00 D0C0                       		adda.w	d0,a0
00001E02 1038 F627                  		move.b	($FFFFF627).w,d0
00001E06                            
00001E06                            loc_1E98:
00001E06 6100                       		bsr.s	Pal_DecColor
00001E08 51C8 FFFC                  		dbf	d0,loc_1E98
00001E0C 4E75                       		rts	
00001E0E                            ; End of function Pal_FadeOut
00001E0E                            
00001E0E                            
00001E0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E0E                            
00001E0E                            
00001E0E                            Pal_DecColor:				; XREF: Pal_FadeOut
00001E0E 3410                       		move.w	(a0),d2
00001E10 6700                       		beq.s	loc_1ECC
00001E12 3202                       		move.w	d2,d1
00001E14 0241 000E                  		andi.w	#$E,d1
00001E18 6700                       		beq.s	Pal_DecGreen
00001E1A 5558                       		subq.w	#2,(a0)+	; decrease red value
00001E1C 4E75                       		rts	
00001E1E                            ; ===========================================================================
00001E1E                            
00001E1E                            Pal_DecGreen:				; XREF: Pal_DecColor
00001E1E 3202                       		move.w	d2,d1
00001E20 0241 00E0                  		andi.w	#$E0,d1
00001E24 6700                       		beq.s	Pal_DecBlue
00001E26 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001E2A 4E75                       		rts	
00001E2C                            ; ===========================================================================
00001E2C                            
00001E2C                            Pal_DecBlue:				; XREF: Pal_DecGreen
00001E2C 3202                       		move.w	d2,d1
00001E2E 0241 0E00                  		andi.w	#$E00,d1
00001E32 6700                       		beq.s	loc_1ECC
00001E34 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001E38 4E75                       		rts	
00001E3A                            ; ===========================================================================
00001E3A                            
00001E3A                            loc_1ECC:				; XREF: Pal_DecColor
00001E3A 5448                       		addq.w	#2,a0
00001E3C 4E75                       		rts	
00001E3E                            ; End of function Pal_DecColor
00001E3E                            
00001E3E                            ; ---------------------------------------------------------------------------
00001E3E                            ; Subroutine to	fill the pallet	with white (special stage)
00001E3E                            ; ---------------------------------------------------------------------------
00001E3E                            
00001E3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E3E                            
00001E3E                            
00001E3E                            Pal_MakeWhite:				; XREF: SpecialStage
00001E3E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001E44 7000                       		moveq	#0,d0
00001E46 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E4A 1038 F626                  		move.b	($FFFFF626).w,d0
00001E4E D0C0                       		adda.w	d0,a0
00001E50 323C 0EEE                  		move.w	#$EEE,d1
00001E54 1038 F627                  		move.b	($FFFFF627).w,d0
00001E58                            
00001E58                            PalWhite_Loop:
00001E58 30C1                       		move.w	d1,(a0)+
00001E5A 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00001E5E 383C 0015                  		move.w	#$15,d4
00001E62                            
00001E62                            loc_1EF4:
00001E62 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E68 6100 0000                  		bsr.w	DelayProgram
00001E6C 6100                       		bsr.s	Pal_WhiteToBlack
00001E6E 6100 F73A                  		bsr.w	RunPLC_RAM
00001E72 51CC FFEE                  		dbf	d4,loc_1EF4
00001E76 4E75                       		rts	
00001E78                            ; End of function Pal_MakeWhite
00001E78                            
00001E78                            
00001E78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E78                            
00001E78                            
00001E78                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00001E78 7000                       		moveq	#0,d0
00001E7A 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E7E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001E82 1038 F626                  		move.b	($FFFFF626).w,d0
00001E86 D0C0                       		adda.w	d0,a0
00001E88 D2C0                       		adda.w	d0,a1
00001E8A 1038 F627                  		move.b	($FFFFF627).w,d0
00001E8E                            
00001E8E                            loc_1F20:
00001E8E 6100                       		bsr.s	Pal_DecColor2
00001E90 51C8 FFFC                  		dbf	d0,loc_1F20
00001E94                            
00001E94 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001E9A 6600                       		bne.s	locret_1F4A
00001E9C 7000                       		moveq	#0,d0
00001E9E 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001EA2 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001EA6 1038 F626                  		move.b	($FFFFF626).w,d0
00001EAA D0C0                       		adda.w	d0,a0
00001EAC D2C0                       		adda.w	d0,a1
00001EAE 1038 F627                  		move.b	($FFFFF627).w,d0
00001EB2                            
00001EB2                            loc_1F44:
00001EB2 6100                       		bsr.s	Pal_DecColor2
00001EB4 51C8 FFFC                  		dbf	d0,loc_1F44
00001EB8                            
00001EB8                            locret_1F4A:
00001EB8 4E75                       		rts	
00001EBA                            ; End of function Pal_WhiteToBlack
00001EBA                            
00001EBA                            
00001EBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EBA                            
00001EBA                            
00001EBA                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00001EBA 3419                       		move.w	(a1)+,d2
00001EBC 3610                       		move.w	(a0),d3
00001EBE B642                       		cmp.w	d2,d3
00001EC0 6700                       		beq.s	loc_1F78
00001EC2 3203                       		move.w	d3,d1
00001EC4 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001EC8 6500                       		bcs.s	loc_1F64
00001ECA B242                       		cmp.w	d2,d1
00001ECC 6500                       		bcs.s	loc_1F64
00001ECE 30C1                       		move.w	d1,(a0)+
00001ED0 4E75                       		rts	
00001ED2                            ; ===========================================================================
00001ED2                            
00001ED2                            loc_1F64:				; XREF: Pal_DecColor2
00001ED2 3203                       		move.w	d3,d1
00001ED4 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001ED8 6500                       		bcs.s	loc_1F74
00001EDA B242                       		cmp.w	d2,d1
00001EDC 6500                       		bcs.s	loc_1F74
00001EDE 30C1                       		move.w	d1,(a0)+
00001EE0 4E75                       		rts	
00001EE2                            ; ===========================================================================
00001EE2                            
00001EE2                            loc_1F74:				; XREF: loc_1F64
00001EE2 5558                       		subq.w	#2,(a0)+	; decrease red value
00001EE4 4E75                       		rts	
00001EE6                            ; ===========================================================================
00001EE6                            
00001EE6                            loc_1F78:				; XREF: Pal_DecColor2
00001EE6 5448                       		addq.w	#2,a0
00001EE8 4E75                       		rts	
00001EEA                            ; End of function Pal_DecColor2
00001EEA                            
00001EEA                            ; ---------------------------------------------------------------------------
00001EEA                            ; Subroutine to	make a white flash when	you enter a special stage
00001EEA                            ; ---------------------------------------------------------------------------
00001EEA                            
00001EEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EEA                            
00001EEA                            
00001EEA                            Pal_MakeFlash:				; XREF: SpecialStage
00001EEA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001EF0 383C 0015                  		move.w	#$15,d4
00001EF4                            
00001EF4                            loc_1F86:
00001EF4 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001EFA 6100 0000                  		bsr.w	DelayProgram
00001EFE 6100                       		bsr.s	Pal_ToWhite
00001F00 6100 F6A8                  		bsr.w	RunPLC_RAM
00001F04 51CC FFEE                  		dbf	d4,loc_1F86
00001F08 4E75                       		rts	
00001F0A                            ; End of function Pal_MakeFlash
00001F0A                            
00001F0A                            
00001F0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F0A                            
00001F0A                            
00001F0A                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00001F0A 7000                       		moveq	#0,d0
00001F0C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F10 1038 F626                  		move.b	($FFFFF626).w,d0
00001F14 D0C0                       		adda.w	d0,a0
00001F16 1038 F627                  		move.b	($FFFFF627).w,d0
00001F1A                            
00001F1A                            loc_1FAC:
00001F1A 6100                       		bsr.s	Pal_AddColor2
00001F1C 51C8 FFFC                  		dbf	d0,loc_1FAC
00001F20 7000                       		moveq	#0,d0
00001F22 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001F26 1038 F626                  		move.b	($FFFFF626).w,d0
00001F2A D0C0                       		adda.w	d0,a0
00001F2C 1038 F627                  		move.b	($FFFFF627).w,d0
00001F30                            
00001F30                            loc_1FC2:
00001F30 6100                       		bsr.s	Pal_AddColor2
00001F32 51C8 FFFC                  		dbf	d0,loc_1FC2
00001F36 4E75                       		rts	
00001F38                            ; End of function Pal_ToWhite
00001F38                            
00001F38                            
00001F38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F38                            
00001F38                            
00001F38                            Pal_AddColor2:				; XREF: Pal_ToWhite
00001F38 3410                       		move.w	(a0),d2
00001F3A 0C42 0EEE                  		cmpi.w	#$EEE,d2
00001F3E 6700                       		beq.s	loc_2006
00001F40 3202                       		move.w	d2,d1
00001F42 0241 000E                  		andi.w	#$E,d1
00001F46 0C41 000E                  		cmpi.w	#$E,d1
00001F4A 6700                       		beq.s	loc_1FE2
00001F4C 5458                       		addq.w	#2,(a0)+	; increase red value
00001F4E 4E75                       		rts	
00001F50                            ; ===========================================================================
00001F50                            
00001F50                            loc_1FE2:				; XREF: Pal_AddColor2
00001F50 3202                       		move.w	d2,d1
00001F52 0241 00E0                  		andi.w	#$E0,d1
00001F56 0C41 00E0                  		cmpi.w	#$E0,d1
00001F5A 6700                       		beq.s	loc_1FF4
00001F5C 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00001F60 4E75                       		rts	
00001F62                            ; ===========================================================================
00001F62                            
00001F62                            loc_1FF4:				; XREF: loc_1FE2
00001F62 3202                       		move.w	d2,d1
00001F64 0241 0E00                  		andi.w	#$E00,d1
00001F68 0C41 0E00                  		cmpi.w	#$E00,d1
00001F6C 6700                       		beq.s	loc_2006
00001F6E 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00001F72 4E75                       		rts	
00001F74                            ; ===========================================================================
00001F74                            
00001F74                            loc_2006:				; XREF: Pal_AddColor2
00001F74 5448                       		addq.w	#2,a0
00001F76 4E75                       		rts	
00001F78                            ; End of function Pal_AddColor2
00001F78                            
00001F78                            ; ---------------------------------------------------------------------------
00001F78                            ; Pallet cycling routine - Sega	logo
00001F78                            ; ---------------------------------------------------------------------------
00001F78                            
00001F78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F78                            
00001F78                            
00001F78                            PalCycle_Sega:				; XREF: SegaScreen
00001F78 4A38 F635                  		tst.b	($FFFFF635).w
00001F7C 6600                       		bne.s	loc_206A
00001F7E 43F8 FB20                  		lea	($FFFFFB20).w,a1
00001F82 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00001F88 7205                       		moveq	#5,d1
00001F8A 3038 F632                  		move.w	($FFFFF632).w,d0
00001F8E                            
00001F8E                            loc_2020:
00001F8E 6A00                       		bpl.s	loc_202A
00001F90 5448                       		addq.w	#2,a0
00001F92 5341                       		subq.w	#1,d1
00001F94 5440                       		addq.w	#2,d0
00001F96 60F6                       		bra.s	loc_2020
00001F98                            ; ===========================================================================
00001F98                            
00001F98                            loc_202A:				; XREF: PalCycle_Sega
00001F98 3400                       		move.w	d0,d2
00001F9A 0242 001E                  		andi.w	#$1E,d2
00001F9E 6600                       		bne.s	loc_2034
00001FA0 5440                       		addq.w	#2,d0
00001FA2                            
00001FA2                            loc_2034:
00001FA2 0C40 0060                  		cmpi.w	#$60,d0
00001FA6 6400                       		bcc.s	loc_203E
00001FA8 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00001FAC                            
00001FAC                            loc_203E:
00001FAC 5440                       		addq.w	#2,d0
00001FAE 51C9 FFE8                  		dbf	d1,loc_202A
00001FB2 3038 F632                  		move.w	($FFFFF632).w,d0
00001FB6 5440                       		addq.w	#2,d0
00001FB8 3400                       		move.w	d0,d2
00001FBA 0242 001E                  		andi.w	#$1E,d2
00001FBE 6600                       		bne.s	loc_2054
00001FC0 5440                       		addq.w	#2,d0
00001FC2                            
00001FC2                            loc_2054:
00001FC2 0C40 0064                  		cmpi.w	#$64,d0
00001FC6 6D00                       		blt.s	loc_2062
00001FC8 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00001FCE 70F4                       		moveq	#-$C,d0
00001FD0                            
00001FD0                            loc_2062:
00001FD0 31C0 F632                  		move.w	d0,($FFFFF632).w
00001FD4 7001                       		moveq	#1,d0
00001FD6 4E75                       		rts	
00001FD8                            ; ===========================================================================
00001FD8                            
00001FD8                            loc_206A:				; XREF: loc_202A
00001FD8 5338 F634                  		subq.b	#1,($FFFFF634).w
00001FDC 6A00                       		bpl.s	loc_20BC
00001FDE 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00001FE4 3038 F632                  		move.w	($FFFFF632).w,d0
00001FE8 0640 000C                  		addi.w	#$C,d0
00001FEC 0C40 0030                  		cmpi.w	#$30,d0
00001FF0 6500                       		bcs.s	loc_2088
00001FF2 7000                       		moveq	#0,d0
00001FF4 4E75                       		rts	
00001FF6                            ; ===========================================================================
00001FF6                            
00001FF6                            loc_2088:				; XREF: loc_206A
00001FF6 31C0 F632                  		move.w	d0,($FFFFF632).w
00001FFA 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002000 41F0 0000                  		lea	(a0,d0.w),a0
00002004 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002008 22D8                       		move.l	(a0)+,(a1)+
0000200A 22D8                       		move.l	(a0)+,(a1)+
0000200C 3298                       		move.w	(a0)+,(a1)
0000200E 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002012 7000                       		moveq	#0,d0
00002014 722C                       		moveq	#$2C,d1
00002016                            
00002016                            loc_20A8:
00002016 3400                       		move.w	d0,d2
00002018 0242 001E                  		andi.w	#$1E,d2
0000201C 6600                       		bne.s	loc_20B2
0000201E 5440                       		addq.w	#2,d0
00002020                            
00002020                            loc_20B2:
00002020 3390 0000                  		move.w	(a0),(a1,d0.w)
00002024 5440                       		addq.w	#2,d0
00002026 51C9 FFEE                  		dbf	d1,loc_20A8
0000202A                            
0000202A                            loc_20BC:
0000202A 7001                       		moveq	#1,d0
0000202C 4E75                       		rts	
0000202E                            ; End of function PalCycle_Sega
0000202E                            
0000202E                            ; ===========================================================================
0000202E                            
0000202E                            Pal_Sega1:	incbin	pallet\sega1.bin
0000203A                            Pal_Sega2:	incbin	pallet\sega2.bin
0000206A                            
0000206A                            ; ===========================================================================
0000206A                            ; Subroutines to load pallets
0000206A                            ; ===========================================================================
0000206A                            ; Input:	d0 - pallete index
0000206A                            ; ---------------------------------------------------------------------------
0000206A                            PalLoad1:
0000206A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002070 E748                       		lsl.w	#3,d0		; multiple pallete index by 8
00002072 D2C0                       		adda.w	d0,a1
00002074 2459                       		movea.l	(a1)+,a2	; load pallete offset in ROM
00002076 3659                       		movea.w	(a1)+,a3	; load RAM destination
00002078 D6FC 0080                  		adda.w	#$80,a3
0000207C 3E19                       		move.w	(a1)+,d7	; load pallete lenght
0000207E                            
0000207E 26DA                       @WritePallete:	move.l	(a2)+,(a3)+	; move pallete from ROM to RAM
00002080 51CF FFFC                  		dbf	d7,@WritePallete ; repeat for the lenght of the pallete
00002084 4E75                       		rts	
00002086                            ; End of function PalLoad1
00002086                            
00002086                            
00002086                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002086                            
00002086                            
00002086                            PalLoad2:
00002086 43F9 0000 0000             		lea	(PalPointers).l,a1
0000208C E748                       		lsl.w	#3,d0		; multiple pallete index by 8
0000208E D2C0                       		adda.w	d0,a1
00002090 2459                       		movea.l	(a1)+,a2	; load pallete offset in ROM
00002092 3659                       		movea.w	(a1)+,a3	; load RAM destination
00002094 3E19                       		move.w	(a1)+,d7	; load pallete lenght
00002096                            
00002096 26DA                       @WritePallete:	move.l	(a2)+,(a3)+	; move pallete from ROM to RAM
00002098 51CF FFFC                  		dbf	d7,@WritePallete ; repeat for the lenght of the pallete
0000209C 4E75                       		rts	
0000209E                            ; End of function PalLoad2
0000209E                            
0000209E                            ; ---------------------------------------------------------------------------
0000209E                            ; Underwater pallet loading subroutine
0000209E                            ; ---------------------------------------------------------------------------
0000209E                            
0000209E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000209E                            
0000209E                            
0000209E                            PalLoad3_Water:
0000209E 43F9 0000 0000             		lea	(PalPointers).l,a1
000020A4 E748                       		lsl.w	#3,d0		; multiple pallete index by 8
000020A6 D2C0                       		adda.w	d0,a1
000020A8 2459                       		movea.l	(a1)+,a2	; load pallete offset in ROM
000020AA 3659                       		movea.w	(a1)+,a3	; load RAM destination
000020AC 96FC 0080                  		suba.w	#$80,a3
000020B0 3E19                       		move.w	(a1)+,d7	; load pallete lenght
000020B2                            
000020B2 26DA                       @WritePallete:	move.l	(a2)+,(a3)+	; move pallete from ROM to RAM
000020B4 51CF FFFC                  		dbf	d7,@WritePallete ; repeat for the lenght of the pallete
000020B8 4E75                       		rts	
000020BA                            ; End of function PalLoad3_Water
000020BA                            
000020BA                            
000020BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020BA                            
000020BA                            
000020BA                            PalLoad4_Water:
000020BA 43F9 0000 0000             		lea	(PalPointers).l,a1
000020C0 E748                       		lsl.w	#3,d0		; multiple pallete index by 8
000020C2 D2C0                       		adda.w	d0,a1
000020C4 2459                       		movea.l	(a1)+,a2	; load pallete offset in ROM
000020C6 3659                       		movea.w	(a1)+,a3	; load RAM destination
000020C8 96FC 0100                  		suba.w	#$100,a3
000020CC 3E19                       		move.w	(a1)+,d7	; load pallete lenght
000020CE                            
000020CE 26DA                       @WritePallete:	move.l	(a2)+,(a3)+	; move pallete from ROM to RAM
000020D0 51CF FFFC                  		dbf	d7,@WritePallete ; repeat for the lenght of the pallete
000020D4 4E75                       		rts	
000020D6                            ; End of function PalLoad4_Water
000020D6                            
000020D6                            ; ===========================================================================
000020D6                            ; ---------------------------------------------------------------------------
000020D6                            ; Pallet pointers
000020D6                            ; ---------------------------------------------------------------------------
000020D6                            PalPointers:
000020D6                            	include "_inc\Pallet pointers.asm"
000020D6                            ; ---------------------------------------------------------------------------
000020D6                            ; Pallet pointers
000020D6                            ; ---------------------------------------------------------------------------
000020D6 0000 0000                  	dc.l Pal_SegaBG		; pallet address
000020DA FB00                       	dc.w $FB00		; RAM address
000020DC 001F                       	dc.w $1F		; (pallet length / 2) - 1
000020DE 0000 0000                  	dc.l Pal_Title          ;1
000020E2 FB00                       	dc.w $FB00
000020E4 001F                       	dc.w $1F
000020E6 0000 0000                  	dc.l Pal_LevelSel       ;2
000020EA FB00                       	dc.w $FB00
000020EC 001F                       	dc.w $1F
000020EE 0000 0000                  	dc.l Pal_Sonic          ;3
000020F2 FB00                       	dc.w $FB00
000020F4 0007                       	dc.w 7
000020F6 0000 0000                  	dc.l Pal_GHZ            ;4
000020FA FB20                       	dc.w $FB20
000020FC 0017                       	dc.w $17
000020FE 0000 0000                  	dc.l Pal_LZ             ;5
00002102 FB20                       	dc.w $FB20
00002104 0017                       	dc.w $17
00002106 0000 0000                  	dc.l Pal_MZ             ;6
0000210A FB20                       	dc.w $FB20
0000210C 0017                       	dc.w $17
0000210E 0000 0000                  	dc.l Pal_SLZ            ;7
00002112 FB20                       	dc.w $FB20
00002114 0017                       	dc.w $17
00002116 0000 0000                  	dc.l Pal_SYZ            ;8
0000211A FB20                       	dc.w $FB20
0000211C 0017                       	dc.w $17
0000211E 0000 0000                  	dc.l Pal_SBZ1           ;9
00002122 FB20                       	dc.w $FB20
00002124 0017                       	dc.w $17
00002126 0000 0000                  	dc.l Pal_Special        ;A
0000212A FB00                       	dc.w $FB00
0000212C 001F                       	dc.w $1F
0000212E 0000 0000                  	dc.l Pal_LZWater        ;B
00002132 FB00                       	dc.w $FB00
00002134 001F                       	dc.w $1F
00002136 0000 0000                  	dc.l Pal_SBZ3           ;C
0000213A FB20                       	dc.w $FB20
0000213C 0017                       	dc.w $17
0000213E 0000 0000                  	dc.l Pal_SBZ3Water      ;D
00002142 FB00                       	dc.w $FB00
00002144 001F                       	dc.w $1F
00002146 0000 0000                  	dc.l Pal_SBZ2           ;E
0000214A FB20                       	dc.w $FB20
0000214C 0017                       	dc.w $17
0000214E 0000 0000                  	dc.l Pal_LZSonWater     ;F
00002152 FB00                       	dc.w $FB00
00002154 0007                       	dc.w 7
00002156 0000 0000                  	dc.l Pal_SBZ3SonWat     ;10
0000215A FB00                       	dc.w $FB00
0000215C 0007                       	dc.w 7
0000215E 0000 0000                  	dc.l Pal_SpeResult      ;11
00002162 FB00                       	dc.w $FB00
00002164 001F                       	dc.w $1F
00002166 0000 0000                  	dc.l Pal_SpeContinue    ;12
0000216A FB00                       	dc.w $FB00
0000216C 000F                       	dc.w $F
0000216E 0000 0000                  	dc.l Pal_Ending         ;13
00002172 FB00                       	dc.w $FB00
00002174 001F                       	dc.w $1F
00002176 0000 0000                          dc.l Pal_Mighty         ;14   
0000217A FB00                       	dc.w $FB00
0000217C 0007                       	dc.w 7
0000217E 0000 0000                          dc.l Pal_LZMigWater     ;15
00002182 FB00                       	dc.w $FB00
00002184 0007                       	dc.w 7
00002186 0000 0000                  	dc.l Pal_SBZ3MigWat     ;16
0000218A FB00                       	dc.w $FB00
0000218C 0007                       	dc.w 7
0000218E 0000 0000                          dc.l Menu_Palette; 17
00002192 FB00                       	dc.w $FB00	; RAM address
00002194 001F                       	dc.w $1F
00002196 0000 0000                          dc.l Pal_Tikal         ;18   
0000219A FB00                       	dc.w $FB00
0000219C 0007                       	dc.w 7
0000219E 0000 0000                          dc.l Pal_LZTikWater     ;19
000021A2 FB00                       	dc.w $FB00
000021A4 0007                       	dc.w 7
000021A6 0000 0000                          dc.l Pal_SplScr          ;1A
000021AA FB00                       	dc.w $FB00
000021AC 001F                       	dc.w $1F
000021AE 0000 0000                          dc.l Pal_TtlScr          ;1B
000021B2 FB00                       	dc.w $FB00
000021B4 001F                       	dc.w $1F
000021B6 0000 0000                          dc.l Pal_Shadow         ;1C   
000021BA FB00                       	dc.w $FB00
000021BC 0007                       	dc.w 7
000021BE 0000 0000                          dc.l Pal_LZShdWater     ;1D
000021C2 FB00                       	dc.w $FB00
000021C4 0007                       	dc.w 7
000021C6 0000 0000                          dc.l Pal_Espio        ;1E   
000021CA FB00                       	dc.w $FB00
000021CC 0007                       	dc.w 7
000021CE 0000 0000                          dc.l Pal_DiaryGHZ          ;1F
000021D2 FB00                       	dc.w $FB00
000021D4 001F                       	dc.w $1F
000021D6 0000 0000                          dc.l Pal_DiaryMZ          ;20
000021DA FB00                       	dc.w $FB00
000021DC 001F                       	dc.w $1F
000021DE 0000 0000                          dc.l Pal_DiarySYZ          ;21
000021E2 FB00                       	dc.w $FB00
000021E4 001F                       	dc.w $1F
000021E6 0000 0000                          dc.l Pal_DiarySLZ          ;22
000021EA FB00                       	dc.w $FB00
000021EC 001F                       	dc.w $1F
000021EE 0000 0000                          dc.l Pal_DiarySBZ          ;23
000021F2 FB00                       	dc.w $FB00
000021F4 001F                       	dc.w $1F
000021F6 0000 0000                          dc.l Pal_CredScr1          ;24
000021FA FB00                       	dc.w $FB00
000021FC 001F                       	dc.w $1F
000021FE 0000 0000                          dc.l Pal_CredScr2          ;25
00002202 FB00                       	dc.w $FB00
00002204 001F                       	dc.w $1F
00002206 0000 0000                          dc.l Pal_DiaryFZ           ;26
0000220A FB00                       	dc.w $FB00
0000220C 001F                       	dc.w $1F
0000220E 0000 0000                          dc.l Pal_BallhogBoss
00002212 FB20                               dc.w $FB20
00002214 0007                               dc.w 7
00002214 0007                               dc.w 7
00002216                            
00002216                            ; ---------------------------------------------------------------------------
00002216                            ; Pallet data
00002216                            ; ---------------------------------------------------------------------------
00002216                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002296                            Pal_Title:	incbin	pallet\title.bin
000022F6                            Pal_LevelSel:	incbin	LS_BG\Pal.bin
00002376                            Pal_SplScr:	incbin	#Splashscreen\Pal.bin
00002396                            Pal_TtlScr:	incbin	#Titlescreen\pal.bin
000023B6                            Pal_DiaryGHZ:	incbin	#DearDiary\Pal.bin
000023D6                            Pal_DiaryMZ:	incbin	#DearDiary\Pal2.bin
000023F6                            Pal_DiarySYZ:	incbin	#DearDiary\Pal3.bin
00002416                            Pal_DiarySLZ:	incbin	#DearDiary\Pal4.bin
00002436                            Pal_DiarySBZ:	incbin	#DearDiary\Pal5.bin
00002456                            Pal_DiaryFZ:	incbin	#DearDiary\Pal6.bin
00002476                            Pal_CredScr1:	incbin	#Credits\Pal1.bin
00002496                            Pal_CredScr2:	incbin	#Credits\Pal2.bin
000024B6                            Pal_Sonic:	incbin	pallet\sonic.bin
000024D6                            Pal_Mighty:     incbin  pallet\mighty.bin
000024F6                            Pal_Tikal:      incbin  pallet\tikal.bin
00002576                            Pal_Shadow:     incbin  pallet\shadow.bin
00002596                            Pal_Espio:      incbin  pallet\espio.bin
00002616                            Pal_GHZ:	incbin	pallet\ghz.bin
00002676                            Pal_LZ:		incbin	pallet\lz.bin
000026D6                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002756                            Pal_MZ:		incbin	pallet\mz.bin
000027B6                            Pal_SLZ:	incbin	pallet\slz.bin
00002816                            Pal_SYZ:	incbin	pallet\syz.bin
00002876                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
000028D6                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
00002936                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
000029B6                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
00002A16                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A96                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002AB6                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002AD6                            Pal_LZMigWater:	incbin	pallet\mighty_lzuw.bin	; Mighty (underwater in LZ) pallet
00002AF6                            Pal_SBZ3MigWat:	incbin	pallet\mighty_sbzuw.bin	; Mighty (underwater in SBZ act 3) pallet
00002B16                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B96                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002BD6                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002C56                            Pal_LZTikWater:	incbin	pallet\tikal_lzuw.bin	; Tikal (underwater in LZ) pallet
00002C76                            Pal_LZShdWater:	incbin	pallet\shadow_lzuw.bin	; Shadow (underwater in LZ) pallet
00002C96                            
00002C96                            ; ---------------------------------------------------------------------------
00002C96                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002C96                            ; ---------------------------------------------------------------------------
00002C96                            
00002C96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C96                            
00002C96                            
00002C96                            DelayProgram:				; XREF: PauseGame
00002C96 46FC 2300                  		move	#$2300,sr	; disable interrupts
00002C9A 4A38 F62A                  	@wait:	tst.b	($FFFFF62A).w	; has VBlank routine finished?
00002C9E 66FA                       		bne.s	@wait		; if not, branch
00002CA0 4E75                       		rts	
00002CA2                            ; End of function DelayProgram
00002CA2                            
00002CA2                            ; ---------------------------------------------------------------------------
00002CA2                            ; Subroutine to	generate a pseudo-random number	in d0
00002CA2                            ; ---------------------------------------------------------------------------
00002CA2                            
00002CA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CA2                            
00002CA2                            
00002CA2                            RandomNumber:
00002CA2 2238 F636                  		move.l	($FFFFF636).w,d1
00002CA6 6600                       		bne.s	loc_29C0
00002CA8 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002CAE                            
00002CAE                            loc_29C0:
00002CAE 2001                       		move.l	d1,d0
00002CB0 E581                       		asl.l	#2,d1
00002CB2 D280                       		add.l	d0,d1
00002CB4 E781                       		asl.l	#3,d1
00002CB6 D280                       		add.l	d0,d1
00002CB8 3001                       		move.w	d1,d0
00002CBA 4841                       		swap	d1
00002CBC D041                       		add.w	d1,d0
00002CBE 3200                       		move.w	d0,d1
00002CC0 4841                       		swap	d1
00002CC2 21C1 F636                  		move.l	d1,($FFFFF636).w
00002CC6 4E75                       		rts	
00002CC8                            ; End of function RandomNumber
00002CC8                            
00002CC8                            
00002CC8                            ; ===========================================================================
00002CC8                            ; Subroutine to calculate sine and cosine
00002CC8                            ; ===========================================================================
00002CC8                            ; Input:	d0 - Angle (0-$FF)
00002CC8                            ; Output:	d0 - Sine
00002CC8                            ;		d1 - Cosine
00002CC8                            ; ---------------------------------------------------------------------------
00002CC8                            
00002CC8                            CalcSine:
00002CC8 0240 00FF                  		andi.w	#$FF,d0
00002CCC D040                       		add.w	d0,d0
00002CCE 0640 0080                  		addi.w	#$80,d0
00002CD2 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1	; get cosine
00002CD6 0440 0080                  		subi.w	#$80,d0
00002CDA 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0	; get sine
00002CDE 4E75                       		rts	
00002CE0                            
00002CE0                            Sine_Data:	incbin	misc\sinewave.bin	; pre-calculated Sine values
00002F60                            
00002F60                            ; End of function CalcSine
00002F60                            
00002F60                            ; ---------------------------------------------------------------------------
00002F60                            
00002F60                            ; ===========================================================================
00002F60                            ; Unknown subroutine to calculate something
00002F60                            ; ===========================================================================
00002F60                            
00002F60 48E7 6000                  		movem.l	d1-d2,-(sp)
00002F64 3200                       		move.w	d0,d1
00002F66 4841                       		swap	d1
00002F68 7000                       		moveq	#0,d0
00002F6A 3200                       		move.w	d0,d1
00002F6C 7407                       		moveq	#7,d2
00002F6E                            
00002F6E                            loc_2C80:
00002F6E E599                       		rol.l	#2,d1
00002F70 D040                       		add.w	d0,d0
00002F72 5240                       		addq.w	#1,d0
00002F74 9240                       		sub.w	d0,d1
00002F76 6400                       		bcc.s	loc_2C9A
00002F78 D240                       		add.w	d0,d1
00002F7A 5340                       		subq.w	#1,d0
00002F7C 51CA FFF0                  		dbf	d2,loc_2C80
00002F80 E248                       		lsr.w	#1,d0
00002F82 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002F86 4E75                       		rts	
00002F88                            ; ===========================================================================
00002F88                            
00002F88                            loc_2C9A:
00002F88 5240                       		addq.w	#1,d0
00002F8A 51CA FFE2                  		dbf	d2,loc_2C80
00002F8E E248                       		lsr.w	#1,d0
00002F90 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002F94 4E75                       		rts
00002F96                            
00002F96                            
00002F96                            ; ===========================================================================
00002F96                            ; Subroutine calculate an angle
00002F96                            ; ===========================================================================
00002F96                            ; Input:	d1 - X-axis distance
00002F96                            ;		d2 - Y-axis distance
00002F96                            ; Output:	d0 - Angle
00002F96                            ; ---------------------------------------------------------------------------
00002F96                            
00002F96                            CalcAngle:
00002F96 48E7 1800                  		movem.l	d3-d4,-(sp)
00002F9A 7600                       		moveq	#0,d3
00002F9C 7800                       		moveq	#0,d4
00002F9E 3601                       		move.w	d1,d3
00002FA0 3802                       		move.w	d2,d4
00002FA2 8843                       		or.w	d3,d4
00002FA4 6700                       		beq.s	loc_2D04
00002FA6 3802                       		move.w	d2,d4
00002FA8 4A43                       		tst.w	d3
00002FAA 6A00 0000                  		bpl.w	loc_2CC2
00002FAE 4443                       		neg.w	d3
00002FB0                            
00002FB0                            loc_2CC2:
00002FB0 4A44                       		tst.w	d4
00002FB2 6A00 0000                  		bpl.w	loc_2CCA
00002FB6 4444                       		neg.w	d4
00002FB8                            
00002FB8                            loc_2CCA:
00002FB8 B843                       		cmp.w	d3,d4
00002FBA 6400 0000                  		bcc.w	loc_2CDC
00002FBE E18C                       		lsl.l	#8,d4
00002FC0 88C3                       		divu.w	d3,d4
00002FC2 7000                       		moveq	#0,d0
00002FC4 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002FC8 6000                       		bra.s	loc_2CE6
00002FCA                            ; ===========================================================================
00002FCA                            
00002FCA                            loc_2CDC:				; XREF: CalcAngle
00002FCA E18B                       		lsl.l	#8,d3
00002FCC 86C4                       		divu.w	d4,d3
00002FCE 7040                       		moveq	#$40,d0
00002FD0 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002FD4                            
00002FD4                            loc_2CE6:
00002FD4 4A41                       		tst.w	d1
00002FD6 6A00 0000                  		bpl.w	loc_2CF2
00002FDA 4440                       		neg.w	d0
00002FDC 0640 0080                  		addi.w	#$80,d0
00002FE0                            
00002FE0                            loc_2CF2:
00002FE0 4A42                       		tst.w	d2
00002FE2 6A00 0000                  		bpl.w	loc_2CFE
00002FE6 4440                       		neg.w	d0
00002FE8 0640 0100                  		addi.w	#$100,d0
00002FEC                            
00002FEC                            loc_2CFE:
00002FEC 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002FF0 4E75                       		rts	
00002FF2                            ; ===========================================================================
00002FF2                            
00002FF2                            loc_2D04:				; XREF: CalcAngle
00002FF2 303C 0040                  		move.w	#$40,d0
00002FF6 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002FFA 4E75                       		rts	
00002FFC                            ; End of function CalcAngle
00002FFC                            
00002FFC                            ; ===========================================================================
00002FFC                            
00002FFC                            Angle_Data:	incbin	misc\angles.bin
000030FE                            
000030FE                            ; ===========================================================================
000030FE                            
000030FE                            ; ---------------------------------------------------------------------------
000030FE                            ; Sega screen
000030FE                            ; ---------------------------------------------------------------------------
000030FE                            
000030FE                            ;SegaScreen:				; XREF: GameModeArray
000030FE                            		;move.b	#$E4,d0
000030FE                            		;bsr.w	PlaySound_Special ; stop music
000030FE                            		;bsr.w	ClearPLC
000030FE                            		;bsr.w	Pal_FadeFrom
000030FE                            		;lea	($C00004).l,a6
000030FE                            
000030FE                            		; store VDP registers
000030FE                            		;move.w	#$8004,(a6)	; $00
000030FE                            		;move.w	#$8230,(a6)	; $02, set Plane A nametable offset in VRAM
000030FE                            		;move.w	#$8407,(a6)	; $04, set Plane B nametable offset in VRAM
000030FE                            		;move.w	#$8700,(a6)     ; $07, set Blackdrop Color
000030FE                            		;move.w	#$8B00,(a6)	; $0B, set Scrolling Mode
000030FE                            
000030FE                            		;clr.b	($FFFFF64E).w	; clear water palette state
000030FE                            		;move	#$2700,sr	; disable interrupts
000030FE                            		;move.w	($FFFFF60C).w,d0
000030FE                            		;andi.b	#$BF,d0
000030FE                            		;move.w	d0,($C00004).l
000030FE                            		;bsr.w	ClearScreen
000030FE                            
000030FE                            		; load Sega logo patterns to VRAM
000030FE                            		;vram	$0000
000030FE                            		;lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000030FE                            		;bsr.w	NemDec
000030FE                            
000030FE                            		; decompress Sega logo mappings to RAM
000030FE                            		;lea	($FF0000).l,a1		; load destination, where to decompress mappings
000030FE                            		;lea	(Eni_SegaLogo).l,a0	; load Sega logo mappings
000030FE                            		;move.w	#0,d0
000030FE                            		;bsr.w	EniDec
000030FE                            
000030FE                            		; move uncompressed mappings to VRAM
000030FE                            		;lea	($FF0000).l,a1
000030FE                            		;vram	$E510,d0
000030FE                            		;moveq	#23,d1	; cols
000030FE                            		;moveq	#7,d2	; rows
000030FE                            		;bsr.w	ShowVDPGraphics
000030FE                            		;lea	($FF0180).l,a1
000030FE                            		;vram	$C000,d0
000030FE                            		;moveq	#39,d1	; cols
000030FE                            		;moveq	#27,d2	; rows
000030FE                            		;bsr.w	ShowVDPGraphics
000030FE                            
000030FE                            		;moveq	#0,d0
000030FE                            		;bsr.w	PalLoad2	; load Sonic's pallet
000030FE                            		;move.w	#-$A,($FFFFF632).w
000030FE                            		;move.w	#0,($FFFFF634).w
000030FE                            		;move.w	#0,($FFFFF662).w
000030FE                            		;move.w	#0,($FFFFF660).w
000030FE                            		;move.w	($FFFFF60C).w,d0
000030FE                            		;ori.b	#$40,d0
000030FE                            		;move.w	d0,($C00004).l
000030FE                            
000030FE                            ;Sega_WaitPallet:
000030FE                            		;move.b	#2,($FFFFF62A).w
000030FE                            		;bsr.w	DelayProgram
000030FE                            		;bsr.w	PalCycle_Sega
000030FE                            		;bne.s	Sega_WaitPallet	; if pallete cycle isn't over, branch
000030FE                            
000030FE                            		;move.b	#$E1,d0
000030FE                            		;bsr.w	PlaySound_Special ; play "SEGA"	sound
000030FE                            		;move.b	#$14,($FFFFF62A).w
000030FE                            		;bsr.w	DelayProgram
000030FE                            		;move.w	#$1E,($FFFFF614).w
000030FE                            
000030FE                            ;Sega_WaitEnd:
000030FE                            		;move.b	#2,($FFFFF62A).w
000030FE                            		;bsr.w	DelayProgram
000030FE                            		;tst.w	($FFFFF614).w
000030FE                            		;beq.s	Sega_GotoTitle
000030FE                            		;andi.b	#Start,(Joypad|Press).w	; is Start button pressed?
000030FE                            		;beq.s	Sega_WaitEnd		; if not, branch
000030FE                            
000030FE                            ;Sega_GotoTitle:
000030FE                            		;move.b	#4,($FFFFF600).w	; go to Title Screen
000030FE                            		;rts
000030FE                            ;SegaScreenClassic:				; XREF: GameModeArray
000030FE                            		include	"Modes/SegaScreen2/code.asm"
000030FE                            SegaScreen:
000030FE                                            ;move.b	#$9B,d0           ; 
000030FE                            		;bsr.w	PlaySound_Special ; stop music
000030FE 4EB8 1DC0                  		jsr	Pal_FadeFrom
00003102 4EB8 159C                  		jsr	ClearPLC
00003106 4EB9 0000 0000             		jsr	ClearVRAM
0000310C                            
0000310C 4DF9 00C0 0004             		lea	($C00004).l,a6
00003112 3CBC 8004                  		move.w	#$8004,(a6)
00003116 3CBC 8230                  		move.w	#$8230,(a6)
0000311A 3CBC 8407                  		move.w	#$8407,(a6)
0000311E 3CBC 8700                  		move.w	#$8700,(a6)
00003122 3CBC 8B00                  		move.w	#$8B00,(a6)
00003126 3CBC 8C81                  		move.w	#$8C81,(a6)
0000312A                            	;	move.w	#$8154,(a6)
0000312A                            
0000312A 4278 FF38                  		clr.w	($FFFFFF38).w
0000312E 4278 F634                  		clr.w	($FFFFF634).w
00003132 4278 F662                  		clr.w	($FFFFF662).w
00003136 4278 F660                  		clr.w	($FFFFF660).w
0000313A                            
0000313A 46FC 2700                  		move	#$2700,sr
0000313E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003142 0200 00BF                  		andi.b	#$BF,d0
00003146 33C0 00C0 0004             		move.w	d0,($C00004).l
0000314C                            		
0000314C 4EB8 11F6                  		jsr	ClearScreen
00003150 43F8 AC00                  		lea	($FFFFAC00).w,a1
00003154 7000                       		moveq	#0,d0
00003156 323C 00FF                  		move.w	#$FF,d1
0000315A                            
0000315A                            loc_3230_2:
0000315A 22C0                       		move.l	d0,(a1)+
0000315C 51C9 FFFC                  		dbf	d1,loc_3230_2
00003160 43F8 D000                  		lea	(RAM_SpriteAddr).w,a1
00003164 7000                       		moveq	#0,d0
00003166 323C 07FF                  		move.w	#$7FF,d1
0000316A                            
0000316A                            loc_3240_2:
0000316A 22C0                       		move.l	d0,(a1)+
0000316C 51C9 FFFC                  		dbf	d1,loc_3240_2
00003170 43F8 F700                  		lea	($FFFFF700).w,a1
00003174 7000                       		moveq	#0,d0
00003176 323C 003F                  		move.w	#$3F,d1	; '?'
0000317A                            
0000317A                            loc_3250_2:
0000317A 22C0                       		move.l	d0,(a1)+
0000317C 51C9 FFFC                  		dbf	d1,loc_3250_2
00003180 43F8 EE00                  		lea	($FFFFEE00).w,a1
00003184 7000                       		moveq	#0,d0
00003186 323C 003F                  		move.w	#$3F,d1	; '?'
0000318A                            
0000318A                            loc_3260_2:
0000318A 22C0                       		move.l	d0,(a1)+
0000318C 51C9 FFFC                  		dbf	d1,loc_3260_2
00003190 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003194 7000                       		moveq	#0,d0
00003196 323C 001F                  		move.w	#$1F,d1
0000319A                            
0000319A                            loc_3270_2:
0000319A 22C0                       		move.l	d0,(a1)+
0000319C 51C9 FFFC                  		dbf	d1,loc_3270_2
000031A0                            
000031A0 103C 00E4                  		move.b	#Snd_Special_StopSng,d0
000031A4 4EB8 12D0                  		jsr	PlaySound_Special
000031A8 4EB8 1DC0                  		jsr	Pal_FadeFrom
000031AC                            
000031AC 43F9 0000 0000             		lea	(Maps_SegaLogoClassic).l,a1
000031B2 203C 459C 0003             		move.l	#$459C0003,d0
000031B8 720C                       		moveq	#12,d1
000031BA 7403                       		moveq	#3,d2
000031BC 4EB8 134E                  		jsr	ShowVDPGraphics
000031C0                            
000031C0 103C 0035                  		move.b	#$35,d0
000031C4 23FC 4020 0000 00C0 0004   		move.l	#$40200000,($C00004).l
000031CE 45F9 0000 0000             		lea	(ArtUnc_SegaLogoClassic).l,a2
000031D4 4EB9 0000 0000             		jsr	LoadUncArt
000031DA                            
000031DA 303C 000A                  		move.w	#$A,d0
000031DE 43F9 0000 0000             		lea	(Pal_SegaLogoClassic),a1
000031E4 45F8 FB00                  		lea	($FFFFFB00),a2
000031E8 4EB9 0000 0000             		jsr	PalLoad
000031EE                            
000031EE 31FC 0004 0000             		move.w	#4,(SegaScr_PalCnt).w
000031F4 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000031FA 3038 F60C                  		move.w	($FFFFF60C).w,d0
000031FE 0000 0040                  		ori.b	#$40,d0
00003202 33C0 00C0 0004             		move.w	d0,($C00004).l
00003208                            
00003208                            	;	btst	#6,($A10001).l		; Is NTSC?
00003208                            	;	bne.w	SegaLogo_MD_2
00003208 0839 0007 00A1 0001        		btst	#7,($A10001).l		; Is the console japanese (Mega Drive)?
00003210 6700 0000                  		beq.w	SegaLogo_MD		; If yes branch
00003214                            
00003214 23FC 45B4 0003 00C0 0004   		move.l	#$45B40003,($C00004).l  ; Add
0000321E 23FC 0035 0036 00C0 0000   		move.l	#$00350036,($C00000).l  ;     TM
00003228                            SegaLogo_MD:
00003228 4EB8 1D1A                  		jsr	Pal_FadeTo
0000322C                            		;move.b	#Snd_Special_SEGA,d0    ;Delete these lines to disable
0000322C                            		;jsr	PlaySound_Special       ;the "SEGA" Sound
0000322C                            
0000322C                            SegaLogo_Loop:
0000322C 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
00003232 5278 FF38                  		add.w	#1,($FFFFFF38).w
00003236 4EB8 2C96                  		jsr	DelayProgram
0000323A 4EB9 0000 0000             		jsr	SegaScreen_PalCyc
00003240                            
00003240 0C38 0080 F605             		cmp.b	#JoyStart,(RAM_Control_1_Press).w
00003246 6700 0000                  		beq	SegaLogo_GoTo_SegaScreen
0000324A 0C78 00F0 FF38             		cmp.w	#$F0,($FFFFFF38).w
00003250 6C00 0000                  		bge.w	SegaLogo_GoTo_SegaScreen
00003254                            
00003254 60D6                       		bra	SegaLogo_Loop
00003256                            
00003256                            SegaLogo_GoTo_SegaScreen:
00003256 103C 00E4                  		move.b	#Snd_Special_StopSng,d0
0000325A 4EB8 12D0                  		jsr	PlaySound_Special
0000325E 4238 0000                  		clr.b	(SegaScr_PalCnt).w
00003262 4278 0000                  		clr.w	(SegaScr_Delay).w
00003266 11FC 0004 F600             		move.b	#ModeID_Title,(Game_Mode).w
0000326C                                            ;move.b	#$20,($FFFFF600).w			; set screen mode to "SSRG Screen"
0000326C 4E75                       		rts
0000326E                            
0000326E                            ;ASCII_NoNtsc: ;Unused
0000326E                            ;		dc.b	"DEVELOPED FOR USE ONLY WITH", $FF
0000326E                            ;		dc.b	"       NTSC GENESIS",$FF
0000326E                            ;		dc.b	"     NTSC MEGA DRIVE  ",$FF
0000326E                            ;		dc.b	"      PAL MEGA DRIVE  ",$FF
0000326E                            ;		dc.b	"          SYSTEM",0
0000326E                            ;		even
0000326E                            
0000326E                            ;=======================================================================================
0000326E =FFFFF500                  SegaScr_PalCnt equ $FFFFF500
0000326E =FFFFF502                  SegaScr_Delay equ $FFFFF502
0000326E                            
0000326E                            SegaScreen_PalCyc:
0000326E 5378 F502                  		subq.w	#1,(SegaScr_Delay).w
00003272 6A00 0000                  		bpl.w	SegaScreen_Return
00003276 31FC 0003 F502             		move.w	#3,(SegaScr_Delay).w	;DELAY
0000327C                            
0000327C 41F9 0000 0000             		lea	(PalCyc_SegaLogoClassic),a0
00003282 7000                       		moveq	#0,d0
00003284 3038 F500                  		move.w	(SegaScr_PalCnt).w,d0
00003288                            
00003288 5478 F500                  		addq.w	#2,(SegaScr_PalCnt).w
0000328C 0C78 0024 F500             		cmp.w	#$24,(SegaScr_PalCnt).w
00003292 6F00 0000                  		ble.w	SegaScreen_PalCycle_Run
00003296                            	;	move.w	#0,(SegaScr_PalCnt).w
00003296 4E75                       		rts
00003298                            
00003298                            SegaScreen_PalCycle_Run:
00003298 43F0 0000                  		lea	(a0,d0.w),a1		
0000329C 45F8 FB16                  		lea	($FFFFFB16),a2
000032A0 3519                       		move.w	(a1)+,-(a2)
000032A2 3519                       		move.w	(a1)+,-(a2)
000032A4 3519                       		move.w	(a1)+,-(a2)
000032A6 3519                       		move.w	(a1)+,-(a2)
000032A8 3519                       		move.w	(a1)+,-(a2)
000032AA 3519                       		move.w	(a1)+,-(a2)
000032AC 3519                       		move.w	(a1)+,-(a2)
000032AE 3519                       		move.w	(a1)+,-(a2)
000032B0 3519                       		move.w	(a1)+,-(a2)
000032B2 4E75                       		rts
000032B4                            
000032B4                            SegaScreen_Return:
000032B4 4E75                       		rts
000032B6                            
000032B6                            ;===================================================================================
000032B6                            
000032B6                            SEGALogo_Delay: ;Unused
000032B6 2E3C 0000 0FFF             		move.l	#$fff,d7
000032BC                            SEGALogo_Delay2:
000032BC 4E71                       		nop			;LAG
000032BE 51CF FFFC                  		dbra    d7,SEGALogo_Delay2
000032C2 51CE FFF2                  		dbra    d6,SEGALogo_Delay
000032C6 4E75                       		rts
000032C8                            
000032C8                            ;===================================================================================
000032C8                            ArtUnc_SegaLogoClassic:
000032C8                            		incbin	"Modes\SegaScreen2\GFX.bin"
00003988                            		even
00003988                            	
00003988                            Maps_SegaLogoClassic:
00003988 0001 0002 0003 0004 0005+  		dc.w $01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C
000039A0 000D 000E 000F 0010 0011+  		dc.w $0D,$0E,$0F,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1A
000039BC 001B 001C 001D 001E 001F+  		dc.w $1B,$1C,$1D,$1E,$1F,$20,$21,$22,$23,$24,$25,$26,$27
000039D6 0028 0029 002A 002B 002C+  		dc.w $28,$29,$2A,$2B,$2C,$2D,$2E,$2F,$30,$31,$32,$33,$34,$35,$36,$37
000039F6                            		even
000039F6                            
000039F6                            Pal_SegaLogoClassic:
000039F6                            		incbin	"Modes\SegaScreen2\PAL.bin"
00003A16                            		even
00003A16                            
00003A16                            
00003A16                            PalCyc_SegaLogoClassic:
00003A16                            		incbin	"Modes\SegaScreen2\ANIPAL.bin"
00003A5C                            		even
00003A5C                            
00003A5C                            ;====================================================================================
00003A5C                            ClearVRAM:
00003A5C 43F9 00C0 0000             		lea	($C00000).l,a1
00003A62 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003A6C 7200                       		moveq	#0,d1
00003A6E 303C 07FF                  		move.w	#$7FF, d0
00003A72                            
00003A72                            ClearVRAM_Loop:
00003A72 2281                       		move.l	d1,(a1)
00003A74 2281                       		move.l	d1,(a1)
00003A76 2281                       		move.l	d1,(a1)
00003A78 2281                       		move.l	d1,(a1)
00003A7A 2281                       		move.l	d1,(a1)
00003A7C 2281                       		move.l	d1,(a1)
00003A7E 2281                       		move.l	d1,(a1)
00003A80 2281                       		move.l	d1,(a1)
00003A82 51C8 FFEE                  		dbf	d0, ClearVRAM_Loop
00003A86 4E75                       		rts
00003A88                            ;====================================================================================
00003A88                            LoadUncArt:
00003A88 43F9 00C0 0000             		lea	($C00000), a1		;Mover VDP Control a "a1"
00003A8E                            
00003A8E                            LoadArt_Loop:
00003A8E 229A                       		move.l	(a2)+, (a1)		;$xxxxxxxx	<- linea a procesar
00003A90 229A                       		move.l	(a2)+, (a1)
00003A92 229A                       		move.l	(a2)+, (a1)
00003A94 229A                       		move.l	(a2)+, (a1)
00003A96 229A                       		move.l	(a2)+, (a1)
00003A98 229A                       		move.l	(a2)+, (a1)
00003A9A 229A                       		move.l	(a2)+, (a1)
00003A9C 229A                       		move.l	(a2)+, (a1)
00003A9E 51C8 FFEE                  		dbf	d0, LoadArt_Loop	;Repetir los pasos del d0
00003AA2 4E75                       		rts
00003AA4                            ;====================================================================================
00003AA4                            PalLoad:
00003AA4 D4FC 0080                  		adda.w	#$80,a2
00003AA8                            PalLoad_Loop:
00003AA8 34D9                       		move.w	(a1)+,(a2)+
00003AAA 51C8 FFFC                  		dbf	d0,PalLoad_Loop
00003AAE 4E75                       		rts
00003AB0                            ;====================================================================================
00003AB0                            
00003AB0                            ; ---------------------------------------------------------------------------
00003AB0                            ; LoadASCII
00003AB0                            ; ---------------------------------------------------------------------------
00003AB0                            LoadASCII:
00003AB0 23C5 00C0 0004             		move.l	d5,($C00004).l
00003AB6                            LoadText_Loop:
00003AB6 7200                       		moveq	#0,d1
00003AB8 1219                       		move.b	(a1)+,d1
00003ABA 6B00 0000                  		bmi.w	LoadASCII_AddSpace	; if a1 = $FF, branch
00003ABE 6600 0000                  		bne.w	LoadASCII_Print
00003AC2 4E75                       		rts
00003AC4                            LoadASCII_Print:
00003AC4 33C1 00C0 0000             		move.w	d1,($C00000)		;"print" la letra
00003ACA 6000 FFEA                  		bra.w	LoadText_Loop
00003ACE                            LoadASCII_AddSpace:
00003ACE 0685 0080 0000             		add.l	#$800000,d5		;Espacio
00003AD4 6000 FFDA                  		bra.w	LoadASCII
00003AD8                            ;====================================================================================
00003AD8                            
00003AD8                            LoadASCII_2:
00003AD8 23C5 00C0 0004             		move.l	d5,($C00004).l
00003ADE                            LoadText_2_Loop:
00003ADE 7200                       		moveq	#0,d1
00003AE0 1219                       		move.b	(a1)+,d1
00003AE2 6B00 0000                  		bmi.w	LoadASCII_2_AddSpace	; if a1 = $FF, branch
00003AE6 6600 0000                  		bne.w	LoadASCII_2_Print
00003AEA 4E75                       		rts
00003AEC                            LoadASCII_2_Print:
00003AEC D243                       		add.w	d3,d1			;VRAM Address
00003AEE 33C1 00C0 0000             		move.w	d1,($C00000)		;"print" la letra
00003AF4 6000 FFE8                  		bra.w	LoadText_2_Loop
00003AF8                            LoadASCII_2_AddSpace:
00003AF8 0685 0080 0000             		add.l	#$800000,d5		;Espacio
00003AFE 6000 FFD8                  		bra.w	LoadASCII_2
00003B02                            ;====================================================================================
00003B02                            ;d4 = text length
00003B02                            
00003B02                            LoadASCII_3:
00003B02 23C5 00C0 0004             		move.l	d5,($C00004).l
00003B08                            LoadText_3_Loop:
00003B08 7200                       		moveq	#0,d1
00003B0A 1219                       		move.b	(a1)+,d1
00003B0C 6B00 FFEA                  		bmi.w	LoadASCII_2_AddSpace	; if a1 = $FF, branch
00003B10                            
00003B10                            LoadText_3_Print_Loop:
00003B10 D243                       		add.w	d3,d1			;VRAM Address
00003B12 33C1 00C0 0000             		move.w	d1,($C00000)		;"print" la letra
00003B18 51CC FFF6                  		dbf	d4,LoadText_3_Print_Loop
00003B1C 4E75                       		rts
00003B1E                            
00003B1E                            LoadASCII_3_AddSpace:
00003B1E 0685 0080 0000             		add.l	#$800000,d5		;Espacio
00003B24 6000 FFB2                  		bra.w	LoadASCII_2
00003B28                            ;====================================================================================
00003B28 4746 3634                  		dc.b	"GF64" ; Watermark, don't delete this please...
00003B2C                            
00003B2C                            ;include	"SSRG/SSRG.asm"
00003B2C                            ;include	"SSRG/SSRG.asm"
00003B2C                            		even
00003B2C                            
00003B2C                                    include	"SSRG/SSRG.asm"	
00003B2C                            ; ===========================================================================
00003B2C                            ; ---------------------------------------------------------------------------
00003B2C                            ; SSRG Splash Screen
00003B2C                            ; ---------------------------------------------------------------------------
00003B2C                            
00003B2C                            SSRGScreen:
00003B2C 70E4                       		moveq	#$FFFFFFE4,d0				; set music ID to "stop music"
00003B2E 4EB8 12D0                  		jsr	PlaySound_Special			; play ID
00003B32 4EB8 159C                  		jsr	ClearPLC				; clear pattern load cues list
00003B36 4EB8 1DC0                  		jsr	Pal_FadeFrom				; fade palettes out
00003B3A 4EB8 11F6                  		jsr	ClearScreen				; clear the plane mappings
00003B3E 43F8 D000                  		lea	($FFFFD000).w,a1			; load object ram address to a1
00003B42 7000                       		moveq	#$00,d0					; clear d0
00003B44 323C 01FF                  		move.w	#$01FF,d1				; set repeat times
00003B48                            
00003B48                            SRG_ClearObjects:
00003B48 22C0                       		move.l	d0,(a1)+				; clear object ram
00003B4A 22C0                       		move.l	d0,(a1)+				; ''
00003B4C 22C0                       		move.l	d0,(a1)+				; ''
00003B4E 22C0                       		move.l	d0,(a1)+				; ''
00003B50 51C9 FFF6                  		dbf	d1,SRG_ClearObjects			; repeat til all object slots are cleared
00003B54 46FC 2700                  		move	#$2700,sr				; set IRQ's (Disable interrupts)
00003B58 4DF9 00C0 0004             		lea	($C00004).l,a6				; load VDP address port address
00003B5E 3CBC 8700                  		move.w	#$8700,(a6)				; set backdrop colour to the very first colour
00003B62 3CBC 8B03                  		move.w	#$8B03,(a6)				; set scroll mode to horizontal sliced (by line)
00003B66 21FC FFF8 FFD4 F616        		move.l	#$FFF8FFD4,($FFFFF616).w		; set Y scroll positions
00003B6E 23FC 4020 0000 00C0 0004   		move.l	#$40200000,($C00004).l			; set VDP to V-Ram write mode with address
00003B78 41FA 0000                  		lea	ArtMain_SSRG(pc),a0			; load compressed art address
00003B7C 4EB8 13FE                  		jsr	NemDec					; decompress and dump
00003B80 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l			; set VDP to V-Ram write mode with address
00003B8A 41FA 0000                  		lea	ArtSquare_SSRG(pc),a0			; load compressed art address
00003B8E 4EB8 13FE                  		jsr	NemDec					; decompress and dump
00003B92 23FC 4000 0002 00C0 0004   		move.l	#$40000002,($C00004).l			; set VDP to V-Ram write mode with address
00003B9C 41FA 0000                  		lea	ArtSonic_SSRG(pc),a0			; load compressed art address
00003BA0 4EB8 13FE                  		jsr	NemDec					; decompress and dump
00003BA4 23FC 5000 0002 00C0 0004   		move.l	#$50000002,($C00004).l			; set VDP to V-Ram write mode with address
00003BAE 41FA 0000                  		lea	ArtLink_SSRG(pc),a0			; load compressed art address
00003BB2 4EB8 13FE                  		jsr	NemDec					; decompress and dump
00003BB6 41FA 0000                  		lea	MapLink_SSRG(pc),a0			; load compressed mappings address
00003BBA 43F9 FFFF 0000             		lea	($FFFF0000).l,a1			; set temporary ram space to dump to
00003BC0 4EB8 185A                  		jsr	KosDec					; decompress and dump
00003BC4 4BF9 FFFF 0000             		lea	($FFFF0000).l,a5			; load mappings to read
00003BCA 701F                       		moveq	#$1F,d0					; set number of columns
00003BCC 7200                       		moveq	#$00,d1					; set number of rows
00003BCE 243C 4C08 0003             		move.l	#$4C080003,d2				; set to write to FG plane
00003BD4 6100 0000                  		bsr	MapScreen				; write to the map plane
00003BD8 41FA 0000                  		lea	MapMain_SSRG(pc),a0			; load compressed mappings address
00003BDC 43F9 FFFF 0000             		lea	($FFFF0000).l,a1			; set temporary ram space to dump to
00003BE2 4EB8 185A                  		jsr	KosDec					; decompress and dump
00003BE6 41FA 0000                  		lea	MapSquare_SSRG(pc),a0			; load compressed mappings address
00003BEA 43F9 FFFF 4000             		lea	($FFFF4000).l,a1			; set temporary ram space to dump to
00003BF0 4EB8 185A                  		jsr	KosDec					; decompress and dump
00003BF4 41FA 0000                  		lea	Pal_SSRG(pc),a0				; load palette address to a0
00003BF8 43F8 FB80                  		lea	($FFFFFB80).w,a1			; load palette buffer address to a1
00003BFC 7E07                       		moveq	#$07,d7					; set repeat times
00003BFE                            
00003BFE                            SRG_DumpPal:
00003BFE 22D8                       		move.l	(a0)+,(a1)+				; dump palette
00003C00 22D8                       		move.l	(a0)+,(a1)+				; ''
00003C02 22D8                       		move.l	(a0)+,(a1)+				; ''
00003C04 22D8                       		move.l	(a0)+,(a1)+				; ''
00003C06 51CF FFF6                  		dbf	d7,SRG_DumpPal				; repeat until done
00003C0A 43F8 D000                  		lea	($FFFFD000).w,a1			; load object ram to a1
00003C0E 12BC 0001                  		move.b	#$01,(a1)				; set "S"
00003C12 137C 0002 0040             		move.b	#$02,$40(a1)				; set "S"
00003C18 137C 0003 0080             		move.b	#$03,$80(a1)				; set "R"
00003C1E 137C 0004 00C0             		move.b	#$04,$C0(a1)				; set "G"
00003C24 46FC 2300                  		move	#$2300,sr				; set IRQ's (Enable interrupts)
00003C28 4EB8 1D1A                  		jsr	Pal_FadeTo				; fade palettes in
00003C2C 7000                       		moveq	#$00,d0					; clear d0
00003C2E 23C0 FFFF 7800             		move.l	d0,($FFFF7800).l			; reset SSRG timer/flags
00003C34 23C0 FFFF 7804             		move.l	d0,($FFFF7804).l			; ''
00003C3A 23C0 FFFF 7808             		move.l	d0,($FFFF7808).l			; ''
00003C40                            
00003C40                            ; ---------------------------------------------------------------------------
00003C40                            ; SSRG Splash Screen main loop
00003C40                            ; ---------------------------------------------------------------------------
00003C40                            
00003C40                            SSRGScreen_Loop:
00003C40 11FC 0004 F62A             		move.b	#$04,($FFFFF62A).w			; set V-Blank routine to run
00003C46 4EB8 2C96                  		jsr	DelayProgram				; hult til V-Blank begins
00003C4A 5279 FFFF 7800             		addq.w	#$01,($FFFF7800).l			; increase timer
00003C50 41F8 D000                  		lea	($FFFFD000).w,a0			; load "S" object ram
00003C54 6100 0000                  		bsr	ObjectLetters				; run "S"
00003C58 41E8 0040                  		lea	$40(a0),a0				; load "S" object ram
00003C5C 6100 0000                  		bsr	ObjectLetters				; run "S"
00003C60 41E8 0040                  		lea	$40(a0),a0				; load "R" object ram
00003C64 6100 0000                  		bsr	ObjectLetters				; run "R"
00003C68 41E8 0040                  		lea	$40(a0),a0				; load "G" object ram
00003C6C 6100 0000                  		bsr	ObjectLetters				; run "G"
00003C70 41E8 0040                  		lea	$40(a0),a0				; load Square object ram
00003C74 6100 0000                  		bsr	ObjectSquare				; run Square
00003C78 41F8 D140                  		lea	($FFFFD140).w,a0			; load Neon Sonic object ram
00003C7C 6100 0000                  		bsr	ObjectSonicNeon				; run Neon Sonic
00003C80 6100 0000                  		bsr	SRG_ScrollFG				; scroll the FG plane correctly
00003C84 6100 0000                  		bsr	SRG_DrawFG				; draw the FG plane correctly
00003C88 4EB9 0000 0000             		jsr	BuildSprites				; present all object sprites on screen
00003C8E 4A38 F605                  		tst.b	($FFFFF605).w				; has player 1 pressed start button?
00003C92 6B00 0000                  		bmi	SSRGScreen_Finish			; if so, branch
00003C96 0C79 0200 FFFF 7800        		cmpi.w	#$0200,($FFFF7800).l			; has timer finished?
00003C9E 6DA0                       		blt	SSRGScreen_Loop				; if not, loop
00003CA0                            
00003CA0                            SSRGScreen_Finish:
00003CA0 11FC 0004 F600             		move.b	#$04,($FFFFF600).w			; set the screen mode to Title Screen
00003CA6 4E75                       		rts						; return
00003CA8                            
00003CA8                            ; ===========================================================================
00003CA8                            ; ---------------------------------------------------------------------------
00003CA8                            ; Subroutine to control the FG scrolling
00003CA8                            ; ---------------------------------------------------------------------------
00003CA8                            
00003CA8                            SRG_ScrollFG:
00003CA8 43F8 CDCC                  		lea	($FFFFCDCC).w,a1			; load the horizontal scroll buffer address
00003CAC 7000                       		moveq	#$00,d0					; clear d0
00003CAE 3039 FFFF 7800             		move.w	($FFFF7800).l,d0			; load timer as position
00003CB4 0640 0030                  		addi.w	#$0030,d0				; increase to scroll in sooner
00003CB8 0C40 00F7                  		cmpi.w	#$00F7,d0				; has timer reached finish?
00003CBC 6C00 0000                  		bge	SRG_FinFGScroll				; if not, branch
00003CC0 D040                       		add.w	d0,d0					; multiply by 2
00003CC2 4440                       		neg.w	d0					; negate to move left insted
00003CC4 4840                       		swap	d0					; send left for FG
00003CC6 7E1F                       		moveq	#$1F,d7					; set repeat times
00003CC8                            
00003CC8                            SRG_SFG_Scroll01:
00003CC8 22C0                       		move.l	d0,(a1)+				; dump to buffer
00003CCA 51CF FFFC                  		dbf	d7,SRG_SFG_Scroll01			; repeat til this section is done
00003CCE                            
00003CCE                            SRG_FinFGScroll:
00003CCE 43F8 CC00                  		lea	($FFFFCC00).w,a1			; load the horizontal scroll buffer address
00003CD2 3039 FFFF 7808             		move.w	($FFFF7808).l,d0			; set BG position
00003CD8 3E3C 00DF                  		move.w	#$00DF,d7				; set repeat times
00003CDC                            
00003CDC                            SRG_SBG_Scroll02:
00003CDC 5449                       		addq.w	#$02,a1					; skip FG
00003CDE 32C0                       		move.w	d0,(a1)+				; dump BG
00003CE0 51CF FFFA                  		dbf	d7,SRG_SBG_Scroll02			; repeat for all scanlines
00003CE4 4E75                       		rts						; return
00003CE6                            
00003CE6                            ; ===========================================================================
00003CE6                            ; ---------------------------------------------------------------------------
00003CE6                            ; Subroutine to control the FG map/drawing
00003CE6                            ; ---------------------------------------------------------------------------
00003CE6                            
00003CE6                            SRG_DrawFG:
00003CE6 7000                       		moveq	#$00,d0					; clear d0
00003CE8 3039 FFFF 7800             		move.w	($FFFF7800).l,d0			; load timer as position
00003CEE D040                       		add.w	d0,d0					; multiply by 2
00003CF0 0440 0040                  		subi.w	#$0040,d0				; subtract starting point
00003CF4 0C40 0110                  		cmpi.w	#$0110,d0				; has the scrolling surpassed the starting or ending par?
00003CF8 6200 0000                  		bhi	SRG_DFG_FlashOn				; if so, branch
00003CFC 46FC 2700                  		move	#$2700,sr				; set IRQ's (Disable interrupts)
00003D00 49F9 FFFF 0000             		lea	($FFFF0000).l,a4			; load map buffer space address to a4
00003D06 4BF9 00C0 0000             		lea	($C00000).l,a5				; load VDP data port address to a5
00003D0C 4DED 0004                  		lea	$04(a5),a6				; load VDP address port address to a6
00003D10 2C3C 4704 0003             		move.l	#$47040003,d6				; set starting V-Ram
00003D16 0240 01F8                  		andi.w	#$01F8,d0				; get within 8 pixels
00003D1A E448                       		lsr.w	#$02,d0					; divide by 4
00003D1C 3200                       		move.w	d0,d1					; copy to d1
00003D1E 4840                       		swap	d0					; align
00003D20 DC80                       		add.l	d0,d6					; add to V-Ram address
00003D22 D8C1                       		adda.w	d1,a4					; add to map buffer address
00003D24 3CBC 8F80                  		move.w	#$8F80,(a6)				; set increment mode to 80 (new line)
00003D28 323C 2000                  		move.w	#$2000,d1				; prepare palette line add value
00003D2C 2C86                       		move.l	d6,(a6)					; set VDP mode and address
00003D2E 3014                       		move.w	(a4),d0					; load map tile
00003D30 D041                       		add.w	d1,d0					; increase palette to next line
00003D32 3A80                       		move.w	d0,(a5)					; save map tile to V-Ram
00003D34 49EC 0046                  		lea	$46(a4),a4				; advance to next line
00003D38 3014                       		move.w	(a4),d0					; load map tile
00003D3A D041                       		add.w	d1,d0					; increase palette to next line
00003D3C 3A80                       		move.w	d0,(a5)					; save map tile to V-Ram
00003D3E 49EC 0046                  		lea	$46(a4),a4				; advance to next line
00003D42 3014                       		move.w	(a4),d0					; load map tile
00003D44 D041                       		add.w	d1,d0					; increase palette to next line
00003D46 3A80                       		move.w	d0,(a5)					; save map tile to V-Ram
00003D48 3CBC 8F02                  		move.w	#$8F02,(a6)				; set increment mode to 02 (standard word)
00003D4C 46FC 2300                  		move	#$2300,sr				; set IRQ's (Enable interrupts)
00003D50 4E75                       		rts						; return
00003D52                            
00003D52                            SRG_DFG_FlashOn:
00003D52 0440 0170                  		subi.w	#$0170,d0				; minus starting point
00003D56 6B00 0000                  		bmi	SRG_DFG_NoDraw				; if not reached the starting point, branch
00003D5A 7A00                       		moveq	#$00,d5					; set tile add value (Light)
00003D5C 0C40 0060                  		cmpi.w	#$0060,d0				; has it reached PASSED the ending point?
00003D60 6200 0000                  		bhi	SRG_DFG_NoDraw				; if so, branch to skip the lot
00003D64 0C40 0050                  		cmpi.w	#$0050,d0				; has it reached the ending point?
00003D68 6200 0000                  		bhi	SRG_DFG_DrawFlash			; if so, branch for lights on
00003D6C 0200 0008                  		andi.b	#$08,d0					; get within 8
00003D70 6700 0000                  		beq	SRG_DFG_DrawFlash			; if from 0 to 7 insted of 8 to F, branch
00003D74 3A3C 2000                  		move.w	#$2000,d5				; set tile add value (Faded)
00003D78                            
00003D78                            SRG_DFG_DrawFlash:
00003D78 4BF9 FFFF 0000             		lea	($FFFF0000).l,a5			; load mappings to read
00003D7E 7022                       		moveq	#$22,d0					; set number of columns
00003D80 7202                       		moveq	#$02,d1					; set number of rows
00003D82 243C 4704 0003             		move.l	#$47040003,d2				; set to write to FG plane
00003D88 6100 0000                  		bsr	MapScreenAdd				; write to the map plane
00003D8C                            
00003D8C                            SRG_DFG_NoDraw:
00003D8C 4E75                       		rts						; return
00003D8E                            
00003D8E                            ; ===========================================================================
00003D8E                            ; ---------------------------------------------------------------------------
00003D8E                            ; Subroutine to control a Neon Sonic object
00003D8E                            ; ---------------------------------------------------------------------------
00003D8E                            
00003D8E                            ObjectSonicNeon:
00003D8E 4A28 0024                  		tst.b	$24(a0)					; has the object alread been setup?
00003D92 6600 0000                  		bne	OSN_SetupDone				; if so, branch
00003D96 10BC 0001                  		move.b	#$01,(a0)				; engine doesn't like the ID being null
00003D9A 317C 6400 0002             		move.w	#$6400,$02(a0)				; set V-Ram address read
00003DA0 217C 0000 0000 0004        		move.l	#ObjSonNeonMap,$04(a0)			; set mappings to use
00003DA8 217C 0000 00DE 0008        		move.l	#$000000DE,$08(a0)			; set starting X and Y positions
00003DB0 317C 2020 0018             		move.w	#$2020,$18(a0)				; set out of distance display & width
00003DB6 117C 0020 0016             		move.b	#$20,$16(a0)				; set height
00003DBC 317C 00C0 002A             		move.w	#$00C0,$2A(a0)				; set timer
00003DC2 317C 0400 0010             		move.w	#$0400,$10(a0)				; set X speed
00003DC8 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
00003DCC                            
00003DCC                            OSN_SetupDone:
00003DCC 4A68 002A                  		tst.w	$2A(a0)					; has timer finished?
00003DD0 6700 0000                  		beq	OSN_MoveIn				; if not, branch
00003DD4 5368 002A                  		subq.w	#$01,$2A(a0)				; decrease timer
00003DD8 4E75                       		rts						; return
00003DDA                            
00003DDA                            OSN_MoveIn:
00003DDA 0C28 0002 0024             		cmpi.b	#$02,$24(a0)				; is the routine counter still at sonic moving?
00003DE0 6E00 0000                  		bgt	OSN_NoStop				; if not, branch
00003DE4 0C68 00DE 0008             		cmpi.w	#$00DE,$08(a0)				; has sonic moved to the square yet?
00003DEA 6D00 0000                  		blt	OSN_NoStop				; if not, branch
00003DEE 317C 00DE 0008             		move.w	#$00DE,$08(a0)				; set him directly at the square
00003DF4 4268 0010                  		clr.w	$10(a0)					; stop sonic moving (no X speed)
00003DF8 70BE                       		moveq	#$FFFFFFBE,d0				; set to play spinning SFX
00003DFA 4EB8 12D0                  		jsr	PlaySound_Special			; play SFX
00003DFE 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
00003E02                            
00003E02                            OSN_NoStop:
00003E02 0668 0040 002C             		addi.w	#$0040,$2C(a0)				; increase map speed
00003E08 1028 002C                  		move.b	$2C(a0),d0				; load current map speed
00003E0C 0C00 0006                  		cmpi.b	#$06,d0					; has the map ID supassed 5?
00003E10 6D00 0000                  		blt	OSN_NoResetAni				; if not, branch
00003E14 7000                       		moveq	#$00,d0					; reset to 0
00003E16 3140 002C                  		move.w	d0,$2C(a0)				; reset map speed
00003E1A                            
00003E1A                            OSN_NoResetAni:
00003E1A 1140 001A                  		move.b	d0,$1A(a0)				; set map ID
00003E1E 3039 FFFF 7800             		move.w	($FFFF7800).l,d0			; load timer
00003E24 0200 0007                  		andi.b	#$07,d0					; keep within 8 frames
00003E28 6600 0000                  		bne	OSN_NoCyclePalette			; if it's not been 8 frames, branch
00003E2C 43F8 FB68                  		lea	($FFFFFB68).w,a1			; load palette green buffer address to a1
00003E30 45D1                       		lea	(a1),a2					; '' to a2
00003E32 3019                       		move.w	(a1)+,d0				; store first colour
00003E34 34D9                       		move.w	(a1)+,(a2)+				; shift colours back
00003E36 34D9                       		move.w	(a1)+,(a2)+				; ''
00003E38 34D1                       		move.w	(a1),(a2)+				; ''
00003E3A 3280                       		move.w	d0,(a1)					; save first colour as last
00003E3C                            
00003E3C                            OSN_NoCyclePalette:
00003E3C 6100 0000                  		bsr	SpeedToPosHud				; convert speed to position
00003E40 4EF9 0000 0000             		jmp	DisplaySprite				; save object for displaying
00003E46                            
00003E46                            ; ===========================================================================
00003E46                            ; ---------------------------------------------------------------------------
00003E46 0000                       ObjSonNeonMap:	dc.w	ObjSon00-ObjSonNeonMap			; 00
00003E48 0000                       		dc.w	ObjSon01-ObjSonNeonMap			; 01
00003E4A 0000                       		dc.w	ObjSon02-ObjSonNeonMap			; 02
00003E4C 0000                       		dc.w	ObjSon03-ObjSonNeonMap			; 03
00003E4E 0000                       		dc.w	ObjSon04-ObjSonNeonMap			; 04
00003E50 0000                       		dc.w	ObjSon05-ObjSonNeonMap			; 05
00003E52                            ; ---------------------------------------------------------------------------
00003E52 04                         ObjSon00:	dc.b	$04
00003E53 EB0D 0000 EC               		dc.b	$EB,$0D,$00,$00,$EC
00003E58 FB09 0008 EC               		dc.b	$FB,$09,$00,$08,$EC
00003E5D FB06 000E 04               		dc.b	$FB,$06,$00,$0E,$04
00003E62 0B04 0014 EC               		dc.b	$0B,$04,$00,$14,$EC
00003E67 02                         ObjSon01:	dc.b	$02
00003E68 EC0D 0000 ED               		dc.b	$EC,$0D,$00,$00,$ED
00003E6D FC0E 0016 F5               		dc.b	$FC,$0E,$00,$16,$F5
00003E72 02                         ObjSon02:	dc.b	$02
00003E73 ED09 0022 F3               		dc.b	$ED,$09,$00,$22,$F3
00003E78 FD0A 0028 F3               		dc.b	$FD,$0A,$00,$28,$F3
00003E7D 04                         ObjSon03:	dc.b	$04
00003E7E EB09 0022 F4               		dc.b	$EB,$09,$00,$22,$F4
00003E83 FB09 0031 EC               		dc.b	$FB,$09,$00,$31,$EC
00003E88 FB06 0037 04               		dc.b	$FB,$06,$00,$37,$04
00003E8D 0B04 003D EC               		dc.b	$0B,$04,$00,$3D,$EC
00003E92 02                         ObjSon04:	dc.b	$02
00003E93 EC09 0022 F3               		dc.b	$EC,$09,$00,$22,$F3
00003E98 FC0E 003F EB               		dc.b	$FC,$0E,$00,$3F,$EB
00003E9D 03                         ObjSon05:	dc.b	$03
00003E9E ED0D 0000 EC               		dc.b	$ED,$0D,$00,$00,$EC
00003EA3 FD0C 004B F4               		dc.b	$FD,$0C,$00,$4B,$F4
00003EA8 0509 004F F4               		dc.b	$05,$09,$00,$4F,$F4
00003EAE 00                         		even
00003EAE                            ; ---------------------------------------------------------------------------
00003EAE                            ; ===========================================================================
00003EAE                            ; ---------------------------------------------------------------------------
00003EAE                            ; Subroutine to control the Square much like objects
00003EAE                            ; ---------------------------------------------------------------------------
00003EAE                            
00003EAE                            ObjectSquare:
00003EAE 7000                       		moveq	#$00,d0					; clear d0
00003EB0 1028 0024                  		move.b	$24(a0),d0				; load routine counter
00003EB4 303B 0000                  		move.w	OS_Index(pc,d0.w),d0			; load correct PC add address
00003EB8 4EFB 0000                  		jmp	OS_Index(pc,d0.w)			; add and jump
00003EBC                            
00003EBC                            ; ===========================================================================
00003EBC                            ; ---------------------------------------------------------------------------
00003EBC 0000                       OS_Index:	dc.w	OS_Startup-OS_Index			; 00
00003EBE 0000                       		dc.w	OL_WaitTime-OS_Index			; 02
00003EC0 0000                       		dc.w	OS_PlaySound-OS_Index			; 04
00003EC2 0000                       		dc.w	OS_SpinIn-OS_Index			; 06
00003EC4 0000                       		dc.w	OS_UpAndLand-OS_Index			; 08
00003EC6 0000                       		dc.w	OS_FinishSpin-OS_Index			; 0A
00003EC8                            ; ---------------------------------------------------------------------------
00003EC8                            ; ===========================================================================
00003EC8                            ; ---------------------------------------------------------------------------
00003EC8                            ; Startup
00003EC8                            ; ---------------------------------------------------------------------------
00003EC8                            
00003EC8                            OS_Startup:
00003EC8 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
00003ECC 217C FF40 0020 0008        		move.l	#$FF400020,$08(a0)			; set starting X and Y positions
00003ED4 317C 00A0 002A             		move.w	#$00A0,$2A(a0)				; set time to wait for
00003EDA 217C 0800 0000 0010        		move.l	#$08000000,$10(a0)			; set X and Y starting speeds
00003EE2 6000 0000                  		bra	UpdateScrollPositions			; update positions
00003EE6                            
00003EE6                            ; ===========================================================================
00003EE6                            ; ---------------------------------------------------------------------------
00003EE6                            ; Playing spin sound once
00003EE6                            ; ---------------------------------------------------------------------------
00003EE6                            
00003EE6                            OS_PlaySound:
00003EE6 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
00003EEA 70BC                       		moveq	#$FFFFFFBC,d0				; set to play spin release SFX
00003EEC 4EB8 12D0                  		jsr	PlaySound_Special			; play SFX
00003EF0                            
00003EF0                            ; ===========================================================================
00003EF0                            ; ---------------------------------------------------------------------------
00003EF0                            ; Spinning in and hitting the SSRG letters
00003EF0                            ; ---------------------------------------------------------------------------
00003EF0                            
00003EF0                            OS_SpinIn:
00003EF0 5468 002A                  		addq.w	#$02,$2A(a0)				; increase spin counter
00003EF4 3028 0008                  		move.w	$08(a0),d0				; load X position
00003EF8 0C40 0060                  		cmpi.w	#$0060,d0				; has the square hit the letters?
00003EFC 6D00 0000                  		blt	OS_Display				; if not, branch
00003F00 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
00003F04 70BD                       		moveq	#$FFFFFFBD,d0				; set to play spiked chandelier SFX
00003F06 4EB8 12D0                  		jsr	PlaySound_Special			; play SFX
00003F0A 217C FF00 FC00 0010        		move.l	#$FF00FC00,$10(a0)			; set X and Y bounce off speeds
00003F12 43F9 FFFF D010             		lea	($FFFFD010).l,a1			; load object ram's X and Y speeds
00003F18 22BC 0300 FC00             		move.l	#$0300FC00,(a1)				; save "S" X and Y speeds
00003F1E 237C 0300 FD00 0040        		move.l	#$0300FD00,$40(a1)			; save "S" X and Y speeds
00003F26 237C 0300 FE00 0080        		move.l	#$0300FE00,$80(a1)			; save "R" X and Y speeds
00003F2E 237C 0300 FF00 00C0        		move.l	#$0300FF00,$C0(a1)			; save "G" X and Y speeds
00003F36 6000 0000                  		bra	OS_Display				; continue
00003F3A                            
00003F3A                            ; ===========================================================================
00003F3A                            ; ---------------------------------------------------------------------------
00003F3A                            ; Spinning in and hitting the SSRG letters
00003F3A                            ; ---------------------------------------------------------------------------
00003F3A                            
00003F3A                            OS_UpAndLand:
00003F3A 5168 002A                  		subq.w	#$08,$2A(a0)				; increase spin counter
00003F3E 0668 0020 0012             		addi.w	#$0020,$12(a0)				; increase gravity
00003F44 6B00 0000                  		bmi	OS_Display				; if not going down, branch
00003F48 0C68 0020 000A             		cmpi.w	#$0020,$0A(a0)				; has the square hit the ground?
00003F4E 6D00 0000                  		blt	OS_Display				; if not, branch
00003F52 317C 0020 000A             		move.w	#$0020,$0A(a0)				; set to the ground
00003F58 7000                       		moveq	#$00,d0					; clear d0
00003F5A 2140 0010                  		move.l	d0,$10(a0)				; clear X and Y speeds
00003F5E 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
00003F62 317C 0A40 002C             		move.w	#$0A40,$2C(a0)				; set speed of spin
00003F68 6000 0000                  		bra	OS_Display				; continue
00003F6C                            
00003F6C                            ; ===========================================================================
00003F6C                            ; ---------------------------------------------------------------------------
00003F6C                            ; Finishing the spin by slowing down
00003F6C                            ; ---------------------------------------------------------------------------
00003F6C                            
00003F6C                            OS_FinishSpin:
00003F6C 3028 002C                  		move.w	$2C(a0),d0				; has spin speed finished?
00003F70 6A00 0000                  		bpl	OS_NoFinish				; if not, branch
00003F74 43F8 FB62                  		lea	($FFFFFB62).w,a1			; load palette buffer address
00003F78 0C51 0E0E                  		cmpi.w	#$0E0E,(a1)				; has the colour finished changing?
00003F7C 6700 0000                  		beq	OS_NoColour01				; if so, branch
00003F80 0651 0202                  		addi.w	#$0202,(a1)				; increase the colour
00003F84                            
00003F84                            OS_NoColour01:
00003F84 5849                       		addq.w	#$04,a1					; goto next 2nd colour
00003F86 0C51 0404                  		cmpi.w	#$0404,(a1)				; has the colour finished changing?
00003F8A 6700 0000                  		beq	OS_Display				; if so, branch
00003F8E 0451 0202                  		subi.w	#$0202,(a1)				; decrease the colour
00003F92 6000 0000                  		bra	OS_Display				; continue
00003F96                            
00003F96                            OS_NoFinish:
00003F96 0440 0018                  		subi.w	#$18,d0					; decrease spin speed
00003F9A 3200                       		move.w	d0,d1					; copy to d1
00003F9C E049                       		lsr.w	#$08,d1					; get left byte only
00003F9E 9368 002A                  		sub.w	d1,$2A(a0)				; subtract that from the spin position
00003FA2 3140 002C                  		move.w	d0,$2C(a0)				; update spin speed
00003FA6                            
00003FA6                            ; ===========================================================================
00003FA6                            ; ---------------------------------------------------------------------------
00003FA6                            ; Displaying the square
00003FA6                            ; ---------------------------------------------------------------------------
00003FA6                            
00003FA6                            OS_Display:
00003FA6 4EB9 0000 0000             		jsr	SpeedToPosHud				; convert speed to position
00003FAC 6100 0000                  		bsr	UpdateScrollPositions			; update positions
00003FB0                            
00003FB0                            OS_DiplayEnd:
00003FB0 3F28 002A                  		move.w	$2A(a0),-(sp)				; store spin counter
00003FB4 46FC 2700                  		move	#$2700,sr				; set IRQ's (Disable interrupts)
00003FB8 7010                       		moveq	#$10,d0					; set number of columns
00003FBA 7210                       		moveq	#$10,d1					; set number of rows
00003FBC 243C 6000 0003             		move.l	#$60000003,d2				; set to write to BG plane
00003FC2 7A00                       		moveq	#$00,d5					; set blank tile
00003FC4 6100 0000                  		bsr	MapScreenSingle				; write to the map plane
00003FC8 301F                       		move.w	(sp)+,d0				; load spin counter
00003FCA 0240 0018                  		andi.w	#$0018,d0				; keep in range
00003FCE D040                       		add.w	d0,d0					; multiply by 2
00003FD0 49FB 0000                  		lea	MapRamData(pc,d0.w),a4			; load map ram address data
00003FD4 2A5C                       		movea.l	(a4)+,a5				; load mappings to read
00003FD6 241C                       		move.l	(a4)+,d2				; load V-Ram address
00003FD8 301C                       		move.w	(a4)+,d0				; load X draw amount
00003FDA 321C                       		move.w	(a4)+,d1				; load Y draw amount
00003FDC 6100 0000                  		bsr	MapScreen				; write to the map plane
00003FE0 46FC 2300                  		move	#$2300,sr				; set IRQ's (Enable interrupts)
00003FE4 4E75                       		rts						; return
00003FE6                            
00003FE6                            ; ---------------------------------------------------------------------------
00003FE6                            ; Updating the scroll positions for the BG plane
00003FE6                            ; ---------------------------------------------------------------------------
00003FE6                            
00003FE6                            UpdateScrollPositions:
00003FE6 33E8 0008 FFFF 7808        		move.w	$08(a0),($FFFF7808).l			; load X position as X scroll BG
00003FEE 3028 000A                  		move.w	$0A(a0),d0				; load Y position
00003FF2 4440                       		neg.w	d0					; negate opposite direction
00003FF4 31C0 F618                  		move.w	d0,($FFFFF618).w			; save as Y scroll BG
00003FF8 4E75                       		rts						; return
00003FFA                            
00003FFA                            ; ===========================================================================
00003FFA                            ; ---------------------------------------------------------------------------
00003FFA FFFF 4000                  MapRamData:	dc.l	$FFFF4000				; Map address
00003FFE 6104 0003                  		dc.l	$61040003				; V-Ram address
00004002 000B 000B                  		dc.l	$000B000B				; X and Y draw amount
00004006 0000 0000                  		dc.l	$00000000				; null/spare
0000400A FFFF 4120                  		dc.l	$FFFF4120				; ''
0000400E 6000 0003                  		dc.l	$60000003				; ''
00004012 000F 000F                  		dc.l	$000F000F				; ''
00004016 0000 0000                  		dc.l	$00000000				; ''
0000401A FFFF 4320                  		dc.l	$FFFF4320				; ''
0000401E 6000 0003                  		dc.l	$60000003				; ''
00004022 0010 0010                  		dc.l	$00100010				; ''
00004026 0000 0000                  		dc.l	$00000000				; ''
0000402A FFFF 4562                  		dc.l	$FFFF4562				; ''
0000402E 6000 0003                  		dc.l	$60000003				; ''
00004032 000F 000F                  		dc.l	$000F000F				; ''
00004036 0000 0000                  		dc.l	$00000000				; ''
0000403A                            ; ---------------------------------------------------------------------------
0000403A                            ; ===========================================================================
0000403A                            ; ---------------------------------------------------------------------------
0000403A                            ; Subroutine to control the "SSRG" letter sprites
0000403A                            ; ---------------------------------------------------------------------------
0000403A                            
0000403A                            ObjectLetters:
0000403A 7000                       		moveq	#$00,d0					; clear d0
0000403C 1028 0024                  		move.b	$24(a0),d0				; load routine counter
00004040 303B 0000                  		move.w	OL_Index(pc,d0.w),d0			; load correct PC add address
00004044 4EFB 0000                  		jmp	OL_Index(pc,d0.w)			; add and jump
00004048                            
00004048                            ; ===========================================================================
00004048                            ; ---------------------------------------------------------------------------
00004048 0000                       OL_Index:	dc.w	OL_Startup-OL_Index			; 00
0000404A 0000                       		dc.w	OL_WaitTime-OL_Index			; 02
0000404C 0000                       		dc.w	OL_FlyUp-OL_Index			; 04
0000404E 0000                       		dc.w	OL_Spring-OL_Index			; 06
00004050 0000                       		dc.w	OL_SlowDown-OL_Index			; 08
00004052 0000                       		dc.w	OL_Idle-OL_Index			; 0A
00004054                            ; ---------------------------------------------------------------------------
00004054                            ; ===========================================================================
00004054                            ; ---------------------------------------------------------------------------
00004054                            ; Object data	dc.w	$XXXX,$YYYY,$VRAM,$TIME,$XSPD,$YSPD,$MAPI,$????
00004054                            ; ---------------------------------------------------------------------------
00004054 0182 0180 0001 0001 FF00+  OL_Data:	dc.w	$0182,$0180,$0001,$0001,$FF00,$F400,$0000,$0000
00004064 01A8 0180 0001 0011 FF00+  		dc.w	$01A8,$0180,$0001,$0011,$FF00,$F400,$0000,$0000
00004074 01D0 0180 0011 0021 FF00+  		dc.w	$01D0,$0180,$0011,$0021,$FF00,$F400,$0000,$0000
00004084 01F8 0180 0021 0031 FF00+  		dc.w	$01F8,$0180,$0021,$0031,$FF00,$F400,$0000,$0000
00004094                            ; ---------------------------------------------------------------------------
00004094                            ; ===========================================================================
00004094                            ; ---------------------------------------------------------------------------
00004094                            ; Startup
00004094                            ; ---------------------------------------------------------------------------
00004094                            
00004094                            OL_Startup:
00004094 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
00004098 1010                       		move.b	(a0),d0					; load object type
0000409A 5300                       		subq.b	#$01,d0					; decrease by 1
0000409C E948                       		lsl.w	#$04,d0					; multiply by 10
0000409E 43FB 00B4                  		lea	OL_Data(pc,d0.w),a1			; load correct data address
000040A2 2159 0008                  		move.l	(a1)+,$08(a0)				; set X & Y position
000040A6 3159 0002                  		move.w	(a1)+,$02(a0)				; set V-Ram
000040AA 3159 002A                  		move.w	(a1)+,$2A(a0)				; set Timer
000040AE 2159 0010                  		move.l	(a1)+,$10(a0)				; set X and Y speeds
000040B2 3019                       		move.w	(a1)+,d0				; load map ID
000040B4 1140 001A                  		move.b	d0,$1A(a0)				; set map ID
000040B8 217C 0000 0000 0004        		move.l	#ObjLet_Map,$04(a0)			; set mappings to use
000040C0 317C 2020 0018             		move.w	#$2020,$18(a0)				; set out of distance display & width
000040C6 117C 0020 0016             		move.b	#$20,$16(a0)				; set height
000040CC                            
000040CC                            ; ===========================================================================
000040CC                            ; ---------------------------------------------------------------------------
000040CC                            ; Delay/Time wait
000040CC                            ; ---------------------------------------------------------------------------
000040CC                            
000040CC                            OL_WaitTime:
000040CC 5368 002A                  		subq.w	#$01,$2A(a0)				; decrease timer
000040D0 6600 0000                  		bne	OL_WT_Wait				; if not finished, branch
000040D4 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000040D8                            
000040D8                            OL_WT_Wait:
000040D8 4EF9 0000 0000             		jmp	DisplaySprite				; save object for displaying
000040DE                            
000040DE                            ; ===========================================================================
000040DE                            ; ---------------------------------------------------------------------------
000040DE                            ; Flying up and landing
000040DE                            ; ---------------------------------------------------------------------------
000040DE                            
000040DE                            OL_FlyUp:
000040DE 4EB9 0000 0000             		jsr	SpeedToPosHud				; convert speed to position
000040E4 0668 0040 0012             		addi.w	#$0040,$12(a0)				; increase speed
000040EA 6B00 0000                  		bmi	OL_NoStopDown				; if still moving up, branch
000040EE 303C 00F0                  		move.w	#$00F0,d0				; set Y speed to check
000040F2 B068 000A                  		cmp.w	$0A(a0),d0				; has the letter dropped to the landing line?
000040F6 6C00 0000                  		bge	OL_NoStopDown				; if not, branch
000040FA 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000040FE                            
000040FE                            OL_NoStopDown:
000040FE 4EF9 0000 0000             		jmp	DisplaySprite				; save object for displaying
00004104                            
00004104                            ; ===========================================================================
00004104                            ; ---------------------------------------------------------------------------
00004104                            ; Springing under the land and back up again
00004104                            ; ---------------------------------------------------------------------------
00004104                            
00004104                            OL_Spring:
00004104 4EB9 0000 0000             		jsr	SpeedToPosHud				; convert speed to position
0000410A 0468 0080 0012             		subi.w	#$0080,$12(a0)				; decrease speed
00004110 6A00 0000                  		bpl	OL_NoStopUp				; if still moving down, branch
00004114 303C 00E8                  		move.w	#$00E8,d0				; set Y speed to check
00004118 B068 000A                  		cmp.w	$0A(a0),d0				; has the letter moved up to the landing line?
0000411C 6D00 0000                  		blt	OL_NoStopUp				; if not, branch
00004120 4268 0012                  		clr.w	$12(a0)					; set no Y speed
00004124 4268 002A                  		clr.w	$2A(a0)					; clear timer
00004128 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
0000412C                            
0000412C                            OL_NoStopUp:
0000412C 4EF9 0000 0000             		jmp	DisplaySprite				; save object for displaying
00004132                            
00004132                            ; ===========================================================================
00004132                            ; ---------------------------------------------------------------------------
00004132                            ; Slowing the letter down on X
00004132                            ; ---------------------------------------------------------------------------
00004132                            
00004132                            OL_SlowDown:
00004132 4A68 0010                  		tst.w	$10(a0)					; is there any left movement on X?
00004136 6A00 0000                  		bpl	OL_NoMove				; if not, branch
0000413A 4EB9 0000 0000             		jsr	SpeedToPosHud				; convert speed to position
00004140 0668 0020 0010             		addi.w	#$0020,$10(a0)				; increase X speed to slow down to move right
00004146 4EF9 0000 0000             		jmp	DisplaySprite				; save object for displaying
0000414C                            
0000414C                            OL_NoMove:
0000414C 5228 002A                  		addi.b	#$01,$2A(a0)				; increase timer
00004150 1028 002A                  		move.b	$2A(a0),d0				; load timer
00004154 0200 0001                  		andi.b	#$01,d0					; get only the odd bit
00004158 6700 0000                  		beq	OL_Idle					; if null, branch to skip (Slows the flash down)
0000415C 7040                       		moveq	#$40,d0					; set colour line to check value on
0000415E B028 0002                  		cmp.b	$02(a0),d0				; has colour line reached last?
00004162 6E00 0000                  		bgt	OL_NoFinish				; if not, branch
00004166 0228 009F 0002             		andi.b	#$9F,$02(a0)				; reset colour line to first
0000416C 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
00004170 7000                       		moveq	#$00,d0					; clear d0
00004172 2140 0010                  		move.l	d0,$10(a0)				; clear X and Y speeds
00004176 0268 01FF 000A             		andi.w	#$01FF,$0A(a0)				; reset Y position range correctly
0000417C 317C 00E4 000A             		move.w	#$00E4,$0A(a0)				; set Y position
00004182 4EF9 0000 0000             		jmp	DisplaySprite				; save object for displaying
00004188                            
00004188                            OL_NoFinish:
00004188 0628 0020 0002             		addi.b	#$20,$02(a0)				; increase palette line being used
0000418E                            
0000418E                            ; ===========================================================================
0000418E                            ; ---------------------------------------------------------------------------
0000418E                            ; Idle (Finish)
0000418E                            ; ---------------------------------------------------------------------------
0000418E                            
0000418E                            OL_Idle:
0000418E 6100 0000                  		bsr	SpeedToPosHud				; convert speed to position
00004192 0C68 00E4 000A             		cmpi.w	#$00E4,$0A(a0)				; has the letter moved up to the landing line?
00004198 6700 0000                  		beq	OL_CheckXSpeed				; if so, branch
0000419C 6D00 0000                  		blt	OL_CheckYSpeed				; if not, branch
000041A0 4268 0012                  		clr.w	$12(a0)					; set no Y speed
000041A4 317C 00E4 000A             		move.w	#$00E4,$0A(a0)				; set Y position
000041AA 6000 0000                  		bra	OL_CheckXSpeed				; continue
000041AE                            
000041AE                            OL_CheckYSpeed:
000041AE 0668 0080 0012             		addi.w	#$0080,$12(a0)				; increase gravity
000041B4                            
000041B4                            OL_CheckXSpeed:
000041B4 303C 0040                  		move.w	#$0040,d0				; set speed decrease
000041B8 4A68 0010                  		tst.w	$10(a0)					; is there any X speed?
000041BC 6700 0000                  		beq	OL_Display				; if not, branch
000041C0 6A00 0000                  		bpl	OL_DecreaseRight			; if it's moving right, branch
000041C4 4440                       		neg.w	d0					; negate decreasing speed
000041C6                            
000041C6                            OL_DecreaseRight:
000041C6 9168 0010                  		sub.w	d0,$10(a0)				; decrease speed
000041CA                            
000041CA                            OL_Display:
000041CA 4EF9 0000 0000             		jmp	DisplaySprite				; save object for displaying
000041D0                            
000041D0                            ; ===========================================================================
000041D0                            ; ---------------------------------------------------------------------------
000041D0 0000                       ObjLet_Map:	dc.w	ObjLet_SSRG-ObjLet_Map			; 00
000041D2                            ; ---------------------------------------------------------------------------
000041D2 01                         ObjLet_SSRG:	dc.b	$01
000041D3 F00F 0000 F0               		dc.b	$F0,$0F,$00,$00,$F0
000041D8                            		even
000041D8                            ; ---------------------------------------------------------------------------
000041D8                            ; ===========================================================================
000041D8                            ; ---------------------------------------------------------------------------
000041D8                            ; Subroutine to convert speed to position for HUD objects
000041D8                            ; ---------------------------------------------------------------------------
000041D8                            
000041D8                            SpeedToPosHud:
000041D8 3028 0010                  		move.w	$10(a0),d0				; load X speed
000041DC 48C0                       		ext.l	d0					; extend incase it's negative
000041DE E180                       		asl.l	#$08,d0					; multiply by 100
000041E0 4840                       		swap	d0					; get X add position
000041E2 D168 0008                  		add.w	d0,$08(a0)				; save new X position
000041E6 3028 0012                  		move.w	$12(a0),d0				; load Y speed
000041EA 48C0                       		ext.l	d0					; extend incase it's negative
000041EC E180                       		asl.l	#$08,d0					; multiply by 100
000041EE D1A8 000A                  		add.l	d0,$0A(a0)				; save new Y position
000041F2 4E75                       		rts						; return
000041F4                            
000041F4                            ; ===========================================================================
000041F4                            ; ---------------------------------------------------------------------------
000041F4                            ; Subroutine to map tile to VDP screen
000041F4                            ; ---------------------------------------------------------------------------
000041F4                            
000041F4                            MapScreen:
000041F4 4DF9 00C0 0000             		lea	($C00000).l,a6				; load VDP data port address to a6
000041FA 49EE 0004                  		lea	$04(a6),a4				; load VDP address port address to a4
000041FE 283C 0080 0000             		move.l	#$00800000,d4				; prepare line add value
00004204                            
00004204                            MapScreen_Row:
00004204 2882                       		move.l	d2,(a4)					; set VDP to VRam write mode
00004206 3600                       		move.w	d0,d3					; reload number of columns
00004208                            
00004208                            MapScreen_Column:
00004208 3C9D                       		move.w	(a5)+,(a6)				; dump map to VDP map slot
0000420A 51CB FFFC                  		dbf	d3,MapScreen_Column			; repeat til columns have dumped
0000420E D484                       		add.l	d4,d2					; increae to next row on VRam
00004210 51C9 FFF2                  		dbf	d1,MapScreen_Row			; repeat til all rows have dumped
00004214 4E75                       		rts						; return
00004216                            
00004216                            ; ===========================================================================
00004216                            ; ---------------------------------------------------------------------------
00004216                            ; Subroutine to map tile to VDP screen (Adding contents of d5)
00004216                            ; ---------------------------------------------------------------------------
00004216                            
00004216                            MapScreenAdd:
00004216 4DF9 00C0 0000             		lea	($C00000).l,a6				; load VDP data port address to a6
0000421C 49EE 0004                  		lea	$04(a6),a4				; load VDP address port address to a4
00004220 283C 0080 0000             		move.l	#$00800000,d4				; prepare line add value
00004226                            
00004226                            MapScreenAdd_Row:
00004226 2882                       		move.l	d2,(a4)					; set VDP to VRam write mode
00004228 3600                       		move.w	d0,d3					; reload number of columns
0000422A                            
0000422A                            MapScreenAdd_Column:
0000422A 3C1D                       		move.w	(a5)+,d6				; load map ID
0000422C DC45                       		add.w	d5,d6					; add d5 contents
0000422E 3C86                       		move.w	d6,(a6)					; dump map to VDP map slot
00004230 51CB FFF8                  		dbf	d3,MapScreenAdd_Column			; repeat til columns have dumped
00004234 D484                       		add.l	d4,d2					; increae to next row on VRam
00004236 51C9 FFEE                  		dbf	d1,MapScreenAdd_Row			; repeat til all rows have dumped
0000423A 4E75                       		rts						; return
0000423C                            
0000423C                            ; ===========================================================================
0000423C                            ; ---------------------------------------------------------------------------
0000423C                            ; Subroutine to map a single tile to VDP screen
0000423C                            ; ---------------------------------------------------------------------------
0000423C                            
0000423C                            MapScreenSingle:
0000423C 4DF9 00C0 0000             		lea	($C00000).l,a6				; load VDP data port address to a6
00004242 49EE 0004                  		lea	$04(a6),a4				; load VDP address port address to a4
00004246 283C 0080 0000             		move.l	#$00800000,d4				; prepare line add value
0000424C                            
0000424C                            MapScreenSingle_Row:
0000424C 2882                       		move.l	d2,(a4)					; set VDP to VRam write mode
0000424E 3600                       		move.w	d0,d3					; reload number of columns
00004250                            
00004250                            MapScreenSingle_Column:
00004250 3C85                       		move.w	d5,(a6)					; dump map to VDP map slot
00004252 51CB FFFC                  		dbf	d3,MapScreenSingle_Column		; repeat til columns have dumped
00004256 D484                       		add.l	d4,d2					; increae to next row on VRam
00004258 51C9 FFF2                  		dbf	d1,MapScreenSingle_Row			; repeat til all rows have dumped
0000425C 4E75                       		rts						; return
0000425E                            
0000425E                            ; ===========================================================================
0000425E                            ; ---------------------------------------------------------------------------
0000425E                            ; SSRG Data
0000425E                            ; ---------------------------------------------------------------------------
0000425E 0000 0400 0800 0C00 0E00+  Pal_SSRG:	dc.w	$0000,$0400,$0800,$0C00,$0E00,$0EEE,$0AAA,$0888
0000426E 0666 0444 0222 0000 0000+  		dc.w	$0666,$0444,$0222,$0000,$0000,$0000,$0000,$0000
0000427E 0000 0444 0888 0CCC 0EEE+  		dc.w	$0000,$0444,$0888,$0CCC,$0EEE,$0888,$0666,$0444
0000428E 0222 0000 0000 0000 0000+  		dc.w	$0222,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000429E 0000 0422 0844 0C66 0E88+  		dc.w	$0000,$0422,$0844,$0C66,$0E88,$0000,$0000,$0000
000042AE 0000 0000 0000 0000 0000+  		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000042BE 0000 0404 0808 0E0E 00E0+  		dc.w	$0000,$0404,$0808,$0E0E,$00E0,$00C0,$00A0,$0080
000042CE 0000 0000 0000 0000 0000+  		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000042DE                            		even
000042DE                            ; ---------------------------------------------------------------------------
000042DE                            ArtMain_SSRG:	incbin	"SSRG/ArtMain.nem"
00004952 00                         		even
00004952                            ArtSquare_SSRG:	incbin	"SSRG/ArtSquare.nem"
00004DBE 00                         		even
00004DBE                            ArtSonic_SSRG:	incbin	"SSRG/ArtSonic.nem"
0000509C                            		even
0000509C                            ArtLink_SSRG:	incbin	"SSRG/ArtLink.nem"
00005184                            		even
00005184                            ; ---------------------------------------------------------------------------
00005184                            MapMain_SSRG:	incbin	"SSRG/MapMain.kos"
00005236 00                         		even
00005236                            MapSquare_SSRG:	incbin	"SSRG/MapSquare.kos"
00005480                            		even
00005480                            MapLink_SSRG:	incbin	"SSRG/MapLink.kos"
000054B6                            		even
000054B6                            ; ---------------------------------------------------------------------------
000054B6                            ; ===========================================================================
000054B6                            ; ===========================================================================
000054B6                            ; ===========================================================================
000054B6                            
000054B6                            ; ---------------------------------------------------------------------------
000054B6                            ; Title	screen
000054B6                            ; ---------------------------------------------------------------------------
000054B6                            
000054B6                            TitleScreen:				; XREF: GameModeArray
000054B6 103C 00E4                  		move.b	#$E4,d0
000054BA 6100 BE14                  		bsr.w	PlaySound_Special ; stop music
000054BE 6100 C0DC                  		bsr.w	ClearPLC
000054C2 6100 C8FC                  		bsr.w	Pal_FadeFrom	; fade from black
000054C6 46FC 2700                  		move	#$2700,sr
000054CA 6100 BDB8                  		bsr.w	SoundDriverLoad
000054CE 4DF9 00C0 0004             		lea	($C00004).l,a6
000054D4                            		
000054D4                            		; setup VPD registers
000054D4 3CBC 8004                  		move.w	#$8004,(a6)	; $00
000054D8 3CBC 8230                  		move.w	#$8230,(a6)	; $02, set Plane A nametable offset in VRAM
000054DC 3CBC 8407                  		move.w	#$8407,(a6)	; $04, set Plane B nametable offset in VRAM
000054E0 3CBC 9001                  		move.w	#$9001,(a6)	; $10
000054E4 3CBC 9200                  		move.w	#$9200,(a6)	; $12
000054E8 3CBC 8B03                  		move.w	#$8B03,(a6)	; $0B, set Scrolling mode
000054EC 3CBC 8720                  		move.w	#$8720,(a6)	; $07, set Blackdrop Color
000054F0                            
000054F0 4238 F64E                  		clr.b	($FFFFF64E).w
000054F4 6100 BD00                  		bsr.w	ClearScreen
000054F8                            
000054F8                            		; clear Object RAM
000054F8 43F8 D000                  		lea	($FFFFD000).w,a1 ; load object RAM
000054FC 7000                       		moveq	#0,d0
000054FE 323C 07FF                  		move.w	#$7FF,d1
00005502 22C0                       @ClrObjRam:	move.l	d0,(a1)+
00005504 51C9 FFFC                  		dbf	d1,@ClrObjRam	; fill object RAM ($D000-$EFFF) with $0
00005508                            
00005508                            		; load hidden credits patterns into VRAM
00005512 41F9 0000 0000             		lea	(Nem_JapNames).l,a0	; load Japanese credits patterns
00005518 6100 BEE4                  		bsr.w	NemDec
0000551C                            
0000551C                            		; load alphabet patterns into VRAM
00005526 41F9 0000 0000             		lea	(Nem_CreditText).l,a0	; load alphabet patterns
0000552C 6100 BED0                  		bsr.w	NemDec
00005530                            
00005530                            		; load hidden Japanese credits mappings
00005530 43F9 00FF 0000             		lea	($FF0000).l,a1		; load destination
00005536 41F9 0000 0000             		lea	(Eni_JapNames).l,a0	; load mappings for Japanese credits
0000553C 303C 0000                  		move.w	#0,d0
00005540 6100 C19A                  		bsr.w	EniDec
00005544 43F9 00FF 0000             		lea	($FF0000).l,a1
00005550 7227                       		moveq	#$27,d1	; cols
00005552 741B                       		moveq	#$1B,d2	; rows
00005554 6100 BDF8                  		bsr.w	ShowVDPGraphics
00005558                            		
00005558                            		; fill pallete with black
00005558 43F8 FB80                  		lea	($FFFFFB80).w,a1 ; load pallete RAM
0000555C 7000                       		moveq	#0,d0
0000555E 323C 001F                  		move.w	#$1F,d1
00005562 22C0                       @ClrPallet	move.l	d0,(a1)+	; fill palletes with $0
00005564 51C9 FFFC                  		dbf	d1,@ClrPallet
00005568                            
00005568 0C38 0001 FF8C                             cmpi.b  #$01,($FFFFFF8C).w ;is Mighty selected as playable character?
0000556E 6700 0000                                  beq.w   MightyPalLoad1 ; if yes, branch
00005572 0C38 0003 FF8C                             cmpi.b  #$03,($FFFFFF8C).w ;is Tikal selected as playable character?
00005578 6700 0000                                  beq.w   TikalPalLoad1 ; if yes, branch
0000557C 0C38 0004 FF8C                             cmpi.b  #$04,($FFFFFF8C).w ;is Tikal selected as playable character?
00005582 6700 0000                                  beq.w   ShadowPalLoad1 ; if yes, branch
00005586 0C38 0005 FF8C                             cmpi.b  #$05,($FFFFFF8C).w ;is Tikal selected as playable character?
0000558C 6700 0000                                  beq.w   EspioPalLoad1 ; if yes, branch
00005590 7003                       		moveq	#3,d0		; load Sonic's pallet
00005592 6000                                       bra.s   ContClearPal
00005594                            
00005594                            MightyPalLoad1:
00005594 7014                                       moveq   #$14,d0        ; load Mighty's pal
00005596 6000                                       bra.s   ContClearPal
00005598                            
00005598                            TikalPalLoad1:
00005598 7018                                       moveq   #$18,d0        ; load Mighty's pal
0000559A 6000                                       bra.s   ContClearPal
0000559C                            
0000559C                            ShadowPalLoad1:
0000559C 701C                                       moveq   #$1C,d0
0000559E 6000                                       bra.s   ContClearPal
000055A0                            
000055A0                            EspioPalLoad1:
000055A0 701E                                       moveq   #$1E,d0
000055A2                            
000055A2                            ContClearPal:                                                
000055A2                            ; çàãðóçêà íàäïèñè ïðî Ñîíèê Òèì
000055A2 6100 CAC6                  		bsr.w	PalLoad1
000055A6                            		;move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000055A6                            		;jsr	ObjectsLoad	; run objects code
000055A6                            		;jsr	BuildSprites	; show sprites
000055A6                            		;bsr.w	Pal_FadeTo
000055A6 701A                                       moveq	#$1A,d0
000055A8 6100 CAC0                                  bsr.w	PalLoad1
000055AC 43F9 FFFF 0000                             lea	($FFFF0000).l,a1
000055B2 41F9 0000 0000                             lea	(Eni_SplScr).l,a0
000055B8 303C 0001                                  move.w	#1,d0
000055BC 4EB8 16DC                                  jsr	EniDec
000055C0 43F9 FFFF 0000                             lea	($FFFF0000).l,a1
000055C6 203C 4000 0003                             move.l	#$40000003,d0
000055CC 7227                                       moveq	#39,d1
000055CE 741D                                       moveq	#29,d2
000055D0 4EB8 134E                                  jsr	ShowVDPGraphics
000055D4 23FC 4020 0000 00C0 0004                   move.l	#$40200000,($C00004).l
000055DE 41F9 0000 0000                             lea	(Nem_SplScr).l,a0
000055E4 4EB8 13FE                                  jsr	NemDec
000055E8 43F8 CC00                                  lea	($FFFFCC00).w,a1
000055EC 7000                                       moveq	#0,d0
000055EE 323C 00DF                                  move.w	#$DF,d1
000055F2 303C 00A8                                  move.w	#$A8,d0
000055F6 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	
000055FC 4EB8 1D1A                                  jsr     Pal_FadeTo
00005600                            
00005600                            SplScr_StartLoop:
00005600 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00005606 6100 D68E                  		bsr.w	DelayProgram
0000560A 31FC 0090 F614             		move.w	#$90,($FFFFF614).w
00005610                            
00005610                            SplScr_WaitEnd:
00005610 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00005616 6100 D67E                  		bsr.w	DelayProgram
0000561A 4A78 F614                  		tst.w	($FFFFF614).w
0000561E 6700                       		beq.s	startthegamealready
00005620 0238 0080 F605             		andi.b	#Start,(Joypad|Press).w	; is Start button pressed?
00005626 67E8                       		beq.s	SplScr_WaitEnd		; if not, branch
00005628                            
00005628                            startthegamealready:
00005628 103C 00E4                  		move.b	#$E4,d0
0000562C 6100 BCA2                  		bsr.w	PlaySound_Special ; stop music
00005630 46FC 2300                                  move	#$2300,sr
00005634 4EB8 1DC0                                  jsr     Pal_FadeFrom ; ÷åêïîèíò
00005638                            
00005638                            Okeawestarted:
00005638                            ; çäåñü îíà çàâåðøàåòñÿ
00005638 46FC 2300                  		move	#$2300,sr	; disable interrupts          ; ýòî íå òðîãàòü
0000563C                            
0000563C                            		; load Sonic title screen patterns
00005646 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0
0000564C 6100 BDB0                  		bsr.w	NemDec
00005650                            
00005650                            Ttlscr_Load:
00005650                            		; load uncompressed text patterns
00005650 4DF9 00C0 0000             		lea	($C00000).l,a6
0000565E 4BF9 0000 05C4             		lea	(Art_Text).l,a5
00005664 323C 028F                  		move.w	#$28F,d1
00005668 3C9D                       @LoadText:	move.w	(a5)+,(a6)	; move patterns to VRAM
0000566A 51C9 FFFC                  		dbf	d1,@LoadText
0000566E                            
0000566E 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00005674 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
0000567A 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00005680 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00005686 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to GHZ1
0000568C 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00005692 6100 0000                  		bsr.w	LevelSizeLoad
00005696 6100 0000                  		bsr.w	DeformBgLayer
0000569A 4EB8 1DC0                                  jsr     Pal_FadeFrom
0000569E 103C 009B                  		move.b	#$9B,d0		; play title screen music
000056A2 6100 BC2C                  		bsr.w	PlaySound_Special
000056A6                            
000056A6                            
000056A6 701B                                       moveq	#$1B,d0
000056A8 6100 C9C0                                  bsr.w	PalLoad1
000056AC 43F9 FFFF 0000                             lea	($FFFF0000).l,a1
000056B2 41F9 0000 0000                             lea	(Eni_TtlScr).l,a0
000056B8 303C 0001                                  move.w	#1,d0
000056BC 4EB8 16DC                                  jsr	EniDec
000056C0 43F9 FFFF 0000                             lea	($FFFF0000).l,a1
000056C6 203C 4000 0003                             move.l	#$40000003,d0
000056CC 7227                                       moveq	#39,d1
000056CE 741D                                       moveq	#29,d2
000056D0 4EB8 134E                                  jsr	ShowVDPGraphics
000056D4 23FC 4020 0000 00C0 0004                   move.l	#$40200000,($C00004).l
000056DE 41F9 0000 0000                             lea	(Nem_TtlScr).l,a0
000056E4 4EB8 13FE                                  jsr	NemDec
000056E8 43F8 CC00                                  lea	($FFFFCC00).w,a1
000056EC 7000                                       moveq	#0,d0
000056EE 323C 00DF                                  move.w	#$DF,d1
000056F2                            
000056F2                            
000056F2                                            ;jsr	DeleteObject2	; clear object RAM to make room for the "Press Start Button" object
000056F2                            		;move.b	#$E,($FFFFD040).w ; load big Sonic object
000056F2                            		;move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000056F2                            		;move.b	#$F,($FFFFD0C0).w ; load "TM" object
000056F2 46FC 2300                  		move	#$2300,sr	; enable interrupts          ; ýòî íå òðîãàòü
000056F6                            
000056F6 4EB8 1D1A                                  jsr     Pal_FadeTo
000056FA                            
000056FA 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00005700 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178 frames
00005706 43F8 D080                  		lea	($FFFFD080).w,a1
0000570A 7000                       		moveq	#0,d0
0000570C 323C 0007                  		move.w	#7,d1
00005710                            
00005710                            ;Title_ClrObjRam2:
00005710                            ;		move.l	d0,(a1)+
00005710                            ;		dbf	d1,Title_ClrObjRam2
00005710 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00005716 11FC 000F D100             		move.b	#$F,($FFFFD100).w
0000571C 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00005722 4EB9 0000 0000             	        jsr	ObjectsLoad
00005728 6100 0000                  		bsr.w	DeformBgLayer
0000572C 4EB9 0000 0000             		jsr	BuildSprites
00005732 7000                       		moveq	#0,d0  ;load basic PLC
00005734 6100 BE3A                  		bsr.w	LoadPLC2
00005738 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
0000573E 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00005744 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005748 0000 0040                  		ori.b	#$40,d0
0000574C 33C0 00C0 0004             		move.w	d0,($C00004).l
00005752                            
00005752                            loc_317C:
00005752 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005758 6100 D53C                  		bsr.w	DelayProgram
0000575C 4EB9 0000 0000             		jsr	ObjectsLoad
00005762 6100 0000                  		bsr.w	DeformBgLayer
00005766 4EB9 0000 0000             		jsr	BuildSprites
0000576C 6100 C1AC                  		bsr.w	PalCycle_Title
00005770 6100 BE38                  		bsr.w	RunPLC_RAM
00005774 3038 D008                  		move.w	($FFFFD008).w,d0	; load Sonic's x-pos to d0
00005778 5440                       		addq.w	#2,d0
0000577A 31C0 D008                  		move.w	d0,($FFFFD008).w	; move Sonic to the right
0000577E 0C40 03E8                  		cmpi.w	#1000,d0		; has Sonic object passed x-position $1900?
00005782 6500                       		bcs.s	Title_ChkRegion		; if not, branch
00005784                            		;move.b	#0,($FFFFF600).w	; if yes, go to Sega screen
00005784 6100 0000                                  bsr.w   LoadCharacterSelect
00005788 4E75                       		rts		
0000578A                            ; ===========================================================================
0000578A                            
0000578A                            Title_ChkRegion:
0000578A 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
0000578E 6A00                       		bpl.s	@RegionJ	; if Japanese, branch
00005790 41F9 0000 0000             		lea	(LSCode_US).l,a0 ; load US code
00005796 6000                       		bra.s	Title_EnterCheat
00005798                            @RegionJ:
00005798 41F9 0000 0000             		lea	(LSCode_J).l,a0 ; load J code
0000579E                            
0000579E                            Title_EnterCheat:			; XREF: Title_ChkRegion
0000579E 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000057A2 D0C0                       		adda.w	d0,a0
000057A4 1038 F605                  		move.b	(Joypad|Press),d0 	; get button presses
000057A8 0200 000F                  		andi.b	#Up+Down+Left+Right,d0	; read only up/down/left/right buttons
000057AC B010                       		cmp.b	(a0),d0			; does button press match the cheat code?
000057AE 6600                       		bne.s	loc_3210		; if not, branch
000057B0 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w	; next button press
000057B4 4A00                       		tst.b	d0
000057B6 6600                       		bne.s	Title_CountC
000057B8 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000057BC 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000057C0 E249                       		lsr.w	#1,d1
000057C2 0241 0003                  		andi.w	#3,d1
000057C6 6700                       		beq.s	Title_PlayRing
000057C8 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000057CC 6A00                       		bpl.s	Title_PlayRing
000057CE 7201                       		moveq	#1,d1
000057D0 1181 1001                  		move.b	d1,1(a0,d1.w)
000057D4                            
000057D4                            Title_PlayRing:
000057D4 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000057DA 103C 00BF                  		move.b	#$BF,d0		; play ring sound when code is entered
000057DE 6100 BAF0                  		bsr.w	PlaySound_Special
000057E2 6000                       		bra.s	Title_CountC
000057E4                            ; ===========================================================================
000057E4                            
000057E4                            loc_3210:				; XREF: Title_EnterCheat
000057E4 4A00                       		tst.b	d0
000057E6 6700                       		beq.s	Title_CountC
000057E8 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000057EE 6700                       		beq.s	Title_CountC
000057F0 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000057F6                            
000057F6                            Title_CountC:
000057F6 1038 F605 0200 0010        		tpress	C,(Joypad)		; is C button pressed?
000057FE 6700                       		beq.s	loc_3230		; if not, branch
00005800 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w	; increment C button counter
00005804                            
00005804                            loc_3230:
00005804 4A78 F614                  		tst.w	($FFFFF614).w
00005808                            		;beq.w	Demo
00005808                            
00005808                            ;Title_CheckForC:
00005808                            		;cmpi.b	#$20, ($FFFFF605).w; has C been pressed?
00005808                            		;bne.s	Title_CheckForB	; if not, branch
00005808                            		;move.b	#$01,($FFFFFF8B).w ; set the multiple character flag to $01 (indicating Mighty) 
00005808                            		;move.b	#$A0,d0		; play jumping sound
00005808                            		;jsr	PlaySound_Special
00005808                                            ;bra.w   StartCheck
00005808                            
00005808                            ;Title_CheckForB:
00005808                                            ;cmpi.b	#$10,($FFFFF605).w 	; is button B pressed?
00005808                                            ;bne.s   StartCheck
00005808                                            ;move.b	#$00,($FFFFFF8B).w	; set the multiple character flag to $00 (indicating Sonic)
00005808                            		;move.b	#$BE,d0			
00005808                            		;jsr	PlaySound_Special	; play rolling sound 
00005808                                            ;bra.w   StartCheck
00005808                            
00005808                            StartCheck:
00005808 0238 0080 F605             		andi.b	#Start,(Joypad|Press)	; check if Start is pressed
0000580E 6700 FF42                  		beq.w	loc_317C		; if not, branch
00005812                                            
00005812                            ;Title_ChkLevSel:
00005812                            		;tst.b	($FFFFFFE0).w		; check	if level select	code is	on
00005812                            		;beq.w	PlayLevel		; if not, play level
00005812                            		;btst	#iA,(Joypad|Held).w	; check if A is held
00005812                            		;beq.w	PlayLevel		; if not, play level
00005812                                            ;jmp    Level_Select_Menu
00005812                            
00005812                            LoadCharacterSelect:
00005812 103C 00E4                                  move.b	#$E4,d0
00005816 6100 BAB8                  		bsr.w	PlaySound_Special ; stop music
0000581A 4EB8 1DC0                  		jsr	Pal_FadeFrom		;Fade-out is necesarry now
0000581E 7002                                       moveq	#2,d0
00005820 6100 C848                                  bsr.w	PalLoad1
00005824 43F9 FFFF 0000                             lea	($FFFF0000).l,a1
0000582A 41F9 0000 0000                             lea	(Eni_LevSel).l,a0
00005830 303C 0001                                  move.w	#1,d0
00005834 4EB8 16DC                                  jsr	EniDec
00005838 43F9 FFFF 0000                             lea	($FFFF0000).l,a1
0000583E 203C 4000 0003                             move.l	#$40000003,d0
00005844 7227                                       moveq	#39,d1
00005846 741D                                       moveq	#29,d2
00005848 4EB8 134E                                  jsr	ShowVDPGraphics
0000584C 23FC 4020 0000 00C0 0004                   move.l	#$40200000,($C00004).l
00005856 41F9 0000 0000                             lea	(Nem_LevSel).l,a0
0000585C 4EB8 13FE                                  jsr	NemDec
00005860 43F8 CC00                                  lea	($FFFFCC00).w,a1
00005864                            
00005864 7000                       		moveq	#0,d0
00005866                            
00005866 323C 00DF                  		move.w	#$DF,d1
0000586A                            
0000586A                             
0000586A                            
0000586A                            @ClrScroll:
0000586A                            
0000586A 22C0                       		move.l	d0,(a1)+
0000586C                            
0000586C 51C9 FFFC                  		dbf	d1,@ClrScroll
00005870                            
00005870                             
00005870                            
00005870 43F8 D000                  		lea	($FFFFD000).w,a1
00005874                            
00005874 7000                       		moveq	#0,d0
00005876                            
00005876 323C 07FF                  		move.w	#$7FF,d1
0000587A                            
0000587A                             
0000587A                            
0000587A                            @ClrObjRam:
0000587A                            
0000587A 22C0                       		move.l	d0,(a1)+
0000587C                            
0000587C 51C9 FFFC                  		dbf	d1,@ClrObjRam
00005880                            
00005880                             
00005880                            
00005880 43F8 F628                  		lea	($FFFFF628).w,a1
00005884                            
00005884 7000                       		moveq	#0,d0
00005886                            
00005886 323C 0015                  		move.w	#$15,d1
0000588A                            
0000588A                             
0000588A                            
0000588A                            @ClrVars:
0000588A                            
0000588A 22C0                       		move.l	d0,(a1)+
0000588C                            
0000588C 51C9 FFFC                  		dbf	d1,@ClrVars
00005890                            
00005890                             
00005890                            
00005890 43F8 F700                  		lea	($FFFFF700).w,a1
00005894                            
00005894 7000                       		moveq	#0,d0
00005896                            
00005896 323C 003F                  		move.w	#$3F,d1
0000589A                            
0000589A                             
0000589A                            
0000589A                            @ClrVars2:
0000589A                            
0000589A 22C0                       		move.l	d0,(a1)+
0000589C                            
0000589C 51C9 FFFC                  		dbf	d1,@ClrVars2
000058A0                            
000058A0                             
000058A0                            
000058A0 43F8 FE60                  		lea	($FFFFFE60).w,a1
000058A4                            
000058A4 7000                       		moveq	#0,d0
000058A6                            
000058A6 323C 0047                  		move.w	#$47,d1
000058AA                            
000058AA                            @ClrVars3:
000058AA                            
000058AA 22C0                       		move.l	d0,(a1)+
000058AC                            
000058AC 51C9 FFFC                  		dbf	d1,@ClrVars3
000058B0                            
000058B0                             
000058B0                            
000058B0 43F8 F800                  		lea	($FFFFF800).w,a1
000058B4                            
000058B4 7000                       		moveq	#0,d0
000058B6                            
000058B6 323C 007F                  		move.w	#$7F,d1
000058BA                            
000058BA                            @ClrSprTable:
000058BA                            
000058BA 22C0                       		move.l	d0,(a1)+
000058BC                            
000058BC 51C9 FFFC                  		dbf	d1,@ClrSprTable
000058C0                            
000058C0                             
000058C0                            
000058C0 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w	;Clean VScroll
000058C8                            
000058C8                             
000058C8                            
000058C8 46FC 2700                  		move	#$2700,sr
000058CC                            
000058CC                            	
000058CC                            
000058CC 4DF9 00C0 0000             			lea	($C00000).l,a6
000058D2                            
000058D2 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
000058DC                            
000058DC 323C 03FF                  		move.w	#$3FF,d1
000058E0                            
000058E0                            @ClearBG:
000058E0                            
000058E0 2C80                       		move.l	d0,(a6)
000058E2                            
000058E2 51C9 FFFC                  		dbf	d1,@ClearBG
000058E6                            
000058E6                             
000058E6 31FC 0000 FF82                             move.w  #0,($FFFFFF82).w
000058EC 6100 0000                  		bsr.w	LevSelTextLoad
000058F0                            
000058F0                             
000058F0                            
000058F0                                            
000058F0 4EB8 1D1A                  		jsr	Pal_FadeTo
000058F4                            
000058F4 103C 0095                                  move.b	#$95,d0
000058F8 6100 B9D6                  		bsr.w	PlaySound_Special ; play character select menu music
000058FC                                            
000058FC                            ; ---------------------------------------------------------------------------
000058FC                            ; Level	Select
000058FC                            ; ---------------------------------------------------------------------------
000058FC                            
000058FC                            LevelSelect:
000058FC 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005902 6100 D392                  		bsr.w	DelayProgram
00005906 6100 0000                  		bsr.w	LevSelControls
0000590A 6100 BC9E                  		bsr.w	RunPLC_RAM
0000590E 4AB8 F680                  		tst.l	($FFFFF680).w	; is PLC queue empty?
00005912 66E8                       		bne.s	LevelSelect	; if not, branch
00005914 0238 00F0 F605                             andi.b	#A+B+C+Start,(Joypad|Press)	; is A, B, C or Start pressed?
0000591A 67E0                       		beq.s	LevelSelect			; if not, branch
0000591C                                            ;bne.s   FuckingSelecting                ; BUT IF ANY KEY PRESSED...
0000591C 3038 FF82                  		move.w	($FFFFFF82).w,d0
00005920 0C40 0000                                  cmpi.w  #0,d0
00005924 6700                                       beq.s   FuckingSelecting
00005926 0C40 0003                                  cmpi.w  #3,d0
0000592A 6700                                       beq.s   FuckingSelecting
0000592C 0C40 0006                                  cmpi.w  #6,d0
00005930 6700                                       beq.s   FuckingSelecting
00005932 0C40 0009                                  cmpi.w  #9,d0
00005936 6700                                       beq.s   FuckingSelecting
00005938 0C40 000C                                  cmpi.w  #$C,d0
0000593C 6700                                       beq.s   FuckingSelecting
0000593E 0C40 000F                                  cmpi.w  #$F,d0
00005942 6700                                       beq.s   FuckingSelecting
00005944 4E75                                       rts
00005946                            		;cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00005946                            		;bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00005946                            		;move.w	($FFFFFF84).w,d0
00005946                            		;addi.w	#$80,d0
00005946                            		;tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
00005946                            		;beq.s	LevSel_NoCheat	; if not, branch
00005946                            		;cmpi.w	#$9F,d0		; is sound $9F being played?
00005946                            		;beq.s	LevSel_Ending	; if yes, branch
00005946                            		;cmpi.w	#$9E,d0		; is sound $9E being played?
00005946                            		;beq.s	LevSel_Credits	; if yes, branch
00005946                            
00005946                            FuckingSelecting:
00005946 103C 00CD                                  move.b	#$CD,d0		; play ring sound when code is entered
0000594A 6100 B984                  		bsr.w	PlaySound_Special
0000594E 4A38 FFE0                                  tst.b	($FFFFFFE0).w		; check	if level select	code is	on
00005952 6700 0000                  		beq.w	PlayLevel		; if not, play level   
00005956 4EF9 0000 0000                             jmp	Level_Select_Menu      ; Go to Sonic 2 Level Select
0000595C                                            ;jsr     PlayLevel
0000595C                            
0000595C                            
0000595C                            ;LevSel_NoCheat:
0000595C                            		;cmpi.w	#$9F,d0		; is sound $81-$9F being played?
0000595C                            		;bls.s	LevSel_PlaySnd	; if yes, branch
0000595C                            		;cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
0000595C                            		;bcs.s	LevelSelect	; if yes, branch
0000595C                            
0000595C                            ;LevSel_PlaySnd:
0000595C                            		;bsr.w	PlaySound_Special
0000595C                            		;bra.s	LevelSelect
0000595C                            
0000595C                            ;DoNoth:
0000595C                                            ; rts
0000595C                            ; ===========================================================================
0000595C                            
0000595C                            ;LevSel_Ending:				; XREF: LevelSelect
0000595C                            		;move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
0000595C                            		;move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
0000595C                            		;rts	
0000595C                            ; ===========================================================================
0000595C                            
0000595C                            ;LevSel_Credits:				; XREF: LevelSelect
0000595C                            		;move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
0000595C                            		;move.b	#$9D,d0
0000595C                            		;bsr.w	PlaySound_Special ; play credits music
0000595C                            		;move.w	#0,($FFFFFFF4).w
0000595C                            		;rts	
0000595C                            ; ===========================================================================
0000595C                            
0000595C                            ;LevSel_Level_SS:			; XREF: LevelSelect
0000595C                            		;add.w	d0,d0
0000595C                            		;move.w	LSelectPointers(pc,d0.w),d0 ; load level number
0000595C                            		;bmi.w	LevelSelect
0000595C                            		;cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
0000595C                            		;bne.s	LevSel_Level	; if not, branch
0000595C                            		;move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000595C                            		;clr.w	($FFFFFE10).w	; clear	level
0000595C                            		;move.b	#3,($FFFFFE12).w ; set lives to	3
0000595C                            		;moveq	#0,d0
0000595C                            		;move.w	d0,($FFFFFE20).w ; clear rings
0000595C                            		;move.l	d0,($FFFFFE22).w ; clear time
0000595C                            		;move.l	d0,($FFFFFE26).w ; clear score
0000595C                            		;rts	
0000595C                            ; ===========================================================================
0000595C                            
0000595C                            ;LevSel_Level:				; XREF: LevSel_Level_SS
0000595C                            		;andi.w	#$3FFF,d0
0000595C                            		;move.w	d0,($FFFFFE10).w ; set level number
0000595C                            
0000595C                            PlayLevel:
0000595C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005962 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005968 7000                       		moveq	#0,d0
0000596A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000596E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005972 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005976 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
0000597A 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
0000597E 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00005982 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00005986 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
0000598A 103C 00E0                  		move.b	#$E0,d0
0000598E 6100 B940                  		bsr.w	PlaySound_Special ; fade out music
00005992                                            ;tst.b	($FFFFFFE0).w		; check	if level select	code is	on
00005992                            		;beq.w	PlayNoLevel		; if not, go to GHZ1
00005992                                            ;move.w	#$000,($FFFFFE10).w ; set level to LZ1
00005992                            		
00005992                            PlayNoLevel:
00005992 4E75                                       rts	
00005994                            ; ===========================================================================
00005994                            ; ---------------------------------------------------------------------------
00005994                            ; Level	select - level pointers
00005994                            ; ---------------------------------------------------------------------------
00005994                            ; Vladikcomper: Pointers were converted from bin to asm format for
00005994                            ;		more convenient editing.
00005994                            LSelectPointers:
00005994                            		include	"_inc\Level select pointers.asm"
00005994                            ; ===========================================================================
00005994                            ; *              S1HS - Levels order in Level Select Menu                   *
00005994                            ; ===========================================================================
00005994                            ; This file stores level order in level select menu
00005994                            ; The format of each item is: ZZAA, where ZZ is zone and AA is act number.
00005994                            ; ===========================================================================
00005994                            
00005994 0000                       		dc.w	$0000	; GHZ 1
00005996 0001                       		dc.w	$0001	; GHZ 2
00005998 0002                       		dc.w	$0002	; GHZ 3
0000599A                            
0000599A 0100                       		dc.w	$0100	; LZ 1
0000599C 0101                       		dc.w	$0101	; LZ 2
0000599E 0102                       		dc.w	$0102	; LZ 3
000059A0                            
000059A0 0200                       		dc.w	$0200	; MZ 1
000059A2 0201                       		dc.w	$0201	; MZ 2
000059A4 0202                       		dc.w	$0202	; MZ 3
000059A6                            
000059A6 0300                       		dc.w	$0300	; SLZ 1
000059A8 0301                       		dc.w	$0301	; SLZ 2
000059AA 0302                       		dc.w	$0302	; SLZ 3
000059AC                            
000059AC 0400                       		dc.w	$0400	; SYZ 1
000059AE 0401                       		dc.w	$0401	; SYZ 2
000059B0 0402                       		dc.w	$0402	; SYZ 3
000059B2                            
000059B2 0500                       		dc.w	$0500	; SBZ 1
000059B4 0501                       		dc.w	$0501	; SBZ 2
000059B6 0103                       		dc.w	$0103	; SBZ 3 (actually LZ 4)
000059B8                            
000059B8 0502                       		dc.w	$0502	; Final Zone (actually SBZ 3)
000059BA                            
000059BA 0700                       		dc.w	$0700	; Special Stage
000059BC 8000                       		dc.w	$8000	; Sound select
000059BC 8000                       		dc.w	$8000	; Sound select
000059BE                            		even
000059BE                            ; ---------------------------------------------------------------------------
000059BE                            ; Level	select codes
000059BE                            ; ---------------------------------------------------------------------------
000059BE                            
000059BE 0102 0408 00FF             LSCode_J:	dc.b	Up, Down, Left, Right, 0, $FF
000059C4 0102 0408 00FF             LSCode_US:	dc.b	Up, Down, Left, Right, 0, $FF
000059CA                            
000059CA                            ; ===========================================================================
000059CA                            
000059CA                            ; ---------------------------------------------------------------------------
000059CA                            ; Demo mode
000059CA                            ; ---------------------------------------------------------------------------
000059CA                            
000059CA                            Demo:					; XREF: TitleScreen
000059CA 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000059D0                            
000059D0                            loc_33B6:				; XREF: loc_33E4
000059D0 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000059D6 6100 D2BE                  		bsr.w	DelayProgram
000059DA 6100 0000                  		bsr.w	DeformBgLayer
000059DE 6100 BF1A                  		bsr.w	PalCycle_Load
000059E2 6100 BBC6                  		bsr.w	RunPLC_RAM
000059E6 3038 D008                  		move.w	($FFFFD008).w,d0
000059EA 5440                       		addq.w	#2,d0
000059EC 31C0 D008                  		move.w	d0,($FFFFD008).w
000059F0 0C40 1C00                  		cmpi.w	#$1C00,d0
000059F4 6500                       		bcs.s	loc_33E4
000059F6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
000059FC 4E75                       		rts	
000059FE                            ; ===========================================================================
000059FE                            
000059FE                            loc_33E4:				; XREF: Demo
000059FE                            		;andi.b	#Start,(Joypad|Press)	; is Start button pressed?
000059FE                            		;bne.w	Title_ChkLevSel		; if yes, branch
000059FE 4A78 F614                  		tst.w	($FFFFF614).w
00005A02 6600 FFCC                  		bne.w	loc_33B6
00005A06 103C 00E0                  		move.b	#$E0,d0
00005A0A 6100 B8C4                  		bsr.w	PlaySound_Special	; fade out music
00005A0E 3038 FFF2                  		move.w	($FFFFFFF2).w,d0	; load demo number
00005A12 0240 0007                  		andi.w	#7,d0
00005A16 D040                       		add.w	d0,d0
00005A18 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00005A1C 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00005A20 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00005A24 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00005A2A 6500                       		bcs.s	loc_3422	; if yes, branch
00005A2C 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00005A32                            
00005A32                            loc_3422:
00005A32 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00005A38 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00005A3E 0C40 0600                  		cmpi.w	#$600,d0	 ; is level number 0600 (special stage)?
00005A42 6600                       		bne.s	Demo_Level	 ; if not, branch
00005A44 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00005A4A 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00005A4E 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00005A52                            
00005A52                            Demo_Level:
00005A52 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005A58 7000                       		moveq	#0,d0
00005A5A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005A5E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005A62 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005A66 4E75                       		rts	
00005A68                            ; ===========================================================================
00005A68                            ; ---------------------------------------------------------------------------
00005A68                            ; Levels used in demos
00005A68                            ; ---------------------------------------------------------------------------
00005A68                            Demo_Levels:	incbin	misc\dm_ord1.bin
00005A70                            		even
00005A70                            
00005A70                            ; ---------------------------------------------------------------------------
00005A70                            ; Subroutine to	change what you're selecting in the level select
00005A70                            ; ---------------------------------------------------------------------------
00005A70                            
00005A70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005A70                            
00005A70                            
00005A70                            LevSelControls:				; XREF: LevelSelect
00005A70 1238 F605                  		move.b	(Joypad|Press),d1
00005A74 0201 0003                  		andi.b	#Up+Down,d1	; is up/down held?
00005A78 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00005A7A 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	until next move
00005A7E 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00005A80                            
00005A80                            LevSel_UpDown:
00005A80 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00005A86 1238 F604                  		move.b	(Joypad|Held),d1
00005A8A 0201 0003                  		andi.b	#Up+Down,d1	; is up/down held?
00005A8E 6700                       		beq.s	LevSel_SndTest	; if not, branch
00005A90 3038 FF82                  		move.w	($FFFFFF82).w,d0
00005A94 0801 0000                  		btst	#iUp,d1		; is up	held?
00005A98 6700                       		beq.s	LevSel_Down	; if not, branch
00005A9A 5740                       		subq.w	#3,d0		; move up 1 selection
00005A9C 6400                       		bcc.s	LevSel_Down
00005A9E 700F                       		moveq	#$F,d0		; if selection moves below 0, jump to selection	$14
00005AA0                                
00005AA0                            
00005AA0                            LevSel_Down:
00005AA0 0801 0001                  		btst	#iDown,d1	; is down held?
00005AA4 6700                       		beq.s	LevSel_Refresh	; if not, branch
00005AA6 5640                       		addq.w	#3,d0		; move down 1 selection
00005AA8 0C40 0012                  		cmpi.w	#$12,d0
00005AAC 6500                       		bcs.s	LevSel_Refresh
00005AAE 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00005AB0                            
00005AB0                            
00005AB0                            LevSel_Refresh:
00005AB0 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
00005AB4 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00005AB8 303C 00CD                                  move.w	#$CD,d0
00005ABC 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play switch sound
00005AC2 4E75                       		rts	
00005AC4                            ; ===========================================================================
00005AC4                            
00005AC4                            LevSel_SndTest:				; XREF: LevSelControls
00005AC4 0C78 0000 FF82                             cmpi.w  #0,($FFFFFF82).w
00005ACA 6700                                       beq.s   SonicLSS
00005ACC 0C78 0003 FF82                             cmpi.w  #3,($FFFFFF82).w
00005AD2 6700                                       beq.s   MightyLSS
00005AD4 0C78 0006 FF82                             cmpi.w  #6,($FFFFFF82).w
00005ADA 6700                                       beq.s   MetalLSS
00005ADC 0C78 0009 FF82                             cmpi.w  #9,($FFFFFF82).w
00005AE2 6700                                       beq.s   TikalLSS
00005AE4 0C78 000C FF82                             cmpi.w  #$C,($FFFFFF82).w
00005AEA 6700                                       beq.s   ShadowLSS
00005AEC 0C78 000F FF82                             cmpi.w  #$F,($FFFFFF82).w
00005AF2 6700                                       beq.s   EspioLSS
00005AF4                            		;cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
00005AF4                            		;bne.s	LevSel_NoMove	; if not, branch
00005AF4                            		;move.b	(Joypad|Press),d1
00005AF4                            		;andi.b	#Left+Right,d1	; is left/right	pressed?
00005AF4                            		;beq.s	LevSel_NoMove	; if not, branch
00005AF4                            		;move.w	($FFFFFF84).w,d0
00005AF4                            		;btst	#iLeft,d1	; is left pressed?
00005AF4                            		;beq.s	LevSel_Right	; if not, branch
00005AF4                            		;subq.w	#1,d0		; subtract 1 from sound	test
00005AF4                            		;bcc.s	LevSel_Right
00005AF4                            		;moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00005AF4                            
00005AF4                            MightyLSS:
00005AF4 0C78 0003 FF82                             cmpi.w  #3,($FFFFFF82).w
00005AFA 6600                                       bne.s   SonicLSS
00005AFC                                            ;moveq	#$35,d0  ;load Mighty's HUD
00005AFC                            		;bsr.w	LoadPLC2
00005AFC 11FC 0001 FF8C                             move.b	#$01,($FFFFFF8C).w ; Set playable character as Mighty
00005B02                            
00005B02                            
00005B02                            SonicLSS:
00005B02 0C78 0000 FF82                             cmpi.w  #0,($FFFFFF82).w
00005B08 6600                                       bne.s   MetalLSS
00005B0A                                            ;moveq	#$38,d0  
00005B0A                            		;bsr.w	LoadPLC2
00005B0A 11FC 0000 FF8C                             move.b	#$00,($FFFFFF8C).w ; Set playable character as Sonic
00005B10                            
00005B10                            
00005B10                            MetalLSS:
00005B10 0C78 0006 FF82                             cmpi.w  #6,($FFFFFF82).w
00005B16 6600                                       bne.s   TikalLSS
00005B18                                            ;moveq	#$36,d0  
00005B18                            		;bsr.w	LoadPLC2
00005B18 11FC 0002 FF8C                             move.b	#$02,($FFFFFF8C).w
00005B1E                            
00005B1E                            
00005B1E                            TikalLSS:
00005B1E 0C78 0009 FF82                             cmpi.w  #9,($FFFFFF82).w
00005B24 6600                                       bne.s   ShadowLSS
00005B26                                            ;moveq	#$37,d0  
00005B26                            		;bsr.w	LoadPLC2
00005B26 11FC 0003 FF8C                             move.b	#$03,($FFFFFF8C).w
00005B2C                            
00005B2C                            ShadowLSS:
00005B2C 0C78 000C FF82                             cmpi.w  #$C,($FFFFFF82).w
00005B32 6600                                       bne.s   EspioLSS
00005B34                                            ;moveq	#$37,d0  
00005B34                            		;bsr.w	LoadPLC2
00005B34 11FC 0004 FF8C                             move.b	#$04,($FFFFFF8C).w
00005B3A                            
00005B3A                            EspioLSS:
00005B3A 0C78 000F FF82                             cmpi.w  #$F,($FFFFFF82).w
00005B40 6600                                       bne.s   Character_Sel_Rts
00005B42                                            ;moveq	#$37,d0  
00005B42                            		;bsr.w	LoadPLC2
00005B42 11FC 0005 FF8C                             move.b	#$05,($FFFFFF8C).w
00005B48                            
00005B48                            Character_Sel_Rts:
00005B48 4E75                                       rts
00005B4A                            
00005B4A                            ;LevSel_Right:
00005B4A                            		;btst	#iRight,d1	; is right pressed?
00005B4A                            		;beq.s	LevSel_Refresh2	; if not, branch
00005B4A                            		;addq.w	#1,d0		; add 1	to sound test
00005B4A                            		;cmpi.w	#$50,d0
00005B4A                            		;bcs.s	LevSel_Refresh2
00005B4A                            		;moveq	#0,d0		; if sound test	moves above $4F, set to	0
00005B4A                            
00005B4A                            ;LevSel_Refresh2:
00005B4A                            		;move.w	d0,($FFFFFF84).w ; set sound test number
00005B4A                            		;bsr.w	LevSelTextLoad	; refresh text
00005B4A                            
00005B4A                            LevSel_NoMove:
00005B4A 4E75                       		rts	
00005B4C                            ; End of function LevSelControls
00005B4C                            
00005B4C                            ; ---------------------------------------------------------------------------
00005B4C                            ; Subroutine to load level select text
00005B4C                            ; ---------------------------------------------------------------------------
00005B4C                            
00005B4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005B4C                            
00005B4C                            
00005B4C                            LevSelTextLoad:				; XREF: TitleScreen
00005B4C 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00005B52 4DF9 00C0 0000             		lea	($C00000).l,a6
00005B5E 363C E680                  		move.w	#$E680,d3	; VRAM setting
00005B62 7214                       		moveq	#$14,d1		; number of lines of text
00005B64                            
00005B64                            loc_34FE:
00005B64 2D44 0004                  		move.l	d4,4(a6)
00005B68 6100 0000                  		bsr.w	LevSel_ChgLine
00005B6C 0684 0080 0000             		addi.l	#$800000,d4
00005B72 51C9 FFF0                  		dbf	d1,loc_34FE
00005B76 7000                       		moveq	#0,d0
00005B78 3038 FF82                  		move.w	($FFFFFF82).w,d0
00005B7C 3200                       		move.w	d0,d1
00005B7E 283C 6210 0003             		move.l	#$62100003,d4
00005B84 EF48                       		lsl.w	#7,d0
00005B86 4840                       		swap	d0
00005B88 D880                       		add.l	d0,d4
00005B8A 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00005B90 E749                       		lsl.w	#3,d1
00005B92 3001                       		move.w	d1,d0
00005B94 D241                       		add.w	d1,d1
00005B96 D240                       		add.w	d0,d1
00005B98 D2C1                       		adda.w	d1,a1
00005B9A 363C C680                  		move.w	#$C680,d3
00005B9E 2D44 0004                  		move.l	d4,4(a6)
00005BA2 6100 0000                  		bsr.w	LevSel_ChgLine
00005BA6 363C E680                  		move.w	#$E680,d3
00005BAA                            		;cmpi.w	#$14,($FFFFFF82).w
00005BAA                            		;bne.s	loc_3550
00005BAA 363C C680                  		move.w	#$C680,d3
00005BAE                            
00005BAE                            ;loc_3550:
00005BAE                            		;vram	$EC30		 ; screen position (sound test)
00005BAE                            		;move.w	($FFFFFF84).w,d0
00005BAE                            		;addi.w	#$80,d0
00005BAE                            		;move.b	d0,d2
00005BAE                            		;lsr.b	#4,d0
00005BAE                            		;bsr.w	LevSel_ChgSnd
00005BAE                            		;move.b	d2,d0
00005BAE                            		;bsr.w	LevSel_ChgSnd
00005BAE                            		;rts	
00005BAE                            ; End of function LevSelTextLoad
00005BAE                            
00005BAE                            
00005BAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005BAE                            
00005BAE                            
00005BAE                            ;LevSel_ChgSnd:				; XREF: LevSelTextLoad
00005BAE                            		;andi.w	#$F,d0
00005BAE                            		;cmpi.b	#$A,d0
00005BAE                            		;bcs.s	loc_3580
00005BAE                            		;addi.b	#7,d0
00005BAE                            
00005BAE                            ;loc_3580:
00005BAE                            		;add.w	d3,d0
00005BAE                            		;move.w	d0,(a6)
00005BAE                            		;rts	
00005BAE                            ; End of function LevSel_ChgSnd
00005BAE                            
00005BAE                            
00005BAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005BAE                            
00005BAE                            
00005BAE                            LevSel_ChgLine:
00005BAE 7417                       		moveq	#$17,d2		; number of characters per line
00005BB0                            
00005BB0                            loc_3588:
00005BB0 7000                       		moveq	#0,d0
00005BB2 1019                       		move.b	(a1)+,d0	; load char to d0
00005BB4 6A00                       		bpl.s	loc_3598	; if char is less than $80, branch
00005BB6 3CBC 0000                  		move.w	#0,(a6)		; display space
00005BBA 51CA FFF4                  		dbf	d2,loc_3588
00005BBE 4E75                       		rts	
00005BC0                            ; ===========================================================================
00005BC0                            
00005BC0                            loc_3598:				; XREF: LevSel_ChgLine
00005BC0 D043                       		add.w	d3,d0
00005BC2 3C80                       		move.w	d0,(a6)		; display char
00005BC4 51CA FFEA                  		dbf	d2,loc_3588
00005BC8 4E75                       		rts	
00005BCA                            ; End of function LevSel_ChgLine
00005BCA                            
00005BCA                            ; ===========================================================================
00005BCA                            ; ---------------------------------------------------------------------------
00005BCA                            ; Level	select menu text
00005BCA                            ; ---------------------------------------------------------------------------
00005BCA                            LevelMenuText:	incbin	misc\menutext.bin
00005DC2                            		even
00005DC2                            ; ---------------------------------------------------------------------------
00005DC2                            ; Music	playlist
00005DC2                            ; ---------------------------------------------------------------------------
00005DC2 8184 878A 8D90 9300        MusicList:	dc.b	$81, $84, $87, $8A, $8D, $90, $93, 0
00005DCA                            
00005DCA                            ; ===========================================================================
00005DCA                            
00005DCA                            ; ---------------------------------------------------------------------------
00005DCA                            ; Level
00005DCA                            ; ---------------------------------------------------------------------------
00005DCA                            
00005DCA                            Level:					; XREF: GameModeArray
00005DCA 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00005DD0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00005DD4 6B00                       		bmi.s	loc_37B6
00005DD6 103C 00E0                  		move.b	#$E0,d0
00005DDA 6100 B4F4                  		bsr.w	PlaySound_Special ; fade out music
00005DDE                            
00005DDE                            loc_37B6:
00005DDE 6100 B7BC                  		bsr.w	ClearPLC
00005DE2 6100 BFDC                  		bsr.w	Pal_FadeFrom
00005DE6 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00005DEA 6B00 0000                  		bmi.w	Level_ClrRam
00005DEE 11FC 0000 FF8D                             move.b	#$00,($FFFFFF8D).w ; clear miniboss flag to prevent its load at start
00005DF4 0C78 0000 FE10                             cmpi.w	#$000,($FFFFFE10).w	; is level GHZ1?
00005DFA 6700                                       beq.s   DearDiary_Load
00005DFC 0C78 0200 FE10                             cmpi.w	#$200,($FFFFFE10).w	; is level MZ1?
00005E02 6700                                       beq.s   DearDiary_Load
00005E04 0C78 0400 FE10                             cmpi.w	#$400,($FFFFFE10).w ; is level SYZ1?
00005E0A 6700                       		beq.s	DearDiary_Load	; if yes, branch
00005E0C 0C78 0300 FE10                             cmpi.w	#$300,($FFFFFE10).w ; is level SLZ1?
00005E12 6700                       		beq.s	DearDiary_Load	; if yes, branch
00005E14 0C78 0500 FE10                             cmpi.w	#$500,($FFFFFE10).w ; is level SBZ1?
00005E1A 6700                       		beq.s	DearDiary_Load	; if yes, branch
00005E1C 0C78 0601 FE10                             cmpi.w	#$601,($FFFFFE10).w ; is level Ending?
00005E22 6700                       		beq.s	DearDiary_Load	; if yes, branch
00005E24 6000 0000                                  bra.w   Okwestarted
00005E28                            
00005E28                            DearDiary_Load:
00005E28 46FC 2700                                  move	#$2700,sr	; disable interrupts
00005E2C 6100 B3C8                  		bsr.w	ClearScreen
00005E30 0C38 0001 FF8E                             cmpi.b  #1,($FFFFFF8E)
00005E36 6700 0000                                  beq.w   Okwestarted
00005E3A 0C78 0200 FE10                             cmpi.w	#$200,($FFFFFE10).w	; is level MZ1?
00005E40 6700 0000                                  beq.w   DearDiary_MZ
00005E44 0C78 0400 FE10                             cmpi.w	#$400,($FFFFFE10).w ; is level SYZ1?
00005E4A 6700 0000                  		beq.w	DearDiary_SYZ	; if yes, branch
00005E4E 0C78 0300 FE10                             cmpi.w	#$300,($FFFFFE10).w ; is level SLZ1?
00005E54 6700 0000                  		beq.w	DearDiary_SLZ	; if yes, branch
00005E58 0C78 0500 FE10                             cmpi.w	#$500,($FFFFFE10).w ; is level SBZ1?
00005E5E 6700 0000                  		beq.w	DearDiary_SBZ	; if yes, branch
00005E62 0C78 0601 FE10                             cmpi.w	#$601,($FFFFFE10).w ; is level the Ending?
00005E68 6700 0000                                  beq.w   DearDiary_FZ
00005E6C 701F                                       moveq	#$1F,d0
00005E6E 4EB8 206A                                  jsr	PalLoad1
00005E72 43F9 FFFF 0000                             lea	($FFFF0000).l,a1
00005E78 41F9 0000 0000                             lea	(Eni_DiaryGHZ).l,a0
00005E7E 303C 0001                                  move.w	#1,d0
00005E82 4EB8 16DC                                  jsr	EniDec
00005E86 43F9 FFFF 0000                             lea	($FFFF0000).l,a1
00005E8C 203C 4000 0003                             move.l	#$40000003,d0
00005E92 7227                                       moveq	#39,d1
00005E94 741D                                       moveq	#29,d2
00005E96 4EB8 134E                                  jsr	ShowVDPGraphics
00005E9A 23FC 4020 0000 00C0 0004                   move.l	#$40200000,($C00004).l
00005EA4 41F9 0000 0000                             lea	(Nem_DiaryGHZ).l,a0
00005EAA 4EB8 13FE                                  jsr	NemDec
00005EAE 43F8 CC00                                  lea	($FFFFCC00).w,a1
00005EB2 7000                                       moveq	#0,d0
00005EB4 323C 00DF                                  move.w	#$DF,d1
00005EB8 4EB8 1D1A                                  jsr     Pal_FadeTo
00005EBC 6000 0000                                  bra.w   Deardiary_StartLoop
00005EC0                            
00005EC0                            DearDiary_MZ:
00005EC0 7020                                       moveq	#$20,d0
00005EC2 4EB8 206A                                  jsr	PalLoad1
00005EC6 43F9 FFFF 0000                             lea	($FFFF0000).l,a1
00005ECC 41F9 0000 0000                             lea	(Eni_DiaryMZ).l,a0
00005ED2 303C 0001                                  move.w	#1,d0
00005ED6 4EB8 16DC                                  jsr	EniDec
00005EDA 43F9 FFFF 0000                             lea	($FFFF0000).l,a1
00005EE0 203C 4000 0003                             move.l	#$40000003,d0
00005EE6 7227                                       moveq	#39,d1
00005EE8 741D                                       moveq	#29,d2
00005EEA 4EB8 134E                                  jsr	ShowVDPGraphics
00005EEE 23FC 4020 0000 00C0 0004                   move.l	#$40200000,($C00004).l
00005EF8 41F9 0000 0000                             lea	(Nem_DiaryMZ).l,a0
00005EFE 4EB8 13FE                                  jsr	NemDec
00005F02 43F8 CC00                                  lea	($FFFFCC00).w,a1
00005F06 7000                                       moveq	#0,d0
00005F08 323C 00DF                                  move.w	#$DF,d1
00005F0C 4EB8 1D1A                                  jsr     Pal_FadeTo
00005F10 6000 0000                                  bra.w   Deardiary_StartLoop
00005F14                            
00005F14                            DearDiary_SYZ:
00005F14 7021                                       moveq	#$21,d0
00005F16 4EB8 206A                                  jsr	PalLoad1
00005F1A 43F9 FFFF 0000                             lea	($FFFF0000).l,a1
00005F20 41F9 0000 0000                             lea	(Eni_DiarySYZ).l,a0
00005F26 303C 0001                                  move.w	#1,d0
00005F2A 4EB8 16DC                                  jsr	EniDec
00005F2E 43F9 FFFF 0000                             lea	($FFFF0000).l,a1
00005F34 203C 4000 0003                             move.l	#$40000003,d0
00005F3A 7227                                       moveq	#39,d1
00005F3C 741D                                       moveq	#29,d2
00005F3E 4EB8 134E                                  jsr	ShowVDPGraphics
00005F42 23FC 4020 0000 00C0 0004                   move.l	#$40200000,($C00004).l
00005F4C 41F9 0000 0000                             lea	(Nem_DiarySYZ).l,a0
00005F52 4EB8 13FE                                  jsr	NemDec
00005F56 43F8 CC00                                  lea	($FFFFCC00).w,a1
00005F5A 7000                                       moveq	#0,d0
00005F5C 323C 00DF                                  move.w	#$DF,d1
00005F60 4EB8 1D1A                                  jsr     Pal_FadeTo
00005F64 6000 0000                                  bra.w   Deardiary_StartLoop
00005F68                            
00005F68                            DearDiary_SLZ:
00005F68 7022                                       moveq	#$22,d0
00005F6A 4EB8 206A                                  jsr	PalLoad1
00005F6E 43F9 FFFF 0000                             lea	($FFFF0000).l,a1
00005F74 41F9 0000 0000                             lea	(Eni_DiarySLZ).l,a0
00005F7A 303C 0001                                  move.w	#1,d0
00005F7E 4EB8 16DC                                  jsr	EniDec
00005F82 43F9 FFFF 0000                             lea	($FFFF0000).l,a1
00005F88 203C 4000 0003                             move.l	#$40000003,d0
00005F8E 7227                                       moveq	#39,d1
00005F90 741D                                       moveq	#29,d2
00005F92 4EB8 134E                                  jsr	ShowVDPGraphics
00005F96 23FC 4020 0000 00C0 0004                   move.l	#$40200000,($C00004).l
00005FA0 41F9 0000 0000                             lea	(Nem_DiarySLZ).l,a0
00005FA6 4EB8 13FE                                  jsr	NemDec
00005FAA 43F8 CC00                                  lea	($FFFFCC00).w,a1
00005FAE 7000                                       moveq	#0,d0
00005FB0 323C 00DF                                  move.w	#$DF,d1
00005FB4 4EB8 1D1A                                  jsr     Pal_FadeTo
00005FB8 6000 0000                                  bra.w   Deardiary_StartLoop
00005FBC                            
00005FBC                            DearDiary_SBZ:
00005FBC 7023                                       moveq	#$23,d0
00005FBE 4EB8 206A                                  jsr	PalLoad1
00005FC2 43F9 FFFF 0000                             lea	($FFFF0000).l,a1
00005FC8 41F9 0000 0000                             lea	(Eni_DiarySBZ).l,a0
00005FCE 303C 0001                                  move.w	#1,d0
00005FD2 4EB8 16DC                                  jsr	EniDec
00005FD6 43F9 FFFF 0000                             lea	($FFFF0000).l,a1
00005FDC 203C 4000 0003                             move.l	#$40000003,d0
00005FE2 7227                                       moveq	#39,d1
00005FE4 741D                                       moveq	#29,d2
00005FE6 4EB8 134E                                  jsr	ShowVDPGraphics
00005FEA 23FC 4020 0000 00C0 0004                   move.l	#$40200000,($C00004).l
00005FF4 41F9 0000 0000                             lea	(Nem_DiarySBZ).l,a0
00005FFA 4EB8 13FE                                  jsr	NemDec
00005FFE 43F8 CC00                                  lea	($FFFFCC00).w,a1
00006002 7000                                       moveq	#0,d0
00006004 323C 00DF                                  move.w	#$DF,d1
00006008 4EB8 1D1A                                  jsr     Pal_FadeTo
0000600C 6000 0000                                  bra.w   Deardiary_StartLoop
00006010                            
00006010                            DearDiary_FZ:
00006010 7026                                       moveq	#$26,d0
00006012 4EB8 206A                                  jsr	PalLoad1
00006016 43F9 FFFF 0000                             lea	($FFFF0000).l,a1
0000601C 41F9 0000 0000                             lea	(Eni_DiaryFZ).l,a0
00006022 303C 0001                                  move.w	#1,d0
00006026 4EB8 16DC                                  jsr	EniDec
0000602A 43F9 FFFF 0000                             lea	($FFFF0000).l,a1
00006030 203C 4000 0003                             move.l	#$40000003,d0
00006036 7227                                       moveq	#39,d1
00006038 741D                                       moveq	#29,d2
0000603A 4EB8 134E                                  jsr	ShowVDPGraphics
0000603E 23FC 4020 0000 00C0 0004                   move.l	#$40200000,($C00004).l
00006048 41F9 0000 0000                             lea	(Nem_DiaryFZ).l,a0
0000604E 4EB8 13FE                                  jsr	NemDec
00006052 43F8 CC00                                  lea	($FFFFCC00).w,a1
00006056 7000                                       moveq	#0,d0
00006058 323C 00DF                                  move.w	#$DF,d1
0000605C 4EB8 1D1A                                  jsr     Pal_FadeTo
00006060                            
00006060                            Deardiary_StartLoop:
00006060 303C 0092                  		move.w	#$92,d0
00006064 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play emerald music
0000606A 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00006070 6100 CC24                  		bsr.w	DelayProgram
00006074 31FC 0600 F614             		move.w	#$600,($FFFFF614).w
0000607A                            
0000607A                            Deardiary_WaitEnd:
0000607A 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00006080 6100 CC14                  		bsr.w	DelayProgram
00006084 4A78 F614                  		tst.w	($FFFFF614).w
00006088 6700                       		beq.s	startgamealready
0000608A 0238 0080 F605             		andi.b	#Start,(Joypad|Press).w	; is Start button pressed?
00006090 67E8                       		beq.s	Deardiary_WaitEnd		; if not, branch
00006092                            
00006092                            startgamealready:
00006092 103C 00E4                  		move.b	#$E4,d0
00006096 6100 B238                  		bsr.w	PlaySound_Special ; stop music
0000609A 46FC 2300                                  move	#$2300,sr
0000609E 4EB8 1DC0                                  jsr     Pal_FadeFrom ; ÷åêïîèíò
000060A2                            
000060A2                            Okwestarted:
000060A2                            		; load title card patterns   
000060A2 46FC 2700                  		move	#$2700,sr	; disable interrupts
000060B0 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0
000060B6 6100 B346                  		bsr.w	NemDec                       
000060BA 46FC 2300                  		move	#$2300,sr	; enable interrupts
000060BE                            
000060BE                            		; load level patterns
000060BE 7000                       		moveq	#0,d0
000060C0 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; move zone number to d0
000060C4 E948                       		lsl.w	#4,d0		; multiple it by 2^4
000060C6 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000060CC 45F2 0000                  		lea	(a2,d0.w),a2
000060D0 7000                       		moveq	#0,d0
000060D2 1012                       		move.b	(a2),d0		; get PLC block number
000060D4 6700                       		beq.s	loc_37FC	; if it's zero, branch
000060D6 6100 B466                  		bsr.w	LoadPLC		; load level patterns
000060DA                            
000060DA                            loc_37FC:
000060DA 7001                       		moveq	#1,d0
000060DC 6100 B460                  		bsr.w	LoadPLC		; load standard	patterns
000060E0                            
000060E0                            Level_ClrRam:	; clear Object RAM
000060E0 43F8 D000                  		lea	($FFFFD000).w,a1
000060E4 7000                       		moveq	#0,d0
000060E6 323C 07FF                  		move.w	#$7FF,d1
000060EA 22C0                       @ClrObjRam:	move.l	d0,(a1)+	 ; fill object RAM with $0
000060EC 51C9 FFFC                  		dbf	d1,@ClrObjRam
000060F0                            
000060F0                            		; clear misc variables, part 1
000060F0 43F8 F628                  		lea	($FFFFF628).w,a1 ; load RAM destination
000060F4 7000                       		moveq	#0,d0
000060F6 323C 0015                  		move.w	#$15,d1
000060FA 22C0                       @ClrVars:	move.l	d0,(a1)+	; fill area RAM with $0
000060FC 51C9 FFFC                  		dbf	d1,@ClrVars	; repeat $15 more times
00006100                            
00006100                            		; clear misc variables, part 2
00006100 43F8 F700                  		lea	($FFFFF700).w,a1 ; load RAM destination
00006104 7000                       		moveq	#0,d0
00006106 323C 003F                  		move.w	#$3F,d1
0000610A 22C0                       @ClrVars2:	move.l	d0,(a1)+	; fill area RAM with $0
0000610C 51C9 FFFC                  		dbf	d1,@ClrVars2	; repeat $3F more times
00006110                            
00006110                            		; clear misc variables, part 3
00006110 43F8 FE60                  		lea	($FFFFFE60).w,a1 ; load RAM destination
00006114 7000                       		moveq	#0,d0
00006116 323C 0047                  		move.w	#$47,d1
0000611A 22C0                       @ClrVars3:	move.l	d0,(a1)+	; fill area RAM with $0
0000611C 51C9 FFFC                  		dbf	d1,@ClrVars3	; repeat $47 more times
00006120                            
00006120 46FC 2700                  		move	#$2700,sr	; disable interrupts
00006124 6100 B0D0                  		bsr.w	ClearScreen
00006128 4DF9 00C0 0004             		lea	($C00004).l,a6
0000612E                            		
0000612E                            		; setup VDP registers
0000612E 3CBC 8B03                  		move.w	#$8B03,(a6)
00006132 3CBC 8230                  		move.w	#$8230,(a6)
00006136 3CBC 8407                  		move.w	#$8407,(a6)
0000613A 3CBC 857C                  		move.w	#$857C,(a6)
0000613E 3CBC 9001                  		move.w	#$9001,(a6)
00006142 3CBC 8004                  		move.w	#$8004,(a6)
00006146 3CBC 8720                  		move.w	#$8720,(a6)
0000614A                            
0000614A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00006150 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00006154 4278 C800                  		clr.w	($FFFFC800).w
00006158 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
00006160 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w; is level LZ?
00006166 6600 0000                  		bne.w	Level_LoadPal	; if not, branch
0000616A 3CBC 8014                  		move.w	#$8014,(a6)
0000616E 7000                       		moveq	#0,d0
00006170 1038 FE11                  		move.b	($FFFFFE11).w,d0
00006174 D040                       		add.w	d0,d0
00006176 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
0000617C 3031 0000                  		move.w	(a1,d0.w),d0
00006180 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00006184 31C0 F648                  		move.w	d0,($FFFFF648).w
00006188 31C0 F64A                  		move.w	d0,($FFFFF64A).w
0000618C 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00006190 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00006194 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
0000619A                            
0000619A                            Level_LoadPal:
0000619A 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000061A0 46FC 2300                  		move	#$2300,sr
000061A4 0C38 0001 FF8C                             cmpi.b  #$01,($FFFFFF8C).w ;is Mighty selected as playable character?
000061AA 6700 0000                                  beq.w   MightyPalLoad3 ; if yes, branch
000061AE 0C38 0003 FF8C                             cmpi.b  #$03,($FFFFFF8C).w ;is Tikal selected as playable character?
000061B4 6700 0000                                  beq.w   TikalPalLoad3 ; if yes, branch
000061B8 0C38 0004 FF8C                             cmpi.b  #$04,($FFFFFF8C).w ; is Shadow?
000061BE 6700 0000                                  beq.w   ShadowPalLoad3
000061C2 0C38 0005 FF8C                             cmpi.b  #$05,($FFFFFF8C).w ; is Espio?
000061C8 6700 0000                                  beq.w   EspioPalLoad3
000061CC 7003                       		moveq	#3,d0
000061CE 6000                                       bra.s   Contloadingpal1
000061D0                            
000061D0                            MightyPalLoad3:
000061D0 7014                                       moveq   #$14,d0
000061D2 6000                                       bra.s   Contloadingpal1
000061D4                            
000061D4                            
000061D4                            TikalPalLoad3:
000061D4 7018                                       moveq   #$18,d0
000061D6 6000                                       bra.s   Contloadingpal1
000061D8                            
000061D8                            ShadowPalLoad3:
000061D8 701C                                       moveq   #$1C,d0
000061DA 6000                                       bra.s   Contloadingpal1
000061DC                            
000061DC                            EspioPalLoad3:
000061DC 701E                                       moveq   #$1E,d0
000061DE                            
000061DE                            Contloadingpal1:  
000061DE 6100 BEA6                  		bsr.w	PalLoad2
000061E2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000061E8 6600                       		bne.s	Level_GetBgm	; if not, branch
000061EA 0C38 0001 FF8C                             cmpi.b  #$01,($FFFFFF8C).w ;is Mighty selected as playable character?
000061F0 6700 0000                                  beq.w   MightyPalLoadLZ ; if yes, branch
000061F4 0C38 0003 FF8C                             cmpi.b	#$03,($FFFFFF8C).w
000061FA 6700 0000                                  beq.w   TikalPalLoadLZ
000061FE 0C38 0004 FF8C                             cmpi.b	#$04,($FFFFFF8C).w
00006204 6700 0000                                  beq.w   ShadowPalLoadLZ
00006208 0C38 0005 FF8C                             cmpi.b	#$05,($FFFFFF8C).w
0000620E 6700 0000                                  beq.w   EspioPalLoadLZ
00006212 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
00006214 6000                                       bra.s   Contloadingpal2
00006216                            
00006216                            MightyPalLoadLZ:
00006216 7015                                       moveq   #$15,d0
00006218 6000                                       bra.s   Contloadingpal2
0000621A                            
0000621A                            TikalPalLoadLZ:
0000621A 7019                                       moveq   #$19,d0
0000621C 6000                                       bra.s   Contloadingpal2
0000621E                            
0000621E                            ShadowPalLoadLZ:
0000621E 701D                                       moveq   #$1D,d0
00006220 6000                                       bra.s   Contloadingpal2
00006222                            
00006222                            EspioPalLoadLZ:
00006222 701E                                       moveq   #$1E,d0
00006224                            
00006224                            Contloadingpal2:
00006224 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
0000622A 6600                       		bne.s	Level_WaterPal	; if not, branch
0000622C 0C38 0001 FF8C                             cmpi.b  #$01,($FFFFFF8C).w ;is Mighty selected as playable character?
00006232 6700 0000                                  beq.w   MightyPalLoadSBZ ; if yes, branch
00006236 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
00006238 6000                                       bra.s   Level_WaterPal
0000623A                            
0000623A                            MightyPalLoadSBZ:
0000623A 7016                                       moveq   #$16,d0
0000623C                            
0000623C                            Level_WaterPal:
0000623C 6100 BE60                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00006240 4A38 FE30                  		tst.b	($FFFFFE30).w
00006244 6700                       		beq.s	Level_GetBgm
00006246 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0000624C                            
0000624C                            Level_GetBgm:
0000624C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00006250 6B00                       		bmi.s	loc_3946
00006252 7000                       		moveq	#0,d0
00006254 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006258 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3?
0000625E 6600                       		bne.s	Level_BgmNotLZ4	; if not, branch
00006260 7005                       		moveq	#5,d0		; move 5 to d0
00006262                            
00006262                            Level_BgmNotLZ4:
00006262 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00006268 6600                       		bne.s	Level_PlayBgm	; if not, branch
0000626A 303C 0093                  		move.w  #$93,d0
0000626E 6000                       		bra.s   Level_PlayBgm3
00006270                            
00006270                            Level_PlayBgm:
00006270 43F9 0000 5DC2             		lea	(MusicList).l,a1 ; load	music playlist
00006276 1031 0000                  		move.b	(a1,d0.w),d0
0000627A 1238 FE11                  		move.b  ($FFFFFE11).w,d1
0000627E 0C01 0003                  		cmpi.b  #3,d1		; is this act 4?
00006282 6600                       		bne.s   Level_PlayBgm2	; if not, branch
00006284 5301                       	        subi.b  #1,d1
00006286                                            	
00006286                            Level_PlayBgm2:
00006286 D001                                       add.b	d1,d0
00006288                            		
00006288                            Level_PlayBgm3:           
00006288 6100 B040                                  bsr.w	PlaySound	 ; play music
0000628C 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00006292                            
00006292                            Level_TtlCard:
00006292 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00006298 6100 C9FC                  		bsr.w	DelayProgram
0000629C 4EB9 0000 0000             		jsr	ObjectsLoad
000062A2 4EB9 0000 0000             		jsr	BuildSprites
000062A8 6100 B300                  		bsr.w	RunPLC_RAM
000062AC 3038 D108                  		move.w	($FFFFD108).w,d0
000062B0 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
000062B4 66DC                       		bne.s	Level_TtlCard	; if not, branch
000062B6 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
000062BA 66D6                       		bne.s	Level_TtlCard	; if yes, branch
000062BC 4EB9 0000 0000             		jsr	Hud_Base
000062C2                            
000062C2                            loc_3946:
000062C2 0C38 0001 FF8C                             cmpi.b  #$01,($FFFFFF8C).w ;is Mighty selected as playable character?
000062C8 6700 0000                                  beq.w   MightyPalLoad2 ; if yes, branch
000062CC 0C38 0003 FF8C                             cmpi.b  #$03,($FFFFFF8C).w ;is Tikal selected as playable character?
000062D2 6700 0000                                  beq.w   TikalPalLoad2 ; if yes, branch
000062D6 0C38 0004 FF8C                             cmpi.b  #$04,($FFFFFF8C).w ; is Shadow?
000062DC 6700 0000                                  beq.w   ShadowPalLoad2
000062E0 0C38 0005 FF8C                             cmpi.b  #$05,($FFFFFF8C).w ; is Espio?
000062E6 6700 0000                                  beq.w   ShadowPalLoad2
000062EA 7003                       		moveq	#3,d0
000062EC 6000                                       bra.s   loc_3946_Continue
000062EE                            
000062EE                            MightyPalLoad2:
000062EE 7014                                       moveq   #$14,d0
000062F0 6000                                       bra.s   loc_3946_Continue
000062F2                            
000062F2                            TikalPalLoad2:
000062F2 7018                                       moveq   #$18,d0 
000062F4 6000                                       bra.s   loc_3946_Continue
000062F6                            
000062F6                            ShadowPalLoad2:
000062F6 701C                                       moveq    #$1C,d0
000062F8 6000                                       bra.s    loc_3946_Continue
000062FA                            
000062FA                            EspioPalLoad2:
000062FA 701E                                       moveq    #$1E,d0
000062FC                            
000062FC                            loc_3946_Continue:
000062FC 6100 BD6C                  		bsr.w	PalLoad1	
00006300 6100 0000                  		bsr.w	LevelSizeLoad
00006304 6100 0000                  		bsr.w	DeformBgLayer
00006308 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000630E 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00006312 6100 0000                  		bsr.w	LoadTilesFromStart
00006316 4EB9 0000 0000             		jsr	FloorLog_Unk
0000631C 6100 0000                  		bsr.w	ColIndexLoad
00006320 6100 0000                  		bsr.w	LZWaterEffects
00006324 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000632A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000632E 6B00                       		bmi.s	Level_ChkDebug
00006330 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00006336                            
00006336                            Level_ChkDebug:
00006336 4A38 FFE2                  		tst.b   ($FFFFFFE2).w   	; has debug cheat been entered?
0000633A 6700                       		beq.s   Level_ChkWater  	; if not, branch
0000633C 0838 0006 F604             		btst    #iA,(Joypad|Held).w	; is A button pressed?
00006342 6700                       		beq.s   Level_ChkWater 		; if not, branch
00006344 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w	; enable debug mode
0000634A                            
0000634A                            Level_ChkWater:
0000634A 31FC 0000 F602             		move.w	#0,(SonicControl)
00006350 31FC 0000 F604             		move.w	#0,(Joypad)
00006356 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000635C 6600                       		bne.s	Level_LoadObj	; if not, branch
0000635E 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00006364 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
0000636A 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00006370 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00006376                            
00006376                            Level_LoadObj:
00006376 4EB9 0000 0000             		jsr	ObjPosLoad
0000637C 4EB9 0000 0000             		jsr	ObjectsLoad
00006382 4EB9 0000 0000             		jsr	BuildSprites
00006388 7000                       		moveq	#0,d0
0000638A 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
0000638E 6600                       		bne.s	loc_39E8	; if yes, branch
00006390 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00006394 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00006398 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
0000639C                            
0000639C                            loc_39E8:
0000639C 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
000063A0 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
000063A4 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
000063A8 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
000063AC 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000063B0 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000063B4 31C0 FE02                  		move.w	d0,($FFFFFE02).w
000063B8 31C0 FE04                  		move.w	d0,($FFFFFE04).w
000063BC 6100 0000                  		bsr.w	OscillateNumInit
000063C0 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
000063C6 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
000063CC 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
000063D2 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000063D8 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
000063DE 7000                       		moveq	#0,d0
000063E0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000063E4 E548                       		lsl.w	#2,d0
000063E6 2271 0000                  		movea.l	(a1,d0.w),a1
000063EA 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000063EE 6A00                       		bpl.s	Level_Demo	; if yes, branch
000063F0 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
000063F6 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000063FA 5340                       		subq.w	#1,d0
000063FC E548                       		lsl.w	#2,d0
000063FE 2271 0000                  		movea.l	(a1,d0.w),a1
00006402                            
00006402                            Level_Demo:
00006402 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00006408 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
0000640C 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00006412 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00006416 6A00                       		bpl.s	Level_ChkWaterPal
00006418 31FC 021C F614             		move.w	#540,($FFFFF614).w
0000641E 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00006424 6600                       		bne.s	Level_ChkWaterPal
00006426 31FC 01FE F614             		move.w	#510,($FFFFF614).w
0000642C                            
0000642C                            Level_ChkWaterPal:
0000642C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00006432 6600                       		bne.s	Level_Delay	; if not, branch
00006434 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00006436 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
0000643C 6600                       		bne.s	Level_WaterPal2	; if not, branch
0000643E 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00006440                            
00006440                            Level_WaterPal2:
00006440 6100 BC78                  		bsr.w	PalLoad4_Water
00006444                            
00006444                            Level_Delay:
00006444 323C 0003                  		move.w	#3,d1
00006448                            
00006448                            Level_DelayLoop:
00006448 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000644E 6100 C846                  		bsr.w	DelayProgram
00006452 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00006456                            
00006456 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000645C 6100 B8C2                  		bsr.w	Pal_FadeTo2
00006460 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00006464 6B00                       		bmi.s	Level_ClrCardArt
00006466 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
0000646A 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
0000646E 5838 D124                  		addq.b	#4,($FFFFD124).w
00006472 5838 D164                  		addq.b	#4,($FFFFD164).w
00006476 6000                       		bra.s	Level_StartGame
00006478                            ; ===========================================================================
00006478                            
00006478                            Level_ClrCardArt:
00006478 7002                       		moveq	#2,d0
0000647A 4EB9 0000 153E             		jsr	(LoadPLC).l	; load explosion patterns
00006480 7000                       		moveq	#0,d0
00006482 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006486 0640 0015                  		addi.w	#$15,d0
0000648A 4EB9 0000 153E             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00006490                            
00006490                            Level_StartGame:
00006490 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00006496                            
00006496                            ; ---------------------------------------------------------------------------
00006496                            ; Main level loop (when	all title card and loading sequences are finished)
00006496                            ; ---------------------------------------------------------------------------
00006496                            
00006496                            Level_MainLoop:
00006496 6100 AE3E                  		bsr.w	PauseGame
0000649A 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000064A0 6100 C7F4                  		bsr.w	DelayProgram
000064A4 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
000064A8 6100 0000                  		bsr.w	MoveSonicInDemo
000064AC 6100 0000                  		bsr.w	LZWaterEffects
000064B0 4EB9 0000 0000             		jsr	ObjectsLoad
000064B6 4A78 FE02                                  tst.w	($FFFFFE02).w	; is the level set to restart?
000064BA 6600 F90E                  		bne.w	Level		; if yes, branch
000064BE 4A78 FE08                  		tst.w	($FFFFFE08).w
000064C2 6600                       		bne.s	loc_3B10
000064C4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000064CA 6400                       		bcc.s	loc_3B14
000064CC                            
000064CC                            loc_3B10:
000064CC 6100 0000                  		bsr.w	DeformBgLayer
000064D0                            
000064D0                            loc_3B14:
000064D0 4EB9 0000 0000             		jsr	BuildSprites
000064D6 4EB9 0000 0000             		jsr	ObjPosLoad
000064DC 6100 B41C                  		bsr.w	PalCycle_Load
000064E0 6100 B0C8                  		bsr.w	RunPLC_RAM
000064E4 6100 0000                  		bsr.w	OscillateNumDo
000064E8 6100 0000                  		bsr.w	ChangeRingFrame
000064EC 6100 0000                  		bsr.w	SignpostArtLoad
000064F0 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000064F6 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
000064F8 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
000064FE 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00006502 4E75                       		rts
00006504                            ; ===========================================================================
00006504                            
00006504                            Level_ChkDemo:				; XREF: Level_MainLoop
00006504 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00006508 6600                       		bne.s	Level_EndDemo	; if yes, branch
0000650A 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
0000650E 6700                       		beq.s	Level_EndDemo	; if not, branch
00006510 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00006516 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
0000651A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00006520 4E75                       		rts	
00006522                            ; ===========================================================================
00006522                            
00006522                            Level_EndDemo:				; XREF: Level_ChkDemo
00006522 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00006528 6600                       		bne.s	loc_3B88	; if not, branch
0000652A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00006530 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006534 6A00                       		bpl.s	loc_3B88	; if yes, branch
00006536 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
0000653C                            
0000653C                            loc_3B88:
0000653C 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00006542 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00006548 4278 F794                  		clr.w	($FFFFF794).w
0000654C                            
0000654C                            loc_3B98:
0000654C 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00006552 6100 C742                  		bsr.w	DelayProgram
00006556 6100 0000                  		bsr.w	MoveSonicInDemo
0000655A 4EB9 0000 0000             		jsr	ObjectsLoad
00006560 4EB9 0000 0000             		jsr	BuildSprites
00006566 4EB9 0000 0000             		jsr	ObjPosLoad
0000656C 5378 F794                  		subq.w	#1,($FFFFF794).w
00006570 6A00                       		bpl.s	loc_3BC8
00006572 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00006578 6100 B866                  		bsr.w	Pal_FadeOut
0000657C                            
0000657C                            loc_3BC8:
0000657C 4A78 F614                  		tst.w	($FFFFF614).w
00006580 66CA                       		bne.s	loc_3B98
00006582 4E75                       		rts	
00006584                            ; ===========================================================================
00006584                            ; ---------------------------------------------------------------------------
00006584                            ; Subroutine to	do special water effects in Labyrinth Zone
00006584                            ; ---------------------------------------------------------------------------
00006584                            
00006584                            LZWaterEffects:				; XREF: Level
00006584 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000658A 6600                       		bne.s	locret_3C28	; if not, branch
0000658C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00006592 6400                       		bcc.s	LZMoveWater
00006594 6100 0000                  		bsr.w	LZWindTunnels
00006598 6100 0000                  		bsr.w	LZWaterSlides
0000659C 6100 0000                  		bsr.w	LZDynamicWater
000065A0                            
000065A0                            LZMoveWater:
000065A0 4238 F64E                  		clr.b	($FFFFF64E).w
000065A4 7000                       		moveq	#0,d0
000065A6 1038 FE60                  		move.b	($FFFFFE60).w,d0
000065AA E248                       		lsr.w	#1,d0
000065AC D078 F648                  		add.w	($FFFFF648).w,d0
000065B0 31C0 F646                  		move.w	d0,($FFFFF646).w
000065B4 3038 F646                  		move.w	($FFFFF646).w,d0
000065B8 9078 F704                  		sub.w	($FFFFF704).w,d0
000065BC 6400                       		bcc.s	loc_3C1A
000065BE 4A40                       		tst.w	d0
000065C0 6A00                       		bpl.s	loc_3C1A
000065C2 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
000065C8 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
000065CE                            
000065CE                            loc_3C1A:
000065CE 0C40 00DF                  		cmpi.w	#$DF,d0
000065D2 6500                       		bcs.s	loc_3C24
000065D4 303C 00DF                  		move.w	#$DF,d0
000065D8                            
000065D8                            loc_3C24:
000065D8 11C0 F625                  		move.b	d0,($FFFFF625).w
000065DC                            
000065DC                            locret_3C28:
000065DC 4E75                       		rts	
000065DE                            ; ===========================================================================
000065DE                            ; ---------------------------------------------------------------------------
000065DE                            ; Labyrinth default water heights
000065DE                            ; ---------------------------------------------------------------------------
000065DE                            WaterHeight:	incbin	misc\lz_heigh.bin
000065E6                            		even
000065E6                            ; ===========================================================================
000065E6                            
000065E6                            ; ---------------------------------------------------------------------------
000065E6                            ; Labyrinth dynamic water routines
000065E6                            ; ---------------------------------------------------------------------------
000065E6                            
000065E6                            LZDynamicWater:				; XREF: LZWaterEffects
000065E6 7000                       		moveq	#0,d0
000065E8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000065EC D040                       		add.w	d0,d0
000065EE 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000065F2 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000065F6 7200                       		moveq	#0,d1
000065F8 1238 F64C                  		move.b	($FFFFF64C).w,d1
000065FC 3038 F64A                  		move.w	($FFFFF64A).w,d0
00006600 9078 F648                  		sub.w	($FFFFF648).w,d0
00006604 6700                       		beq.s	locret_3C5A
00006606 6400                       		bcc.s	loc_3C56
00006608 4441                       		neg.w	d1
0000660A                            
0000660A                            loc_3C56:
0000660A D378 F648                  		add.w	d1,($FFFFF648).w
0000660E                            
0000660E                            locret_3C5A:
0000660E 4E75                       		rts	
00006610                            ; ===========================================================================
00006610 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00006612 0000                       		dc.w DynWater_LZ2-DynWater_Index
00006614 0000                       		dc.w DynWater_LZ3-DynWater_Index
00006616 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00006618                            ; ===========================================================================
00006618                            
00006618                            DynWater_LZ1:				; XREF: DynWater_Index
00006618 3038 F700                  		move.w	($FFFFF700).w,d0
0000661C 1438 F64D                  		move.b	($FFFFF64D).w,d2
00006620 6600                       		bne.s	loc_3CD0
00006622 323C 00B8                  		move.w	#$B8,d1
00006626 0C40 0600                  		cmpi.w	#$600,d0
0000662A 6500                       		bcs.s	loc_3CB4
0000662C 323C 0108                  		move.w	#$108,d1
00006630 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00006636 6500                       		bcs.s	loc_3CBA
00006638 0C40 0C00                  		cmpi.w	#$C00,d0
0000663C 6500                       		bcs.s	loc_3CB4
0000663E 323C 0318                  		move.w	#$318,d1
00006642 0C40 1080                  		cmpi.w	#$1080,d0
00006646 6500                       		bcs.s	loc_3CB4
00006648 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
0000664E 323C 05C8                  		move.w	#$5C8,d1
00006652 0C40 1380                  		cmpi.w	#$1380,d0
00006656 6500                       		bcs.s	loc_3CB4
00006658 323C 03A8                  		move.w	#$3A8,d1
0000665C B278 F648                  		cmp.w	($FFFFF648).w,d1
00006660 6600                       		bne.s	loc_3CB4
00006662 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00006668                            
00006668                            loc_3CB4:
00006668 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000666C 4E75                       		rts	
0000666E                            ; ===========================================================================
0000666E                            
0000666E                            loc_3CBA:				; XREF: DynWater_LZ1
0000666E 0C40 0C80                  		cmpi.w	#$C80,d0
00006672 65F4                       		bcs.s	loc_3CB4
00006674 323C 00E8                  		move.w	#$E8,d1
00006678 0C40 1500                  		cmpi.w	#$1500,d0
0000667C 65EA                       		bcs.s	loc_3CB4
0000667E 323C 0108                  		move.w	#$108,d1
00006682 60E4                       		bra.s	loc_3CB4
00006684                            ; ===========================================================================
00006684                            
00006684                            loc_3CD0:				; XREF: DynWater_LZ1
00006684 5302                       		subq.b	#1,d2
00006686 6600                       		bne.s	locret_3CF4
00006688 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
0000668E 6400                       		bcc.s	locret_3CF4
00006690 323C 03A8                  		move.w	#$3A8,d1
00006694 0C40 1300                  		cmpi.w	#$1300,d0
00006698 6500                       		bcs.s	loc_3CF0
0000669A 323C 0108                  		move.w	#$108,d1
0000669E 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000066A4                            
000066A4                            loc_3CF0:
000066A4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000066A8                            
000066A8                            locret_3CF4:
000066A8 4E75                       		rts	
000066AA                            ; ===========================================================================
000066AA                            
000066AA                            DynWater_LZ2:				; XREF: DynWater_Index
000066AA 3038 F700                  		move.w	($FFFFF700).w,d0
000066AE 323C 0328                  		move.w	#$328,d1
000066B2 0C40 0500                  		cmpi.w	#$500,d0
000066B6 6500                       		bcs.s	loc_3D12
000066B8 323C 03C8                  		move.w	#$3C8,d1
000066BC 0C40 0B00                  		cmpi.w	#$B00,d0
000066C0 6500                       		bcs.s	loc_3D12
000066C2 323C 0428                  		move.w	#$428,d1
000066C6                            
000066C6                            loc_3D12:
000066C6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000066CA 4E75                       		rts	
000066CC                            ; ===========================================================================
000066CC                            
000066CC                            DynWater_LZ3:				; XREF: DynWater_Index
000066CC 3038 F700                  		move.w	($FFFFF700).w,d0
000066D0 1438 F64D                  		move.b	($FFFFF64D).w,d2
000066D4 6600                       		bne.s	loc_3D5E
000066D6 323C 0900                  		move.w	#$900,d1
000066DA 0C40 0600                  		cmpi.w	#$600,d0
000066DE 6500                       		bcs.s	loc_3D54
000066E0 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
000066E6 6500                       		bcs.s	loc_3D54
000066E8 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000066EE 6400                       		bcc.s	loc_3D54
000066F0 323C 04C8                  		move.w	#$4C8,d1
000066F4 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
000066FA 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00006700 303C 00B7                  		move.w	#$B7,d0
00006704 6100 ABCA                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00006708                            
00006708                            loc_3D54:
00006708 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000670C 31C1 F648                  		move.w	d1,($FFFFF648).w
00006710 4E75                       		rts	
00006712                            ; ===========================================================================
00006712                            
00006712                            loc_3D5E:				; XREF: DynWater_LZ3
00006712 5302                       		subq.b	#1,d2
00006714 6600                       		bne.s	loc_3DA8
00006716 323C 04C8                  		move.w	#$4C8,d1
0000671A 0C40 0770                  		cmpi.w	#$770,d0
0000671E 6500                       		bcs.s	loc_3DA2
00006720 323C 0308                  		move.w	#$308,d1
00006724 0C40 1400                  		cmpi.w	#$1400,d0
00006728 6500                       		bcs.s	loc_3DA2
0000672A 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00006730 6700                       		beq.s	loc_3D8E
00006732 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00006738 6400                       		bcc.s	loc_3D8E
0000673A 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00006740 6400                       		bcc.s	loc_3DA2
00006742                            
00006742                            loc_3D8E:
00006742 323C 0508                  		move.w	#$508,d1
00006746 31C1 F648                  		move.w	d1,($FFFFF648).w
0000674A 0C40 1770                  		cmpi.w	#$1770,d0
0000674E 6500                       		bcs.s	loc_3DA2
00006750 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00006756                            
00006756                            loc_3DA2:
00006756 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000675A 4E75                       		rts	
0000675C                            ; ===========================================================================
0000675C                            
0000675C                            loc_3DA8:
0000675C 5302                       		subq.b	#1,d2
0000675E 6600                       		bne.s	loc_3DD2
00006760 323C 0508                  		move.w	#$508,d1
00006764 0C40 1860                  		cmpi.w	#$1860,d0
00006768 6500                       		bcs.s	loc_3DCC
0000676A 323C 0188                  		move.w	#$188,d1
0000676E 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00006772 6400                       		bcc.s	loc_3DC6
00006774 B278 F648                  		cmp.w	($FFFFF648).w,d1
00006778 6600                       		bne.s	loc_3DCC
0000677A                            
0000677A                            loc_3DC6:
0000677A 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00006780                            
00006780                            loc_3DCC:
00006780 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00006784 4E75                       		rts	
00006786                            ; ===========================================================================
00006786                            
00006786                            loc_3DD2:
00006786 5302                       		subq.b	#1,d2
00006788 6600                       		bne.s	loc_3E0E
0000678A 323C 0188                  		move.w	#$188,d1
0000678E 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00006792 6500                       		bcs.s	loc_3E04
00006794 323C 0900                  		move.w	#$900,d1
00006798 0C40 1BC0                  		cmpi.w	#$1BC0,d0
0000679C 6500                       		bcs.s	loc_3E04
0000679E 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
000067A4 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
000067AA 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
000067B0 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
000067B6 4E75                       		rts	
000067B8                            ; ===========================================================================
000067B8                            
000067B8                            loc_3E04:
000067B8 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000067BC 31C1 F648                  		move.w	d1,($FFFFF648).w
000067C0 4E75                       		rts	
000067C2                            ; ===========================================================================
000067C2                            
000067C2                            loc_3E0E:
000067C2 0C40 1E00                  		cmpi.w	#$1E00,d0
000067C6 6500                       		bcs.s	locret_3E1A
000067C8 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
000067CE                            
000067CE                            locret_3E1A:
000067CE 4E75                       		rts	
000067D0                            ; ===========================================================================
000067D0                            
000067D0                            DynWater_SBZ3:				; XREF: DynWater_Index
000067D0 323C 0228                  		move.w	#$228,d1
000067D4 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
000067DA 6500                       		bcs.s	loc_3E2C
000067DC 323C 04C8                  		move.w	#$4C8,d1
000067E0                            
000067E0                            loc_3E2C:
000067E0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000067E4 4E75                       		rts
000067E6                            
000067E6                            ; ---------------------------------------------------------------------------
000067E6                            ; Labyrinth Zone "wind tunnels"	subroutine
000067E6                            ; ---------------------------------------------------------------------------
000067E6                            
000067E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000067E6                            
000067E6                            
000067E6                            LZWindTunnels:				; XREF: LZWaterEffects
000067E6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000067EA 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
000067EE 45F9 0000 0000             		lea	(LZWind_Data).l,a2
000067F4 7000                       		moveq	#0,d0
000067F6 1038 FE11                  		move.b	($FFFFFE11).w,d0
000067FA E748                       		lsl.w	#3,d0
000067FC D4C0                       		adda.w	d0,a2
000067FE 7200                       		moveq	#0,d1
00006800 4A38 FE11                  		tst.b	($FFFFFE11).w
00006804 6600                       		bne.s	loc_3E56
00006806 7201                       		moveq	#1,d1
00006808 514A                       		subq.w	#8,a2
0000680A                            
0000680A                            loc_3E56:
0000680A 43F8 D000                  		lea	($FFFFD000).w,a1
0000680E                            
0000680E                            LZWind_Loop:
0000680E 3029 0008                  		move.w	8(a1),d0
00006812 B052                       		cmp.w	(a2),d0
00006814 6500 0000                  		bcs.w	loc_3EF4
00006818 B06A 0004                  		cmp.w	4(a2),d0
0000681C 6400 0000                  		bcc.w	loc_3EF4
00006820 3429 000C                  		move.w	$C(a1),d2
00006824 B46A 0002                  		cmp.w	2(a2),d2
00006828 6500                       		bcs.s	loc_3EF4
0000682A B46A 0006                  		cmp.w	6(a2),d2
0000682E 6400                       		bcc.s	loc_3EF4
00006830 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00006834 0200 003F                  		andi.b	#$3F,d0
00006838 6600                       		bne.s	loc_3E90
0000683A 303C 00D0                  		move.w	#$D0,d0
0000683E 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play rushing water sound
00006844                            
00006844                            loc_3E90:
00006844 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00006848 6600 0000                  		bne.w	locret_3F0A
0000684C 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00006852 6400                       		bcc.s	loc_3F06
00006854 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
0000685A 0440 0080                  		subi.w	#$80,d0
0000685E B052                       		cmp.w	(a2),d0
00006860 6400                       		bcc.s	LZWind_Move
00006862 7002                       		moveq	#2,d0
00006864 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
0000686A 6600                       		bne.s	loc_3EBA
0000686C 4440                       		neg.w	d0
0000686E                            
0000686E                            loc_3EBA:
0000686E D169 000C                  		add.w	d0,$C(a1)
00006872                            
00006872                            LZWind_Move:
00006872 5869 0008                  		addq.w	#4,8(a1)
00006876 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
0000687C 337C 0000 0012             		move.w	#0,$12(a1)
00006882 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00006888 08E9 0001 0022             		bset	#1,$22(a1)
0000688E 0838 0000 F602             		btst	#iUp,(SonicControl|Held)	; is up pressed?
00006894 6700                       		beq.s	LZWind_MoveDown			; if not, branch
00006896 5369 000C                  		subq.w	#1,$C(a1)			; move Sonic up
0000689A                            
0000689A                            LZWind_MoveDown:
0000689A 0838 0001 F602             		btst	#iDown,(SonicControl|Held)	; is down being pressed?
000068A0 6700                       		beq.s	locret_3EF2			; if not, branch
000068A2 5269 000C                  		addq.w	#1,$C(a1)			; move Sonic down
000068A6                            
000068A6                            locret_3EF2:
000068A6 4E75                       		rts
000068A8                            ; ===========================================================================
000068A8                            
000068A8                            loc_3EF4:				; XREF: LZWindTunnels
000068A8 504A                       		addq.w	#8,a2
000068AA 51C9 FF62                  		dbf	d1,LZWind_Loop
000068AE 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000068B2 6700                       		beq.s	locret_3F0A
000068B4 137C 0000 001C             		move.b	#0,$1C(a1)
000068BA                            
000068BA                            loc_3F06:
000068BA 4238 F7C7                  		clr.b	($FFFFF7C7).w
000068BE                            
000068BE                            locret_3F0A:
000068BE 4E75                       		rts	
000068C0                            ; End of function LZWindTunnels
000068C0                            
000068C0                            ; ===========================================================================
000068C0 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
000068C8 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
000068DA 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
000068E8                            					; XREF: LZWindTunnels
000068E8                            		even
000068E8                            
000068E8                            ; ---------------------------------------------------------------------------
000068E8                            ; Labyrinth Zone water slide subroutine
000068E8                            ; ---------------------------------------------------------------------------
000068E8                            
000068E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068E8                            
000068E8                            
000068E8                            LZWaterSlides:				; XREF: LZWaterEffects
000068E8 43F8 D000                  		lea	($FFFFD000).w,a1
000068EC 0829 0001 0022             		btst	#1,$22(a1)
000068F2 6600                       		bne.s	loc_3F6A
000068F4 3029 000C                  		move.w	$C(a1),d0
000068F8 E248                       		lsr.w	#1,d0
000068FA 0240 0380                  		andi.w	#$380,d0
000068FE 1229 0008                  		move.b	8(a1),d1
00006902 0241 007F                  		andi.w	#$7F,d1
00006906 D041                       		add.w	d1,d0
00006908 45F8 A400                  		lea	($FFFFA400).w,a2
0000690C 1032 0000                  		move.b	(a2,d0.w),d0
00006910 45FA 0000                  		lea	byte_3FCF(pc),a2
00006914 7206                       		moveq	#6,d1
00006916                            
00006916                            loc_3F62:
00006916 B022                       		cmp.b	-(a2),d0
00006918 57C9 FFFC                  		dbeq	d1,loc_3F62
0000691C 6700                       		beq.s	LZSlide_Move
0000691E                            
0000691E                            loc_3F6A:
0000691E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00006922 6700                       		beq.s	locret_3F7A
00006924 337C 0005 003E             		move.w	#5,$3E(a1)
0000692A 4238 F7CA                  		clr.b	($FFFFF7CA).w
0000692E                            
0000692E                            locret_3F7A:
0000692E 4E75                       		rts	
00006930                            ; ===========================================================================
00006930                            
00006930                            LZSlide_Move:				; XREF: LZWaterSlides
00006930 0C41 0003                  		cmpi.w	#3,d1
00006934 6400                       		bcc.s	loc_3F84
00006936 4E71                       		nop	
00006938                            
00006938                            loc_3F84:
00006938 08A9 0000 0022             		bclr	#0,$22(a1)
0000693E 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00006942 1340 0014                  		move.b	d0,$14(a1)
00006946 6A00                       		bpl.s	loc_3F9A
00006948 08E9 0000 0022             		bset	#0,$22(a1)
0000694E                            
0000694E                            loc_3F9A:
0000694E 4229 0015                  		clr.b	$15(a1)
00006952 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00006958 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
0000695E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00006962 0200 001F                  		andi.b	#$1F,d0
00006966 6600                       		bne.s	locret_3FBE
00006968 303C 00D0                  		move.w	#$D0,d0
0000696C 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play water sound
00006972                            
00006972                            locret_3FBE:
00006972 4E75                       		rts	
00006974                            ; End of function LZWaterSlides
00006974                            
00006974                            ; ===========================================================================
00006974 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00006983 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00006984                            		even
00006984                            
00006984                            ; ---------------------------------------------------------------------------
00006984                            ; Subroutine to	move Sonic in demo mode
00006984                            ; ---------------------------------------------------------------------------
00006984                            
00006984                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006984                            
00006984                            
00006984                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00006984 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006988 6600                       		bne.s	MoveDemo_On	; if yes, branch
0000698A 4E75                       		rts	
0000698C                            ; ===========================================================================
0000698C                            
0000698C                            ; ---------------------------------------------------------------------------
0000698C                            ; Unused subroutine to record demos
0000698C                            ; ---------------------------------------------------------------------------
0000698C                            
0000698C                            MoveDemo_Record:
0000698C 43F9 0008 0000             		lea	($80000).l,a1		; RAM space, where demo is written
00006992 3038 F790                  		move.w	($FFFFF790).w,d0	; load record index
00006996 D2C0                       		adda.w	d0,a1			; load record
00006998 1038 F604                  		move.b	(Joypad|Held),d0	; get button presses
0000699C B011                       		cmp.b	(a1),d0			; have input buttons been changed?
0000699E 6600                       		bne.s	@RecordItem		; if yes, branch
000069A0 5229 0001                  		addq.b	#1,1(a1)		; increase buttons state counter
000069A4 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)		; is counter about to overflow?
000069AA 6700                       		beq.s	@RecordItem		; if yes, branch
000069AC 4E75                       		rts
000069AE                            
000069AE                            ;loc_3FFA:
000069AE                            @RecordItem:
000069AE 1340 0002                  		move.b	d0,2(a1)		; record button state into next slot
000069B2 137C 0000 0003             		move.b	#0,3(a1)		; record button state counter into next slot
000069B8 5478 F790                  		addq.w	#2,($FFFFF790).w	; increase record index
000069BC 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
000069C2 4E75                       		rts
000069C4                            ; ===========================================================================
000069C4                            
000069C4                            MoveDemo_On:				; XREF: MoveSonicInDemo
000069C4 4A38 F604                  		tst.b	(Joypad|Held)	; test joypad input
000069C8 6A00                       		bpl.s	loc_4022	; if Start is not pressed, branch
000069CA 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is it demos in Ending sequence?
000069CE 6B00                       		bmi.s	loc_4022	; if yes, branch
000069D0 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to Title Screen
000069D6                            
000069D6                            loc_4022:
000069D6 43F9 0000 0000             		lea	(Demo_Index).l,a1
000069DC 7000                       		moveq	#0,d0
000069DE 1038 FE10                  		move.b	($FFFFFE10).w,d0
000069E2 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000069E8 6600                       		bne.s	loc_4038
000069EA 7006                       		moveq	#6,d0
000069EC                            
000069EC                            loc_4038:
000069EC E548                       		lsl.w	#2,d0
000069EE 2271 0000                  		movea.l	(a1,d0.w),a1
000069F2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is it demos in Ending sequence?
000069F6 6A00                       		bpl.s	loc_4056	; if not, branch
000069F8 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
000069FE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006A02 5340                       		subq.w	#1,d0
00006A04 E548                       		lsl.w	#2,d0
00006A06 2271 0000                  		movea.l	(a1,d0.w),a1
00006A0A                            
00006A0A                            loc_4056:
00006A0A 3038 F790                  		move.w	($FFFFF790).w,d0 ; load record index
00006A0E D2C0                       		adda.w	d0,a1		; add it to a1 to get the record
00006A10 1011                       		move.b	(a1),d0		; read button press from the recorded demo
00006A12 41F8 F604                  		lea	(Joypad),a0	; load Joypad button states
00006A16 1200                       		move.b	d0,d1
00006A18 1410                       		move.b	(a0),d2
00006A1A B500                       		eor.b	d2,d0
00006A1C 10C1                       		move.b	d1,(a0)+
00006A1E C001                       		and.b	d1,d0
00006A20 10C0                       		move.b	d0,(a0)+
00006A22 5338 F792                  		subq.b	#1,($FFFFF792).w
00006A26 6400                       		bcc.s	locret_407E
00006A28 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00006A2E 5478 F790                  		addq.w	#2,($FFFFF790).w
00006A32                            
00006A32                            locret_407E:
00006A32 4E75                       		rts	
00006A34                            ; End of function MoveSonicInDemo
00006A34                            
00006A34                            ; ===========================================================================
00006A34                            ; ---------------------------------------------------------------------------
00006A34                            ; Demo sequence	pointers
00006A34                            ; ---------------------------------------------------------------------------
00006A34                            Demo_Index:
00006A34                            	include "_inc\Demo pointers for intro.asm"
00006A34                            ; ---------------------------------------------------------------------------
00006A34                            ; Demo sequence	pointers
00006A34                            ; ---------------------------------------------------------------------------
00006A34 0000 0000                  	dc.l Demo_GHZ
00006A38 0000 0000                  	dc.l Demo_GHZ
00006A3C 0000 0000                  	dc.l Demo_MZ
00006A40 0000 0000                  	dc.l Demo_MZ
00006A44 0000 0000                  	dc.l Demo_SYZ
00006A48 0000 0000                  	dc.l Demo_SYZ
00006A4C 0000 0000                  	dc.l Demo_SS
00006A50 0000 0000                  	dc.l Demo_SS
00006A50 0000 0000                  	dc.l Demo_SS
00006A54                            
00006A54                            Demo_EndIndex:
00006A54                            	include "_inc\Demo pointers for ending.asm"
00006A54                            ; ---------------------------------------------------------------------------
00006A54                            ; Demo (ending) sequence pointers
00006A54                            ; ---------------------------------------------------------------------------
00006A54 0000 0000                  	dc.l Demo_EndGHZ1
00006A58 0000 0000                  	dc.l Demo_EndMZ
00006A5C 0000 0000                  	dc.l Demo_EndSYZ
00006A60 0000 0000                  	dc.l Demo_EndLZ
00006A64 0000 0000                  	dc.l Demo_EndSLZ
00006A68 0000 0000                  	dc.l Demo_EndSBZ1
00006A6C 0000 0000                  	dc.l Demo_EndSBZ2
00006A70 0000 0000                  	dc.l Demo_EndGHZ2
00006A70 0000 0000                  	dc.l Demo_EndGHZ2
00006A74                            
00006A74 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00006A84 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00006A94 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00006AA4                            		even
00006AA4                            
00006AA4                            ; ---------------------------------------------------------------------------
00006AA4                            ; Collision index loading subroutine
00006AA4                            ; ---------------------------------------------------------------------------
00006AA4                            
00006AA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AA4                            
00006AA4                            
00006AA4                            ColIndexLoad:				; XREF: Level
00006AA4 7000                       		moveq	#0,d0
00006AA6 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006AAA E548                       		lsl.w	#2,d0
00006AAC 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00006AB2 4E75                       		rts	
00006AB4                            ; End of function ColIndexLoad
00006AB4                            
00006AB4                            ; ===========================================================================
00006AB4                            ; ---------------------------------------------------------------------------
00006AB4                            ; Collision index pointers
00006AB4                            ; ---------------------------------------------------------------------------
00006AB4                            ColPointers:
00006AB4                            	include "_inc\Collision index pointers.asm"
00006AB4                            ; ---------------------------------------------------------------------------
00006AB4                            ; Collision index pointers
00006AB4                            ; ---------------------------------------------------------------------------
00006AB4 0000 0000                  	dc.l Col_GHZ
00006AB8 0000 0000                  	dc.l Col_LZ
00006ABC 0000 0000                  	dc.l Col_MZ
00006AC0 0000 0000                  	dc.l Col_SLZ
00006AC4 0000 0000                  	dc.l Col_SYZ
00006AC8 0000 0000                  	dc.l Col_SBZ
00006AC8 0000 0000                  	dc.l Col_SBZ
00006ACC                            
00006ACC                            ; ---------------------------------------------------------------------------
00006ACC                            ; Oscillating number subroutine
00006ACC                            ; ---------------------------------------------------------------------------
00006ACC                            
00006ACC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006ACC                            
00006ACC                            
00006ACC                            OscillateNumInit:			; XREF: Level
00006ACC 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00006AD0 45F9 0000 0000             		lea	(Osc_Data).l,a2
00006AD6 7220                       		moveq	#$20,d1
00006AD8                            
00006AD8                            Osc_Loop:
00006AD8 32DA                       		move.w	(a2)+,(a1)+
00006ADA 51C9 FFFC                  		dbf	d1,Osc_Loop
00006ADE 4E75                       		rts	
00006AE0                            ; End of function OscillateNumInit
00006AE0                            
00006AE0                            ; ===========================================================================
00006AE0 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00006AE4 0000 0080                  		dc.w 0,	$80
00006AE8 0000 0080                  		dc.w 0,	$80
00006AEC 0000 0080                  		dc.w 0,	$80
00006AF0 0000 0080                  		dc.w 0,	$80
00006AF4 0000 0080                  		dc.w 0,	$80
00006AF8 0000 0080                  		dc.w 0,	$80
00006AFC 0000 0080                  		dc.w 0,	$80
00006B00 0000 0080                  		dc.w 0,	$80
00006B04 0000 50F0                  		dc.w 0,	$50F0
00006B08 011E 2080                  		dc.w $11E, $2080
00006B0C 00B4 3080                  		dc.w $B4, $3080
00006B10 010E 5080                  		dc.w $10E, $5080
00006B14 01C2 7080                  		dc.w $1C2, $7080
00006B18 0276 0080                  		dc.w $276, $80
00006B1C 0000 0080                  		dc.w 0,	$80
00006B20 0000                       		dc.w 0
00006B22                            		even
00006B22                            
00006B22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B22                            
00006B22                            
00006B22                            OscillateNumDo:				; XREF: Level
00006B22 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00006B28 6400                       		bcc.s	locret_41C4
00006B2A 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00006B2E 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00006B34 3619                       		move.w	(a1)+,d3
00006B36 720F                       		moveq	#$F,d1
00006B38                            
00006B38                            loc_4184:
00006B38 341A                       		move.w	(a2)+,d2
00006B3A 381A                       		move.w	(a2)+,d4
00006B3C 0303                       		btst	d1,d3
00006B3E 6600                       		bne.s	loc_41A4
00006B40 3029 0002                  		move.w	2(a1),d0
00006B44 D042                       		add.w	d2,d0
00006B46 3340 0002                  		move.w	d0,2(a1)
00006B4A D151                       		add.w	d0,0(a1)
00006B4C B811                       		cmp.b	0(a1),d4
00006B4E 6200                       		bhi.s	loc_41BA
00006B50 03C3                       		bset	d1,d3
00006B52 6000                       		bra.s	loc_41BA
00006B54                            ; ===========================================================================
00006B54                            
00006B54                            loc_41A4:				; XREF: OscillateNumDo
00006B54 3029 0002                  		move.w	2(a1),d0
00006B58 9042                       		sub.w	d2,d0
00006B5A 3340 0002                  		move.w	d0,2(a1)
00006B5E D151                       		add.w	d0,0(a1)
00006B60 B811                       		cmp.b	0(a1),d4
00006B62 6300                       		bls.s	loc_41BA
00006B64 0383                       		bclr	d1,d3
00006B66                            
00006B66                            loc_41BA:
00006B66 5849                       		addq.w	#4,a1
00006B68 51C9 FFCE                  		dbf	d1,loc_4184
00006B6C 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00006B70                            
00006B70                            locret_41C4:
00006B70 4E75                       		rts	
00006B72                            ; End of function OscillateNumDo
00006B72                            
00006B72                            ; ===========================================================================
00006B72 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00006B76 0002 0018                  		dc.w 2,	$18
00006B7A 0002 0020                  		dc.w 2,	$20
00006B7E 0002 0030                  		dc.w 2,	$30
00006B82 0004 0020                  		dc.w 4,	$20
00006B86 0008 0008                  		dc.w 8,	8
00006B8A 0008 0040                  		dc.w 8,	$40
00006B8E 0004 0040                  		dc.w 4,	$40
00006B92 0002 0050                  		dc.w 2,	$50
00006B96 0002 0050                  		dc.w 2,	$50
00006B9A 0002 0020                  		dc.w 2,	$20
00006B9E 0003 0030                  		dc.w 3,	$30
00006BA2 0005 0050                  		dc.w 5,	$50
00006BA6 0007 0070                  		dc.w 7,	$70
00006BAA 0002 0010                  		dc.w 2,	$10
00006BAE 0002 0010                  		dc.w 2,	$10
00006BB2                            		even
00006BB2                            
00006BB2                            ; ---------------------------------------------------------------------------
00006BB2                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00006BB2                            ; ---------------------------------------------------------------------------
00006BB2                            
00006BB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BB2                            
00006BB2                            
00006BB2                            ChangeRingFrame:			; XREF: Level
00006BB2 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00006BB6 6A00                       		bpl.s	loc_421C
00006BB8 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00006BBE 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00006BC2 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00006BC8                            
00006BC8                            loc_421C:
00006BC8 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00006BCC 6A00                       		bpl.s	loc_4232
00006BCE 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00006BD4 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00006BD8 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00006BDE                            
00006BDE                            loc_4232:
00006BDE 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00006BE2 6A00                       		bpl.s	loc_4250
00006BE4 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00006BEA 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00006BEE 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00006BF4 6500                       		bcs.s	loc_4250
00006BF6 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00006BFC                            
00006BFC                            loc_4250:
00006BFC 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00006C00 6700                       		beq.s	locret_4272
00006C02 7000                       		moveq	#0,d0
00006C04 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00006C08 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00006C0C 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00006C10 EF58                       		rol.w	#7,d0
00006C12 0240 0003                  		andi.w	#3,d0
00006C16 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00006C1A 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00006C1E                            
00006C1E                            locret_4272:
00006C1E 4E75                       		rts	
00006C20                            ; End of function ChangeRingFrame
00006C20                            
00006C20                            ; ---------------------------------------------------------------------------
00006C20                            ; End-of-act signpost pattern loading subroutine
00006C20                            ; ---------------------------------------------------------------------------
00006C20                            
00006C20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C20                            
00006C20                            
00006C20                            SignpostArtLoad:			; XREF: Level
00006C20 4A38 F7AA                                  tst.b ($FFFFF7AA).w
00006C24 6700                                       beq.s SignnpostCcont
00006C26 4E75                                       rts
00006C28                            
00006C28                            SignnpostCcont:
00006C28 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00006C2C 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00006C30 3038 F700                  		move.w	($FFFFF700).w,d0
00006C34 3238 F72A                  		move.w	($FFFFF72A).w,d1
00006C38 0441 0100                  		subi.w	#$100,d1
00006C3C B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00006C3E 6D00                       		blt.s	Signpost_Exit	; if not, branch
00006C40 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00006C44 6700                       		beq.s	Signpost_Exit
00006C46 B278 F728                  		cmp.w	($FFFFF728).w,d1
00006C4A 6700                       		beq.s	Signpost_Exit
00006C4C 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00006C50 0C38 0001 FF8C                             cmpi.b  #$01,($FFFFFF8C).w ;is Mighty selected as playable character?
00006C56 6700 0000                                  beq.w   MightySignLoad ; if yes, branch
00006C5A 0C38 0002 FF8C                             cmpi.b  #$02,($FFFFFF8C).w ;is Metal?
00006C60 6700 0000                                  beq.w   MetalSignLoad ; if yes, branch
00006C64 0C38 0003 FF8C                             cmpi.b  #$03,($FFFFFF8C).w ;is Tikal?
00006C6A 6700 0000                                  beq.w   TikalSignLoad ; if yes, branch
00006C6E 0C38 0004 FF8C                             cmpi.b  #$04,($FFFFFF8C).w ;is Shadow?
00006C74 6700 0000                                  beq.w   ShadowSignLoad ; if yes, branch
00006C78 0C38 0005 FF8C                             cmpi.b  #$05,($FFFFFF8C).w ;is Espio?
00006C7E 6700 0000                                  beq.w   EspioSignLoad ; if yes, branch
00006C82 7000                                       moveq   #0,d0 ; clear this fucking queue
00006C84 7012                                       moveq   #$12,d0 ;load sonic's signpost art (this is 18 really, but this is 12 in HEX)
00006C86 6000                                       bra.s   EndOfSignarting
00006C88                            
00006C88                            MightySignLoad:
00006C88 7000                                       moveq   #0,d0 
00006C8A 7020                                       moveq   #$20,d0 ; load mighty's signpost art (32 really, 20 in hex)
00006C8C 6000 0000                                  bra.w   EndOfSignArting
00006C90                            
00006C90                            MetalSignLoad:
00006C90 7000                                       moveq   #0,d0
00006C92 7021                                       moveq   #$21,d0 ; load metal's signpost art
00006C94 6000 0000                                  bra.w   EndOfSignArting
00006C98                            
00006C98                            TikalSignLoad: 
00006C98 7000                                       moveq   #0,d0
00006C9A 7022                                       moveq   #$22,d0 
00006C9C 6000 0000                                  bra.w   EndOfSignArting
00006CA0                            
00006CA0                            ShadowSignLoad: 
00006CA0 7000                                       moveq   #0,d0
00006CA2 7027                                       moveq   #$27,d0 
00006CA4 6000 0000                                  bra.w   EndOfSignArting
00006CA8                            
00006CA8                            EspioSignLoad:
00006CA8 7000                                       moveq   #0,d0
00006CAA 7028                                       moveq   #$28,d0
00006CAC                            
00006CAC                            EndOfSignarting:
00006CAC 6000 A8C2                  		bra.w	LoadPLC2	; load signpost	patterns
00006CB0                            ; ===========================================================================
00006CB0                            
00006CB0                            Signpost_Exit:
00006CB0 4E75                       		rts	
00006CB2                            ; End of function SignpostArtLoad
00006CB2                            
00006CB2                            ; ===========================================================================
00006CB2                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00006D32                            Demo_MZ:	incbin	demodata\i_mz.bin
00006E62                            Demo_SYZ:	incbin	demodata\i_syz.bin
00006EE2                            Demo_SS:	incbin	demodata\i_ss.bin
00006FE2                            ; ===========================================================================
00006FE2                            
00006FE2                            ; ---------------------------------------------------------------------------
00006FE2                            ; Special Stage
00006FE2                            ; ---------------------------------------------------------------------------
00006FE2                            
00006FE2                            SpecialStage:				; XREF: GameModeArray
00006FE2 303C 00CA                  		move.w	#$CA,d0
00006FE6 6100 A2E8                  		bsr.w	PlaySound_Special ; play special stage entry sound
00006FEA 6100 AEFE                  		bsr.w	Pal_MakeFlash
00006FEE 46FC 2700                  		move	#$2700,sr
00006FF2 4DF9 00C0 0004             		lea	($C00004).l,a6
00006FF8 3CBC 8B03                  		move.w	#$8B03,(a6)
00006FFC 3CBC 8004                  		move.w	#$8004,(a6)
00007000 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00007006 3CBC 9011                  		move.w	#$9011,(a6)
0000700A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000700E 0200 00BF                  		andi.b	#$BF,d0
00007012 33C0 00C0 0004             		move.w	d0,($C00004).l
00007018 6100 A1DC                  		bsr.w	ClearScreen
0000701C 46FC 2300                  		move	#$2300,sr
00007020 4BF9 00C0 0004             		lea	($C00004).l,a5
00007026 3ABC 8F01                  		move.w	#$8F01,(a5)
0000702A 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00007030 3ABC 9780                  		move.w	#$9780,(a5)
00007034 2ABC 5000 0081             		move.l	#$50000081,(a5)
0000703A 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00007042                            
00007042                            loc_463C:
00007042 3215                       		move.w	(a5),d1
00007044 0801 0001                  		btst	#1,d1
00007048 66F8                       		bne.s	loc_463C
0000704A 3ABC 8F02                  		move.w	#$8F02,(a5)
0000704E 6100 0000                  		bsr.w	SS_BGLoad
00007052 7014                       		moveq	#$14,d0
00007054 6100 A654                  		bsr.w	RunPLC_ROM	; load special stage patterns
00007058 43F8 D000                  		lea	($FFFFD000).w,a1
0000705C 7000                       		moveq	#0,d0
0000705E 323C 07FF                  		move.w	#$7FF,d1
00007062                            
00007062                            SS_ClrObjRam:
00007062 22C0                       		move.l	d0,(a1)+
00007064 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00007068                            
00007068 43F8 F700                  		lea	($FFFFF700).w,a1
0000706C 7000                       		moveq	#0,d0
0000706E 323C 003F                  		move.w	#$3F,d1
00007072                            
00007072                            SS_ClrRam:
00007072 22C0                       		move.l	d0,(a1)+
00007074 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00007078                            
00007078 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000707C 7000                       		moveq	#0,d0
0000707E 323C 0027                  		move.w	#$27,d1
00007082                            
00007082                            SS_ClrRam2:
00007082 22C0                       		move.l	d0,(a1)+
00007084 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00007088                            
00007088 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000708C 7000                       		moveq	#0,d0
0000708E 323C 007F                  		move.w	#$7F,d1
00007092                            
00007092                            SS_ClrNemRam:
00007092 22C0                       		move.l	d0,(a1)+
00007094 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00007098                            
00007098 4238 F64E                  		clr.b	($FFFFF64E).w
0000709C 4278 FE02                  		clr.w	($FFFFFE02).w
000070A0 700A                       		moveq	#$A,d0
000070A2 6100 AFC6                  		bsr.w	PalLoad1	; load special stage pallet
000070A6 4EB9 0000 0000             		jsr	SS_Load
000070AC 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000070B4 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000070BC 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
000070C2 6100 0000                  		bsr.w	PalCycle_SS
000070C6 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
000070CA 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
000070D0 303C 0095                  		move.w	#$95,d0
000070D4 6100 A1F4                  		bsr.w	PlaySound	; play special stage BG	music
000070D8 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000070DE 43F9 0000 6A34             		lea	(Demo_Index).l,a1
000070E4 7006                       		moveq	#6,d0
000070E6 E548                       		lsl.w	#2,d0
000070E8 2271 0000                  		movea.l	(a1,d0.w),a1
000070EC 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
000070F2 5338 F792                  		subq.b	#1,($FFFFF792).w
000070F6 4278 FE20                  		clr.w	($FFFFFE20).w
000070FA 4238 FE1B                  		clr.b	($FFFFFE1B).w
000070FE 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00007104 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000710A 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
0000710E 6700                       		beq.s	SS_NoDebug	; if not, branch
00007110 0838 0006 F604             		btst	#iA,(Joypad|Held); is A	button pressed?
00007116 6700                       		beq.s	SS_NoDebug	; if not, branch
00007118 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000711E                            
0000711E                            SS_NoDebug:
0000711E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00007122 0000 0040                  		ori.b	#$40,d0
00007126 33C0 00C0 0004             		move.w	d0,($C00004).l
0000712C 6100 AD10                  		bsr.w	Pal_MakeWhite
00007130                            
00007130                            ; ---------------------------------------------------------------------------
00007130                            ; Main Special Stage loop
00007130                            ; ---------------------------------------------------------------------------
00007130                            
00007130                            SS_MainLoop:
00007130 6100 A1A4                  		bsr.w	PauseGame
00007134 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
0000713A 6100 BB5A                  		bsr.w	DelayProgram
0000713E 6100 F844                  		bsr.w	MoveSonicInDemo
00007142 31F8 F604 F602             		move.w	(Joypad),(SonicControl)
00007148 4EB9 0000 0000             		jsr	ObjectsLoad
0000714E 4EB9 0000 0000             		jsr	BuildSprites
00007154 4EB9 0000 0000             		jsr	SS_ShowLayout
0000715A 6100 0000                  		bsr.w	SS_BGAnimate
0000715E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00007162 6700                       		beq.s	SS_ChkEnd	; if not, branch
00007164 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00007168 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000716C                            
0000716C                            SS_ChkEnd:
0000716C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00007172 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00007176                            
00007176 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000717A 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
0000717E 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00007184 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
0000718A 6500                       		bcs.s	SS_End		; if not, branch
0000718C 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00007190                            
00007190                            SS_End:
00007190 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00007196 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000719C 4278 F794                  		clr.w	($FFFFF794).w
000071A0                            
000071A0                            SS_EndLoop:
000071A0 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000071A6 6100 BAEE                  		bsr.w	DelayProgram
000071AA 6100 F7D8                  		bsr.w	MoveSonicInDemo
000071AE 31F8 F604 F602             		move.w	(Joypad),(SonicControl)
000071B4 4EB9 0000 0000             		jsr	ObjectsLoad
000071BA 4EB9 0000 0000             		jsr	BuildSprites
000071C0 4EB9 0000 0000             		jsr	SS_ShowLayout
000071C6 6100 0000                  		bsr.w	SS_BGAnimate
000071CA 5378 F794                  		subq.w	#1,($FFFFF794).w
000071CE 6A00                       		bpl.s	loc_47D4
000071D0 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000071D6 6100 AD32                  		bsr.w	Pal_ToWhite
000071DA                            
000071DA                            loc_47D4:
000071DA 4A78 F614                  		tst.w	($FFFFF614).w
000071DE 66C0                       		bne.s	SS_EndLoop
000071E0                            
000071E0 46FC 2700                  		move	#$2700,sr
000071E4 4DF9 00C0 0004             		lea	($C00004).l,a6
000071EA 3CBC 8230                  		move.w	#$8230,(a6)
000071EE 3CBC 8407                  		move.w	#$8407,(a6)
000071F2 3CBC 9001                  		move.w	#$9001,(a6)
000071F6 6100 9FFE                  		bsr.w	ClearScreen
000071FA 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00007204 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000720A 6100 A1F2                  		bsr.w	NemDec
0000720E 4EB9 0000 0000             		jsr	Hud_Base
00007214 4278 C800                  		clr.w	($FFFFC800).w
00007218 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
00007220 46FC 2300                  		move	#$2300,sr
00007224 7011                       		moveq	#$11,d0
00007226 6100 AE5E                  		bsr.w	PalLoad2	; load results screen pallet
0000722A 7000                       		moveq	#0,d0
0000722C 6100 A342                  		bsr.w	LoadPLC2
00007230 701B                       		moveq	#$1B,d0
00007232 6100 A30A                  		bsr.w	LoadPLC		; load results screen patterns
00007236 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
0000723C 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00007242 3038 FE20                  		move.w	($FFFFFE20).w,d0
00007246 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
0000724A 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
0000724E 303C 0099                  		move.w	#$99,d0
00007252 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play end-of-level music
00007258 43F8 D000                  		lea	($FFFFD000).w,a1
0000725C 7000                       		moveq	#0,d0
0000725E 323C 07FF                  		move.w	#$7FF,d1
00007262                            
00007262                            SS_EndClrObjRam:
00007262 22C0                       		move.l	d0,(a1)+
00007264 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00007268                            
00007268 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
0000726E                            
0000726E                            SS_NormalExit:
0000726E 6100 A066                  		bsr.w	PauseGame
00007272 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00007278 6100 BA1C                  		bsr.w	DelayProgram
0000727C 4EB9 0000 0000             		jsr	ObjectsLoad
00007282 4EB9 0000 0000             		jsr	BuildSprites
00007288 6100 A320                  		bsr.w	RunPLC_RAM
0000728C 4A78 FE02                  		tst.w	($FFFFFE02).w
00007290 67DC                       		beq.s	SS_NormalExit
00007292 4AB8 F680                  		tst.l	($FFFFF680).w
00007296 66D6                       		bne.s	SS_NormalExit
00007298 303C 00CA                  		move.w	#$CA,d0
0000729C 6100 A032                  		bsr.w	PlaySound_Special ; play special stage exit sound
000072A0 6100 AC48                  		bsr.w	Pal_MakeFlash
000072A4 4E75                       		rts	
000072A6                            ; ===========================================================================
000072A6                            
000072A6                            SS_ToSegaScreen:
000072A6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
000072AC 4E75                       		rts
000072AE                            
000072AE                            ; ---------------------------------------------------------------------------
000072AE                            ; Special stage	background loading subroutine
000072AE                            ; ---------------------------------------------------------------------------
000072AE                            
000072AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072AE                            
000072AE                            
000072AE                            SS_BGLoad:				; XREF: SpecialStage
000072AE 43F9 00FF 0000             		lea	($FF0000).l,a1
000072B4 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000072BA 303C 4051                  		move.w	#$4051,d0
000072BE 6100 A41C                  		bsr.w	EniDec
000072C2 263C 5000 0001             		move.l	#$50000001,d3
000072C8 45F9 00FF 0080             		lea	($FF0080).l,a2
000072CE 7E06                       		moveq	#6,d7
000072D0                            
000072D0                            loc_48BE:
000072D0 2003                       		move.l	d3,d0
000072D2 7C03                       		moveq	#3,d6
000072D4 7800                       		moveq	#0,d4
000072D6 0C47 0003                  		cmpi.w	#3,d7
000072DA 6400                       		bcc.s	loc_48CC
000072DC 7801                       		moveq	#1,d4
000072DE                            
000072DE                            loc_48CC:
000072DE 7A07                       		moveq	#7,d5
000072E0                            
000072E0                            loc_48CE:
000072E0 224A                       		movea.l	a2,a1
000072E2 0A04 0001                  		eori.b	#1,d4
000072E6 6600                       		bne.s	loc_48E2
000072E8 0C47 0006                  		cmpi.w	#6,d7
000072EC 6600                       		bne.s	loc_48F2
000072EE 43F9 00FF 0000             		lea	($FF0000).l,a1
000072F4                            
000072F4                            loc_48E2:
000072F4 48E7 F800                  		movem.l	d0-d4,-(sp)
000072F8 7207                       		moveq	#7,d1
000072FA 7407                       		moveq	#7,d2
000072FC 6100 A050                  		bsr.w	ShowVDPGraphics
00007300 4CDF 001F                  		movem.l	(sp)+,d0-d4
00007304                            
00007304                            loc_48F2:
00007304 0680 0010 0000             		addi.l	#$100000,d0
0000730A 51CD FFD4                  		dbf	d5,loc_48CE
0000730E 0680 0380 0000             		addi.l	#$3800000,d0
00007314 0A04 0001                  		eori.b	#1,d4
00007318 51CE FFC4                  		dbf	d6,loc_48CC
0000731C 0683 1000 0000             		addi.l	#$10000000,d3
00007322 6A00                       		bpl.s	loc_491C
00007324 4843                       		swap	d3
00007326 0683 0000 C000             		addi.l	#$C000,d3
0000732C 4843                       		swap	d3
0000732E                            
0000732E                            loc_491C:
0000732E D4FC 0080                  		adda.w	#$80,a2
00007332 51CF FF9C                  		dbf	d7,loc_48BE
00007336 43F9 00FF 0000             		lea	($FF0000).l,a1
0000733C 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00007342 303C 4000                  		move.w	#$4000,d0
00007346 6100 A394                  		bsr.w	EniDec
0000734A 43F9 00FF 0000             		lea	($FF0000).l,a1
00007350 203C 4000 0003             		move.l	#$40000003,d0
00007356 723F                       		moveq	#$3F,d1
00007358 741F                       		moveq	#$1F,d2
0000735A 6100 9FF2                  		bsr.w	ShowVDPGraphics
0000735E 43F9 00FF 0000             		lea	($FF0000).l,a1
00007364 203C 5000 0003             		move.l	#$50000003,d0
0000736A 723F                       		moveq	#$3F,d1
0000736C 743F                       		moveq	#$3F,d2
0000736E 6100 9FDE                  		bsr.w	ShowVDPGraphics
00007372 4E75                       		rts	
00007374                            ; End of function SS_BGLoad
00007374                            
00007374                            ; ---------------------------------------------------------------------------
00007374                            ; Pallet cycling routine - special stage
00007374                            ; ---------------------------------------------------------------------------
00007374                            
00007374                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007374                            
00007374                            
00007374                            PalCycle_SS:				; XREF: VBlank_Sub0A; SpecialStage
00007374 4A78 F63A                  		tst.w	($FFFFF63A).w
00007378 6600                       		bne.s	locret_49E6
0000737A 5378 F79C                  		subq.w	#1,($FFFFF79C).w
0000737E 6A00                       		bpl.s	locret_49E6
00007380 4DF9 00C0 0004             		lea	($C00004).l,a6
00007386 3038 F79A                  		move.w	($FFFFF79A).w,d0
0000738A 5278 F79A                  		addq.w	#1,($FFFFF79A).w
0000738E 0240 001F                  		andi.w	#$1F,d0
00007392 E548                       		lsl.w	#2,d0
00007394 41F9 0000 0000             		lea	(byte_4A3C).l,a0
0000739A D0C0                       		adda.w	d0,a0
0000739C 1018                       		move.b	(a0)+,d0
0000739E 6A00                       		bpl.s	loc_4992
000073A0 303C 01FF                  		move.w	#$1FF,d0
000073A4                            
000073A4                            loc_4992:
000073A4 31C0 F79C                  		move.w	d0,($FFFFF79C).w
000073A8 7000                       		moveq	#0,d0
000073AA 1018                       		move.b	(a0)+,d0
000073AC 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
000073B0 43F9 0000 0000             		lea	(byte_4ABC).l,a1
000073B6 43F1 0000                  		lea	(a1,d0.w),a1
000073BA 303C 8200                  		move.w	#-$7E00,d0
000073BE 1019                       		move.b	(a1)+,d0
000073C0 3C80                       		move.w	d0,(a6)
000073C2 11D1 F616                  		move.b	(a1),($FFFFF616).w
000073C6 303C 8400                  		move.w	#-$7C00,d0
000073CA 1018                       		move.b	(a0)+,d0
000073CC 3C80                       		move.w	d0,(a6)
000073CE 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
000073D8 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000073E0 7000                       		moveq	#0,d0
000073E2 1018                       		move.b	(a0)+,d0
000073E4 6B00                       		bmi.s	loc_49E8
000073E6 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000073EC D2C0                       		adda.w	d0,a1
000073EE 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
000073F2 24D9                       		move.l	(a1)+,(a2)+
000073F4 24D9                       		move.l	(a1)+,(a2)+
000073F6 24D9                       		move.l	(a1)+,(a2)+
000073F8                            
000073F8                            locret_49E6:
000073F8 4E75                       		rts	
000073FA                            ; ===========================================================================
000073FA                            
000073FA                            loc_49E8:				; XREF: PalCycle_SS
000073FA 3238 F79E                  		move.w	($FFFFF79E).w,d1
000073FE 0C40 008A                  		cmpi.w	#$8A,d0
00007402 6500                       		bcs.s	loc_49F4
00007404 5241                       		addq.w	#1,d1
00007406                            
00007406                            loc_49F4:
00007406 C2FC 002A                  		mulu.w	#$2A,d1
0000740A 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00007410 D2C1                       		adda.w	d1,a1
00007412 0240 007F                  		andi.w	#$7F,d0
00007416 0880 0000                  		bclr	#0,d0
0000741A 6700                       		beq.s	loc_4A18
0000741C 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00007420 24D1                       		move.l	(a1),(a2)+
00007422 24E9 0004                  		move.l	4(a1),(a2)+
00007426 24E9 0008                  		move.l	8(a1),(a2)+
0000742A                            
0000742A                            loc_4A18:
0000742A D2FC 000C                  		adda.w	#$C,a1
0000742E 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00007432 0C40 000A                  		cmpi.w	#$A,d0
00007436 6500                       		bcs.s	loc_4A2E
00007438 0440 000A                  		subi.w	#$A,d0
0000743C 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00007440                            
00007440                            loc_4A2E:
00007440 3200                       		move.w	d0,d1
00007442 D040                       		add.w	d0,d0
00007444 D041                       		add.w	d1,d0
00007446 D2C0                       		adda.w	d0,a1
00007448 24D9                       		move.l	(a1)+,(a2)+
0000744A 34D9                       		move.w	(a1)+,(a2)+
0000744C 4E75                       		rts	
0000744E                            ; End of function PalCycle_SS
0000744E                            
0000744E                            ; ===========================================================================
0000744E 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
0000745E                            					; XREF: PalCycle_SS
0000745E 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
0000746E 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
0000747E FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
0000748E 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
0000749E 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
000074AE 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
000074BE FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
000074CE                            		even
000074CE 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
000074DC                            					; XREF: PalCycle_SS
000074DC                            		even
000074DC                            
000074DC                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00007524                            		even
00007524                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
000075F6                            		even
000075F6                            
000075F6                            ; ---------------------------------------------------------------------------
000075F6                            ; Subroutine to	make the special stage background animated
000075F6                            ; ---------------------------------------------------------------------------
000075F6                            
000075F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075F6                            
000075F6                            
000075F6                            SS_BGAnimate:				; XREF: SpecialStage
000075F6 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
000075FA 6600                       		bne.s	loc_4BF6
000075FC 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00007602 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007608                            
00007608                            loc_4BF6:
00007608 0C40 0008                  		cmpi.w	#8,d0
0000760C 6400                       		bcc.s	loc_4C4E
0000760E 0C40 0006                  		cmpi.w	#6,d0
00007612 6600                       		bne.s	loc_4C10
00007614 5278 F718                  		addq.w	#1,($FFFFF718).w
00007618 5278 F70C                  		addq.w	#1,($FFFFF70C).w
0000761C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007622                            
00007622                            loc_4C10:
00007622 7000                       		moveq	#0,d0
00007624 3038 F708                  		move.w	($FFFFF708).w,d0
00007628 4440                       		neg.w	d0
0000762A 4840                       		swap	d0
0000762C 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00007632 47F8 AA00                  		lea	($FFFFAA00).w,a3
00007636 7609                       		moveq	#9,d3
00007638                            
00007638                            loc_4C26:
00007638 302B 0002                  		move.w	2(a3),d0
0000763C 6100 B68A                  		bsr.w	CalcSine
00007640 7400                       		moveq	#0,d2
00007642 1419                       		move.b	(a1)+,d2
00007644 C1C2                       		muls.w	d2,d0
00007646 E080                       		asr.l	#8,d0
00007648 36C0                       		move.w	d0,(a3)+
0000764A 1419                       		move.b	(a1)+,d2
0000764C 4882                       		ext.w	d2
0000764E D55B                       		add.w	d2,(a3)+
00007650 51CB FFE6                  		dbf	d3,loc_4C26
00007654 47F8 AA00                  		lea	($FFFFAA00).w,a3
00007658 45F9 0000 0000             		lea	(byte_4CB8).l,a2
0000765E 6000                       		bra.s	loc_4C7E
00007660                            ; ===========================================================================
00007660                            
00007660                            loc_4C4E:				; XREF: SS_BGAnimate
00007660 0C40 000C                  		cmpi.w	#$C,d0
00007664 6600                       		bne.s	loc_4C74
00007666 5378 F718                  		subq.w	#1,($FFFFF718).w
0000766A 47F8 AB00                  		lea	($FFFFAB00).w,a3
0000766E 243C 0001 8000             		move.l	#$18000,d2
00007674 7206                       		moveq	#6,d1
00007676                            
00007676                            loc_4C64:
00007676 2013                       		move.l	(a3),d0
00007678 9082                       		sub.l	d2,d0
0000767A 26C0                       		move.l	d0,(a3)+
0000767C 0482 0000 2000             		subi.l	#$2000,d2
00007682 51C9 FFF2                  		dbf	d1,loc_4C64
00007686                            
00007686                            loc_4C74:
00007686 47F8 AB00                  		lea	($FFFFAB00).w,a3
0000768A 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00007690                            
00007690                            loc_4C7E:
00007690 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007694 3038 F718                  		move.w	($FFFFF718).w,d0
00007698 4440                       		neg.w	d0
0000769A 4840                       		swap	d0
0000769C 7600                       		moveq	#0,d3
0000769E 161A                       		move.b	(a2)+,d3
000076A0 3438 F70C                  		move.w	($FFFFF70C).w,d2
000076A4 4442                       		neg.w	d2
000076A6 0242 00FF                  		andi.w	#$FF,d2
000076AA E54A                       		lsl.w	#2,d2
000076AC                            
000076AC                            loc_4C9A:
000076AC 301B                       		move.w	(a3)+,d0
000076AE 544B                       		addq.w	#2,a3
000076B0 7200                       		moveq	#0,d1
000076B2 121A                       		move.b	(a2)+,d1
000076B4 5341                       		subq.w	#1,d1
000076B6                            
000076B6                            loc_4CA4:
000076B6 2380 2000                  		move.l	d0,(a1,d2.w)
000076BA 5842                       		addq.w	#4,d2
000076BC 0242 03FC                  		andi.w	#$3FC,d2
000076C0 51C9 FFF4                  		dbf	d1,loc_4CA4
000076C4 51CB FFE6                  		dbf	d3,loc_4C9A
000076C8 4E75                       		rts	
000076CA                            ; End of function SS_BGAnimate
000076CA                            
000076CA                            ; ===========================================================================
000076CA 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
000076D6                            		even
000076D6 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
000076DE                            		even
000076DE 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
000076F2                            		even
000076F2                            					; XREF: SS_BGAnimate
000076F2                            ; ===========================================================================
000076F2                            
000076F2                            ; ---------------------------------------------------------------------------
000076F2                            ; Continue screen
000076F2                            ; ---------------------------------------------------------------------------
000076F2                            
000076F2                            ContinueScreen:				; XREF: GameModeArray
000076F2 6100 A6CC                  		bsr.w	Pal_FadeFrom
000076F6 46FC 2700                  		move	#$2700,sr	; disable interrupts
000076FA 3038 F60C                  		move.w	($FFFFF60C).w,d0
000076FE 0200 00BF                  		andi.b	#$BF,d0
00007702 33C0 00C0 0004             		move.w	d0,($C00004).l
00007708 4DF9 00C0 0004             		lea	($C00004).l,a6
0000770E 3CBC 8004                  		move.w	#$8004,(a6)
00007712 3CBC 8700                  		move.w	#$8700,(a6)
00007716 6100 9ADE                  		bsr.w	ClearScreen
0000771A 43F8 D000                  		lea	($FFFFD000).w,a1
0000771E 7000                       		moveq	#0,d0
00007720 323C 07FF                  		move.w	#$7FF,d1
00007724                            
00007724                            Cont_ClrObjRam:
00007724 22C0                       		move.l	d0,(a1)+
00007726 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000772A                            
0000772A                            		; load title card patterns
00007734 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0
0000773A 6100 9CC2                  		bsr.w	NemDec
0000773E                            
0000773E                            		; load Sonic patterns
00007748 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0
0000774E 6100 9CAE                  		bsr.w	NemDec
00007752                            		
00007752                            		; load continue screen patterns
0000775C 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 
00007762 6100 9C9A                  		bsr.w	NemDec
00007766                            
00007766 720A                       		moveq	#10,d1
00007768 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
0000776E 7012                       		moveq	#$12,d0
00007770 6100 A8F8                  		bsr.w	PalLoad1	; load continue	screen pallet
00007774 103C 0094                  		move.b	#$94,d0
00007778 6100 9B50                  		bsr.w	PlaySound	; play continue	music
0000777C 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00007782 42B8 F700                  		clr.l	($FFFFF700).w
00007786 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
0000778E 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00007794 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
0000779A 11FC 0080 D080             		move.b	#$80,($FFFFD080).w ;
000077A0 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000077A6 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000077AC 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000077B2 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000077B8 4EB9 0000 0000             		jsr	ObjectsLoad
000077BE 4EB9 0000 0000             		jsr	BuildSprites
000077C4 3038 F60C                  		move.w	($FFFFF60C).w,d0
000077C8 0000 0040                  		ori.b	#$40,d0
000077CC 33C0 00C0 0004             		move.w	d0,($C00004).l
000077D2 6100 A546                  		bsr.w	Pal_FadeTo
000077D6                            
000077D6                            ; ---------------------------------------------------------------------------
000077D6                            ; Continue screen main loop
000077D6                            ; ---------------------------------------------------------------------------
000077D6                            
000077D6                            Cont_MainLoop:
000077D6 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000077DC 6100 B4B8                  		bsr.w	DelayProgram
000077E0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000077E6 6400                       		bcc.s	loc_4DF2
000077E8 46FC 2700                  		move	#$2700,sr		; disable interrupts
000077EC 3238 F614                  		move.w	($FFFFF614).w,d1
000077F0 82FC 003C                  		divu.w	#$3C,d1
000077F4 0281 0000 000F             		andi.l	#$F,d1
000077FA 4EB9 0000 0000             		jsr	ContScrCounter
00007800 46FC 2300                  		move	#$2300,sr		; enable interrupts
00007804                            
00007804                            loc_4DF2:
00007804 4EB9 0000 0000             		jsr	ObjectsLoad
0000780A 4EB9 0000 0000             		jsr	BuildSprites
00007810 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w	; has Sonic run off screen?
00007816 6400                       		bcc.s	Cont_GotoLevel		; if yes, branch
00007818 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000781E 64B6                       		bcc.s	Cont_MainLoop
00007820 4A78 F614                  		tst.w	($FFFFF614).w
00007824 6600 FFB0                  		bne.w	Cont_MainLoop
00007828 11FC 0000 F600             		move.b	#0,($FFFFF600).w	; go to Sega screen
0000782E 4E75                       		rts	
00007830                            ; ===========================================================================
00007830                            
00007830                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00007830 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00007836 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000783C 7000                       		moveq	#0,d0
0000783E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00007842 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00007846 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000784A 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
0000784E 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00007852 4E75                       		rts	
00007854                            ; ===========================================================================
00007854                            
00007854                            ; ---------------------------------------------------------------------------
00007854                            ; Object 80 - Continue screen elements
00007854                            ; ---------------------------------------------------------------------------
00007854                            
00007854                            Obj80:					; XREF: Obj_Index
00007854 7000                       		moveq	#0,d0
00007856 1028 0024                  		move.b	$24(a0),d0
0000785A 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
0000785E 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00007862                            ; ===========================================================================
00007862 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00007864 0000                       		dc.w Obj80_Display-Obj80_Index
00007866 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00007868 0000                       		dc.w Obj80_ChkType-Obj80_Index
0000786A                            ; ===========================================================================
0000786A                            
0000786A                            Obj80_Main:				; XREF: Obj80_Index
0000786A 5428 0024                  		addq.b	#2,$24(a0)
0000786E 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00007876 317C 8500 0002             		move.w	#$8500,2(a0)
0000787C 117C 0000 0001             		move.b	#0,1(a0)
00007882 117C 003C 0019             		move.b	#$3C,$19(a0)
00007888 317C 0120 0008             		move.w	#$120,8(a0)
0000788E 317C 00C0 000A             		move.w	#$C0,$A(a0)
00007894 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
0000789A                            
0000789A                            Obj80_Display:				; XREF: Obj80_Index
0000789A 4EF9 0000 0000             		jmp	DisplaySprite
000078A0                            ; ===========================================================================
000078A0                            Obj80_MiniSonicPos:
000078A0 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000078B2 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000078BE                            ; ===========================================================================
000078BE                            
000078BE                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000078BE 2248                       		movea.l	a0,a1
000078C0 45F9 0000 78A0             		lea	(Obj80_MiniSonicPos).l,a2
000078C6 7200                       		moveq	#0,d1
000078C8 1238 FE18                  		move.b	($FFFFFE18).w,d1
000078CC 5501                       		subq.b	#2,d1
000078CE 6400                       		bcc.s	loc_4EC4
000078D0 4EF9 0000 0000             		jmp	DeleteObject
000078D6                            ; ===========================================================================
000078D6                            
000078D6                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
000078D6 7601                       		moveq	#1,d3
000078D8 0C01 000E                  		cmpi.b	#$E,d1
000078DC 6500                       		bcs.s	loc_4ED0
000078DE 7600                       		moveq	#0,d3
000078E0 720E                       		moveq	#$E,d1
000078E2                            
000078E2                            loc_4ED0:
000078E2 1401                       		move.b	d1,d2
000078E4 0202 0001                  		andi.b	#1,d2
000078E8                            
000078E8                            Obj80_MiniSonLoop:
000078E8 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
000078EC 335A 0008                  		move.w	(a2)+,8(a1)
000078F0 4A02                       		tst.b	d2
000078F2 6700                       		beq.s	loc_4EEA
000078F4 0469 000A 0008             		subi.w	#$A,8(a1)
000078FA                            
000078FA                            loc_4EEA:
000078FA 337C 00D0 000A             		move.w	#$D0,$A(a1)
00007900 137C 0006 001A             		move.b	#6,$1A(a1)
00007906 137C 0006 0024             		move.b	#6,$24(a1)
0000790C 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00007914 337C 8551 0002             		move.w	#$8551,2(a1)
0000791A 137C 0000 0001             		move.b	#0,1(a1)
00007920 43E9 0040                  		lea	$40(a1),a1
00007924 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00007928 43E9 FFC0                  		lea	-$40(a1),a1
0000792C 1343 0028                  		move.b	d3,$28(a1)
00007930                            
00007930                            Obj80_ChkType:				; XREF: Obj80_Index
00007930 4A28 0028                  		tst.b	$28(a0)
00007934 6700                       		beq.s	loc_4F40
00007936 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000793C 6500                       		bcs.s	loc_4F40
0000793E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00007942 0200 0001                  		andi.b	#1,d0
00007946 6600                       		bne.s	loc_4F40
00007948 4A78 D010                  		tst.w	($FFFFD010).w
0000794C 6600                       		bne.s	Obj80_Delete
0000794E 4E75                       		rts	
00007950                            ; ===========================================================================
00007950                            
00007950                            loc_4F40:				; XREF: Obj80_ChkType
00007950 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00007954 0200 000F                  		andi.b	#$F,d0
00007958 6600                       		bne.s	Obj80_Display2
0000795A 0868 0000 001A             		bchg	#0,$1A(a0)
00007960                            
00007960                            Obj80_Display2:
00007960 4EF9 0000 0000             		jmp	DisplaySprite
00007966                            ; ===========================================================================
00007966                            
00007966                            Obj80_Delete:				; XREF: Obj80_ChkType
00007966 4EF9 0000 0000             		jmp	DeleteObject
0000796C                            ; ===========================================================================
0000796C                            
0000796C                            ; ---------------------------------------------------------------------------
0000796C                            ; Object 81 - Sonic on the continue screen
0000796C                            ; ---------------------------------------------------------------------------
0000796C                            
0000796C                            Obj81:					; XREF: Obj_Index
0000796C 7000                       		moveq	#0,d0
0000796E 1028 0024                  		move.b	$24(a0),d0
00007972 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00007976 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
0000797A 4EF9 0000 0000             		jmp	DisplaySprite
00007980                            ; ===========================================================================
00007980 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00007982 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00007984 0000                       		dc.w Obj81_Animate-Obj81_Index
00007986 0000                       		dc.w Obj81_Run-Obj81_Index
00007988                            ; ===========================================================================
00007988                            
00007988                            Obj81_Main:				; XREF: Obj81_Index
00007988 5428 0024                  		addq.b	#2,$24(a0)
0000798C 317C 00A0 0008             		move.w	#$A0,8(a0)
00007992 317C 00C0 000C             		move.w	#$C0,$C(a0)
00007998 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000079A0 317C 0780 0002             		move.w	#$780,2(a0)
000079A6 117C 0004 0001             		move.b	#4,1(a0)
000079AC 117C 0002 0018             		move.b	#2,$18(a0)
000079B2 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000079B8 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000079BE                            
000079BE                            Obj81_ChkLand:				; XREF: Obj81_Index
000079BE 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000079C4 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000079C6 5428 0024                  		addq.b	#2,$24(a0)
000079CA 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
000079CE 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000079D6 317C 8500 0002             		move.w	#$8500,2(a0)
000079DC 117C 0000 001C             		move.b	#0,$1C(a0)
000079E2 6000                       		bra.s	Obj81_Animate
000079E4                            ; ===========================================================================
000079E4                            
000079E4                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
000079E4 4EB9 0000 0000             		jsr	SpeedToPos
000079EA 4EB9 0000 0000             		jsr	Sonic_Animate
000079F0 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000079F6                            ; ===========================================================================
000079F6                            
000079F6                            Obj81_Animate:				; XREF: Obj81_Index
000079F6 4A38 F605                  		tst.b	(Joypad|Press)	; is any button	pressed?
000079FA 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
000079FC 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00007A02 4EF9 0000 0000             		jmp	AnimateSprite
00007A08                            ; ===========================================================================
00007A08                            
00007A08                            Obj81_GetUp:				; XREF: Obj81_Animate
00007A08 5428 0024                  		addq.b	#2,$24(a0)
00007A0C 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00007A14 317C 0780 0002             		move.w	#$780,2(a0)
00007A1A 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00007A20 4268 0014                  		clr.w	$14(a0)
00007A24 5168 000C                  		subq.w	#8,$C(a0)
00007A28 103C 00E0                  		move.b	#$E0,d0
00007A2C 6100 98A2                  		bsr.w	PlaySound_Special ; fade out music
00007A30                            
00007A30                            Obj81_Run:				; XREF: Obj81_Index
00007A30 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00007A36 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00007A38 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00007A3E 6000                       		bra.s	Obj81_ShowRun
00007A40                            ; ===========================================================================
00007A40                            
00007A40                            Obj81_AddSpeed:				; XREF: Obj81_Run
00007A40 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00007A46                            
00007A46                            Obj81_ShowRun:				; XREF: Obj81_Run
00007A46 4EB9 0000 0000             		jsr	SpeedToPos
00007A4C 4EB9 0000 0000             		jsr	Sonic_Animate
00007A52 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00007A58                            ; ===========================================================================
00007A58                            Ani_obj81:
00007A58                            	include "_anim\obj81.asm"
00007A58                            ; ---------------------------------------------------------------------------
00007A58                            ; Animation script - Sonic on the continue screen
00007A58                            ; ---------------------------------------------------------------------------
00007A58 0000                       		dc.w byte_504A-Ani_obj81
00007A5A 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00007A66 00                         		even
00007A66 00                         		even
00007A66                            
00007A66                            ; ---------------------------------------------------------------------------
00007A66                            ; Sprite mappings - Continue screen
00007A66                            ; ---------------------------------------------------------------------------
00007A66                            Map_obj80:
00007A66                            	include "_maps\obj80.asm"
00007A66                            ; ---------------------------------------------------------------------------
00007A66                            ; Sprite mappings - Continue screen
00007A66                            ; ---------------------------------------------------------------------------
00007A66 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00007A6A 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00007A6E 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00007A72 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00007A76 0B                         byte_5066:	dc.b $B
00007A77 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00007A7C F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00007A81 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00007A86 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00007A8B F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00007A90 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00007A95 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00007A9A F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00007A9F 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00007AA4 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00007AA9 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00007AAE 03                         byte_509E:	dc.b 3
00007AAF 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00007AB4 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00007AB9 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00007ABE 03                         byte_50AE:	dc.b 3
00007ABF 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00007AC4 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00007AC9 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00007ACE 03                         byte_50BE:	dc.b 3
00007ACF 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00007AD4 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00007AD9 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00007ADE 02                         byte_50CE:	dc.b 2
00007ADF 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00007AE4 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00007AE9 01                         byte_50D9:	dc.b 1
00007AEA 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00007AEF 01                         byte_50DF:	dc.b 1
00007AF0 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00007AF6 00                         		even
00007AF6 00                         		even
00007AF6                            
00007AF6                            ; ===========================================================================
00007AF6                            ; ---------------------------------------------------------------------------
00007AF6                            ; Ending sequence in Green Hill	Zone
00007AF6                            ; ---------------------------------------------------------------------------
00007AF6                            
00007AF6                            EndingSequence:				; XREF: GameModeArray
00007AF6 103C 00E4                  		move.b	#$E4,d0
00007AFA 6100 97D4                  		bsr.w	PlaySound_Special ; stop music
00007AFE 6100 A2C0                  		bsr.w	Pal_FadeFrom
00007B02 43F8 D000                  		lea	($FFFFD000).w,a1
00007B06 7000                       		moveq	#0,d0
00007B08 323C 07FF                  		move.w	#$7FF,d1
00007B0C                            
00007B0C                            End_ClrObjRam:
00007B0C 22C0                       		move.l	d0,(a1)+
00007B0E 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00007B12                            
00007B12 43F8 F628                  		lea	($FFFFF628).w,a1
00007B16 7000                       		moveq	#0,d0
00007B18 323C 0015                  		move.w	#$15,d1
00007B1C                            
00007B1C                            End_ClrRam:
00007B1C 22C0                       		move.l	d0,(a1)+
00007B1E 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00007B22                            
00007B22 43F8 F700                  		lea	($FFFFF700).w,a1
00007B26 7000                       		moveq	#0,d0
00007B28 323C 003F                  		move.w	#$3F,d1
00007B2C                            
00007B2C                            End_ClrRam2:
00007B2C 22C0                       		move.l	d0,(a1)+
00007B2E 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00007B32                            
00007B32 43F8 FE60                  		lea	($FFFFFE60).w,a1
00007B36 7000                       		moveq	#0,d0
00007B38 323C 0047                  		move.w	#$47,d1
00007B3C                            
00007B3C                            End_ClrRam3:
00007B3C 22C0                       		move.l	d0,(a1)+
00007B3E 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00007B42                            
00007B42 46FC 2700                  		move	#$2700,sr
00007B46 3038 F60C                  		move.w	($FFFFF60C).w,d0
00007B4A 0200 00BF                  		andi.b	#$BF,d0
00007B4E 33C0 00C0 0004             		move.w	d0,($C00004).l
00007B54 6100 96A0                  		bsr.w	ClearScreen
00007B58 4DF9 00C0 0004             		lea	($C00004).l,a6
00007B5E 3CBC 8B03                  		move.w	#$8B03,(a6)
00007B62 3CBC 8230                  		move.w	#$8230,(a6)
00007B66 3CBC 8407                  		move.w	#$8407,(a6)
00007B6A 3CBC 857C                  		move.w	#$857C,(a6)
00007B6E 3CBC 9001                  		move.w	#$9001,(a6)
00007B72 3CBC 8004                  		move.w	#$8004,(a6)
00007B76 3CBC 8720                  		move.w	#$8720,(a6)
00007B7A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00007B80 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00007B84 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00007B8A 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00007B90 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00007B96 6700                       		beq.s	End_LoadData	; if yes, branch
00007B98 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00007B9E                            
00007B9E                            End_LoadData:
00007B9E 701C                       		moveq	#$1C,d0
00007BA0 6100 9B08                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00007BA4 4EB9 0000 0000             		jsr	Hud_Base
00007BAA 6100 0000                  		bsr.w	LevelSizeLoad
00007BAE 6100 0000                  		bsr.w	DeformBgLayer
00007BB2 08F8 0002 F754             		bset	#2,($FFFFF754).w
00007BB8 6100 0000                  		bsr.w	MainLoadBlockLoad
00007BBC 6100 0000                  		bsr.w	LoadTilesFromStart
00007BC0 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w	; load collision index
00007BC8 46FC 2300                  		move	#$2300,sr		; enable interrupts
00007BCC 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0	; load extra flower patterns
00007BD2 43F8 9400                  		lea	($FFFF9400).w,a1	; RAM address to buffer the patterns
00007BD6 6100 9C82                  		bsr.w	KosDec
00007BDA 7003                       		moveq	#3,d0
00007BDC 6100 A48C                  		bsr.w	PalLoad1		; load Sonic's pallet
00007BE0 303C 0097                  		move.w	#$97,d0
00007BE4 6100 96E4                  		bsr.w	PlaySound		; play ending sequence music
00007BE8 0838 0000 F604             		btst	#iUp,(Joypad|Held)	; is button A pressed?
00007BEE 6700                       		beq.s	End_LoadSonic		; if not, branch
00007BF0 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w	; enable debug mode
00007BF6                            
00007BF6                            End_LoadSonic:
00007BF6 11FC 0001 D000             		move.b	#1,($FFFFD000).w	; load	Sonic object
00007BFC 08F8 0000 D022             		bset	#0,($FFFFD022).w	; make	Sonic face left
00007C02 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w	; lock	controls
00007C08 31FC 0400 F602             		move.w	#(Left)<<8,(SonicControl) ; move Sonic to the left
00007C0E 31FC F800 D014             		move.w	#$F800,($FFFFD014).w	; set Sonic's speed
00007C14 11FC 0021 D040             		move.b	#$21,($FFFFD040).w	; load HUD object
00007C1A 4EB9 0000 0000             		jsr	ObjPosLoad
00007C20 4EB9 0000 0000             		jsr	ObjectsLoad
00007C26 4EB9 0000 0000             		jsr	BuildSprites
00007C2C 7000                       		moveq	#0,d0
00007C2E 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00007C32 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00007C36 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00007C3A 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00007C3E 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00007C42 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00007C46 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00007C4A 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00007C4E 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00007C52 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00007C56 6100 EE74                  		bsr.w	OscillateNumInit
00007C5A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00007C60 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00007C66 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00007C6C 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00007C72 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00007C78 6100 B01C                  		bsr.w	DelayProgram
00007C7C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00007C80 0000 0040                  		ori.b	#$40,d0
00007C84 33C0 00C0 0004             		move.w	d0,($C00004).l
00007C8A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00007C90 6100 A088                  		bsr.w	Pal_FadeTo
00007C94                            
00007C94                            ; ---------------------------------------------------------------------------
00007C94                            ; Main ending sequence loop
00007C94                            ; ---------------------------------------------------------------------------
00007C94                            
00007C94                            End_MainLoop:
00007C94 6100 9640                  		bsr.w	PauseGame
00007C98 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00007C9E 6100 AFF6                  		bsr.w	DelayProgram
00007CA2 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00007CA6 6100 0000                  		bsr.w	End_MoveSonic
00007CAA 4EB9 0000 0000             		jsr	ObjectsLoad
00007CB0 6100 0000                  		bsr.w	DeformBgLayer
00007CB4 4EB9 0000 0000             		jsr	BuildSprites
00007CBA 4EB9 0000 0000             		jsr	ObjPosLoad
00007CC0 6100 9C38                  		bsr.w	PalCycle_Load
00007CC4 6100 EE5C                  		bsr.w	OscillateNumDo
00007CC8 6100 EEE8                  		bsr.w	ChangeRingFrame
00007CCC 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w	; is scene number $18 (ending)?
00007CD2 6700                       		beq.s	loc_52DA		; if yes, branch
00007CD4 11FC 001C F600             		move.b	#$1C,($FFFFF600).w	; set scene to $1C (credits)
00007CDA 103C 009D                  		move.b	#$9D,d0
00007CDE 6100 95F0                  		bsr.w	PlaySound_Special	; play credits music
00007CE2 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w	; set credits index number to 0
00007CE8 4E75                       		rts
00007CEA                            ; ===========================================================================
00007CEA                            
00007CEA                            loc_52DA:
00007CEA 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00007CEE 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00007CF2                            
00007CF2 4278 FE02                  		clr.w	($FFFFFE02).w
00007CF6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00007CFC 4278 F794                  		clr.w	($FFFFF794).w
00007D00                            
00007D00                            End_AllEmlds:				; XREF: loc_5334
00007D00 6100 95D4                  		bsr.w	PauseGame
00007D04 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00007D0A 6100 AF8A                  		bsr.w	DelayProgram
00007D0E 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00007D12 6100 0000                  		bsr.w	End_MoveSonic
00007D16 4EB9 0000 0000             		jsr	ObjectsLoad
00007D1C 6100 0000                  		bsr.w	DeformBgLayer
00007D20 4EB9 0000 0000             		jsr	BuildSprites
00007D26 4EB9 0000 0000             		jsr	ObjPosLoad
00007D2C 6100 EDF4                  		bsr.w	OscillateNumDo
00007D30 6100 EE80                  		bsr.w	ChangeRingFrame
00007D34 5378 F794                  		subq.w	#1,($FFFFF794).w
00007D38 6A00                       		bpl.s	loc_5334
00007D3A 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00007D40 6100 A1C8                  		bsr.w	Pal_ToWhite
00007D44                            
00007D44                            loc_5334:
00007D44 4A78 FE02                  		tst.w	($FFFFFE02).w
00007D48 6700 FFB6                  		beq.w	End_AllEmlds
00007D4C 4278 FE02                  		clr.w	($FFFFFE02).w
00007D50 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00007D56 4BF9 00C0 0004             		lea	($C00004).l,a5
00007D5C 4DF9 00C0 0000             		lea	($C00000).l,a6
00007D62 47F8 F700                  		lea	($FFFFF700).w,a3
00007D66 49F8 A400                  		lea	($FFFFA400).w,a4
00007D6A 343C 4000                  		move.w	#$4000,d2
00007D6E 6100 0000                  		bsr.w	LoadTilesFromStart2
00007D72 7013                       		moveq	#$13,d0
00007D74 6100 A2F4                  		bsr.w	PalLoad1	; load ending pallet
00007D78 6100 A0C4                  		bsr.w	Pal_MakeWhite
00007D7C 6000 FF16                  		bra.w	End_MainLoop
00007D80                            
00007D80                            ; ---------------------------------------------------------------------------
00007D80                            ; Subroutine controlling Sonic on the ending sequence
00007D80                            ; ---------------------------------------------------------------------------
00007D80                            
00007D80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D80                            
00007D80                            
00007D80                            End_MoveSonic:				; XREF: End_MainLoop
00007D80 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00007D84 6600                       		bne.s	End_MoveSonic2
00007D86 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w	; has Sonic passed $90 on y-axis?
00007D8C 6400                       		bcc.s	End_MoveSonExit		; if not, branch
00007D8E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00007D92 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w		; lock player's controls
00007D98 31FC 0800 F602             		move.w	#(Right)<<8,(SonicControl)	; move Sonic to the right
00007D9E 4E75                       		rts
00007DA0                            ; ===========================================================================
00007DA0                            
00007DA0                            End_MoveSonic2:				; XREF: End_MoveSonic
00007DA0 5500                       		subq.b	#2,d0
00007DA2 6600                       		bne.s	End_MoveSonic3
00007DA4 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w	; has Sonic passed $A0 on y-axis?
00007DAA 6500                       		bcs.s	End_MoveSonExit		; if not, branch
00007DAC 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00007DB0 7000                       		moveq	#0,d0
00007DB2 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00007DB6 31C0 F602                  		move.w	d0,(SonicControl)	; stop Sonic moving
00007DBA 31C0 D014                  		move.w	d0,($FFFFD014).w
00007DBE 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00007DC4 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00007DCA 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w	; use "standing" animation
00007DD0 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00007DD6 4E75                       		rts	
00007DD8                            ; ===========================================================================
00007DD8                            
00007DD8                            End_MoveSonic3:				; XREF: End_MoveSonic
00007DD8 5500                       		subq.b	#2,d0
00007DDA 6600                       		bne.s	End_MoveSonExit
00007DDC 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00007DE0 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00007DE6 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00007DEC 4278 D024                  		clr.w	($FFFFD024).w
00007DF0                            
00007DF0                            End_MoveSonExit:
00007DF0 4E75                       		rts	
00007DF2                            ; End of function End_MoveSonic
00007DF2                            
00007DF2                            ; ===========================================================================
00007DF2                            ; ---------------------------------------------------------------------------
00007DF2                            ; Object 87 - Sonic on ending sequence
00007DF2                            ; ---------------------------------------------------------------------------
00007DF2                            
00007DF2                            Obj87:					; XREF: Obj_Index
00007DF2 7000                       		moveq	#0,d0
00007DF4 1028 0025                  		move.b	$25(a0),d0
00007DF8 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00007DFC 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00007E00 4EF9 0000 0000             		jmp	DisplaySprite
00007E06                            ; ===========================================================================
00007E06 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00007E0A 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00007E0E 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00007E12 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00007E16 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00007E1A                            ; ===========================================================================
00007E1A                            
00007E1A                            Obj87_Main:				; XREF: Obj87_Index
00007E1A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00007E20 6700                       		beq.s	Obj87_Main2	; if yes, branch
00007E22 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00007E28 317C 00D8 0030             		move.w	#$D8,$30(a0)
00007E2E 4E75                       		rts	
00007E30                            ; ===========================================================================
00007E30                            
00007E30                            Obj87_Main2:				; XREF: Obj87_Main
00007E30 5428 0025                  		addq.b	#2,$25(a0)
00007E34 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00007E3C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00007E42 117C 0004 0001             		move.b	#4,1(a0)
00007E48 4228 0022                  		clr.b	$22(a0)
00007E4C 117C 0002 0018             		move.b	#2,$18(a0)
00007E52 117C 0000 001A             		move.b	#0,$1A(a0)
00007E58 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00007E5E                            
00007E5E                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00007E5E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00007E62 6600                       		bne.s	Obj87_Wait
00007E64 5428 0025                  		addq.b	#2,$25(a0)
00007E68 317C 0001 001C             		move.w	#1,$1C(a0)
00007E6E 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00007E74                            
00007E74                            Obj87_Wait:
00007E74 4E75                       		rts	
00007E76                            ; ===========================================================================
00007E76                            
00007E76                            Obj87_LookUp:				; XREF: Obj87_Index
00007E76 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00007E7E 6600                       		bne.s	locret_5480
00007E80 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00007E86 317C 005A 0030             		move.w	#$5A,$30(a0)
00007E8C 5428 0025                  		addq.b	#2,$25(a0)
00007E90                            
00007E90                            locret_5480:
00007E90 4E75                       		rts	
00007E92                            ; ===========================================================================
00007E92                            
00007E92                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00007E92 5368 0030                  		subq.w	#1,$30(a0)
00007E96 6600                       		bne.s	Obj87_Wait2
00007E98 43F8 D400                  		lea	($FFFFD400).w,a1
00007E9C 323C 00FF                  		move.w	#$FF,d1
00007EA0                            
00007EA0                            Obj87_ClrLoop:
00007EA0 4299                       		clr.l	(a1)+
00007EA2 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00007EA6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00007EAC 5428 0025                  		addq.b	#2,$25(a0)
00007EB0 117C 0001 001C             		move.b	#1,$1C(a0)
00007EB6 317C 003C 0030             		move.w	#$3C,$30(a0)
00007EBC                            
00007EBC                            Obj87_Wait2:
00007EBC 4E75                       		rts	
00007EBE                            ; ===========================================================================
00007EBE                            
00007EBE                            Obj87_MakeLogo:				; XREF: Obj87_Index
00007EBE 5368 0030                  		subq.w	#1,$30(a0)
00007EC2 6600                       		bne.s	Obj87_Wait3
00007EC4 5428 0025                  		addq.b	#2,$25(a0)
00007EC8 317C 00B4 0030             		move.w	#$B4,$30(a0)
00007ECE 117C 0002 001C             		move.b	#2,$1C(a0)
00007ED4 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00007EDA                            
00007EDA                            Obj87_Wait3:
00007EDA 4E75                       		rts	
00007EDC                            ; ===========================================================================
00007EDC                            
00007EDC                            Obj87_Animate:				; XREF: Obj87_Index
00007EDC 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00007EE2 4EF9 0000 0000             		jmp	AnimateSprite
00007EE8                            ; ===========================================================================
00007EE8                            
00007EE8                            Obj87_Leap:				; XREF: Obj87_Index
00007EE8 5368 0030                  		subq.w	#1,$30(a0)
00007EEC 6600                       		bne.s	Obj87_Wait4
00007EEE 5428 0025                  		addq.b	#2,$25(a0)
00007EF2 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00007EFA 317C 03E1 0002             		move.w	#$3E1,2(a0)
00007F00 117C 0004 0001             		move.b	#4,1(a0)
00007F06 4228 0022                  		clr.b	$22(a0)
00007F0A 117C 0002 0018             		move.b	#2,$18(a0)
00007F10 117C 0005 001A             		move.b	#5,$1A(a0)
00007F16 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00007F1C 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00007F22 60B8                       		bra.s	Obj87_Animate
00007F24                            ; ===========================================================================
00007F24                            
00007F24                            Obj87_Wait4:				; XREF: Obj87_Leap
00007F24 4E75                       		rts	
00007F26                            ; ===========================================================================
00007F26                            Ani_obj87:
00007F26                            	include "_anim\obj87.asm"
00007F26                            ; ---------------------------------------------------------------------------
00007F26                            ; Animation script - Sonic on the ending sequence
00007F26                            ; ---------------------------------------------------------------------------
00007F26 0000                       		dc.w byte_551C-Ani_obj87
00007F28 0000                       		dc.w byte_552A-Ani_obj87
00007F2A 0000                       		dc.w byte_5534-Ani_obj87
00007F2C 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00007F3A 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00007F44 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00007F4C                            		even
00007F4C                            		even
00007F4C                            
00007F4C                            ; ===========================================================================
00007F4C                            ; ---------------------------------------------------------------------------
00007F4C                            ; Object 88 - chaos emeralds on	the ending sequence
00007F4C                            ; ---------------------------------------------------------------------------
00007F4C                            
00007F4C                            Obj88:					; XREF: Obj_Index
00007F4C 7000                       		moveq	#0,d0
00007F4E 1028 0024                  		move.b	$24(a0),d0
00007F52 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00007F56 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00007F5A 4EF9 0000 0000             		jmp	DisplaySprite
00007F60                            ; ===========================================================================
00007F60 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00007F62 0000                       		dc.w Obj88_Move-Obj88_Index
00007F64                            ; ===========================================================================
00007F64                            
00007F64                            Obj88_Main:				; XREF: Obj88_Index
00007F64 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00007F6A 6700                       		beq.s	Obj88_Main2
00007F6C 588F                       		addq.l	#4,sp
00007F6E 4E75                       		rts	
00007F70                            ; ===========================================================================
00007F70                            
00007F70                            Obj88_Main2:				; XREF: Obj88_Main
00007F70 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00007F76 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00007F7C 2248                       		movea.l	a0,a1
00007F7E 7600                       		moveq	#0,d3
00007F80 7401                       		moveq	#1,d2
00007F82 7205                       		moveq	#5,d1
00007F84                            
00007F84                            Obj88_MainLoop:
00007F84 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00007F88 5429 0024                  		addq.b	#2,$24(a1)
00007F8C 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00007F94 337C 03C5 0002             		move.w	#$3C5,2(a1)
00007F9A 137C 0004 0001             		move.b	#4,1(a1)
00007FA0 137C 0001 0018             		move.b	#1,$18(a1)
00007FA6 3368 0008 0038             		move.w	8(a0),$38(a1)
00007FAC 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00007FB2 1342 001C                  		move.b	d2,$1C(a1)
00007FB6 1342 001A                  		move.b	d2,$1A(a1)
00007FBA 5202                       		addq.b	#1,d2
00007FBC 1343 0026                  		move.b	d3,$26(a1)
00007FC0 0603 002A                  		addi.b	#$2A,d3
00007FC4 43E9 0040                  		lea	$40(a1),a1
00007FC8 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00007FCC                            
00007FCC                            Obj88_Move:				; XREF: Obj88_Index
00007FCC 3028 003E                  		move.w	$3E(a0),d0
00007FD0 D168 0026                  		add.w	d0,$26(a0)
00007FD4 1028 0026                  		move.b	$26(a0),d0
00007FD8 4EB9 0000 2CC8             		jsr	(CalcSine).l
00007FDE 7800                       		moveq	#0,d4
00007FE0 1828 003C                  		move.b	$3C(a0),d4
00007FE4 C3C4                       		muls.w	d4,d1
00007FE6 E081                       		asr.l	#8,d1
00007FE8 C1C4                       		muls.w	d4,d0
00007FEA E080                       		asr.l	#8,d0
00007FEC D268 0038                  		add.w	$38(a0),d1
00007FF0 D068 003A                  		add.w	$3A(a0),d0
00007FF4 3141 0008                  		move.w	d1,8(a0)
00007FF8 3140 000C                  		move.w	d0,$C(a0)
00007FFC 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00008002 6700                       		beq.s	loc_55FA
00008004 0668 0020 003C             		addi.w	#$20,$3C(a0)
0000800A                            
0000800A                            loc_55FA:
0000800A 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00008010 6700                       		beq.s	loc_5608
00008012 0668 0020 003E             		addi.w	#$20,$3E(a0)
00008018                            
00008018                            loc_5608:
00008018 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
0000801E 6700                       		beq.s	locret_5614
00008020 5368 003A                  		subq.w	#1,$3A(a0)
00008024                            
00008024                            locret_5614:
00008024 4E75                       		rts	
00008026                            ; ===========================================================================
00008026                            ; ---------------------------------------------------------------------------
00008026                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00008026                            ; ---------------------------------------------------------------------------
00008026                            
00008026                            Obj89:					; XREF: Obj_Index
00008026 7000                       		moveq	#0,d0
00008028 1028 0024                  		move.b	$24(a0),d0
0000802C 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00008030 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00008034                            ; ===========================================================================
00008034 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00008036 0000                       		dc.w Obj89_Move-Obj89_Index
00008038 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
0000803A                            ; ===========================================================================
0000803A                            
0000803A                            Obj89_Main:				; XREF: Obj89_Index
0000803A 5428 0024                  		addq.b	#2,$24(a0)
0000803E 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00008044 317C 00D8 000A             		move.w	#$D8,$A(a0)
0000804A 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00008052 317C 05C5 0002             		move.w	#$5C5,2(a0)
00008058 117C 0000 0001             		move.b	#0,1(a0)
0000805E 117C 0000 0018             		move.b	#0,$18(a0)
00008064                            
00008064                            Obj89_Move:				; XREF: Obj89_Index
00008064 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
0000806A 6700                       		beq.s	Obj89_Delay	; if yes, branch
0000806C 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00008072 4EF9 0000 0000             		jmp	DisplaySprite
00008078                            ; ===========================================================================
00008078                            
00008078                            Obj89_Delay:				; XREF: Obj89_Move
00008078 5428 0024                  		addq.b	#2,$24(a0)
0000807C 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00008082                            
00008082                            Obj89_GotoCredits:			; XREF: Obj89_Index
00008082 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00008086 6A00                       		bpl.s	Obj89_Display
00008088 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
0000808E                            
0000808E                            Obj89_Display:
0000808E 4EF9 0000 0000             		jmp	DisplaySprite
00008094                            ; ===========================================================================
00008094                            ; ---------------------------------------------------------------------------
00008094                            ; Sprite mappings - Sonic on the ending	sequence
00008094                            ; ---------------------------------------------------------------------------
00008094                            Map_obj87:
00008094                            	include "_maps\obj87.asm"
00008094                            ; ---------------------------------------------------------------------------
00008094                            ; Sprite mappings - Sonic on the ending	sequence
00008094                            ; ---------------------------------------------------------------------------
00008094 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00008098 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
0000809C 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
000080A0 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
000080A4 02                         byte_5690:	dc.b 2
000080A5 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000080AA 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000080AF 03                         byte_569B:	dc.b 3
000080B0 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000080B5 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000080BA 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000080BF 02                         byte_56AB:	dc.b 2
000080C0 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000080C5 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000080CA 02                         byte_56B6:	dc.b 2
000080CB EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000080D0 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000080D5 02                         byte_56C1:	dc.b 2
000080D6 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000080DB FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000080E0 03                         byte_56CC:	dc.b 3
000080E1 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000080E6 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000080EB 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000080F0 07                         byte_56DC:	dc.b 7
000080F1 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000080F6 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000080FB BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00008100 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00008105 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
0000810A E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
0000810F EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00008114 18                         byte_5700:	dc.b $18
00008115 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
0000811A 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
0000811F 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00008124 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00008129 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
0000812E 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00008133 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00008138 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
0000813D B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00008142 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00008147 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
0000814C C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00008151 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00008156 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
0000815B B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00008160 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00008165 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
0000816A D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
0000816F E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00008174 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00008179 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
0000817E E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00008183 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00008188 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
0000818E 00                         		even
0000818E 00                         		even
0000818E                            
0000818E                            ; ---------------------------------------------------------------------------
0000818E                            ; Sprite mappings - chaos emeralds on the ending sequence
0000818E                            ; ---------------------------------------------------------------------------
0000818E                            Map_obj88:
0000818E                            	include "_maps\obj88.asm"
0000818E                            ; ---------------------------------------------------------------------------
0000818E                            ; Sprite mappings - chaos emeralds on the ending sequence
0000818E                            ; ---------------------------------------------------------------------------
0000818E 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00008192 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00008196 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
0000819A 0000                       		dc.w byte_57AC-Map_obj88
0000819C 01                         byte_5788:	dc.b 1
0000819D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000081A2 01                         byte_578E:	dc.b 1
000081A3 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
000081A8 01                         byte_5794:	dc.b 1
000081A9 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
000081AE 01                         byte_579A:	dc.b 1
000081AF F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
000081B4 01                         byte_57A0:	dc.b 1
000081B5 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
000081BA 01                         byte_57A6:	dc.b 1
000081BB F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000081C0 01                         byte_57AC:	dc.b 1
000081C1 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000081C6                            		even
000081C6                            		even
000081C6                            
000081C6                            ; ---------------------------------------------------------------------------
000081C6                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000081C6                            ; ---------------------------------------------------------------------------
000081C6                            Map_obj89:
000081C6                            	include "_maps\obj89.asm"
000081C6                            ; ---------------------------------------------------------------------------
000081C6                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000081C6                            ; ---------------------------------------------------------------------------
000081C6 0000                       		dc.w byte_57B4-Map_obj89
000081C8 03                         byte_57B4:	dc.b 3
000081C9 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000081CE F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000081D3 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000081D8                            		even
000081D8                            		even
000081D8                            
000081D8                            ; ===========================================================================
000081D8                            ; ---------------------------------------------------------------------------
000081D8                            ; Credits ending sequence
000081D8                            ; ---------------------------------------------------------------------------
000081D8                            
000081D8                            Credits:				; XREF: GameModeArray
000081D8 6100 93C2                  		bsr.w	ClearPLC
000081DC 6100 9BE2                  		bsr.w	Pal_FadeFrom
000081E0 4DF9 00C0 0004             		lea	($C00004).l,a6
000081E6 3CBC 8004                  		move.w	#$8004,(a6)
000081EA 3CBC 8230                  		move.w	#$8230,(a6)
000081EE 3CBC 8407                  		move.w	#$8407,(a6)
000081F2 3CBC 9001                  		move.w	#$9001,(a6)
000081F6 3CBC 9200                  		move.w	#$9200,(a6)
000081FA 3CBC 8B03                  		move.w	#$8B03,(a6)
000081FE 3CBC 8720                  		move.w	#$8720,(a6)
00008202 4238 F64E                  		clr.b	($FFFFF64E).w
00008206 6100 8FEE                  		bsr.w	ClearScreen
0000820A 43F8 D000                  		lea	($FFFFD000).w,a1
0000820E 7000                       		moveq	#0,d0
00008210 323C 07FF                  		move.w	#$7FF,d1
00008214                            
00008214                            Cred_ClrObjRam:
00008214 22C0                       		move.l	d0,(a1)+
00008216 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
0000821A                            
0000821A                            ; Vladikcomper:	To fit more letters in credits alphabet patterns, it's now placed
0000821A                            ;		at $B000 in VRAM, in original game it was placed at $B400
0000821A                            ;		vram	$B000
0000821A                            ;		lea	(Nem_CreditText).l,a0	; load credits alphabet patterns
0000821A                            ;		bsr.w	NemDec
0000821A                            ;		lea	($FFFFFB80).w,a1
0000821A                            ;		moveq	#0,d0
0000821A                            ;		move.w	#$1F,d1
0000821A                            
0000821A                            ;Cred_ClrPallet:
0000821A                            ;		move.l	d0,(a1)+
0000821A                            ;		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
0000821A                            
0000821A                            ;		moveq	#3,d0
0000821A                            ;		bsr.w	PalLoad1	; load Sonic's pallet
0000821A                            ;		move.b	#$8A,($FFFFD080).w ; load credits object
0000821A                            ;		jsr	ObjectsLoad
0000821A                            ;		jsr	BuildSprites
0000821A                            ;		bsr.w	EndingDemoLoad
0000821A                            ;		moveq	#0,d0
0000821A                            ;		move.b	($FFFFFE10).w,d0
0000821A                            ;		lsl.w	#4,d0
0000821A                            ;		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
0000821A                            ;		lea	(a2,d0.w),a2
0000821A                            ;		moveq	#0,d0
0000821A                            ;		move.b	(a2),d0
0000821A                            ;		beq.s	loc_5862
0000821A                            ;		bsr.w	LoadPLC		; load level patterns
0000821A                            		
0000821A                            DearDiary_FZ1:
0000821A 7026                                       moveq	#$26,d0
0000821C 4EB8 206A                                  jsr	PalLoad1
00008220 43F9 FFFF 0000                             lea	($FFFF0000).l,a1
00008226 41F9 0000 0000                             lea	(Eni_DiaryFZ).l,a0
0000822C 303C 0001                                  move.w	#1,d0
00008230 4EB8 16DC                                  jsr	EniDec
00008234 43F9 FFFF 0000                             lea	($FFFF0000).l,a1
0000823A 203C 4000 0003                             move.l	#$40000003,d0
00008240 7227                                       moveq	#39,d1
00008242 741D                                       moveq	#29,d2
00008244 4EB8 134E                                  jsr	ShowVDPGraphics
00008248 23FC 4020 0000 00C0 0004                   move.l	#$40200000,($C00004).l
00008252 41F9 0000 0000                             lea	(Nem_DiaryFZ).l,a0
00008258 4EB8 13FE                                  jsr	NemDec
0000825C 43F8 CC00                                  lea	($FFFFCC00).w,a1
00008260 7000                                       moveq	#0,d0
00008262 323C 00DF                                  move.w	#$DF,d1
00008266 46FC 2300                  		move	#$2300,sr	; enable interrupts          ; ýòî íå òðîãàòü
0000826A                            		
0000826A 31FC 0360 F614                             move.w	#$360,($FFFFF614).w
00008270 4EB8 1D1A                                  jsr     Pal_FadeTo
00008274                            
00008274                            Deardiary_WaitEnd1:
00008274 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000827A 6100 AA1A                  		bsr.w	DelayProgram
0000827E 4A78 F614                  		tst.w	($FFFFF614).w
00008282 6700                       		beq.s	CredScrs
00008284 0238 0080 F605                             andi.b	#Start,(Joypad|Press).w	; is Start button pressed?
0000828A 67E8                       		beq.s	DearDiary_WaitEnd1		; if not, branch		
0000828C                            
0000828C                            CredScrs:
0000828C 4EB8 1DC0                                  jsr     Pal_FadeFrom
00008290 7024                                       moveq	#$24,d0
00008292 6100 9DD6                                  bsr.w	PalLoad1
00008296 43F9 FFFF 0000                             lea	($FFFF0000).l,a1
0000829C 41F9 0000 0000                             lea	(Eni_CredScr1).l,a0
000082A2 303C 0001                                  move.w	#1,d0
000082A6 4EB8 16DC                                  jsr	EniDec
000082AA 43F9 FFFF 0000                             lea	($FFFF0000).l,a1
000082B0 203C 4000 0003                             move.l	#$40000003,d0
000082B6 7227                                       moveq	#39,d1
000082B8 741D                                       moveq	#29,d2
000082BA 4EB8 134E                                  jsr	ShowVDPGraphics
000082BE 23FC 4020 0000 00C0 0004                   move.l	#$40200000,($C00004).l
000082C8 41F9 0000 0000                             lea	(Nem_CredScr1).l,a0
000082CE 4EB8 13FE                                  jsr	NemDec
000082D2 43F8 CC00                                  lea	($FFFFCC00).w,a1
000082D6 7000                                       moveq	#0,d0
000082D8 323C 00DF                                  move.w	#$DF,d1
000082DC 46FC 2300                  		move	#$2300,sr	; enable interrupts          ; ýòî íå òðîãàòü
000082E0                            		
000082E0 31FC 0360 F614                             move.w	#$360,($FFFFF614).w
000082E6 6100 9A32                                  bsr.w	Pal_FadeTo
000082EA                            
000082EA                            Cred_WaitLoop:
000082EA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000082F0 6100 A9A4                  		bsr.w	DelayProgram
000082F4 6100 92B4                  		bsr.w	RunPLC_RAM
000082F8 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
000082FC 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
000082FE 6700 0000                  		beq.w	TryAgainEnd	
00008302 4E75                       		rts	
00008304                            
00008304                            ; ---------------------------------------------------------------------------
00008304                            ; Ending sequence demo loading subroutine
00008304                            ; ---------------------------------------------------------------------------
00008304                            
00008304                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008304                            
00008304                            
00008304                            EndingDemoLoad:				; XREF: Credits
00008304 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00008308 0240 000F                  		andi.w	#$F,d0
0000830C D040                       		add.w	d0,d0
0000830E 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00008312 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00008316 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
0000831A 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00008320 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00008322                            		;move.w	#$8001,($FFFFFFF0).w ; force demo mode
00008322 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set game mode to 08 (demo)
00008328 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000832E 7000                       		moveq	#0,d0
00008330 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00008334 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00008338 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000833C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00008340 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00008346 6600                       		bne.s	EndDemo_Exit	; if not, branch
00008348 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
0000834E 45F8 FE30                  		lea	($FFFFFE30).w,a2
00008352 303C 0008                  		move.w	#8,d0
00008356                            
00008356                            EndDemo_LampLoad:
00008356 24D9                       		move.l	(a1)+,(a2)+
00008358 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
0000835C                            
0000835C                            EndDemo_Exit:
0000835C 4E75                       		rts	
0000835E                            ; End of function EndingDemoLoad
0000835E                            
0000835E                            ; ===========================================================================
0000835E                            ; ---------------------------------------------------------------------------
0000835E                            ; Levels used in the end sequence demos
0000835E                            ; ---------------------------------------------------------------------------
0000835E                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
0000836E                            
0000836E                            ; ---------------------------------------------------------------------------
0000836E                            ; Lamppost variables in the end sequence demo (Star Light Zone)
0000836E                            ; ---------------------------------------------------------------------------
0000836E                            EndDemo_LampVar:
0000836E 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00008370 0A00 062C 000D             		dc.w $A00, $62C, $D
00008376 0000 0000                  		dc.l 0
0000837A 0000                       		dc.b 0,	0
0000837C 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00008390 0101                       		dc.b 1,	1
00008392                            ; ===========================================================================
00008392                            ; ---------------------------------------------------------------------------
00008392                            ; "TRY AGAIN" and "END"	screens
00008392                            ; ---------------------------------------------------------------------------
00008392                            
00008392                            TryAgainEnd:				; XREF: Credits
00008392 6100 9208                  		bsr.w	ClearPLC
00008396 6100 9A28                  		bsr.w	Pal_FadeFrom
0000839A 4DF9 00C0 0004             		lea	($C00004).l,a6
000083A0 3CBC 8004                  		move.w	#$8004,(a6)
000083A4 3CBC 8230                  		move.w	#$8230,(a6)
000083A8 3CBC 8407                  		move.w	#$8407,(a6)
000083AC 3CBC 9001                  		move.w	#$9001,(a6)
000083B0 3CBC 9200                  		move.w	#$9200,(a6)
000083B4 3CBC 8B03                  		move.w	#$8B03,(a6)
000083B8 3CBC 8720                  		move.w	#$8720,(a6)
000083BC 4238 F64E                  		clr.b	($FFFFF64E).w
000083C0 6100 8E34                  		bsr.w	ClearScreen
000083C4 43F8 D000                  		lea	($FFFFD000).w,a1
000083C8 7000                       		moveq	#0,d0
000083CA 323C 07FF                  		move.w	#$7FF,d1
000083CE                            
000083CE                            TryAg_ClrObjRam:
000083CE 22C0                       		move.l	d0,(a1)+
000083D0 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
000083D4                            
000083D4 701D                       		moveq	#$1D,d0
000083D6 6100 92D2                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
000083DA 43F8 FB80                  		lea	($FFFFFB80).w,a1
000083DE 7000                       		moveq	#0,d0
000083E0 323C 001F                  		move.w	#$1F,d1
000083E4                            
000083E4                            TryAg_ClrPallet:
000083E4 22C0                       		move.l	d0,(a1)+
000083E6 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
000083EA                            
000083EA                            		;moveq	#$13,d0
000083EA                            		;bsr.w	PalLoad1	; load ending pallet
000083EA                            		;clr.w	($FFFFFBC0).w
000083EA                            		;move.b	#$8B,($FFFFD080).w ; load Eggman object
000083EA                            		;jsr	ObjectsLoad
000083EA                            		;jsr	BuildSprites
000083EA                            
000083EA 7025                                       moveq	#$25,d0
000083EC 6100 9C7C                                  bsr.w	PalLoad1
000083F0 43F9 FFFF 0000                             lea	($FFFF0000).l,a1
000083F6 41F9 0000 0000                             lea	(Eni_CredScr2).l,a0
000083FC 303C 0001                                  move.w	#1,d0
00008400 4EB8 16DC                                  jsr	EniDec
00008404 43F9 FFFF 0000                             lea	($FFFF0000).l,a1
0000840A 203C 4000 0003                             move.l	#$40000003,d0
00008410 7227                                       moveq	#39,d1
00008412 741D                                       moveq	#29,d2
00008414 4EB8 134E                                  jsr	ShowVDPGraphics
00008418 23FC 4020 0000 00C0 0004                   move.l	#$40200000,($C00004).l
00008422 41F9 0000 0000                             lea	(Nem_CredScr2).l,a0
00008428 4EB8 13FE                                  jsr	NemDec
0000842C 43F8 CC00                                  lea	($FFFFCC00).w,a1
00008430 7000                                       moveq	#0,d0
00008432 323C 00DF                                  move.w	#$DF,d1
00008436 46FC 2300                  		move	#$2300,sr	; enable interrupts          ; ýòî íå òðîãàòü
0000843A                            
0000843A 31FC 04B0 F614             		move.w	#1200,($FFFFF614).w ; show screen for 20 seconds
00008440 6100 98D8                  		bsr.w	Pal_FadeTo
00008444                            
00008444                            ; ---------------------------------------------------------------------------
00008444                            ; "TRY AGAIN" and "END"	screen main loop
00008444                            ; ---------------------------------------------------------------------------
00008444                            TryAg_MainLoop:
00008444 6100 8E90                  		bsr.w	PauseGame
00008448 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000844E 6100 A846                  		bsr.w	DelayProgram
00008452 4EB9 0000 0000             		jsr	ObjectsLoad
00008458 4EB9 0000 0000             		jsr	BuildSprites
0000845E 4A78 F614                  		tst.w	($FFFFF614).w	; has 20 seconds elapsed?
00008462 6700                       		beq.s	TryAg_Exit	; if yes, branch
00008464 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
0000846A 67D8                       		beq.s	TryAg_MainLoop
0000846C                            
0000846C                            TryAg_Exit:
0000846C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00008472 4E75                       		rts	
00008474                            
00008474                            ; ===========================================================================
00008474                            ; ---------------------------------------------------------------------------
00008474                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00008474                            ; ---------------------------------------------------------------------------
00008474                            
00008474                            Obj8B:					; XREF: Obj_Index
00008474 7000                       		moveq	#0,d0
00008476 1028 0024                  		move.b	$24(a0),d0
0000847A 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
0000847E 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00008482 4EF9 0000 0000             		jmp	DisplaySprite
00008488                            ; ===========================================================================
00008488 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
0000848A 0000                       		dc.w Obj8B_Animate-Obj8B_Index
0000848C 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
0000848E 0000                       		dc.w loc_5A8E-Obj8B_Index
00008490                            ; ===========================================================================
00008490                            
00008490                            Obj8B_Main:				; XREF: Obj8B_Index
00008490 5428 0024                  		addq.b	#2,$24(a0)
00008494 317C 0120 0008             		move.w	#$120,8(a0)
0000849A 317C 00F4 000A             		move.w	#$F4,$A(a0)
000084A0 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
000084A8 317C 03E1 0002             		move.w	#$3E1,2(a0)
000084AE 117C 0000 0001             		move.b	#0,1(a0)
000084B4 117C 0002 0018             		move.b	#2,$18(a0)
000084BA 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
000084C0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000084C6 6700                       		beq.s	Obj8B_Animate	; if yes, branch
000084C8 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
000084CE 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
000084D4 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
000084DA 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
000084E0                            
000084E0                            Obj8B_Animate:				; XREF: Obj8B_Index
000084E0 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
000084E6 4EF9 0000 0000             		jmp	AnimateSprite
000084EC                            ; ===========================================================================
000084EC                            
000084EC                            Obj8B_Juggle:				; XREF: Obj8B_Index
000084EC 5428 0024                  		addq.b	#2,$24(a0)
000084F0 7002                       		moveq	#2,d0
000084F2 0828 0000 001C             		btst	#0,$1C(a0)
000084F8 6700                       		beq.s	loc_5A6A
000084FA 4440                       		neg.w	d0
000084FC                            
000084FC                            loc_5A6A:
000084FC 43F8 D800                  		lea	($FFFFD800).w,a1
00008500 7205                       		moveq	#5,d1
00008502                            
00008502                            loc_5A70:
00008502 1340 003E                  		move.b	d0,$3E(a1)
00008506 3400                       		move.w	d0,d2
00008508 E742                       		asl.w	#3,d2
0000850A D529 0026                  		add.b	d2,$26(a1)
0000850E 43E9 0040                  		lea	$40(a1),a1
00008512 51C9 FFEE                  		dbf	d1,loc_5A70
00008516 5228 001A                  		addq.b	#1,$1A(a0)
0000851A 317C 0070 0030             		move.w	#112,$30(a0)
00008520                            
00008520                            loc_5A8E:				; XREF: Obj8B_Index
00008520 5368 0030                  		subq.w	#1,$30(a0)
00008524 6A00                       		bpl.s	locret_5AA0
00008526 0868 0000 001C             		bchg	#0,$1C(a0)
0000852C 117C 0002 0024             		move.b	#2,$24(a0)
00008532                            
00008532                            locret_5AA0:
00008532 4E75                       		rts	
00008534                            ; ===========================================================================
00008534                            Ani_obj8B:
00008534                            	include "_anim\obj8B.asm"
00008534                            ; ---------------------------------------------------------------------------
00008534                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00008534                            ; ---------------------------------------------------------------------------
00008534 0000                       		dc.w byte_5AA8-Ani_obj8B
00008536 0000                       		dc.w byte_5AAC-Ani_obj8B
00008538 0000                       		dc.w byte_5AB0-Ani_obj8B
0000853A 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
0000853E 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00008542 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00008554                            		even
00008554                            		even
00008554                            
00008554                            ; ===========================================================================
00008554                            ; ---------------------------------------------------------------------------
00008554                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00008554                            ; ---------------------------------------------------------------------------
00008554                            
00008554                            Obj8C:					; XREF: Obj_Index
00008554 7000                       		moveq	#0,d0
00008556 1028 0024                  		move.b	$24(a0),d0
0000855A 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
0000855E 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00008562 4EF9 0000 0000             		jmp	DisplaySprite
00008568                            ; ===========================================================================
00008568 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
0000856A 0000                       		dc.w Obj8C_Move-Obj8C_Index
0000856C                            ; ===========================================================================
0000856C                            
0000856C                            Obj8C_Main:				; XREF: Obj8C_Index
0000856C 2248                       		movea.l	a0,a1
0000856E 7400                       		moveq	#0,d2
00008570 7600                       		moveq	#0,d3
00008572 7205                       		moveq	#5,d1
00008574 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00008578                            
00008578                            Obj8C_MakeEms:				; XREF: loc_5B42
00008578 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
0000857C 5429 0024                  		addq.b	#2,$24(a1)
00008580 237C 0000 818E 0004        		move.l	#Map_obj88,4(a1)
00008588 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000858E 137C 0000 0001             		move.b	#0,1(a1)
00008594 137C 0001 0018             		move.b	#1,$18(a1)
0000859A 337C 0104 0008             		move.w	#$104,8(a1)
000085A0 337C 0120 0038             		move.w	#$120,$38(a1)
000085A6 337C 00EC 000A             		move.w	#$EC,$A(a1)
000085AC 3369 000A 003A             		move.w	$A(a1),$3A(a1)
000085B2 137C 001C 003C             		move.b	#$1C,$3C(a1)
000085B8 47F8 FE58                  		lea	($FFFFFE58).w,a3
000085BC                            
000085BC                            Obj8C_ChkEms:
000085BC 7000                       		moveq	#0,d0
000085BE 1038 FE57                  		move.b	($FFFFFE57).w,d0
000085C2 5340                       		subq.w	#1,d0
000085C4 6500                       		bcs.s	loc_5B42
000085C6                            
000085C6                            Obj8C_ChkEmLoop:
000085C6 B433 0000                  		cmp.b	(a3,d0.w),d2
000085CA 6600                       		bne.s	loc_5B3E
000085CC 5202                       		addq.b	#1,d2
000085CE 60EC                       		bra.s	Obj8C_ChkEms
000085D0                            ; ===========================================================================
000085D0                            
000085D0                            loc_5B3E:
000085D0 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
000085D4                            
000085D4                            loc_5B42:
000085D4 1342 001A                  		move.b	d2,$1A(a1)
000085D8 5229 001A                  		addq.b	#1,$1A(a1)
000085DC 5202                       		addq.b	#1,d2
000085DE 137C 0080 0026             		move.b	#$80,$26(a1)
000085E4 1343 001E                  		move.b	d3,$1E(a1)
000085E8 1343 001F                  		move.b	d3,$1F(a1)
000085EC 0643 000A                  		addi.w	#$A,d3
000085F0 43E9 0040                  		lea	$40(a1),a1
000085F4 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
000085F8                            
000085F8                            Obj8C_Move:				; XREF: Obj8C_Index
000085F8 4A68 003E                  		tst.w	$3E(a0)
000085FC 6700                       		beq.s	locret_5BBA
000085FE 4A28 001E                  		tst.b	$1E(a0)
00008602 6700                       		beq.s	loc_5B78
00008604 5328 001E                  		subq.b	#1,$1E(a0)
00008608 6600                       		bne.s	loc_5B80
0000860A                            
0000860A                            loc_5B78:
0000860A 3028 003E                  		move.w	$3E(a0),d0
0000860E D168 0026                  		add.w	d0,$26(a0)
00008612                            
00008612                            loc_5B80:
00008612 1028 0026                  		move.b	$26(a0),d0
00008616 6700                       		beq.s	loc_5B8C
00008618 0C00 0080                  		cmpi.b	#$80,d0
0000861C 6600                       		bne.s	loc_5B96
0000861E                            
0000861E                            loc_5B8C:
0000861E 4268 003E                  		clr.w	$3E(a0)
00008622 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00008628                            
00008628                            loc_5B96:
00008628 4EB9 0000 2CC8             		jsr	(CalcSine).l
0000862E 7800                       		moveq	#0,d4
00008630 1828 003C                  		move.b	$3C(a0),d4
00008634 C3C4                       		muls.w	d4,d1
00008636 E081                       		asr.l	#8,d1
00008638 C1C4                       		muls.w	d4,d0
0000863A E080                       		asr.l	#8,d0
0000863C D268 0038                  		add.w	$38(a0),d1
00008640 D068 003A                  		add.w	$3A(a0),d0
00008644 3141 0008                  		move.w	d1,8(a0)
00008648 3140 000A                  		move.w	d0,$A(a0)
0000864C                            
0000864C                            locret_5BBA:
0000864C 4E75                       		rts	
0000864E                            ; ===========================================================================
0000864E                            ; ---------------------------------------------------------------------------
0000864E                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
0000864E                            ; ---------------------------------------------------------------------------
0000864E                            Map_obj8B:
0000864E                            	include "_maps\obj8B.asm"
0000864E                            ; ---------------------------------------------------------------------------
0000864E                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
0000864E                            ; ---------------------------------------------------------------------------
0000864E 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00008652 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00008656 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
0000865A 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
0000865E 08                         byte_5BCC:	dc.b 8
0000865F E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00008664 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00008669 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
0000866E F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00008673 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00008678 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000867D 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00008682 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00008687 08                         byte_5BF5:	dc.b 8
00008688 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
0000868D F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00008692 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00008697 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
0000869C 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000086A1 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000086A6 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000086AB 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000086B0 08                         byte_5C1E:	dc.b 8
000086B1 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
000086B6 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
000086BB E905 0800 00               		dc.b $E9, 5, 8,	0, 0
000086C0 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
000086C5 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000086CA 0106 0823 00               		dc.b 1,	6, 8, $23, 0
000086CF 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000086D4 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000086D9 08                         byte_5C47:	dc.b 8
000086DA E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
000086DF F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
000086E4 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
000086E9 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000086EE 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000086F3 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000086F8 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000086FD 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00008702 0C                         byte_5C70:	dc.b $C
00008703 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00008708 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
0000870D 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00008712 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00008717 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
0000871C F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00008721 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00008726 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
0000872B 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00008730 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00008735 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000873A 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000873F 0A                         byte_5CAD:	dc.b $A
00008740 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00008745 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
0000874A F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
0000874F D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00008754 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00008759 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
0000875E 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00008763 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00008768 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
0000876D 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00008772 0A                         byte_5CE0:	dc.b $A
00008773 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00008778 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
0000877D EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00008782 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00008787 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
0000878C EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00008791 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00008796 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000879B 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
000087A0 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
000087A5 0C                         byte_5D13:	dc.b $C
000087A6 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
000087AB FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
000087B0 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
000087B5 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
000087BA F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
000087BF FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
000087C4 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
000087C9 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
000087CE 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
000087D3 180C 0087 00               		dc.b $18, $C, 0, $87, 0
000087D8 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000087DD 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000087E2                            		even
000087E2                            		even
000087E2                            
000087E2                            ; ---------------------------------------------------------------------------
000087E2                            ; Ending sequence demos
000087E2                            ; ---------------------------------------------------------------------------
000087E2                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00008810                            		even
00008810                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00008850                            		even
00008850                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00008880                            		even
00008880                            Demo_EndLZ:	incbin	demodata\e_lz.bin
000088B0                            		even
000088B0                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
000088D0                            		even
000088D0                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000088F0                            		even
000088F0                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00008920                            		even
00008920                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00008950                            		even
00008950                            
00008950                            ; ---------------------------------------------------------------------------
00008950                            ; Subroutine to	load level boundaries and start	locations
00008950                            ; ---------------------------------------------------------------------------
00008950                            
00008950                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008950                            
00008950                            
00008950                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00008950 7000                       		moveq	#0,d0
00008952 11C0 F740                  		move.b	d0,($FFFFF740).w
00008956 11C0 F741                  		move.b	d0,($FFFFF741).w
0000895A 11C0 F746                  		move.b	d0,($FFFFF746).w
0000895E 11C0 F748                  		move.b	d0,($FFFFF748).w
00008962 11C0 F742                  		move.b	d0,($FFFFF742).w
00008966 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000896A ED08                       		lsl.b	#6,d0
0000896C E848                       		lsr.w	#4,d0
0000896E 3200                       		move.w	d0,d1
00008970 D040                       		add.w	d0,d0
00008972 D041                       		add.w	d1,d0
00008974 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00008978 3018                       		move.w	(a0)+,d0
0000897A 31C0 F730                  		move.w	d0,($FFFFF730).w
0000897E 2018                       		move.l	(a0)+,d0
00008980 21C0 F728                  		move.l	d0,($FFFFF728).w
00008984 21C0 F720                  		move.l	d0,($FFFFF720).w
00008988 2018                       		move.l	(a0)+,d0
0000898A 21C0 F72C                  		move.l	d0,($FFFFF72C).w
0000898E 21C0 F724                  		move.l	d0,($FFFFF724).w
00008992 3038 F728                  		move.w	($FFFFF728).w,d0
00008996 0640 0240                  		addi.w	#$240,d0
0000899A 31C0 F732                  		move.w	d0,($FFFFF732).w
0000899E 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
000089A4 3018                       		move.w	(a0)+,d0
000089A6 31C0 F73E                  		move.w	d0,($FFFFF73E).w
000089AA 6000 0000                  		bra.w	LevSz_ChkLamp
000089AE                            ; ===========================================================================
000089AE                            ; ---------------------------------------------------------------------------
000089AE                            ; Level size array and ending start location array
000089AE                            ; ---------------------------------------------------------------------------
000089AE                            LevelSizeArray:	incbin	misc\lvl_size.bin
00008AFE                            		even
00008AFE                            
00008AFE                            EndingStLocArray:
00008AFE                            		incbin	misc\sloc_end.bin
00008B1E                            		even
00008B1E                            
00008B1E                            ; ===========================================================================
00008B1E                            
00008B1E                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00008B1E 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00008B22 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00008B24 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00008B2A 3238 D008                  		move.w	($FFFFD008).w,d1
00008B2E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00008B32 6000                       		bra.s	loc_60D0
00008B34                            ; ===========================================================================
00008B34                            
00008B34                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00008B34 3038 FE10                  		move.w	($FFFFFE10).w,d0
00008B38 ED08                       		lsl.b	#6,d0
00008B3A E848                       		lsr.w	#4,d0
00008B3C 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00008B40 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00008B44 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00008B46 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00008B4A 5340                       		subq.w	#1,d0
00008B4C E548                       		lsl.w	#2,d0
00008B4E 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00008B52                            
00008B52                            LevSz_SonicPos:
00008B52 7200                       		moveq	#0,d1
00008B54 3219                       		move.w	(a1)+,d1
00008B56 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00008B5A 7000                       		moveq	#0,d0
00008B5C 3011                       		move.w	(a1),d0
00008B5E 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00008B62                            
00008B62                            loc_60D0:				; XREF: LevSz_ChkLamp
00008B62 0441 00A0                  		subi.w	#$A0,d1
00008B66 6400                       		bcc.s	loc_60D8
00008B68 7200                       		moveq	#0,d1
00008B6A                            
00008B6A                            loc_60D8:
00008B6A 3438 F72A                  		move.w	($FFFFF72A).w,d2
00008B6E B242                       		cmp.w	d2,d1
00008B70 6500                       		bcs.s	loc_60E2
00008B72 3202                       		move.w	d2,d1
00008B74                            
00008B74                            loc_60E2:
00008B74 31C1 F700                  		move.w	d1,($FFFFF700).w
00008B78 0440 0060                  		subi.w	#$60,d0
00008B7C 6400                       		bcc.s	loc_60EE
00008B7E 7000                       		moveq	#0,d0
00008B80                            
00008B80                            loc_60EE:
00008B80 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00008B84 6D00                       		blt.s	loc_60F8
00008B86 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008B8A                            
00008B8A                            loc_60F8:
00008B8A 31C0 F704                  		move.w	d0,($FFFFF704).w
00008B8E 6100 0000                  		bsr.w	BgScrollSpeed
00008B92 7000                       		moveq	#0,d0
00008B94 1038 FE10                  		move.b	($FFFFFE10).w,d0
00008B98 E508                       		lsl.b	#2,d0
00008B9A 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00008BA0 6000 0000                  		bra.w	LevSz_Unk
00008BA4                            ; ===========================================================================
00008BA4                            ; ---------------------------------------------------------------------------
00008BA4                            ; Sonic	start location array
00008BA4                            ; ---------------------------------------------------------------------------
00008BA4                            StartLocArray:	incbin	misc\sloc_lev.bin
00008C14                            		even
00008C14                            
00008C14                            ; ---------------------------------------------------------------------------
00008C14                            ; Which	256x256	tiles contain loops or roll-tunnels
00008C14                            ; ---------------------------------------------------------------------------
00008C14                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00008C14                            ; loop,	loop, tunnel, tunnel
00008C14                            ; ---------------------------------------------------------------------------
00008C14                            LoopTileNums:	incbin	misc\loopnums.bin
00008C30                            		even
00008C30                            
00008C30                            ; ===========================================================================
00008C30                            
00008C30                            LevSz_Unk:				; XREF: LevelSizeLoad
00008C30 7000                       		moveq	#0,d0
00008C32 1038 FE10                  		move.b	($FFFFFE10).w,d0
00008C36 E748                       		lsl.w	#3,d0
00008C38 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00008C3C 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00008C40 24D9                       		move.l	(a1)+,(a2)+
00008C42 24D9                       		move.l	(a1)+,(a2)+
00008C44 4E75                       		rts	
00008C46                            ; End of function LevelSizeLoad
00008C46                            
00008C46                            ; ===========================================================================
00008C46 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00008C4E 0800 0100 0100 0000        		dc.l $8000100, $1000000
00008C56 0800 0100 0100 0000        		dc.l $8000100, $1000000
00008C5E 0800 0100 0100 0000        		dc.l $8000100, $1000000
00008C66 0800 0100 0100 0000        		dc.l $8000100, $1000000
00008C6E 0800 0100 0100 0000        		dc.l $8000100, $1000000
00008C76 0070 0100 0100 0100        		dc.l $700100, $1000100
00008C7E                            
00008C7E                            ; ---------------------------------------------------------------------------
00008C7E                            ; Subroutine to	set scroll speed of some backgrounds
00008C7E                            ; ---------------------------------------------------------------------------
00008C7E                            
00008C7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C7E                            
00008C7E                            
00008C7E                            BgScrollSpeed:				; XREF: LevelSizeLoad
00008C7E 4A38 FE30                  		tst.b	($FFFFFE30).w
00008C82 6600                       		bne.s	loc_6206
00008C84 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00008C88 31C0 F714                  		move.w	d0,($FFFFF714).w
00008C8C 31C1 F708                  		move.w	d1,($FFFFF708).w
00008C90 31C1 F710                  		move.w	d1,($FFFFF710).w
00008C94 31C1 F718                  		move.w	d1,($FFFFF718).w
00008C98                            
00008C98                            loc_6206:
00008C98 7400                       		moveq	#0,d2
00008C9A 1438 FE10                  		move.b	($FFFFFE10).w,d2
00008C9E D442                       		add.w	d2,d2
00008CA0 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00008CA4 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00008CA8                            ; End of function BgScrollSpeed
00008CA8                            
00008CA8                            ; ===========================================================================
00008CA8 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00008CAC 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00008CB0 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00008CB4 0000                       		dc.w BgScroll_End-BgScroll_Index
00008CB6                            ; ===========================================================================
00008CB6                            
00008CB6                            BgScroll_GHZ:				; XREF: BgScroll_Index
00008CB6 6000 0000                  		bra.w	Deform_GHZ
00008CBA                            ; ===========================================================================
00008CBA                            
00008CBA                            BgScroll_LZ:				; XREF: BgScroll_Index
00008CBA E280                       		asr.l	#1,d0
00008CBC 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00008CC0 4E75                       		rts	
00008CC2                            ; ===========================================================================
00008CC2                            
00008CC2                            BgScroll_MZ:				; XREF: BgScroll_Index
00008CC2 4E75                       		rts	
00008CC4                            ; ===========================================================================
00008CC4                            
00008CC4                            BgScroll_SLZ:				; XREF: BgScroll_Index
00008CC4 E280                       		asr.l	#1,d0
00008CC6 0640 00C0                  		addi.w	#$C0,d0
00008CCA 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00008CCE 4E75                       		rts	
00008CD0                            ; ===========================================================================
00008CD0                            
00008CD0                            BgScroll_SYZ:				; XREF: BgScroll_Index
00008CD0 E980                       		asl.l	#4,d0
00008CD2 2400                       		move.l	d0,d2
00008CD4 E380                       		asl.l	#1,d0
00008CD6 D082                       		add.l	d2,d0
00008CD8 E080                       		asr.l	#8,d0
00008CDA 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00008CDE 31C0 F714                  		move.w	d0,($FFFFF714).w
00008CE2 4E75                       		rts	
00008CE4                            ; ===========================================================================
00008CE4                            
00008CE4                            BgScroll_SBZ:				; XREF: BgScroll_Index
00008CE4 E980                       		asl.l	#4,d0
00008CE6 E380                       		asl.l	#1,d0
00008CE8 E080                       		asr.l	#8,d0
00008CEA 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00008CEE 4E75                       		rts	
00008CF0                            ; ===========================================================================
00008CF0                            
00008CF0                            BgScroll_End:				; XREF: BgScroll_Index
00008CF0 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00008CF6 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00008CFC 4E75                       		rts	
00008CFE                            ; ===========================================================================
00008CFE 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00008D04 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00008D0A 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00008D10 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00008D16 4E75                       		rts
00008D18                            
00008D18                            ; ---------------------------------------------------------------------------
00008D18                            ; Background layer deformation subroutines
00008D18                            ; ---------------------------------------------------------------------------
00008D18                            
00008D18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D18                            
00008D18                            
00008D18                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00008D18 4A38 F744                  		tst.b	($FFFFF744).w
00008D1C 6700                       		beq.s	loc_628E
00008D1E 4E75                       		rts	
00008D20                            ; ===========================================================================
00008D20                            
00008D20                            loc_628E:
00008D20 4278 F754                  		clr.w	($FFFFF754).w
00008D24 4278 F756                  		clr.w	($FFFFF756).w
00008D28 4278 F758                  		clr.w	($FFFFF758).w
00008D2C 4278 F75A                  		clr.w	($FFFFF75A).w
00008D30 6100 0000                  		bsr.w	ScrollHoriz
00008D34 6100 0000                  		bsr.w	ScrollVertical
00008D38 6100 0000                  		bsr.w	DynScrResizeLoad
00008D3C 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00008D42 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00008D48 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00008D4E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00008D54 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00008D5A 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00008D60 7000                       		moveq	#0,d0
00008D62 1038 FE10                  		move.b	($FFFFFE10).w,d0
00008D66 D040                       		add.w	d0,d0
00008D68 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00008D6C 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00008D70                            ; End of function DeformBgLayer
00008D70                            
00008D70                            ; ===========================================================================
00008D70                            ; ---------------------------------------------------------------------------
00008D70                            ; Offset index for background layer deformation	code
00008D70                            ; ---------------------------------------------------------------------------
00008D70 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00008D74 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00008D78 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00008D7C 0000                       		dc.w Deform_GHZ-Deform_Index
00008D7E                            ; ---------------------------------------------------------------------------
00008D7E                            ; Green	Hill Zone background layer deformation code
00008D7E                            ; ---------------------------------------------------------------------------
00008D7E                            
00008D7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D7E                            
00008D7E                            
00008D7E                            Deform_GHZ:				; XREF: Deform_Index
00008D7E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00008D82 48C4                       		ext.l	d4
00008D84 EB84                       		asl.l	#5,d4
00008D86 2204                       		move.l	d4,d1
00008D88 E384                       		asl.l	#1,d4
00008D8A D881                       		add.l	d1,d4
00008D8C 7A00                       		moveq	#0,d5
00008D8E 6100 0000                  		bsr.w	ScrollBlock1
00008D92 6100 0000                  		bsr.w	ScrollBlock4
00008D96 43F8 CC00                  		lea	($FFFFCC00).w,a1
00008D9A 3038 F704                  		move.w	($FFFFF704).w,d0
00008D9E 0240 07FF                  		andi.w	#$7FF,d0
00008DA2 EA48                       		lsr.w	#5,d0
00008DA4 4440                       		neg.w	d0
00008DA6 0640 0026                  		addi.w	#$26,d0
00008DAA 31C0 F714                  		move.w	d0,($FFFFF714).w
00008DAE 3800                       		move.w	d0,d4
00008DB0 6100 0000                  		bsr.w	ScrollBlock3
00008DB4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00008DBA 323C 006F                  		move.w	#$6F,d1
00008DBE 9244                       		sub.w	d4,d1
00008DC0 3038 F700                  		move.w	($FFFFF700).w,d0
00008DC4 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00008DCA 6600                       		bne.s	loc_633C
00008DCC 7000                       		moveq	#0,d0
00008DCE                            
00008DCE                            loc_633C:
00008DCE 4440                       		neg.w	d0
00008DD0 4840                       		swap	d0
00008DD2 3038 F708                  		move.w	($FFFFF708).w,d0
00008DD6 4440                       		neg.w	d0
00008DD8                            
00008DD8                            loc_6346:
00008DD8 22C0                       		move.l	d0,(a1)+
00008DDA 51C9 FFFC                  		dbf	d1,loc_6346
00008DDE 323C 0027                  		move.w	#$27,d1
00008DE2 3038 F710                  		move.w	($FFFFF710).w,d0
00008DE6 4440                       		neg.w	d0
00008DE8                            
00008DE8                            loc_6356:
00008DE8 22C0                       		move.l	d0,(a1)+
00008DEA 51C9 FFFC                  		dbf	d1,loc_6356
00008DEE 3038 F710                  		move.w	($FFFFF710).w,d0
00008DF2 0640 0000                  		addi.w	#0,d0
00008DF6 3438 F700                  		move.w	($FFFFF700).w,d2
00008DFA 0642 FE00                  		addi.w	#-$200,d2
00008DFE 9440                       		sub.w	d0,d2
00008E00 48C2                       		ext.l	d2
00008E02 E182                       		asl.l	#8,d2
00008E04 85FC 0068                  		divs.w	#$68,d2
00008E08 48C2                       		ext.l	d2
00008E0A E182                       		asl.l	#8,d2
00008E0C 7600                       		moveq	#0,d3
00008E0E 3600                       		move.w	d0,d3
00008E10 323C 0047                  		move.w	#$47,d1
00008E14 D244                       		add.w	d4,d1
00008E16                            
00008E16                            loc_6384:
00008E16 3003                       		move.w	d3,d0
00008E18 4440                       		neg.w	d0
00008E1A 22C0                       		move.l	d0,(a1)+
00008E1C 4843                       		swap	d3
00008E1E D682                       		add.l	d2,d3
00008E20 4843                       		swap	d3
00008E22 51C9 FFF2                  		dbf	d1,loc_6384
00008E26 4E75                       		rts	
00008E28                            ; End of function Deform_GHZ
00008E28                            
00008E28                            ; ---------------------------------------------------------------------------
00008E28                            ; Labyrinth Zone background layer deformation code
00008E28                            ; ---------------------------------------------------------------------------
00008E28                            
00008E28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E28                            
00008E28                            
00008E28                            Deform_LZ:				; XREF: Deform_Index
00008E28 3838 F73A                  		move.w	($FFFFF73A).w,d4
00008E2C 48C4                       		ext.l	d4
00008E2E EF84                       		asl.l	#7,d4
00008E30 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00008E34 48C5                       		ext.l	d5
00008E36 EF85                       		asl.l	#7,d5
00008E38 6100 0000                  		bsr.w	ScrollBlock1
00008E3C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00008E42 43F8 CC00                  		lea	($FFFFCC00).w,a1
00008E46 323C 00DF                  		move.w	#$DF,d1
00008E4A 3038 F700                  		move.w	($FFFFF700).w,d0
00008E4E 4440                       		neg.w	d0
00008E50 4840                       		swap	d0
00008E52 3038 F708                  		move.w	($FFFFF708).w,d0
00008E56 4440                       		neg.w	d0
00008E58                            
00008E58                            loc_63C6:
00008E58 22C0                       		move.l	d0,(a1)+
00008E5A 51C9 FFFC                  		dbf	d1,loc_63C6
00008E5E 3038 F646                  		move.w	($FFFFF646).w,d0
00008E62 9078 F704                  		sub.w	($FFFFF704).w,d0
00008E66 4E75                       		rts	
00008E68                            ; End of function Deform_LZ
00008E68                            
00008E68                            ; ---------------------------------------------------------------------------
00008E68                            ; Marble Zone background layer deformation code
00008E68                            ; ---------------------------------------------------------------------------
00008E68                            
00008E68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E68                            
00008E68                            
00008E68                            Deform_MZ:				; XREF: Deform_Index
00008E68 3838 F73A                  		move.w	($FFFFF73A).w,d4
00008E6C 48C4                       		ext.l	d4
00008E6E ED84                       		asl.l	#6,d4
00008E70 2204                       		move.l	d4,d1
00008E72 E384                       		asl.l	#1,d4
00008E74 D881                       		add.l	d1,d4
00008E76 7A00                       		moveq	#0,d5
00008E78 6100 0000                  		bsr.w	ScrollBlock1
00008E7C 303C 0200                  		move.w	#$200,d0
00008E80 3238 F704                  		move.w	($FFFFF704).w,d1
00008E84 0441 01C8                  		subi.w	#$1C8,d1
00008E88 6500                       		bcs.s	loc_6402
00008E8A 3401                       		move.w	d1,d2
00008E8C D241                       		add.w	d1,d1
00008E8E D242                       		add.w	d2,d1
00008E90 E441                       		asr.w	#2,d1
00008E92 D041                       		add.w	d1,d0
00008E94                            
00008E94                            loc_6402:
00008E94 31C0 F714                  		move.w	d0,($FFFFF714).w
00008E98 6100 0000                  		bsr.w	ScrollBlock3
00008E9C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00008EA2 43F8 CC00                  		lea	($FFFFCC00).w,a1
00008EA6 323C 00DF                  		move.w	#$DF,d1
00008EAA 3038 F700                  		move.w	($FFFFF700).w,d0
00008EAE 4440                       		neg.w	d0
00008EB0 4840                       		swap	d0
00008EB2 3038 F708                  		move.w	($FFFFF708).w,d0
00008EB6 4440                       		neg.w	d0
00008EB8                            
00008EB8                            loc_6426:
00008EB8 22C0                       		move.l	d0,(a1)+
00008EBA 51C9 FFFC                  		dbf	d1,loc_6426
00008EBE 4E75                       		rts	
00008EC0                            ; End of function Deform_MZ
00008EC0                            
00008EC0                            ; ---------------------------------------------------------------------------
00008EC0                            ; Star Light Zone background layer deformation code
00008EC0                            ; ---------------------------------------------------------------------------
00008EC0                            
00008EC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EC0                            
00008EC0                            
00008EC0                            Deform_SLZ:				; XREF: Deform_Index
00008EC0 3838 F73A                  		move.w	($FFFFF73A).w,d4
00008EC4 48C4                       		ext.l	d4
00008EC6 EF84                       		asl.l	#7,d4
00008EC8 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00008ECC 48C5                       		ext.l	d5
00008ECE EF85                       		asl.l	#7,d5
00008ED0 6100 0000                  		bsr.w	ScrollBlock1
00008ED4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00008EDA 43F8 CC00                  		lea	($FFFFCC00).w,a1
00008EDE 323C 00DF                  		move.w	#$DF,d1
00008EE2 3038 F700                  		move.w	($FFFFF700).w,d0
00008EE6 4440                       		neg.w	d0
00008EE8 4840                       		swap	d0
00008EEA 3038 F708                  		move.w	($FFFFF708).w,d0
00008EEE 4440                       		neg.w	d0
00008EF0                            ; ===========================================================================
00008EF0                            
00008EF0                            loc_6480:				; XREF: Deform_SLZ
00008EF0 22C0                       		move.l	d0,(a1)+
00008EF2 51C9 FF64                  		dbf	d1,loc_63C6
00008EF6 3038 F646                  		move.w	($FFFFF646).w,d0
00008EFA 9078 F704                  		sub.w	($FFFFF704).w,d0
00008EFE 4E75                       		rts
00008F00                            	
00008F00                            ; End of function Deform_SLZ
00008F00                            ; ---------------------------------------------------------------------------
00008F00                            ; Spring Yard Zone background layer deformation	code
00008F00                            ; ---------------------------------------------------------------------------
00008F00                            
00008F00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F00                            
00008F00                            
00008F00                            Deform_SYZ:				; XREF: Deform_Index
00008F00 3838 F73A                  		move.w	($FFFFF73A).w,d4
00008F04 48C4                       		ext.l	d4
00008F06 ED84                       		asl.l	#6,d4
00008F08 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00008F0C 48C5                       		ext.l	d5
00008F0E E985                       		asl.l	#4,d5
00008F10 2205                       		move.l	d5,d1
00008F12 E385                       		asl.l	#1,d5
00008F14 DA81                       		add.l	d1,d5
00008F16 6100 0000                  		bsr.w	ScrollBlock1
00008F1A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00008F20 43F8 CC00                  		lea	($FFFFCC00).w,a1
00008F24 323C 00DF                  		move.w	#$DF,d1
00008F28 3038 F700                  		move.w	($FFFFF700).w,d0
00008F2C 4440                       		neg.w	d0
00008F2E 4840                       		swap	d0
00008F30 3038 F708                  		move.w	($FFFFF708).w,d0
00008F34 4440                       		neg.w	d0
00008F36                            
00008F36                            loc_653C:
00008F36 22C0                       		move.l	d0,(a1)+
00008F38 51C9 FFFC                  		dbf	d1,loc_653C
00008F3C 4E75                       		rts	
00008F3E                            ; End of function Deform_SYZ
00008F3E                            
00008F3E                            ; ---------------------------------------------------------------------------
00008F3E                            ; Scrap	Brain Zone background layer deformation	code
00008F3E                            ; ---------------------------------------------------------------------------
00008F3E                            
00008F3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F3E                            
00008F3E                            
00008F3E                            Deform_SBZ:				; XREF: Deform_Index
00008F3E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00008F42 48C4                       		ext.l	d4
00008F44 ED84                       		asl.l	#6,d4
00008F46 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00008F4A 48C5                       		ext.l	d5
00008F4C E985                       		asl.l	#4,d5
00008F4E E385                       		asl.l	#1,d5
00008F50 6100 0000                  		bsr.w	ScrollBlock1
00008F54 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00008F5A 43F8 CC00                  		lea	($FFFFCC00).w,a1
00008F5E 323C 00DF                  		move.w	#$DF,d1
00008F62 3038 F700                  		move.w	($FFFFF700).w,d0
00008F66 4440                       		neg.w	d0
00008F68 4840                       		swap	d0
00008F6A 3038 F708                  		move.w	($FFFFF708).w,d0
00008F6E 4440                       		neg.w	d0
00008F70                            
00008F70                            loc_6576:
00008F70 22C0                       		move.l	d0,(a1)+
00008F72 51C9 FFFC                  		dbf	d1,loc_6576
00008F76 4E75                       		rts	
00008F78                            ; End of function Deform_SBZ
00008F78                            
00008F78                            ; ---------------------------------------------------------------------------
00008F78                            ; Subroutine to	scroll the level horizontally as Sonic moves
00008F78                            ; ---------------------------------------------------------------------------
00008F78                            
00008F78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F78                            
00008F78                            
00008F78                            ScrollHoriz:				; XREF: DeformBgLayer
00008F78 3838 F700                  		move.w	($FFFFF700).w,d4
00008F7C 6100                       		bsr.s	ScrollHoriz2
00008F7E 3038 F700                  		move.w	($FFFFF700).w,d0
00008F82 0240 0010                  		andi.w	#$10,d0
00008F86 1238 F74A                  		move.b	($FFFFF74A).w,d1
00008F8A B300                       		eor.b	d1,d0
00008F8C 6600                       		bne.s	locret_65B0
00008F8E 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00008F94 3038 F700                  		move.w	($FFFFF700).w,d0
00008F98 9044                       		sub.w	d4,d0
00008F9A 6A00                       		bpl.s	loc_65AA
00008F9C 08F8 0002 F754             		bset	#2,($FFFFF754).w
00008FA2 4E75                       		rts	
00008FA4                            ; ===========================================================================
00008FA4                            
00008FA4                            loc_65AA:
00008FA4 08F8 0003 F754             		bset	#3,($FFFFF754).w
00008FAA                            
00008FAA                            locret_65B0:
00008FAA 4E75                       		rts	
00008FAC                            ; End of function ScrollHoriz
00008FAC                            
00008FAC                            
00008FAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FAC                            
00008FAC                            
00008FAC                            ScrollHoriz2:				; XREF: ScrollHoriz
00008FAC 3038 D008                  		move.w	($FFFFD008).w,d0
00008FB0 9078 F700                  		sub.w	($FFFFF700).w,d0
00008FB4 0440 0090                  		subi.w	#$90,d0
00008FB8 6500                       		bcs.s	loc_65F6
00008FBA 0440 0010                  		subi.w	#$10,d0
00008FBE 6400                       		bcc.s	loc_65CC
00008FC0 4278 F73A                  		clr.w	($FFFFF73A).w
00008FC4 4E75                       		rts	
00008FC6                            ; ===========================================================================
00008FC6                            
00008FC6                            loc_65CC:
00008FC6 0C40 0010                  		cmpi.w	#$10,d0
00008FCA 6500                       		bcs.s	loc_65D6
00008FCC 303C 0010                  		move.w	#$10,d0
00008FD0                            
00008FD0                            loc_65D6:
00008FD0 D078 F700                  		add.w	($FFFFF700).w,d0
00008FD4 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00008FD8 6D00                       		blt.s	loc_65E4
00008FDA 3038 F72A                  		move.w	($FFFFF72A).w,d0
00008FDE                            
00008FDE                            loc_65E4:
00008FDE 3200                       		move.w	d0,d1
00008FE0 9278 F700                  		sub.w	($FFFFF700).w,d1
00008FE4 E141                       		asl.w	#8,d1
00008FE6 31C0 F700                  		move.w	d0,($FFFFF700).w
00008FEA 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00008FEE 4E75                       		rts	
00008FF0                            ; ===========================================================================
00008FF0                            
00008FF0                            loc_65F6:				; XREF: ScrollHoriz2
00008FF0 D078 F700                  		add.w	($FFFFF700).w,d0
00008FF4 B078 F728                  		cmp.w	($FFFFF728).w,d0
00008FF8 6EE4                       		bgt.s	loc_65E4
00008FFA 3038 F728                  		move.w	($FFFFF728).w,d0
00008FFE 60DE                       		bra.s	loc_65E4
00009000                            ; End of function ScrollHoriz2
00009000                            
00009000                            ; ===========================================================================
00009000 4A40                       		tst.w	d0
00009002 6A00                       		bpl.s	loc_6610
00009004 303C FFFE                  		move.w	#-2,d0
00009008 60E6                       		bra.s	loc_65F6
0000900A                            ; ===========================================================================
0000900A                            
0000900A                            loc_6610:
0000900A 303C 0002                  		move.w	#2,d0
0000900E 60B6                       		bra.s	loc_65CC
00009010                            
00009010                            ; ---------------------------------------------------------------------------
00009010                            ; Subroutine to	scroll the level vertically as Sonic moves
00009010                            ; ---------------------------------------------------------------------------
00009010                            
00009010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009010                            
00009010                            
00009010                            ScrollVertical:				; XREF: DeformBgLayer
00009010 7200                       		moveq	#0,d1
00009012 3038 D00C                  		move.w	($FFFFD00C).w,d0
00009016 9078 F704                  		sub.w	($FFFFF704).w,d0
0000901A 0838 0002 D022             		btst	#2,($FFFFD022).w
00009020 6700                       		beq.s	loc_662A
00009022 5B40                       		subq.w	#5,d0
00009024                            
00009024                            loc_662A:
00009024 0838 0001 D022             		btst	#1,($FFFFD022).w
0000902A 6700                       		beq.s	loc_664A
0000902C 0640 0020                  		addi.w	#$20,d0
00009030 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00009034 6500                       		bcs.s	loc_6696
00009036 0440 0040                  		subi.w	#$40,d0
0000903A 6400                       		bcc.s	loc_6696
0000903C 4A38 F75C                  		tst.b	($FFFFF75C).w
00009040 6600                       		bne.s	loc_66A8
00009042 6000                       		bra.s	loc_6656
00009044                            ; ===========================================================================
00009044                            
00009044                            loc_664A:
00009044 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00009048 6600                       		bne.s	loc_665C
0000904A 4A38 F75C                  		tst.b	($FFFFF75C).w
0000904E 6600                       		bne.s	loc_66A8
00009050                            
00009050                            loc_6656:
00009050 4278 F73C                  		clr.w	($FFFFF73C).w
00009054 4E75                       		rts	
00009056                            ; ===========================================================================
00009056                            
00009056                            loc_665C:
00009056 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
0000905C 6600                       		bne.s	loc_6684
0000905E 3238 D014                  		move.w	($FFFFD014).w,d1
00009062 6A00                       		bpl.s	loc_666C
00009064 4441                       		neg.w	d1
00009066                            
00009066                            loc_666C:
00009066 0C41 0800                  		cmpi.w	#$800,d1
0000906A 6400                       		bcc.s	loc_6696
0000906C 323C 0600                  		move.w	#$600,d1
00009070 0C40 0006                  		cmpi.w	#6,d0
00009074 6E00                       		bgt.s	loc_66F6
00009076 0C40 FFFA                  		cmpi.w	#-6,d0
0000907A 6D00                       		blt.s	loc_66C0
0000907C 6000                       		bra.s	loc_66AE
0000907E                            ; ===========================================================================
0000907E                            
0000907E                            loc_6684:
0000907E 323C 0200                  		move.w	#$200,d1
00009082 0C40 0002                  		cmpi.w	#2,d0
00009086 6E00                       		bgt.s	loc_66F6
00009088 0C40 FFFE                  		cmpi.w	#-2,d0
0000908C 6D00                       		blt.s	loc_66C0
0000908E 6000                       		bra.s	loc_66AE
00009090                            ; ===========================================================================
00009090                            
00009090                            loc_6696:
00009090 323C 1000                  		move.w	#$1000,d1
00009094 0C40 0010                  		cmpi.w	#$10,d0
00009098 6E00                       		bgt.s	loc_66F6
0000909A 0C40 FFF0                  		cmpi.w	#-$10,d0
0000909E 6D00                       		blt.s	loc_66C0
000090A0 6000                       		bra.s	loc_66AE
000090A2                            ; ===========================================================================
000090A2                            
000090A2                            loc_66A8:
000090A2 7000                       		moveq	#0,d0
000090A4 11C0 F75C                  		move.b	d0,($FFFFF75C).w
000090A8                            
000090A8                            loc_66AE:
000090A8 7200                       		moveq	#0,d1
000090AA 3200                       		move.w	d0,d1
000090AC D278 F704                  		add.w	($FFFFF704).w,d1
000090B0 4A40                       		tst.w	d0
000090B2 6A00 0000                  		bpl.w	loc_6700
000090B6 6000 0000                  		bra.w	loc_66CC
000090BA                            ; ===========================================================================
000090BA                            
000090BA                            loc_66C0:
000090BA 4441                       		neg.w	d1
000090BC 48C1                       		ext.l	d1
000090BE E181                       		asl.l	#8,d1
000090C0 D2B8 F704                  		add.l	($FFFFF704).w,d1
000090C4 4841                       		swap	d1
000090C6                            
000090C6                            loc_66CC:
000090C6 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
000090CA 6E00                       		bgt.s	loc_6724
000090CC 0C41 FF00                  		cmpi.w	#-$100,d1
000090D0 6E00                       		bgt.s	loc_66F0
000090D2 0241 07FF                  		andi.w	#$7FF,d1
000090D6 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000090DC 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
000090E2 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000090E8 6000                       		bra.s	loc_6724
000090EA                            ; ===========================================================================
000090EA                            
000090EA                            loc_66F0:
000090EA 3238 F72C                  		move.w	($FFFFF72C).w,d1
000090EE 6000                       		bra.s	loc_6724
000090F0                            ; ===========================================================================
000090F0                            
000090F0                            loc_66F6:
000090F0 48C1                       		ext.l	d1
000090F2 E181                       		asl.l	#8,d1
000090F4 D2B8 F704                  		add.l	($FFFFF704).w,d1
000090F8 4841                       		swap	d1
000090FA                            
000090FA                            loc_6700:
000090FA B278 F72E                  		cmp.w	($FFFFF72E).w,d1
000090FE 6D00                       		blt.s	loc_6724
00009100 0441 0800                  		subi.w	#$800,d1
00009104 6500                       		bcs.s	loc_6720
00009106 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0000910C 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00009112 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00009118 6000                       		bra.s	loc_6724
0000911A                            ; ===========================================================================
0000911A                            
0000911A                            loc_6720:
0000911A 3238 F72E                  		move.w	($FFFFF72E).w,d1
0000911E                            
0000911E                            loc_6724:
0000911E 3838 F704                  		move.w	($FFFFF704).w,d4
00009122 4841                       		swap	d1
00009124 2601                       		move.l	d1,d3
00009126 96B8 F704                  		sub.l	($FFFFF704).w,d3
0000912A E09B                       		ror.l	#8,d3
0000912C 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00009130 21C1 F704                  		move.l	d1,($FFFFF704).w
00009134 3038 F704                  		move.w	($FFFFF704).w,d0
00009138 0240 0010                  		andi.w	#$10,d0
0000913C 1238 F74B                  		move.b	($FFFFF74B).w,d1
00009140 B300                       		eor.b	d1,d0
00009142 6600                       		bne.s	locret_6766
00009144 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
0000914A 3038 F704                  		move.w	($FFFFF704).w,d0
0000914E 9044                       		sub.w	d4,d0
00009150 6A00                       		bpl.s	loc_6760
00009152 08F8 0000 F754             		bset	#0,($FFFFF754).w
00009158 4E75                       		rts	
0000915A                            ; ===========================================================================
0000915A                            
0000915A                            loc_6760:
0000915A 08F8 0001 F754             		bset	#1,($FFFFF754).w
00009160                            
00009160                            locret_6766:
00009160 4E75                       		rts	
00009162                            ; End of function ScrollVertical
00009162                            
00009162                            
00009162                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009162                            
00009162                            
00009162                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00009162 2438 F708                  		move.l	($FFFFF708).w,d2
00009166 2002                       		move.l	d2,d0
00009168 D084                       		add.l	d4,d0
0000916A 21C0 F708                  		move.l	d0,($FFFFF708).w
0000916E 2200                       		move.l	d0,d1
00009170 4841                       		swap	d1
00009172 0241 0010                  		andi.w	#$10,d1
00009176 1638 F74C                  		move.b	($FFFFF74C).w,d3
0000917A B701                       		eor.b	d3,d1
0000917C 6600                       		bne.s	loc_679C
0000917E 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00009184 9082                       		sub.l	d2,d0
00009186 6A00                       		bpl.s	loc_6796
00009188 08F8 0002 F756             		bset	#2,($FFFFF756).w
0000918E 6000                       		bra.s	loc_679C
00009190                            ; ===========================================================================
00009190                            
00009190                            loc_6796:
00009190 08F8 0003 F756             		bset	#3,($FFFFF756).w
00009196                            
00009196                            loc_679C:
00009196 2638 F70C                  		move.l	($FFFFF70C).w,d3
0000919A 2003                       		move.l	d3,d0
0000919C D085                       		add.l	d5,d0
0000919E 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000091A2 2200                       		move.l	d0,d1
000091A4 4841                       		swap	d1
000091A6 0241 0010                  		andi.w	#$10,d1
000091AA 1438 F74D                  		move.b	($FFFFF74D).w,d2
000091AE B501                       		eor.b	d2,d1
000091B0 6600                       		bne.s	locret_67D0
000091B2 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000091B8 9083                       		sub.l	d3,d0
000091BA 6A00                       		bpl.s	loc_67CA
000091BC 08F8 0000 F756             		bset	#0,($FFFFF756).w
000091C2 4E75                       		rts	
000091C4                            ; ===========================================================================
000091C4                            
000091C4                            loc_67CA:
000091C4 08F8 0001 F756             		bset	#1,($FFFFF756).w
000091CA                            
000091CA                            locret_67D0:
000091CA 4E75                       		rts	
000091CC                            ; End of function ScrollBlock1
000091CC                            
000091CC                            
000091CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091CC                            
000091CC                            
000091CC                            ScrollBlock2:				; XREF: Deform_SLZ
000091CC 2438 F708                  		move.l	($FFFFF708).w,d2
000091D0 2002                       		move.l	d2,d0
000091D2 D084                       		add.l	d4,d0
000091D4 21C0 F708                  		move.l	d0,($FFFFF708).w
000091D8 2638 F70C                  		move.l	($FFFFF70C).w,d3
000091DC 2003                       		move.l	d3,d0
000091DE D085                       		add.l	d5,d0
000091E0 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000091E4 2200                       		move.l	d0,d1
000091E6 4841                       		swap	d1
000091E8 0241 0010                  		andi.w	#$10,d1
000091EC 1438 F74D                  		move.b	($FFFFF74D).w,d2
000091F0 B501                       		eor.b	d2,d1
000091F2 6600                       		bne.s	locret_6812
000091F4 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000091FA 9083                       		sub.l	d3,d0
000091FC 6A00                       		bpl.s	loc_680C
000091FE 08F8 0000 F756             		bset	#0,($FFFFF756).w
00009204 4E75                       		rts	
00009206                            ; ===========================================================================
00009206                            
00009206                            loc_680C:
00009206 08F8 0001 F756             		bset	#1,($FFFFF756).w
0000920C                            
0000920C                            locret_6812:
0000920C 4E75                       		rts	
0000920E                            ; End of function ScrollBlock2
0000920E                            
0000920E                            
0000920E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000920E                            
0000920E                            
0000920E                            ScrollBlock3:				; XREF: Deform_GHZ; et al
0000920E 3638 F70C                  		move.w	($FFFFF70C).w,d3
00009212 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00009216 3200                       		move.w	d0,d1
00009218 0241 0010                  		andi.w	#$10,d1
0000921C 1438 F74D                  		move.b	($FFFFF74D).w,d2
00009220 B501                       		eor.b	d2,d1
00009222 6600                       		bne.s	locret_6842
00009224 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000922A 9043                       		sub.w	d3,d0
0000922C 6A00                       		bpl.s	loc_683C
0000922E 08F8 0000 F756             		bset	#0,($FFFFF756).w
00009234 4E75                       		rts	
00009236                            ; ===========================================================================
00009236                            
00009236                            loc_683C:
00009236 08F8 0001 F756             		bset	#1,($FFFFF756).w
0000923C                            
0000923C                            locret_6842:
0000923C 4E75                       		rts	
0000923E                            ; End of function ScrollBlock3
0000923E                            
0000923E                            
0000923E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000923E                            
0000923E                            
0000923E                            ScrollBlock4:				; XREF: Deform_GHZ
0000923E 3438 F710                  		move.w	($FFFFF710).w,d2
00009242 3638 F714                  		move.w	($FFFFF714).w,d3
00009246 3038 F73A                  		move.w	($FFFFF73A).w,d0
0000924A 48C0                       		ext.l	d0
0000924C EF80                       		asl.l	#7,d0
0000924E D1B8 F710                  		add.l	d0,($FFFFF710).w
00009252 3038 F710                  		move.w	($FFFFF710).w,d0
00009256 0240 0010                  		andi.w	#$10,d0
0000925A 1238 F74E                  		move.b	($FFFFF74E).w,d1
0000925E B300                       		eor.b	d1,d0
00009260 6600                       		bne.s	locret_6884
00009262 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00009268 3038 F710                  		move.w	($FFFFF710).w,d0
0000926C 9042                       		sub.w	d2,d0
0000926E 6A00                       		bpl.s	loc_687E
00009270 08F8 0002 F758             		bset	#2,($FFFFF758).w
00009276 6000                       		bra.s	locret_6884
00009278                            ; ===========================================================================
00009278                            
00009278                            loc_687E:
00009278 08F8 0003 F758             		bset	#3,($FFFFF758).w
0000927E                            
0000927E                            locret_6884:
0000927E 4E75                       		rts	
00009280                            ; End of function ScrollBlock4
00009280                            
00009280                            
00009280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009280                            
00009280                            
00009280                            sub_6886:				; XREF: VBlank_Sub04
00009280 4BF9 00C0 0004             		lea	($C00004).l,a5
00009286 4DF9 00C0 0000             		lea	($C00000).l,a6
0000928C 45F8 F756                  		lea	($FFFFF756).w,a2
00009290 47F8 F708                  		lea	($FFFFF708).w,a3
00009294 49F8 A440                  		lea	($FFFFA440).w,a4
00009298 343C 6000                  		move.w	#$6000,d2
0000929C 6100 0000                  		bsr.w	sub_6954
000092A0 45F8 F758                  		lea	($FFFFF758).w,a2
000092A4 47F8 F710                  		lea	($FFFFF710).w,a3
000092A8 6000 0000                  		bra.w	sub_69F4
000092AC                            ; End of function sub_6886
000092AC                            
000092AC                            ; ---------------------------------------------------------------------------
000092AC                            ; Subroutine to	display	correct	tiles as you move
000092AC                            ; ---------------------------------------------------------------------------
000092AC                            
000092AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000092AC                            
000092AC                            
000092AC                            LoadTilesAsYouMove:			; XREF: Demo_Time
000092AC 4BF9 00C0 0004             		lea	($C00004).l,a5
000092B2 4DF9 00C0 0000             		lea	($C00000).l,a6
000092B8 45F8 FF32                  		lea	($FFFFFF32).w,a2
000092BC 47F8 FF18                  		lea	($FFFFFF18).w,a3
000092C0 49F8 A440                  		lea	($FFFFA440).w,a4
000092C4 343C 6000                  		move.w	#$6000,d2
000092C8 6100 0000                  		bsr.w	sub_6954
000092CC 45F8 FF34                  		lea	($FFFFFF34).w,a2
000092D0 47F8 FF20                  		lea	($FFFFFF20).w,a3
000092D4 6100 0000                  		bsr.w	sub_69F4
000092D8 45F8 FF30                  		lea	($FFFFFF30).w,a2
000092DC 47F8 FF10                  		lea	($FFFFFF10).w,a3
000092E0 49F8 A400                  		lea	($FFFFA400).w,a4
000092E4 343C 4000                  		move.w	#$4000,d2
000092E8 4A12                       		tst.b	(a2)
000092EA 6700                       		beq.s	locret_6952
000092EC 0892 0000                  		bclr	#0,(a2)
000092F0 6700                       		beq.s	loc_6908
000092F2 78F0                       		moveq	#-$10,d4
000092F4 7AF0                       		moveq	#-$10,d5
000092F6 6100 0000                  		bsr.w	sub_6C20
000092FA 78F0                       		moveq	#-$10,d4
000092FC 7AF0                       		moveq	#-$10,d5
000092FE 6100 0000                  		bsr.w	sub_6AD8
00009302                            
00009302                            loc_6908:
00009302 0892 0001                  		bclr	#1,(a2)
00009306 6700                       		beq.s	loc_6922
00009308 383C 00E0                  		move.w	#$E0,d4
0000930C 7AF0                       		moveq	#-$10,d5
0000930E 6100 0000                  		bsr.w	sub_6C20
00009312 383C 00E0                  		move.w	#$E0,d4
00009316 7AF0                       		moveq	#-$10,d5
00009318 6100 0000                  		bsr.w	sub_6AD8
0000931C                            
0000931C                            loc_6922:
0000931C 0892 0002                  		bclr	#2,(a2)
00009320 6700                       		beq.s	loc_6938
00009322 78F0                       		moveq	#-$10,d4
00009324 7AF0                       		moveq	#-$10,d5
00009326 6100 0000                  		bsr.w	sub_6C20
0000932A 78F0                       		moveq	#-$10,d4
0000932C 7AF0                       		moveq	#-$10,d5
0000932E 6100 0000                  		bsr.w	sub_6B04
00009332                            
00009332                            loc_6938:
00009332 0892 0003                  		bclr	#3,(a2)
00009336 6700                       		beq.s	locret_6952
00009338 78F0                       		moveq	#-$10,d4
0000933A 3A3C 0140                  		move.w	#$140,d5
0000933E 6100 0000                  		bsr.w	sub_6C20
00009342 78F0                       		moveq	#-$10,d4
00009344 3A3C 0140                  		move.w	#$140,d5
00009348 6100 0000                  		bsr.w	sub_6B04
0000934C                            
0000934C                            locret_6952:
0000934C 4E75                       		rts	
0000934E                            ; End of function LoadTilesAsYouMove
0000934E                            
0000934E                            
0000934E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000934E                            
0000934E                            
0000934E                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
0000934E 4A12                       		tst.b	(a2)
00009350 6700 0000                  		beq.w	locret_69F2
00009354 0892 0000                  		bclr	#0,(a2)
00009358 6700                       		beq.s	loc_6972
0000935A 78F0                       		moveq	#-$10,d4
0000935C 7AF0                       		moveq	#-$10,d5
0000935E 6100 0000                  		bsr.w	sub_6C20
00009362 78F0                       		moveq	#-$10,d4
00009364 7AF0                       		moveq	#-$10,d5
00009366 7C1F                       		moveq	#$1F,d6
00009368 6100 0000                  		bsr.w	sub_6ADA
0000936C                            
0000936C                            loc_6972:
0000936C 0892 0001                  		bclr	#1,(a2)
00009370 6700                       		beq.s	loc_698E
00009372 383C 00E0                  		move.w	#$E0,d4
00009376 7AF0                       		moveq	#-$10,d5
00009378 6100 0000                  		bsr.w	sub_6C20
0000937C 383C 00E0                  		move.w	#$E0,d4
00009380 7AF0                       		moveq	#-$10,d5
00009382 7C1F                       		moveq	#$1F,d6
00009384 6100 0000                  		bsr.w	sub_6ADA
00009388                            
00009388                            loc_698E:
00009388 0892 0002                  		bclr	#2,(a2)
0000938C 6700                       		beq.s	loc_69BE
0000938E 78F0                       		moveq	#-$10,d4
00009390 7AF0                       		moveq	#-$10,d5
00009392 6100 0000                  		bsr.w	sub_6C20
00009396 78F0                       		moveq	#-$10,d4
00009398 7AF0                       		moveq	#-$10,d5
0000939A 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000939E 322B 0004                  		move.w	4(a3),d1
000093A2 0241 FFF0                  		andi.w	#-$10,d1
000093A6 9C41                       		sub.w	d1,d6
000093A8 6D00                       		blt.s	loc_69BE
000093AA E84E                       		lsr.w	#4,d6
000093AC 0C46 000F                  		cmpi.w	#$F,d6
000093B0 6500                       		bcs.s	loc_69BA
000093B2 7C0F                       		moveq	#$F,d6
000093B4                            
000093B4                            loc_69BA:
000093B4 6100 0000                  		bsr.w	sub_6B06
000093B8                            
000093B8                            loc_69BE:
000093B8 0892 0003                  		bclr	#3,(a2)
000093BC 6700                       		beq.s	locret_69F2
000093BE 78F0                       		moveq	#-$10,d4
000093C0 3A3C 0140                  		move.w	#$140,d5
000093C4 6100 0000                  		bsr.w	sub_6C20
000093C8 78F0                       		moveq	#-$10,d4
000093CA 3A3C 0140                  		move.w	#$140,d5
000093CE 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000093D2 322B 0004                  		move.w	4(a3),d1
000093D6 0241 FFF0                  		andi.w	#-$10,d1
000093DA 9C41                       		sub.w	d1,d6
000093DC 6D00                       		blt.s	locret_69F2
000093DE E84E                       		lsr.w	#4,d6
000093E0 0C46 000F                  		cmpi.w	#$F,d6
000093E4 6500                       		bcs.s	loc_69EE
000093E6 7C0F                       		moveq	#$F,d6
000093E8                            
000093E8                            loc_69EE:
000093E8 6100 0000                  		bsr.w	sub_6B06
000093EC                            
000093EC                            locret_69F2:
000093EC 4E75                       		rts	
000093EE                            ; End of function sub_6954
000093EE                            
000093EE                            
000093EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000093EE                            
000093EE                            
000093EE                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
000093EE 4A12                       		tst.b	(a2)
000093F0 6700 0000                  		beq.w	locret_6A80
000093F4 0892 0002                  		bclr	#2,(a2)
000093F8 6700                       		beq.s	loc_6A3E
000093FA 0C53 0010                  		cmpi.w	#$10,(a3)
000093FE 6500                       		bcs.s	loc_6A3E
00009400 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00009404 322B 0004                  		move.w	4(a3),d1
00009408 0241 FFF0                  		andi.w	#-$10,d1
0000940C 9841                       		sub.w	d1,d4
0000940E 3F04                       		move.w	d4,-(sp)
00009410 7AF0                       		moveq	#-$10,d5
00009412 6100 0000                  		bsr.w	sub_6C20
00009416 381F                       		move.w	(sp)+,d4
00009418 7AF0                       		moveq	#-$10,d5
0000941A 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000941E 322B 0004                  		move.w	4(a3),d1
00009422 0241 FFF0                  		andi.w	#-$10,d1
00009426 9C41                       		sub.w	d1,d6
00009428 6D00                       		blt.s	loc_6A3E
0000942A E84E                       		lsr.w	#4,d6
0000942C 0446 000E                  		subi.w	#$E,d6
00009430 6400                       		bcc.s	loc_6A3E
00009432 4446                       		neg.w	d6
00009434 6100 0000                  		bsr.w	sub_6B06
00009438                            
00009438                            loc_6A3E:
00009438 0892 0003                  		bclr	#3,(a2)
0000943C 6700                       		beq.s	locret_6A80
0000943E 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00009442 322B 0004                  		move.w	4(a3),d1
00009446 0241 FFF0                  		andi.w	#-$10,d1
0000944A 9841                       		sub.w	d1,d4
0000944C 3F04                       		move.w	d4,-(sp)
0000944E 3A3C 0140                  		move.w	#$140,d5
00009452 6100 0000                  		bsr.w	sub_6C20
00009456 381F                       		move.w	(sp)+,d4
00009458 3A3C 0140                  		move.w	#$140,d5
0000945C 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00009460 322B 0004                  		move.w	4(a3),d1
00009464 0241 FFF0                  		andi.w	#-$10,d1
00009468 9C41                       		sub.w	d1,d6
0000946A 6D00                       		blt.s	locret_6A80
0000946C E84E                       		lsr.w	#4,d6
0000946E 0446 000E                  		subi.w	#$E,d6
00009472 6400                       		bcc.s	locret_6A80
00009474 4446                       		neg.w	d6
00009476 6100 0000                  		bsr.w	sub_6B06
0000947A                            
0000947A                            locret_6A80:
0000947A 4E75                       		rts	
0000947C                            ; End of function sub_69F4
0000947C                            
0000947C                            ; ===========================================================================
0000947C 4A12                       		tst.b	(a2)
0000947E 6700                       		beq.s	locret_6AD6
00009480 0892 0002                  		bclr	#2,(a2)
00009484 6700                       		beq.s	loc_6AAC
00009486 383C 00D0                  		move.w	#$D0,d4
0000948A 322B 0004                  		move.w	4(a3),d1
0000948E 0241 FFF0                  		andi.w	#-$10,d1
00009492 9841                       		sub.w	d1,d4
00009494 3F04                       		move.w	d4,-(sp)
00009496 7AF0                       		moveq	#-$10,d5
00009498 6100 0000                  		bsr.w	sub_6C3C
0000949C 381F                       		move.w	(sp)+,d4
0000949E 7AF0                       		moveq	#-$10,d5
000094A0 7C02                       		moveq	#2,d6
000094A2 6100 0000                  		bsr.w	sub_6B06
000094A6                            
000094A6                            loc_6AAC:
000094A6 0892 0003                  		bclr	#3,(a2)
000094AA 6700                       		beq.s	locret_6AD6
000094AC 383C 00D0                  		move.w	#$D0,d4
000094B0 322B 0004                  		move.w	4(a3),d1
000094B4 0241 FFF0                  		andi.w	#-$10,d1
000094B8 9841                       		sub.w	d1,d4
000094BA 3F04                       		move.w	d4,-(sp)
000094BC 3A3C 0140                  		move.w	#$140,d5
000094C0 6100 0000                  		bsr.w	sub_6C3C
000094C4 381F                       		move.w	(sp)+,d4
000094C6 3A3C 0140                  		move.w	#$140,d5
000094CA 7C02                       		moveq	#2,d6
000094CC 6100 0000                  		bsr.w	sub_6B06
000094D0                            
000094D0                            locret_6AD6:
000094D0 4E75                       		rts	
000094D2                            
000094D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000094D2                            
000094D2                            
000094D2                            sub_6AD8:				; XREF: LoadTilesAsYouMove
000094D2 7C15                       		moveq	#$15,d6
000094D4                            ; End of function sub_6AD8
000094D4                            
000094D4                            
000094D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000094D4                            
000094D4                            
000094D4                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
000094D4 2E3C 0080 0000             		move.l	#$800000,d7
000094DA 2200                       		move.l	d0,d1
000094DC                            
000094DC                            loc_6AE2:
000094DC 48E7 0C00                  		movem.l	d4-d5,-(sp)
000094E0 6100 0000                  		bsr.w	sub_6BD6
000094E4 2001                       		move.l	d1,d0
000094E6 6100 0000                  		bsr.w	sub_6B32
000094EA 5801                       		addq.b	#4,d1
000094EC 0201 007F                  		andi.b	#$7F,d1
000094F0 4CDF 0030                  		movem.l	(sp)+,d4-d5
000094F4 0645 0010                  		addi.w	#$10,d5
000094F8 51CE FFE2                  		dbf	d6,loc_6AE2
000094FC 4E75                       		rts	
000094FE                            ; End of function sub_6ADA
000094FE                            
000094FE                            
000094FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000094FE                            
000094FE                            
000094FE                            sub_6B04:				; XREF: LoadTilesAsYouMove
000094FE 7C0F                       		moveq	#$F,d6
00009500                            ; End of function sub_6B04
00009500                            
00009500                            
00009500                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009500                            
00009500                            
00009500                            sub_6B06:				; XREF: sub_6954
00009500 2E3C 0080 0000             		move.l	#$800000,d7
00009506 2200                       		move.l	d0,d1
00009508                            
00009508                            loc_6B0E:
00009508 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000950C 6100 0000                  		bsr.w	sub_6BD6
00009510 2001                       		move.l	d1,d0
00009512 6100 0000                  		bsr.w	sub_6B32
00009516 0641 0100                  		addi.w	#$100,d1
0000951A 0241 0FFF                  		andi.w	#$FFF,d1
0000951E 4CDF 0030                  		movem.l	(sp)+,d4-d5
00009522 0644 0010                  		addi.w	#$10,d4
00009526 51CE FFE0                  		dbf	d6,loc_6B0E
0000952A 4E75                       		rts	
0000952C                            ; End of function sub_6B06
0000952C                            
0000952C                            
0000952C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000952C                            
0000952C                            
0000952C                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
0000952C 8042                       		or.w	d2,d0
0000952E 4840                       		swap	d0
00009530 0810 0004                  		btst	#4,(a0)
00009534 6600                       		bne.s	loc_6B6E
00009536 0810 0003                  		btst	#3,(a0)
0000953A 6600                       		bne.s	loc_6B4E
0000953C 2A80                       		move.l	d0,(a5)
0000953E 2C99                       		move.l	(a1)+,(a6)
00009540 D087                       		add.l	d7,d0
00009542 2A80                       		move.l	d0,(a5)
00009544 2C99                       		move.l	(a1)+,(a6)
00009546 4E75                       		rts	
00009548                            ; ===========================================================================
00009548                            
00009548                            loc_6B4E:
00009548 2A80                       		move.l	d0,(a5)
0000954A 2819                       		move.l	(a1)+,d4
0000954C 0A84 0800 0800             		eori.l	#$8000800,d4
00009552 4844                       		swap	d4
00009554 2C84                       		move.l	d4,(a6)
00009556 D087                       		add.l	d7,d0
00009558 2A80                       		move.l	d0,(a5)
0000955A 2819                       		move.l	(a1)+,d4
0000955C 0A84 0800 0800             		eori.l	#$8000800,d4
00009562 4844                       		swap	d4
00009564 2C84                       		move.l	d4,(a6)
00009566 4E75                       		rts	
00009568                            ; ===========================================================================
00009568                            
00009568                            loc_6B6E:
00009568 0810 0003                  		btst	#3,(a0)
0000956C 6600                       		bne.s	loc_6B90
0000956E 2A80                       		move.l	d0,(a5)
00009570 2A19                       		move.l	(a1)+,d5
00009572 2819                       		move.l	(a1)+,d4
00009574 0A84 1000 1000             		eori.l	#$10001000,d4
0000957A 2C84                       		move.l	d4,(a6)
0000957C D087                       		add.l	d7,d0
0000957E 2A80                       		move.l	d0,(a5)
00009580 0A85 1000 1000             		eori.l	#$10001000,d5
00009586 2C85                       		move.l	d5,(a6)
00009588 4E75                       		rts	
0000958A                            ; ===========================================================================
0000958A                            
0000958A                            loc_6B90:
0000958A 2A80                       		move.l	d0,(a5)
0000958C 2A19                       		move.l	(a1)+,d5
0000958E 2819                       		move.l	(a1)+,d4
00009590 0A84 1800 1800             		eori.l	#$18001800,d4
00009596 4844                       		swap	d4
00009598 2C84                       		move.l	d4,(a6)
0000959A D087                       		add.l	d7,d0
0000959C 2A80                       		move.l	d0,(a5)
0000959E 0A85 1800 1800             		eori.l	#$18001800,d5
000095A4 4845                       		swap	d5
000095A6 2C85                       		move.l	d5,(a6)
000095A8 4E75                       		rts	
000095AA                            ; End of function sub_6B32
000095AA                            
000095AA                            ; ===========================================================================
000095AA 4E75                       		rts	
000095AC                            ; ===========================================================================
000095AC 2A80                       		move.l	d0,(a5)
000095AE 3A3C 2000                  		move.w	#$2000,d5
000095B2 3819                       		move.w	(a1)+,d4
000095B4 D845                       		add.w	d5,d4
000095B6 3C84                       		move.w	d4,(a6)
000095B8 3819                       		move.w	(a1)+,d4
000095BA D845                       		add.w	d5,d4
000095BC 3C84                       		move.w	d4,(a6)
000095BE D087                       		add.l	d7,d0
000095C0 2A80                       		move.l	d0,(a5)
000095C2 3819                       		move.w	(a1)+,d4
000095C4 D845                       		add.w	d5,d4
000095C6 3C84                       		move.w	d4,(a6)
000095C8 3819                       		move.w	(a1)+,d4
000095CA D845                       		add.w	d5,d4
000095CC 3C84                       		move.w	d4,(a6)
000095CE 4E75                       		rts	
000095D0                            
000095D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000095D0                            
000095D0                            
000095D0                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
000095D0 43F8 B000                  		lea	($FFFFB000).w,a1
000095D4 D86B 0004                  		add.w	4(a3),d4
000095D8 DA53                       		add.w	(a3),d5
000095DA 3604                       		move.w	d4,d3
000095DC E24B                       		lsr.w	#1,d3
000095DE 0243 0380                  		andi.w	#$380,d3
000095E2 E64D                       		lsr.w	#3,d5
000095E4 3005                       		move.w	d5,d0
000095E6 EA48                       		lsr.w	#5,d0
000095E8 0240 007F                  		andi.w	#$7F,d0
000095EC D043                       		add.w	d3,d0
000095EE 76FF                       		moveq	#-1,d3
000095F0 1634 0000                  		move.b	(a4,d0.w),d3
000095F4 6700                       		beq.s	locret_6C1E
000095F6 5303                       		subq.b	#1,d3
000095F8 0243 007F                  		andi.w	#$7F,d3
000095FC EE5B                       		ror.w	#7,d3
000095FE D844                       		add.w	d4,d4
00009600 0244 01E0                  		andi.w	#$1E0,d4
00009604 0245 001E                  		andi.w	#$1E,d5
00009608 D644                       		add.w	d4,d3
0000960A D645                       		add.w	d5,d3
0000960C 2043                       		movea.l	d3,a0
0000960E 3610                       		move.w	(a0),d3
00009610 0243 03FF                  		andi.w	#$3FF,d3
00009614 E74B                       		lsl.w	#3,d3
00009616 D2C3                       		adda.w	d3,a1
00009618                            
00009618                            locret_6C1E:
00009618 4E75                       		rts	
0000961A                            ; End of function sub_6BD6
0000961A                            
0000961A                            
0000961A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000961A                            
0000961A                            
0000961A                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
0000961A D86B 0004                  		add.w	4(a3),d4
0000961E DA53                       		add.w	(a3),d5
00009620 0244 00F0                  		andi.w	#$F0,d4
00009624 0245 01F0                  		andi.w	#$1F0,d5
00009628 E94C                       		lsl.w	#4,d4
0000962A E44D                       		lsr.w	#2,d5
0000962C D845                       		add.w	d5,d4
0000962E 7003                       		moveq	#3,d0
00009630 4840                       		swap	d0
00009632 3004                       		move.w	d4,d0
00009634 4E75                       		rts	
00009636                            ; End of function sub_6C20
00009636                            
00009636                            
00009636                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009636                            ; not used
00009636                            
00009636                            
00009636                            sub_6C3C:
00009636 D86B 0004                  		add.w	4(a3),d4
0000963A DA53                       		add.w	(a3),d5
0000963C 0244 00F0                  		andi.w	#$F0,d4
00009640 0245 01F0                  		andi.w	#$1F0,d5
00009644 E94C                       		lsl.w	#4,d4
00009646 E44D                       		lsr.w	#2,d5
00009648 D845                       		add.w	d5,d4
0000964A 7002                       		moveq	#2,d0
0000964C 4840                       		swap	d0
0000964E 3004                       		move.w	d4,d0
00009650 4E75                       		rts	
00009652                            ; End of function sub_6C3C
00009652                            
00009652                            ; ---------------------------------------------------------------------------
00009652                            ; Subroutine to	load tiles as soon as the level	appears
00009652                            ; ---------------------------------------------------------------------------
00009652                            
00009652                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009652                            
00009652                            
00009652                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00009652 4BF9 00C0 0004             		lea	($C00004).l,a5
00009658 4DF9 00C0 0000             		lea	($C00000).l,a6
0000965E 47F8 F700                  		lea	($FFFFF700).w,a3
00009662 49F8 A400                  		lea	($FFFFA400).w,a4
00009666 343C 4000                  		move.w	#$4000,d2
0000966A 6100                       		bsr.s	LoadTilesFromStart2
0000966C 47F8 F708                  		lea	($FFFFF708).w,a3
00009670 49F8 A440                  		lea	($FFFFA440).w,a4
00009674 343C 6000                  		move.w	#$6000,d2
00009678                            ; End of function LoadTilesFromStart
00009678                            
00009678                            
00009678                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009678                            
00009678                            
00009678                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00009678 78F0                       		moveq	#-$10,d4
0000967A 7C0F                       		moveq	#$F,d6
0000967C                            
0000967C                            loc_6C82:
0000967C 48E7 0E00                  		movem.l	d4-d6,-(sp)
00009680 7A00                       		moveq	#0,d5
00009682 3204                       		move.w	d4,d1
00009684 6100 FF94                  		bsr.w	sub_6C20
00009688 3801                       		move.w	d1,d4
0000968A 7A00                       		moveq	#0,d5
0000968C 7C1F                       		moveq	#$1F,d6
0000968E 6100 FE44                  		bsr.w	sub_6ADA
00009692 4CDF 0070                  		movem.l	(sp)+,d4-d6
00009696 0644 0010                  		addi.w	#$10,d4
0000969A 51CE FFE0                  		dbf	d6,loc_6C82
0000969E 4E75                       		rts	
000096A0                            ; End of function LoadTilesFromStart2
000096A0                            
000096A0                            ; ---------------------------------------------------------------------------
000096A0                            ; Main Load Block loading subroutine
000096A0                            ; ---------------------------------------------------------------------------
000096A0                            
000096A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000096A0                            
000096A0                            
000096A0                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
000096A0 7000                       		moveq	#0,d0
000096A2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000096A6 E948                       		lsl.w	#4,d0
000096A8 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000096AE 45F2 0000                  		lea	(a2,d0.w),a2
000096B2 2F0A                       		move.l	a2,-(sp)
000096B4 588A                       		addq.l	#4,a2
000096B6 205A                       		movea.l	(a2)+,a0
000096B8 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
000096BC 303C 0000                  		move.w	#0,d0
000096C0 4EB8 16DC                  		jsr	EniDec
000096C4 205A                       		movea.l	(a2)+,a0
000096C6 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
000096CC 6100 818C                  		bsr.w	KosDec
000096D0 6100 0000                  		bsr.w	LevelLayoutLoad
000096D4 301A                       		move.w	(a2)+,d0
000096D6 3012                       		move.w	(a2),d0
000096D8 0240 00FF                  		andi.w	#$FF,d0
000096DC 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
000096E2 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
000096E4 700C                       		moveq	#$C,d0		; use SB3 pallet
000096E6                            
000096E6                            MLB_ChkSBZPal:
000096E6 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
000096EC 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
000096EE 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000096F4 6600                       		bne.s	MLB_NormalPal	; if not, branch
000096F6                            
000096F6                            MLB_UsePal0E:
000096F6 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
000096F8                            
000096F8                            MLB_NormalPal:
000096F8 6100 8970                  		bsr.w	PalLoad1	; load pallet (based on	d0)
000096FC 245F                       		movea.l	(sp)+,a2
000096FE 584A                       		addq.w	#4,a2
00009700 7000                       		moveq	#0,d0
00009702 1012                       		move.b	(a2),d0
00009704 6700                       		beq.s	locret_6D10
00009706 4EB8 153E                  		jsr	LoadPLC		; load pattern load cues
0000970A                            
0000970A                            locret_6D10:
0000970A 4E75                       		rts	
0000970C                            ; End of function MainLoadBlockLoad
0000970C                            
0000970C                            ; ---------------------------------------------------------------------------
0000970C                            ; Level	layout loading subroutine
0000970C                            ; ---------------------------------------------------------------------------
0000970C                            
0000970C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000970C                            
0000970C                            
0000970C                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
0000970C 47F8 A400                  		lea	($FFFFA400).w,a3
00009710 323C 01FF                  		move.w	#$1FF,d1
00009714 7000                       		moveq	#0,d0
00009716                            
00009716                            LevLoad_ClrRam:
00009716 26C0                       		move.l	d0,(a3)+
00009718 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
0000971C                            
0000971C 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00009720 7200                       		moveq	#0,d1
00009722 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00009726 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
0000972A 7202                       		moveq	#2,d1
0000972C                            ; End of function LevelLayoutLoad
0000972C                            
0000972C                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
0000972C                            
0000972C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000972C                            
0000972C                            
0000972C                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
0000972C 3038 FE10                  		move.w	($FFFFFE10).w,d0
00009730 ED08                       		lsl.b	#6,d0
00009732 EA48                       		lsr.w	#5,d0
00009734 3400                       		move.w	d0,d2
00009736 D040                       		add.w	d0,d0
00009738 D042                       		add.w	d2,d0
0000973A D041                       		add.w	d1,d0
0000973C 43F9 0000 0000             		lea	(Level_Index).l,a1
00009742 3031 0000                  		move.w	(a1,d0.w),d0
00009746 43F1 0000                  		lea	(a1,d0.w),a1
0000974A 7200                       		moveq	#0,d1
0000974C 3401                       		move.w	d1,d2
0000974E 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00009750 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00009752                            
00009752                            LevLoad_NumRows:
00009752 3001                       		move.w	d1,d0
00009754 204B                       		movea.l	a3,a0
00009756                            
00009756                            LevLoad_Row:
00009756 10D9                       		move.b	(a1)+,(a0)+
00009758 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
0000975C 47EB 0080                  		lea	$80(a3),a3	; do next row
00009760 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00009764 4E75                       		rts	
00009766                            ; End of function LevelLayoutLoad2
00009766                            
00009766                            ; ---------------------------------------------------------------------------
00009766                            ; Dynamic screen resize	loading	subroutine
00009766                            ; ---------------------------------------------------------------------------
00009766                            
00009766                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009766                            
00009766                            
00009766                            DynScrResizeLoad:			; XREF: DeformBgLayer
00009766 7000                       		moveq	#0,d0
00009768 1038 FE10                  		move.b	($FFFFFE10).w,d0	; load zone id
0000976C D040                       		add.w	d0,d0			; double it
0000976E 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00009772 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)	; run routine depending on current zone
00009776 7202                       		moveq	#2,d1
00009778 3038 F726                  		move.w	($FFFFF726).w,d0
0000977C 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00009780 6700                       		beq.s	locret_6DAA
00009782 6400                       		bcc.s	loc_6DAC
00009784 4441                       		neg.w	d1
00009786 3038 F704                  		move.w	($FFFFF704).w,d0
0000978A B078 F726                  		cmp.w	($FFFFF726).w,d0
0000978E 6300                       		bls.s	loc_6DA0
00009790 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00009794 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
0000979A                            
0000979A                            loc_6DA0:
0000979A D378 F72E                  		add.w	d1,($FFFFF72E).w
0000979E 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000097A4                            
000097A4                            locret_6DAA:
000097A4 4E75                       		rts	
000097A6                            ; ===========================================================================
000097A6                            
000097A6                            loc_6DAC:				; XREF: DynScrResizeLoad
000097A6 3038 F704                  		move.w	($FFFFF704).w,d0
000097AA 5040                       		addq.w	#8,d0
000097AC B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000097B0 6500                       		bcs.s	loc_6DC4
000097B2 0838 0001 D022             		btst	#1,($FFFFD022).w
000097B8 6700                       		beq.s	loc_6DC4
000097BA D241                       		add.w	d1,d1
000097BC D241                       		add.w	d1,d1
000097BE                            
000097BE                            loc_6DC4:
000097BE D378 F72E                  		add.w	d1,($FFFFF72E).w
000097C2 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000097C8 4E75                       		rts	
000097CA                            ; End of function DynScrResizeLoad
000097CA                            
000097CA                            ; ===========================================================================
000097CA                            ; ---------------------------------------------------------------------------
000097CA                            ; Offset index for dynamic screen resizing
000097CA                            ; ---------------------------------------------------------------------------
000097CA 0000                       Resize_Index:	dc.w Resize_GHZ-Resize_Index
000097CC 0000                       		dc.w Resize_LZ-Resize_Index
000097CE 0000                       		dc.w Resize_MZ-Resize_Index
000097D0 0000                       		dc.w Resize_SLZ-Resize_Index
000097D2 0000                       		dc.w Resize_SYZ-Resize_Index
000097D4 0000                       		dc.w Resize_SBZ-Resize_Index
000097D6 0000                       		dc.w Resize_Ending-Resize_Index
000097D8                            
000097D8                            ; ===========================================================================
000097D8                            ; ---------------------------------------------------------------------------
000097D8                            ; Green	Hill Zone dynamic screen resizing
000097D8                            ; ---------------------------------------------------------------------------
000097D8                            
000097D8                            Resize_GHZ:				; XREF: Resize_Index
000097D8 7000                       		moveq	#0,d0
000097DA 1038 FE11                  		move.b	($FFFFFE11).w,d0
000097DE D040                       		add.w	d0,d0
000097E0 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
000097E4 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
000097E8                            ; ===========================================================================
000097E8 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
000097EA 0000                       		dc.w Resize_GHZ2-Resize_GHZx
000097EC 0000                       		dc.w Resize_GHZ3-Resize_GHZx
000097EE                            ; ===========================================================================
000097EE                            
000097EE                            Resize_GHZ1:
000097EE 31FC 0300 F726             		move.w	#$300,($FFFFF726).w	; set lower y-boundary
000097F4 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w	; has the camera reached $1780 on x-axis?
000097FA 6500                       		bcs.s	locret_6E08		; if not, branch
000097FC 31FC 0400 F726             		move.w	#$400,($FFFFF726).w	; set lower y-boundary
00009802                            
00009802                            locret_6E08:
00009802 4E75                       		rts	
00009804                            ; ===========================================================================
00009804                            
00009804                            Resize_GHZ2:
00009804 0C38 0001 FF8D             		cmpi.b	#$01,($FFFFFF8D).w
0000980A 6600                                       bne.s   locret_urded
0000980C 11FC 0000 FF8D                             move.b	#$00,($FFFFFF8D).w
00009812 303C 0200                  		move.w #$200,d0 ; íóæíàÿ ïîçèöèÿ êàìåðû.
00009816 31C0 F726                  		move.w d0,($FFFFF726).w
0000981A 31C0 F72C                  		move.w d0,($FFFFF72C).w
0000981E 6100 0000                                  bsr.w	SingleObjLoad
00009822 6600                       		bne.s	loc_71EChhaku
00009824 12BC 0095                  		move.b	#$95,(a1)	; load LZ boss	object
00009828 337C 3EF0 0008                             move.w	#$3EF0,8(a1)	; X-position
0000982E 337C 0190 000C             		move.w	#$190,$C(a1)	; Y-position
00009834                            
00009834                            loc_71EChhaku:
00009834 303C 0098                  		move.w	#$98,d0
00009838 4EB8 12CA                  		jsr	PlaySound	; play boss music
0000983C 702B                       		moveq	#43,d0
0000983E 4EB8 153E                  		jsr	LoadPLC		; load boss patterns
00009842                            
00009842                            locret_urded:
00009842 4E75                       		rts	
00009844                            ; ===========================================================================
00009844                            
00009844                            Resize_GHZ3:
00009844 7000                       		moveq	#0,d0
00009846 1038 F742                  		move.b	($FFFFF742).w,d0
0000984A 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
0000984E 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00009852                            ; ===========================================================================
00009852 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00009854 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00009856 0000                       		dc.w Resize_GHZ3end-off_6E4A
00009858                            ; ===========================================================================
00009858                            
00009858                            Resize_GHZ3main:
00009858 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000985E 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00009864 6500                       		bcs.s	locret_6E96
00009866 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
0000986C 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00009872 6500                       		bcs.s	locret_6E96
00009874 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
0000987A 6500                       		bcs.s	loc_6E98
0000987C 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00009882 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00009888 6400                       		bcc.s	loc_6E8E
0000988A 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00009890 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00009896                            
00009896                            loc_6E8E:
00009896 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000989C 6400                       		bcc.s	loc_6E98
0000989E                            
0000989E                            locret_6E96:
0000989E 4E75                       		rts	
000098A0                            ; ===========================================================================
000098A0                            
000098A0                            loc_6E98:
000098A0 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000098A6 5438 F742                  		addq.b	#2,($FFFFF742).w
000098AA 4E75                       		rts	
000098AC                            ; ===========================================================================
000098AC                            
000098AC                            Resize_GHZ3boss:
000098AC 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000098B2 6400                       		bcc.s	loc_6EB0
000098B4 5538 F742                  		subq.b	#2,($FFFFF742).w
000098B8                            
000098B8                            loc_6EB0:
000098B8 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
000098BE 6500                       		bcs.s	locret_6EE8
000098C0 6100 0000                  		bsr.w	SingleObjLoad
000098C4 6600                       		bne.s	loc_6ED0
000098C6 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
000098CA 337C 2A60 0008             		move.w	#$2A60,8(a1)	; X-position
000098D0 337C 0280 000C             		move.w	#$280,$C(a1)	; Y-position
000098D6                            
000098D6                            loc_6ED0:
000098D6 303C 009C                  		move.w	#$9C,d0
000098DA 4EB8 12CA                  		jsr	PlaySound	; play boss music
000098DE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000098E4 5438 F742                  		addq.b	#2,($FFFFF742).w
000098E8 31FC 2920 F728                             move.w  #$2920,($FFFFF728).w
000098EE 31FC 0300 F72C                             move.w  #$300,($FFFFF72C).w
000098F4 7011                       		moveq	#$11,d0
000098F6 4EB8 153E                  		jsr	LoadPLC		; load boss patterns
000098FA                            ; ===========================================================================
000098FA                            
000098FA                            locret_6EE8:
000098FA 4E75                       		rts	
000098FC                            ; ===========================================================================
000098FC                            
000098FC                            Resize_GHZ3end:
000098FC 4E75                       		rts	
000098FE                            ; ===========================================================================
000098FE                            ; ---------------------------------------------------------------------------
000098FE                            ; Labyrinth Zone dynamic screen	resizing
000098FE                            ; ---------------------------------------------------------------------------
000098FE                            
000098FE                            Resize_LZ:				; XREF: Resize_Index
000098FE 7000                       		moveq	#0,d0
00009900 1038 FE11                  		move.b	($FFFFFE11).w,d0
00009904 D040                       		add.w	d0,d0
00009906 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
0000990A 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
0000990E                            ; ===========================================================================
0000990E 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00009910 0000                       		dc.w Resize_LZ2-Resize_LZx
00009912 0000                       		dc.w Resize_SBZ3-Resize_LZx
00009914 0000                       		dc.w Resize_SBZ3-Resize_LZx
00009916                            ; ===========================================================================
00009916                            
00009916                            Resize_LZ12:
00009916 4E75                       		rts	
00009918                            ; ===========================================================================
00009918                            Resize_LZ2:
00009918 0C38 0001 FF8D                             cmpi.b	#$01,($FFFFFF8D).w
0000991E 6600                                       bne.s   loc_mamaumenyabolitgivotik
00009920 11FC 0000 FF8D                             move.b	#$00,($FFFFFF8D).w
00009926 303C 0230                  		move.w #$230,d0 ; íóæíàÿ ïîçèöèÿ êàìåðû.
0000992A 31C0 F726                  		move.w d0,($FFFFF726).w
0000992E 31C0 F72C                  		move.w d0,($FFFFF72C).w
00009932 6100 0000                                  bsr.w	SingleObjLoad
00009936 6600                       		bne.s	loc_71ECaku
00009938 12BC 0077                  		move.b	#$77,(a1)	; load LZ boss	object
0000993C 337C 26E5 0008                             move.w	#$26E5,8(a1)	; X-position
00009942 337C 0190 000C             		move.w	#$190,$C(a1)	; Y-position
00009948                            
00009948                            loc_71ECaku:
00009948 303C 0098                  		move.w	#$98,d0
0000994C 4EB8 12CA                  		jsr	PlaySound	; play boss music
00009950 702B                       		moveq	#43,d0
00009952 4EB8 153E                  		jsr	LoadPLC		; load boss patterns
00009956                            
00009956                            loc_mamaumenyabolitgivotik:
00009956 4E75                       		rts
00009958                            ; ===========================================================================
00009958                            
00009958                            ;Resize_LZ3:
00009958                            		;tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
00009958                            		;beq.s	loc_6F28	; if not, branch
00009958                            		;lea	($FFFFA506).w,a1
00009958                            		;cmpi.b	#7,(a1)
00009958                            		;beq.s	loc_6F28
00009958                            		;move.b	#7,(a1)		; modify level layout
00009958                            		;move.w	#$B7,d0
00009958                            		;bsr.w	PlaySound_Special ; play rumbling sound
00009958                                            ;rts
00009958                            
00009958                            ;loc_6F28:
00009958                            		;tst.b	($FFFFF742).w
00009958                            		;bne.s	locret_6F64
00009958                            		;cmpi.w	#$1CA0,($FFFFF700).w
00009958                            		;bcs.s	locret_6F62
00009958                            		;cmpi.w	#$600,($FFFFF704).w
00009958                            		;bcc.s	locret_6F62
00009958                            		;bsr.w	SingleObjLoad
00009958                            		;bne.s	loc_6F4A
00009958                            		;move.b	#$77,0(a1)	; load LZ boss object
00009958                            
00009958                            ;loc_6F4A:
00009958                            		;move.w	#$9C,d0
00009958                            		;bsr.w	PlaySound	; play boss music
00009958                            		;move.b	#1,($FFFFF7AA).w ; lock	screen
00009958                            		;addq.b	#2,($FFFFF742).w
00009958                            		;moveq	#$11,d0
00009958                            		;bra.w	LoadPLC		; load boss patterns
00009958                            ; ===========================================================================
00009958                            
00009958                            locret_6F62:
00009958 4E75                       		rts	
0000995A                            ; ===========================================================================
0000995A                            
0000995A                            locret_6F64:
0000995A 4E75                       		rts	
0000995C                            ; ===========================================================================
0000995C                            
0000995C                            ; Vladikcomper:	Some code was changed to fit level order.
0000995C                            
0000995C                            Resize_SBZ3:
0000995C 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00009962 6500                       		bcs.s	locret_6F8C
00009964 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w	; has Sonic reached the top of the level?
0000996A 6400                       		bcc.s	locret_6F8C		; if not, branch
0000996C 4238 FE30                  		clr.b	($FFFFFE30).w
00009970 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w	; freeze Sonic
00009976                            		;lea	LevelOrder,a2		; load level order array
00009976                            		;move.w	$E(a2),d0
00009976                            		;beq.s	@GotoSegaScreen
00009976 4238 FE30                                  clr.b	($FFFFFE30).w		; clear lamppost counter
0000997A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w	; restart the level
00009980 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w	; set level to FZ
00009986                            		;move.w	d0,($FFFFFE10).w	; set next level according level order
00009986 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w	; set restart level flag
0000998C 4E75                       		rts
0000998E                            
0000998E                            @GotoSegaScreen:
0000998E 11FC 0000 F600             		move.b	#0,($FFFFF600).w
00009994                            
00009994                            locret_6F8C:
00009994 4E75                       		rts	
00009996                            ; ===========================================================================
00009996                            ; ---------------------------------------------------------------------------
00009996                            ; Marble Zone dynamic screen resizing
00009996                            ; ---------------------------------------------------------------------------
00009996                            
00009996                            Resize_MZ:				; XREF: Resize_Index
00009996 7000                       		moveq	#0,d0
00009998 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000999C D040                       		add.w	d0,d0
0000999E 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000099A2 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000099A6                            ; ===========================================================================
000099A6 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000099A8 0000                       		dc.w Resize_MZ2-Resize_MZx
000099AA 0000                       		dc.w Resize_MZ3-Resize_MZx
000099AC                            ; ===========================================================================
000099AC                            
000099AC                            Resize_MZ1:
000099AC 7000                       		moveq	#0,d0
000099AE 1038 F742                  		move.b	($FFFFF742).w,d0
000099B2 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000099B6 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000099BA                            ; ===========================================================================
000099BA 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000099BC 0000                       		dc.w loc_6FEA-off_6FB2
000099BE 0000                       		dc.w loc_702E-off_6FB2
000099C0 0000                       		dc.w loc_7050-off_6FB2
000099C2                            ; ===========================================================================
000099C2                            
000099C2                            loc_6FBA:
000099C2 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000099C8 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000099CE 6500                       		bcs.s	locret_6FE8
000099D0 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000099D6 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000099DC 6500                       		bcs.s	locret_6FE8
000099DE 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000099E4 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000099EA 6500                       		bcs.s	locret_6FE8
000099EC 5438 F742                  		addq.b	#2,($FFFFF742).w
000099F0                            
000099F0                            locret_6FE8:
000099F0 4E75                       		rts	
000099F2                            ; ===========================================================================
000099F2                            
000099F2                            loc_6FEA:
000099F2 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000099F8 6400                       		bcc.s	loc_6FF8
000099FA 5538 F742                  		subq.b	#2,($FFFFF742).w
000099FE 4E75                       		rts	
00009A00                            ; ===========================================================================
00009A00                            
00009A00                            loc_6FF8:
00009A00 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00009A06 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00009A0C 6400                       		bcc.s	locret_702C
00009A0E 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00009A14 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00009A1A 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00009A20 6400                       		bcc.s	locret_702C
00009A22 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00009A28 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00009A2E 6500                       		bcs.s	locret_702C
00009A30 5438 F742                  		addq.b	#2,($FFFFF742).w
00009A34                            
00009A34                            locret_702C:
00009A34 4E75                       		rts	
00009A36                            ; ===========================================================================
00009A36                            
00009A36                            loc_702E:
00009A36 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00009A3C 6400                       		bcc.s	loc_703C
00009A3E 5538 F742                  		subq.b	#2,($FFFFF742).w
00009A42 4E75                       		rts	
00009A44                            ; ===========================================================================
00009A44                            
00009A44                            loc_703C:
00009A44 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00009A4A 6500                       		bcs.s	locret_704E
00009A4C 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00009A52 5438 F742                  		addq.b	#2,($FFFFF742).w
00009A56                            
00009A56                            locret_704E:
00009A56 4E75                       		rts	
00009A58                            ; ===========================================================================
00009A58                            
00009A58                            loc_7050:
00009A58 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00009A5E 6500                       		bcs.s	locret_7072
00009A60 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00009A66 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00009A6C 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00009A72 6500                       		bcs.s	locret_7072
00009A74 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00009A7A                            
00009A7A                            locret_7072:
00009A7A 4E75                       		rts	
00009A7C                            ; ===========================================================================
00009A7C                            
00009A7C                            Resize_MZ2:
00009A7C 0C38 0001 FF8D                             cmpi.b	#$01,($FFFFFF8D).w
00009A82 6600                                       bne.s   loc_aaimnebolno
00009A84 11FC 0000 FF8D                             move.b	#$00,($FFFFFF8D).w
00009A8A 303C 01D4                  		move.w  #$1D4,d0 ; íóæíàÿ ïîçèöèÿ êàìåðû.
00009A8E 31C0 F726                  		move.w 	d0,($FFFFF726).w
00009A92 31C0 F72C                  		move.w 	d0,($FFFFF72C).w
00009A96 6100 0000                                  bsr.w	SingleObjLoad
00009A9A 6600                       		bne.s	loc_71ECkorrija
00009A9C 12BC 0091                  		move.b	#$91,(a1)	; load MZ miniboss 
00009AA0 337C 26E8 0008                             move.w	#$26E8,8(a1)	; X-position
00009AA6 337C 0150 000C             		move.w	#$150,$C(a1)	; Y-position
00009AAC                            
00009AAC                            loc_71ECkorrija:
00009AAC 303C 0098                  		move.w	#$98,d0
00009AB0 4EB8 12CA                  		jsr	PlaySound	; play boss music
00009AB4 702F                       		moveq	#47,d0
00009AB6 4EB8 153E                  		jsr	LoadPLC		; load boss patterns
00009ABA                            
00009ABA                            loc_aaimnebolno:
00009ABA 4E75                       		rts	
00009ABC                            ; ===========================================================================
00009ABC                            
00009ABC                            Resize_MZ3:
00009ABC 7000                       		moveq	#0,d0
00009ABE 1038 F742                  		move.b	($FFFFF742).w,d0
00009AC2 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00009AC6 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00009ACA                            ; ===========================================================================
00009ACA 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00009ACC 0000                       		dc.w Resize_MZ3end-off_7098
00009ACE                            ; ===========================================================================
00009ACE                            
00009ACE                            Resize_MZ3boss:
00009ACE 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00009AD4 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00009ADA 6500                       		bcs.s	locret_70E8
00009ADC 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00009AE2 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00009AE8 6500                       		bcs.s	locret_70E8
00009AEA 6100 0000                  		bsr.w	SingleObjLoad
00009AEE 6600                       		bne.s	loc_70D0
00009AF0 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00009AF4 337C 19F0 0008             		move.w	#$19F0,8(a1)
00009AFA 337C 021C 000C             		move.w	#$21C,$C(a1)
00009B00                            
00009B00                            loc_70D0:
00009B00 303C 009C                  		move.w	#$9C,d0
00009B04 4EB8 12CA                  		jsr	PlaySound	; play boss music
00009B08 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00009B0E 5438 F742                  		addq.b	#2,($FFFFF742).w
00009B12                            		;moveq	#$11,d0
00009B12                            		;bra.w	LoadPLC		; load boss patterns
00009B12 7029                                       moveq   #$29,d0
00009B14 4EB8 153E                                  jsr	LoadPLC
00009B18                            ; ===========================================================================
00009B18                            
00009B18                            locret_70E8:
00009B18 4E75                       		rts	
00009B1A                            ; ===========================================================================
00009B1A                            
00009B1A                            Resize_MZ3end:
00009B1A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00009B20 4E75                       		rts	
00009B22                            ; ===========================================================================
00009B22                            ; ---------------------------------------------------------------------------
00009B22                            ; Star Light Zone dynamic screen resizing
00009B22                            ; ---------------------------------------------------------------------------
00009B22                            
00009B22                            Resize_SLZ:				; XREF: Resize_Index
00009B22 7000                       		moveq	#0,d0
00009B24 1038 FE11                  		move.b	($FFFFFE11).w,d0
00009B28 D040                       		add.w	d0,d0
00009B2A 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00009B2E 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00009B32                            ; ===========================================================================
00009B32 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
00009B34 0000                       		dc.w Resize_SLZ2-Resize_SLZx
00009B36 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00009B38                            ; ===========================================================================
00009B38                            
00009B38                            Resize_SLZ1:
00009B38 0C38 0001 FF8D             		cmpi.b	#$01,($FFFFFF8D).w
00009B3E 6600                                       bne.s   loc_reznagib
00009B40 11FC 0000 FF8D                             move.b	#$00,($FFFFFF8D).w
00009B46 303C 0390                  		move.w  #$390,d0 ; íóæíàÿ ïîçèöèÿ êàìåðû.
00009B4A 31C0 F726                  		move.w 	d0,($FFFFF726).w
00009B4E 31C0 F72C                  		move.w 	d0,($FFFFF72C).w
00009B52 6100 0000                                  bsr.w	SingleObjLoad
00009B56 6600                       		bne.s	loc_71ECarcticway
00009B58 12BC 0090                  		move.b	#$90,(a1)	; load SYZ miniboss 
00009B5C 337C 32F0 0008                             move.w	#$32F0,8(a1)	; X-position
00009B62 337C 0330 000C             		move.w	#$330,$C(a1)	; Y-position
00009B68                            
00009B68                            loc_71ECarcticway:
00009B68 303C 0098                  		move.w	#$98,d0
00009B6C 4EB8 12CA                  		jsr	PlaySound	; play boss music
00009B70 702E                       		moveq	#46,d0
00009B72 4EB8 153E                  		jsr	LoadPLC		; load boss patterns
00009B76                            
00009B76                            loc_reznagib:
00009B76 4E75                       		rts	
00009B78                            ; ===========================================================================
00009B78                            
00009B78                            
00009B78                            Resize_SLZ2:
00009B78 0C38 0001 FF8D                             cmpi.b	#$01,($FFFFFF8D).w
00009B7E 6600                                       bne.s   loc_rez
00009B80 11FC 0000 FF8D                             move.b	#$00,($FFFFFF8D).w
00009B86 303C 0410                  		move.w  #$410,d0 ; íóæíàÿ ïîçèöèÿ êàìåðû.
00009B8A 31C0 F726                  		move.w 	d0,($FFFFF726).w
00009B8E 31C0 F72C                  		move.w 	d0,($FFFFF72C).w
00009B92 6100 0000                                  bsr.w	SingleObjLoad
00009B96 6600                       		bne.s	loc_71ECaru
00009B98 12BC 008F                  		move.b	#$8F,(a1)	; load SYZ miniboss 
00009B9C 337C 3790 0008                             move.w	#$3790,8(a1)	; X-position
00009BA2 337C 0300 000C             		move.w	#$300,$C(a1)	; Y-position
00009BA8                            
00009BA8                            loc_71ECaru:
00009BA8 303C 0098                  		move.w	#$98,d0
00009BAC 4EB8 12CA                  		jsr	PlaySound	; play boss music
00009BB0 702D                       		moveq	#45,d0
00009BB2 4EB8 153E                  		jsr	LoadPLC		; load boss patterns
00009BB6                            
00009BB6                            loc_rez:
00009BB6 4E75                       		rts
00009BB8                            
00009BB8                            ; ===========================================================================
00009BB8                            
00009BB8                            Resize_SLZ3:
00009BB8 7000                       		moveq	#0,d0
00009BBA 1038 F742                  		move.b	($FFFFF742).w,d0
00009BBE 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00009BC2 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00009BC6                            ; ===========================================================================
00009BC6 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00009BC8 0000                       		dc.w Resize_SLZ3boss-off_7118
00009BCA 0000                       		dc.w Resize_SLZ3end-off_7118
00009BCC                            ; ===========================================================================
00009BCC                            
00009BCC                            Resize_SLZ3main:
00009BCC 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00009BD2 6500                       		bcs.s	locret_7130
00009BD4 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00009BDA 5438 F742                  		addq.b	#2,($FFFFF742).w
00009BDE                            
00009BDE                            locret_7130:
00009BDE 4E75                       		rts	
00009BE0                            ; ===========================================================================
00009BE0                            
00009BE0                            Resize_SLZ3boss:
00009BE0 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00009BE6 6500                       		bcs.s	locret_715C
00009BE8 303C 0210                                  move.w #$210,d0
00009BEC 31C0 F726                                  move.w d0,($FFFFF726).w
00009BF0 31C0 F72C                                  move.w d0,($FFFFF72C).w
00009BF4 6100 0000                  		bsr.w	SingleObjLoad
00009BF8 6600                       		bne.s	loc_7144
00009BFA 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00009BFE 3038 F700                                  move.w ($FFFFF700).w,d0
00009C02 0640 00A0                                  addi.w #$A0,d0
00009C06 3340 0000                                  move.w d0,obX(a1)
00009C0A 3038 F704                                  move.w ($FFFFF704).w,d0
00009C0E 0440 0040                                  subi.w #$40,d0
00009C12 3340 0000                                  move.w d0,obY(a1)
00009C16                            
00009C16                            loc_7144:
00009C16 303C 0098                  		move.w	#$98,d0
00009C1A 4EB8 12CA                  		jsr	PlaySound	; play boss music
00009C1E 7027                                       moveq   #$27,d0 
00009C20 6100 8464                                  bsr.w   PalLoad2
00009C24 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00009C2A 5438 F742                  		addq.b	#2,($FFFFF742).w
00009C2E 702A                       		moveq	#$2A,d0
00009C30 4EB8 153E                  		jsr	LoadPLC		; load boss patterns
00009C34                            ; ===========================================================================
00009C34                            
00009C34                            locret_715C:
00009C34 4E75                       		rts	
00009C36                            ; ===========================================================================
00009C36                            
00009C36                            Resize_SLZ3end:
00009C36 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00009C3C 4E75                       		rts
00009C3E 4E75                       		rts
00009C40                            ; ===========================================================================
00009C40                            ; ---------------------------------------------------------------------------
00009C40                            ; Spring Yard Zone dynamic screen resizing
00009C40                            ; ---------------------------------------------------------------------------
00009C40                            
00009C40                            Resize_SYZ:				; XREF: Resize_Index
00009C40 7000                       		moveq	#0,d0
00009C42 1038 FE11                  		move.b	($FFFFFE11).w,d0
00009C46 D040                       		add.w	d0,d0
00009C48 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00009C4C 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00009C50                            ; ===========================================================================
00009C50 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00009C52 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00009C54 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00009C56                            ; ===========================================================================
00009C56                            
00009C56                            Resize_SYZ1:
00009C56 0C38 0001 FF8D                             cmpi.b	#$01,($FFFFFF8D).w
00009C5C 6600                                       bne.s   loc_narkiss
00009C5E 11FC 0000 FF8D                             move.b	#$00,($FFFFFF8D).w
00009C64 303C 010C                  		move.w  #$10C,d0 ; íóæíàÿ ïîçèöèÿ êàìåðû.
00009C68 31C0 F726                  		move.w 	d0,($FFFFF726).w
00009C6C 31C0 F72C                  		move.w 	d0,($FFFFF72C).w
00009C70 6100 0000                                  bsr.w	SingleObjLoad
00009C74 6600                       		bne.s	loc_71ECpikho
00009C76 12BC 0096                  		move.b	#$96,(a1)	; load SYZ miniboss 
00009C7A 337C 325D 0008                             move.w	#$325D,8(a1)	; X-position
00009C80 337C 0150 000C             		move.w	#$150,$C(a1)	; Y-position
00009C86                            
00009C86                            loc_71ECpikho:
00009C86 303C 0098                  		move.w	#$98,d0
00009C8A 4EB8 12CA                  		jsr	PlaySound	; play boss music
00009C8E 7031                       		moveq	#49,d0
00009C90 4EB8 153E                  		jsr	LoadPLC		; load boss patterns
00009C94                            
00009C94                            loc_narkiss:
00009C94 4E75                       		rts	
00009C96                            ; ===========================================================================
00009C96                            
00009C96                            Resize_SYZ2:
00009C96 0C38 0001 FF8D                             cmpi.b	#$01,($FFFFFF8D).w
00009C9C 6600                                       bne.s   loc_rakgivota
00009C9E 11FC 0000 FF8D                             move.b	#$00,($FFFFFF8D).w
00009CA4 303C 0310                  		move.w  #$310,d0 ; íóæíàÿ ïîçèöèÿ êàìåðû.
00009CA8 31C0 F726                  		move.w 	d0,($FFFFF726).w
00009CAC 31C0 F72C                  		move.w 	d0,($FFFFF72C).w
00009CB0 6100 0000                                  bsr.w	SingleObjLoad
00009CB4 6600                       		bne.s	loc_71ECuutia
00009CB6 12BC 008E                  		move.b	#$8E,(a1)	; load SYZ miniboss 
00009CBA 337C 32ED 0008                             move.w	#$32ED,8(a1)	; X-position
00009CC0 337C 0280 000C             		move.w	#$280,$C(a1)	; Y-position
00009CC6                            
00009CC6                            loc_71ECuutia:
00009CC6 303C 0098                  		move.w	#$98,d0
00009CCA 4EB8 12CA                  		jsr	PlaySound	; play boss music
00009CCE 702C                       		moveq	#44,d0
00009CD0 4EB8 153E                  		jsr	LoadPLC		; load boss patterns
00009CD4                            
00009CD4                            loc_rakgivota:
00009CD4 4E75                       		rts
00009CD6                            ; ===========================================================================
00009CD6                            
00009CD6                            Resize_SYZ3:
00009CD6 7000                       		moveq	#0,d0
00009CD8 1038 F742                  		move.b	($FFFFF742).w,d0
00009CDC 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00009CE0 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00009CE4                            ; ===========================================================================
00009CE4                            off_71B2:	;dc.w Resize_SYZ3main-off_71B2
00009CE4 0000                       		dc.w Resize_SYZ3boss-off_71B2
00009CE6 0000                       		dc.w Resize_SYZ3end-off_71B2
00009CE8                            ; ===========================================================================
00009CE8                            ;
00009CE8                            ;Resize_SYZ3main:
00009CE8                            ;		cmpi.w	#$2AC0,($FFFFF700).w
00009CE8                            ;		bcs.s	locret_71CE
00009CE8                            ;		bsr.w	SingleObjLoad
00009CE8                            ;		bne.s	locret_71CE
00009CE8                            ;		move.b	#$76,(a1)	; load blocks that boss	picks up
00009CE8                            ;		addq.b	#2,($FFFFF742).w
00009CE8                            ;
00009CE8                            ;locret_71CE:
00009CE8                            ;		rts	
00009CE8                            ; ===========================================================================
00009CE8                            
00009CE8                            Resize_SYZ3boss:
00009CE8 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00009CEE 6500                       		bcs.s	locret_7200
00009CF0 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00009CF6 6100 0000                  		bsr.w	SingleObjLoad
00009CFA 6600                       		bne.s	loc_71EC
00009CFC 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00009D00 337C 2D00 0008                             move.w	#$2D00,8(a1)	; X-position
00009D06 337C 0450 000C             		move.w	#$450,$C(a1)	; Y-position
00009D0C 5438 F742                  		addq.b	#2,($FFFFF742).w
00009D10                            
00009D10                            loc_71EC:
00009D10 303C 009C                  		move.w	#$9C,d0
00009D14 4EB8 12CA                  		jsr	PlaySound	; play boss music
00009D18 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00009D1E 7029                       		moveq	#$29,d0
00009D20 4EB8 153E                  		jsr	LoadPLC		; load boss patterns
00009D24                            ; ===========================================================================
00009D24                            
00009D24                            locret_7200:
00009D24 4E75                       		rts	
00009D26                            ; ===========================================================================
00009D26                            
00009D26                            Resize_SYZ3end:
00009D26 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00009D2C 4E75                       		rts	
00009D2E                            ; ===========================================================================
00009D2E                            ; ---------------------------------------------------------------------------
00009D2E                            ; Scrap	Brain Zone dynamic screen resizing
00009D2E                            ; ---------------------------------------------------------------------------
00009D2E                            
00009D2E                            Resize_SBZ:				; XREF: Resize_Index
00009D2E 7000                       		moveq	#0,d0
00009D30 1038 FE11                  		move.b	($FFFFFE11).w,d0
00009D34 D040                       		add.w	d0,d0
00009D36 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00009D3A 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00009D3E                            ; ===========================================================================
00009D3E 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00009D40 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00009D42 0000                       		dc.w Resize_FZ-Resize_SBZx
00009D44                            ; ===========================================================================
00009D44                            
00009D44                            Resize_SBZ1:
00009D44 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00009D4A 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00009D50 6500                       		bcs.s	locret_7242
00009D52 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00009D58 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00009D5E 6500                       		bcs.s	locret_7242
00009D60 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00009D66                            
00009D66                            locret_7242:
00009D66 4E75                       		rts	
00009D68                            ; ===========================================================================
00009D68                            
00009D68                            Resize_SBZ2:
00009D68 7000                       		moveq	#0,d0
00009D6A 1038 F742                  		move.b	($FFFFF742).w,d0
00009D6E 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00009D72 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00009D76                            ; ===========================================================================
00009D76 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00009D78 0000                       		dc.w Resize_SBZ2boss-off_7252
00009D7A 0000                       		dc.w Resize_SBZ2boss2-off_7252
00009D7C 0000                       		dc.w Resize_SBZ2end-off_7252
00009D7E                            ; ===========================================================================
00009D7E                            
00009D7E                            Resize_SBZ2main:
00009D7E 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00009D84 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00009D8A 6500                       		bcs.s	locret_727A
00009D8C 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00009D92 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00009D98 6500                       		bcs.s	locret_727A
00009D9A 5438 F742                  		addq.b	#2,($FFFFF742).w
00009D9E                            
00009D9E                            locret_727A:
00009D9E 4E75                       		rts	
00009DA0                            ; ===========================================================================
00009DA0                            
00009DA0                            Resize_SBZ2boss:
00009DA0 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00009DA6 6500                       		bcs.s	locret_7298
00009DA8 6100 0000                  		bsr.w	SingleObjLoad
00009DAC 6600                       		bne.s	locret_7298
00009DAE 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00009DB2 5438 F742                  		addq.b	#2,($FFFFF742).w
00009DB6 701E                       		moveq	#$1E,d0
00009DB8 4EB8 153E                  		jsr	LoadPLC		; load SBZ2 Eggman patterns
00009DBC                            ; ===========================================================================
00009DBC                            
00009DBC                            locret_7298:
00009DBC 4E75                       		rts	
00009DBE                            ; ===========================================================================
00009DBE                            
00009DBE                            Resize_SBZ2boss2:
00009DBE 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00009DC4 6500                       		bcs.s	loc_72B6
00009DC6 6100 0000                  		bsr.w	SingleObjLoad
00009DCA 6600                       		bne.s	loc_72B0
00009DCC 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00009DD0 5438 F742                  		addq.b	#2,($FFFFF742).w
00009DD4                            
00009DD4                            loc_72B0:
00009DD4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00009DDA                            
00009DDA                            loc_72B6:
00009DDA 6000                       		bra.s	loc_72C2
00009DDC                            ; ===========================================================================
00009DDC                            
00009DDC                            Resize_SBZ2end:
00009DDC 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00009DE2 6500                       		bcs.s	loc_72C2
00009DE4 4E75                       		rts	
00009DE6                            ; ===========================================================================
00009DE6                            
00009DE6                            loc_72C2:
00009DE6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00009DEC 4E75                       		rts	
00009DEE                            ; ===========================================================================
00009DEE                            
00009DEE                            Resize_FZ:
00009DEE 7000                       		moveq	#0,d0
00009DF0 1038 F742                  		move.b	($FFFFF742).w,d0
00009DF4 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00009DF8 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00009DFC                            ; ===========================================================================
00009DFC 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00009E00 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00009E04 0000                       		dc.w Resize_FZend2-off_72D8
00009E06                            ; ===========================================================================
00009E06                            
00009E06                            Resize_FZmain:
00009E06 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00009E0C 6500                       		bcs.s	loc_72F4
00009E0E 5438 F742                  		addq.b	#2,($FFFFF742).w
00009E12 7030                       		moveq	#$30,d0
00009E14 4EB8 153E                  		jsr	LoadPLC		; load FZ boss patterns
00009E18                            
00009E18                            loc_72F4:
00009E18 60CC                       		bra.s	loc_72C2
00009E1A                            ; ===========================================================================
00009E1A                            
00009E1A                            Resize_FZboss:
00009E1A 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00009E20 6500                       		bcs.s	loc_7312
00009E22 6100 0000                  		bsr.w	SingleObjLoad
00009E26 6600                       		bne.s	loc_7312
00009E28 12BC 0093                  		move.b	#$93,(a1)	; load FZ boss object
00009E2C 337C 258B 0008                             move.w	#$258B,8(a1)	; X-position
00009E32 337C 0510 000C             		move.w	#$510,$C(a1)	; Y-position
00009E38 5438 F742                  		addq.b	#2,($FFFFF742).w
00009E3C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00009E42                            
00009E42                            loc_7312:
00009E42 60A2                       		bra.s	loc_72C2
00009E44                            ; ===========================================================================
00009E44                            
00009E44                            Resize_FZend:
00009E44 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00009E4A 6500                       		bcs.s	loc_7320
00009E4C 5438 F742                  		addq.b	#2,($FFFFF742).w
00009E50                            
00009E50                            loc_7320:
00009E50 6094                       		bra.s	loc_72C2
00009E52                            ; ===========================================================================
00009E52                            
00009E52                            locret_7322:
00009E52 4E75                       		rts	
00009E54                            ; ===========================================================================
00009E54                            
00009E54                            Resize_FZend2:
00009E54 6090                       		bra.s	loc_72C2
00009E56                            ; ===========================================================================
00009E56                            ; ---------------------------------------------------------------------------
00009E56                            ; Ending sequence dynamic screen resizing (empty)
00009E56                            ; ---------------------------------------------------------------------------
00009E56                            
00009E56                            Resize_Ending:				; XREF: Resize_Index
00009E56 4E75                       		rts	
00009E58                            ; ===========================================================================
00009E58                            ; ---------------------------------------------------------------------------
00009E58                            ; Object 11 - GHZ bridge
00009E58                            ; ---------------------------------------------------------------------------
00009E58                            
00009E58                            Obj11:					; XREF: Obj_Index
00009E58 7000                       		moveq	#0,d0
00009E5A 1028 0024                  		move.b	$24(a0),d0
00009E5E 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00009E62 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00009E66                            ; ===========================================================================
00009E66 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00009E6A 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00009E6E 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00009E72                            ; ===========================================================================
00009E72                            
00009E72                            Obj11_Main:				; XREF: Obj11_Index
00009E72 5428 0024                  		addq.b	#2,$24(a0)
00009E76 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00009E7E 317C 438E 0002             		move.w	#$438E,2(a0)
00009E84 117C 0004 0001             		move.b	#4,1(a0)
00009E8A 117C 0003 0018             		move.b	#3,$18(a0)
00009E90 117C 0080 0019             		move.b	#$80,$19(a0)
00009E96 3428 000C                  		move.w	$C(a0),d2
00009E9A 3628 0008                  		move.w	8(a0),d3
00009E9E 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00009EA0 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00009EA4 7200                       		moveq	#0,d1
00009EA6 1212                       		move.b	(a2),d1		; copy a2 to d1
00009EA8 14FC 0000                  		move.b	#0,(a2)+
00009EAC 3001                       		move.w	d1,d0
00009EAE E248                       		lsr.w	#1,d0
00009EB0 E948                       		lsl.w	#4,d0
00009EB2 9640                       		sub.w	d0,d3
00009EB4 5501                       		subq.b	#2,d1
00009EB6 6500                       		bcs.s	Obj11_Action
00009EB8                            
00009EB8                            Obj11_MakeBdg:
00009EB8 6100 0000                  		bsr.w	SingleObjLoad
00009EBC 6600                       		bne.s	Obj11_Action
00009EBE 5228 0028                  		addq.b	#1,$28(a0)
00009EC2 B668 0008                  		cmp.w	8(a0),d3
00009EC6 6600                       		bne.s	loc_73B8
00009EC8 0643 0010                  		addi.w	#$10,d3
00009ECC 3142 000C                  		move.w	d2,$C(a0)
00009ED0 3142 003C                  		move.w	d2,$3C(a0)
00009ED4 3A08                       		move.w	a0,d5
00009ED6 0445 D000                  		subi.w	#-$3000,d5
00009EDA EC4D                       		lsr.w	#6,d5
00009EDC 0245 007F                  		andi.w	#$7F,d5
00009EE0 14C5                       		move.b	d5,(a2)+
00009EE2 5228 0028                  		addq.b	#1,$28(a0)
00009EE6                            
00009EE6                            loc_73B8:				; XREF: ROM:00007398j
00009EE6 3A09                       		move.w	a1,d5
00009EE8 0445 D000                  		subi.w	#-$3000,d5
00009EEC EC4D                       		lsr.w	#6,d5
00009EEE 0245 007F                  		andi.w	#$7F,d5
00009EF2 14C5                       		move.b	d5,(a2)+
00009EF4 137C 000A 0024             		move.b	#$A,$24(a1)
00009EFA 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00009EFC 3342 000C                  		move.w	d2,$C(a1)
00009F00 3342 003C                  		move.w	d2,$3C(a1)
00009F04 3343 0008                  		move.w	d3,8(a1)
00009F08 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00009F10 337C 438E 0002             		move.w	#$438E,2(a1)
00009F16 137C 0004 0001             		move.b	#4,1(a1)
00009F1C 137C 0003 0018             		move.b	#3,$18(a1)
00009F22 137C 0008 0019             		move.b	#8,$19(a1)
00009F28 0643 0010                  		addi.w	#$10,d3
00009F2C 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00009F30                            
00009F30                            Obj11_Action:				; XREF: Obj11_Index
00009F30 6100                       		bsr.s	Obj11_Solid
00009F32 4A28 003E                  		tst.b	$3E(a0)
00009F36 6700                       		beq.s	Obj11_Display
00009F38 5928 003E                  		subq.b	#4,$3E(a0)
00009F3C 6100 0000                  		bsr.w	Obj11_Bend
00009F40                            
00009F40                            Obj11_Display:
00009F40 6100 0000                  		bsr.w	DisplaySprite
00009F44 6000 0000                  		bra.w	Obj11_ChkDel
00009F48                            
00009F48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F48                            
00009F48                            
00009F48                            Obj11_Solid:				; XREF: Obj11_Action
00009F48 7200                       		moveq	#0,d1
00009F4A 1228 0028                  		move.b	$28(a0),d1
00009F4E E749                       		lsl.w	#3,d1
00009F50 3401                       		move.w	d1,d2
00009F52 5041                       		addq.w	#8,d1
00009F54 D442                       		add.w	d2,d2
00009F56 43F8 D000                  		lea	($FFFFD000).w,a1
00009F5A 4A69 0012                  		tst.w	$12(a1)
00009F5E 6B00 0000                  		bmi.w	locret_751E
00009F62 3029 0008                  		move.w	8(a1),d0
00009F66 9068 0008                  		sub.w	8(a0),d0
00009F6A D041                       		add.w	d1,d0
00009F6C 6B00 0000                  		bmi.w	locret_751E
00009F70 B042                       		cmp.w	d2,d0
00009F72 6400 0000                  		bcc.w	locret_751E
00009F76 6000                       		bra.s	Platform2
00009F78                            ; End of function Obj11_Solid
00009F78                            
00009F78                            ; ---------------------------------------------------------------------------
00009F78                            ; Platform subroutine
00009F78                            ; ---------------------------------------------------------------------------
00009F78                            
00009F78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F78                            
00009F78                            
00009F78                            PlatformObject:
00009F78 43F8 D000                  		lea	($FFFFD000).w,a1
00009F7C 4A69 0012                  		tst.w	$12(a1)
00009F80 6B00 0000                  		bmi.w	locret_751E
00009F84 3029 0008                  		move.w	8(a1),d0
00009F88 9068 0008                  		sub.w	8(a0),d0
00009F8C D041                       		add.w	d1,d0
00009F8E 6B00 0000                  		bmi.w	locret_751E
00009F92 D241                       		add.w	d1,d1
00009F94 B041                       		cmp.w	d1,d0
00009F96 6400 0000                  		bcc.w	locret_751E
00009F9A                            
00009F9A                            Platform2:
00009F9A 3028 000C                  		move.w	$C(a0),d0
00009F9E 5140                       		subq.w	#8,d0
00009FA0                            
00009FA0                            Platform3:
00009FA0 3429 000C                  		move.w	$C(a1),d2
00009FA4 1229 0016                  		move.b	$16(a1),d1
00009FA8 4881                       		ext.w	d1
00009FAA D242                       		add.w	d2,d1
00009FAC 5841                       		addq.w	#4,d1
00009FAE 9041                       		sub.w	d1,d0
00009FB0 6200 0000                  		bhi.w	locret_751E
00009FB4 0C40 FFF0                  		cmpi.w	#-$10,d0
00009FB8 6500 0000                  		bcs.w	locret_751E
00009FBC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009FC0 6B00 0000                  		bmi.w	locret_751E
00009FC4 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00009FCA 6400 0000                  		bcc.w	locret_751E
00009FCE D440                       		add.w	d0,d2
00009FD0 5642                       		addq.w	#3,d2
00009FD2 3342 000C                  		move.w	d2,$C(a1)
00009FD6 5428 0024                  		addq.b	#2,$24(a0)
00009FDA                            
00009FDA                            loc_74AE:
00009FDA 0829 0003 0022             		btst	#3,$22(a1)
00009FE0 6700                       		beq.s	loc_74DC
00009FE2 7000                       		moveq	#0,d0
00009FE4 1029 003D                  		move.b	$3D(a1),d0
00009FE8 ED48                       		lsl.w	#6,d0
00009FEA 0680 00FF D000             		addi.l	#$FFD000,d0
00009FF0 2440                       		movea.l	d0,a2
00009FF2 08AA 0003 0022             		bclr	#3,$22(a2)
00009FF8 422A 0025                  		clr.b	$25(a2)
00009FFC 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
0000A002 6600                       		bne.s	loc_74DC
0000A004 552A 0024                  		subq.b	#2,$24(a2)
0000A008                            
0000A008                            loc_74DC:
0000A008 3008                       		move.w	a0,d0
0000A00A 0440 D000                  		subi.w	#-$3000,d0
0000A00E EC48                       		lsr.w	#6,d0
0000A010 0240 007F                  		andi.w	#$7F,d0
0000A014 1340 003D                  		move.b	d0,$3D(a1)
0000A018 137C 0000 0026             		move.b	#0,$26(a1)
0000A01E 337C 0000 0012             		move.w	#0,$12(a1)
0000A024 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000A02A 0829 0001 0022             		btst	#1,$22(a1)
0000A030 6700                       		beq.s	loc_7512
0000A032 2F08                       		move.l	a0,-(sp)
0000A034 2049                       		movea.l	a1,a0
0000A036 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0000A03C 205F                       		movea.l	(sp)+,a0
0000A03E                            
0000A03E                            loc_7512:
0000A03E 08E9 0003 0022             		bset	#3,$22(a1)
0000A044 08E8 0003 0022             		bset	#3,$22(a0)
0000A04A                            
0000A04A                            locret_751E:
0000A04A 4E75                       		rts	
0000A04C                            ; End of function PlatformObject
0000A04C                            
0000A04C                            ; ---------------------------------------------------------------------------
0000A04C                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
0000A04C                            ; ---------------------------------------------------------------------------
0000A04C                            
0000A04C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A04C                            
0000A04C                            
0000A04C                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
0000A04C 43F8 D000                  		lea	($FFFFD000).w,a1
0000A050 4A69 0012                  		tst.w	$12(a1)
0000A054 6B00 FFF4                  		bmi.w	locret_751E
0000A058 3029 0008                  		move.w	8(a1),d0
0000A05C 9068 0008                  		sub.w	8(a0),d0
0000A060 D041                       		add.w	d1,d0
0000A062 6BE6                       		bmi.s	locret_751E
0000A064 D241                       		add.w	d1,d1
0000A066 B041                       		cmp.w	d1,d0
0000A068 64E0                       		bcc.s	locret_751E
0000A06A 0828 0000 0001             		btst	#0,1(a0)
0000A070 6700                       		beq.s	loc_754A
0000A072 4640                       		not.w	d0
0000A074 D041                       		add.w	d1,d0
0000A076                            
0000A076                            loc_754A:
0000A076 E248                       		lsr.w	#1,d0
0000A078 7600                       		moveq	#0,d3
0000A07A 1632 0000                  		move.b	(a2,d0.w),d3
0000A07E 3028 000C                  		move.w	$C(a0),d0
0000A082 9043                       		sub.w	d3,d0
0000A084 6000 FF1A                  		bra.w	Platform3
0000A088                            ; End of function SlopeObject
0000A088                            
0000A088                            
0000A088                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A088                            
0000A088                            
0000A088                            Obj15_Solid:				; XREF: Obj15_SetSolid
0000A088 43F8 D000                  		lea	($FFFFD000).w,a1
0000A08C 4A69 0012                  		tst.w	$12(a1)
0000A090 6B00 FFB8                  		bmi.w	locret_751E
0000A094 3029 0008                  		move.w	8(a1),d0
0000A098 9068 0008                  		sub.w	8(a0),d0
0000A09C D041                       		add.w	d1,d0
0000A09E 6B00 FFAA                  		bmi.w	locret_751E
0000A0A2 D241                       		add.w	d1,d1
0000A0A4 B041                       		cmp.w	d1,d0
0000A0A6 6400 FFA2                  		bcc.w	locret_751E
0000A0AA 3028 000C                  		move.w	$C(a0),d0
0000A0AE 9043                       		sub.w	d3,d0
0000A0B0 6000 FEEE                  		bra.w	Platform3
0000A0B4                            ; End of function Obj15_Solid
0000A0B4                            
0000A0B4                            ; ===========================================================================
0000A0B4                            
0000A0B4                            Obj11_Action2:				; XREF: Obj11_Index
0000A0B4 6100                       		bsr.s	Obj11_WalkOff
0000A0B6 6100 0000                  		bsr.w	DisplaySprite
0000A0BA 6000 0000                  		bra.w	Obj11_ChkDel
0000A0BE                            
0000A0BE                            ; ---------------------------------------------------------------------------
0000A0BE                            ; Subroutine allowing Sonic to walk off a bridge
0000A0BE                            ; ---------------------------------------------------------------------------
0000A0BE                            
0000A0BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A0BE                            
0000A0BE                            
0000A0BE                            Obj11_WalkOff:				; XREF: Obj11_Action2
0000A0BE 7200                       		moveq	#0,d1
0000A0C0 1228 0028                  		move.b	$28(a0),d1
0000A0C4 E749                       		lsl.w	#3,d1
0000A0C6 3401                       		move.w	d1,d2
0000A0C8 5041                       		addq.w	#8,d1
0000A0CA 6100                       		bsr.s	ExitPlatform2
0000A0CC 6400                       		bcc.s	locret_75BE
0000A0CE E848                       		lsr.w	#4,d0
0000A0D0 1140 003F                  		move.b	d0,$3F(a0)
0000A0D4 1028 003E                  		move.b	$3E(a0),d0
0000A0D8 0C00 0040                  		cmpi.b	#$40,d0
0000A0DC 6700                       		beq.s	loc_75B6
0000A0DE 5828 003E                  		addq.b	#4,$3E(a0)
0000A0E2                            
0000A0E2                            loc_75B6:
0000A0E2 6100 0000                  		bsr.w	Obj11_Bend
0000A0E6 6100 0000                  		bsr.w	Obj11_MoveSonic
0000A0EA                            
0000A0EA                            locret_75BE:
0000A0EA 4E75                       		rts	
0000A0EC                            ; End of function Obj11_WalkOff
0000A0EC                            
0000A0EC                            ; ---------------------------------------------------------------------------
0000A0EC                            ; Subroutine allowing Sonic to walk or jump off	a platform
0000A0EC                            ; ---------------------------------------------------------------------------
0000A0EC                            
0000A0EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A0EC                            
0000A0EC                            
0000A0EC                            ExitPlatform:
0000A0EC 3401                       		move.w	d1,d2
0000A0EE                            
0000A0EE                            ExitPlatform2:
0000A0EE D442                       		add.w	d2,d2
0000A0F0 43F8 D000                  		lea	($FFFFD000).w,a1
0000A0F4 0829 0001 0022             		btst	#1,$22(a1)
0000A0FA 6600                       		bne.s	loc_75E0
0000A0FC 3029 0008                  		move.w	8(a1),d0
0000A100 9068 0008                  		sub.w	8(a0),d0
0000A104 D041                       		add.w	d1,d0
0000A106 6B00                       		bmi.s	loc_75E0
0000A108 B042                       		cmp.w	d2,d0
0000A10A 6500                       		bcs.s	locret_75F2
0000A10C                            
0000A10C                            loc_75E0:
0000A10C 08A9 0003 0022             		bclr	#3,$22(a1)
0000A112 117C 0002 0024             		move.b	#2,$24(a0)
0000A118 08A8 0003 0022             		bclr	#3,$22(a0)
0000A11E                            
0000A11E                            locret_75F2:
0000A11E 4E75                       		rts	
0000A120                            ; End of function ExitPlatform
0000A120                            
0000A120                            
0000A120                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A120                            
0000A120                            
0000A120                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
0000A120 7000                       		moveq	#0,d0
0000A122 1028 003F                  		move.b	$3F(a0),d0
0000A126 1030 0029                  		move.b	$29(a0,d0.w),d0
0000A12A ED48                       		lsl.w	#6,d0
0000A12C 0680 00FF D000             		addi.l	#$FFD000,d0
0000A132 2440                       		movea.l	d0,a2
0000A134 43F8 D000                  		lea	($FFFFD000).w,a1
0000A138 302A 000C                  		move.w	$C(a2),d0
0000A13C 5140                       		subq.w	#8,d0
0000A13E 7200                       		moveq	#0,d1
0000A140 1229 0016                  		move.b	$16(a1),d1
0000A144 9041                       		sub.w	d1,d0
0000A146 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
0000A14A 4E75                       		rts	
0000A14C                            ; End of function Obj11_MoveSonic
0000A14C                            
0000A14C                            
0000A14C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A14C                            
0000A14C                            
0000A14C                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
0000A14C 1028 003E                  		move.b	$3E(a0),d0
0000A150 6100 8B76                  		bsr.w	CalcSine
0000A154 3800                       		move.w	d0,d4
0000A156 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
0000A15C 7000                       		moveq	#0,d0
0000A15E 1028 0028                  		move.b	$28(a0),d0
0000A162 E948                       		lsl.w	#4,d0
0000A164 7600                       		moveq	#0,d3
0000A166 1628 003F                  		move.b	$3F(a0),d3
0000A16A 3403                       		move.w	d3,d2
0000A16C D640                       		add.w	d0,d3
0000A16E 7A00                       		moveq	#0,d5
0000A170 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
0000A176 1A35 3000                  		move.b	(a5,d3.w),d5
0000A17A 0243 000F                  		andi.w	#$F,d3
0000A17E E94B                       		lsl.w	#4,d3
0000A180 47F4 3000                  		lea	(a4,d3.w),a3
0000A184 45E8 0029                  		lea	$29(a0),a2
0000A188                            
0000A188                            loc_765C:
0000A188 7000                       		moveq	#0,d0
0000A18A 101A                       		move.b	(a2)+,d0
0000A18C ED48                       		lsl.w	#6,d0
0000A18E 0680 00FF D000             		addi.l	#$FFD000,d0
0000A194 2240                       		movea.l	d0,a1
0000A196 7000                       		moveq	#0,d0
0000A198 101B                       		move.b	(a3)+,d0
0000A19A 5240                       		addq.w	#1,d0
0000A19C C0C5                       		mulu.w	d5,d0
0000A19E C0C4                       		mulu.w	d4,d0
0000A1A0 4840                       		swap	d0
0000A1A2 D069 003C                  		add.w	$3C(a1),d0
0000A1A6 3340 000C                  		move.w	d0,$C(a1)
0000A1AA 51CA FFDC                  		dbf	d2,loc_765C
0000A1AE 7000                       		moveq	#0,d0
0000A1B0 1028 0028                  		move.b	$28(a0),d0
0000A1B4 7600                       		moveq	#0,d3
0000A1B6 1628 003F                  		move.b	$3F(a0),d3
0000A1BA 5203                       		addq.b	#1,d3
0000A1BC 9600                       		sub.b	d0,d3
0000A1BE 4403                       		neg.b	d3
0000A1C0 6B00                       		bmi.s	locret_76CA
0000A1C2 3403                       		move.w	d3,d2
0000A1C4 E94B                       		lsl.w	#4,d3
0000A1C6 47F4 3000                  		lea	(a4,d3.w),a3
0000A1CA D6C2                       		adda.w	d2,a3
0000A1CC 5342                       		subq.w	#1,d2
0000A1CE 6500                       		bcs.s	locret_76CA
0000A1D0                            
0000A1D0                            loc_76A4:
0000A1D0 7000                       		moveq	#0,d0
0000A1D2 101A                       		move.b	(a2)+,d0
0000A1D4 ED48                       		lsl.w	#6,d0
0000A1D6 0680 00FF D000             		addi.l	#$FFD000,d0
0000A1DC 2240                       		movea.l	d0,a1
0000A1DE 7000                       		moveq	#0,d0
0000A1E0 1023                       		move.b	-(a3),d0
0000A1E2 5240                       		addq.w	#1,d0
0000A1E4 C0C5                       		mulu.w	d5,d0
0000A1E6 C0C4                       		mulu.w	d4,d0
0000A1E8 4840                       		swap	d0
0000A1EA D069 003C                  		add.w	$3C(a1),d0
0000A1EE 3340 000C                  		move.w	d0,$C(a1)
0000A1F2 51CA FFDC                  		dbf	d2,loc_76A4
0000A1F6                            
0000A1F6                            locret_76CA:
0000A1F6 4E75                       		rts	
0000A1F8                            ; End of function Obj11_Bend
0000A1F8                            
0000A1F8                            ; ===========================================================================
0000A1F8                            ; ---------------------------------------------------------------------------
0000A1F8                            ; GHZ bridge-bending data
0000A1F8                            ; (Defines how the bridge bends	when Sonic walks across	it)
0000A1F8                            ; ---------------------------------------------------------------------------
0000A1F8                            Obj11_BendData:	incbin	misc\ghzbend1.bin
0000A308                            		even
0000A308                            Obj11_BendData2:incbin	misc\ghzbend2.bin
0000A408                            		even
0000A408                            
0000A408                            ; ===========================================================================
0000A408                            
0000A408                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
0000A408 3028 0008                  		move.w	8(a0),d0
0000A40C 0240 FF80                  		andi.w	#$FF80,d0
0000A410 3238 F700                  		move.w	($FFFFF700).w,d1
0000A414 0441 0080                  		subi.w	#$80,d1
0000A418 0241 FF80                  		andi.w	#$FF80,d1
0000A41C 9041                       		sub.w	d1,d0
0000A41E 0C40 0280                  		cmpi.w	#$280,d0
0000A422 6200 0000                  		bhi.w	Obj11_DelAll
0000A426 4E75                       		rts	
0000A428                            ; ===========================================================================
0000A428                            
0000A428                            Obj11_DelAll:				; XREF: Obj11_ChkDel
0000A428 7400                       		moveq	#0,d2
0000A42A 45E8 0028                  		lea	$28(a0),a2	; load bridge length
0000A42E 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
0000A430 5302                       		subq.b	#1,d2		; subtract 1
0000A432 6500                       		bcs.s	Obj11_Delete
0000A434                            
0000A434                            Obj11_DelLoop:
0000A434 7000                       		moveq	#0,d0
0000A436 101A                       		move.b	(a2)+,d0
0000A438 ED48                       		lsl.w	#6,d0
0000A43A 0680 00FF D000             		addi.l	#$FFD000,d0
0000A440 2240                       		movea.l	d0,a1
0000A442 B048                       		cmp.w	a0,d0
0000A444 6700                       		beq.s	loc_791E
0000A446 6100 0000                  		bsr.w	DeleteObject2
0000A44A                            
0000A44A                            loc_791E:
0000A44A 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
0000A44E                            
0000A44E                            Obj11_Delete:
0000A44E 6100 0000                  		bsr.w	DeleteObject
0000A452 4E75                       		rts	
0000A454                            ; ===========================================================================
0000A454                            
0000A454                            Obj11_Delete2:				; XREF: Obj11_Index
0000A454 6100 0000                  		bsr.w	DeleteObject
0000A458 4E75                       		rts	
0000A45A                            ; ===========================================================================
0000A45A                            
0000A45A                            Obj11_Display2:				; XREF: Obj11_Index
0000A45A 6100 0000                  		bsr.w	DisplaySprite
0000A45E 4E75                       		rts	
0000A460                            ; ===========================================================================
0000A460                            ; ---------------------------------------------------------------------------
0000A460                            ; Sprite mappings - GHZ	bridge
0000A460                            ; ---------------------------------------------------------------------------
0000A460                            Map_obj11:
0000A460                            	include "_maps\obj11.asm"
0000A460                            ; ---------------------------------------------------------------------------
0000A460                            ; Sprite mappings - GHZ	bridge
0000A460                            ; ---------------------------------------------------------------------------
0000A460 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
0000A464 0000                       		dc.w byte_794B-Map_obj11
0000A466 01                         byte_793A:	dc.b 1
0000A467 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A46C 02                         byte_7940:	dc.b 2
0000A46D F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
0000A472 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
0000A477 01                         byte_794B:	dc.b 1
0000A478 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
0000A47E 00                         		even
0000A47E 00                         		even
0000A47E                            
0000A47E                            ; ===========================================================================
0000A47E                            ; ---------------------------------------------------------------------------
0000A47E                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000A47E                            ;	    - spiked ball on a chain (SBZ)
0000A47E                            ; ---------------------------------------------------------------------------
0000A47E                            
0000A47E                            Obj15:					; XREF: Obj_Index
0000A47E 7000                       		moveq	#0,d0
0000A480 1028 0024                  		move.b	$24(a0),d0
0000A484 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
0000A488 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
0000A48C                            ; ===========================================================================
0000A48C 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
0000A490 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
0000A494 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
0000A498 0000                       		dc.w Obj15_Action-Obj15_Index
0000A49A                            ; ===========================================================================
0000A49A                            
0000A49A                            Obj15_Main:				; XREF: Obj15_Index
0000A49A 5428 0024                  		addq.b	#2,$24(a0)
0000A49E 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
0000A4A6 317C 4380 0002             		move.w	#$4380,2(a0)
0000A4AC 117C 0004 0001             		move.b	#4,1(a0)
0000A4B2 117C 0003 0018             		move.b	#3,$18(a0)
0000A4B8 117C 0018 0019             		move.b	#$18,$19(a0)
0000A4BE 117C 0008 0016             		move.b	#8,$16(a0)
0000A4C4 3168 000C 0038             		move.w	$C(a0),$38(a0)
0000A4CA 3168 0008 003A             		move.w	8(a0),$3A(a0)
0000A4D0 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000A4D6 6600                       		bne.s	Obj15_NotSLZ
0000A4D8 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
0000A4E0 317C 43DC 0002             		move.w	#$43DC,2(a0)
0000A4E6 117C 0020 0019             		move.b	#$20,$19(a0)
0000A4EC 117C 0010 0016             		move.b	#$10,$16(a0)
0000A4F2 117C 0099 0020             		move.b	#$99,$20(a0)
0000A4F8                            
0000A4F8                            Obj15_NotSLZ:
0000A4F8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000A4FE 6600                       		bne.s	Obj15_SetLength
0000A500 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
0000A508 317C 0391 0002             		move.w	#$391,2(a0)
0000A50E 117C 0018 0019             		move.b	#$18,$19(a0)
0000A514 117C 0018 0016             		move.b	#$18,$16(a0)
0000A51A 117C 0086 0020             		move.b	#$86,$20(a0)
0000A520 117C 000C 0024             		move.b	#$C,$24(a0)
0000A526                            
0000A526                            Obj15_SetLength:
0000A526 1810                       		move.b	0(a0),d4
0000A528 7200                       		moveq	#0,d1
0000A52A 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
0000A52E 1212                       		move.b	(a2),d1		; move a2 to d1
0000A530 3F01                       		move.w	d1,-(sp)
0000A532 0241 000F                  		andi.w	#$F,d1
0000A536 14FC 0000                  		move.b	#0,(a2)+
0000A53A 3601                       		move.w	d1,d3
0000A53C E94B                       		lsl.w	#4,d3
0000A53E 5003                       		addq.b	#8,d3
0000A540 1143 003C                  		move.b	d3,$3C(a0)
0000A544 5103                       		subq.b	#8,d3
0000A546 4A28 001A                  		tst.b	$1A(a0)
0000A54A 6700                       		beq.s	Obj15_MakeChain
0000A54C 5003                       		addq.b	#8,d3
0000A54E 5341                       		subq.w	#1,d1
0000A550                            
0000A550                            Obj15_MakeChain:
0000A550 6100 0000                  		bsr.w	SingleObjLoad
0000A554 6600                       		bne.s	loc_7A92
0000A556 5228 0028                  		addq.b	#1,$28(a0)
0000A55A 3A09                       		move.w	a1,d5
0000A55C 0445 D000                  		subi.w	#-$3000,d5
0000A560 EC4D                       		lsr.w	#6,d5
0000A562 0245 007F                  		andi.w	#$7F,d5
0000A566 14C5                       		move.b	d5,(a2)+
0000A568 137C 000A 0024             		move.b	#$A,$24(a1)
0000A56E 1284                       		move.b	d4,0(a1)	; load swinging	object
0000A570 2368 0004 0004             		move.l	4(a0),4(a1)
0000A576 3368 0002 0002             		move.w	2(a0),2(a1)
0000A57C 08A9 0006 0002             		bclr	#6,2(a1)
0000A582 137C 0004 0001             		move.b	#4,1(a1)
0000A588 137C 0004 0018             		move.b	#4,$18(a1)
0000A58E 137C 0008 0019             		move.b	#8,$19(a1)
0000A594 137C 0001 001A             		move.b	#1,$1A(a1)
0000A59A 1343 003C                  		move.b	d3,$3C(a1)
0000A59E 0403 0010                  		subi.b	#$10,d3
0000A5A2 6400                       		bcc.s	loc_7A8E
0000A5A4 137C 0002 001A             		move.b	#2,$1A(a1)
0000A5AA 137C 0003 0018             		move.b	#3,$18(a1)
0000A5B0 08E9 0006 0002             		bset	#6,2(a1)
0000A5B6                            
0000A5B6                            loc_7A8E:
0000A5B6 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
0000A5BA                            
0000A5BA                            loc_7A92:
0000A5BA 3A08                       		move.w	a0,d5
0000A5BC 0445 D000                  		subi.w	#-$3000,d5
0000A5C0 EC4D                       		lsr.w	#6,d5
0000A5C2 0245 007F                  		andi.w	#$7F,d5
0000A5C6 14C5                       		move.b	d5,(a2)+
0000A5C8 317C 4080 0026             		move.w	#$4080,$26(a0)
0000A5CE 317C FE00 003E             		move.w	#-$200,$3E(a0)
0000A5D4 321F                       		move.w	(sp)+,d1
0000A5D6 0801 0004                  		btst	#4,d1		; is object type $8X ?
0000A5DA 6700                       		beq.s	loc_7AD4	; if not, branch
0000A5DC 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
0000A5E4 317C 43AA 0002             		move.w	#$43AA,2(a0)
0000A5EA 117C 0001 001A             		move.b	#1,$1A(a0)
0000A5F0 117C 0002 0018             		move.b	#2,$18(a0)
0000A5F6 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
0000A5FC                            
0000A5FC                            loc_7AD4:
0000A5FC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
0000A602 6700                       		beq.s	Obj15_Action	; if yes, branch
0000A604                            
0000A604                            Obj15_SetSolid:				; XREF: Obj15_Index
0000A604 7200                       		moveq	#0,d1
0000A606 1228 0019                  		move.b	$19(a0),d1
0000A60A 7600                       		moveq	#0,d3
0000A60C 1628 0016                  		move.b	$16(a0),d3
0000A610 6100 FA76                  		bsr.w	Obj15_Solid
0000A614                            
0000A614                            Obj15_Action:				; XREF: Obj15_Index
0000A614 6100 0000                  		bsr.w	Obj15_Move
0000A618 6100 0000                  		bsr.w	DisplaySprite
0000A61C 6000 0000                  		bra.w	Obj15_ChkDel
0000A620                            ; ===========================================================================
0000A620                            
0000A620                            Obj15_Action2:				; XREF: Obj15_Index
0000A620 7200                       		moveq	#0,d1
0000A622 1228 0019                  		move.b	$19(a0),d1
0000A626 6100 FAC4                  		bsr.w	ExitPlatform
0000A62A 3F28 0008                  		move.w	8(a0),-(sp)
0000A62E 6100 0000                  		bsr.w	Obj15_Move
0000A632 341F                       		move.w	(sp)+,d2
0000A634 7600                       		moveq	#0,d3
0000A636 1628 0016                  		move.b	$16(a0),d3
0000A63A 5203                       		addq.b	#1,d3
0000A63C 6100 0000                  		bsr.w	MvSonicOnPtfm
0000A640 6100 0000                  		bsr.w	DisplaySprite
0000A644 6000 0000                  		bra.w	Obj15_ChkDel
0000A648                            
0000A648 4E75                       		rts
0000A64A                            
0000A64A                            ; ---------------------------------------------------------------------------
0000A64A                            ; Subroutine to	change Sonic's position with a platform
0000A64A                            ; ---------------------------------------------------------------------------
0000A64A                            
0000A64A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A64A                            
0000A64A                            
0000A64A                            MvSonicOnPtfm:
0000A64A 43F8 D000                  		lea	($FFFFD000).w,a1
0000A64E 3028 000C                  		move.w	$C(a0),d0
0000A652 9043                       		sub.w	d3,d0
0000A654 6000                       		bra.s	MvSonic2
0000A656                            ; End of function MvSonicOnPtfm
0000A656                            
0000A656                            ; ---------------------------------------------------------------------------
0000A656                            ; Subroutine to	change Sonic's position with a platform
0000A656                            ; ---------------------------------------------------------------------------
0000A656                            
0000A656                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A656                            
0000A656                            
0000A656                            MvSonicOnPtfm2:
0000A656 43F8 D000                  		lea	($FFFFD000).w,a1
0000A65A 3028 000C                  		move.w	$C(a0),d0
0000A65E 0440 0009                  		subi.w	#9,d0
0000A662                            
0000A662                            MvSonic2:
0000A662 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A666 6B00                       		bmi.s	locret_7B62
0000A668 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A66E 6400                       		bcc.s	locret_7B62
0000A670 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A674 6600                       		bne.s	locret_7B62
0000A676 7200                       		moveq	#0,d1
0000A678 1229 0016                  		move.b	$16(a1),d1
0000A67C 9041                       		sub.w	d1,d0
0000A67E 3340 000C                  		move.w	d0,$C(a1)
0000A682 9468 0008                  		sub.w	8(a0),d2
0000A686 9569 0008                  		sub.w	d2,8(a1)
0000A68A                            
0000A68A                            locret_7B62:
0000A68A 4E75                       		rts	
0000A68C                            ; End of function MvSonicOnPtfm2
0000A68C                            
0000A68C                            
0000A68C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A68C                            
0000A68C                            
0000A68C                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
0000A68C 1038 FE78                  		move.b	($FFFFFE78).w,d0
0000A690 0C38 0005 FE10                             cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
0000A696 6700                                       beq.s   Obj_15_Sbz_mode
0000A698 323C 0080                  		move.w	#$80,d1
0000A69C 6000                                       bra.s   Obj15_MoveCont
0000A69E                            
0000A69E                            Obj_15_Sbz_mode:
0000A69E 323C 0030                                  move.w  #$30,d1
0000A6A2                            
0000A6A2                            Obj15_MoveCont:
0000A6A2 0828 0000 0022             		btst	#0,$22(a0) ; is orientation is right?
0000A6A8 6700                       		beq.s	Obj15_Move2
0000A6AA 4440                       		neg.w	d0
0000A6AC D041                       		add.w	d1,d0
0000A6AE                            
0000A6AE                            ;loc_7B78:
0000A6AE                            		;bra.s	Obj15_Move2
0000A6AE                            ; End of function Obj15_Move
0000A6AE                            
0000A6AE                            
0000A6AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A6AE                            
0000A6AE                            
0000A6AE                            ;Obj48_Move:				; XREF: Obj48_Display2
0000A6AE                            		;tst.b	$3D(a0) ; õðàíèòñÿ ëè çäåñü 0
0000A6AE                            		;bne.s	loc_7B9C ; åñëè íåò, èäåì òóäà
0000A6AE                            		;move.w	$3E(a0),d0 ; ïåðåìåùàåì ñêîðîñòü òâèðëèãà â ä0
0000A6AE                            		;addq.w	#8,d0
0000A6AE                            		;move.w	d0,$3E(a0) ; set twirl speed
0000A6AE                            		;add.w	d0,$26(a0)
0000A6AE                            		;cmpi.w	#$400,d0 ; is speed more than 300?
0000A6AE                            		;bne.s	loc_7BB6 ;if no, branch
0000A6AE                            		;move.b	#1,$3D(a0)
0000A6AE                            		;bra.s	loc_7BB6
0000A6AE                            ; ===========================================================================
0000A6AE                            
0000A6AE                            ;loc_7B9C:
0000A6AE                            		;move.w	$3E(a0),d0
0000A6AE                            		;subq.w	#8,d0
0000A6AE                            		;move.w	d0,$3E(a0)
0000A6AE                            		;add.w	d0,$26(a0)
0000A6AE                            		;cmpi.w	#-$400,d0
0000A6AE                            		;bne.s	loc_7BB6
0000A6AE                            		;move.b	#0,$3D(a0)
0000A6AE                                            ;move.w  #$350,$3E
0000A6AE                            
0000A6AE                            ;loc_7BB6:
0000A6AE                            		;move.b	$26(a0),d0  ;load angle to d0
0000A6AE                            ; End of function Obj48_Move
0000A6AE                            
0000A6AE                            
0000A6AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A6AE                            
0000A6AE                            
0000A6AE                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
0000A6AE 3028 003E                                  move.w	$3E(a0),d0
0000A6B2 D168 0026                  		add.w	d0,$26(a0)
0000A6B6 1028 0026                  		move.b	$26(a0),d0
0000A6BA 4EB9 0000 2CC8             		jsr	(CalcSine).l
0000A6C0 3428 0038                  		move.w	$38(a0),d2
0000A6C4 3628 003A                  		move.w	$3A(a0),d3
0000A6C8 45E8 0028                  		lea	$28(a0),a2
0000A6CC 7C00                       		moveq	#0,d6
0000A6CE 1C1A                       		move.b	(a2)+,d6
0000A6D0                            
0000A6D0                            loc_7BCE:
0000A6D0 7800                       		moveq	#0,d4
0000A6D2 181A                       		move.b	(a2)+,d4
0000A6D4 ED4C                       		lsl.w	#6,d4
0000A6D6 0684 00FF D000             		addi.l	#$FFD000,d4
0000A6DC 2244                       		movea.l	d4,a1
0000A6DE 7800                       		moveq	#0,d4
0000A6E0 1829 003C                  		move.b	$3C(a1),d4
0000A6E4 2A04                       		move.l	d4,d5
0000A6E6 C9C0                       		muls.w	d0,d4
0000A6E8 E084                       		asr.l	#8,d4
0000A6EA CBC1                       		muls.w	d1,d5
0000A6EC E085                       		asr.l	#8,d5
0000A6EE D842                       		add.w	d2,d4
0000A6F0 DA43                       		add.w	d3,d5
0000A6F2 3344 000C                  		move.w	d4,$C(a1)
0000A6F6 3345 0008                  		move.w	d5,8(a1)
0000A6FA 51CE FFD4                  		dbf	d6,loc_7BCE
0000A6FE 4E75                       		rts	
0000A700                            ; End of function Obj15_Move2
0000A700                            
0000A700                            ; ===========================================================================
0000A700                            
0000A700                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
0000A700 3028 003A                  		move.w	$3A(a0),d0
0000A704 0240 FF80                  		andi.w	#$FF80,d0
0000A708 3238 F700                  		move.w	($FFFFF700).w,d1
0000A70C 0441 0080                  		subi.w	#$80,d1
0000A710 0241 FF80                  		andi.w	#$FF80,d1
0000A714 9041                       		sub.w	d1,d0
0000A716 0C40 0280                  		cmpi.w	#$280,d0
0000A71A 6200 0000                  		bhi.w	Obj15_DelAll
0000A71E 4E75                       		rts	
0000A720                            ; ===========================================================================
0000A720                            
0000A720                            Obj15_DelAll:				; XREF: Obj15_ChkDel
0000A720 7400                       		moveq	#0,d2
0000A722 45E8 0028                  		lea	$28(a0),a2
0000A726 141A                       		move.b	(a2)+,d2
0000A728                            
0000A728                            Obj15_DelLoop:
0000A728 7000                       		moveq	#0,d0
0000A72A 101A                       		move.b	(a2)+,d0
0000A72C ED48                       		lsl.w	#6,d0
0000A72E 0680 00FF D000             		addi.l	#$FFD000,d0
0000A734 2240                       		movea.l	d0,a1
0000A736 6100 0000                  		bsr.w	DeleteObject2
0000A73A 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
0000A73E 4E75                       		rts	
0000A740                            ; ===========================================================================
0000A740                            
0000A740                            Obj15_Delete:				; XREF: Obj15_Index
0000A740 6100 0000                  		bsr.w	DeleteObject
0000A744 4E75                       		rts	
0000A746                            ; ===========================================================================
0000A746                            
0000A746                            Obj15_Display:				; XREF: Obj15_Index
0000A746 6000 0000                  		bra.w	DisplaySprite
0000A74A                            ; ===========================================================================
0000A74A                            ; ---------------------------------------------------------------------------
0000A74A                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000A74A                            ; ---------------------------------------------------------------------------
0000A74A                            Map_obj15:
0000A74A                            	include "_maps\obj15ghz.asm"
0000A74A                            ; ---------------------------------------------------------------------------
0000A74A                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000A74A                            ; ---------------------------------------------------------------------------
0000A74A 0000                       		dc.w byte_7C4E-Map_obj15
0000A74C 0000                       		dc.w byte_7C59-Map_obj15
0000A74E 0000                       		dc.w byte_7C5F-Map_obj15
0000A750 02                         byte_7C4E:	dc.b 2
0000A751 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
0000A756 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000A75B 01                         byte_7C59:	dc.b 1
0000A75C F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A761 01                         byte_7C5F:	dc.b 1
0000A762 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A768 00                         		even
0000A768 00                         		even
0000A768                            
0000A768                            ; ---------------------------------------------------------------------------
0000A768                            ; Sprite mappings - SLZ	swinging platforms
0000A768                            ; ---------------------------------------------------------------------------
0000A768                            Map_obj15a:
0000A768                            	include "_maps\obj15slz.asm"
0000A768                            ; ---------------------------------------------------------------------------
0000A768                            ; Sprite mappings - SLZ	swinging platforms
0000A768                            ; ---------------------------------------------------------------------------
0000A768 0000                       		dc.w byte_7C6C-Map_obj15a
0000A76A 0000                       		dc.w byte_7C95-Map_obj15a
0000A76C 0000                       		dc.w byte_7C9B-Map_obj15a
0000A76E 08                         byte_7C6C:	dc.b 8
0000A76F F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000A774 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000A779 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
0000A77E F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
0000A783 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000A788 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000A78D 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000A792 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
0000A797 01                         byte_7C95:	dc.b 1
0000A798 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
0000A79D 01                         byte_7C9B:	dc.b 1
0000A79E F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000A7A4 00                         		even
0000A7A4 00                         		even
0000A7A4                            
0000A7A4                            ; ===========================================================================
0000A7A4                            ; ---------------------------------------------------------------------------
0000A7A4                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000A7A4                            ; ---------------------------------------------------------------------------
0000A7A4                            
0000A7A4                            Obj17:					; XREF: Obj_Index
0000A7A4 7000                       		moveq	#0,d0
0000A7A6 1028 0024                  		move.b	$24(a0),d0
0000A7AA 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
0000A7AE 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
0000A7B2                            ; ===========================================================================
0000A7B2 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
0000A7B4 0000                       		dc.w Obj17_Action-Obj17_Index
0000A7B6 0000                       		dc.w Obj17_Action-Obj17_Index
0000A7B8 0000                       		dc.w Obj17_Delete-Obj17_Index
0000A7BA 0000                       		dc.w Obj17_Display-Obj17_Index
0000A7BC                            ; ===========================================================================
0000A7BC                            
0000A7BC                            Obj17_Main:				; XREF: Obj17_Index
0000A7BC 5428 0024                  		addq.b	#2,$24(a0)
0000A7C0 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
0000A7C8 317C 4398 0002             		move.w	#$4398,2(a0)
0000A7CE 117C 0007 0022             		move.b	#7,$22(a0)
0000A7D4 117C 0004 0001             		move.b	#4,1(a0)
0000A7DA 117C 0003 0018             		move.b	#3,$18(a0)
0000A7E0 117C 0008 0019             		move.b	#8,$19(a0)
0000A7E6 3428 000C                  		move.w	$C(a0),d2
0000A7EA 3628 0008                  		move.w	8(a0),d3
0000A7EE 1810                       		move.b	0(a0),d4
0000A7F0 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000A7F4 7200                       		moveq	#0,d1
0000A7F6 1212                       		move.b	(a2),d1		; move a2 to d1
0000A7F8 14FC 0000                  		move.b	#0,(a2)+
0000A7FC 3001                       		move.w	d1,d0
0000A7FE E248                       		lsr.w	#1,d0
0000A800 E948                       		lsl.w	#4,d0
0000A802 9640                       		sub.w	d0,d3
0000A804 5501                       		subq.b	#2,d1
0000A806 6500                       		bcs.s	Obj17_Action
0000A808 7C00                       		moveq	#0,d6
0000A80A                            
0000A80A                            Obj17_MakeHelix:
0000A80A 6100 0000                  		bsr.w	SingleObjLoad
0000A80E 6600                       		bne.s	Obj17_Action
0000A810 5228 0028                  		addq.b	#1,$28(a0)
0000A814 3A09                       		move.w	a1,d5
0000A816 0445 D000                  		subi.w	#$D000,d5
0000A81A EC4D                       		lsr.w	#6,d5
0000A81C 0245 007F                  		andi.w	#$7F,d5
0000A820 14C5                       		move.b	d5,(a2)+
0000A822 137C 0008 0024             		move.b	#8,$24(a1)
0000A828 1284                       		move.b	d4,0(a1)
0000A82A 3342 000C                  		move.w	d2,$C(a1)
0000A82E 3343 0008                  		move.w	d3,8(a1)
0000A832 2368 0004 0004             		move.l	4(a0),4(a1)
0000A838 337C 4398 0002             		move.w	#$4398,2(a1)
0000A83E 137C 0004 0001             		move.b	#4,1(a1)
0000A844 137C 0003 0018             		move.b	#3,$18(a1)
0000A84A 137C 0008 0019             		move.b	#8,$19(a1)
0000A850 1346 003E                  		move.b	d6,$3E(a1)
0000A854 5206                       		addq.b	#1,d6
0000A856 0206 0007                  		andi.b	#7,d6
0000A85A 0643 0010                  		addi.w	#$10,d3
0000A85E B668 0008                  		cmp.w	8(a0),d3
0000A862 6600                       		bne.s	loc_7D78
0000A864 1146 003E                  		move.b	d6,$3E(a0)
0000A868 5206                       		addq.b	#1,d6
0000A86A 0206 0007                  		andi.b	#7,d6
0000A86E 0643 0010                  		addi.w	#$10,d3
0000A872 5228 0028                  		addq.b	#1,$28(a0)
0000A876                            
0000A876                            loc_7D78:
0000A876 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
0000A87A                            
0000A87A                            Obj17_Action:				; XREF: Obj17_Index
0000A87A 6100 0000                  		bsr.w	Obj17_RotateSpikes
0000A87E 6100 0000                  		bsr.w	DisplaySprite
0000A882 6000 0000                  		bra.w	Obj17_ChkDel
0000A886                            
0000A886                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A886                            
0000A886                            
0000A886                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
0000A886 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0000A88A 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
0000A890 D028 003E                  		add.b	$3E(a0),d0
0000A894 0200 0007                  		andi.b	#7,d0
0000A898 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
0000A89C 6600                       		bne.s	locret_7DA6
0000A89E 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
0000A8A4                            
0000A8A4                            locret_7DA6:
0000A8A4 4E75                       		rts	
0000A8A6                            ; End of function Obj17_RotateSpikes
0000A8A6                            
0000A8A6                            ; ===========================================================================
0000A8A6                            
0000A8A6                            Obj17_ChkDel:				; XREF: Obj17_Action
0000A8A6 3028 0008                  		move.w	8(a0),d0
0000A8AA 0240 FF80                  		andi.w	#$FF80,d0
0000A8AE 3238 F700                  		move.w	($FFFFF700).w,d1
0000A8B2 0441 0080                  		subi.w	#$80,d1
0000A8B6 0241 FF80                  		andi.w	#$FF80,d1
0000A8BA 9041                       		sub.w	d1,d0
0000A8BC 0C40 0280                  		cmpi.w	#$280,d0
0000A8C0 6200 0000                  		bhi.w	Obj17_DelAll
0000A8C4 4E75                       		rts	
0000A8C6                            ; ===========================================================================
0000A8C6                            
0000A8C6                            Obj17_DelAll:				; XREF: Obj17_ChkDel
0000A8C6 7400                       		moveq	#0,d2
0000A8C8 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000A8CC 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000A8CE 5502                       		subq.b	#2,d2
0000A8D0 6500                       		bcs.s	Obj17_Delete
0000A8D2                            
0000A8D2                            Obj17_DelLoop:
0000A8D2 7000                       		moveq	#0,d0
0000A8D4 101A                       		move.b	(a2)+,d0
0000A8D6 ED48                       		lsl.w	#6,d0
0000A8D8 0680 00FF D000             		addi.l	#$FFD000,d0
0000A8DE 2240                       		movea.l	d0,a1
0000A8E0 6100 0000                  		bsr.w	DeleteObject2	; delete object
0000A8E4 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
0000A8E8                            
0000A8E8                            Obj17_Delete:				; XREF: Obj17_Index
0000A8E8 6100 0000                  		bsr.w	DeleteObject
0000A8EC 4E75                       		rts	
0000A8EE                            ; ===========================================================================
0000A8EE                            
0000A8EE                            Obj17_Display:				; XREF: Obj17_Index
0000A8EE 6100 FF96                  		bsr.w	Obj17_RotateSpikes
0000A8F2 6000 0000                  		bra.w	DisplaySprite
0000A8F6                            ; ===========================================================================
0000A8F6                            ; ---------------------------------------------------------------------------
0000A8F6                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000A8F6                            ; ---------------------------------------------------------------------------
0000A8F6                            Map_obj17:
0000A8F6                            	include "_maps\obj17.asm"
0000A8F6                            ; ---------------------------------------------------------------------------
0000A8F6                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000A8F6                            ; ---------------------------------------------------------------------------
0000A8F6 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
0000A8FA 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
0000A8FE 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
0000A902 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
0000A906 01                         byte_7E08:	dc.b 1
0000A907 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
0000A90C 01                         byte_7E0E:	dc.b 1
0000A90D F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
0000A912 01                         byte_7E14:	dc.b 1
0000A913 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
0000A918 01                         byte_7E1A:	dc.b 1
0000A919 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
0000A91E 01                         byte_7E20:	dc.b 1
0000A91F 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
0000A924 01                         byte_7E26:	dc.b 1
0000A925 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
0000A92A 01                         byte_7E2C:	dc.b 1
0000A92B F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
0000A930                            		even
0000A930                            		even
0000A930                            
0000A930                            ; ===========================================================================
0000A930                            ; ---------------------------------------------------------------------------
0000A930                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
0000A930                            ; ---------------------------------------------------------------------------
0000A930                            
0000A930                            Obj18:					; XREF: Obj_Index
0000A930 7000                       		moveq	#0,d0
0000A932 1028 0024                  		move.b	$24(a0),d0
0000A936 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
0000A93A 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
0000A93E                            ; ===========================================================================
0000A93E 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
0000A940 0000                       		dc.w Obj18_Solid-Obj18_Index
0000A942 0000                       		dc.w Obj18_Action2-Obj18_Index
0000A944 0000                       		dc.w Obj18_Delete-Obj18_Index
0000A946 0000                       		dc.w Obj18_Action-Obj18_Index
0000A948                            ; ===========================================================================
0000A948                            
0000A948                            Obj18_Main:				; XREF: Obj18_Index
0000A948 5428 0024                  		addq.b	#2,$24(a0)
0000A94C 317C 4000 0002             		move.w	#$4000,2(a0)
0000A952 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
0000A95A 117C 0020 0019             		move.b	#$20,$19(a0)
0000A960 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
0000A966 6600                       		bne.s	Obj18_NotSYZ
0000A968 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
0000A970 117C 0020 0019             		move.b	#$20,$19(a0)
0000A976                            
0000A976                            Obj18_NotSYZ:
0000A976 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000A97C 6600                       		bne.s	Obj18_NotSLZ
0000A97E 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
0000A986 117C 0020 0019             		move.b	#$20,$19(a0)
0000A98C 317C 4000 0002             		move.w	#$4000,2(a0)
0000A992 117C 0003 0028             		move.b	#3,$28(a0)
0000A998                            
0000A998                            Obj18_NotSLZ:
0000A998 117C 0004 0001             		move.b	#4,1(a0)
0000A99E 117C 0004 0018             		move.b	#4,$18(a0)
0000A9A4 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000A9AA 3168 000C 0034             		move.w	$C(a0),$34(a0)
0000A9B0 3168 0008 0032             		move.w	8(a0),$32(a0)
0000A9B6 317C 0080 0026             		move.w	#$80,$26(a0)
0000A9BC 7200                       		moveq	#0,d1
0000A9BE 1028 0028                  		move.b	$28(a0),d0
0000A9C2 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
0000A9C6 6600                       		bne.s	Obj18_SetFrame	; if not, branch
0000A9C8 5201                       		addq.b	#1,d1		; use frame #1
0000A9CA 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
0000A9D0                            
0000A9D0                            Obj18_SetFrame:
0000A9D0 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
0000A9D4                            
0000A9D4                            Obj18_Solid:				; XREF: Obj18_Index
0000A9D4 4A28 0038                  		tst.b	$38(a0)
0000A9D8 6700                       		beq.s	loc_7EE0
0000A9DA 5928 0038                  		subq.b	#4,$38(a0)
0000A9DE                            
0000A9DE                            loc_7EE0:
0000A9DE 7200                       		moveq	#0,d1
0000A9E0 1228 0019                  		move.b	$19(a0),d1
0000A9E4 6100 F592                  		bsr.w	PlatformObject
0000A9E8                            
0000A9E8                            Obj18_Action:				; XREF: Obj18_Index
0000A9E8 6100 0000                  		bsr.w	Obj18_Move
0000A9EC 6100 0000                  		bsr.w	Obj18_Nudge
0000A9F0 6100 0000                  		bsr.w	DisplaySprite
0000A9F4 6000 0000                  		bra.w	Obj18_ChkDel
0000A9F8                            ; ===========================================================================
0000A9F8                            
0000A9F8                            Obj18_Action2:				; XREF: Obj18_Index
0000A9F8 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
0000A9FE 6700                       		beq.s	loc_7F06
0000AA00 5828 0038                  		addq.b	#4,$38(a0)
0000AA04                            
0000AA04                            loc_7F06:
0000AA04 7200                       		moveq	#0,d1
0000AA06 1228 0019                  		move.b	$19(a0),d1
0000AA0A 6100 F6E0                  		bsr.w	ExitPlatform
0000AA0E 3F28 0008                  		move.w	8(a0),-(sp)
0000AA12 6100 0000                  		bsr.w	Obj18_Move
0000AA16 6100 0000                  		bsr.w	Obj18_Nudge
0000AA1A 341F                       		move.w	(sp)+,d2
0000AA1C 6100 FC38                  		bsr.w	MvSonicOnPtfm2
0000AA20 6100 0000                  		bsr.w	DisplaySprite
0000AA24 6000 0000                  		bra.w	Obj18_ChkDel
0000AA28                            
0000AA28 4E75                       		rts
0000AA2A                            
0000AA2A                            ; ---------------------------------------------------------------------------
0000AA2A                            ; Subroutine to	move platform slightly when you	stand on it
0000AA2A                            ; ---------------------------------------------------------------------------
0000AA2A                            
0000AA2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AA2A                            
0000AA2A                            
0000AA2A                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
0000AA2A 1028 0038                  		move.b	$38(a0),d0
0000AA2E 6100 8298                  		bsr.w	CalcSine
0000AA32 323C 0400                  		move.w	#$400,d1
0000AA36 C1C1                       		muls.w	d1,d0
0000AA38 4840                       		swap	d0
0000AA3A D068 002C                  		add.w	$2C(a0),d0
0000AA3E 3140 000C                  		move.w	d0,$C(a0)
0000AA42 4E75                       		rts	
0000AA44                            ; End of function Obj18_Nudge
0000AA44                            
0000AA44                            ; ---------------------------------------------------------------------------
0000AA44                            ; Subroutine to	move platforms
0000AA44                            ; ---------------------------------------------------------------------------
0000AA44                            
0000AA44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AA44                            
0000AA44                            
0000AA44                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
0000AA44 7000                       		moveq	#0,d0
0000AA46 1028 0028                  		move.b	$28(a0),d0
0000AA4A 0240 000F                  		andi.w	#$F,d0
0000AA4E D040                       		add.w	d0,d0
0000AA50 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
0000AA54 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
0000AA58                            ; End of function Obj18_Move
0000AA58                            
0000AA58                            ; ===========================================================================
0000AA58 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
0000AA5C 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
0000AA60 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
0000AA64 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
0000AA68 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
0000AA6C 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
0000AA70 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
0000AA72                            ; ===========================================================================
0000AA72                            
0000AA72                            Obj18_Type00:
0000AA72 4E75                       		rts			; platform 00 doesn't move
0000AA74                            ; ===========================================================================
0000AA74                            
0000AA74                            Obj18_Type05:
0000AA74 3028 0032                  		move.w	$32(a0),d0
0000AA78 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000AA7C 4401                       		neg.b	d1		; reverse platform-motion
0000AA7E 0601 0040                  		addi.b	#$40,d1
0000AA82 6000                       		bra.s	Obj18_01_Move
0000AA84                            ; ===========================================================================
0000AA84                            
0000AA84                            Obj18_Type01:
0000AA84 3028 0032                  		move.w	$32(a0),d0
0000AA88 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000AA8C 0401 0040                  		subi.b	#$40,d1
0000AA90                            
0000AA90                            Obj18_01_Move:
0000AA90 4881                       		ext.w	d1
0000AA92 D041                       		add.w	d1,d0
0000AA94 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
0000AA98 6000 0000                  		bra.w	Obj18_ChgMotion
0000AA9C                            ; ===========================================================================
0000AA9C                            
0000AA9C                            Obj18_Type0C:
0000AA9C 3028 0034                  		move.w	$34(a0),d0
0000AAA0 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000AAA4 4401                       		neg.b	d1		; reverse platform-motion
0000AAA6 0601 0030                  		addi.b	#$30,d1
0000AAAA 6000                       		bra.s	Obj18_02_Move
0000AAAC                            ; ===========================================================================
0000AAAC                            
0000AAAC                            Obj18_Type0B:
0000AAAC 3028 0034                  		move.w	$34(a0),d0
0000AAB0 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000AAB4 0401 0030                  		subi.b	#$30,d1
0000AAB8 6000                       		bra.s	Obj18_02_Move
0000AABA                            ; ===========================================================================
0000AABA                            
0000AABA                            Obj18_Type06:
0000AABA 3028 0034                  		move.w	$34(a0),d0
0000AABE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000AAC2 4401                       		neg.b	d1		; reverse platform-motion
0000AAC4 0601 0040                  		addi.b	#$40,d1
0000AAC8 6000                       		bra.s	Obj18_02_Move
0000AACA                            ; ===========================================================================
0000AACA                            
0000AACA                            Obj18_Type02:
0000AACA 3028 0034                  		move.w	$34(a0),d0
0000AACE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000AAD2 0401 0040                  		subi.b	#$40,d1
0000AAD6                            
0000AAD6                            Obj18_02_Move:
0000AAD6 4881                       		ext.w	d1
0000AAD8 D041                       		add.w	d1,d0
0000AADA 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000AADE 6000 0000                  		bra.w	Obj18_ChgMotion
0000AAE2                            ; ===========================================================================
0000AAE2                            
0000AAE2                            Obj18_Type03:
0000AAE2 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000AAE6 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
0000AAE8 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
0000AAEE 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
0000AAF0 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
0000AAF6                            
0000AAF6                            Obj18_03_NoMove:
0000AAF6 4E75                       		rts	
0000AAF8                            ; ===========================================================================
0000AAF8                            
0000AAF8                            Obj18_03_Wait:
0000AAF8 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
0000AAFC 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
0000AAFE 317C 0020 003A             		move.w	#32,$3A(a0)
0000AB04 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
0000AB08 4E75                       		rts	
0000AB0A                            ; ===========================================================================
0000AB0A                            
0000AB0A                            Obj18_Type04:
0000AB0A 4A68 003A                  		tst.w	$3A(a0)
0000AB0E 6700                       		beq.s	loc_8048
0000AB10 5368 003A                  		subq.w	#1,$3A(a0)
0000AB14 6600                       		bne.s	loc_8048
0000AB16 0828 0003 0022             		btst	#3,$22(a0)
0000AB1C 6700                       		beq.s	loc_8042
0000AB1E 08E9 0001 0022             		bset	#1,$22(a1)
0000AB24 08A9 0003 0022             		bclr	#3,$22(a1)
0000AB2A 137C 0002 0024             		move.b	#2,$24(a1)
0000AB30 08A8 0003 0022             		bclr	#3,$22(a0)
0000AB36 4228 0025                  		clr.b	$25(a0)
0000AB3A 3368 0012 0012             		move.w	$12(a0),$12(a1)
0000AB40                            
0000AB40                            loc_8042:
0000AB40 117C 0008 0024             		move.b	#8,$24(a0)
0000AB46                            
0000AB46                            loc_8048:
0000AB46 2628 002C                  		move.l	$2C(a0),d3
0000AB4A 3028 0012                  		move.w	$12(a0),d0
0000AB4E 48C0                       		ext.l	d0
0000AB50 E180                       		asl.l	#8,d0
0000AB52 D680                       		add.l	d0,d3
0000AB54 2143 002C                  		move.l	d3,$2C(a0)
0000AB58 0668 0038 0012             		addi.w	#$38,$12(a0)
0000AB5E 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000AB62 0640 00E0                  		addi.w	#$E0,d0
0000AB66 B068 002C                  		cmp.w	$2C(a0),d0
0000AB6A 6400                       		bcc.s	locret_8074
0000AB6C 117C 0006 0024             		move.b	#6,$24(a0)
0000AB72                            
0000AB72                            locret_8074:
0000AB72 4E75                       		rts	
0000AB74                            ; ===========================================================================
0000AB74                            
0000AB74                            Obj18_Type07:
0000AB74 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000AB78 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
0000AB7A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000AB7E 7000                       		moveq	#0,d0
0000AB80 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
0000AB84 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
0000AB86 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000AB8A 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
0000AB8C 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0000AB92                            
0000AB92                            Obj18_07_NoMove:
0000AB92 4E75                       		rts	
0000AB94                            ; ===========================================================================
0000AB94                            
0000AB94                            Obj18_07_Wait:
0000AB94 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0000AB98 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
0000AB9A 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
0000AB9E 4E75                       		rts	
0000ABA0                            ; ===========================================================================
0000ABA0                            
0000ABA0                            Obj18_Type08:
0000ABA0 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
0000ABA4 3028 0034                  		move.w	$34(a0),d0
0000ABA8 0440 0200                  		subi.w	#$200,d0
0000ABAC B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
0000ABB0 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
0000ABB2 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
0000ABB6                            
0000ABB6                            Obj18_08_NoStop:
0000ABB6 4E75                       		rts	
0000ABB8                            ; ===========================================================================
0000ABB8                            
0000ABB8                            Obj18_Type0A:
0000ABB8 3028 0034                  		move.w	$34(a0),d0
0000ABBC 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000ABC0 0401 0040                  		subi.b	#$40,d1
0000ABC4 4881                       		ext.w	d1
0000ABC6 E241                       		asr.w	#1,d1
0000ABC8 D041                       		add.w	d1,d0
0000ABCA 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000ABCE                            
0000ABCE                            Obj18_ChgMotion:
0000ABCE 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
0000ABD4 4E75                       		rts	
0000ABD6                            ; ===========================================================================
0000ABD6                            
0000ABD6                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
0000ABD6 3028 0032                  		move.w	$32(a0),d0
0000ABDA 0240 FF80                  		andi.w	#$FF80,d0
0000ABDE 3238 F700                  		move.w	($FFFFF700).w,d1
0000ABE2 0441 0080                  		subi.w	#$80,d1
0000ABE6 0241 FF80                  		andi.w	#$FF80,d1
0000ABEA 9041                       		sub.w	d1,d0
0000ABEC 0C40 0280                  		cmpi.w	#$280,d0
0000ABF0 6200                       		bhi.s	Obj18_Delete
0000ABF2 4E75                       		rts	
0000ABF4                            ; ===========================================================================
0000ABF4                            
0000ABF4                            Obj18_Delete:				; XREF: Obj18_Index
0000ABF4 6000 0000                  		bra.w	DeleteObject
0000ABF8                            ; ===========================================================================
0000ABF8                            ; ---------------------------------------------------------------------------
0000ABF8                            ; Sprite mappings - unused
0000ABF8                            ; ---------------------------------------------------------------------------
0000ABF8                            Map_obj18x:
0000ABF8                            	include "_maps\obj18x.asm"
0000ABF8                            ; ---------------------------------------------------------------------------
0000ABF8                            ; Sprite mappings - unused
0000ABF8                            ; ---------------------------------------------------------------------------
0000ABF8 0000                       		dc.w byte_80FE-Map_obj18x
0000ABFA 0000                       		dc.w byte_8109-Map_obj18x
0000ABFC 02                         byte_80FE:	dc.b 2
0000ABFD F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000AC02 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
0000AC07 0A                         byte_8109:	dc.b $A
0000AC08 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
0000AC0D 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000AC12 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
0000AC17 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
0000AC1C 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
0000AC21 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
0000AC26 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
0000AC2B 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
0000AC30 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000AC35 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
0000AC3A                            		even
0000AC3A                            		even
0000AC3A                            
0000AC3A                            ; ---------------------------------------------------------------------------
0000AC3A                            ; Sprite mappings - GHZ	platforms
0000AC3A                            ; ---------------------------------------------------------------------------
0000AC3A                            Map_obj18:
0000AC3A                            	include "_maps\obj18ghz.asm"
0000AC3A                            ; ---------------------------------------------------------------------------
0000AC3A                            ; Sprite mappings - GHZ	platforms
0000AC3A                            ; ---------------------------------------------------------------------------
0000AC3A 0000                       		dc.w byte_8140-Map_obj18
0000AC3C 0000                       		dc.w byte_8155-Map_obj18
0000AC3E 04                         byte_8140:	dc.b 4
0000AC3F F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000AC44 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000AC49 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
0000AC4E F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
0000AC53 0A                         byte_8155:	dc.b $A
0000AC54 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000AC59 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
0000AC5E 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
0000AC63 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000AC68 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
0000AC6D F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
0000AC72 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
0000AC77 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000AC7C 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
0000AC81 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
0000AC86                            		even
0000AC86                            		even
0000AC86                            
0000AC86                            ; ---------------------------------------------------------------------------
0000AC86                            ; Sprite mappings - SYZ	platforms
0000AC86                            ; ---------------------------------------------------------------------------
0000AC86                            Map_obj18a:
0000AC86                            	include "_maps\obj18syz.asm"
0000AC86                            ; ---------------------------------------------------------------------------
0000AC86                            ; Sprite mappings - SYZ	platforms
0000AC86                            ; ---------------------------------------------------------------------------
0000AC86 0000                       		dc.w byte_818A-Map_obj18a
0000AC88 03                         byte_818A:	dc.b 3
0000AC89 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
0000AC8E F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
0000AC93 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
0000AC98                            		even
0000AC98                            		even
0000AC98                            
0000AC98                            ; ---------------------------------------------------------------------------
0000AC98                            ; Sprite mappings - SLZ	platforms
0000AC98                            ; ---------------------------------------------------------------------------
0000AC98                            Map_obj18b:
0000AC98                            	include "_maps\obj18slz.asm"
0000AC98                            ; ---------------------------------------------------------------------------
0000AC98                            ; Sprite mappings - SLZ	platforms
0000AC98                            ; ---------------------------------------------------------------------------
0000AC98 0000                       		dc.w byte_819C-Map_obj18b
0000AC9A 02                         byte_819C:	dc.b 2
0000AC9B F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
0000ACA0 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
0000ACA6 00                         		even
0000ACA6 00                         		even
0000ACA6                            
0000ACA6                            ; ===========================================================================
0000ACA6                            ; ---------------------------------------------------------------------------
0000ACA6                            ; Object 19 - blank
0000ACA6                            ; ---------------------------------------------------------------------------
0000ACA6                            
0000ACA6                            Obj19:					; XREF: Obj_Index
0000ACA6 4E75                       		rts	
0000ACA8                            ; ===========================================================================
0000ACA8                            ; ---------------------------------------------------------------------------
0000ACA8                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000ACA8                            ; ---------------------------------------------------------------------------
0000ACA8                            Map_obj48:
0000ACA8                            	include "_maps\obj48.asm"
0000ACA8                            ; ---------------------------------------------------------------------------
0000ACA8                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000ACA8                            ; ---------------------------------------------------------------------------
0000ACA8 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
0000ACAC 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
0000ACB0 06                         byte_81B2:	dc.b 6
0000ACB1 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
0000ACB6 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
0000ACBB E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000ACC0 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0000ACC5 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0000ACCA 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000ACCF 04                         byte_81D1:	dc.b 4
0000ACD0 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
0000ACD5 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
0000ACDA 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000ACDF 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
0000ACE4 04                         byte_81E6:	dc.b 4
0000ACE5 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0000ACEA E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000ACEF 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0000ACF4 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0000ACF9 04                         byte_81FB:	dc.b 4
0000ACFA E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0000ACFF E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
0000AD04 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0000AD09 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000AD0E                            		even
0000AD0E                            		even
0000AD0E                            
0000AD0E                            ; ===========================================================================
0000AD0E                            ; ---------------------------------------------------------------------------
0000AD0E                            ; Object 1A - GHZ collapsing ledge
0000AD0E                            ; ---------------------------------------------------------------------------
0000AD0E                            
0000AD0E                            Obj1A:					; XREF: Obj_Index
0000AD0E 7000                       		moveq	#0,d0
0000AD10 1028 0024                  		move.b	$24(a0),d0
0000AD14 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
0000AD18 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
0000AD1C                            ; ===========================================================================
0000AD1C 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
0000AD20 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
0000AD24 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
0000AD28                            ; ===========================================================================
0000AD28                            
0000AD28                            Obj1A_Main:				; XREF: Obj1A_Index
0000AD28 5428 0024                  		addq.b	#2,$24(a0)
0000AD2C 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
0000AD34 317C 4000 0002             		move.w	#$4000,2(a0)
0000AD3A 0028 0004 0001             		ori.b	#4,1(a0)
0000AD40 117C 0004 0018             		move.b	#4,$18(a0)
0000AD46 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
0000AD4C 117C 0064 0019             		move.b	#$64,$19(a0)
0000AD52 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000AD58 117C 0038 0016             		move.b	#$38,$16(a0)
0000AD5E 08E8 0004 0001             		bset	#4,1(a0)
0000AD64                            
0000AD64                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
0000AD64 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
0000AD68 6700                       		beq.s	Obj1A_Slope	; if not, branch
0000AD6A 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
0000AD6E 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
0000AD72 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000AD76                            
0000AD76                            Obj1A_Slope:
0000AD76 323C 0030                  		move.w	#$30,d1
0000AD7A 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000AD80 6100 F2CA                  		bsr.w	SlopeObject
0000AD84 6000 0000                  		bra.w	MarkObjGone
0000AD88                            ; ===========================================================================
0000AD88                            
0000AD88                            Obj1A_Touch:				; XREF: Obj1A_Index
0000AD88 4A28 0038                  		tst.b	$38(a0)
0000AD8C 6700 0000                  		beq.w	loc_847A
0000AD90 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000AD96 5328 0038                  		subq.b	#1,$38(a0)
0000AD9A                            
0000AD9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AD9A                            
0000AD9A                            
0000AD9A                            Obj1A_WalkOff:				; XREF: Obj1A_Index
0000AD9A 323C 0030                  		move.w	#$30,d1
0000AD9E 6100 F34C                  		bsr.w	ExitPlatform
0000ADA2 323C 0030                  		move.w	#$30,d1
0000ADA6 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000ADAC 3428 0008                  		move.w	8(a0),d2
0000ADB0 6100 0000                  		bsr.w	SlopeObject2
0000ADB4 6000 0000                  		bra.w	MarkObjGone
0000ADB8                            ; End of function Obj1A_WalkOff
0000ADB8                            
0000ADB8                            ; ===========================================================================
0000ADB8                            
0000ADB8                            Obj1A_Display:				; XREF: Obj1A_Index
0000ADB8 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000ADBC 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
0000ADBE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000ADC2 6600 0000                  		bne.w	loc_82D0	; if yes, branch
0000ADC6 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000ADCA 6000 0000                  		bra.w	DisplaySprite
0000ADCE                            ; ===========================================================================
0000ADCE                            
0000ADCE                            loc_82D0:				; XREF: Obj1A_Display
0000ADCE 5328 0038                  		subq.b	#1,$38(a0)
0000ADD2 6100 FFC6                  		bsr.w	Obj1A_WalkOff
0000ADD6 43F8 D000                  		lea	($FFFFD000).w,a1
0000ADDA 0829 0003 0022             		btst	#3,$22(a1)
0000ADE0 6700                       		beq.s	loc_82FC
0000ADE2 4A28 0038                  		tst.b	$38(a0)
0000ADE6 6600                       		bne.s	locret_8308
0000ADE8 08A9 0003 0022             		bclr	#3,$22(a1)
0000ADEE 08A9 0005 0022             		bclr	#5,$22(a1)
0000ADF4 137C 0001 001D             		move.b	#1,$1D(a1)
0000ADFA                            
0000ADFA                            loc_82FC:
0000ADFA 117C 0000 003A             		move.b	#0,$3A(a0)
0000AE00 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
0000AE06                            
0000AE06                            locret_8308:
0000AE06 4E75                       		rts	
0000AE08                            ; ===========================================================================
0000AE08                            
0000AE08                            Obj1A_TimeZero:				; XREF: Obj1A_Display
0000AE08 6100 0000                  		bsr.w	ObjectFall
0000AE0C 6100 0000                  		bsr.w	DisplaySprite
0000AE10 4A28 0001                  		tst.b	1(a0)
0000AE14 6A00                       		bpl.s	Obj1A_Delete
0000AE16 4E75                       		rts	
0000AE18                            ; ===========================================================================
0000AE18                            
0000AE18                            Obj1A_Delete:				; XREF: Obj1A_Index
0000AE18 6100 0000                  		bsr.w	DeleteObject
0000AE1C 4E75                       		rts	
0000AE1E                            ; ===========================================================================
0000AE1E                            ; ---------------------------------------------------------------------------
0000AE1E                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
0000AE1E                            ; ---------------------------------------------------------------------------
0000AE1E                            
0000AE1E                            Obj53:					; XREF: Obj_Index
0000AE1E 7000                       		moveq	#0,d0
0000AE20 1028 0024                  		move.b	$24(a0),d0
0000AE24 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
0000AE28 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
0000AE2C                            ; ===========================================================================
0000AE2C 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
0000AE30 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
0000AE34 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
0000AE38                            ; ===========================================================================
0000AE38                            
0000AE38                            Obj53_Main:				; XREF: Obj53_Index
0000AE38 5428 0024                  		addq.b	#2,$24(a0)
0000AE3C 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
0000AE44 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000AE4A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000AE50 6600                       		bne.s	Obj53_NotSLZ
0000AE52 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
0000AE58 5428 001A                  		addq.b	#2,$1A(a0)
0000AE5C                            
0000AE5C                            Obj53_NotSLZ:
0000AE5C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000AE62 6600                       		bne.s	Obj53_NotSBZ
0000AE64 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
0000AE6A                            
0000AE6A                            Obj53_NotSBZ:
0000AE6A 0028 0004 0001             		ori.b	#4,1(a0)
0000AE70 117C 0004 0018             		move.b	#4,$18(a0)
0000AE76 117C 0007 0038             		move.b	#7,$38(a0)
0000AE7C 117C 0044 0019             		move.b	#$44,$19(a0)
0000AE82                            
0000AE82                            Obj53_ChkTouch:				; XREF: Obj53_Index
0000AE82 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000AE86 6700                       		beq.s	Obj53_Solid	; if not, branch
0000AE88 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000AE8C 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
0000AE90 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000AE94                            
0000AE94                            Obj53_Solid:
0000AE94 323C 0020                  		move.w	#$20,d1
0000AE98 6100 F0DE                  		bsr.w	PlatformObject
0000AE9C 4A28 0028                  		tst.b	$28(a0)
0000AEA0 6A00                       		bpl.s	Obj53_MarkAsGone
0000AEA2 0829 0003 0022             		btst	#3,$22(a1)
0000AEA8 6700                       		beq.s	Obj53_MarkAsGone
0000AEAA 08A8 0000 0001             		bclr	#0,1(a0)
0000AEB0 3029 0008                  		move.w	8(a1),d0
0000AEB4 9068 0008                  		sub.w	8(a0),d0
0000AEB8 6400                       		bcc.s	Obj53_MarkAsGone
0000AEBA 08E8 0000 0001             		bset	#0,1(a0)
0000AEC0                            
0000AEC0                            Obj53_MarkAsGone:
0000AEC0 6000 0000                  		bra.w	MarkObjGone
0000AEC4                            ; ===========================================================================
0000AEC4                            
0000AEC4                            Obj53_Touch:				; XREF: Obj53_Index
0000AEC4 4A28 0038                  		tst.b	$38(a0)
0000AEC8 6700 0000                  		beq.w	loc_8458
0000AECC 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000AED2 5328 0038                  		subq.b	#1,$38(a0)
0000AED6                            
0000AED6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AED6                            
0000AED6                            
0000AED6                            Obj53_WalkOff:				; XREF: Obj53_Index
0000AED6 323C 0020                  		move.w	#$20,d1
0000AEDA 6100 F210                  		bsr.w	ExitPlatform
0000AEDE 3428 0008                  		move.w	8(a0),d2
0000AEE2 6100 F772                  		bsr.w	MvSonicOnPtfm2
0000AEE6 6000 0000                  		bra.w	MarkObjGone
0000AEEA                            ; End of function Obj53_WalkOff
0000AEEA                            
0000AEEA                            ; ===========================================================================
0000AEEA                            
0000AEEA                            Obj53_Display:				; XREF: Obj53_Index
0000AEEA 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000AEEE 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
0000AEF0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000AEF4 6600 0000                  		bne.w	loc_8402	; if yes, branch
0000AEF8 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000AEFC 6000 0000                  		bra.w	DisplaySprite
0000AF00                            ; ===========================================================================
0000AF00                            
0000AF00                            loc_8402:
0000AF00 5328 0038                  		subq.b	#1,$38(a0)
0000AF04 6100 FFD0                  		bsr.w	Obj53_WalkOff
0000AF08 43F8 D000                  		lea	($FFFFD000).w,a1
0000AF0C 0829 0003 0022             		btst	#3,$22(a1)
0000AF12 6700                       		beq.s	loc_842E
0000AF14 4A28 0038                  		tst.b	$38(a0)
0000AF18 6600                       		bne.s	locret_843A
0000AF1A 08A9 0003 0022             		bclr	#3,$22(a1)
0000AF20 08A9 0005 0022             		bclr	#5,$22(a1)
0000AF26 137C 0001 001D             		move.b	#1,$1D(a1)
0000AF2C                            
0000AF2C                            loc_842E:
0000AF2C 117C 0000 003A             		move.b	#0,$3A(a0)
0000AF32 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
0000AF38                            
0000AF38                            locret_843A:
0000AF38 4E75                       		rts	
0000AF3A                            ; ===========================================================================
0000AF3A                            
0000AF3A                            Obj53_TimeZero:				; XREF: Obj53_Display
0000AF3A 6100 0000                  		bsr.w	ObjectFall
0000AF3E 6100 0000                  		bsr.w	DisplaySprite
0000AF42 4A28 0001                  		tst.b	1(a0)
0000AF46 6A00                       		bpl.s	Obj53_Delete
0000AF48 4E75                       		rts	
0000AF4A                            ; ===========================================================================
0000AF4A                            
0000AF4A                            Obj53_Delete:				; XREF: Obj53_Index
0000AF4A 6100 0000                  		bsr.w	DeleteObject
0000AF4E 4E75                       		rts	
0000AF50                            ; ===========================================================================
0000AF50                            
0000AF50                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
0000AF50 117C 0000 003A             		move.b	#0,$3A(a0)
0000AF56                            
0000AF56                            loc_8458:				; XREF: Obj53_Touch
0000AF56 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
0000AF5C 0828 0000 0028             		btst	#0,$28(a0)
0000AF62 6700                       		beq.s	loc_846C
0000AF64 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
0000AF6A                            
0000AF6A                            loc_846C:
0000AF6A 7207                       		moveq	#7,d1
0000AF6C 5228 001A                  		addq.b	#1,$1A(a0)
0000AF70 6000                       		bra.s	loc_8486
0000AF72                            ; ===========================================================================
0000AF72                            
0000AF72                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
0000AF72 117C 0000 003A             		move.b	#0,$3A(a0)
0000AF78                            
0000AF78                            loc_847A:				; XREF: Obj1A_Touch
0000AF78 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
0000AF7E 7218                       		moveq	#$18,d1
0000AF80 5428 001A                  		addq.b	#2,$1A(a0)
0000AF84                            
0000AF84                            loc_8486:				; XREF: Obj53_Collapse
0000AF84 7000                       		moveq	#0,d0
0000AF86 1028 001A                  		move.b	$1A(a0),d0
0000AF8A D040                       		add.w	d0,d0
0000AF8C 2668 0004                  		movea.l	4(a0),a3
0000AF90 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000AF94 524B                       		addq.w	#1,a3
0000AF96 08E8 0005 0001             		bset	#5,1(a0)
0000AF9C 1810                       		move.b	0(a0),d4
0000AF9E 1A28 0001                  		move.b	1(a0),d5
0000AFA2 2248                       		movea.l	a0,a1
0000AFA4 6000                       		bra.s	loc_84B2
0000AFA6                            ; ===========================================================================
0000AFA6                            
0000AFA6                            loc_84AA:
0000AFA6 6100 0000                  		bsr.w	SingleObjLoad
0000AFAA 6600                       		bne.s	loc_84F2
0000AFAC 5A4B                       		addq.w	#5,a3
0000AFAE                            
0000AFAE                            loc_84B2:
0000AFAE 137C 0006 0024             		move.b	#6,$24(a1)
0000AFB4 1284                       		move.b	d4,0(a1)
0000AFB6 234B 0004                  		move.l	a3,4(a1)
0000AFBA 1345 0001                  		move.b	d5,1(a1)
0000AFBE 3368 0008 0008             		move.w	8(a0),8(a1)
0000AFC4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AFCA 3368 0002 0002             		move.w	2(a0),2(a1)
0000AFD0 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000AFD6 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000AFDC 135C 0038                  		move.b	(a4)+,$38(a1)
0000AFE0 B3C8                       		cmpa.l	a0,a1
0000AFE2 6400                       		bcc.s	loc_84EE
0000AFE4 6100 0000                  		bsr.w	DisplaySprite2
0000AFE8                            
0000AFE8                            loc_84EE:
0000AFE8 51C9 FFBC                  		dbf	d1,loc_84AA
0000AFEC                            
0000AFEC                            loc_84F2:
0000AFEC 6100 0000                  		bsr.w	DisplaySprite
0000AFF0 303C 00B9                  		move.w	#$B9,d0
0000AFF4 4EF9 0000 12D0             		jmp	(PlaySound_Special).l ;	play collapsing	sound
0000AFFA                            ; ===========================================================================
0000AFFA                            ; ---------------------------------------------------------------------------
0000AFFA                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
0000AFFA                            ; ---------------------------------------------------------------------------
0000AFFA 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
0000B00A 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
0000B014 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
0000B01C 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
0000B024                            
0000B024                            ; ---------------------------------------------------------------------------
0000B024                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
0000B024                            ; ---------------------------------------------------------------------------
0000B024                            
0000B024                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B024                            
0000B024                            
0000B024                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
0000B024 43F8 D000                  		lea	($FFFFD000).w,a1
0000B028 0829 0003 0022             		btst	#3,$22(a1)
0000B02E 6700                       		beq.s	locret_856E
0000B030 3029 0008                  		move.w	8(a1),d0
0000B034 9068 0008                  		sub.w	8(a0),d0
0000B038 D041                       		add.w	d1,d0
0000B03A E248                       		lsr.w	#1,d0
0000B03C 0828 0000 0001             		btst	#0,1(a0)
0000B042 6700                       		beq.s	loc_854E
0000B044 4640                       		not.w	d0
0000B046 D041                       		add.w	d1,d0
0000B048                            
0000B048                            loc_854E:
0000B048 7200                       		moveq	#0,d1
0000B04A 1232 0000                  		move.b	(a2,d0.w),d1
0000B04E 3028 000C                  		move.w	$C(a0),d0
0000B052 9041                       		sub.w	d1,d0
0000B054 7200                       		moveq	#0,d1
0000B056 1229 0016                  		move.b	$16(a1),d1
0000B05A 9041                       		sub.w	d1,d0
0000B05C 3340 000C                  		move.w	d0,$C(a1)
0000B060 9468 0008                  		sub.w	8(a0),d2
0000B064 9569 0008                  		sub.w	d2,8(a1)
0000B068                            
0000B068                            locret_856E:
0000B068 4E75                       		rts	
0000B06A                            ; End of function SlopeObject2
0000B06A                            
0000B06A                            ; ===========================================================================
0000B06A                            ; ---------------------------------------------------------------------------
0000B06A                            ; Collision data for GHZ collapsing ledge
0000B06A                            ; ---------------------------------------------------------------------------
0000B06A                            Obj1A_SlopeData:
0000B06A                            		incbin	misc\ghzledge.bin
0000B09A                            		even
0000B09A                            
0000B09A                            ; ---------------------------------------------------------------------------
0000B09A                            ; Sprite mappings - GHZ	collapsing ledge
0000B09A                            ; ---------------------------------------------------------------------------
0000B09A                            Map_obj1A:
0000B09A                            	include "_maps\obj1A.asm"
0000B09A                            ; ---------------------------------------------------------------------------
0000B09A                            ; Sprite mappings - GHZ	collapsing ledge
0000B09A                            ; ---------------------------------------------------------------------------
0000B09A 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
0000B09E 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
0000B0A2 10                         byte_85A8:	dc.b $10
0000B0A3 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
0000B0A8 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000B0AD E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000B0B2 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000B0B7 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000B0BC D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000B0C1 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000B0C6 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000B0CB F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000B0D0 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000B0D5 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000B0DA 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000B0DF 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000B0E4 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000B0E9 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000B0EE 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000B0F3 10                         byte_85F9:	dc.b $10
0000B0F4 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0000B0F9 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000B0FE E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000B103 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000B108 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000B10D D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000B112 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000B117 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000B11C F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000B121 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000B126 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000B12B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000B130 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000B135 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000B13A 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000B13F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000B144 19                         byte_864A:	dc.b $19
0000B145 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000B14A C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000B14F D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000B154 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000B159 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000B15E E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000B163 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000B168 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000B16D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000B172 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000B177 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000B17C F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000B181 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000B186 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000B18B F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000B190 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000B195 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000B19A 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000B19F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000B1A4 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000B1A9 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000B1AE 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000B1B3 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000B1B8 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000B1BD 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000B1C2 19                         byte_86C8:	dc.b $19
0000B1C3 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000B1C8 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000B1CD D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000B1D2 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000B1D7 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000B1DC E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000B1E1 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000B1E6 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000B1EB D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000B1F0 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000B1F5 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000B1FA F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000B1FF F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000B204 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000B209 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000B20E F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000B213 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000B218 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000B21D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000B222 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000B227 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000B22C 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000B231 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000B236 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000B23B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000B240                            		even
0000B240                            		even
0000B240                            
0000B240                            ; ---------------------------------------------------------------------------
0000B240                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000B240                            ; ---------------------------------------------------------------------------
0000B240                            Map_obj53:
0000B240                            	include "_maps\obj53.asm"
0000B240                            ; ---------------------------------------------------------------------------
0000B240                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000B240                            ; ---------------------------------------------------------------------------
0000B240 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
0000B244 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
0000B248 04                         byte_874E:	dc.b 4
0000B249 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000B24E 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
0000B253 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000B258 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000B25D 08                         byte_8763:	dc.b 8
0000B25E F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000B263 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000B268 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000B26D F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0000B272 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
0000B277 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000B27C 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000B281 0805 0000 10               		dc.b 8,	5, 0, 0, $10
0000B286 04                         byte_878C:	dc.b 4
0000B287 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000B28C 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000B291 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000B296 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000B29B 08                         byte_87A1:	dc.b 8
0000B29C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000B2A1 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
0000B2A6 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000B2AB F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000B2B0 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000B2B5 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000B2BA 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000B2BF 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000B2C4                            		even
0000B2C4                            		even
0000B2C4                            
0000B2C4                            ; ===========================================================================
0000B2C4                            ; ---------------------------------------------------------------------------
0000B2C4                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000B2C4                            ; ---------------------------------------------------------------------------
0000B2C4                            
0000B2C4                            Obj1C:					; XREF: Obj_Index
0000B2C4 7000                       		moveq	#0,d0
0000B2C6 1028 0024                  		move.b	$24(a0),d0
0000B2CA 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
0000B2CE 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
0000B2D2                            ; ===========================================================================
0000B2D2 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
0000B2D4 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
0000B2D6                            ; ===========================================================================
0000B2D6                            
0000B2D6                            Obj1C_Main:				; XREF: Obj1C_Index
0000B2D6 5428 0024                  		addq.b	#2,$24(a0)
0000B2DA 7000                       		moveq	#0,d0
0000B2DC 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
0000B2E0 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000B2E4 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
0000B2E8 2159 0004                  		move.l	(a1)+,4(a0)
0000B2EC 3159 0002                  		move.w	(a1)+,2(a0)
0000B2F0 0028 0004 0001             		ori.b	#4,1(a0)
0000B2F6 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B2FA 1159 0019                  		move.b	(a1)+,$19(a0)
0000B2FE 1159 0018                  		move.b	(a1)+,$18(a0)
0000B302 1159 0020                  		move.b	(a1)+,$20(a0)
0000B306                            
0000B306                            Obj1C_ChkDel:				; XREF: Obj1C_Index
0000B306 3028 0008                  		move.w	8(a0),d0
0000B30A 0240 FF80                  		andi.w	#$FF80,d0
0000B30E 3238 F700                  		move.w	($FFFFF700).w,d1
0000B312 0441 0080                  		subi.w	#$80,d1
0000B316 0241 FF80                  		andi.w	#$FF80,d1
0000B31A 9041                       		sub.w	d1,d0
0000B31C 0C40 0280                  		cmpi.w	#$280,d0
0000B320 6200 0000                  		bhi.w	DeleteObject
0000B324 6000 0000                  		bra.w	DisplaySprite
0000B328                            ; ===========================================================================
0000B328                            ; ---------------------------------------------------------------------------
0000B328                            ; Variables for	object $1C are stored in an array
0000B328                            ; ---------------------------------------------------------------------------
0000B328 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
0000B32C 44D8                       		dc.w $44D8		; VRAM setting
0000B32E 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000B332 0000 0000                  		dc.l Map_obj1C
0000B336 44D8                       		dc.w $44D8
0000B338 0008 0200                  		dc.b 0,	8, 2, 0
0000B33C 0000 0000                  		dc.l Map_obj1C
0000B340 44D8                       		dc.w $44D8
0000B342 0008 0200                  		dc.b 0,	8, 2, 0
0000B346 0000 A460                  		dc.l Map_obj11
0000B34A 438E                       		dc.w $438E
0000B34C 0110 0100                  		dc.b 1,	$10, 1,	0
0000B350                            ; ---------------------------------------------------------------------------
0000B350                            ; Sprite mappings - SLZ	lava thrower
0000B350                            ; ---------------------------------------------------------------------------
0000B350                            Map_obj1C:
0000B350                            	include "_maps\obj1C.asm"
0000B350                            ; ---------------------------------------------------------------------------
0000B350                            ; Sprite mappings - SLZ	lava thrower
0000B350                            ; ---------------------------------------------------------------------------
0000B350 0000                       		dc.w byte_8858-Map_obj1C
0000B352 01                         byte_8858:	dc.b 1
0000B353 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000B358                            		even
0000B358                            		even
0000B358                            
0000B358                            ; ===========================================================================
0000B358                            ; ---------------------------------------------------------------------------
0000B358                            ; Object 1D - switch that activates when Sonic touches it
0000B358                            ; (this	is not used anywhere in	the game)
0000B358                            ; ---------------------------------------------------------------------------
0000B358                            
0000B358                            Obj1D:					; XREF: Obj_Index
0000B358 7000                       		moveq	#0,d0
0000B35A 1028 0024                  		move.b	$24(a0),d0
0000B35E 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
0000B362 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
0000B366                            ; ===========================================================================
0000B366 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
0000B368 0000                       		dc.w Obj1D_Action-Obj1D_Index
0000B36A 0000                       		dc.w Obj1D_Delete-Obj1D_Index
0000B36C                            ; ===========================================================================
0000B36C                            
0000B36C                            Obj1D_Main:				; XREF: Obj1D_Index
0000B36C 5428 0024                  		addq.b	#2,$24(a0)
0000B370 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
0000B378 317C 4000 0002             		move.w	#$4000,2(a0)
0000B37E 117C 0004 0001             		move.b	#4,1(a0)
0000B384 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
0000B38A 117C 0010 0019             		move.b	#$10,$19(a0)
0000B390 117C 0005 0018             		move.b	#5,$18(a0)
0000B396                            
0000B396                            Obj1D_Action:				; XREF: Obj1D_Index
0000B396 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
0000B39C 323C 0010                  		move.w	#$10,d1
0000B3A0 6100 0000                  		bsr.w	Obj1D_ChkTouch
0000B3A4 6700                       		beq.s	Obj1D_ChkDel
0000B3A6 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
0000B3AA 7001                       		moveq	#1,d0
0000B3AC 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
0000B3B0                            
0000B3B0                            Obj1D_ChkDel:
0000B3B0 6100 0000                  		bsr.w	DisplaySprite
0000B3B4 3028 0008                  		move.w	8(a0),d0
0000B3B8 0240 FF80                  		andi.w	#$FF80,d0
0000B3BC 3238 F700                  		move.w	($FFFFF700).w,d1
0000B3C0 0441 0080                  		subi.w	#$80,d1
0000B3C4 0241 FF80                  		andi.w	#$FF80,d1
0000B3C8 9041                       		sub.w	d1,d0
0000B3CA 0C40 0280                  		cmpi.w	#$280,d0
0000B3CE 6200 0000                  		bhi.w	Obj1D_Delete
0000B3D2 4E75                       		rts	
0000B3D4                            ; ===========================================================================
0000B3D4                            
0000B3D4                            Obj1D_Delete:				; XREF: Obj1D_Index
0000B3D4 6100 0000                  		bsr.w	DeleteObject
0000B3D8 4E75                       		rts	
0000B3DA                            ; ---------------------------------------------------------------------------
0000B3DA                            ; Subroutine to	check if Sonic touches the object
0000B3DA                            ; ---------------------------------------------------------------------------
0000B3DA                            
0000B3DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B3DA                            
0000B3DA                            
0000B3DA                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
0000B3DA 43F8 D000                  		lea	($FFFFD000).w,a1
0000B3DE 3029 0008                  		move.w	8(a1),d0
0000B3E2 9068 0008                  		sub.w	8(a0),d0
0000B3E6 D041                       		add.w	d1,d0
0000B3E8 6B00                       		bmi.s	loc_8918
0000B3EA D241                       		add.w	d1,d1
0000B3EC B041                       		cmp.w	d1,d0
0000B3EE 6400                       		bcc.s	loc_8918
0000B3F0 3429 000C                  		move.w	$C(a1),d2
0000B3F4 1229 0016                  		move.b	$16(a1),d1
0000B3F8 4881                       		ext.w	d1
0000B3FA D242                       		add.w	d2,d1
0000B3FC 3028 000C                  		move.w	$C(a0),d0
0000B400 0440 0010                  		subi.w	#$10,d0
0000B404 9041                       		sub.w	d1,d0
0000B406 6200                       		bhi.s	loc_8918
0000B408 0C40 FFF0                  		cmpi.w	#-$10,d0
0000B40C 6500                       		bcs.s	loc_8918
0000B40E 70FF                       		moveq	#-1,d0
0000B410 4E75                       		rts	
0000B412                            ; ===========================================================================
0000B412                            
0000B412                            loc_8918:
0000B412 7000                       		moveq	#0,d0
0000B414 4E75                       		rts	
0000B416                            ; End of function Obj1D_ChkTouch
0000B416                            
0000B416                            ; ===========================================================================
0000B416                            ; ---------------------------------------------------------------------------
0000B416                            ; Sprite mappings - object 1D
0000B416                            ; ---------------------------------------------------------------------------
0000B416                            Map_obj1D:
0000B416                            	include "_maps\obj1D.asm"
0000B416                            ; ---------------------------------------------------------------------------
0000B416                            ; Sprite mappings - object 1D
0000B416                            ; ---------------------------------------------------------------------------
0000B416 0000                       		dc.w byte_891E-Map_obj1D
0000B418 04                         byte_891E:	dc.b 4
0000B419 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000B41E 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000B423 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000B428 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000B42E 00                         		even
0000B42E 00                         		even
0000B42E                            
0000B42E                            ; ===========================================================================
0000B42E                            ; ---------------------------------------------------------------------------
0000B42E                            ; Object 2A - doors (SBZ)
0000B42E                            ; ---------------------------------------------------------------------------
0000B42E                            
0000B42E                            Obj2A:					; XREF: Obj_Index
0000B42E 7000                       		moveq	#0,d0
0000B430 1028 0024                  		move.b	$24(a0),d0
0000B434 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
0000B438 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
0000B43C                            ; ===========================================================================
0000B43C 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
0000B43E 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
0000B440                            ; ===========================================================================
0000B440                            
0000B440                            Obj2A_Main:				; XREF: Obj2A_Index
0000B440 5428 0024                  		addq.b	#2,$24(a0)
0000B444 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
0000B44C 317C 42E8 0002             		move.w	#$42E8,2(a0)
0000B452 0028 0004 0001             		ori.b	#4,1(a0)
0000B458 117C 0008 0019             		move.b	#8,$19(a0)
0000B45E 117C 0004 0018             		move.b	#4,$18(a0)
0000B464                            
0000B464                            Obj2A_OpenShut:				; XREF: Obj2A_Index
0000B464 323C 0040                  		move.w	#$40,d1
0000B468 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
0000B46C 3038 D008                  		move.w	($FFFFD008).w,d0
0000B470 D041                       		add.w	d1,d0
0000B472 B068 0008                  		cmp.w	8(a0),d0
0000B476 6500                       		bcs.s	Obj2A_Animate
0000B478 9041                       		sub.w	d1,d0
0000B47A 9041                       		sub.w	d1,d0
0000B47C B068 0008                  		cmp.w	8(a0),d0
0000B480 6400                       		bcc.s	Obj2A_Animate
0000B482 D041                       		add.w	d1,d0
0000B484 B068 0008                  		cmp.w	8(a0),d0
0000B488 6400                       		bcc.s	loc_899A
0000B48A 0828 0000 0022             		btst	#0,$22(a0)
0000B490 6600                       		bne.s	Obj2A_Animate
0000B492 6000                       		bra.s	Obj2A_Open
0000B494                            ; ===========================================================================
0000B494                            
0000B494                            loc_899A:				; XREF: Obj2A_OpenShut
0000B494 0828 0000 0022             		btst	#0,$22(a0)
0000B49A 6700                       		beq.s	Obj2A_Animate
0000B49C                            
0000B49C                            Obj2A_Open:				; XREF: Obj2A_OpenShut
0000B49C 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
0000B4A2                            
0000B4A2                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
0000B4A2 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
0000B4A8 6100 0000                  		bsr.w	AnimateSprite
0000B4AC 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0000B4B0 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
0000B4B2 323C 0011                  		move.w	#$11,d1
0000B4B6 343C 0020                  		move.w	#$20,d2
0000B4BA 3602                       		move.w	d2,d3
0000B4BC 5243                       		addq.w	#1,d3
0000B4BE 3828 0008                  		move.w	8(a0),d4
0000B4C2 6100 0000                  		bsr.w	SolidObject
0000B4C6                            
0000B4C6                            Obj2A_MarkAsUsed:
0000B4C6 6000 0000                  		bra.w	MarkObjGone
0000B4CA                            ; ===========================================================================
0000B4CA                            Ani_obj2A:
0000B4CA                            	include "_anim\obj2A.asm"
0000B4CA                            ; ---------------------------------------------------------------------------
0000B4CA                            ; Animation script - doors (SBZ)
0000B4CA                            ; ---------------------------------------------------------------------------
0000B4CA 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
0000B4CC 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
0000B4CE 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
0000B4DA 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
0000B4E6                            		even
0000B4E6                            		even
0000B4E6                            
0000B4E6                            ; ---------------------------------------------------------------------------
0000B4E6                            ; Sprite mappings - doors (SBZ)
0000B4E6                            ; ---------------------------------------------------------------------------
0000B4E6                            Map_obj2A:
0000B4E6                            	include "_maps\obj2A.asm"
0000B4E6                            ; ---------------------------------------------------------------------------
0000B4E6                            ; Sprite mappings - doors (SBZ)
0000B4E6                            ; ---------------------------------------------------------------------------
0000B4E6 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
0000B4EA 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
0000B4EE 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
0000B4F2 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
0000B4F6 0000                       		dc.w byte_8A56-Map_obj2A
0000B4F8 02                         byte_89FE:	dc.b 2
0000B4F9 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
0000B4FE 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
0000B503 02                         byte_8A09:	dc.b 2
0000B504 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
0000B509 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
0000B50E 02                         byte_8A14:	dc.b 2
0000B50F D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
0000B514 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
0000B519 02                         byte_8A1F:	dc.b 2
0000B51A D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
0000B51F 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
0000B524 02                         byte_8A2A:	dc.b 2
0000B525 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
0000B52A 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
0000B52F 02                         byte_8A35:	dc.b 2
0000B530 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
0000B535 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
0000B53A 02                         byte_8A40:	dc.b 2
0000B53B C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
0000B540 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
0000B545 02                         byte_8A4B:	dc.b 2
0000B546 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
0000B54B 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
0000B550 02                         byte_8A56:	dc.b 2
0000B551 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
0000B556 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
0000B55C 00                         		even
0000B55C 00                         		even
0000B55C                            
0000B55C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B55C                            
0000B55C                            
0000B55C                            Obj44_SolidWall:			; XREF: Obj44_Solid
0000B55C 6100 0000                  		bsr.w	Obj44_SolidWall2
0000B560 6700                       		beq.s	loc_8AA8
0000B562 6B00 0000                  		bmi.w	loc_8AC4
0000B566 4A40                       		tst.w	d0
0000B568 6700 0000                  		beq.w	loc_8A92
0000B56C 6B00                       		bmi.s	loc_8A7C
0000B56E 4A69 0010                  		tst.w	$10(a1)
0000B572 6B00                       		bmi.s	loc_8A92
0000B574 6000                       		bra.s	loc_8A82
0000B576                            ; ===========================================================================
0000B576                            
0000B576                            loc_8A7C:
0000B576 4A69 0010                  		tst.w	$10(a1)
0000B57A 6A00                       		bpl.s	loc_8A92
0000B57C                            
0000B57C                            loc_8A82:
0000B57C 9169 0008                  		sub.w	d0,8(a1)
0000B580 337C 0000 0014             		move.w	#0,$14(a1)
0000B586 337C 0000 0010             		move.w	#0,$10(a1)
0000B58C                            
0000B58C                            loc_8A92:
0000B58C 0829 0001 0022             		btst	#1,$22(a1)
0000B592 6600                       		bne.s	loc_8AB6
0000B594 08E9 0005 0022             		bset	#5,$22(a1)
0000B59A 08E8 0005 0022             		bset	#5,$22(a0)
0000B5A0 4E75                       		rts	
0000B5A2                            ; ===========================================================================
0000B5A2                            
0000B5A2                            loc_8AA8:
0000B5A2 0828 0005 0022             		btst	#5,$22(a0)
0000B5A8 6700                       		beq.s	locret_8AC2
0000B5AA 337C 0001 001C             		move.w	#1,$1C(a1)
0000B5B0                            
0000B5B0                            loc_8AB6:
0000B5B0 08A8 0005 0022             		bclr	#5,$22(a0)
0000B5B6 08A9 0005 0022             		bclr	#5,$22(a1)
0000B5BC                            
0000B5BC                            locret_8AC2:
0000B5BC 4E75                       		rts	
0000B5BE                            ; ===========================================================================
0000B5BE                            
0000B5BE                            loc_8AC4:
0000B5BE 4A69 0012                  		tst.w	$12(a1)
0000B5C2 6A00                       		bpl.s	locret_8AD8
0000B5C4 4A43                       		tst.w	d3
0000B5C6 6A00                       		bpl.s	locret_8AD8
0000B5C8 9769 000C                  		sub.w	d3,$C(a1)
0000B5CC 337C 0000 0012             		move.w	#0,$12(a1)
0000B5D2                            
0000B5D2                            locret_8AD8:
0000B5D2 4E75                       		rts	
0000B5D4                            ; End of function Obj44_SolidWall
0000B5D4                            
0000B5D4                            
0000B5D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B5D4                            
0000B5D4                            
0000B5D4                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
0000B5D4 43F8 D000                  		lea	($FFFFD000).w,a1
0000B5D8 3029 0008                  		move.w	8(a1),d0
0000B5DC 9068 0008                  		sub.w	8(a0),d0
0000B5E0 D041                       		add.w	d1,d0
0000B5E2 6B00                       		bmi.s	loc_8B48
0000B5E4 3601                       		move.w	d1,d3
0000B5E6 D643                       		add.w	d3,d3
0000B5E8 B043                       		cmp.w	d3,d0
0000B5EA 6200                       		bhi.s	loc_8B48
0000B5EC 1629 0016                  		move.b	$16(a1),d3
0000B5F0 4883                       		ext.w	d3
0000B5F2 D443                       		add.w	d3,d2
0000B5F4 3629 000C                  		move.w	$C(a1),d3
0000B5F8 9668 000C                  		sub.w	$C(a0),d3
0000B5FC D642                       		add.w	d2,d3
0000B5FE 6B00                       		bmi.s	loc_8B48
0000B600 3802                       		move.w	d2,d4
0000B602 D844                       		add.w	d4,d4
0000B604 B644                       		cmp.w	d4,d3
0000B606 6400                       		bcc.s	loc_8B48
0000B608 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000B60C 6B00                       		bmi.s	loc_8B48
0000B60E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000B614 6400                       		bcc.s	loc_8B48
0000B616 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B61A 6600                       		bne.s	loc_8B48
0000B61C 3A00                       		move.w	d0,d5
0000B61E B240                       		cmp.w	d0,d1
0000B620 6400                       		bcc.s	loc_8B30
0000B622 D241                       		add.w	d1,d1
0000B624 9041                       		sub.w	d1,d0
0000B626 3A00                       		move.w	d0,d5
0000B628 4445                       		neg.w	d5
0000B62A                            
0000B62A                            loc_8B30:
0000B62A 3203                       		move.w	d3,d1
0000B62C B443                       		cmp.w	d3,d2
0000B62E 6400                       		bcc.s	loc_8B3C
0000B630 9644                       		sub.w	d4,d3
0000B632 3203                       		move.w	d3,d1
0000B634 4441                       		neg.w	d1
0000B636                            
0000B636                            loc_8B3C:
0000B636 BA41                       		cmp.w	d1,d5
0000B638 6200                       		bhi.s	loc_8B44
0000B63A 7801                       		moveq	#1,d4
0000B63C 4E75                       		rts	
0000B63E                            ; ===========================================================================
0000B63E                            
0000B63E                            loc_8B44:
0000B63E 78FF                       		moveq	#-1,d4
0000B640 4E75                       		rts	
0000B642                            ; ===========================================================================
0000B642                            
0000B642                            loc_8B48:
0000B642 7800                       		moveq	#0,d4
0000B644 4E75                       		rts	
0000B646                            ; End of function Obj44_SolidWall2
0000B646                            
0000B646                            ; ===========================================================================
0000B646                            ; ---------------------------------------------------------------------------
0000B646                            ; Object 1E - Ball Hog enemy (SBZ)
0000B646                            ; ---------------------------------------------------------------------------
0000B646                            
0000B646                            Obj1E:					; XREF: Obj_Index
0000B646 7000                       		moveq	#0,d0
0000B648 1028 0024                  		move.b	$24(a0),d0
0000B64C 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
0000B650 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
0000B654                            ; ===========================================================================
0000B654 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
0000B656 0000                       		dc.w Obj1E_Action-Obj1E_Index
0000B658                            ; ===========================================================================
0000B658                            
0000B658                            Obj1E_Main:				; XREF: Obj1E_Index
0000B658                            		;move.b	#$13,$16(a0)
0000B658                            		;move.b	#8,$17(a0)
0000B658 0C78 0004 FE10                             cmpi.w	#$4,($FFFFFE10).w ; is zone SYZ?
0000B65E 6700 0000                  		beq.w	Obj1E_Rockets	; if yes, branch
0000B662 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000B66A 6000                                      bra.s    Obj1E_MmCont
0000B66C                            
0000B66C                            Obj1E_Rockets:
0000B66C 217C 0000 0000 0004        		move.l	#Map_obj1ERockets,4(a0)
0000B674                            
0000B674                            
0000B674                            Obj1E_MmCont:
0000B674 317C 2302 0002             		move.w	#$2302,2(a0)
0000B67A 0C38 0003 FE10                             cmpi.b    #3,($FFFFFE10).w   
0000B680 6700                                       beq.s    Obj1E_SLZTiles    
0000B682 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000B688 6700                       		beq.s	Obj1E_LzTiles
0000B68A 6000                                       bra.s    Obj1E_MCont
0000B68C                            
0000B68C                            Obj1E_SLZTiles:
0000B68C 317C 23DC 0002                             move.w    #(1<<13)+($7B80/$20),2(a0)    ; ïàëèòðà è òàéëû äëÿ GHZ
0000B692 6000                                       bra.s    Obj1E_MCont
0000B694                            
0000B694                            Obj1E_LzTiles:
0000B694 317C 23F6 0002                             move.w    #(1<<13)+($7EC0/$20),2(a0)    ; ïàëèòðà è òàéëû äëÿ GHZ
0000B69A                            
0000B69A                            Obj1E_MCont:
0000B69A                            		;move.b	#4,1(a0)
0000B69A                            		;move.b	#4,$18(a0)
0000B69A                            		;move.b	#5,$20(a0)
0000B69A                            		;move.b	#2,$21(a0)
0000B69A                            		;move.b	#$C,$19(a0)
0000B69A                            		;;bsr.w	ObjectFall
0000B69A                            		;;jsr	ObjHitFloor
0000B69A                            		;;tst.w	d1
0000B69A                            		;;bpl.s	locret_8BAC
0000B69A                            		;;add.w	d1,$C(a0)
0000B69A                            		;move.w	#0,$12(a0)
0000B69A 117C 0004 0001             		move.b	#4,1(a0)
0000B6A0 117C 0011 0016             		move.b	#$11,$16(a0)
0000B6A6 117C 0004 0018             		move.b	#4,$18(a0)
0000B6AC 117C 000A 0020                             move.b	#$A,$20(a0)
0000B6B2 117C 0014 0019             		move.b	#$14,$19(a0)
0000B6B8 117C 0060 0030                             move.b	#$60,$30(a0)	; set turn delay time used by 1 subtype
0000B6BE 5428 0024                  		addq.b	#2,$24(a0)
0000B6C2                            
0000B6C2                            locret_8BAC:
0000B6C2 4E75                       		rts	
0000B6C4                            ; ===========================================================================
0000B6C4                            
0000B6C4                            Obj1E_Action:				; XREF: Obj1E_Index
0000B6C4 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
0000B6CA 6100 0000                  		bsr.w	AnimateSprite
0000B6CE 0C28 0001 0028                             cmpi.b  #1,$28(a0) 
0000B6D4 6700                                       beq.s   Obj1E_TurnH
0000B6D6 6000                                       bra.s   Obj1E_GetReady
0000B6D8                            
0000B6D8                            Obj1E_TurnH:
0000B6D8 5328 0030                  		subq.b	#1,$30(a0)	; subtract 1 from turn delay time
0000B6DC 6A00 0000                  		bpl.w	Obj1E_GetReady	; if time remains, branch
0000B6E0 117C 0060 0030             		move.b	#$60,$30(a0)	; reset	turn delay time
0000B6E6 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B6EA 0868 0000 0022             		bchg	#0,$22(a0)	; change facing direction
0000B6F0                            
0000B6F0                            Obj1E_GetReady:
0000B6F0 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is final frame (03) displayed?
0000B6F6 6600                       		bne.s	Obj1E_SetBall	; if not, branch
0000B6F8 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000B6FC 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000B6FE 6000                       		bra.s	Obj1E_MarkAsGone	
0000B700                            ; ===========================================================================
0000B700                            
0000B700                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000B700 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0000B704                            
0000B704                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0000B704 6000 0000                  		bra.w	MarkObjGone
0000B708                            ; ===========================================================================
0000B708                            
0000B708                            Obj1E_MakeBall:				; XREF: Obj1E_Action
0000B708 0C38 0005 FE10                             cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
0000B70E 6600                                       bne.s   Obj1E_SkipSound
0000B710 303C 00C8                  		move.w	#$C8,d0
0000B714 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play flame sound
0000B71A                            
0000B71A                            Obj1E_SkipSound:
0000B71A 117C 0001 0032             		move.b	#1,$32(a0)
0000B720 6100 0000                  		bsr.w	SingleObjLoad
0000B724 6600                       		bne.s	loc_8C1A
0000B726 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
0000B72A 3368 0008 0008             		move.w	8(a0),8(a1)
0000B730 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B736 337C FB00 0010             		move.w	#-$500,$10(a1)	; cannonball flies to the left
0000B73C 337C 0000 0012             		move.w	#0,$12(a1)
0000B742 70FC                       		moveq	#-4,d0
0000B744 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
0000B74A 6700                       		beq.s	loc_8C0A	; if not, branch
0000B74C 4440                       		neg.w	d0
0000B74E 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000B752                            
0000B752                            loc_8C0A:
0000B752 D169 0008                  		add.w	d0,8(a1)
0000B756 0669 000C 000C             		addi.w	#$C,$C(a1)
0000B75C 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000B762                            
0000B762                            loc_8C1A:
0000B762 60A0                       		bra.s	Obj1E_MarkAsGone
0000B764                            ; ===========================================================================
0000B764                            ; ---------------------------------------------------------------------------
0000B764                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000B764                            ; ---------------------------------------------------------------------------
0000B764                            
0000B764                            Obj20:					; XREF: Obj_Index
0000B764 7000                       		moveq	#0,d0
0000B766 1028 0024                  		move.b	$24(a0),d0
0000B76A 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0000B76E 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0000B772                            ; ===========================================================================
0000B772 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
0000B774 0000                       		dc.w Obj20_Bounce-Obj20_Index
0000B776                            ; ===========================================================================
0000B776                            
0000B776                            Obj20_Main:				; XREF: Obj20_Index
0000B776 5428 0024                  		addq.b	#2,$24(a0)
0000B77A 117C 0007 0016             		move.b	#7,$16(a0)
0000B780 0C78 0402 FE10                             cmpi.w	#$402,($FFFFFE10).w ; is level SYZ1?
0000B786 6700 0000                  		beq.w	Obj20_Rockets	; if yes, branch
0000B78A 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000B792 6000                                      bra.s    Obj20_MmCont
0000B794                            
0000B794                            Obj20_Rockets:
0000B794 217C 0000 0000 0004        		move.l	#Map_obj1ERockets,4(a0)
0000B79C                            
0000B79C                            
0000B79C                            Obj20_MmCont:
0000B79C 317C 2302 0002             		move.w	#$2302,2(a0)
0000B7A2 0C38 0003 FE10                             cmpi.b    #3,($FFFFFE10).w   
0000B7A8 6700                                       beq.s    Obj20_SLZTiles
0000B7AA 0C78 0502 FE10                             cmpi.w    #$502,($FFFFFE10).w  
0000B7B0 6700                                       beq.s    Obj20_SLZTiles  
0000B7B2 0C38 0001 FE10                             cmpi.b    #1,($FFFFFE10).w   
0000B7B8 6700                                       beq.s    Obj20_SilverSonic   
0000B7BA 0C38 0002 FE10                             cmpi.b    #2,($FFFFFE10).w   
0000B7C0 6700                                       beq.s    Obj20_WhispKing  
0000B7C2 0C38 0004 FE10                             cmpi.b    #4,($FFFFFE10).w   
0000B7C8 6700                                       beq.s    Obj20_WhispKing    
0000B7CA 6000                                       bra.s    Obj20_MCont
0000B7CC                            
0000B7CC                            Obj20_SLZTiles: 
0000B7CC 317C 23DC 0002                             move.w    #(1<<13)+($7B80/$20),2(a0)        
0000B7D2 6000                                       bra.s    Obj20_MCont
0000B7D4                            
0000B7D4                            Obj20_SilverSonic:
0000B7D4 317C 23F6 0002                             move.w    #(1<<13)+($7EC0/$20),2(a0)    ; pallete and tiles used for miniboss fights        
0000B7DA 6000                                       bra.s    Obj20_MCont
0000B7DC                            
0000B7DC                            Obj20_WhispKing:
0000B7DC 317C 2500 0002                             move.w    #(1<<13)+($A000/$20),2(a0)    ; pallete and tiles used for miniboss fights    
0000B7E2                            
0000B7E2                            Obj20_MCont:
0000B7E2 117C 0004 0001             		move.b	#4,1(a0)
0000B7E8 117C 0003 0018             		move.b	#3,$18(a0)
0000B7EE 117C 0087 0020             		move.b	#$87,$20(a0)
0000B7F4 117C 0008 0019             		move.b	#8,$19(a0)
0000B7FA 7000                       		moveq	#0,d0
0000B7FC 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000B800 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000B804 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
0000B808 117C 0004 001A             		move.b	#4,$1A(a0)
0000B80E 6000                                       bra.s   Obj20_Animate
0000B810                            
0000B810                            Obj20_Bounce:				; XREF: Obj20_Index
0000B810                            		;jsr	ObjectFall
0000B810                            		;tst.w	$12(a0)
0000B810                            		;bmi.s	Obj20_ChkExplode
0000B810                            		;jsr	ObjHitFloor
0000B810                            		;tst.w	d1
0000B810                            		;bpl.s	Obj20_ChkExplode
0000B810                            		;add.w	d1,$C(a0)
0000B810                            		;move.w	#-$300,$12(a0)
0000B810                            		;tst.b	d3
0000B810                            		;beq.s	Obj20_ChkExplode
0000B810                            		;bmi.s	loc_8CA4
0000B810                            		;tst.w	$10(a0)
0000B810                            		;bpl.s	Obj20_ChkExplode
0000B810                            		;neg.w	$10(a0)
0000B810                            		;bra.s	Obj20_ChkExplode
0000B810 4A28 0001                                   tst.b	1(a0)
0000B814 6A00 0000                  		bpl.w	DeleteObject
0000B818 6100 0000                  		bsr.w	SpeedToPos
0000B81C 4EB9 0000 0000             		jsr	ObjHitFloor
0000B822 4A41                       		tst.w	d1		; has object hit the floor
0000B824 6A00                       		bpl.s	Obj20_Animate	; if not, branch
0000B826 0C38 0005 FE10                             cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
0000B82C 6700                                       beq.s   Obj20_Animate
0000B82E 0C38 0001 FE10                             cmpi.b	#1,($FFFFFE10).w ; is zone LZ?
0000B834 6700                                       beq.s   Obj20_ChkBoss
0000B836 6000                       		bra.s	Obj20_Explode
0000B838                            
0000B838                            Obj20_ChkBoss:
0000B838 4A38 F7AA                                  tst.b   ($FFFFF7AA).w
0000B83C 6700                                       beq.s   Obj20_Animate
0000B83E                            		
0000B83E                            Obj20_Explode:
0000B83E 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	(Obj3F)
0000B842 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0000B848 4EF9 0000 0000             		jmp	Obj3F		; jump to explosion code
0000B84E                            ; ===========================================================================
0000B84E                            
0000B84E                            ;loc_8CA4:				; XREF: Obj20_Bounce
0000B84E                            		;tst.w	$10(a0)
0000B84E                            		;bmi.s	Obj20_ChkExplode
0000B84E                            		;neg.w	$10(a0)
0000B84E                            
0000B84E                            ;Obj20_ChkExplode:			; XREF: Obj20_Bounce
0000B84E                            		;subq.w	#1,$30(a0)	; subtract 1 from explosion time
0000B84E                            		;bpl.s	Obj20_Animate	; if time is > 0, branch
0000B84E                            		;move.b	#$24,0(a0)
0000B84E                            		;move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
0000B84E                            		;move.b	#0,$24(a0)	; reset	routine	counter
0000B84E                            		;bra.w	Obj3F		; jump to explosion code
0000B84E                            ; ===========================================================================
0000B84E                            
0000B84E                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000B84E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B852 6A00                       		bpl.s	Obj20_Display
0000B854 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
0000B85A 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000B860                            
0000B860                            Obj20_Display:
0000B860 6100 0000                  		bsr.w	DisplaySprite
0000B864 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B868 0640 00E0                  		addi.w	#$E0,d0
0000B86C B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000B870 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000B874 4E75                       		rts	
0000B876                            ; ===========================================================================
0000B876                            ; ---------------------------------------------------------------------------
0000B876                            ; Object 24 - explosion	from a destroyed monitor
0000B876                            ; ---------------------------------------------------------------------------
0000B876                            
0000B876                            Obj24:					; XREF: Obj_Index
0000B876 7000                       		moveq	#0,d0
0000B878 1028 0024                  		move.b	$24(a0),d0
0000B87C 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000B880 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000B884                            ; ===========================================================================
0000B884 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000B886 0000                       		dc.w Obj24_Animate-Obj24_Index
0000B888                            ; ===========================================================================
0000B888                            
0000B888                            Obj24_Main:				; XREF: Obj24_Index
0000B888 5428 0024                  		addq.b	#2,$24(a0)
0000B88C 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
0000B894 317C 041C 0002             		move.w	#$41C,2(a0)
0000B89A 117C 0004 0001             		move.b	#4,1(a0)
0000B8A0 117C 0001 0018             		move.b	#1,$18(a0)
0000B8A6 117C 0000 0020             		move.b	#0,$20(a0)
0000B8AC 117C 000C 0019             		move.b	#$C,$19(a0)
0000B8B2 117C 0009 001E             		move.b	#9,$1E(a0)
0000B8B8 117C 0000 001A             		move.b	#0,$1A(a0)
0000B8BE 303C 00A5                  		move.w	#$A5,d0
0000B8C2 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play explosion sound
0000B8C8                            
0000B8C8                            Obj24_Animate:				; XREF: Obj24_Index
0000B8C8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B8CC 6A00                       		bpl.s	Obj24_Display
0000B8CE 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
0000B8D4 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000B8D8 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000B8DE 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000B8E2                            
0000B8E2                            Obj24_Display:
0000B8E2 6000 0000                  		bra.w	DisplaySprite
0000B8E6                            ; ===========================================================================
0000B8E6                            ; ---------------------------------------------------------------------------
0000B8E6                            ; Object 27 - explosion	from a destroyed enemy
0000B8E6                            ; ---------------------------------------------------------------------------
0000B8E6                            
0000B8E6                            Obj27:					; XREF: Obj_Index
0000B8E6 7000                       		moveq	#0,d0
0000B8E8 1028 0024                  		move.b	$24(a0),d0
0000B8EC 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000B8F0 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000B8F4                            ; ===========================================================================
0000B8F4 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
0000B8F6 0000                       		dc.w Obj27_Main-Obj27_Index
0000B8F8 0000                       		dc.w Obj27_Animate-Obj27_Index
0000B8FA                            ; ===========================================================================
0000B8FA                            
0000B8FA                            Obj27_LoadAnimal:			; XREF: Obj27_Index
0000B8FA 5428 0024                  		addq.b	#2,$24(a0)
0000B8FE 6100 0000                  		bsr.w	SingleObjLoad
0000B902 6600                       		bne.s	Obj27_Main
0000B904 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0000B908 3368 0008 0008             		move.w	8(a0),8(a1)
0000B90E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B914 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000B91A                            
0000B91A                            Obj27_Main:				; XREF: Obj27_Index
0000B91A 5428 0024                  		addq.b	#2,$24(a0)
0000B91E 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000B926 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000B92C 117C 0004 0001             		move.b	#4,1(a0)
0000B932 117C 0001 0018             		move.b	#1,$18(a0)
0000B938 117C 0000 0020             		move.b	#0,$20(a0)
0000B93E 117C 000C 0019             		move.b	#$C,$19(a0)
0000B944 117C 0004 001E             		move.b	#4,$1E(a0)	; set frame duration to	7 frames
0000B94A 117C 0000 001A             		move.b	#0,$1A(a0)
0000B950 303C 00C4                  		move.w	#$C4,d0
0000B954 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000B95A                            
0000B95A                            Obj27_Animate:				; XREF: Obj27_Index
0000B95A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B95E 6A00                       		bpl.s	Obj27_Display
0000B960 117C 0004 001E             		move.b	#4,$1E(a0)	; set frame duration to	7 frames
0000B966 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000B96A 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000B970 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000B974                            
0000B974                            Obj27_Display:
0000B974 6000 0000                  		bra.w	DisplaySprite
0000B978                            ; ===========================================================================
0000B978                            ; ---------------------------------------------------------------------------
0000B978                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000B978                            ; ---------------------------------------------------------------------------
0000B978                            
0000B978                            Obj3F:					; XREF: Obj_Index
0000B978 7000                       		moveq	#0,d0
0000B97A 1028 0024                  		move.b	$24(a0),d0
0000B97E 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000B982 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000B986                            ; ===========================================================================
0000B986 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000B988 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
0000B98A                            ; ===========================================================================
0000B98A                            
0000B98A                            Obj3F_Main:				; XREF: Obj3F_Index
0000B98A 5428 0024                  		addq.b	#2,$24(a0)
0000B98E 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
0000B996 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000B99C 117C 0004 0001             		move.b	#4,1(a0)
0000B9A2 117C 0001 0018             		move.b	#1,$18(a0)
0000B9A8 117C 0000 0020             		move.b	#0,$20(a0)
0000B9AE 117C 000C 0019             		move.b	#$C,$19(a0)
0000B9B4 117C 0007 001E             		move.b	#7,$1E(a0)
0000B9BA 117C 0000 001A             		move.b	#0,$1A(a0)
0000B9C0 303C 00C4                  		move.w	#$C4,d0
0000B9C4 4EF9 0000 12D0             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
0000B9CA                            ; ===========================================================================
0000B9CA                            Ani_obj1E:
0000B9CA                            	include "_anim\obj1E.asm"
0000B9CA                            ; ---------------------------------------------------------------------------
0000B9CA                            ; Animation script - ball hog (SBZ)
0000B9CA                            ; ---------------------------------------------------------------------------
0000B9CA 0000                       		dc.w byte_8E4A-Ani_obj1E
0000B9CC                            ;byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 1, 1, 1, $FF
0000B9CC                            ;		even
0000B9CC 0901 0002 0002 0003 FF     byte_8E4A:	dc.b 9, 1, 0, 2, 0, 2, 0, 3, $FF
0000B9D6 00                         		even
0000B9D6 00                         		even
0000B9D6                            
0000B9D6                            ; ---------------------------------------------------------------------------
0000B9D6                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000B9D6                            ; ---------------------------------------------------------------------------
0000B9D6                            Map_obj1E:
0000B9D6                            	include "_maps\obj1E.asm"
0000B9D6                            ; --------------------------------------------------------------------------------
0000B9D6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B9D6                            ; --------------------------------------------------------------------------------
0000B9D6                            
0000B9D6                            SME_bXH1Q:	
0000B9D6 0000 0000                  		dc.w SME_bXH1Q_C-SME_bXH1Q, SME_bXH1Q_2B-SME_bXH1Q	
0000B9DA 0000 0000                  		dc.w SME_bXH1Q_4A-SME_bXH1Q, SME_bXH1Q_69-SME_bXH1Q	
0000B9DE 0000 0000                  		dc.w SME_bXH1Q_88-SME_bXH1Q, SME_bXH1Q_8E-SME_bXH1Q	
0000B9E2 06                         SME_bXH1Q_C:	dc.b 6	
0000B9E3 EF09 0000 F4               		dc.b $EF, 9, 0, 0, $F4	
0000B9E8 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4	
0000B9ED 1508 0023 F4               		dc.b $15, 8, 0, $23, $F4	
0000B9F2 FD01 0021 0B               		dc.b $FD, 1, 0, $21, $B	
0000B9F7 0D01 001F 0B               		dc.b $D, 1, 0, $1F, $B	
0000B9FC ED01 001D 0B               		dc.b $ED, 1, 0, $1D, $B	
0000BA01 06                         SME_bXH1Q_2B:	dc.b 6	
0000BA02 F109 0000 F4               		dc.b $F1, 9, 0, 0, $F4	
0000BA07 010A 0006 F4               		dc.b 1, $A, 0, 6, $F4	
0000BA0C 1708 0023 F4               		dc.b $17, 8, 0, $23, $F4	
0000BA11 FF01 0021 0B               		dc.b $FF, 1, 0, $21, $B	
0000BA16 0F01 001F 0B               		dc.b $F, 1, 0, $1F, $B	
0000BA1B EF01 001D 0B               		dc.b $EF, 1, 0, $1D, $B	
0000BA20 06                         SME_bXH1Q_4A:	dc.b 6	
0000BA21 ED09 0000 F4               		dc.b $ED, 9, 0, 0, $F4	
0000BA26 FD0A 0006 F4               		dc.b $FD, $A, 0, 6, $F4	
0000BA2B 1308 0023 F4               		dc.b $13, 8, 0, $23, $F4	
0000BA30 FB01 0021 0B               		dc.b $FB, 1, 0, $21, $B	
0000BA35 0B01 001F 0B               		dc.b $B, 1, 0, $1F, $B	
0000BA3A EB01 001D 0B               		dc.b $EB, 1, 0, $1D, $B	
0000BA3F 06                         SME_bXH1Q_69:	dc.b 6	
0000BA40 EF09 002F F4               		dc.b $EF, 9, 0, $2F, $F4	
0000BA45 FF0A 0035 F4               		dc.b $FF, $A, 0, $35, $F4	
0000BA4A 0D01 0040 0B               		dc.b $D, 1, 0, $40, $B	
0000BA4F ED01 003E 0B               		dc.b $ED, 1, 0, $3E, $B	
0000BA54 1508 0023 F4               		dc.b $15, 8, 0, $23, $F4	
0000BA59 FD05 001F 03               		dc.b $FD, 5, 0, $1F, 3	
0000BA5E 01                         SME_bXH1Q_88:	dc.b 1	
0000BA5F F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000BA64 01                         SME_bXH1Q_8E:	dc.b 1	
0000BA65 F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000BA6A                            		even
0000BA6A                            		even
0000BA6A                            Map_obj1ERockets:
0000BA6A                            	include "_maps\rocket.asm"
0000BA6A                            ; --------------------------------------------------------------------------------
0000BA6A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BA6A                            ; --------------------------------------------------------------------------------
0000BA6A                            
0000BA6A                            SME_aMzQR:	
0000BA6A 0000 0000                  		dc.w SME_aMzQR_C-SME_aMzQR, SME_aMzQR_2B-SME_aMzQR	
0000BA6E 0000 0000                  		dc.w SME_aMzQR_4A-SME_aMzQR, SME_aMzQR_69-SME_aMzQR	
0000BA72 0000 0000                  		dc.w SME_aMzQR_88-SME_aMzQR, SME_aMzQR_93-SME_aMzQR	
0000BA76 06                         SME_aMzQR_C:	dc.b 6	
0000BA77 EF09 0000 F4               		dc.b $EF, 9, 0, 0, $F4	
0000BA7C FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4	
0000BA81 1508 0023 F4               		dc.b $15, 8, 0, $23, $F4	
0000BA86 FD01 0021 0B               		dc.b $FD, 1, 0, $21, $B	
0000BA8B 0D01 001F 0B               		dc.b $D, 1, 0, $1F, $B	
0000BA90 ED01 001D 0B               		dc.b $ED, 1, 0, $1D, $B	
0000BA95 06                         SME_aMzQR_2B:	dc.b 6	
0000BA96 F109 0000 F4               		dc.b $F1, 9, 0, 0, $F4	
0000BA9B 010A 0006 F4               		dc.b 1, $A, 0, 6, $F4	
0000BAA0 1708 0023 F4               		dc.b $17, 8, 0, $23, $F4	
0000BAA5 FF01 0021 0B               		dc.b $FF, 1, 0, $21, $B	
0000BAAA 0F01 001F 0B               		dc.b $F, 1, 0, $1F, $B	
0000BAAF EF01 001D 0B               		dc.b $EF, 1, 0, $1D, $B	
0000BAB4 06                         SME_aMzQR_4A:	dc.b 6	
0000BAB5 ED09 0000 F4               		dc.b $ED, 9, 0, 0, $F4	
0000BABA FD0A 0006 F4               		dc.b $FD, $A, 0, 6, $F4	
0000BABF 1308 0023 F4               		dc.b $13, 8, 0, $23, $F4	
0000BAC4 FB01 0021 0B               		dc.b $FB, 1, 0, $21, $B	
0000BAC9 0B01 001F 0B               		dc.b $B, 1, 0, $1F, $B	
0000BACE EB01 001D 0B               		dc.b $EB, 1, 0, $1D, $B	
0000BAD3 06                         SME_aMzQR_69:	dc.b 6	
0000BAD4 EF09 002F F4               		dc.b $EF, 9, 0, $2F, $F4	
0000BAD9 FF0A 0035 F4               		dc.b $FF, $A, 0, $35, $F4	
0000BADE 0D01 0040 0B               		dc.b $D, 1, 0, $40, $B	
0000BAE3 ED01 003E 0B               		dc.b $ED, 1, 0, $3E, $B	
0000BAE8 1508 0023 F4               		dc.b $15, 8, 0, $23, $F4	
0000BAED FD05 001F 03               		dc.b $FD, 5, 0, $1F, 3	
0000BAF2 02                         SME_aMzQR_88:	dc.b 2	
0000BAF3 F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000BAF8 0805 0042 F8               		dc.b 8, 5, 0, $42, $F8	
0000BAFD 02                         SME_aMzQR_93:	dc.b 2	
0000BAFE F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000BB03 0805 0042 F8               		dc.b 8, 5, 0, $42, $F8	
0000BB08                            		even
0000BB08                            		even
0000BB08                            
0000BB08                            ; ---------------------------------------------------------------------------
0000BB08                            ; Sprite mappings - explosion
0000BB08                            ; ---------------------------------------------------------------------------
0000BB08                            Map_obj24:
0000BB08                            	include "_maps\obj24.asm"
0000BB08                            ; ---------------------------------------------------------------------------
0000BB08                            ; Sprite mappings - explosion
0000BB08                            ; ---------------------------------------------------------------------------
0000BB08 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
0000BB0C 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000BB10 01                         byte_8EAE:	dc.b 1
0000BB11 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000BB16 01                         byte_8EB4:	dc.b 1
0000BB17 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000BB1C 01                         byte_8EBA:	dc.b 1
0000BB1D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000BB22 01                         byte_8EC0:	dc.b 1
0000BB23 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000BB28                            		even
0000BB28                            		even
0000BB28                            
0000BB28                            ; ---------------------------------------------------------------------------
0000BB28                            ; Sprite mappings - explosion
0000BB28                            ; ---------------------------------------------------------------------------
0000BB28 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
0000BB2C 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000BB30 0000                       		dc.w byte_8EF7-Map_obj27
0000BB32 01                         byte_8ED0:	dc.b 1
0000BB33 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000BB38 01                         byte_8ED6:	dc.b 1
0000BB39 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000BB3E 01                         byte_8EDC:	dc.b 1
0000BB3F F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000BB44 04                         byte_8EE2:	dc.b 4
0000BB45 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000BB4A EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000BB4F 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000BB54 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000BB59 04                         byte_8EF7:	dc.b 4
0000BB5A EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000BB5F EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000BB64 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000BB69 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000BB6E                            		even
0000BB6E                            ; ---------------------------------------------------------------------------
0000BB6E                            ; Sprite mappings - explosion from when	a boss is destroyed
0000BB6E                            ; ---------------------------------------------------------------------------
0000BB6E FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000BB70 0000                       		dc.w byte_8F16-Map_obj3F
0000BB72 0000                       		dc.w byte_8F1C-Map_obj3F
0000BB74 FFD6                       		dc.w byte_8EE2-Map_obj3F
0000BB76 FFEB                       		dc.w byte_8EF7-Map_obj3F
0000BB78 01                         byte_8F16:	dc.b 1
0000BB79 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000BB7E 01                         byte_8F1C:	dc.b 1
0000BB7F F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000BB84                            		even
0000BB84                            ; ===========================================================================
0000BB84                            ; ---------------------------------------------------------------------------
0000BB84                            ; Object 28 - animals
0000BB84                            ; ---------------------------------------------------------------------------
0000BB84                            
0000BB84                            Obj28:					; XREF: Obj_Index
0000BB84 7000                       		moveq	#0,d0
0000BB86 1028 0024                  		move.b	$24(a0),d0
0000BB8A 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000BB8E 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000BB92                            ; ===========================================================================
0000BB92 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000BB96 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000BB9A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000BB9E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000BBA2 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000BBA6 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000BBAA 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000BBAE 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000BBB2 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000BBB6 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000BBBA 0000                       		dc.w loc_92D6-Obj28_Index
0000BBBC                            
0000BBBC 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000BBC8                            
0000BBC8 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000BBCC 0000 0000                  		dc.l Map_obj28
0000BBD0 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000BBD4 0000 0000                  		dc.l Map_obj28a		; mappings address
0000BBD8 FE80 FD00                  		dc.w $FE80, $FD00
0000BBDC 0000 0000                  		dc.l Map_obj28
0000BBE0 FEC0 FE80                  		dc.w $FEC0, $FE80
0000BBE4 0000 0000                  		dc.l Map_obj28a
0000BBE8 FE40 FD00                  		dc.w $FE40, $FD00
0000BBEC 0000 0000                  		dc.l Map_obj28b
0000BBF0 FD00 FC00                  		dc.w $FD00, $FC00
0000BBF4 0000 0000                  		dc.l Map_obj28a
0000BBF8 FD80 FC80                  		dc.w $FD80, $FC80
0000BBFC 0000 0000                  		dc.l Map_obj28b
0000BC00                            
0000BC00 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000BC10 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000BC20 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000BC2C                            
0000BC2C 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000BC40 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
0000BC54 0000 0000                  		dc.l Map_obj28b
0000BC58                            
0000BC58 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000BC6A 0565 05B3                  		dc.w $565, $5B3
0000BC6E                            ; ===========================================================================
0000BC6E                            
0000BC6E                            Obj28_Ending:				; XREF: Obj28_Index
0000BC6E 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000BC72 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000BC76 7000                       		moveq	#0,d0
0000BC78 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000BC7C D040                       		add.w	d0,d0		; multiply d0 by 2
0000BC7E 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000BC82 0440 0014                  		subi.w	#$14,d0
0000BC86 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000BC8C D040                       		add.w	d0,d0
0000BC8E 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000BC94 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000BC98 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000BC9E 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000BCA4 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000BCAA 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000BCB0 117C 000C 0016             		move.b	#$C,$16(a0)
0000BCB6 117C 0004 0001             		move.b	#4,1(a0)
0000BCBC 08E8 0000 0001             		bset	#0,1(a0)
0000BCC2 117C 0006 0018             		move.b	#6,$18(a0)
0000BCC8 117C 0008 0019             		move.b	#8,$19(a0)
0000BCCE 117C 0007 001E             		move.b	#7,$1E(a0)
0000BCD4 6000 0000                  		bra.w	DisplaySprite
0000BCD8                            ; ===========================================================================
0000BCD8                            
0000BCD8                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000BCD8 5428 0024                  		addq.b	#2,$24(a0)
0000BCDC 4EB8 2CA2                  		jsr	RandomNumber
0000BCE0 0240 0001                  		andi.w	#1,d0
0000BCE4 7200                       		moveq	#0,d1
0000BCE6 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000BCEA D241                       		add.w	d1,d1
0000BCEC D240                       		add.w	d0,d1
0000BCEE 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000BCF2 1031 1000                  		move.b	(a1,d1.w),d0
0000BCF6 1140 0030                  		move.b	d0,$30(a0)
0000BCFA E748                       		lsl.w	#3,d0
0000BCFC 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000BD00 D2C0                       		adda.w	d0,a1
0000BD02 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000BD06 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000BD0A 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000BD0E 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000BD14 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000BD1A 6700                       		beq.s	loc_90C0	; if yes, branch
0000BD1C 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000BD22                            
0000BD22                            loc_90C0:
0000BD22 117C 000C 0016             		move.b	#$C,$16(a0)
0000BD28 117C 0004 0001             		move.b	#4,1(a0)
0000BD2E 08E8 0000 0001             		bset	#0,1(a0)
0000BD34 117C 0006 0018             		move.b	#6,$18(a0)
0000BD3A 117C 0008 0019             		move.b	#8,$19(a0)
0000BD40 117C 0007 001E             		move.b	#7,$1E(a0)
0000BD46 117C 0002 001A             		move.b	#2,$1A(a0)
0000BD4C 317C FC00 0012             		move.w	#-$400,$12(a0)
0000BD52 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000BD56 6600                       		bne.s	loc_911C
0000BD58 6100 0000                  		bsr.w	SingleObjLoad
0000BD5C 6600                       		bne.s	Obj28_Display
0000BD5E 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000BD62 3368 0008 0008             		move.w	8(a0),8(a1)
0000BD68 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BD6E 3028 003E                  		move.w	$3E(a0),d0
0000BD72 E248                       		lsr.w	#1,d0
0000BD74 1340 001A                  		move.b	d0,$1A(a1)
0000BD78                            
0000BD78                            Obj28_Display:
0000BD78 6000 0000                  		bra.w	DisplaySprite
0000BD7C                            ; ===========================================================================
0000BD7C                            
0000BD7C                            loc_911C:
0000BD7C 117C 0012 0024             		move.b	#$12,$24(a0)
0000BD82 4268 0010                  		clr.w	$10(a0)
0000BD86 6000 0000                  		bra.w	DisplaySprite
0000BD8A                            ; ===========================================================================
0000BD8A                            
0000BD8A                            loc_912A:				; XREF: Obj28_Index
0000BD8A 4A28 0001                  		tst.b	1(a0)
0000BD8E 6A00 0000                  		bpl.w	DeleteObject
0000BD92 6100 0000                  		bsr.w	ObjectFall
0000BD96 4A68 0012                  		tst.w	$12(a0)
0000BD9A 6B00                       		bmi.s	loc_9180
0000BD9C 4EB9 0000 0000             		jsr	ObjHitFloor
0000BDA2 4A41                       		tst.w	d1
0000BDA4 6A00                       		bpl.s	loc_9180
0000BDA6 D368 000C                  		add.w	d1,$C(a0)
0000BDAA 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000BDB0 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000BDB6 117C 0001 001A             		move.b	#1,$1A(a0)
0000BDBC 1028 0030                  		move.b	$30(a0),d0
0000BDC0 D000                       		add.b	d0,d0
0000BDC2 5800                       		addq.b	#4,d0
0000BDC4 1140 0024                  		move.b	d0,$24(a0)
0000BDC8 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000BDCC 6700                       		beq.s	loc_9180
0000BDCE 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000BDD4 6700                       		beq.s	loc_9180
0000BDD6 4468 0010                  		neg.w	$10(a0)
0000BDDA 0868 0000 0001             		bchg	#0,1(a0)
0000BDE0                            
0000BDE0                            loc_9180:
0000BDE0 6000 0000                  		bra.w	DisplaySprite
0000BDE4                            ; ===========================================================================
0000BDE4                            
0000BDE4                            loc_9184:				; XREF: Obj28_Index
0000BDE4 6100 0000                  		bsr.w	ObjectFall
0000BDE8 117C 0001 001A             		move.b	#1,$1A(a0)
0000BDEE 4A68 0012                  		tst.w	$12(a0)
0000BDF2 6B00                       		bmi.s	loc_91AE
0000BDF4 117C 0000 001A             		move.b	#0,$1A(a0)
0000BDFA 4EB9 0000 0000             		jsr	ObjHitFloor
0000BE00 4A41                       		tst.w	d1
0000BE02 6A00                       		bpl.s	loc_91AE
0000BE04 D368 000C                  		add.w	d1,$C(a0)
0000BE08 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000BE0E                            
0000BE0E                            loc_91AE:
0000BE0E 4A28 0028                  		tst.b	$28(a0)
0000BE12 6600                       		bne.s	loc_9224
0000BE14 4A28 0001                  		tst.b	1(a0)
0000BE18 6A00 0000                  		bpl.w	DeleteObject
0000BE1C 6000 0000                  		bra.w	DisplaySprite
0000BE20                            ; ===========================================================================
0000BE20                            
0000BE20                            loc_91C0:				; XREF: Obj28_Index
0000BE20 6100 0000                  		bsr.w	SpeedToPos
0000BE24 0668 0018 0012             		addi.w	#$18,$12(a0)
0000BE2A 4A68 0012                  		tst.w	$12(a0)
0000BE2E 6B00                       		bmi.s	loc_91FC
0000BE30 4EB9 0000 0000             		jsr	ObjHitFloor
0000BE36 4A41                       		tst.w	d1
0000BE38 6A00                       		bpl.s	loc_91FC
0000BE3A D368 000C                  		add.w	d1,$C(a0)
0000BE3E 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000BE44 4A28 0028                  		tst.b	$28(a0)
0000BE48 6700                       		beq.s	loc_91FC
0000BE4A 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000BE50 6700                       		beq.s	loc_91FC
0000BE52 4468 0010                  		neg.w	$10(a0)
0000BE56 0868 0000 0001             		bchg	#0,1(a0)
0000BE5C                            
0000BE5C                            loc_91FC:
0000BE5C 5328 001E                  		subq.b	#1,$1E(a0)
0000BE60 6A00                       		bpl.s	loc_9212
0000BE62 117C 0001 001E             		move.b	#1,$1E(a0)
0000BE68 5228 001A                  		addq.b	#1,$1A(a0)
0000BE6C 0228 0001 001A             		andi.b	#1,$1A(a0)
0000BE72                            
0000BE72                            loc_9212:
0000BE72 4A28 0028                  		tst.b	$28(a0)
0000BE76 6600                       		bne.s	loc_9224
0000BE78 4A28 0001                  		tst.b	1(a0)
0000BE7C 6A00 0000                  		bpl.w	DeleteObject
0000BE80 6000 0000                  		bra.w	DisplaySprite
0000BE84                            ; ===========================================================================
0000BE84                            
0000BE84                            loc_9224:				; XREF: Obj28_Index
0000BE84 3028 0008                  		move.w	8(a0),d0
0000BE88 9078 D008                  		sub.w	($FFFFD008).w,d0
0000BE8C 6500                       		bcs.s	loc_923C
0000BE8E 0440 0180                  		subi.w	#$180,d0
0000BE92 6A00                       		bpl.s	loc_923C
0000BE94 4A28 0001                  		tst.b	1(a0)
0000BE98 6A00 0000                  		bpl.w	DeleteObject
0000BE9C                            
0000BE9C                            loc_923C:
0000BE9C 6000 0000                  		bra.w	DisplaySprite
0000BEA0                            ; ===========================================================================
0000BEA0                            
0000BEA0                            loc_9240:				; XREF: Obj28_Index
0000BEA0 4A28 0001                  		tst.b	1(a0)
0000BEA4 6A00 0000                  		bpl.w	DeleteObject
0000BEA8 5368 0036                  		subq.w	#1,$36(a0)
0000BEAC 6600 0000                  		bne.w	loc_925C
0000BEB0 117C 0002 0024             		move.b	#2,$24(a0)
0000BEB6 117C 0003 0018             		move.b	#3,$18(a0)
0000BEBC                            
0000BEBC                            loc_925C:
0000BEBC 6000 0000                  		bra.w	DisplaySprite
0000BEC0                            ; ===========================================================================
0000BEC0                            
0000BEC0                            loc_9260:				; XREF: Obj28_Index
0000BEC0 6100 0000                  		bsr.w	sub_9404
0000BEC4 6400                       		bcc.s	loc_927C
0000BEC6 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000BECC 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000BED2 117C 000E 0024             		move.b	#$E,$24(a0)
0000BED8 6000 FF46                  		bra.w	loc_91C0
0000BEDC                            ; ===========================================================================
0000BEDC                            
0000BEDC                            loc_927C:
0000BEDC 6000 FFA6                  		bra.w	loc_9224
0000BEE0                            ; ===========================================================================
0000BEE0                            
0000BEE0                            loc_9280:				; XREF: Obj28_Index
0000BEE0 6100 0000                  		bsr.w	sub_9404
0000BEE4 6A00                       		bpl.s	loc_92B6
0000BEE6 4268 0010                  		clr.w	$10(a0)
0000BEEA 4268 0032                  		clr.w	$32(a0)
0000BEEE 6100 0000                  		bsr.w	SpeedToPos
0000BEF2 0668 0018 0012             		addi.w	#$18,$12(a0)
0000BEF8 6100 0000                  		bsr.w	loc_93C4
0000BEFC 6100 0000                  		bsr.w	loc_93EC
0000BF00 5328 001E                  		subq.b	#1,$1E(a0)
0000BF04 6A00                       		bpl.s	loc_92B6
0000BF06 117C 0001 001E             		move.b	#1,$1E(a0)
0000BF0C 5228 001A                  		addq.b	#1,$1A(a0)
0000BF10 0228 0001 001A             		andi.b	#1,$1A(a0)
0000BF16                            
0000BF16                            loc_92B6:
0000BF16 6000 FF6C                  		bra.w	loc_9224
0000BF1A                            ; ===========================================================================
0000BF1A                            
0000BF1A                            loc_92BA:				; XREF: Obj28_Index
0000BF1A 6100 0000                  		bsr.w	sub_9404
0000BF1E 6A00                       		bpl.s	loc_9310
0000BF20 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000BF26 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000BF2C 117C 0004 0024             		move.b	#4,$24(a0)
0000BF32 6000 FEB0                  		bra.w	loc_9184
0000BF36                            ; ===========================================================================
0000BF36                            
0000BF36                            loc_92D6:				; XREF: Obj28_Index
0000BF36 6100 0000                  		bsr.w	ObjectFall
0000BF3A 117C 0001 001A             		move.b	#1,$1A(a0)
0000BF40 4A68 0012                  		tst.w	$12(a0)
0000BF44 6B00                       		bmi.s	loc_9310
0000BF46 117C 0000 001A             		move.b	#0,$1A(a0)
0000BF4C 4EB9 0000 0000             		jsr	ObjHitFloor
0000BF52 4A41                       		tst.w	d1
0000BF54 6A00                       		bpl.s	loc_9310
0000BF56 4628 0029                  		not.b	$29(a0)
0000BF5A 6600                       		bne.s	loc_9306
0000BF5C 4468 0010                  		neg.w	$10(a0)
0000BF60 0868 0000 0001             		bchg	#0,1(a0)
0000BF66                            
0000BF66                            loc_9306:
0000BF66 D368 000C                  		add.w	d1,$C(a0)
0000BF6A 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000BF70                            
0000BF70                            loc_9310:
0000BF70 6000 FF12                  		bra.w	loc_9224
0000BF74                            ; ===========================================================================
0000BF74                            
0000BF74                            loc_9314:				; XREF: Obj28_Index
0000BF74 6100 0000                  		bsr.w	sub_9404
0000BF78 6A00                       		bpl.s	loc_932E
0000BF7A 4268 0010                  		clr.w	$10(a0)
0000BF7E 4268 0032                  		clr.w	$32(a0)
0000BF82 6100 0000                  		bsr.w	ObjectFall
0000BF86 6100 0000                  		bsr.w	loc_93C4
0000BF8A 6100 0000                  		bsr.w	loc_93EC
0000BF8E                            
0000BF8E                            loc_932E:
0000BF8E 6000 FEF4                  		bra.w	loc_9224
0000BF92                            ; ===========================================================================
0000BF92                            
0000BF92                            loc_9332:				; XREF: Obj28_Index
0000BF92 6100 0000                  		bsr.w	sub_9404
0000BF96 6A00                       		bpl.s	loc_936C
0000BF98 6100 0000                  		bsr.w	ObjectFall
0000BF9C 117C 0001 001A             		move.b	#1,$1A(a0)
0000BFA2 4A68 0012                  		tst.w	$12(a0)
0000BFA6 6B00                       		bmi.s	loc_936C
0000BFA8 117C 0000 001A             		move.b	#0,$1A(a0)
0000BFAE 4EB9 0000 0000             		jsr	ObjHitFloor
0000BFB4 4A41                       		tst.w	d1
0000BFB6 6A00                       		bpl.s	loc_936C
0000BFB8 4468 0010                  		neg.w	$10(a0)
0000BFBC 0868 0000 0001             		bchg	#0,1(a0)
0000BFC2 D368 000C                  		add.w	d1,$C(a0)
0000BFC6 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000BFCC                            
0000BFCC                            loc_936C:
0000BFCC 6000 FEB6                  		bra.w	loc_9224
0000BFD0                            ; ===========================================================================
0000BFD0                            
0000BFD0                            loc_9370:				; XREF: Obj28_Index
0000BFD0 6100 0000                  		bsr.w	sub_9404
0000BFD4 6A00                       		bpl.s	loc_93C0
0000BFD6 6100 0000                  		bsr.w	SpeedToPos
0000BFDA 0668 0018 0012             		addi.w	#$18,$12(a0)
0000BFE0 4A68 0012                  		tst.w	$12(a0)
0000BFE4 6B00                       		bmi.s	loc_93AA
0000BFE6 4EB9 0000 0000             		jsr	ObjHitFloor
0000BFEC 4A41                       		tst.w	d1
0000BFEE 6A00                       		bpl.s	loc_93AA
0000BFF0 4628 0029                  		not.b	$29(a0)
0000BFF4 6600                       		bne.s	loc_93A0
0000BFF6 4468 0010                  		neg.w	$10(a0)
0000BFFA 0868 0000 0001             		bchg	#0,1(a0)
0000C000                            
0000C000                            loc_93A0:
0000C000 D368 000C                  		add.w	d1,$C(a0)
0000C004 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000C00A                            
0000C00A                            loc_93AA:
0000C00A 5328 001E                  		subq.b	#1,$1E(a0)
0000C00E 6A00                       		bpl.s	loc_93C0
0000C010 117C 0001 001E             		move.b	#1,$1E(a0)
0000C016 5228 001A                  		addq.b	#1,$1A(a0)
0000C01A 0228 0001 001A             		andi.b	#1,$1A(a0)
0000C020                            
0000C020                            loc_93C0:
0000C020 6000 FE62                  		bra.w	loc_9224
0000C024                            ; ===========================================================================
0000C024                            
0000C024                            loc_93C4:
0000C024 117C 0001 001A             		move.b	#1,$1A(a0)
0000C02A 4A68 0012                  		tst.w	$12(a0)
0000C02E 6B00                       		bmi.s	locret_93EA
0000C030 117C 0000 001A             		move.b	#0,$1A(a0)
0000C036 4EB9 0000 0000             		jsr	ObjHitFloor
0000C03C 4A41                       		tst.w	d1
0000C03E 6A00                       		bpl.s	locret_93EA
0000C040 D368 000C                  		add.w	d1,$C(a0)
0000C044 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000C04A                            
0000C04A                            locret_93EA:
0000C04A 4E75                       		rts	
0000C04C                            ; ===========================================================================
0000C04C                            
0000C04C                            loc_93EC:
0000C04C 08E8 0000 0001             		bset	#0,1(a0)
0000C052 3028 0008                  		move.w	8(a0),d0
0000C056 9078 D008                  		sub.w	($FFFFD008).w,d0
0000C05A 6400                       		bcc.s	locret_9402
0000C05C 08A8 0000 0001             		bclr	#0,1(a0)
0000C062                            
0000C062                            locret_9402:
0000C062 4E75                       		rts	
0000C064                            
0000C064                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C064                            
0000C064                            
0000C064                            sub_9404:
0000C064 3038 D008                  		move.w	($FFFFD008).w,d0
0000C068 9068 0008                  		sub.w	8(a0),d0
0000C06C 0440 00B8                  		subi.w	#$B8,d0
0000C070 4E75                       		rts	
0000C072                            ; End of function sub_9404
0000C072                            
0000C072                            ; ===========================================================================
0000C072                            ; ---------------------------------------------------------------------------
0000C072                            ; Object 29 - points that appear when you destroy something
0000C072                            ; ---------------------------------------------------------------------------
0000C072                            
0000C072                            Obj29:					; XREF: Obj_Index
0000C072 7000                       		moveq	#0,d0
0000C074 1028 0024                  		move.b	$24(a0),d0
0000C078 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000C07C 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000C080 6000 0000                  		bra.w	DisplaySprite
0000C084                            ; ===========================================================================
0000C084 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0000C086 0000                       		dc.w Obj29_Slower-Obj29_Index
0000C088                            ; ===========================================================================
0000C088                            
0000C088                            Obj29_Main:				; XREF: Obj29_Index
0000C088 5428 0024                  		addq.b	#2,$24(a0)
0000C08C 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
0000C094 317C 2797 0002             		move.w	#$2797,2(a0)
0000C09A 117C 0004 0001             		move.b	#4,1(a0)
0000C0A0 117C 0001 0018             		move.b	#1,$18(a0)
0000C0A6 117C 0008 0019             		move.b	#8,$19(a0)
0000C0AC 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000C0B2                            
0000C0B2                            Obj29_Slower:				; XREF: Obj29_Index
0000C0B2 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000C0B6 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000C0BA 6100 0000                  		bsr.w	SpeedToPos
0000C0BE 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000C0C4 4E75                       		rts	
0000C0C6                            ; ===========================================================================
0000C0C6                            ; ---------------------------------------------------------------------------
0000C0C6                            ; Sprite mappings - animals
0000C0C6                            ; ---------------------------------------------------------------------------
0000C0C6                            Map_obj28:
0000C0C6                            	include "_maps\obj28.asm"
0000C0C6                            ; ---------------------------------------------------------------------------
0000C0C6                            ; Sprite mappings - animals
0000C0C6                            ; ---------------------------------------------------------------------------
0000C0C6 0000                       		dc.w byte_9472-Map_obj28
0000C0C8 0000                       		dc.w byte_9478-Map_obj28
0000C0CA 0000                       		dc.w byte_946C-Map_obj28
0000C0CC 01                         byte_946C:	dc.b 1
0000C0CD F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000C0D2 01                         byte_9472:	dc.b 1
0000C0D3 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000C0D8 01                         byte_9478:	dc.b 1
0000C0D9 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000C0DE                            		even
0000C0DE                            		even
0000C0DE                            
0000C0DE                            Map_obj28a:
0000C0DE                            	include "_maps\obj28a.asm"
0000C0DE                            ; ---------------------------------------------------------------------------
0000C0DE                            ; Sprite mappings - animals
0000C0DE                            ; ---------------------------------------------------------------------------
0000C0DE 0000                       		dc.w byte_948A-Map_obj28a
0000C0E0 0000                       		dc.w byte_9490-Map_obj28a
0000C0E2 0000                       		dc.w byte_9484-Map_obj28a
0000C0E4 01                         byte_9484:	dc.b 1
0000C0E5 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000C0EA 01                         byte_948A:	dc.b 1
0000C0EB FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000C0F0 01                         byte_9490:	dc.b 1
0000C0F1 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000C0F6                            		even
0000C0F6                            		even
0000C0F6                            
0000C0F6                            Map_obj28b:
0000C0F6                            	include "_maps\obj28b.asm"
0000C0F6                            ; ---------------------------------------------------------------------------
0000C0F6                            ; Sprite mappings - animals
0000C0F6                            ; ---------------------------------------------------------------------------
0000C0F6 0000                       		dc.w byte_94A2-Map_obj28b
0000C0F8 0000                       		dc.w byte_94A8-Map_obj28b
0000C0FA 0000                       		dc.w byte_949C-Map_obj28b
0000C0FC 01                         byte_949C:	dc.b 1
0000C0FD F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000C102 01                         byte_94A2:	dc.b 1
0000C103 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000C108 01                         byte_94A8:	dc.b 1
0000C109 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000C10E                            		even
0000C10E                            		even
0000C10E                            
0000C10E                            ; ---------------------------------------------------------------------------
0000C10E                            ; Sprite mappings - points that	appear when you	destroy	something
0000C10E                            ; ---------------------------------------------------------------------------
0000C10E                            Map_obj29:
0000C10E                            	include "_maps\obj29.asm"
0000C10E                            ; ---------------------------------------------------------------------------
0000C10E                            ; Sprite mappings - points that	appear when you	destroy	something
0000C10E                            ; ---------------------------------------------------------------------------
0000C10E 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000C112 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
0000C116 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000C11A 0000                       		dc.w byte_94E5-Map_obj29
0000C11C 01                         byte_94BC:	dc.b 1
0000C11D FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000C122 01                         byte_94C2:	dc.b 1
0000C123 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000C128 01                         byte_94C8:	dc.b 1
0000C129 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000C12E 01                         byte_94CE:	dc.b 1
0000C12F FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
0000C134 01                         byte_94D4:	dc.b 1
0000C135 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000C13A 02                         byte_94DA:	dc.b 2
0000C13B FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000C140 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000C145 02                         byte_94E5:	dc.b 2
0000C146 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000C14B FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000C150                            		even
0000C150                            		even
0000C150                            
0000C150                            ; ===========================================================================
0000C150                            ; ---------------------------------------------------------------------------
0000C150                            ; Object 1F - Coconuts enemy (GHZ, SYZ)
0000C150                            ; ---------------------------------------------------------------------------
0000C150                            
0000C150                            Obj1F:					; XREF: Obj_Index
0000C150 7000                       		moveq	#0,d0
0000C152 1028 0024                  		move.b	$24(a0),d0
0000C156 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000C15A 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000C15E                            ; ===========================================================================
0000C15E 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000C160 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000C162 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000C164 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000C166 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000C168                            ; ===========================================================================
0000C168                            
0000C168                            Obj1F_Main:				; XREF: Obj1F_Index
0000C168 117C 0010 0016             		move.b	#$10,$16(a0)
0000C16E 117C 0008 0017             		move.b	#8,$17(a0)
0000C174 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000C17C 317C 0400 0002             		move.w	#$400,2(a0)
0000C182 117C 0004 0001             		move.b	#4,1(a0)
0000C188 117C 0003 0018             		move.b	#3,$18(a0)
0000C18E 117C 0006 0020             		move.b	#6,$20(a0)
0000C194 117C 0015 0019             		move.b	#$15,$19(a0)
0000C19A                            		;bsr.w	ObjectFall
0000C19A                            		;jsr	ObjHitFloor
0000C19A                            		;tst.w	d1
0000C19A                            		;bpl.s	locret_955A
0000C19A                            		;add.w	d1,$C(a0)
0000C19A                            		;move.b	d3,$26(a0)
0000C19A 317C 0000 0012             		move.w	#0,$12(a0)
0000C1A0                                            ;jsr     Obj1F_MakeFire
0000C1A0 5428 0024                  		addq.b	#2,$24(a0) ; run "Obj1F_waitfire"
0000C1A4                            
0000C1A4                            ;locret_955A:
0000C1A4 4E75                       		rts	
0000C1A6                            ; ===========================================================================
0000C1A6                            
0000C1A6                            Obj1F_Action:				; XREF: Obj1F_Index
0000C1A6 7000                       		moveq	#0,d0
0000C1A8 1028 0025                  		move.b	$25(a0),d0
0000C1AC 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000C1B0 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000C1B4 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000C1BA 6100 0000                  		bsr.w	AnimateSprite
0000C1BE 6000 0000                  		bra.w	MarkObjGone
0000C1C2                            ; ===========================================================================
0000C1C2 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000C1C4 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000C1C6                            ; ===========================================================================
0000C1C6                            
0000C1C6                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000C1C6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000C1CA 6A00                       		bpl.s	locret_95B6	; if time remains, branch
0000C1CC 117C 0000 001C                             move.b	#0,$1C(a0)
0000C1D2 4A28 0001                  		tst.b	1(a0)
0000C1D6 6A00                       		bpl.s	Obj1F_Move	; if display flag isn't set, branch
0000C1D8 0868 0001 0032             		bchg	#1,$32(a0)
0000C1DE 6600                       		bne.s	Obj1F_MakeFire
0000C1E0                            
0000C1E0                            Obj1F_Move:
0000C1E0                            		;addq.b	#2,$25(a0)
0000C1E0                            		;move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000C1E0 317C 001D 0030                             move.w	#29,$30(a0)	; set time delay to approx 2 seconds
0000C1E6 5368 0030                                  subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000C1EA 6A00 0000                  		bpl.w	locret_F70A	; if time remains, branch
0000C1EE 5428 0025                  		addq.b	#2,$25(a0)
0000C1F2 317C 0052 0030                             move.w	#82,$30(a0)	; set time delay to approx 2 seconds
0000C1F8 317C FF00 0012             		move.w	#-$100,$12(a0)	; move Crabmeat	to the right
0000C1FE                            		;bsr.w	Obj1F_SetAni
0000C1FE                            		;addq.b	#3,d0
0000C1FE 117C 0001 001C             		move.b	#1,$1C(a0)
0000C204 0868 0000 0022             		bchg	#0,$22(a0)
0000C20A 6600                       		bne.s	locret_95B6
0000C20C 4468 0010                  		neg.w	$10(a0)		; change direction
0000C210                            
0000C210                            locret_95B6:
0000C210 4E75                       		rts	
0000C212                            ; ===========================================================================
0000C212                            
0000C212                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000C212 317C 001D 0030             		move.w	#$1D,$30(a0)    ; set time delay
0000C218 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000C21E 6100 0000                  		bsr.w	SingleObjLoad
0000C222                            		;bne.s	Obj1F_MakeFire2
0000C222                                            ;move.w	#$18,d0
0000C222                                            ;btst	#0,$22(a0)     ; is coconuts facing right
0000C222                                            ;beq.s   Obj1F_MakeFire2
0000C222 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000C226 137C 0006 0024             		move.b	#6,$24(a1)
0000C22C 3368 0008 0008             		move.w	8(a0),8(a1)
0000C232                            		;subi.w	#$10,8(a1)
0000C232 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C238 337C 0100 0010             		move.w	#$100,$10(a1)  
0000C23E 303C 0018                                  move.w	#$18,d0
0000C242 0828 0000 0022             		btst	#0,$22(a0)	; is Coconuts facing left?
0000C248 6600                       		bne.s	locret_9618	; if not, branch
0000C24A 4440                       		neg.w	d0
0000C24C 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000C250                            
0000C250                            
0000C250                            ;Obj1F_MakeFire2:
0000C250                            		;bsr.w	SingleObjLoad
0000C250                            		;bne.s	locret_9618
0000C250                            		;move.b	#$1F,0(a1)	; load right fireball
0000C250                            		;move.b	#6,$24(a1)
0000C250                            		;move.w	8(a0),8(a1)
0000C250                            		;addi.w	#$10,8(a1)
0000C250                            		;move.w	$C(a0),$C(a1)
0000C250                            		;move.w	#$200,$10(a1)
0000C250                            
0000C250                            locret_9618:
0000C250 4E75                       		rts	
0000C252                            ; ===========================================================================
0000C252                            
0000C252                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000C252                            		;subq.w	#1,$30(a0) ; subtract 1 from turn delay
0000C252                            		;bmi.s	loc_966E   ; if time is over, branch
0000C252                            		;bsr.w	SpeedToPos
0000C252                            		;bchg	#0,$32(a0) ; is time delay over
0000C252                            		;bne.s	loc_9654 ; if not branch
0000C252 3628 0008                  		move.w	8(a0),d3
0000C256 0643 0010                  		addi.w	#$10,d3
0000C25A                            		;btst	#0,$22(a0) ; is crabmeat facing right
0000C25A                            		;beq.s	loc_9640 ; if yes,branch
0000C25A 0443 0020                  		subi.w	#$20,d3
0000C25E 4EB9 0000 0000                             jsr     loc_966E
0000C264                            
0000C264                            loc_9640:
0000C264 4EB9 0000 0000             		jsr	ObjHitFloor2
0000C26A 0C41 FFF8                  		cmpi.w	#-8,d1
0000C26E 6D00                       		blt.s	loc_966E
0000C270 0C41 000C                  		cmpi.w	#$C,d1
0000C274 6C00                       		bge.s	loc_966E
0000C276 4E75                       		rts	
0000C278                            ; ===========================================================================
0000C278                            
0000C278                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000C278 4EB9 0000 0000             		jsr	ObjHitFloor ; this subroutine sets ani for crabmeat while he is moving
0000C27E D368 000C                  		add.w	d1,$C(a0)
0000C282 1143 0026                  		move.b	d3,$26(a0)
0000C286 6100 0000                  		bsr.w	Obj1F_SetAni
0000C28A 5600                       		addq.b	#3,d0
0000C28C 1140 001C                  		move.b	d0,$1C(a0)
0000C290 4E75                       		rts	
0000C292                            ; ===========================================================================
0000C292                            
0000C292                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000C292 5528 0025                  		subq.b	#2,$25(a0)
0000C296 317C 001D 0030             		move.w	#29,$30(a0) ; set turn delay
0000C29C 317C 0000 0010             		move.w	#0,$10(a0) ; stop moving
0000C2A2 6100 0000                  		bsr.w	Obj1F_SetAni
0000C2A6 1140 001C                  		move.b	d0,$1C(a0)
0000C2AA 4E75                       		rts	
0000C2AC                            ; ---------------------------------------------------------------------------
0000C2AC                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000C2AC                            ; ---------------------------------------------------------------------------
0000C2AC                            
0000C2AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C2AC                            
0000C2AC                            
0000C2AC                            Obj1F_SetAni:				; XREF: loc_966E
0000C2AC 7000                       		moveq	#0,d0
0000C2AE 1628 0026                  		move.b	$26(a0),d3
0000C2B2 6B00                       		bmi.s	loc_96A4
0000C2B4 0C03 0006                  		cmpi.b	#6,d3
0000C2B8 6500                       		bcs.s	locret_96A2
0000C2BA 7001                       		moveq	#1,d0
0000C2BC 0828 0000 0022             		btst	#0,$22(a0)
0000C2C2 6600                       		bne.s	locret_96A2
0000C2C4 7002                       		moveq	#2,d0
0000C2C6                            
0000C2C6                            locret_96A2:
0000C2C6 4E75                       		rts	
0000C2C8                            ; ===========================================================================
0000C2C8                            
0000C2C8                            loc_96A4:				; XREF: Obj1F_SetAni
0000C2C8 0C03 00FA                  		cmpi.b	#-6,d3
0000C2CC 6200                       		bhi.s	locret_96B6
0000C2CE 7002                       		moveq	#2,d0
0000C2D0 0828 0000 0022             		btst	#0,$22(a0)
0000C2D6 6600                       		bne.s	locret_96B6
0000C2D8 7001                       		moveq	#1,d0
0000C2DA                            
0000C2DA                            locret_96B6:
0000C2DA 4E75                       		rts	
0000C2DC                            ; End of function Obj1F_SetAni
0000C2DC                            
0000C2DC                            ; ===========================================================================
0000C2DC                            
0000C2DC                            Obj1F_Delete:				; XREF: Obj1F_Index
0000C2DC 6100 0000                  		bsr.w	DeleteObject
0000C2E0 4E75                       		rts	
0000C2E2                            ; ===========================================================================
0000C2E2                            ; ---------------------------------------------------------------------------
0000C2E2                            ; Sub-object - missile that the	Coconuts throws
0000C2E2                            ; ---------------------------------------------------------------------------
0000C2E2                            
0000C2E2                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000C2E2 5428 0024                  		addq.b	#2,$24(a0)
0000C2E6 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000C2EE 317C 0400 0002             		move.w	#$400,2(a0)
0000C2F4 117C 0004 0001             		move.b	#4,1(a0)
0000C2FA 117C 00F6 0018             		move.b	#-$A,$18(a0)
0000C300 117C 0087 0020             		move.b	#$87,$20(a0)
0000C306 117C 0008 0019             		move.b	#8,$19(a0)
0000C30C                            		;move.w	#-$400,$12(a0)
0000C30C 317C FC00 0012                             move.w	#-$400,$12(a0)
0000C312 117C 0007 001C             		move.b	#7,$1C(a0)
0000C318                            
0000C318                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000C318 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000C31E 6100 0000                  		bsr.w	AnimateSprite
0000C322 6100 0000                  		bsr.w	ObjectFall
0000C326 6100 0000                  		bsr.w	DisplaySprite
0000C32A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000C32E 0640 00E0                  		addi.w	#$E0,d0
0000C332 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000C336 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000C338 4E75                       		rts	
0000C33A                            ; ===========================================================================
0000C33A                            
0000C33A                            Obj1F_Delete2:
0000C33A 6000 0000                  		bra.w	DeleteObject
0000C33E                            ; ===========================================================================
0000C33E                            Ani_obj1F:
0000C33E                            	include "_anim\obj1F.asm"
0000C33E                            ; ---------------------------------------------------------------------------
0000C33E                            ; Animation script - Crabmeat enemy
0000C33E                            ; ---------------------------------------------------------------------------
0000C33E 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000C344 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000C34A 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000C34E 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000C352 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000C356 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000C35A 0F01 00FF 00               byte_9736:	dc.b $F, 1, 0, $FF, 0
0000C35F 0F01 00FF 00               byte_973C:	dc.b $F, 1, 0, $FF, 0
0000C364 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000C36A 0F02 FF00                  byte_9748:	dc.b $F, 2, $FF, 0
0000C36E 0103 03FF                  byte_974C:	dc.b 1,	3, 3, $FF
0000C372                            		even
0000C372                            		even
0000C372                            
0000C372                            ; ---------------------------------------------------------------------------
0000C372                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000C372                            ; ---------------------------------------------------------------------------
0000C372                            Map_obj1F:
0000C372                            	include "_maps\obj1F.asm"
0000C372                            ; --------------------------------------------------------------------------------
0000C372                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C372                            ; --------------------------------------------------------------------------------
0000C372                            
0000C372                            SME_txYl6:	
0000C372 0000 0000                  		dc.w SME_txYl6_8-SME_txYl6, SME_txYl6_1D-SME_txYl6	
0000C376 0000 0000                  		dc.w SME_txYl6_32-SME_txYl6, SME_txYl6_47-SME_txYl6	
0000C37A 04                         SME_txYl6_8:	dc.b 4	
0000C37B 0005 001A FE               		dc.b 0, 5, 0, $1A, $FE	
0000C380 F009 0000 FC               		dc.b $F0, 9, 0, 0, $FC	
0000C385 000D 0006 F4               		dc.b 0, $D, 0, 6, $F4	
0000C38A 1001 000E 0C               		dc.b $10, 1, 0, $E, $C	
0000C38F 04                         SME_txYl6_1D:	dc.b 4	
0000C390 0005 001E FE               		dc.b 0, 5, 0, $1E, $FE	
0000C395 F009 0000 FC               		dc.b $F0, 9, 0, 0, $FC	
0000C39A 000D 0010 F4               		dc.b 0, $D, 0, $10, $F4	
0000C39F 1001 0018 0C               		dc.b $10, 1, 0, $18, $C	
0000C3A4 04                         SME_txYl6_32:	dc.b 4	
0000C3A5 F801 0022 07               		dc.b $F8, 1, 0, $22, 7	
0000C3AA F009 0000 FC               		dc.b $F0, 9, 0, 0, $FC	
0000C3AF 000D 0010 F4               		dc.b 0, $D, 0, $10, $F4	
0000C3B4 1001 0018 0C               		dc.b $10, 1, 0, $18, $C	
0000C3B9 02                         SME_txYl6_47:	dc.b 2	
0000C3BA F801 4024 F8               		dc.b $F8, 1, $40, $24, $F8	
0000C3BF F801 4824 00               		dc.b $F8, 1, $48, $24, 0	
0000C3C4                            		even
0000C3C4                            		even
0000C3C4                            
0000C3C4                            ; ===========================================================================
0000C3C4                            ; ---------------------------------------------------------------------------
0000C3C4                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000C3C4                            ; ---------------------------------------------------------------------------
0000C3C4                            
0000C3C4                            Obj22:					; XREF: Obj_Index
0000C3C4 7000                       		moveq	#0,d0
0000C3C6 1028 0024                  		move.b	$24(a0),d0
0000C3CA 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000C3CE 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000C3D2                            ; ===========================================================================
0000C3D2 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000C3D4 0000                       		dc.w Obj22_Action-Obj22_Index
0000C3D6 0000                       		dc.w Obj22_Delete-Obj22_Index
0000C3D8                            ; ===========================================================================
0000C3D8                            
0000C3D8                            Obj22_Main:				; XREF: Obj22_Index
0000C3D8 5428 0024                  		addq.b	#2,$24(a0)
0000C3DC 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000C3E4 317C 0444 0002             		move.w	#$444,2(a0)
0000C3EA 117C 0004 0001             		move.b	#4,1(a0)
0000C3F0 117C 0003 0018             		move.b	#3,$18(a0)
0000C3F6 117C 0008 0020             		move.b	#8,$20(a0)
0000C3FC 117C 0018 0019             		move.b	#$18,$19(a0)
0000C402                            
0000C402                            Obj22_Action:				; XREF: Obj22_Index
0000C402 7000                       		moveq	#0,d0
0000C404 1028 0025                  		move.b	$25(a0),d0
0000C408 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000C40C 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000C410 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000C416 6100 0000                  		bsr.w	AnimateSprite
0000C41A 6000 0000                  		bra.w	MarkObjGone
0000C41E                            ; ===========================================================================
0000C41E 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000C420 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000C422                            ; ===========================================================================
0000C422                            
0000C422                            Obj22_Move:				; XREF: Obj22_Index2
0000C422 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000C426 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000C428 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000C42E 6600                       		bne.s	Obj22_TestZone	; if yes, branch
0000C430 5428 0025                  		addq.b	#2,$25(a0)
0000C434 317C 003F 0032                             move.w	#63,$32(a0)	; set time delay to just over 1	second
0000C43A 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000C440 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000C446 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000C44C 6600                       		bne.s	locret_986C	; if not, branch
0000C44E 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000C452                            
0000C452                            locret_986C:
0000C452 4E75                       		rts	
0000C454                            ; ===========================================================================
0000C454                            
0000C454                            Obj22_TestZone:
0000C454 0C38 0004 FE10                            cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
0000C45A 6700 0000                                 beq.w    locret_98D0
0000C45E                            
0000C45E                            Obj22_Fire:				; XREF: Obj22_Move
0000C45E 6100 0000                  		bsr.w	SingleObjLoad
0000C462 6600 0000                  		bne.w	locret_98D0
0000C466 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000C46A 3368 0008 0008             		move.w	8(a0),8(a1)
0000C470 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C476 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000C47C 0C38 0003 FE10                             cmpi.b	#3,($FFFFFE10).w ; check if level is SYZ
0000C482 6700                                       beq.s   Obj22_FireSLZ
0000C484 337C 0500 0012             		move.w	#$500,$12(a1)	; move missile downwards
0000C48A 337C 0500 0010             		move.w	#$500,$10(a1)	; move missile to the right
0000C490 6000                                       bra.s   Obj22_Facing
0000C492                            Obj22_FireSLZ:
0000C492 337C 0600 0012                             move.w	#$600,$12(a1)	; move missile downwards
0000C498 337C 0000 0010             		move.w	#$0,$10(a1)	; move missile to the right
0000C49E                            Obj22_Facing:
0000C49E 303C 0018                  		move.w	#$18,d0
0000C4A2 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000C4A8 6600                       		bne.s	loc_98AA	; if not, branch
0000C4AA 4440                       		neg.w	d0
0000C4AC 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000C4B0                            
0000C4B0                            loc_98AA:
0000C4B0 D169 0008                  		add.w	d0,8(a1)
0000C4B4 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000C4BA 337C 000E 0032             		move.w	#$E,$32(a1)
0000C4C0 2348 003C                  		move.l	a0,$3C(a1)
0000C4C4 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000C4CA 317C 003B 0032             		move.w	#$3B,$32(a0)
0000C4D0 0C38 0003 FE10                             cmpi.b	#3,($FFFFFE10).w ; check if level is SYZ
0000C4D6 6700                                       beq.s   locret_98D0
0000C4D8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000C4DE                            
0000C4DE                            locret_98D0:
0000C4DE 4E75                       		rts	
0000C4E0                            ; ===========================================================================
0000C4E0                            
0000C4E0                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000C4E0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000C4E4 6B00                       		bmi.s	Obj22_ChgDir
0000C4E6 6100 0000                  		bsr.w	SpeedToPos
0000C4EA 4A28 0034                  		tst.b	$34(a0)
0000C4EE 6600                       		bne.s	locret_992A
0000C4F0 3038 D008                  		move.w	($FFFFD008).w,d0
0000C4F4 9068 0008                  		sub.w	8(a0),d0
0000C4F8 6A00                       		bpl.s	Obj22_SetNrSonic
0000C4FA 4440                       		neg.w	d0
0000C4FC                            
0000C4FC                            Obj22_SetNrSonic:
0000C4FC 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000C500 6400                       		bcc.s	locret_992A	; if not, branch
0000C502 4A28 0001                  		tst.b	1(a0)
0000C506 6A00                       		bpl.s	locret_992A
0000C508 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000C50E 0C38 0003 FE10                             cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000C514 6700 FF48                                  beq.w   Obj22_Fire
0000C518 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000C51E 6000                       		bra.s	Obj22_Stop
0000C520                            ; ===========================================================================
0000C520                            
0000C520                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000C520 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000C526 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000C52C 317C 003B 0032             		move.w	#59,$32(a0)
0000C532                            
0000C532                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000C532 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000C536 0C38 0003 FE10                             cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000C53C 6700                                       beq.s   locret_992A
0000C53E 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000C544 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000C54A                            
0000C54A                            locret_992A:
0000C54A 4E75                       		rts	
0000C54C                            ; ===========================================================================
0000C54C                            
0000C54C                            Obj22_Delete:				; XREF: Obj22_Index
0000C54C 6100 0000                  		bsr.w	DeleteObject
0000C550 4E75                       		rts	
0000C552                            ; ===========================================================================
0000C552                            ; ---------------------------------------------------------------------------
0000C552                            ; Object 23 - missile that Buzz	Bomber throws
0000C552                            ; ---------------------------------------------------------------------------
0000C552                            
0000C552                            Obj23:					; XREF: Obj_Index
0000C552 7000                       		moveq	#0,d0
0000C554 1028 0024                  		move.b	$24(a0),d0
0000C558 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000C55C 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000C560                            ; ===========================================================================
0000C560 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000C562 0000                       		dc.w Obj23_Animate-Obj23_Index
0000C564 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000C566 0000                       		dc.w Obj23_Delete-Obj23_Index
0000C568 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000C56A                            ; ===========================================================================
0000C56A                            
0000C56A                            Obj23_Main:				; XREF: Obj23_Index
0000C56A 5368 0032                  		subq.w	#1,$32(a0)
0000C56E 6A00                       		bpl.s	Obj23_ChkCancel
0000C570 5428 0024                  		addq.b	#2,$24(a0)
0000C574 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000C57C 317C 2444 0002             		move.w	#$2444,2(a0)
0000C582 117C 0004 0001             		move.b	#4,1(a0)
0000C588 117C 0003 0018             		move.b	#3,$18(a0)
0000C58E 117C 0008 0019             		move.b	#8,$19(a0)
0000C594 0228 0003 0022             		andi.b	#3,$22(a0)
0000C59A 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000C59E 6700                       		beq.s	Obj23_Animate	; if not, branch
0000C5A0 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000C5A6 0C28 0003 0028                             cmpi.b  #3,$28(a0)
0000C5AC 6700 0000                                  beq.w   Obj23_FromNewt
0000C5B0 117C 0087 0020             		move.b	#$87,$20(a0)
0000C5B6 117C 0001 001C             		move.b	#1,$1C(a0)
0000C5BC 6000 0000                  		bra.w	Obj23_Animate2
0000C5C0                            ; ===========================================================================
0000C5C0                            
0000C5C0                            Obj23_Animate:				; XREF: Obj23_Index
0000C5C0 6100                       		bsr.s	Obj23_ChkCancel
0000C5C2 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000C5C8 6100 0000                  		bsr.w	AnimateSprite
0000C5CC 6000 0000                  		bra.w	DisplaySprite
0000C5D0                            ; ---------------------------------------------------------------------------
0000C5D0                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000C5D0                            ; destroyed, and if it has, then cancel	the missile
0000C5D0                            ; ---------------------------------------------------------------------------
0000C5D0                            
0000C5D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C5D0                            
0000C5D0                            
0000C5D0                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000C5D0 2268 003C                  		movea.l	$3C(a0),a1
0000C5D4 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000C5D8 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000C5DA 4E75                       		rts	
0000C5DC                            ; End of function Obj23_ChkCancel
0000C5DC                            
0000C5DC                            ; ===========================================================================
0000C5DC                            
0000C5DC                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000C5DC 0828 0007 0022             		btst	#7,$22(a0)
0000C5E2 6600                       		bne.s	Obj23_Explode
0000C5E4 117C 0087 0020             		move.b	#$87,$20(a0)
0000C5EA 117C 0001 001C             		move.b	#1,$1C(a0)
0000C5F0 6100 0000                  		bsr.w	SpeedToPos
0000C5F4 4EB9 0000 0000             		jsr	ObjHitFloor
0000C5FA 4A41                       		tst.w	d1		; has object hit the floor
0000C5FC 6B00                       		bmi.s	Obj23_Explode2	; if not, branch
0000C5FE 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000C604 6100 0000                  		bsr.w	AnimateSprite
0000C608 6100 0000                  		bsr.w	DisplaySprite
0000C60C 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000C610 0640 00E0                  		addi.w	#$E0,d0
0000C614 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000C618 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000C61A 4E75                       		rts	
0000C61C                            ; ===========================================================================
0000C61C                            
0000C61C                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000C61C 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000C620 117C 0000 0024             		move.b	#0,$24(a0)
0000C626 6000 F24E                  		bra.w	Obj24
0000C62A                            ; ===========================================================================
0000C62A                            Obj23_Explode2:
0000C62A 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	(Obj3F)
0000C62E 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0000C634 4EFA F342                  		jmp	Obj3F		; jump to explosion code
0000C638                            ; ===========================================================================
0000C638                            
0000C638                            Obj23_Delete:				; XREF: Obj23_Index
0000C638 6100 0000                  		bsr.w	DeleteObject
0000C63C 4E75                       		rts	
0000C63E                            ; ===========================================================================
0000C63E                            
0000C63E                            Obj23_FromNewt:				; XREF: Obj23_Index
0000C63E 4A28 0001                  		tst.b	1(a0)
0000C642 6AF4                       		bpl.s	Obj23_Delete
0000C644 6100 0000                  		bsr.w	SpeedToPos
0000C648                            
0000C648                            Obj23_Animate2:				; XREF: Obj23_Main
0000C648 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000C64E 6100 0000                  		bsr.w	AnimateSprite
0000C652 6100 0000                  		bsr.w	DisplaySprite
0000C656 4E75                       		rts	
0000C658                            ; ===========================================================================
0000C658                            Ani_obj22:
0000C658                            	include "_anim\obj22.asm"
0000C658                            ; ---------------------------------------------------------------------------
0000C658                            ; Animation script - Buzz Bomber enemy
0000C658                            ; ---------------------------------------------------------------------------
0000C658 0000                       		dc.w byte_9A1E-Ani_obj22
0000C65A 0000                       		dc.w byte_9A22-Ani_obj22
0000C65C 0000                       		dc.w byte_9A26-Ani_obj22
0000C65E 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000C662 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000C666 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000C66A                            		even
0000C66A                            		even
0000C66A                            
0000C66A                            Ani_obj23:
0000C66A                            	include "_anim\obj23.asm"
0000C66A                            ; ---------------------------------------------------------------------------
0000C66A                            ; Animation script - missile that Buzz Bomber throws
0000C66A                            ; ---------------------------------------------------------------------------
0000C66A 0000                       		dc.w byte_9A2E-Ani_obj23
0000C66C 0000                       		dc.w byte_9A32-Ani_obj23
0000C66E 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000C672 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000C676                            		even
0000C676                            		even
0000C676                            
0000C676                            ; ---------------------------------------------------------------------------
0000C676                            ; Sprite mappings - Buzz Bomber	enemy
0000C676                            ; ---------------------------------------------------------------------------
0000C676                            Map_obj22:
0000C676                            	include "_maps\obj22.asm"
0000C676                            ; ---------------------------------------------------------------------------
0000C676                            ; Sprite mappings - Buzz Bomber	enemy
0000C676                            ; ---------------------------------------------------------------------------
0000C676 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
0000C67A 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
0000C67E 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
0000C682 06                         byte_9A42:	dc.b 6
0000C683 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000C688 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000C68D 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000C692 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000C697 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000C69C F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000C6A1 06                         byte_9A61:	dc.b 6
0000C6A2 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000C6A7 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000C6AC 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000C6B1 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000C6B6 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000C6BB F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000C6C0 07                         byte_9A80:	dc.b 7
0000C6C1 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000C6C6 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000C6CB F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000C6D0 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000C6D5 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000C6DA F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000C6DF F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000C6E4 07                         byte_9AA4:	dc.b 7
0000C6E5 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000C6EA F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000C6EF F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000C6F4 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000C6F9 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000C6FE F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000C703 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000C708 06                         byte_9AC8:	dc.b 6
0000C709 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000C70E 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000C713 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000C718 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000C71D F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000C722 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000C727 04                         byte_9AE7:	dc.b 4
0000C728 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000C72D 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000C732 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000C737 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000C73C F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000C741 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000C746                            		even
0000C746                            		even
0000C746                            
0000C746                            ; ---------------------------------------------------------------------------
0000C746                            ; Sprite mappings - missile that Buzz Bomber throws
0000C746                            ; ---------------------------------------------------------------------------
0000C746                            Map_obj23:
0000C746                            	include "_maps\obj23.asm"
0000C746                            ; ---------------------------------------------------------------------------
0000C746                            ; Sprite mappings - missile that Buzz Bomber throws
0000C746                            ; ---------------------------------------------------------------------------
0000C746 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000C74A 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000C74E 01                         byte_9B0E:	dc.b 1
0000C74F F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000C754 01                         byte_9B14:	dc.b 1
0000C755 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000C75A 01                         byte_9B1A:	dc.b 1
0000C75B F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000C760 01                         byte_9B20:	dc.b 1
0000C761 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000C766                            		even
0000C766                            		even
0000C766                            
0000C766                            ; ===========================================================================
0000C766                            ; ---------------------------------------------------------------------------
0000C766                            ; Object 25 - rings
0000C766                            ; ---------------------------------------------------------------------------
0000C766                            
0000C766                            Obj25:					; XREF: Obj_Index
0000C766 7000                       		moveq	#0,d0
0000C768 1028 0024                  		move.b	$24(a0),d0
0000C76C 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000C770 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000C774                            ; ===========================================================================
0000C774 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000C776 0000                       		dc.w Obj25_Animate-Obj25_Index
0000C778 0000                       		dc.w Obj25_Collect-Obj25_Index
0000C77A 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000C77C 0000                       		dc.w Obj25_Delete-Obj25_Index
0000C77E                            ; ---------------------------------------------------------------------------
0000C77E                            ; Distances between rings (format: horizontal, vertical)
0000C77E                            ; ---------------------------------------------------------------------------
0000C77E 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000C780 1800                       		dc.b $18, 0		; horizontal normal
0000C782 2000                       		dc.b $20, 0		; horizontal wide
0000C784 0010                       		dc.b 0,	$10		; vertical tight
0000C786 0018                       		dc.b 0,	$18		; vertical normal
0000C788 0020                       		dc.b 0,	$20		; vertical wide
0000C78A 1010                       		dc.b $10, $10		; diagonal
0000C78C 1818                       		dc.b $18, $18
0000C78E 2020                       		dc.b $20, $20
0000C790 F010                       		dc.b $F0, $10
0000C792 E818                       		dc.b $E8, $18
0000C794 E020                       		dc.b $E0, $20
0000C796 1008                       		dc.b $10, 8
0000C798 1810                       		dc.b $18, $10
0000C79A F008                       		dc.b $F0, 8
0000C79C E810                       		dc.b $E8, $10
0000C79E                            ; ===========================================================================
0000C79E                            
0000C79E                            Obj25_Main:				; XREF: Obj25_Index
0000C79E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C7A2 7000                       		moveq	#0,d0
0000C7A4 1028 0023                  		move.b	$23(a0),d0
0000C7A8 45F2 0002                  		lea	2(a2,d0.w),a2
0000C7AC 1812                       		move.b	(a2),d4
0000C7AE 1228 0028                  		move.b	$28(a0),d1
0000C7B2 1001                       		move.b	d1,d0
0000C7B4 0241 0007                  		andi.w	#7,d1
0000C7B8 0C41 0007                  		cmpi.w	#7,d1
0000C7BC 6600                       		bne.s	loc_9B80
0000C7BE 7206                       		moveq	#6,d1
0000C7C0                            
0000C7C0                            loc_9B80:
0000C7C0 4841                       		swap	d1
0000C7C2 323C 0000                  		move.w	#0,d1
0000C7C6 E808                       		lsr.b	#4,d0
0000C7C8 D040                       		add.w	d0,d0
0000C7CA 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000C7CE 4885                       		ext.w	d5
0000C7D0 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000C7D4 4886                       		ext.w	d6
0000C7D6 2248                       		movea.l	a0,a1
0000C7D8 3428 0008                  		move.w	8(a0),d2
0000C7DC 3628 000C                  		move.w	$C(a0),d3
0000C7E0 E20C                       		lsr.b	#1,d4
0000C7E2 6500                       		bcs.s	loc_9C02
0000C7E4 0892 0007                  		bclr	#7,(a2)
0000C7E8 6000                       		bra.s	loc_9BBA
0000C7EA                            ; ===========================================================================
0000C7EA                            
0000C7EA                            Obj25_MakeRings:
0000C7EA 4841                       		swap	d1
0000C7EC E20C                       		lsr.b	#1,d4
0000C7EE 6500                       		bcs.s	loc_9C02
0000C7F0 0892 0007                  		bclr	#7,(a2)
0000C7F4 6100 0000                  		bsr.w	SingleObjLoad
0000C7F8 6600                       		bne.s	loc_9C0E
0000C7FA                            
0000C7FA                            loc_9BBA:				; XREF: Obj25_Main
0000C7FA 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000C7FE 5429 0024                  		addq.b	#2,$24(a1)
0000C802 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000C806 3368 0008 0032             		move.w	8(a0),$32(a1)
0000C80C 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000C810 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000C818 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000C81E 137C 0004 0001             		move.b	#4,1(a1)
0000C824 137C 0002 0018             		move.b	#2,$18(a1)
0000C82A 137C 0047 0020             		move.b	#$47,$20(a1)
0000C830 137C 0008 0019             		move.b	#8,$19(a1)
0000C836 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000C83C 1341 0034                  		move.b	d1,$34(a1)
0000C840                            
0000C840                            loc_9C02:
0000C840 5241                       		addq.w	#1,d1
0000C842 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000C844 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000C846 4841                       		swap	d1
0000C848 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000C84C                            
0000C84C                            loc_9C0E:
0000C84C 0812 0000                  		btst	#0,(a2)
0000C850 6600 0000                  		bne.w	DeleteObject
0000C854                            
0000C854                            Obj25_Animate:				; XREF: Obj25_Index
0000C854 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000C85A 6100 0000                  		bsr.w	DisplaySprite
0000C85E 3028 0032                  		move.w	$32(a0),d0
0000C862 0240 FF80                  		andi.w	#$FF80,d0
0000C866 3238 F700                  		move.w	($FFFFF700).w,d1
0000C86A 0441 0080                  		subi.w	#$80,d1
0000C86E 0241 FF80                  		andi.w	#$FF80,d1
0000C872 9041                       		sub.w	d1,d0
0000C874 0C40 0280                  		cmpi.w	#$280,d0
0000C878 6200                       		bhi.s	Obj25_Delete
0000C87A 4E75                       		rts	
0000C87C                            ; ===========================================================================
0000C87C                            
0000C87C                            Obj25_Collect:				; XREF: Obj25_Index
0000C87C 5428 0024                  		addq.b	#2,$24(a0)
0000C880 117C 0000 0020             		move.b	#0,$20(a0)
0000C886 117C 0001 0018             		move.b	#1,$18(a0)
0000C88C 6100 0000                  		bsr.w	CollectRing
0000C890 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C894 7000                       		moveq	#0,d0
0000C896 1028 0023                  		move.b	$23(a0),d0
0000C89A 1228 0034                  		move.b	$34(a0),d1
0000C89E 03F2 0002                  		bset	d1,2(a2,d0.w)
0000C8A2                            
0000C8A2                            Obj25_Sparkle:				; XREF: Obj25_Index
0000C8A2 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000C8A8 6100 0000                  		bsr.w	AnimateSprite
0000C8AC 6000 0000                  		bra.w	DisplaySprite
0000C8B0                            ; ===========================================================================
0000C8B0                            
0000C8B0                            Obj25_Delete:				; XREF: Obj25_Index
0000C8B0 6000 0000                  		bra.w	DeleteObject
0000C8B4                            
0000C8B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C8B4                            
0000C8B4                            
0000C8B4                            CollectRing:				; XREF: Obj25_Collect
0000C8B4 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000C8B8 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000C8BE 303C 00CE                  		move.w	#$CE,d0		; play ring sound     (B5??)
0000C8C2 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000C8C8 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000C8CA 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000C8D0 6700                       		beq.s	loc_9CA4
0000C8D2 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000C8D8 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000C8DA 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000C8E0 6600                       		bne.s	Obj25_PlaySnd
0000C8E2                            
0000C8E2                            loc_9CA4:
0000C8E2 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000C8E6 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000C8EA 303C 009F                  		move.w	#$9F,d0		; play extra life music
0000C8EE                            
0000C8EE                            Obj25_PlaySnd:
0000C8EE 4EF9 0000 12D0             		jmp	(PlaySound_Special).l
0000C8F4                            ; End of function CollectRing
0000C8F4                            
0000C8F4                            ; ===========================================================================
0000C8F4                            ; ---------------------------------------------------------------------------
0000C8F4                            ; Object 37 - rings flying out of Sonic	when he's hit
0000C8F4                            ; ---------------------------------------------------------------------------
0000C8F4                            
0000C8F4                            Obj37:					; XREF: Obj_Index
0000C8F4 7000                       		moveq	#0,d0
0000C8F6 1028 0024                  		move.b	$24(a0),d0
0000C8FA 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000C8FE 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000C902                            ; ===========================================================================
0000C902 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000C904 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000C906 0000                       		dc.w Obj37_Collect-Obj37_Index
0000C908 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000C90A 0000                       		dc.w Obj37_Delete-Obj37_Index
0000C90C                            ; ===========================================================================
0000C90C                            
0000C90C                            Obj37_CountRings:			; XREF: Obj37_Index
0000C90C 2248                       		movea.l	a0,a1
0000C90E 7A00                       		moveq	#0,d5
0000C910 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000C914 7014                       		moveq	#20,d0
0000C916 BA40                       		cmp.w	d0,d5		; do you have 20 or more?
0000C918 6500                       		bcs.s	loc_9CDE	; if not, branch
0000C91A 3A00                       		move.w	d0,d5		; if yes, set d5 to 20
0000C91C                            
0000C91C                            loc_9CDE:
0000C91C 5345                       		subq.w	#1,d5
0000C91E 383C 0288                  		move.w	#$288,d4
0000C922 6000                       		bra.s	Obj37_MakeRings
0000C924                            ; ===========================================================================
0000C924                            
0000C924                            Obj37_Loop:
0000C924 6100 0000                  		bsr.w	SingleObjLoad
0000C928 6600 0000                  		bne.w	Obj37_ResetCounter
0000C92C                            
0000C92C                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000C92C 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000C930 5429 0024                  		addq.b	#2,$24(a1)
0000C934 137C 0008 0016             		move.b	#8,$16(a1)
0000C93A 137C 0008 0017             		move.b	#8,$17(a1)
0000C940 3368 0008 0008             		move.w	8(a0),8(a1)
0000C946 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C94C 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000C954 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000C95A 137C 0004 0001             		move.b	#4,1(a1)
0000C960 137C 0003 0018             		move.b	#3,$18(a1)
0000C966 137C 0047 0020             		move.b	#$47,$20(a1)
0000C96C 137C 0008 0019             		move.b	#8,$19(a1)
0000C972 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000C978 4A44                       		tst.w	d4
0000C97A 6B00                       		bmi.s	loc_9D62
0000C97C 3004                       		move.w	d4,d0
0000C97E 4EB8 2CC8                  		jsr	CalcSine
0000C982 3404                       		move.w	d4,d2
0000C984 E04A                       		lsr.w	#8,d2
0000C986 E560                       		asl.w	d2,d0
0000C988 E561                       		asl.w	d2,d1
0000C98A 3400                       		move.w	d0,d2
0000C98C 3601                       		move.w	d1,d3
0000C98E 0604 0010                  		addi.b	#$10,d4
0000C992 6400                       		bcc.s	loc_9D62
0000C994 0444 0080                  		subi.w	#$80,d4
0000C998 6400                       		bcc.s	loc_9D62
0000C99A 383C 0288                  		move.w	#$288,d4
0000C99E                            
0000C99E                            loc_9D62:
0000C99E 3342 0010                  		move.w	d2,$10(a1)
0000C9A2 3343 0012                  		move.w	d3,$12(a1)
0000C9A6 4442                       		neg.w	d2
0000C9A8 4444                       		neg.w	d4
0000C9AA 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000C9AE                            
0000C9AE                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000C9AE 0C78 0014 FE20                             cmpi.w	#20,($FFFFFE20).w ; do you have less than 20 rings?
0000C9B4 6500                       		bcs.s	Obj37_ZeroRing	; if yes, branch
0000C9B6 0478 0014 FE20                             sub.w	#$14,($FFFFFE20).w ; subtract 20 from number of rings you have
0000C9BC 6000                                       bra.s   ResetContik
0000C9BE                            
0000C9BE                            Obj37_ZeroRing:
0000C9BE 31FC 0000 FE20                             move.w #0,($FFFFFE20).w  ; lose all rings
0000C9C4                            
0000C9C4                            ResetContik:
0000C9C4 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000C9CA 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000C9D0 303C 00C6                  		move.w	#$C6,d0
0000C9D4 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000C9DA                            
0000C9DA                            Obj37_Bounce:				; XREF: Obj37_Index
0000C9DA 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000C9E0 6100 0000                  		bsr.w	SpeedToPos
0000C9E4 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C9EA 6B00                       		bmi.s	Obj37_ChkDel
0000C9EC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C9F0 D007                       		add.b	d7,d0
0000C9F2 0200 0003                  		andi.b	#3,d0
0000C9F6 6600                       		bne.s	Obj37_ChkDel
0000C9F8 4EB9 0000 0000             		jsr	ObjHitFloor
0000C9FE 4A41                       		tst.w	d1
0000CA00 6A00                       		bpl.s	Obj37_ChkDel
0000CA02 D368 000C                  		add.w	d1,$C(a0)
0000CA06 3028 0012                  		move.w	$12(a0),d0
0000CA0A E440                       		asr.w	#2,d0
0000CA0C 9168 0012                  		sub.w	d0,$12(a0)
0000CA10 4468 0012                  		neg.w	$12(a0)
0000CA14                            
0000CA14                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000CA14 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000CA18 6700                       		beq.s	Obj37_Delete
0000CA1A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000CA1E 0640 00E0                  		addi.w	#$E0,d0
0000CA22 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000CA26 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000CA28 6000 0000                  		bra.w	DisplaySprite
0000CA2C                            ; ===========================================================================
0000CA2C                            
0000CA2C                            Obj37_Collect:				; XREF: Obj37_Index
0000CA2C 5428 0024                  		addq.b	#2,$24(a0)
0000CA30 117C 0000 0020             		move.b	#0,$20(a0)
0000CA36 117C 0001 0018             		move.b	#1,$18(a0)
0000CA3C 6100 FE76                  		bsr.w	CollectRing
0000CA40                            
0000CA40                            Obj37_Sparkle:				; XREF: Obj37_Index
0000CA40 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000CA46 6100 0000                  		bsr.w	AnimateSprite
0000CA4A 6000 0000                  		bra.w	DisplaySprite
0000CA4E                            ; ===========================================================================
0000CA4E                            
0000CA4E                            Obj37_Delete:				; XREF: Obj37_Index
0000CA4E 6000 0000                  		bra.w	DeleteObject
0000CA52                            ; ===========================================================================
0000CA52                            ; ---------------------------------------------------------------------------
0000CA52                            ; Object 4B - giant ring for entry to special stage
0000CA52                            ; ---------------------------------------------------------------------------
0000CA52                            
0000CA52                            Obj4B:					; XREF: Obj_Index
0000CA52 7000                       		moveq	#0,d0
0000CA54 1028 0024                  		move.b	$24(a0),d0
0000CA58 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000CA5C 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000CA60                            ; ===========================================================================
0000CA60 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000CA62 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000CA64 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000CA66 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000CA68                            ; ===========================================================================
0000CA68                            
0000CA68                            Obj4B_Main:				; XREF: Obj4B_Index
0000CA68 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000CA70 317C 2400 0002             		move.w	#$2400,2(a0)
0000CA76 0028 0004 0001             		ori.b	#4,1(a0)
0000CA7C 117C 0040 0019             		move.b	#$40,$19(a0)
0000CA82 4A28 0001                  		tst.b	1(a0)
0000CA86 6A00                       		bpl.s	Obj4B_Animate
0000CA88 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000CA8E 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000CA92 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000CA98 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000CA9A 4E75                       		rts	
0000CA9C                            ; ===========================================================================
0000CA9C                            
0000CA9C                            Obj4B_Okay:				; XREF: Obj4B_Main
0000CA9C 5428 0024                  		addq.b	#2,$24(a0)
0000CAA0 117C 0002 0018             		move.b	#2,$18(a0)
0000CAA6 117C 0052 0020             		move.b	#$52,$20(a0)
0000CAAC 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000CAB2                            
0000CAB2                            Obj4B_Animate:				; XREF: Obj4B_Index
0000CAB2 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000CAB8 3028 0008                  		move.w	8(a0),d0
0000CABC 0240 FF80                  		andi.w	#$FF80,d0
0000CAC0 3238 F700                  		move.w	($FFFFF700).w,d1
0000CAC4 0441 0080                  		subi.w	#$80,d1
0000CAC8 0241 FF80                  		andi.w	#$FF80,d1
0000CACC 9041                       		sub.w	d1,d0
0000CACE 0C40 0280                  		cmpi.w	#$280,d0
0000CAD2 6200 0000                  		bhi.w	DeleteObject
0000CAD6 6000 0000                  		bra.w	DisplaySprite
0000CADA                            ; ===========================================================================
0000CADA                            
0000CADA                            Obj4B_Collect:				; XREF: Obj4B_Index
0000CADA 5528 0024                  		subq.b	#2,$24(a0)
0000CADE 117C 0000 0020             		move.b	#0,$20(a0)
0000CAE4 6100 0000                  		bsr.w	SingleObjLoad
0000CAE8 6600 0000                  		bne.w	Obj4B_PlaySnd
0000CAEC 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000CAF0 3368 0008 0008             		move.w	8(a0),8(a1)
0000CAF6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CAFC 2348 003C                  		move.l	a0,$3C(a1)
0000CB00 3038 D008                  		move.w	($FFFFD008).w,d0
0000CB04 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000CB08 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000CB0A 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000CB10                            
0000CB10                            Obj4B_PlaySnd:
0000CB10 303C 00C3                  		move.w	#$C3,d0
0000CB14 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000CB1A 6096                       		bra.s	Obj4B_Animate
0000CB1C                            ; ===========================================================================
0000CB1C                            
0000CB1C                            Obj4B_Delete:				; XREF: Obj4B_Index
0000CB1C 6000 0000                  		bra.w	DeleteObject
0000CB20                            ; ===========================================================================
0000CB20                            ; ---------------------------------------------------------------------------
0000CB20                            ; Object 7C - flash effect when	you collect the	giant ring
0000CB20                            ; ---------------------------------------------------------------------------
0000CB20                            
0000CB20                            Obj7C:					; XREF: Obj_Index
0000CB20 7000                       		moveq	#0,d0
0000CB22 1028 0024                  		move.b	$24(a0),d0
0000CB26 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000CB2A 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000CB2E                            ; ===========================================================================
0000CB2E 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000CB30 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000CB32 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000CB34                            ; ===========================================================================
0000CB34                            
0000CB34                            Obj7C_Main:				; XREF: Obj7C_Index
0000CB34 5428 0024                  		addq.b	#2,$24(a0)
0000CB38 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000CB40 317C 2462 0002             		move.w	#$2462,2(a0)
0000CB46 0028 0004 0001             		ori.b	#4,1(a0)
0000CB4C 117C 0000 0018             		move.b	#0,$18(a0)
0000CB52 117C 0020 0019             		move.b	#$20,$19(a0)
0000CB58 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000CB5E                            
0000CB5E                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000CB5E 6100                       		bsr.s	Obj7C_Collect
0000CB60 3028 0008                  		move.w	8(a0),d0
0000CB64 0240 FF80                  		andi.w	#$FF80,d0
0000CB68 3238 F700                  		move.w	($FFFFF700).w,d1
0000CB6C 0441 0080                  		subi.w	#$80,d1
0000CB70 0241 FF80                  		andi.w	#$FF80,d1
0000CB74 9041                       		sub.w	d1,d0
0000CB76 0C40 0280                  		cmpi.w	#$280,d0
0000CB7A 6200 0000                  		bhi.w	DeleteObject
0000CB7E 6000 0000                  		bra.w	DisplaySprite
0000CB82                            
0000CB82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CB82                            
0000CB82                            
0000CB82                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000CB82 5328 001E                  		subq.b	#1,$1E(a0)
0000CB86 6A00                       		bpl.s	locret_9F76
0000CB88 117C 0001 001E             		move.b	#1,$1E(a0)
0000CB8E 5228 001A                  		addq.b	#1,$1A(a0)
0000CB92 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000CB98 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000CB9A 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000CBA0 6600                       		bne.s	locret_9F76	; if not, branch
0000CBA2 2268 003C                  		movea.l	$3C(a0),a1
0000CBA6 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000CBAC 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000CBB2 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000CBB8 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000CBBC 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000CBC0                            
0000CBC0                            locret_9F76:
0000CBC0 4E75                       		rts	
0000CBC2                            ; ===========================================================================
0000CBC2                            
0000CBC2                            Obj7C_End:				; XREF: Obj7C_Collect
0000CBC2 5428 0024                  		addq.b	#2,$24(a0)
0000CBC6 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000CBCC 588F                       		addq.l	#4,sp
0000CBCE 4E75                       		rts	
0000CBD0                            ; End of function Obj7C_Collect
0000CBD0                            
0000CBD0                            ; ===========================================================================
0000CBD0                            
0000CBD0                            Obj7C_Delete:				; XREF: Obj7C_Index
0000CBD0 6000 0000                  		bra.w	DeleteObject
0000CBD4                            ; ===========================================================================
0000CBD4                            Ani_obj25:
0000CBD4                            	include "_anim\obj25.asm"
0000CBD4                            ; ---------------------------------------------------------------------------
0000CBD4                            ; Animation script - ring
0000CBD4                            ; ---------------------------------------------------------------------------
0000CBD4 0000                       		dc.w byte_9F8C-Ani_obj25
0000CBD6 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000CBDC                            		even
0000CBDC                            		even
0000CBDC                            
0000CBDC                            ; ---------------------------------------------------------------------------
0000CBDC                            ; Sprite mappings - rings
0000CBDC                            ; ---------------------------------------------------------------------------
0000CBDC                            Map_obj25:
0000CBDC                            	include "_maps\obj25.asm"
0000CBDC                            ; ---------------------------------------------------------------------------
0000CBDC                            ; Sprite mappings - rings
0000CBDC                            ; ---------------------------------------------------------------------------
0000CBDC 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000CBE0 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000CBE4 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000CBE8 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000CBEC 01                         byte_9FA2:	dc.b 1
0000CBED F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000CBF2 01                         byte_9FA8:	dc.b 1
0000CBF3 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000CBF8 01                         byte_9FAE:	dc.b 1
0000CBF9 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000CBFE 01                         byte_9FB4:	dc.b 1
0000CBFF F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000CC04 01                         byte_9FBA:	dc.b 1
0000CC05 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000CC0A 01                         byte_9FC0:	dc.b 1
0000CC0B F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000CC10 01                         byte_9FC6:	dc.b 1
0000CC11 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000CC16 01                         byte_9FCC:	dc.b 1
0000CC17 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000CC1C                            		even
0000CC1C                            		even
0000CC1C                            
0000CC1C                            ; ---------------------------------------------------------------------------
0000CC1C                            ; Sprite mappings - giant ring
0000CC1C                            ; ---------------------------------------------------------------------------
0000CC1C                            Map_obj4B:
0000CC1C                            	include "_maps\obj4B.asm"
0000CC1C                            ; ---------------------------------------------------------------------------
0000CC1C                            ; Sprite mappings - giant ring
0000CC1C                            ; ---------------------------------------------------------------------------
0000CC1C 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000CC20 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000CC24 0A                         byte_9FDA:	dc.b $A
0000CC25 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000CC2A E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000CC2F E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000CC34 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000CC39 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000CC3E F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000CC43 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000CC48 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000CC4D 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000CC52 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000CC57 08                         byte_A00D:	dc.b 8
0000CC58 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000CC5D E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000CC62 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000CC67 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000CC6C F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000CC71 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000CC76 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000CC7B 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000CC80 04                         byte_A036:	dc.b 4
0000CC81 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000CC86 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000CC8B 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000CC90 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000CC95 08                         byte_A04B:	dc.b 8
0000CC96 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000CC9B E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000CCA0 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000CCA5 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000CCAA F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000CCAF 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000CCB4 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000CCB9 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000CCBE                            		even
0000CCBE                            		even
0000CCBE                            
0000CCBE                            ; ---------------------------------------------------------------------------
0000CCBE                            ; Sprite mappings - flash effect when you collect the giant ring
0000CCBE                            ; ---------------------------------------------------------------------------
0000CCBE                            Map_obj7C:
0000CCBE                            	include "_maps\obj7C.asm"
0000CCBE                            ; ---------------------------------------------------------------------------
0000CCBE                            ; Sprite mappings - flash effect when you collect the giant ring
0000CCBE                            ; ---------------------------------------------------------------------------
0000CCBE 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000CCC2 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000CCC6 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000CCCA 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000CCCE 02                         byte_A084:	dc.b 2
0000CCCF E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000CCD4 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000CCD9 04                         byte_A08F:	dc.b 4
0000CCDA E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000CCDF E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000CCE4 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000CCE9 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000CCEE 04                         byte_A0A4:	dc.b 4
0000CCEF E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000CCF4 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000CCF9 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000CCFE 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000CD03 04                         byte_A0B9:	dc.b 4
0000CD04 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000CD09 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000CD0E 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000CD13 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000CD18 04                         byte_A0CE:	dc.b 4
0000CD19 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000CD1E E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000CD23 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000CD28 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000CD2D 04                         byte_A0E3:	dc.b 4
0000CD2E E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000CD33 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000CD38 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000CD3D 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000CD42 02                         byte_A0F8:	dc.b 2
0000CD43 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000CD48 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000CD4D 04                         byte_A103:	dc.b 4
0000CD4E E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000CD53 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000CD58 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000CD5D 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000CD62                            		even
0000CD62                            		even
0000CD62                            
0000CD62                            ; ===========================================================================
0000CD62                            ; ---------------------------------------------------------------------------
0000CD62                            ; Object 26 - monitors
0000CD62                            ; ---------------------------------------------------------------------------
0000CD62                            
0000CD62                            Obj26:					; XREF: Obj_Index
0000CD62 7000                       		moveq	#0,d0
0000CD64 1028 0024                  		move.b	$24(a0),d0
0000CD68 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000CD6C 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000CD70                            ; ===========================================================================
0000CD70 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000CD72 0000                       		dc.w Obj26_Solid-Obj26_Index
0000CD74 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000CD76 0000                       		dc.w Obj26_Animate-Obj26_Index
0000CD78 0000                       		dc.w Obj26_Display-Obj26_Index
0000CD7A                            ; ===========================================================================
0000CD7A                            
0000CD7A                            Obj26_Main:				; XREF: Obj26_Index
0000CD7A 5428 0024                  		addq.b	#2,$24(a0)
0000CD7E 117C 000E 0016             		move.b	#$E,$16(a0)
0000CD84 117C 000E 0017             		move.b	#$E,$17(a0)
0000CD8A 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000CD92 317C 0680 0002             		move.w	#$680,2(a0)
0000CD98 117C 0004 0001             		move.b	#4,1(a0)
0000CD9E 117C 0003 0018             		move.b	#3,$18(a0)
0000CDA4 117C 000F 0019             		move.b	#$F,$19(a0)
0000CDAA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CDAE 7000                       		moveq	#0,d0
0000CDB0 1028 0023                  		move.b	$23(a0),d0
0000CDB4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000CDBA 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000CDC0 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000CDC2 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000CDC8 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000CDCE 4E75                       		rts	
0000CDD0                            ; ===========================================================================
0000CDD0                            
0000CDD0                            Obj26_NotBroken:			; XREF: Obj26_Main
0000CDD0 117C 0046 0020             		move.b	#$46,$20(a0)
0000CDD6 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000CDDC                            
0000CDDC                            Obj26_Solid:				; XREF: Obj26_Index
0000CDDC 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000CDE0 6700                       		beq.s	loc_A1EC	; if not, branch
0000CDE2 5500                       		subq.b	#2,d0
0000CDE4 6600                       		bne.s	Obj26_Fall
0000CDE6 7200                       		moveq	#0,d1
0000CDE8 1228 0019                  		move.b	$19(a0),d1
0000CDEC 0641 000B                  		addi.w	#$B,d1
0000CDF0 6100 D2FA                  		bsr.w	ExitPlatform
0000CDF4 0829 0003 0022             		btst	#3,$22(a1)
0000CDFA 6600 0000                  		bne.w	loc_A1BC
0000CDFE 4228 0025                  		clr.b	$25(a0)
0000CE02 6000 0000                  		bra.w	Obj26_Animate
0000CE06                            ; ===========================================================================
0000CE06                            
0000CE06                            loc_A1BC:				; XREF: Obj26_Solid
0000CE06 363C 0010                  		move.w	#$10,d3
0000CE0A 3428 0008                  		move.w	8(a0),d2
0000CE0E 6100 D83A                  		bsr.w	MvSonicOnPtfm
0000CE12 6000 0000                  		bra.w	Obj26_Animate
0000CE16                            ; ===========================================================================
0000CE16                            
0000CE16                            Obj26_Fall:				; XREF: Obj26_Solid
0000CE16 6100 0000                  		bsr.w	ObjectFall
0000CE1A 4EB9 0000 0000             		jsr	ObjHitFloor
0000CE20 4A41                       		tst.w	d1		; has monitor landed?
0000CE22 6A00 0000                  		bpl.w	Obj26_Animate	; if not, branch
0000CE26 D368 000C                  		add.w	d1,$C(a0)	; correct monitor's Y-pos
0000CE2A 4268 0012                  		clr.w	$12(a0)		; clear Y-velocity
0000CE2E 4228 0025                  		clr.b	$25(a0)
0000CE32 6000 0000                  		bra.w	Obj26_Animate
0000CE36                            ; ===========================================================================
0000CE36                            
0000CE36                            loc_A1EC:				; XREF: Obj26_Solid
0000CE36 323C 001A                  		move.w	#$1A,d1
0000CE3A 343C 000F                  		move.w	#$F,d2
0000CE3E 6100 0000                  		bsr.w	Obj26_SolidSides
0000CE42 6700 0000                  		beq.w	loc_A25C
0000CE46 4A69 0012                  		tst.w	$12(a1)
0000CE4A 6B00                       		bmi.s	loc_A20A
0000CE4C 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000CE52 6700                       		beq.s	loc_A25C	; if yes, branch
0000CE54 0C29 001F 001C             		cmp.b	#$1F,$1C(a1)	; is Sonic spin-dashing?
0000CE5A 6700 0000                  		beq	loc_A25C	; if yes, branch
0000CE5E                            
0000CE5E                            loc_A20A:
0000CE5E 4A41                       		tst.w	d1
0000CE60 6A00                       		bpl.s	loc_A220
0000CE62 9769 000C                  		sub.w	d3,$C(a1)
0000CE66 6100 D172                  		bsr.w	loc_74AE
0000CE6A 117C 0002 0025             		move.b	#2,$25(a0)
0000CE70 6000 0000                  		bra.w	Obj26_Animate
0000CE74                            ; ===========================================================================
0000CE74                            
0000CE74                            loc_A220:
0000CE74 4A40                       		tst.w	d0
0000CE76 6700 0000                  		beq.w	loc_A246
0000CE7A 6B00                       		bmi.s	loc_A230
0000CE7C 4A69 0010                  		tst.w	$10(a1)
0000CE80 6B00                       		bmi.s	loc_A246
0000CE82 6000                       		bra.s	loc_A236
0000CE84                            ; ===========================================================================
0000CE84                            
0000CE84                            loc_A230:
0000CE84 4A69 0010                  		tst.w	$10(a1)
0000CE88 6A00                       		bpl.s	loc_A246
0000CE8A                            
0000CE8A                            loc_A236:
0000CE8A 9169 0008                  		sub.w	d0,8(a1)
0000CE8E 337C 0000 0014             		move.w	#0,$14(a1)
0000CE94 337C 0000 0010             		move.w	#0,$10(a1)
0000CE9A                            
0000CE9A                            loc_A246:
0000CE9A 0829 0001 0022             		btst	#1,$22(a1)
0000CEA0 6600                       		bne.s	loc_A26A
0000CEA2 08E9 0005 0022             		bset	#5,$22(a1)
0000CEA8 08E8 0005 0022             		bset	#5,$22(a0)
0000CEAE 6000                       		bra.s	Obj26_Animate
0000CEB0                            ; ===========================================================================
0000CEB0                            
0000CEB0                            loc_A25C:
0000CEB0 0828 0005 0022             		btst	#5,$22(a0)
0000CEB6 6700                       		beq.s	Obj26_Animate
0000CEB8 337C 0001 001C             		move.w	#1,$1C(a1)
0000CEBE                            
0000CEBE                            loc_A26A:
0000CEBE 08A8 0005 0022             		bclr	#5,$22(a0)
0000CEC4 08A9 0005 0022             		bclr	#5,$22(a1)
0000CECA                            
0000CECA                            Obj26_Animate:				; XREF: Obj26_Index
0000CECA 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000CED0 6100 0000                  		bsr.w	AnimateSprite
0000CED4                            
0000CED4                            Obj26_Display:				; XREF: Obj26_Index
0000CED4 6100 0000                  		bsr.w	DisplaySprite
0000CED8 3028 0008                  		move.w	8(a0),d0
0000CEDC 0240 FF80                  		andi.w	#$FF80,d0
0000CEE0 3238 F700                  		move.w	($FFFFF700).w,d1
0000CEE4 0441 0080                  		subi.w	#$80,d1
0000CEE8 0241 FF80                  		andi.w	#$FF80,d1
0000CEEC 9041                       		sub.w	d1,d0
0000CEEE 0C40 0280                  		cmpi.w	#$280,d0
0000CEF2 6200 0000                  		bhi.w	DeleteObject
0000CEF6 4E75                       		rts	
0000CEF8                            ; ===========================================================================
0000CEF8                            
0000CEF8                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000CEF8 5428 0024                  		addq.b	#2,$24(a0)
0000CEFC 117C 0000 0020             		move.b	#0,$20(a0)
0000CF02 6100 0000                  		bsr.w	SingleObjLoad
0000CF06 6600                       		bne.s	Obj26_Explode
0000CF08 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000CF0C 3368 0008 0008             		move.w	8(a0),8(a1)
0000CF12 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CF18 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000CF1E                            
0000CF1E                            Obj26_Explode:
0000CF1E 6100 0000                  		bsr.w	SingleObjLoad
0000CF22 6600                       		bne.s	Obj26_SetBroken
0000CF24 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000CF28 5429 0024                  		addq.b	#2,$24(a1)
0000CF2C 3368 0008 0008             		move.w	8(a0),8(a1)
0000CF32 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CF38                            
0000CF38                            Obj26_SetBroken:
0000CF38 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CF3C 7000                       		moveq	#0,d0
0000CF3E 1028 0023                  		move.b	$23(a0),d0
0000CF42 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000CF48 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000CF4E 6000 0000                  		bra.w	DisplaySprite
0000CF52                            ; ===========================================================================
0000CF52                            ; ---------------------------------------------------------------------------
0000CF52                            ; Object 2E - contents of monitors
0000CF52                            ; ---------------------------------------------------------------------------
0000CF52                            
0000CF52                            Obj2E:					; XREF: Obj_Index
0000CF52 7000                       		moveq	#0,d0
0000CF54 1028 0024                  		move.b	$24(a0),d0
0000CF58 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000CF5C 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000CF60 6000 0000                  		bra.w	DisplaySprite
0000CF64                            ; ===========================================================================
0000CF64 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000CF66 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000CF68 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000CF6A                            ; ===========================================================================
0000CF6A                            
0000CF6A                            Obj2E_Main:				; XREF: Obj2E_Index
0000CF6A 5428 0024                  		addq.b	#2,$24(a0)
0000CF6E 317C 0680 0002             		move.w	#$680,2(a0)
0000CF74 117C 0024 0001             		move.b	#$24,1(a0)
0000CF7A 117C 0003 0018             		move.b	#3,$18(a0)
0000CF80 117C 0008 0019             		move.b	#8,$19(a0)
0000CF86 317C FD00 0012             		move.w	#-$300,$12(a0)	; make object move up
0000CF8C 7000                       		moveq	#0,d0
0000CF8E 1028 001C                  		move.b	$1C(a0),d0
0000CF92 5400                       		addq.b	#2,d0
0000CF94 1140 001A                  		move.b	d0,$1A(a0)
0000CF98 227C 0000 0000             		movea.l	#Map_obj26,a1
0000CF9E D000                       		add.b	d0,d0
0000CFA0 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000CFA4 5249                       		addq.w	#1,a1
0000CFA6 2149 0004                  		move.l	a1,4(a0)
0000CFAA                            
0000CFAA                            Obj2E_Move:				; XREF: Obj2E_Index
0000CFAA 4A68 0012                  		tst.w	$12(a0)		; has object stopped?
0000CFAE 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if yes, branch
0000CFB2 6100 0000                  		bsr.w	SpeedToPos
0000CFB6 0668 0018 0012             		addi.w	#$18,$12(a0)	; decrease object speed
0000CFBC 4E75                       		rts	
0000CFBE                            ; ===========================================================================
0000CFBE                            
0000CFBE                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000CFBE 5428 0024                  		addq.b    #2,$24(a0)
0000CFC2 317C 001D 001E                     move.w    #29,$1E(a0)
0000CFC8 1028 001C                          move.b    $1C(a0),d0
0000CFCC 0C00 0001                          cmpi.b    #1,d0; does monitor contain Eggman?
0000CFD0 6600                               bne.s    Obj2E_ChkSonic ; if not, go and check for the next monitor type (1-up icon)
0000CFD2 2248                               move.l    a0,a1 ; move a0 to a1, because Touch_ChkHurt wants the damaging object to be in a1
0000CFD4 2F08                               move.l    a0,-(sp) ; push a0 on the stack, and decrement stack pointer
0000CFD6 41F8 D000                          lea    ($FFFFD000).w,a0 ; put Sonic's ram address in a0, because Touch_ChkHurt wants the damaged object to be in a0
0000CFDA 4EB9 0000 0000                     jsr    Touch_ChkHurt ; run the Touch_ChkHurt routine
0000CFE0 205F                               move.l    (sp)+,a0 ; pop the previous value of a0 from the stack, and increment stack pointer
0000CFE2 4E75                               rts ; The Eggman monitor now does something!
0000CFE4                            ; ===========================================================================
0000CFE4                            
0000CFE4                            Obj2E_ChkSonic:
0000CFE4 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000CFE8 6600                       		bne.s	Obj2E_ChkShoes	; if not, branch
0000CFEA                            
0000CFEA                            ExtraLife:
0000CFEA 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000CFEE 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000CFF2 303C 009F                  		move.w	#$9F,d0
0000CFF6 4EF9 0000 12CA             		jmp	(PlaySound).l	; play extra life music
0000CFFC                            ; ===========================================================================
0000CFFC                            
0000CFFC                            Obj2E_ChkShoes:
0000CFFC 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000D000 6600                       		bne.s	Obj2E_ChkShield	; if not, branch
0000D002 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; set speed shoes flag
0000D008 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000D00E 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000D014 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000D01A 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000D020 303C 00E2                  		move.w	#$E2,d0
0000D024 4EF9 0000 12CA             		jmp	(PlaySound).l	; Speed	up the music
0000D02A                            ; ===========================================================================
0000D02A                            
0000D02A                            Obj2E_ChkShield:
0000D02A 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000D02E 6600                       		bne.s	Obj2E_ChkInvinc	; if not, branch
0000D030 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000D036 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000D03C 303C 00AF                  		move.w	#$AF,d0
0000D040 4EF9 0000 12CA             		jmp	(PlaySound).l	; play shield sound
0000D046                            ; ===========================================================================
0000D046                            
0000D046                            Obj2E_ChkInvinc:
0000D046 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000D04A 6600                       		bne.s	Obj2E_ChkRings	; if not, branch
0000D04C 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000D052 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000D058 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000D05E 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000D064 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000D06A 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000D070 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000D076 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000D07C 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000D082 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000D088 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000D08C 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000D08E 303C 0098                  		move.w	#$98,d0
0000D092 4EF9 0000 12CA             		jmp	(PlaySound).l	; play invincibility music
0000D098                            ; ===========================================================================
0000D098                            
0000D098                            Obj2E_NoMusic:
0000D098 4E75                       		rts	
0000D09A                            ; ===========================================================================
0000D09A                            
0000D09A                            Obj2E_ChkRings:
0000D09A 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000D09E 6600 0000                  		bne.w	Obj2E_ChkS	; if not, branch
0000D0A2 4EB9 0000 2CA2                             jsr   (RandomNumber).l         ; get a random number
0000D0A8 0200 0001                                  andi.b   #1,d0               ; get a number equal or lower than 1 (0 until 1)
0000D0AC 6600 0000                                  bne.w    RandRings ; if it isn't 0, branch
0000D0B0 6700 0000                                  beq.w    GiveMe5Rings ; if it is 0, branch
0000D0B4                            
0000D0B4                            GiveMe5Rings:
0000D0B4 5A78 FE20                                  addi.w	#$5,($FFFFFE20).w ; add 5 rings to the number of rings you have
0000D0B8 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000D0BE 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000D0C4 6500 0000                  		bcs.w	Obj2E_RingSound
0000D0C8 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000D0CE 6700 FF1A                  		beq.w	ExtraLife
0000D0D2 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000D0D8 6500 0000                  		bcs.w	Obj2E_RingSound
0000D0DC 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000D0E2 6700 FF06                  		beq.w	ExtraLife
0000D0E6                            
0000D0E6                            RandRings:
0000D0E6 4EB9 0000 2CA2                             jsr   (RandomNumber).l         ; get a random number
0000D0EC 0200 0001                                  andi.b   #1,d0               ; get a number equal or lower than 1 (0 until 1)
0000D0F0 6600 0000                                  bne.w    Giveme10rings ; if it isn't 0, branch
0000D0F4 6700 0000                                  beq.w    GiveMe15Rings ; if it is 0, branch
0000D0F8                            
0000D0F8                            GiveMe10Rings:
0000D0F8 0678 000A FE20                             addi.w	#$A,($FFFFFE20).w ; add 10 rings to the number of rings you have
0000D0FE 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000D104 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000D10A 6500 0000                  		bcs.w	Obj2E_RingSound
0000D10E 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000D114 6700 FED4                  		beq.w	ExtraLife
0000D118 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000D11E 6500 0000                  		bcs.w	Obj2E_RingSound
0000D122 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000D128 6700 FEC0                  		beq.w	ExtraLife
0000D12C                            
0000D12C                            GiveMe15Rings:
0000D12C 0678 000F FE20                             addi.w	#$F,($FFFFFE20).w ; add 15 rings to the number of rings you have
0000D132 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000D138 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000D13E 6500 0000                  		bcs.w	Obj2E_RingSound
0000D142 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000D148 6700 FEA0                  		beq.w	ExtraLife
0000D14C 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000D152 6500 0000                  		bcs.w	Obj2E_RingSound
0000D156 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000D15C 6700 FE8C                  		beq.w	ExtraLife
0000D160                            
0000D160                            Obj2E_RingSound:
0000D160 303C 00B5                  		move.w	#$B5,d0
0000D164 4EF9 0000 12CA             		jmp	(PlaySound).l	; play ring sound
0000D16A                            ; ===========================================================================
0000D16A                            
0000D16A                            Obj2E_ChkS:
0000D16A 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000D16E 6600                       		bne.s	Obj2E_ChkEnd	; if not, branch
0000D170 4E71                       		nop	
0000D172                            
0000D172                            Obj2E_ChkEnd:
0000D172 4E75                       		rts			; 'S' and goggles monitors do nothing
0000D174                            ; ===========================================================================
0000D174                            
0000D174                            Obj2E_Delete:				; XREF: Obj2E_Index
0000D174 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from timer
0000D178 6B00 0000                  		bmi.w	DeleteObject	; if time is over, branch
0000D17C 4E75                       		rts	
0000D17E                            ; ---------------------------------------------------------------------------
0000D17E                            ; Subroutine to	make the sides of a monitor solid
0000D17E                            ; ---------------------------------------------------------------------------
0000D17E                            
0000D17E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D17E                            
0000D17E                            
0000D17E                            Obj26_SolidSides:			; XREF: loc_A1EC
0000D17E 43F8 D000                  		lea	($FFFFD000).w,a1 ; load Sonic to a1
0000D182 3029 0008                  		move.w	8(a1),d0
0000D186 9068 0008                  		sub.w	8(a0),d0
0000D18A D041                       		add.w	d1,d0
0000D18C 6B00                       		bmi.s	loc_A4E6
0000D18E 3601                       		move.w	d1,d3
0000D190 D643                       		add.w	d3,d3
0000D192 B043                       		cmp.w	d3,d0
0000D194 6200                       		bhi.s	loc_A4E6
0000D196 1629 0016                  		move.b	$16(a1),d3
0000D19A 4883                       		ext.w	d3
0000D19C D443                       		add.w	d3,d2
0000D19E 3629 000C                  		move.w	$C(a1),d3
0000D1A2 9668 000C                  		sub.w	$C(a0),d3
0000D1A6 D642                       		add.w	d2,d3
0000D1A8 6B00                       		bmi.s	loc_A4E6
0000D1AA D442                       		add.w	d2,d2
0000D1AC B642                       		cmp.w	d2,d3
0000D1AE 6400                       		bcc.s	loc_A4E6
0000D1B0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000D1B4 6B00                       		bmi.s	loc_A4E6
0000D1B6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D1BC 6400                       		bcc.s	loc_A4E6
0000D1BE 4A78 FE08                  		tst.w	($FFFFFE08).w
0000D1C2 6600                       		bne.s	loc_A4E6
0000D1C4 B240                       		cmp.w	d0,d1
0000D1C6 6400                       		bcc.s	loc_A4DC
0000D1C8 D241                       		add.w	d1,d1
0000D1CA 9041                       		sub.w	d1,d0
0000D1CC                            
0000D1CC                            loc_A4DC:
0000D1CC 0C43 0010                  		cmpi.w	#$10,d3
0000D1D0 6500                       		bcs.s	loc_A4EA
0000D1D2                            
0000D1D2                            loc_A4E2:
0000D1D2 7201                       		moveq	#1,d1
0000D1D4 4E75                       		rts	
0000D1D6                            ; ===========================================================================
0000D1D6                            
0000D1D6                            loc_A4E6:
0000D1D6 7200                       		moveq	#0,d1
0000D1D8 4E75                       		rts	
0000D1DA                            ; ===========================================================================
0000D1DA                            
0000D1DA                            loc_A4EA:
0000D1DA 7200                       		moveq	#0,d1
0000D1DC 1228 0019                  		move.b	$19(a0),d1
0000D1E0 5841                       		addq.w	#4,d1
0000D1E2 3401                       		move.w	d1,d2
0000D1E4 D442                       		add.w	d2,d2
0000D1E6 D269 0008                  		add.w	8(a1),d1
0000D1EA 9268 0008                  		sub.w	8(a0),d1
0000D1EE 6BE2                       		bmi.s	loc_A4E2
0000D1F0 B242                       		cmp.w	d2,d1
0000D1F2 64DE                       		bcc.s	loc_A4E2
0000D1F4 72FF                       		moveq	#-1,d1
0000D1F6 4E75                       		rts	
0000D1F8                            ; End of function Obj26_SolidSides
0000D1F8                            
0000D1F8                            ; ===========================================================================
0000D1F8                            Ani_obj26:
0000D1F8                            	include "_anim\obj26.asm"
0000D1F8                            ; ---------------------------------------------------------------------------
0000D1F8                            ; Animation script - monitors
0000D1F8                            ; ---------------------------------------------------------------------------
0000D1F8 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000D1FE 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000D204 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000D20A 0000                       		dc.w byte_A582-Ani_obj26
0000D20C 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000D212 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000D21E 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000D22A 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000D236 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000D242 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000D24E 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000D25A 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000D266 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000D272 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000D27A                            		even
0000D27A                            		even
0000D27A                            
0000D27A                            ; ---------------------------------------------------------------------------
0000D27A                            ; Sprite mappings - monitors
0000D27A                            ; ---------------------------------------------------------------------------
0000D27A                            Map_obj26:
0000D27A                            	include "_maps\obj26.asm"
0000D27A                            ; ---------------------------------------------------------------------------
0000D27A                            ; Sprite mappings - monitors
0000D27A                            ; ---------------------------------------------------------------------------
0000D27A 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
0000D27E 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000D282 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000D286 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
0000D28A 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
0000D28E 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000D292 01                         byte_A5A2:	dc.b 1			; static monitor
0000D293 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000D298 02                         byte_A5A8:	dc.b 2			; static monitor
0000D299 F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000D29E EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000D2A3 02                         byte_A5B3:	dc.b 2			; static monitor
0000D2A4 F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000D2A9 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000D2AE 02                         byte_A5BE:	dc.b 2			; Eggman monitor
0000D2AF F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000D2B4 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000D2B9 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
0000D2BA F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000D2BF EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000D2C4 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000D2C5 F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000D2CA EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000D2CF 02                         byte_A5DF:	dc.b 2			; shield monitor
0000D2D0 F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000D2D5 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000D2DA 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
0000D2DB F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000D2E0 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000D2E5 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000D2E6 F505 0030 F8               		dc.b $F5, 5, 0,	$30, $F8
0000D2EB EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000D2F0 02                         byte_A600:	dc.b 2			; 'S' monitor
0000D2F1 F505 0034 F8               byte_A601:	dc.b $F5, 5, 0,	$34, $F8
0000D2F6 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000D2FB 02                         byte_A60B:	dc.b 2			; goggles monitor
0000D2FC F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000D301 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000D306 01                         byte_A616:	dc.b 1			; broken monitor
0000D307 FF0D 0038 F0               		dc.b $FF, $D, 0, $38, $F0
0000D30C                            		even
0000D30C                            		even
0000D30C                            
0000D30C                            ; ===========================================================================
0000D30C                            ; ---------------------------------------------------------------------------
0000D30C                            ; Object 0E - Sonic on the title screen
0000D30C                            ; ---------------------------------------------------------------------------
0000D30C                            
0000D30C                            Obj0E:					; XREF: Obj_Index
0000D30C 7000                       		moveq	#0,d0
0000D30E 1028 0024                  		move.b	$24(a0),d0
0000D312 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000D316 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000D31A                            ; ===========================================================================
0000D31A 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000D31C                            		;dc.w Obj0E_Delay-Obj0E_Index
0000D31C                            		;dc.w Obj0E_Move-Obj0E_Index
0000D31C 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000D31E                            ; ===========================================================================
0000D31E                            
0000D31E                            Obj0E_Main:				; XREF: Obj0E_Index
0000D31E 5428 0024                  		addq.b	#2,$24(a0)
0000D322 317C 00F0 0008             		move.w	#$F0,8(a0) ; load pos on X
0000D328 317C 0096 000A             		move.w	#$96,$A(a0); on Y
0000D32E 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000D336 317C 2300 0002             		move.w	#$2300,2(a0)
0000D33C 117C 0001 0018             		move.b	#1,$18(a0)
0000D342 4EB9 0000 0000                             jsr     Obj0E_Display
0000D348 117C 000E 001F             		move.b	#14,$1F(a0)	; set time delay to 0.5	seconds
0000D34E 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000D354 6100 0000                  		bsr.w	AnimateSprite
0000D358                            
0000D358                            ;Obj0E_Delay:				; XREF: Obj0E_Index
0000D358                            		;subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000D358                            		;bpl.s	Obj0E_Wait	; if time remains, branch
0000D358                            		;addq.b	#2,$24(a0)	; go to	next routine
0000D358                            		;bra.w	DisplaySprite
0000D358                            ; ===========================================================================
0000D358                            
0000D358                            ;Obj0E_Wait:				; XREF: Obj0E_Delay
0000D358                            		;rts	
0000D358                            ; ===========================================================================
0000D358                            
0000D358                            ;Obj0E_Move:				; XREF: Obj0E_Index
0000D358                            		;subq.w	#8,$A(a0)   ; move Sonic up
0000D358                            		;cmpi.w	#$96,$A(a0) ; Is Sonic exited on 96 X-Axis
0000D358                            		;bne.s	Obj0E_Display ; if yes, branch
0000D358                            		;addq.b	#2,$24(a0)
0000D358                            
0000D358                            Obj0E_Display:
0000D358 6000 0000                  		bra.w	DisplaySprite
0000D35C                            ; ===========================================================================
0000D35C 4E75                       		rts	
0000D35E                            ; ===========================================================================
0000D35E                            
0000D35E                            Obj0E_Animate:				; XREF: Obj0E_Index
0000D35E 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000D364 6100 0000                  		bsr.w	AnimateSprite
0000D368 6000 0000                  		bra.w	DisplaySprite
0000D36C                            ; ===========================================================================
0000D36C 4E75                       		rts	
0000D36E                            ; ===========================================================================
0000D36E                            ; ---------------------------------------------------------------------------
0000D36E                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000D36E                            ; ---------------------------------------------------------------------------
0000D36E                            
0000D36E                            Obj0F:					; XREF: Obj_Index
0000D36E 7000                       		moveq	#0,d0
0000D370 1028 0024                  		move.b	$24(a0),d0
0000D374 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000D378 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000D37C 6000 0000                  		bra.w	DisplaySprite
0000D380                            ; ===========================================================================
0000D380 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000D382 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000D384 0000                       		dc.w locret_A6F8-Obj0F_Index
0000D386                            ; ===========================================================================
0000D386                            
0000D386                            Obj0F_Main:				; XREF: Obj0F_Index
0000D386 5428 0024                  		addq.b	#2,$24(a0)
0000D38A 317C 00D0 0008             		move.w	#$D0,8(a0)
0000D390 317C 0130 000A             		move.w	#$130,$A(a0)
0000D396 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000D39E 317C 0200 0002             		move.w	#$200,2(a0)
0000D3A4 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000D3AA 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000D3AC 5428 0024                  		addq.b	#2,$24(a0)
0000D3B0 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000D3B6 6600                       		bne.s	locret_A6F8	; if not, branch
0000D3B8 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000D3BE 317C 0170 0008             		move.w	#$170,8(a0)
0000D3C4 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000D3CA                            
0000D3CA                            locret_A6F8:				; XREF: Obj0F_Index
0000D3CA 4E75                       		rts	
0000D3CC                            ; ===========================================================================
0000D3CC                            
0000D3CC                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000D3CC 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000D3D2 6000 0000                  		bra.w	AnimateSprite
0000D3D6                            ; ===========================================================================
0000D3D6                            Ani_obj0E:
0000D3D6                            	include "_anim\obj0E.asm"
0000D3D6                            ; ---------------------------------------------------------------------------
0000D3D6                            ; Animation script - Sonic on the title screen
0000D3D6                            ; ---------------------------------------------------------------------------
0000D3D6 0000                       		dc.w byte_A706-Ani_obj0E
0000D3D8 0101 0101 0101 0101 01FE+  byte_A706:	dc.b 1,	1, 1, 1, 1, 1, 1, 1, 1,	$FE, 1,	0
0000D3E4                            		even
0000D3E4                            		even
0000D3E4                            
0000D3E4                            Ani_obj0F:
0000D3E4                            	include "_anim\obj0F.asm"
0000D3E4                            ; ---------------------------------------------------------------------------
0000D3E4                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000D3E4                            ; ---------------------------------------------------------------------------
0000D3E4 0000                       		dc.w byte_A714-Ani_obj0F
0000D3E6 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000D3EA                            		even
0000D3EA                            		even
0000D3EA                            
0000D3EA                            ; ---------------------------------------------------------------------------
0000D3EA                            ; Subroutine to	animate	a sprite using an animation script
0000D3EA                            ; ---------------------------------------------------------------------------
0000D3EA                            
0000D3EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D3EA                            
0000D3EA                            
0000D3EA                            AnimateSprite:
0000D3EA 7000                       		moveq	#0,d0
0000D3EC 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000D3F0 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000D3F4 6700                       		beq.s	Anim_Run	; if not, branch
0000D3F6 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000D3FA 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000D400 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000D406                            
0000D406                            Anim_Run:
0000D406 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000D40A 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000D40C D040                       		add.w	d0,d0
0000D40E D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000D412 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000D416 7200                       		moveq	#0,d1
0000D418 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000D41C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000D420 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000D422                            
0000D422                            Anim_Next:
0000D422 1200                       		move.b	d0,d1
0000D424 0200 001F                  		andi.b	#$1F,d0
0000D428 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000D42C 1028 0022                  		move.b	$22(a0),d0
0000D430 E719                       		rol.b	#3,d1
0000D432 B101                       		eor.b	d0,d1
0000D434 0201 0003                  		andi.b	#3,d1
0000D438 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000D43E 8328 0001                  		or.b	d1,1(a0)
0000D442 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000D446                            
0000D446                            Anim_Wait:
0000D446 4E75                       		rts	
0000D448                            ; ===========================================================================
0000D448                            
0000D448                            Anim_End_FF:
0000D448 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000D44A 6600                       		bne.s	Anim_End_FE	; if not, branch
0000D44C 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000D452 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000D456 60CA                       		bra.s	Anim_Next
0000D458                            ; ===========================================================================
0000D458                            
0000D458                            Anim_End_FE:
0000D458 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000D45A 6600                       		bne.s	Anim_End_FD	; if not, branch
0000D45C 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000D460 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000D464 9200                       		sub.b	d0,d1
0000D466 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000D46A 60B6                       		bra.s	Anim_Next
0000D46C                            ; ===========================================================================
0000D46C                            
0000D46C                            Anim_End_FD:
0000D46C 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000D46E 6600                       		bne.s	Anim_End_FC	; if not, branch
0000D470 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000D476                            
0000D476                            Anim_End_FC:
0000D476 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000D478 6600                       		bne.s	Anim_End_FB	; if not, branch
0000D47A 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000D47E                            
0000D47E                            Anim_End_FB:
0000D47E 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000D480 6600                       		bne.s	Anim_End_FA	; if not, branch
0000D482 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000D488 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000D48C                            
0000D48C                            Anim_End_FA:
0000D48C 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000D48E 6600                       		bne.s	Anim_End	; if not, branch
0000D490 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000D494                            
0000D494                            Anim_End:
0000D494 4E75                       		rts	
0000D496                            ; End of function AnimateSprite
0000D496                            
0000D496                            ; ===========================================================================
0000D496                            ; ---------------------------------------------------------------------------
0000D496                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000D496                            ; ---------------------------------------------------------------------------
0000D496                            Map_obj0F:
0000D496                            	include "_maps\obj0F.asm"
0000D496                            ; ---------------------------------------------------------------------------
0000D496                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000D496                            ; ---------------------------------------------------------------------------
0000D496 0000                       		dc.w byte_A7CD-Map_obj0F
0000D498 0000                       		dc.w byte_A7CC-Map_obj0F
0000D49A 0000                       		dc.w byte_A7EB-Map_obj0F
0000D49C 0000                       		dc.w byte_A882-Map_obj0F
0000D49E 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000D49F 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000D4A4 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000D4A9 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000D4AE 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000D4B3 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000D4B8 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000D4BD 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000D4BE B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000D4C3 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000D4C8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000D4CD B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000D4D2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000D4D7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000D4DC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000D4E1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000D4E6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000D4EB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000D4F0 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000D4F5 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000D4FA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000D4FF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000D504 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000D509 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000D50E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000D513 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000D518 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000D51D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000D522 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000D527 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000D52C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000D531 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000D536 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000D53B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000D540 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000D545 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000D54A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000D54F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000D554 01                         byte_A882:	dc.b 1			; "TM"
0000D555 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000D55A                            		even
0000D55A                            		even
0000D55A                            
0000D55A                            ; ---------------------------------------------------------------------------
0000D55A                            ; Sprite mappings - Sonic on the title screen
0000D55A                            ; ---------------------------------------------------------------------------
0000D55A                            Map_obj0E:
0000D55A                            	include "_maps\obj0E.asm"
0000D55A                            ; ---------------------------------------------------------------------------
0000D55A                            ; Sprite mappings - Sonic on the title screen
0000D55A                            ; ---------------------------------------------------------------------------
0000D55A 0000                       		dc.w byte_A898-Map_obj0E
0000D55C 0000                       		dc.w byte_A8CB-Map_obj0E
0000D55E 0000                       		dc.w byte_A917-Map_obj0E
0000D560 0000                       		dc.w byte_A96D-Map_obj0E
0000D562 0000                       		dc.w byte_A9AF-Map_obj0E
0000D564 0000                       		dc.w byte_A9E7-Map_obj0E
0000D566 0000                       		dc.w byte_AA47-Map_obj0E
0000D568 0000                       		dc.w byte_AAB1-Map_obj0E
0000D56A 0A                         byte_A898:	dc.b $A
0000D56B 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000D570 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000D575 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000D57A 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000D57F 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000D584 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000D589 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000D58E 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000D593 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000D598 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000D59D 0F                         byte_A8CB:	dc.b $F
0000D59E 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000D5A3 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000D5A8 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000D5AD 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000D5B2 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000D5B7 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000D5BC 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000D5C1 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000D5C6 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000D5CB 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000D5D0 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000D5D5 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000D5DA 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000D5DF 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000D5E4 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000D5E9 11                         byte_A917:	dc.b $11
0000D5EA 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000D5EF 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000D5F4 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000D5F9 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000D5FE 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000D603 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000D608 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000D60D 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000D612 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000D617 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000D61C 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000D621 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000D626 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000D62B 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000D630 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000D635 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000D63A 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000D63F 0D                         byte_A96D:	dc.b $D
0000D640 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000D645 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000D64A 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000D64F 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000D654 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000D659 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000D65E 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000D663 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000D668 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000D66D 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000D672 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000D677 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000D67C 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000D681 0B                         byte_A9AF:	dc.b $B
0000D682 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000D687 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000D68C 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000D691 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000D696 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000D69B 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000D6A0 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000D6A5 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000D6AA 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000D6AF 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000D6B4 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000D6B9 13                         byte_A9E7:	dc.b $13
0000D6BA 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000D6BF 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000D6C4 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000D6C9 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000D6CE 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000D6D3 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000D6D8 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000D6DD 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000D6E2 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000D6E7 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000D6EC 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000D6F1 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000D6F6 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000D6FB 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000D700 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000D705 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000D70A 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000D70F 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000D714 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000D719 15                         byte_AA47:	dc.b $15
0000D71A 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000D71F 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000D724 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000D729 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000D72E 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000D733 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000D738 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000D73D 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000D742 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000D747 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000D74C 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000D751 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000D756 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000D75B 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000D760 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000D765 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000D76A 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000D76F 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000D774 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000D779 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000D77E 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000D783 16                         byte_AAB1:	dc.b $16
0000D784 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000D789 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000D78E 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000D793 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000D798 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000D79D 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000D7A2 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000D7A7 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000D7AC 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000D7B1 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000D7B6 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000D7BB 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000D7C0 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000D7C5 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000D7CA 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000D7CF 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000D7D4 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000D7D9 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000D7DE 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000D7E3 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000D7E8 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000D7ED 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000D7F2                            		even
0000D7F2                            		even
0000D7F2                            
0000D7F2                            ; ===========================================================================
0000D7F2                            ; ---------------------------------------------------------------------------
0000D7F2                            ; Object 2B - Splats enemy (GHZ/SLZ) / Chemicals (SBZ)
0000D7F2                            ; ---------------------------------------------------------------------------
0000D7F2                            
0000D7F2                            Obj2B:					; XREF: Obj_Index
0000D7F2 7000                       		moveq	#0,d0
0000D7F4 1028 0024                  		move.b	$24(a0),d0
0000D7F8 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000D7FC 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000D800 6000 0000                  		bra.w	MarkObjGone
0000D804                            ; ===========================================================================
0000D804 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000D806 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000D808                            ; ===========================================================================
0000D808                            
0000D808                            Obj2B_Main:				; XREF: Obj2B_Index
0000D808 5428 0024                  		addq.b	#2,$24(a0)
0000D80C 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000D814 317C 047B 0002             		move.w	#$47B,2(a0)
0000D81A 0C38 0003 FE10                             cmpi.b    #3,($FFFFFE10).w   
0000D820 6700                                       beq.s    Obj2B_SLZTiles 
0000D822 0C38 0005 FE10                             cmpi.b    #5,($FFFFFE10).w   
0000D828 6700                                       beq.s    Obj2B_SBZTiles       
0000D82A 6000                                       bra.s    Obj2B_MCont
0000D82C                            
0000D82C                            Obj2B_SLZTiles:
0000D82C 317C 23A0 0002                             move.w    #(1<<13)+($7400/$20),2(a0)    ; ïàëèòðà è òàéëû äëÿ GHZ
0000D832 6000                                       bra.s     Obj2B_MCont
0000D834                            
0000D834                            Obj2B_SBZTiles:
0000D834 317C 23B5 0002                             move.w    #(1<<13)+($76A0/$20),2(a0)
0000D83A                            
0000D83A                            Obj2B_MCont:
0000D83A 117C 0004 0001             		move.b	#4,1(a0)
0000D840 117C 00FC 0018             		move.b	#-4,$18(a0)
0000D846 0C38 0005 FE10                             cmpi.b    #5,($FFFFFE10).w   
0000D84C 6700                                       beq.s    Obj2B_Megamak  
0000D84E 117C 0005 0020             		move.b	#5,$20(a0)
0000D854 117C 0000 002A             		move.b	#0,$2A(a0);
0000D85A 6000                                       bra.s   Obj2B_mMmCont
0000D85C                            
0000D85C                            Obj2B_Megamak:  
0000D85C 117C 009A 0020             		move.b	#$9A,$20(a0)
0000D862                                            
0000D862                            Obj2B_mMmCont:
0000D862 117C 0010 0019             		move.b	#$10,$19(a0)
0000D868 0C28 0001 0028                             cmpi.b  #1,$28(a0)
0000D86E 6700                                       beq.s   Obj2B_Move1
0000D870 0C28 0002 0028                             cmpi.b  #2,$28(a0)
0000D876 6700                                       beq.s   Obj2B_Move2
0000D878 0C28 0003 0028                             cmpi.b  #3,$28(a0)
0000D87E 6700                                       beq.s   Obj2B_Move2
0000D880 6000 0000                                  bra.w   Obj2B_CheckSBZ
0000D884                            
0000D884                            Obj2B_Move1:
0000D884 317C FC00 0010                             move.w	#-$400,$10(a0)	; move splats to the left
0000D88A 0828 0000 0022                             btst	#0,$22(a0)	; is splats facing right?
0000D890 6700                                       beq.s	Obj2B_CheckSBZ	; if yes, branch
0000D892 4468 0010                  		neg.w	$10(a0)		; move splats to the right
0000D896 6000                                       bra.s   Obj2B_CheckSBZ
0000D898                            
0000D898                            Obj2B_Move2:
0000D898 317C FF00 0010                             move.w	#-$100,$10(a0)	; move splats to the left
0000D89E 0828 0000 0022                             btst	#0,$22(a0)	; is splats facing right?
0000D8A4 6700                                       beq.s	Obj2B_CheckSBZ	; if yes, branch
0000D8A6 4468 0010                  		neg.w	$10(a0)		; move splats to the right
0000D8AA                            
0000D8AA                            Obj2B_CheckSBZ:
0000D8AA 0C38 0005 FE10                             cmpi.b    #5,($FFFFFE10).w   
0000D8B0 6600                                       bne.s    Obj2B_Mcont2  
0000D8B2 317C FB00 0012                             move.w	 #-$500,$12(a0)	; set vertical speed
0000D8B8 3168 000C 0030             		move.w	 $C(a0),$30(a0)
0000D8BE 6000                                       bra.s    Obj2B_ChgSpeed
0000D8C0                            
0000D8C0                            Obj2B_Mcont2:
0000D8C0 317C FD00 0012                             move.w	#-$300,$12(a0)	; set vertical speed
0000D8C6 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000D8CC                            
0000D8CC                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000D8CC 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000D8D2 6100 FB16                  		bsr.w	AnimateSprite
0000D8D6 6100 0000                  		bsr.w	SpeedToPos
0000D8DA 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000D8E0 3028 0030                  		move.w	$30(a0),d0
0000D8E4 B068 000C                  		cmp.w	$C(a0),d0
0000D8E8 6400                       		bcc.s	Obj2B_ChgAni
0000D8EA 3140 000C                  		move.w	d0,$C(a0)
0000D8EE 0C38 0005 FE10                             cmpi.b    #5,($FFFFFE10).w   
0000D8F4 6700                                       beq.s    Obj2B_SBZSPEED2
0000D8F6 0C28 0002 0028                             cmpi.b  #2,$28(a0)
0000D8FC 6700                                       beq.s   Obj2B_Subtype2_ChgSpeed
0000D8FE 0C28 0003 0028                             cmpi.b  #3,$28(a0)
0000D904 6700                                       beq.s   Obj2B_Subtype3_ChgSpeed
0000D906 317C FD00 0012                             move.w	#-$300,$12(a0)	; set vertical speed
0000D90C 6000                                       bra.s   Obj2B_ChgAni
0000D90E                            
0000D90E                            Obj2B_Subtype2_ChgSpeed:
0000D90E 317C FD00 0012                             move.w	#-$300,$12(a0)	; set vertical speed
0000D914 5228 002A                  		addq.b	#1,$2A(a0)
0000D918 0C28 0001 002A             		cmpi.b  #1,$2A(a0)
0000D91E 6600 0000                   		bne.w	Obj2B_ChgAni
0000D922 117C 0000 002A             		move.b	#0,$2A(a0)
0000D928 4468 0010                  		neg.w	$10(a0)		; 
0000D92C 0868 0000 0022                             bchg	#0,$22(a0)	; reverse direction
0000D932 6000 0000                                  bra.w   Obj2B_ChgAni
0000D936                            
0000D936                            Obj2B_Subtype3_ChgSpeed:
0000D936 317C FD00 0012                             move.w	#-$300,$12(a0)	; set vertical speed
0000D93C 5228 002A                  		addq.b	#1,$2A(a0)
0000D940 0C28 0003 002A             		cmpi.b  #3,$2A(a0)
0000D946 6600 0000                   		bne.w	Obj2B_ChgAni
0000D94A 117C 0000 002A             		move.b	#0,$2A(a0)
0000D950 4468 0010                  		neg.w	$10(a0)		; 
0000D954 0868 0000 0022                             bchg	#0,$22(a0)	; reverse direction
0000D95A 6000                                       bra.s   Obj2B_ChgAni
0000D95C                            
0000D95C                            Obj2B_SBZSPEED2:
0000D95C 317C FB00 0012                             move.w  #-$500,$12(a0)
0000D962                            
0000D962                            Obj2B_ChgAni:
0000D962 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000D968 0440 00C0                  		subi.w	#$C0,d0
0000D96C B068 000C                  		cmp.w	$C(a0),d0
0000D970 6400                       		bcc.s	locret_ABB6
0000D972 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000D978 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000D97C 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000D97E 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000D984                            
0000D984                            locret_ABB6:
0000D984 4E75                       		rts	
0000D986                            ; ===========================================================================
0000D986                            Ani_obj2B:
0000D986                            	include "_anim\obj2B.asm"
0000D986                            ; ---------------------------------------------------------------------------
0000D986                            ; Animation script - Chopper enemy
0000D986                            ; ---------------------------------------------------------------------------
0000D986 0000                       		dc.w byte_ABBE-Ani_obj2B
0000D988 0000                       		dc.w byte_ABC2-Ani_obj2B
0000D98A 0000                       		dc.w byte_ABC6-Ani_obj2B
0000D98C 0701 01FF                  byte_ABBE:	dc.b 7,	1, 1, $FF
0000D990 0300 00FF                  byte_ABC2:	dc.b 3,	0, 0, $FF
0000D994 0700 00FF                  byte_ABC6:	dc.b 7,	0, 0, $FF
0000D998                            		even
0000D998                            		even
0000D998                            
0000D998                            ; ---------------------------------------------------------------------------
0000D998                            ; Sprite mappings - Chopper enemy (GHZ)
0000D998                            ; ---------------------------------------------------------------------------
0000D998                            Map_obj2B:
0000D998                            	include "_maps\obj2B.asm"
0000D998                            ; --------------------------------------------------------------------------------
0000D998                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D998                            ; --------------------------------------------------------------------------------
0000D998                            
0000D998                            SME_ardsS:	
0000D998 0000 0000                  		dc.w SME_ardsS_4-SME_ardsS, SME_ardsS_F-SME_ardsS	
0000D99C 02                         SME_ardsS_4:	dc.b 2	
0000D99D E00B 0000 F8               		dc.b $E0, $B, 0, 0, $F8	
0000D9A2 0008 000C F8               		dc.b 0, 8, 0, $C, $F8	
0000D9A7 02                         SME_ardsS_F:	dc.b 2	
0000D9A8 E00B 000F F8               		dc.b $E0, $B, 0, $F, $F8	
0000D9AD 0004 001B 00               		dc.b 0, 4, 0, $1B, 0	
0000D9B2                            		even
0000D9B2                            		even
0000D9B2                            
0000D9B2                            ; ===========================================================================
0000D9B2                            ; ---------------------------------------------------------------------------
0000D9B2                            ; Object 2C - Jaws enemy (LZ)
0000D9B2                            ; ---------------------------------------------------------------------------
0000D9B2                            
0000D9B2                            Obj2C:					; XREF: Obj_Index
0000D9B2 7000                       		moveq	#0,d0
0000D9B4 1028 0024                  		move.b	$24(a0),d0
0000D9B8 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000D9BC 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000D9C0                            ; ===========================================================================
0000D9C0 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000D9C2 0000                       		dc.w Obj2C_Ticktock-Obj2C_Index
0000D9C4                            ; ===========================================================================
0000D9C4                            
0000D9C4                            Obj2C_Main:				; XREF: Obj2C_Index
0000D9C4 5428 0024                  		addq.b	#2,$24(a0)
0000D9C8 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000D9D0 317C 2486 0002             		move.w	#$2486,2(a0)
0000D9D6 0028 0004 0001             		ori.b	#4,1(a0)
0000D9DC 117C 008B 0020             		move.b	#$8B,$20(a0)
0000D9E2 117C 0004 0018             		move.b	#4,$18(a0)
0000D9E8 117C 0010 0019             		move.b	#$10,$19(a0)
0000D9EE 7000                       		moveq	#0,d0
0000D9F0 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000D9F4 C0FC 003C                  		mulu.w	#60,d0		; multiply d0 by 64
0000D9F8 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000D9FC 3140 0032                  		move.w	d0,$32(a0)
0000DA00 317C FF00 0010             		move.w	#-$100,$10(a0)	; move Jaws to the left
0000DA06 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000DA0C 6700 0000                  		beq.w	Obj2C_Animate	; if yes, branch
0000DA10 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000DA14                            
0000DA14                            Obj2C_Ticktock:				; XREF: Obj2C_Index
0000DA14 6100 0000                  		bsr.w	ChkObjOnScreen
0000DA18 6600 0000                  		bne.w	Obj2C_Animate
0000DA1C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000DA20 6A00 0000                  		bpl.w	Obj2C_Animate	; if time remains, branch
0000DA24                            
0000DA24                            Obj2C_Mis1:
0000DA24 4EB9 0000 0000             		jsr	SingleObjLoad
0000DA2A 6600 0000                  		bne.w   Obj2C_Mis2
0000DA2E 12BC 0020                  		move.b	#$20,0(a1)	; load missile object
0000DA32 3368 0008 0008             		move.w	8(a0),8(a1)
0000DA38 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DA3E 337C 0200 0010                             move.w 	#$200,$10(a1);
0000DA44 337C 0200 0012                             move.w 	#$200,$12(a1);
0000DA4A                            
0000DA4A                            Obj2C_Mis2:
0000DA4A 4EB9 0000 0000             		jsr	SingleObjLoad
0000DA50 6600 0000                  		bne.w   Obj2C_Mis3
0000DA54 12BC 0020                  		move.b	#$20,0(a1)	; load missile object
0000DA58 3368 0008 0008             		move.w	8(a0),8(a1)
0000DA5E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DA64 337C FE00 0010                             move.w 	#-$200,$10(a1);
0000DA6A 337C 0200 0012                             move.w 	#$200,$12(a1);
0000DA70                            
0000DA70                            
0000DA70                            Obj2C_Mis3:
0000DA70 4EB9 0000 0000             		jsr	SingleObjLoad
0000DA76 6600 0000                  		bne.w   Obj2C_Mis4
0000DA7A 12BC 0020                  		move.b	#$20,0(a1)	; load missile object
0000DA7E 3368 0008 0008             		move.w	8(a0),8(a1)
0000DA84 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DA8A 337C 0200 0010                             move.w 	#$200,$10(a1);
0000DA90 337C FE00 0012                             move.w 	#-$200,$12(a1);
0000DA96                            
0000DA96                            
0000DA96                            Obj2C_Mis4:
0000DA96 4EB9 0000 0000             		jsr	SingleObjLoad
0000DA9C 6600 0000                  		bne.w   Obj2C_Explode
0000DAA0 12BC 0020                  		move.b	#$20,0(a1)	; load missile object
0000DAA4 3368 0008 0008             		move.w	8(a0),8(a1)
0000DAAA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DAB0 337C FE00 0010                             move.w 	#-$200,$10(a1);
0000DAB6 337C FE00 0012                             move.w 	#-$200,$12(a1);
0000DABC                            
0000DABC                            Obj2C_Explode:
0000DABC 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	(Obj3F)
0000DAC0 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0000DAC6 4EFA DEB0                  		jmp	Obj3F		; jump to explosion code
0000DACA                            
0000DACA                            Obj2C_Animate:
0000DACA 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000DAD0 6100 F918                  		bsr.w	AnimateSprite
0000DAD4 6100 0000                  		bsr.w	SpeedToPos
0000DAD8 6000 0000                  		bra.w	MarkObjGone
0000DADC                            ; ===========================================================================
0000DADC                            Ani_obj2C:
0000DADC                            	include "_anim\obj2C.asm"
0000DADC                            ; ---------------------------------------------------------------------------
0000DADC                            ; Animation script - Jaws enemy
0000DADC                            ; ---------------------------------------------------------------------------
0000DADC 0000                       		dc.w byte_AC6A-Ani_obj2C
0000DADE 0200 0001 0102 0203 0302+  byte_AC6A:	dc.b 2,	0, 0, 1, 1, 2, 2, 3, 3, 2, 2, 1, 1, $FF
0000DAEC                            		even
0000DAEC                            		even
0000DAEC                            
0000DAEC                            ; ---------------------------------------------------------------------------
0000DAEC                            ; Sprite mappings - Jaws enemy (LZ)
0000DAEC                            ; ---------------------------------------------------------------------------
0000DAEC                            Map_obj2C:
0000DAEC                            	include "_maps\obj2C.asm"
0000DAEC                            ; --------------------------------------------------------------------------------
0000DAEC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000DAEC                            ; --------------------------------------------------------------------------------
0000DAEC                            
0000DAEC                            SME_NlZ1j:	
0000DAEC 0000 0000                  		dc.w SME_NlZ1j_8-SME_NlZ1j, SME_NlZ1j_1D-SME_NlZ1j	
0000DAF0 0000 0000                  		dc.w SME_NlZ1j_23-SME_NlZ1j, SME_NlZ1j_38-SME_NlZ1j	
0000DAF4 04                         SME_NlZ1j_8:	dc.b 4	
0000DAF5 E00E 0000 F8               		dc.b $E0, $E, 0, 0, $F8	
0000DAFA E900 0019 18               		dc.b $E9, 0, 0, $19, $18	
0000DAFF F708 001D 00               		dc.b $F7, 8, 0, $1D, 0	
0000DB04 F700 001C F8               		dc.b $F7, 0, 0, $1C, $F8	
0000DB09 01                         SME_NlZ1j_1D:	dc.b 1	
0000DB0A E40E 000C FA               		dc.b $E4, $E, 0, $C, $FA	
0000DB0F 04                         SME_NlZ1j_23:	dc.b 4	
0000DB10 E20E 0000 F8               		dc.b $E2, $E, 0, 0, $F8	
0000DB15 EB00 0019 18               		dc.b $EB, 0, 0, $19, $18	
0000DB1A F908 001D 00               		dc.b $F9, 8, 0, $1D, 0	
0000DB1F F900 001C F8               		dc.b $F9, 0, 0, $1C, $F8	
0000DB24 01                         SME_NlZ1j_38:	dc.b 1	
0000DB25 E60E 000C FA               		dc.b $E6, $E, 0, $C, $FA	
0000DB2A                            		even
0000DB2A                            		even
0000DB2A                            ; ===========================================================================
0000DB2A                            ; ---------------------------------------------------------------------------
0000DB2A                            ; Object 2D - Grounder enemy (LZ)
0000DB2A                            ; ---------------------------------------------------------------------------
0000DB2A                            
0000DB2A                            Obj2D:					; XREF: Obj_Index
0000DB2A 7000                       		moveq	#0,d0
0000DB2C 1028 0024                  		move.b	$24(a0),d0
0000DB30 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000DB34 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000DB38                            ; ===========================================================================
0000DB38 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000DB3A 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000DB3C                            ; ===========================================================================
0000DB3C                            
0000DB3C                            Obj2D_Main:				; XREF: Obj2D_Index
0000DB3C                            		;addq.b	#2,$24(a0)
0000DB3C 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000DB44 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000DB4A                            		;ori.b	#4,1(a0)
0000DB4A 117C 0004 0001                             move.b	#4,1(a0)
0000DB50 117C 0004 0018             		move.b	#4,$18(a0)
0000DB56 117C 0014 0019             		move.b	#$14,$19(a0)
0000DB5C 117C 0013 0016             		move.b	#$13,$16(a0)
0000DB62 117C 0008 0017             		move.b	#8,$17(a0)
0000DB68 117C 000C 0020             		move.b	#$C,$20(a0)
0000DB6E                            		;addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000DB6E 4EB9 0000 0000                             jsr	ObjectFall
0000DB74 4EB9 0000 0000             		jsr	ObjHitFloor
0000DB7A 4A41                       		tst.w	d1		; is object above the ground?
0000DB7C 6A00                       		bpl.s	locret_FaCkU	; if yes, branch
0000DB7E D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000DB82 317C 0000 0012             		move.w	#0,$12(a0)
0000DB88 5428 0024                  		addq.b	#2,$24(a0)
0000DB8C 0868 0000 0022             		bchg	#0,$22(a0)	; change object's orientation
0000DB92 117C 0002 001C                             move.b	#2,$1C(a0)
0000DB98                            
0000DB98                            locret_FaCkU:
0000DB98 4E75                                       rts
0000DB9A                            
0000DB9A                            Obj2D_Action:				; XREF: Obj2D_Index
0000DB9A 7000                       		moveq	#0,d0
0000DB9C 1028 0025                  		move.b	$25(a0),d0
0000DBA0 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000DBA4 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000DBA8 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000DBAE 6100 F83A                  		bsr.w	AnimateSprite
0000DBB2 6000 0000                  		bra.w	MarkObjGone
0000DBB6                            ; ===========================================================================
0000DBB6 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000DBB8 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000DBBA                            		;dc.w Obj2D_Jump-Obj2D_Index2
0000DBBA                            		;dc.w Obj2D_ChkSonic-Obj2D_Index2
0000DBBA                            ; ===========================================================================
0000DBBA                            
0000DBBA                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000DBBA 5368 0030                  		subq.w	#1,$30(a0)      ; subtract 1 from time delay
0000DBBE 6A00                       		bpl.s	locret_AD42     ; if time remains, branch
0000DBC0 5428 0025                  		addq.b	#2,$25(a0)      ; run obj2d_move
0000DBC4 317C 0000 0030             		move.w	#0,$30(a0)    ; set time delay
0000DBCA 317C 0100 0010             		move.w	#$100,$10(a0)    ; move him
0000DBD0 117C 0001 001C             		move.b	#1,$1C(a0)      ; use moving ani
0000DBD6 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000DBDC 6700                       		beq.s	locret_AD42
0000DBDE 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000DBE2                            
0000DBE2                            locret_AD42:
0000DBE2 4E75                       		rts	
0000DBE4                            ; ===========================================================================
0000DBE4                            
0000DBE4                            Obj2D_Move:				; XREF: Obj2D_Index2
0000DBE4 6100 0000                                  bsr.w	SpeedToPos
0000DBE8 4EB9 0000 0000             		jsr	ObjHitFloor
0000DBEE 0C41 FFF8                  		cmpi.w	#-8,d1
0000DBF2 6D00                       		blt.s	Obj2D_Pause
0000DBF4 0C41 000C                  		cmpi.w	#$C,d1
0000DBF8 6C00                       		bge.s	Obj2D_Pause
0000DBFA D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000DBFE 6100 0000                                  bsr.w	Obj50_ChkWall
0000DC02 6600                                       bne.s   Obj2D_Pause
0000DC04 4E75                       		rts
0000DC06                            
0000DC06                            Obj2D_Pause:
0000DC06 5528 0025                                  subq.b	#2,$25(a0)
0000DC0A 317C 001D 0030             		move.w	#29,$30(a0)	; set pause time to 1/2 second
0000DC10 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000DC16 117C 0000 001C             		move.b	#0,$1C(a0)
0000DC1C 4E75                       		rts
0000DC1E                            
0000DC1E                            ;loc_AD6A:
0000DC1E                            		;jsr	ObjHitFloor2
0000DC1E                            		;cmpi.w	#$C,d1
0000DC1E                            		;bge.s	loc_AD84
0000DC1E                            		;rts	
0000DC1E                            ; ===========================================================================
0000DC1E                            
0000DC1E                            ;loc_AD78:				; XREF: Obj2D_Move
0000DC1E                            		;jsr	ObjHitFloor
0000DC1E                            		;add.w	d1,$C(a0)
0000DC1E                            		;rts	
0000DC1E                            ; ===========================================================================
0000DC1E                            
0000DC1E                            ;loc_AD84:				; XREF: Obj2D_Move
0000DC1E                            		;btst	#2,($FFFFFE0F).w
0000DC1E                            		;beq.s	loc_ADA4
0000DC1E                            		;subq.b	#2,$25(a0)
0000DC1E                            		;move.w	#$3B,$30(a0)
0000DC1E                            		;move.w	#0,$10(a0)
0000DC1E                            		;move.b	#0,$1C(a0)
0000DC1E                            		;rts	
0000DC1E                            ; ===========================================================================
0000DC1E                            
0000DC1E                            ;loc_ADA4:
0000DC1E                            		;addq.b	#2,$25(a0)
0000DC1E                            		;move.w	#-$400,$12(a0)
0000DC1E                            		;move.b	#2,$1C(a0)
0000DC1E                                            ;bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000DC1E                                            ;beq.s   locret_ADF0
0000DC1E                                            ;neg.w   $10(a0)
0000DC1E                            		;rts	
0000DC1E                            ; ===========================================================================
0000DC1E                            
0000DC1E                            ;Obj2D_Jump:				; XREF: Obj2D_Index2
0000DC1E                            		;bsr.w	SpeedToPos
0000DC1E                            		;addi.w	#$18,$12(a0)
0000DC1E                            		;bmi.s	locret_ADF0
0000DC1E                            		;move.b	#3,$1C(a0)
0000DC1E                            		;jsr	ObjHitFloor
0000DC1E                            		;tst.w	d1
0000DC1E                            		;bpl.s	locret_ADF0
0000DC1E                            		;add.w	d1,$C(a0)
0000DC1E                            		;move.w	#0,$12(a0)
0000DC1E                            		;move.b	#1,$1C(a0)
0000DC1E                            		;move.w	#$FF,$30(a0)
0000DC1E                            		;subq.b	#2,$25(a0)
0000DC1E                            		;bsr.w	Obj2D_ChkSonic2
0000DC1E                            
0000DC1E                            ;locret_ADF0:
0000DC1E                            		;rts	
0000DC1E                            ; ===========================================================================
0000DC1E                            
0000DC1E                            ;Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000DC1E                            		;move.w	#$60,d2
0000DC1E                            		;bsr.w	Obj2D_ChkSonic2
0000DC1E                            		;bcc.s	locret_AE20
0000DC1E                            		;move.w	($FFFFD00C).w,d0
0000DC1E                            		;sub.w	$C(a0),d0
0000DC1E                            		;bcc.s	locret_AE20
0000DC1E                            		;cmpi.w	#-$80,d0
0000DC1E                            		;bcs.s	locret_AE20
0000DC1E 4A78 FE08                  		tst.w	($FFFFFE08).w
0000DC22                            		;bne.s	locret_AE20
0000DC22                            		;subq.b	#2,$25(a0)
0000DC22                            		;move.w	d1,$10(a0)
0000DC22                            		;move.w	#-$400,$12(a0)
0000DC22                            
0000DC22                            ;locret_AE20:
0000DC22                            		;rts	
0000DC22                            
0000DC22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC22                            
0000DC22                            
0000DC22                            ;Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000DC22                            		;move.w	#$80,d1
0000DC22                            		;bset	#0,$22(a0)
0000DC22                            		;move.w	($FFFFD008).w,d0
0000DC22                            		;sub.w	8(a0),d0
0000DC22                            		;bcc.s	loc_AE40
0000DC22                            		;neg.w	d0
0000DC22                            		;neg.w	d1
0000DC22                            		;bclr	#0,$22(a0)
0000DC22                            
0000DC22                            ;loc_AE40:
0000DC22                            		;cmp.w	d2,d0
0000DC22                            		;rts	
0000DC22                            ; End of function Obj2D_ChkSonic2
0000DC22                            
0000DC22                            ; ===========================================================================
0000DC22                            Ani_obj2D:
0000DC22                            	include "_anim\obj2D.asm"
0000DC22                            ; ---------------------------------------------------------------------------
0000DC22                            ; Animation script - Burrobot enemy
0000DC22                            ; ---------------------------------------------------------------------------
0000DC22 0000                       		dc.w byte_AE4C-Ani_obj2D
0000DC24 0000                       		dc.w byte_AE50-Ani_obj2D
0000DC26 0000                       		dc.w byte_AE54-Ani_obj2D
0000DC28 0000                       		dc.w byte_AE58-Ani_obj2D
0000DC2A 0101 01FF                  byte_AE4C:	dc.b 1,	1, 1, $FF
0000DC2E 0100 0100 FF               byte_AE50:	dc.b 1,	0, 1, 0, $FF
0000DC33 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000DC37 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000DC3A                            		even
0000DC3A                            		even
0000DC3A                            
0000DC3A                            ; ---------------------------------------------------------------------------
0000DC3A                            ; Sprite mappings - Burrobot enemy (LZ)
0000DC3A                            ; ---------------------------------------------------------------------------
0000DC3A                            Map_obj2D:
0000DC3A                            	include "_maps\obj2D.asm"
0000DC3A                            ; --------------------------------------------------------------------------------
0000DC3A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000DC3A                            ; --------------------------------------------------------------------------------
0000DC3A                            
0000DC3A                            SME_8N0jF:	
0000DC3A 0000 0000                  		dc.w SME_8N0jF_E-SME_8N0jF, SME_8N0jF_28-SME_8N0jF	
0000DC3E 0000 0000                  		dc.w SME_8N0jF_42-SME_8N0jF, SME_8N0jF_4D-SME_8N0jF	
0000DC42 0000 0000                  		dc.w SME_8N0jF_58-SME_8N0jF, SME_8N0jF_63-SME_8N0jF	
0000DC46 0000                       		dc.w SME_8N0jF_6E-SME_8N0jF	
0000DC48 05                         SME_8N0jF_E:	dc.b 5	
0000DC49 EC0A 0000 E8               		dc.b $EC, $A, 0, 0, $E8	
0000DC4E 0409 0009 EC               		dc.b 4, 9, 0, 9, $EC	
0000DC53 FC02 0021 E8               		dc.b $FC, 2, 0, $21, $E8	
0000DC58 EC02 0024 00               		dc.b $EC, 2, 0, $24, 0	
0000DC5D 0401 0027 00               		dc.b 4, 1, 0, $27, 0	
0000DC62 05                         SME_8N0jF_28:	dc.b 5	
0000DC63 EC0A 000F E8               		dc.b $EC, $A, 0, $F, $E8	
0000DC68 0409 0018 EC               		dc.b 4, 9, 0, $18, $EC	
0000DC6D FB02 002A E8               		dc.b $FB, 2, 0, $2A, $E8	
0000DC72 FC02 002D 00               		dc.b $FC, 2, 0, $2D, 0	
0000DC77 EC01 0030 00               		dc.b $EC, 1, 0, $30, 0	
0000DC7C 02                         SME_8N0jF_42:	dc.b 2	
0000DC7D E80A 001E EE               		dc.b $E8, $A, 0, $1E, $EE	
0000DC82 000A 0027 EE               		dc.b 0, $A, 0, $27, $EE	
0000DC87 02                         SME_8N0jF_4D:	dc.b 2	
0000DC88 E80A 0030 EC               		dc.b $E8, $A, 0, $30, $EC	
0000DC8D 000A 0039 EC               		dc.b 0, $A, 0, $39, $EC	
0000DC92 02                         SME_8N0jF_58:	dc.b 2	
0000DC93 E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0	
0000DC98 000A 0042 F4               		dc.b 0, $A, 0, $42, $F4	
0000DC9D 02                         SME_8N0jF_63:	dc.b 2	
0000DC9E F406 004B E8               		dc.b $F4, 6, 0, $4B, $E8	
0000DCA3 F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8	
0000DCA8 02                         SME_8N0jF_6E:	dc.b 2	
0000DCA9 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0	
0000DCAE 0409 0009 F4               		dc.b 4, 9, 0, 9, $F4	
0000DCB4 00                         		even
0000DCB4 00                         		even
0000DCB4                            
0000DCB4                            ; ===========================================================================
0000DCB4                            ; ---------------------------------------------------------------------------
0000DCB4                            ; Object 2F - large moving platforms (MZ)
0000DCB4                            ; ---------------------------------------------------------------------------
0000DCB4                            
0000DCB4                            Obj2F:					; XREF: Obj_Index
0000DCB4 7000                       		moveq	#0,d0
0000DCB6 1028 0024                  		move.b	$24(a0),d0
0000DCBA 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000DCBE 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000DCC2                            ; ===========================================================================
0000DCC2 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000DCC4 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000DCC6                            
0000DCC6 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000DCC8 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000DCCA 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000DCCC 0140                       		dc.b 1,	$40
0000DCCE 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000DCD0 0220                       		dc.b 2,	$20
0000DCD2                            ; ===========================================================================
0000DCD2                            
0000DCD2                            Obj2F_Main:				; XREF: Obj2F_Index
0000DCD2 5428 0024                  		addq.b	#2,$24(a0)
0000DCD6 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000DCDE 317C C000 0002             		move.w	#$C000,2(a0)
0000DCE4 117C 0004 0001             		move.b	#4,1(a0)
0000DCEA 117C 0005 0018             		move.b	#5,$18(a0)
0000DCF0 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000DCF6 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000DCFC 7000                       		moveq	#0,d0
0000DCFE 1028 0028                  		move.b	$28(a0),d0
0000DD02 E448                       		lsr.w	#2,d0
0000DD04 0240 001C                  		andi.w	#$1C,d0
0000DD08 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000DD0C 3019                       		move.w	(a1)+,d0
0000DD0E 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000DD12 214A 0030                  		move.l	a2,$30(a0)
0000DD16 1159 001A                  		move.b	(a1)+,$1A(a0)
0000DD1A 1151 0019                  		move.b	(a1),$19(a0)
0000DD1E 0228 000F 0028             		andi.b	#$F,$28(a0)
0000DD24 117C 0040 0016             		move.b	#$40,$16(a0)
0000DD2A 08E8 0004 0001             		bset	#4,1(a0)
0000DD30                            
0000DD30                            Obj2F_Action:				; XREF: Obj2F_Index
0000DD30 6100 0000                  		bsr.w	Obj2F_Types
0000DD34 4A28 0025                  		tst.b	$25(a0)
0000DD38 6700                       		beq.s	Obj2F_Solid
0000DD3A 7200                       		moveq	#0,d1
0000DD3C 1228 0019                  		move.b	$19(a0),d1
0000DD40 0641 000B                  		addi.w	#$B,d1
0000DD44 6100 C3A6                  		bsr.w	ExitPlatform
0000DD48 0829 0003 0022             		btst	#3,$22(a1)
0000DD4E 6600 0000                  		bne.w	Obj2F_Slope
0000DD52 4228 0025                  		clr.b	$25(a0)
0000DD56 6000                       		bra.s	Obj2F_Display
0000DD58                            ; ===========================================================================
0000DD58                            
0000DD58                            Obj2F_Slope:				; XREF: Obj2F_Action
0000DD58 7200                       		moveq	#0,d1
0000DD5A 1228 0019                  		move.b	$19(a0),d1
0000DD5E 0641 000B                  		addi.w	#$B,d1
0000DD62 2468 0030                  		movea.l	$30(a0),a2
0000DD66 3428 0008                  		move.w	8(a0),d2
0000DD6A 6100 D2B8                  		bsr.w	SlopeObject2
0000DD6E 6000                       		bra.s	Obj2F_Display
0000DD70                            ; ===========================================================================
0000DD70                            
0000DD70                            Obj2F_Solid:				; XREF: Obj2F_Action
0000DD70 7200                       		moveq	#0,d1
0000DD72 1228 0019                  		move.b	$19(a0),d1
0000DD76 0641 000B                  		addi.w	#$B,d1
0000DD7A 343C 0020                  		move.w	#$20,d2
0000DD7E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000DD84 6600                       		bne.s	loc_AF8E
0000DD86 343C 0030                  		move.w	#$30,d2
0000DD8A                            
0000DD8A                            loc_AF8E:
0000DD8A 2468 0030                  		movea.l	$30(a0),a2
0000DD8E 6100 0000                  		bsr.w	SolidObject2F
0000DD92                            
0000DD92                            Obj2F_Display:				; XREF: Obj2F_Action
0000DD92 6100 0000                  		bsr.w	DisplaySprite
0000DD96 6000 0000                  		bra.w	Obj2F_ChkDel
0000DD9A                            
0000DD9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD9A                            
0000DD9A                            
0000DD9A                            Obj2F_Types:				; XREF: Obj2F_Action
0000DD9A 7000                       		moveq	#0,d0
0000DD9C 1028 0028                  		move.b	$28(a0),d0
0000DDA0 0240 0007                  		andi.w	#7,d0
0000DDA4 D040                       		add.w	d0,d0
0000DDA6 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000DDAA 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000DDAE                            ; End of function Obj2F_Types
0000DDAE                            
0000DDAE                            ; ===========================================================================
0000DDAE 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000DDB0 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000DDB2 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000DDB4 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000DDB6 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000DDB8 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000DDBA                            ; ===========================================================================
0000DDBA                            
0000DDBA                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000DDBA 4E75                       		rts			; type 00 platform doesn't move
0000DDBC                            ; ===========================================================================
0000DDBC                            
0000DDBC                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000DDBC 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000DDC0 323C 0020                  		move.w	#$20,d1
0000DDC4 6000                       		bra.s	Obj2F_Move
0000DDC6                            ; ===========================================================================
0000DDC6                            
0000DDC6                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000DDC6 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000DDCA 323C 0030                  		move.w	#$30,d1
0000DDCE 6000                       		bra.s	Obj2F_Move
0000DDD0                            ; ===========================================================================
0000DDD0                            
0000DDD0                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000DDD0 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000DDD4 323C 0040                  		move.w	#$40,d1
0000DDD8 6000                       		bra.s	Obj2F_Move
0000DDDA                            ; ===========================================================================
0000DDDA                            
0000DDDA                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000DDDA 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000DDDE 323C 0060                  		move.w	#$60,d1
0000DDE2                            
0000DDE2                            Obj2F_Move:
0000DDE2 0828 0003 0028             		btst	#3,$28(a0)
0000DDE8 6700                       		beq.s	loc_AFF2
0000DDEA 4440                       		neg.w	d0
0000DDEC D041                       		add.w	d1,d0
0000DDEE                            
0000DDEE                            loc_AFF2:
0000DDEE 3228 002C                  		move.w	$2C(a0),d1
0000DDF2 9240                       		sub.w	d0,d1
0000DDF4 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000DDF8 4E75                       		rts	
0000DDFA                            ; ===========================================================================
0000DDFA                            
0000DDFA                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000DDFA 1028 0034                  		move.b	$34(a0),d0
0000DDFE 4A28 0025                  		tst.b	$25(a0)
0000DE02 6600                       		bne.s	loc_B010
0000DE04 5500                       		subq.b	#2,d0
0000DE06 6400                       		bcc.s	loc_B01C
0000DE08 7000                       		moveq	#0,d0
0000DE0A 6000                       		bra.s	loc_B01C
0000DE0C                            ; ===========================================================================
0000DE0C                            
0000DE0C                            loc_B010:
0000DE0C 5800                       		addq.b	#4,d0
0000DE0E 0C00 0040                  		cmpi.b	#$40,d0
0000DE12 6500                       		bcs.s	loc_B01C
0000DE14 103C 0040                  		move.b	#$40,d0
0000DE18                            
0000DE18                            loc_B01C:
0000DE18 1140 0034                  		move.b	d0,$34(a0)
0000DE1C 4EB9 0000 2CC8             		jsr	(CalcSine).l
0000DE22 E848                       		lsr.w	#4,d0
0000DE24 3200                       		move.w	d0,d1
0000DE26 D068 002C                  		add.w	$2C(a0),d0
0000DE2A 3140 000C                  		move.w	d0,$C(a0)
0000DE2E 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000DE34 6600                       		bne.s	loc_B07A
0000DE36 4A28 0035                  		tst.b	$35(a0)
0000DE3A 6600                       		bne.s	loc_B07A
0000DE3C 117C 0001 0035             		move.b	#1,$35(a0)
0000DE42 6100 0000                  		bsr.w	SingleObjLoad2
0000DE46 6600                       		bne.s	loc_B07A
0000DE48 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000DE4C 3368 0008 0008             		move.w	8(a0),8(a1)
0000DE52 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000DE58 5069 002C                  		addq.w	#8,$2C(a1)
0000DE5C 5769 002C                  		subq.w	#3,$2C(a1)
0000DE60 0469 0040 0008             		subi.w	#$40,8(a1)
0000DE66 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000DE6C 2348 0038                  		move.l	a0,$38(a1)
0000DE70 2448                       		movea.l	a0,a2
0000DE72 6100                       		bsr.s	sub_B09C
0000DE74                            
0000DE74                            loc_B07A:
0000DE74 7400                       		moveq	#0,d2
0000DE76 45E8 0036                  		lea	$36(a0),a2
0000DE7A 141A                       		move.b	(a2)+,d2
0000DE7C 5302                       		subq.b	#1,d2
0000DE7E 6500                       		bcs.s	locret_B09A
0000DE80                            
0000DE80                            loc_B086:
0000DE80 7000                       		moveq	#0,d0
0000DE82 101A                       		move.b	(a2)+,d0
0000DE84 ED48                       		lsl.w	#6,d0
0000DE86 0640 D000                  		addi.w	#-$3000,d0
0000DE8A 3240                       		movea.w	d0,a1
0000DE8C 3341 003C                  		move.w	d1,$3C(a1)
0000DE90 51CA FFEE                  		dbf	d2,loc_B086
0000DE94                            
0000DE94                            locret_B09A:
0000DE94 4E75                       		rts	
0000DE96                            
0000DE96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE96                            
0000DE96                            
0000DE96                            sub_B09C:
0000DE96 45EA 0036                  		lea	$36(a2),a2
0000DE9A 7000                       		moveq	#0,d0
0000DE9C 1012                       		move.b	(a2),d0
0000DE9E 5212                       		addq.b	#1,(a2)
0000DEA0 45F2 0001                  		lea	1(a2,d0.w),a2
0000DEA4 3009                       		move.w	a1,d0
0000DEA6 0440 D000                  		subi.w	#-$3000,d0
0000DEAA EC48                       		lsr.w	#6,d0
0000DEAC 0240 007F                  		andi.w	#$7F,d0
0000DEB0 1480                       		move.b	d0,(a2)
0000DEB2 4E75                       		rts	
0000DEB4                            ; End of function sub_B09C
0000DEB4                            
0000DEB4                            ; ===========================================================================
0000DEB4                            
0000DEB4                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000DEB4 4A28 0035                  		tst.b	$35(a0)
0000DEB8 6700                       		beq.s	loc_B0C6
0000DEBA 4A28 0001                  		tst.b	1(a0)
0000DEBE 6A00                       		bpl.s	Obj2F_DelFlames
0000DEC0                            
0000DEC0                            loc_B0C6:
0000DEC0 3028 002A                  		move.w	$2A(a0),d0
0000DEC4 0240 FF80                  		andi.w	#$FF80,d0
0000DEC8 3238 F700                  		move.w	($FFFFF700).w,d1
0000DECC 0441 0080                  		subi.w	#$80,d1
0000DED0 0241 FF80                  		andi.w	#$FF80,d1
0000DED4 9041                       		sub.w	d1,d0
0000DED6 0C40 0280                  		cmpi.w	#$280,d0
0000DEDA 6200 0000                  		bhi.w	DeleteObject
0000DEDE 4E75                       		rts	
0000DEE0                            ; ===========================================================================
0000DEE0                            
0000DEE0                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000DEE0 7400                       		moveq	#0,d2
0000DEE2                            
0000DEE2                            loc_B0E8:
0000DEE2 45E8 0036                  		lea	$36(a0),a2
0000DEE6 1412                       		move.b	(a2),d2
0000DEE8 421A                       		clr.b	(a2)+
0000DEEA 5302                       		subq.b	#1,d2
0000DEEC 6500                       		bcs.s	locret_B116
0000DEEE                            
0000DEEE                            loc_B0F4:
0000DEEE 7000                       		moveq	#0,d0
0000DEF0 1012                       		move.b	(a2),d0
0000DEF2 421A                       		clr.b	(a2)+
0000DEF4 ED48                       		lsl.w	#6,d0
0000DEF6 0640 D000                  		addi.w	#-$3000,d0
0000DEFA 3240                       		movea.w	d0,a1
0000DEFC 6100 0000                  		bsr.w	DeleteObject2
0000DF00 51CA FFEC                  		dbf	d2,loc_B0F4
0000DF04 117C 0000 0035             		move.b	#0,$35(a0)
0000DF0A 117C 0000 0034             		move.b	#0,$34(a0)
0000DF10                            
0000DF10                            locret_B116:
0000DF10 4E75                       		rts	
0000DF12                            ; ===========================================================================
0000DF12                            ; ---------------------------------------------------------------------------
0000DF12                            ; Collision data for large moving platforms (MZ)
0000DF12                            ; ---------------------------------------------------------------------------
0000DF12                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000DF5E                            		even
0000DF5E                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000DF8A                            		even
0000DF8A                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000DFD6                            		even
0000DFD6                            ; ===========================================================================
0000DFD6                            ; ---------------------------------------------------------------------------
0000DFD6                            ; Object 35 - fireball that sits on the	floor (MZ)
0000DFD6                            ; (appears when	you walk on sinking platforms)
0000DFD6                            ; ---------------------------------------------------------------------------
0000DFD6                            
0000DFD6                            Obj35:					; XREF: Obj_Index
0000DFD6 7000                       		moveq	#0,d0
0000DFD8 1028 0024                  		move.b	$24(a0),d0
0000DFDC 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000DFE0 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000DFE4                            ; ===========================================================================
0000DFE4 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000DFE6 0000                       		dc.w loc_B238-Obj35_Index
0000DFE8 0000                       		dc.w Obj35_Move-Obj35_Index
0000DFEA                            ; ===========================================================================
0000DFEA                            
0000DFEA                            Obj35_Main:				; XREF: Obj35_Index
0000DFEA 5428 0024                  		addq.b	#2,$24(a0)
0000DFEE 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000DFF6 317C 0345 0002             		move.w	#$345,2(a0)
0000DFFC 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000E002 117C 0004 0001             		move.b	#4,1(a0)
0000E008 117C 0001 0018             		move.b	#1,$18(a0)
0000E00E 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E014 117C 0008 0019             		move.b	#8,$19(a0)
0000E01A 303C 00C8                  		move.w	#$C8,d0
0000E01E 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play flame sound
0000E024 4A28 0028                  		tst.b	$28(a0)
0000E028 6700                       		beq.s	loc_B238
0000E02A 5428 0024                  		addq.b	#2,$24(a0)
0000E02E 6000 0000                  		bra.w	Obj35_Move
0000E032                            ; ===========================================================================
0000E032                            
0000E032                            loc_B238:				; XREF: Obj35_Index
0000E032 2268 0030                  		movea.l	$30(a0),a1
0000E036 3228 0008                  		move.w	8(a0),d1
0000E03A 9268 002A                  		sub.w	$2A(a0),d1
0000E03E 0641 000C                  		addi.w	#$C,d1
0000E042 3001                       		move.w	d1,d0
0000E044 E248                       		lsr.w	#1,d0
0000E046 1031 0000                  		move.b	(a1,d0.w),d0
0000E04A 4440                       		neg.w	d0
0000E04C D068 002C                  		add.w	$2C(a0),d0
0000E050 3400                       		move.w	d0,d2
0000E052 D068 003C                  		add.w	$3C(a0),d0
0000E056 3140 000C                  		move.w	d0,$C(a0)
0000E05A 0C41 0084                  		cmpi.w	#$84,d1
0000E05E 6400                       		bcc.s	loc_B2B0
0000E060 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000E068 0C41 0080                  		cmpi.w	#$80,d1
0000E06C 6400                       		bcc.s	loc_B2B0
0000E06E 2028 0008                  		move.l	8(a0),d0
0000E072 0680 0008 0000             		addi.l	#$80000,d0
0000E078 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000E07E 6600                       		bne.s	loc_B2B0
0000E080 6100 0000                  		bsr.w	SingleObjLoad2
0000E084 6600                       		bne.s	loc_B2B0
0000E086 12BC 0035                  		move.b	#$35,0(a1)
0000E08A 3368 0008 0008             		move.w	8(a0),8(a1)
0000E090 3342 002C                  		move.w	d2,$2C(a1)
0000E094 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000E09A 137C 0001 0028             		move.b	#1,$28(a1)
0000E0A0 2468 0038                  		movea.l	$38(a0),a2
0000E0A4 6100 FDF0                  		bsr.w	sub_B09C
0000E0A8                            
0000E0A8                            loc_B2B0:
0000E0A8 6000                       		bra.s	Obj35_Animate
0000E0AA                            ; ===========================================================================
0000E0AA                            
0000E0AA                            Obj35_Move:				; XREF: Obj35_Index
0000E0AA 3028 002C                  		move.w	$2C(a0),d0
0000E0AE D068 003C                  		add.w	$3C(a0),d0
0000E0B2 3140 000C                  		move.w	d0,$C(a0)
0000E0B6                            
0000E0B6                            Obj35_Animate:				; XREF: loc_B238
0000E0B6 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000E0BC 6100 F32C                  		bsr.w	AnimateSprite
0000E0C0 6000 0000                  		bra.w	DisplaySprite
0000E0C4                            ; ===========================================================================
0000E0C4                            Ani_obj35:
0000E0C4                            	include "_anim\obj35.asm"
0000E0C4                            ; ---------------------------------------------------------------------------
0000E0C4                            ; Animation script - fireball that sits on the	floor (MZ)
0000E0C4                            ; ---------------------------------------------------------------------------
0000E0C4 0000                       		dc.w byte_B2CE-Ani_obj35
0000E0C6 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000E0CC                            		even
0000E0CC                            		even
0000E0CC                            
0000E0CC                            ; ---------------------------------------------------------------------------
0000E0CC                            ; Sprite mappings - large moving platforms (MZ)
0000E0CC                            ; ---------------------------------------------------------------------------
0000E0CC                            Map_obj2F:
0000E0CC                            	include "_maps\obj2F.asm"
0000E0CC                            ; ---------------------------------------------------------------------------
0000E0CC                            ; Sprite mappings - large moving platforms (MZ)
0000E0CC                            ; ---------------------------------------------------------------------------
0000E0CC 0000                       		dc.w byte_B2DA-Map_obj2F
0000E0CE 0000                       		dc.w byte_B31C-Map_obj2F
0000E0D0 0000                       		dc.w byte_B34F-Map_obj2F
0000E0D2 0D                         byte_B2DA:	dc.b $D
0000E0D3 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000E0D8 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000E0DD 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000E0E2 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000E0E7 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000E0EC F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000E0F1 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000E0F6 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000E0FB F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000E100 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000E105 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000E10A D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000E10F F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000E114 0A                         byte_B31C:	dc.b $A
0000E115 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000E11A F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000E11F 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000E124 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000E129 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000E12E F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000E133 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000E138 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000E13D C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000E142 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000E147 06                         byte_B34F:	dc.b 6
0000E148 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000E14D F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000E152 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000E157 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000E15C F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000E161 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000E166                            		even
0000E166                            		even
0000E166                            
0000E166                            ; ---------------------------------------------------------------------------
0000E166                            ; Sprite mappings - lava balls (MZ, SLZ)
0000E166                            ; ---------------------------------------------------------------------------
0000E166                            Map_obj14:
0000E166                            	include "_maps\obj14.asm"
0000E166                            ; ---------------------------------------------------------------------------
0000E166                            ; Sprite mappings - lava balls (MZ, SLZ)
0000E166                            ; ---------------------------------------------------------------------------
0000E166 0000                       		dc.w byte_B37A-Map_obj14
0000E168 0000                       		dc.w byte_B380-Map_obj14
0000E16A 0000                       		dc.w byte_B386-Map_obj14
0000E16C 0000                       		dc.w byte_B38C-Map_obj14
0000E16E 0000                       		dc.w byte_B392-Map_obj14
0000E170 0000                       		dc.w byte_B398-Map_obj14
0000E172 01                         byte_B37A:	dc.b 1
0000E173 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000E178 01                         byte_B380:	dc.b 1
0000E179 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000E17E 01                         byte_B386:	dc.b 1
0000E17F F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000E184 01                         byte_B38C:	dc.b 1
0000E185 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000E18A 01                         byte_B392:	dc.b 1
0000E18B F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000E190 01                         byte_B398:	dc.b 1
0000E191 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000E196                            		even
0000E196                            		even
0000E196                            
0000E196                            ; ===========================================================================
0000E196                            ; ---------------------------------------------------------------------------
0000E196                            ; Object 30 - large green glassy blocks	(MZ)
0000E196                            ; ---------------------------------------------------------------------------
0000E196                            
0000E196                            Obj30:					; XREF: Obj_Index
0000E196 7000                       		moveq	#0,d0
0000E198 1028 0024                  		move.b	$24(a0),d0
0000E19C 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000E1A0 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000E1A4 3028 0008                  		move.w	8(a0),d0
0000E1A8 0240 FF80                  		andi.w	#$FF80,d0
0000E1AC 3238 F700                  		move.w	($FFFFF700).w,d1
0000E1B0 0441 0080                  		subi.w	#$80,d1
0000E1B4 0241 FF80                  		andi.w	#$FF80,d1
0000E1B8 9041                       		sub.w	d1,d0
0000E1BA 0C40 0280                  		cmpi.w	#$280,d0
0000E1BE 6200 0000                  		bhi.w	Obj30_Delete
0000E1C2 6000 0000                  		bra.w	DisplaySprite
0000E1C6                            ; ===========================================================================
0000E1C6                            
0000E1C6                            Obj30_Delete:
0000E1C6 6000 0000                  		bra.w	DeleteObject
0000E1CA                            ; ===========================================================================
0000E1CA 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000E1CC 0000                       		dc.w Obj30_Block012-Obj30_Index
0000E1CE 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000E1D0 0000                       		dc.w Obj30_Block34-Obj30_Index
0000E1D2 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000E1D4                            
0000E1D4 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000E1D7 0400 01                    		dc.b 4,	0, 1
0000E1DA 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000E1DD 0800 01                    		dc.b 8,	0, 1
0000E1E0                            ; ===========================================================================
0000E1E0                            
0000E1E0                            Obj30_Main:				; XREF: Obj30_Index
0000E1E0 45F9 0000 E1D4             		lea	(Obj30_Vars1).l,a2
0000E1E6 7201                       		moveq	#1,d1
0000E1E8 117C 0048 0016             		move.b	#$48,$16(a0)
0000E1EE 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000E1F4 6500                       		bcs.s	loc_B40C	; if yes, branch
0000E1F6 45F9 0000 E1DA             		lea	(Obj30_Vars2).l,a2
0000E1FC 7201                       		moveq	#1,d1
0000E1FE 117C 0038 0016             		move.b	#$38,$16(a0)
0000E204                            
0000E204                            loc_B40C:
0000E204 2248                       		movea.l	a0,a1
0000E206 6000                       		bra.s	Obj30_Load	; load main object
0000E208                            ; ===========================================================================
0000E208                            
0000E208                            Obj30_Loop:
0000E208 6100 0000                  		bsr.w	SingleObjLoad2
0000E20C 6600                       		bne.s	loc_B480
0000E20E                            
0000E20E                            Obj30_Load:				; XREF: Obj30_Main
0000E20E 135A 0024                  		move.b	(a2)+,$24(a1)
0000E212 12BC 0030                  		move.b	#$30,0(a1)
0000E216 3368 0008 0008             		move.w	8(a0),8(a1)
0000E21C 101A                       		move.b	(a2)+,d0
0000E21E 4880                       		ext.w	d0
0000E220 D068 000C                  		add.w	$C(a0),d0
0000E224 3340 000C                  		move.w	d0,$C(a1)
0000E228 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000E230 337C C38E 0002             		move.w	#$C38E,2(a1)
0000E236 137C 0004 0001             		move.b	#4,1(a1)
0000E23C 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000E242 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E248 137C 0020 0019             		move.b	#$20,$19(a1)
0000E24E 137C 0004 0018             		move.b	#4,$18(a1)
0000E254 135A 001A                  		move.b	(a2)+,$1A(a1)
0000E258 2348 003C                  		move.l	a0,$3C(a1)
0000E25C 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000E260                            
0000E260 137C 0010 0019             		move.b	#$10,$19(a1)
0000E266 137C 0003 0018             		move.b	#3,$18(a1)
0000E26C 5029 0028                  		addq.b	#8,$28(a1)
0000E270 0229 000F 0028             		andi.b	#$F,$28(a1)
0000E276                            
0000E276                            loc_B480:
0000E276 317C 0090 0032             		move.w	#$90,$32(a0)
0000E27C 08E8 0004 0001             		bset	#4,1(a0)
0000E282                            
0000E282                            Obj30_Block012:				; XREF: Obj30_Index
0000E282 6100 0000                  		bsr.w	Obj30_Types
0000E286 323C 002B                  		move.w	#$2B,d1
0000E28A 343C 0048                  		move.w	#$48,d2
0000E28E 363C 0049                  		move.w	#$49,d3
0000E292 3828 0008                  		move.w	8(a0),d4
0000E296 6000 0000                  		bra.w	SolidObject
0000E29A                            ; ===========================================================================
0000E29A                            
0000E29A                            Obj30_Reflect012:			; XREF: Obj30_Index
0000E29A 2268 003C                  		movea.l	$3C(a0),a1
0000E29E 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000E2A4 6000 0000                  		bra.w	Obj30_Types
0000E2A8                            ; ===========================================================================
0000E2A8                            
0000E2A8                            Obj30_Block34:				; XREF: Obj30_Index
0000E2A8 6100 0000                  		bsr.w	Obj30_Types
0000E2AC 323C 002B                  		move.w	#$2B,d1
0000E2B0 343C 0038                  		move.w	#$38,d2
0000E2B4 363C 0039                  		move.w	#$39,d3
0000E2B8 3828 0008                  		move.w	8(a0),d4
0000E2BC 6000 0000                  		bra.w	SolidObject
0000E2C0                            ; ===========================================================================
0000E2C0                            
0000E2C0                            Obj30_Reflect34:			; XREF: Obj30_Index
0000E2C0 2268 003C                  		movea.l	$3C(a0),a1
0000E2C4 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000E2CA 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000E2D0 6000 0002                  		bra.w	*+4
0000E2D4                            
0000E2D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2D4                            
0000E2D4                            
0000E2D4                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000E2D4 7000                       		moveq	#0,d0
0000E2D6 1028 0028                  		move.b	$28(a0),d0
0000E2DA 0240 0007                  		andi.w	#7,d0
0000E2DE D040                       		add.w	d0,d0
0000E2E0 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000E2E4 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000E2E8                            ; End of function Obj30_Types
0000E2E8                            
0000E2E8                            ; ===========================================================================
0000E2E8 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000E2EA 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000E2EC 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000E2EE 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000E2F0 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000E2F2                            ; ===========================================================================
0000E2F2                            
0000E2F2                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000E2F2 4E75                       		rts	
0000E2F4                            ; ===========================================================================
0000E2F4                            
0000E2F4                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000E2F4 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000E2F8 323C 0040                  		move.w	#$40,d1
0000E2FC 6000                       		bra.s	loc_B514
0000E2FE                            ; ===========================================================================
0000E2FE                            
0000E2FE                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000E2FE 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000E302 323C 0040                  		move.w	#$40,d1
0000E306 4440                       		neg.w	d0
0000E308 D041                       		add.w	d1,d0
0000E30A                            
0000E30A                            loc_B514:				; XREF: Obj30_Type01
0000E30A 0828 0003 0028             		btst	#3,$28(a0)
0000E310 6700                       		beq.s	loc_B526
0000E312 4440                       		neg.w	d0
0000E314 D041                       		add.w	d1,d0
0000E316 E208                       		lsr.b	#1,d0
0000E318 0640 0020                  		addi.w	#$20,d0
0000E31C                            
0000E31C                            loc_B526:
0000E31C 6000 0000                  		bra.w	loc_B5EE
0000E320                            ; ===========================================================================
0000E320                            
0000E320                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000E320 0828 0003 0028             		btst	#3,$28(a0)
0000E326 6700                       		beq.s	loc_B53E
0000E328 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000E32C 0440 0010                  		subi.w	#$10,d0
0000E330 6000 0000                  		bra.w	loc_B5EE
0000E334                            ; ===========================================================================
0000E334                            
0000E334                            loc_B53E:
0000E334 0828 0003 0022             		btst	#3,$22(a0)
0000E33A 6600                       		bne.s	loc_B54E
0000E33C 08A8 0000 0034             		bclr	#0,$34(a0)
0000E342 6000                       		bra.s	loc_B582
0000E344                            ; ===========================================================================
0000E344                            
0000E344                            loc_B54E:
0000E344 4A28 0034                  		tst.b	$34(a0)
0000E348 6600                       		bne.s	loc_B582
0000E34A 117C 0001 0034             		move.b	#1,$34(a0)
0000E350 08E8 0000 0035             		bset	#0,$35(a0)
0000E356 6700                       		beq.s	loc_B582
0000E358 08E8 0007 0034             		bset	#7,$34(a0)
0000E35E 317C 0010 0036             		move.w	#$10,$36(a0)
0000E364 117C 000A 0038             		move.b	#$A,$38(a0)
0000E36A 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000E370 6600                       		bne.s	loc_B582
0000E372 317C 0040 0036             		move.w	#$40,$36(a0)
0000E378                            
0000E378                            loc_B582:
0000E378 4A28 0034                  		tst.b	$34(a0)
0000E37C 6A00                       		bpl.s	loc_B5AA
0000E37E 4A28 0038                  		tst.b	$38(a0)
0000E382 6700                       		beq.s	loc_B594
0000E384 5328 0038                  		subq.b	#1,$38(a0)
0000E388 6600                       		bne.s	loc_B5AA
0000E38A                            
0000E38A                            loc_B594:
0000E38A 4A68 0032                  		tst.w	$32(a0)
0000E38E 6700                       		beq.s	loc_B5A4
0000E390 5368 0032                  		subq.w	#1,$32(a0)
0000E394 5368 0036                  		subq.w	#1,$36(a0)
0000E398 6600                       		bne.s	loc_B5AA
0000E39A                            
0000E39A                            loc_B5A4:
0000E39A 08A8 0007 0034             		bclr	#7,$34(a0)
0000E3A0                            
0000E3A0                            loc_B5AA:
0000E3A0 3028 0032                  		move.w	$32(a0),d0
0000E3A4 6000                       		bra.s	loc_B5EE
0000E3A6                            ; ===========================================================================
0000E3A6                            
0000E3A6                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000E3A6 0828 0003 0028             		btst	#3,$28(a0)
0000E3AC 6700                       		beq.s	Obj30_ChkSwitch
0000E3AE 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000E3B2 0440 0010                  		subi.w	#$10,d0
0000E3B6 6000                       		bra.s	loc_B5EE
0000E3B8                            ; ===========================================================================
0000E3B8                            
0000E3B8                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000E3B8 4A28 0034                  		tst.b	$34(a0)
0000E3BC 6600                       		bne.s	loc_B5E0
0000E3BE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000E3C2 7000                       		moveq	#0,d0
0000E3C4 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000E3C8 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000E3CA 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000E3CE 6700                       		beq.s	loc_B5EA	; if not, branch
0000E3D0 117C 0001 0034             		move.b	#1,$34(a0)
0000E3D6                            
0000E3D6                            loc_B5E0:
0000E3D6 4A68 0032                  		tst.w	$32(a0)
0000E3DA 6700                       		beq.s	loc_B5EA
0000E3DC 5568 0032                  		subq.w	#2,$32(a0)
0000E3E0                            
0000E3E0                            loc_B5EA:
0000E3E0 3028 0032                  		move.w	$32(a0),d0
0000E3E4                            
0000E3E4                            loc_B5EE:
0000E3E4 3228 0030                  		move.w	$30(a0),d1
0000E3E8 9240                       		sub.w	d0,d1
0000E3EA 3141 000C                  		move.w	d1,$C(a0)
0000E3EE 4E75                       		rts	
0000E3F0                            ; ===========================================================================
0000E3F0                            ; ---------------------------------------------------------------------------
0000E3F0                            ; Sprite mappings - large green	glassy blocks (MZ)
0000E3F0                            ; ---------------------------------------------------------------------------
0000E3F0                            Map_obj30:
0000E3F0                            	include "_maps\obj30.asm"
0000E3F0                            ; ---------------------------------------------------------------------------
0000E3F0                            ; Sprite mappings - large green	glassy blocks (MZ)
0000E3F0                            ; ---------------------------------------------------------------------------
0000E3F0 0000                       		dc.w byte_B600-Map_obj30
0000E3F2 0000                       		dc.w byte_B63D-Map_obj30
0000E3F4 0000                       		dc.w byte_B648-Map_obj30
0000E3F6 0C                         byte_B600:	dc.b $C
0000E3F7 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000E3FC B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000E401 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000E406 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000E40B E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000E410 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000E415 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000E41A 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000E41F 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000E424 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000E429 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000E42E 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000E433 02                         byte_B63D:	dc.b 2
0000E434 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000E439 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000E43E 0A                         byte_B648:	dc.b $A
0000E43F C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000E444 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000E449 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000E44E D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000E453 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000E458 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000E45D 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000E462 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000E467 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000E46C 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000E472 00                         		even
0000E472 00                         		even
0000E472                            
0000E472                            ; ===========================================================================
0000E472                            ; ---------------------------------------------------------------------------
0000E472                            ; Object 31 - stomping metal blocks on chains (MZ)
0000E472                            ; ---------------------------------------------------------------------------
0000E472                            
0000E472                            Obj31:					; XREF: Obj_Index
0000E472 7000                       		moveq	#0,d0
0000E474 1028 0024                  		move.b	$24(a0),d0
0000E478 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000E47C 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000E480                            ; ===========================================================================
0000E480 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000E482 0000                       		dc.w loc_B798-Obj31_Index
0000E484 0000                       		dc.w loc_B7FE-Obj31_Index
0000E486 0000                       		dc.w Obj31_Display2-Obj31_Index
0000E488 0000                       		dc.w loc_B7E2-Obj31_Index
0000E48A                            
0000E48A 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000E48C 0100                       		dc.b 1,	0
0000E48E                            
0000E48E 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000E491 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000E494 08CC 03                    		dc.b 8,	$CC, 3
0000E497 06F0 02                    		dc.b 6,	$F0, 2
0000E49A                            
0000E49A 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000E49E 5000 7800                  		dc.w $5000, $7800
0000E4A2 3800 5800                  		dc.w $3800, $5800
0000E4A6 B800                       		dc.w $B800
0000E4A8                            ; ===========================================================================
0000E4A8                            
0000E4A8                            Obj31_Main:				; XREF: Obj31_Index
0000E4A8 7000                       		moveq	#0,d0
0000E4AA 1028 0028                  		move.b	$28(a0),d0
0000E4AE 6A00                       		bpl.s	loc_B6CE
0000E4B0 0240 007F                  		andi.w	#$7F,d0
0000E4B4 D040                       		add.w	d0,d0
0000E4B6 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000E4BA 115A 003A                  		move.b	(a2)+,$3A(a0)
0000E4BE 101A                       		move.b	(a2)+,d0
0000E4C0 1140 0028                  		move.b	d0,$28(a0)
0000E4C4                            
0000E4C4                            loc_B6CE:
0000E4C4 0200 000F                  		andi.b	#$F,d0
0000E4C8 D040                       		add.w	d0,d0
0000E4CA 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000E4CE 4A40                       		tst.w	d0
0000E4D0 6600                       		bne.s	loc_B6E0
0000E4D2 3142 0032                  		move.w	d2,$32(a0)
0000E4D6                            
0000E4D6                            loc_B6E0:
0000E4D6 45F9 0000 E48E             		lea	(Obj31_Var).l,a2
0000E4DC 2248                       		movea.l	a0,a1
0000E4DE 7203                       		moveq	#3,d1
0000E4E0 6000                       		bra.s	Obj31_MakeStomper
0000E4E2                            ; ===========================================================================
0000E4E2                            
0000E4E2                            Obj31_Loop:
0000E4E2 6100 0000                  		bsr.w	SingleObjLoad2
0000E4E6 6600 0000                  		bne.w	Obj31_SetSize
0000E4EA                            
0000E4EA                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000E4EA 135A 0024                  		move.b	(a2)+,$24(a1)
0000E4EE 12BC 0031                  		move.b	#$31,0(a1)
0000E4F2 3368 0008 0008             		move.w	8(a0),8(a1)
0000E4F8 101A                       		move.b	(a2)+,d0
0000E4FA 4880                       		ext.w	d0
0000E4FC D068 000C                  		add.w	$C(a0),d0
0000E500 3340 000C                  		move.w	d0,$C(a1)
0000E504 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000E50C 337C 0300 0002             		move.w	#$300,2(a1)
0000E512 137C 0004 0001             		move.b	#4,1(a1)
0000E518 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000E51E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E524 137C 0010 0019             		move.b	#$10,$19(a1)
0000E52A 3342 0034                  		move.w	d2,$34(a1)
0000E52E 137C 0004 0018             		move.b	#4,$18(a1)
0000E534 135A 001A                  		move.b	(a2)+,$1A(a1)
0000E538 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000E53E 6600                       		bne.s	loc_B76A
0000E540 5341                       		subq.w	#1,d1
0000E542 1028 0028                  		move.b	$28(a0),d0
0000E546 0240 00F0                  		andi.w	#$F0,d0
0000E54A 0C40 0020                  		cmpi.w	#$20,d0
0000E54E 679A                       		beq.s	Obj31_MakeStomper
0000E550 137C 0038 0019             		move.b	#$38,$19(a1)
0000E556 137C 0090 0020             		move.b	#$90,$20(a1)
0000E55C 5241                       		addq.w	#1,d1
0000E55E                            
0000E55E                            loc_B76A:
0000E55E 2348 003C                  		move.l	a0,$3C(a1)
0000E562 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000E566                            
0000E566 137C 0003 0018             		move.b	#3,$18(a1)
0000E56C                            
0000E56C                            Obj31_SetSize:
0000E56C 7000                       		moveq	#0,d0
0000E56E 1028 0028                  		move.b	$28(a0),d0
0000E572 E648                       		lsr.w	#3,d0
0000E574 0200 000E                  		andi.b	#$E,d0
0000E578 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000E57C 115A 0019                  		move.b	(a2)+,$19(a0)
0000E580 115A 001A                  		move.b	(a2)+,$1A(a0)
0000E584 6000                       		bra.s	loc_B798
0000E586                            ; ===========================================================================
0000E586 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000E588 3009                       		dc.b $30, 9
0000E58A 100A                       		dc.b $10, $A
0000E58C                            ; ===========================================================================
0000E58C                            
0000E58C                            loc_B798:				; XREF: Obj31_Index
0000E58C 6100 0000                  		bsr.w	Obj31_Types
0000E590 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000E596 7200                       		moveq	#0,d1
0000E598 1228 0019                  		move.b	$19(a0),d1
0000E59C 0641 000B                  		addi.w	#$B,d1
0000E5A0 343C 000C                  		move.w	#$C,d2
0000E5A4 363C 000D                  		move.w	#$D,d3
0000E5A8 3828 0008                  		move.w	8(a0),d4
0000E5AC 6100 0000                  		bsr.w	SolidObject
0000E5B0 0828 0003 0022             		btst	#3,$22(a0)
0000E5B6 6700                       		beq.s	Obj31_Display
0000E5B8 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000E5BE 6400                       		bcc.s	Obj31_Display
0000E5C0 2448                       		movea.l	a0,a2
0000E5C2 41F8 D000                  		lea	($FFFFD000).w,a0
0000E5C6 4EB9 0000 0000             		jsr	KillSonic
0000E5CC 204A                       		movea.l	a2,a0
0000E5CE                            
0000E5CE                            Obj31_Display:
0000E5CE 6100 0000                  		bsr.w	DisplaySprite
0000E5D2 6000 0000                  		bra.w	Obj31_ChkDel
0000E5D6                            ; ===========================================================================
0000E5D6                            
0000E5D6                            loc_B7E2:				; XREF: Obj31_Index
0000E5D6 117C 0080 0016             		move.b	#$80,$16(a0)
0000E5DC 08E8 0004 0001             		bset	#4,1(a0)
0000E5E2 2268 003C                  		movea.l	$3C(a0),a1
0000E5E6 1029 0032                  		move.b	$32(a1),d0
0000E5EA EA08                       		lsr.b	#5,d0
0000E5EC 5600                       		addq.b	#3,d0
0000E5EE 1140 001A                  		move.b	d0,$1A(a0)
0000E5F2                            
0000E5F2                            loc_B7FE:				; XREF: Obj31_Index
0000E5F2 2268 003C                  		movea.l	$3C(a0),a1
0000E5F6 7000                       		moveq	#0,d0
0000E5F8 1029 0032                  		move.b	$32(a1),d0
0000E5FC D068 0030                  		add.w	$30(a0),d0
0000E600 3140 000C                  		move.w	d0,$C(a0)
0000E604                            
0000E604                            Obj31_Display2:				; XREF: Obj31_Index
0000E604 6100 0000                  		bsr.w	DisplaySprite
0000E608                            
0000E608                            Obj31_ChkDel:				; XREF: Obj31_Display
0000E608 3028 0008                  		move.w	8(a0),d0
0000E60C 0240 FF80                  		andi.w	#$FF80,d0
0000E610 3238 F700                  		move.w	($FFFFF700).w,d1
0000E614 0441 0080                  		subi.w	#$80,d1
0000E618 0241 FF80                  		andi.w	#$FF80,d1
0000E61C 9041                       		sub.w	d1,d0
0000E61E 0C40 0280                  		cmpi.w	#$280,d0
0000E622 6200 0000                  		bhi.w	DeleteObject
0000E626 4E75                       		rts	
0000E628                            ; ===========================================================================
0000E628                            
0000E628                            Obj31_Types:				; XREF: loc_B798
0000E628 1028 0028                  		move.b	$28(a0),d0
0000E62C 0240 000F                  		andi.w	#$F,d0
0000E630 D040                       		add.w	d0,d0
0000E632 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000E636 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000E63A                            ; ===========================================================================
0000E63A 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000E63C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000E63E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000E640 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000E642 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000E644 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000E646 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000E648                            ; ===========================================================================
0000E648                            
0000E648                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000E648 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000E64C 7000                       		moveq	#0,d0
0000E64E 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000E652 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000E656 6700                       		beq.s	loc_B8A8	; if not, branch
0000E658 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000E65C 6A00                       		bpl.s	loc_B872
0000E65E 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000E664 6700                       		beq.s	loc_B8A0
0000E666                            
0000E666                            loc_B872:
0000E666 4A68 0032                  		tst.w	$32(a0)
0000E66A 6700                       		beq.s	loc_B8A0
0000E66C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E670 0200 000F                  		andi.b	#$F,d0
0000E674 6600                       		bne.s	loc_B892
0000E676 4A28 0001                  		tst.b	1(a0)
0000E67A 6A00                       		bpl.s	loc_B892
0000E67C 303C 00C7                  		move.w	#$C7,d0
0000E680 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000E686                            
0000E686                            loc_B892:
0000E686 0468 0080 0032             		subi.w	#$80,$32(a0)
0000E68C 6400                       		bcc.s	Obj31_Restart
0000E68E 317C 0000 0032             		move.w	#0,$32(a0)
0000E694                            
0000E694                            loc_B8A0:
0000E694 317C 0000 0012             		move.w	#0,$12(a0)
0000E69A 6000                       		bra.s	Obj31_Restart
0000E69C                            ; ===========================================================================
0000E69C                            
0000E69C                            loc_B8A8:				; XREF: Obj31_Type00
0000E69C 3228 0034                  		move.w	$34(a0),d1
0000E6A0 B268 0032                  		cmp.w	$32(a0),d1
0000E6A4 6700                       		beq.s	Obj31_Restart
0000E6A6 3028 0012                  		move.w	$12(a0),d0
0000E6AA 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000E6B0 D168 0032                  		add.w	d0,$32(a0)
0000E6B4 B268 0032                  		cmp.w	$32(a0),d1
0000E6B8 6200                       		bhi.s	Obj31_Restart
0000E6BA 3141 0032                  		move.w	d1,$32(a0)
0000E6BE 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000E6C4 4A28 0001                  		tst.b	1(a0)
0000E6C8 6A00                       		bpl.s	Obj31_Restart
0000E6CA 303C 00BD                  		move.w	#$BD,d0
0000E6CE 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000E6D4                            
0000E6D4                            Obj31_Restart:
0000E6D4 7000                       		moveq	#0,d0
0000E6D6 1028 0032                  		move.b	$32(a0),d0
0000E6DA D068 0030                  		add.w	$30(a0),d0
0000E6DE 3140 000C                  		move.w	d0,$C(a0)
0000E6E2 4E75                       		rts	
0000E6E4                            ; ===========================================================================
0000E6E4                            
0000E6E4                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000E6E4 4A68 0036                  		tst.w	$36(a0)
0000E6E8 6700                       		beq.s	loc_B938
0000E6EA 4A68 0038                  		tst.w	$38(a0)
0000E6EE 6700                       		beq.s	loc_B902
0000E6F0 5368 0038                  		subq.w	#1,$38(a0)
0000E6F4 6000                       		bra.s	loc_B97C
0000E6F6                            ; ===========================================================================
0000E6F6                            
0000E6F6                            loc_B902:
0000E6F6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E6FA 0200 000F                  		andi.b	#$F,d0
0000E6FE 6600                       		bne.s	loc_B91C
0000E700 4A28 0001                  		tst.b	1(a0)
0000E704 6A00                       		bpl.s	loc_B91C
0000E706 303C 00C7                  		move.w	#$C7,d0
0000E70A 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000E710                            
0000E710                            loc_B91C:
0000E710 0468 0080 0032             		subi.w	#$80,$32(a0)
0000E716 6400                       		bcc.s	loc_B97C
0000E718 317C 0000 0032             		move.w	#0,$32(a0)
0000E71E 317C 0000 0012             		move.w	#0,$12(a0)
0000E724 317C 0000 0036             		move.w	#0,$36(a0)
0000E72A 6000                       		bra.s	loc_B97C
0000E72C                            ; ===========================================================================
0000E72C                            
0000E72C                            loc_B938:				; XREF: Obj31_Type01
0000E72C 3228 0034                  		move.w	$34(a0),d1
0000E730 B268 0032                  		cmp.w	$32(a0),d1
0000E734 6700                       		beq.s	loc_B97C
0000E736 3028 0012                  		move.w	$12(a0),d0
0000E73A 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000E740 D168 0032                  		add.w	d0,$32(a0)
0000E744 B268 0032                  		cmp.w	$32(a0),d1
0000E748 6200                       		bhi.s	loc_B97C
0000E74A 3141 0032                  		move.w	d1,$32(a0)
0000E74E 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000E754 317C 0001 0036             		move.w	#1,$36(a0)
0000E75A 317C 003C 0038             		move.w	#$3C,$38(a0)
0000E760 4A28 0001                  		tst.b	1(a0)
0000E764 6A00                       		bpl.s	loc_B97C
0000E766 303C 00BD                  		move.w	#$BD,d0
0000E76A 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000E770                            
0000E770                            loc_B97C:
0000E770 6000 FF62                  		bra.w	Obj31_Restart
0000E774                            ; ===========================================================================
0000E774                            
0000E774                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000E774 3038 D008                  		move.w	($FFFFD008).w,d0
0000E778 9068 0008                  		sub.w	8(a0),d0
0000E77C 6400                       		bcc.s	loc_B98C
0000E77E 4440                       		neg.w	d0
0000E780                            
0000E780                            loc_B98C:
0000E780 0C40 0090                  		cmpi.w	#$90,d0
0000E784 6400                       		bcc.s	loc_B996
0000E786 5228 0028                  		addq.b	#1,$28(a0)
0000E78A                            
0000E78A                            loc_B996:
0000E78A 6000 FF48                  		bra.w	Obj31_Restart
0000E78E                            ; ===========================================================================
0000E78E                            ; ---------------------------------------------------------------------------
0000E78E                            ; Object 45 - spiked metal block from beta version (MZ)
0000E78E                            ; ---------------------------------------------------------------------------
0000E78E                            
0000E78E                            Obj45:					; XREF: Obj_Index
0000E78E 7000                       		moveq	#0,d0
0000E790 1028 0024                  		move.b	$24(a0),d0
0000E794 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000E798 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000E79C                            ; ===========================================================================
0000E79C 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000E79E 0000                       		dc.w Obj45_Solid-Obj45_Index
0000E7A0 0000                       		dc.w loc_BA8E-Obj45_Index
0000E7A2 0000                       		dc.w Obj45_Display-Obj45_Index
0000E7A4 0000                       		dc.w loc_BA7A-Obj45_Index
0000E7A6                            
0000E7A6 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000E7A9 04E4 01                    		dc.b	4, $E4,	  1
0000E7AC 0834 03                    		dc.b	8, $34,	  3
0000E7AF 0628 02                    		dc.b	6, $28,	  2
0000E7B2                            
0000E7B2 3800                       word_B9BE:	dc.w $3800
0000E7B4 A000                       		dc.w -$6000
0000E7B6 5000                       		dc.w $5000
0000E7B8                            ; ===========================================================================
0000E7B8                            
0000E7B8                            Obj45_Main:				; XREF: Obj45_Index
0000E7B8 7000                       		moveq	#0,d0
0000E7BA 1028 0028                  		move.b	$28(a0),d0
0000E7BE D040                       		add.w	d0,d0
0000E7C0 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000E7C4 45F9 0000 E7A6             		lea	(Obj45_Var).l,a2
0000E7CA 2248                       		movea.l	a0,a1
0000E7CC 7203                       		moveq	#3,d1
0000E7CE 6000                       		bra.s	Obj45_Load
0000E7D0                            ; ===========================================================================
0000E7D0                            
0000E7D0                            Obj45_Loop:
0000E7D0 6100 0000                  		bsr.w	SingleObjLoad2
0000E7D4 6600                       		bne.s	loc_BA52
0000E7D6                            
0000E7D6                            Obj45_Load:				; XREF: Obj45_Main
0000E7D6 135A 0024                  		move.b	(a2)+,$24(a1)
0000E7DA 12BC 0045                  		move.b	#$45,0(a1)
0000E7DE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E7E4 101A                       		move.b	(a2)+,d0
0000E7E6 4880                       		ext.w	d0
0000E7E8 D068 0008                  		add.w	8(a0),d0
0000E7EC 3340 0008                  		move.w	d0,8(a1)
0000E7F0 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000E7F8 337C 0300 0002             		move.w	#$300,2(a1)
0000E7FE 137C 0004 0001             		move.b	#4,1(a1)
0000E804 3369 0008 0030             		move.w	8(a1),$30(a1)
0000E80A 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000E810 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E816 137C 0020 0019             		move.b	#$20,$19(a1)
0000E81C 3342 0034                  		move.w	d2,$34(a1)
0000E820 137C 0004 0018             		move.b	#4,$18(a1)
0000E826 0C12 0001                  		cmpi.b	#1,(a2)
0000E82A 6600                       		bne.s	loc_BA40
0000E82C 137C 0091 0020             		move.b	#$91,$20(a1)
0000E832                            
0000E832                            loc_BA40:
0000E832 135A 001A                  		move.b	(a2)+,$1A(a1)
0000E836 2348 003C                  		move.l	a0,$3C(a1)
0000E83A 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000E83E                            
0000E83E 137C 0003 0018             		move.b	#3,$18(a1)
0000E844                            
0000E844                            loc_BA52:
0000E844 117C 0010 0019             		move.b	#$10,$19(a0)
0000E84A                            
0000E84A                            Obj45_Solid:				; XREF: Obj45_Index
0000E84A 3F28 0008                  		move.w	8(a0),-(sp)
0000E84E 6100 0000                  		bsr.w	Obj45_Move
0000E852 323C 0017                  		move.w	#$17,d1
0000E856 343C 0020                  		move.w	#$20,d2
0000E85A 363C 0020                  		move.w	#$20,d3
0000E85E 381F                       		move.w	(sp)+,d4
0000E860 6100 0000                  		bsr.w	SolidObject
0000E864 6100 0000                  		bsr.w	DisplaySprite
0000E868 6000 0000                  		bra.w	Obj45_ChkDel
0000E86C                            ; ===========================================================================
0000E86C                            
0000E86C                            loc_BA7A:				; XREF: Obj45_Index
0000E86C 2268 003C                  		movea.l	$3C(a0),a1
0000E870 1029 0032                  		move.b	$32(a1),d0
0000E874 0600 0010                  		addi.b	#$10,d0
0000E878 EA08                       		lsr.b	#5,d0
0000E87A 5600                       		addq.b	#3,d0
0000E87C 1140 001A                  		move.b	d0,$1A(a0)
0000E880                            
0000E880                            loc_BA8E:				; XREF: Obj45_Index
0000E880 2268 003C                  		movea.l	$3C(a0),a1
0000E884 7000                       		moveq	#0,d0
0000E886 1029 0032                  		move.b	$32(a1),d0
0000E88A 4440                       		neg.w	d0
0000E88C D068 0030                  		add.w	$30(a0),d0
0000E890 3140 0008                  		move.w	d0,8(a0)
0000E894                            
0000E894                            Obj45_Display:				; XREF: Obj45_Index
0000E894 6100 0000                  		bsr.w	DisplaySprite
0000E898                            
0000E898                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000E898 3028 003A                  		move.w	$3A(a0),d0
0000E89C 0240 FF80                  		andi.w	#$FF80,d0
0000E8A0 3238 F700                  		move.w	($FFFFF700).w,d1
0000E8A4 0441 0080                  		subi.w	#$80,d1
0000E8A8 0241 FF80                  		andi.w	#$FF80,d1
0000E8AC 9041                       		sub.w	d1,d0
0000E8AE 0C40 0280                  		cmpi.w	#$280,d0
0000E8B2 6200 0000                  		bhi.w	DeleteObject
0000E8B6 4E75                       		rts	
0000E8B8                            
0000E8B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E8B8                            
0000E8B8                            
0000E8B8                            Obj45_Move:				; XREF: Obj45_Solid
0000E8B8 7000                       		moveq	#0,d0
0000E8BA 1028 0028                  		move.b	$28(a0),d0
0000E8BE D040                       		add.w	d0,d0
0000E8C0 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000E8C4 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000E8C8                            ; End of function Obj45_Move
0000E8C8                            
0000E8C8                            ; ===========================================================================
0000E8C8 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000E8CA 0000                       		dc.w loc_BADA-off_BAD6
0000E8CC                            ; ===========================================================================
0000E8CC                            
0000E8CC                            loc_BADA:				; XREF: off_BAD6
0000E8CC 4A68 0036                  		tst.w	$36(a0)
0000E8D0 6700                       		beq.s	loc_BB08
0000E8D2 4A68 0038                  		tst.w	$38(a0)
0000E8D6 6700                       		beq.s	loc_BAEC
0000E8D8 5368 0038                  		subq.w	#1,$38(a0)
0000E8DC 6000                       		bra.s	loc_BB3C
0000E8DE                            ; ===========================================================================
0000E8DE                            
0000E8DE                            loc_BAEC:
0000E8DE 0468 0080 0032             		subi.w	#$80,$32(a0)
0000E8E4 6400                       		bcc.s	loc_BB3C
0000E8E6 317C 0000 0032             		move.w	#0,$32(a0)
0000E8EC 317C 0000 0010             		move.w	#0,$10(a0)
0000E8F2 317C 0000 0036             		move.w	#0,$36(a0)
0000E8F8 6000                       		bra.s	loc_BB3C
0000E8FA                            ; ===========================================================================
0000E8FA                            
0000E8FA                            loc_BB08:				; XREF: loc_BADA
0000E8FA 3228 0034                  		move.w	$34(a0),d1
0000E8FE B268 0032                  		cmp.w	$32(a0),d1
0000E902 6700                       		beq.s	loc_BB3C
0000E904 3028 0010                  		move.w	$10(a0),d0
0000E908 0668 0070 0010             		addi.w	#$70,$10(a0)
0000E90E D168 0032                  		add.w	d0,$32(a0)
0000E912 B268 0032                  		cmp.w	$32(a0),d1
0000E916 6200                       		bhi.s	loc_BB3C
0000E918 3141 0032                  		move.w	d1,$32(a0)
0000E91C 317C 0000 0010             		move.w	#0,$10(a0)
0000E922 317C 0001 0036             		move.w	#1,$36(a0)
0000E928 317C 003C 0038             		move.w	#$3C,$38(a0)
0000E92E                            
0000E92E                            loc_BB3C:
0000E92E 7000                       		moveq	#0,d0
0000E930 1028 0032                  		move.b	$32(a0),d0
0000E934 4440                       		neg.w	d0
0000E936 D068 0030                  		add.w	$30(a0),d0
0000E93A 3140 0008                  		move.w	d0,8(a0)
0000E93E 4E75                       		rts	
0000E940                            ; ===========================================================================
0000E940                            ; ---------------------------------------------------------------------------
0000E940                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000E940                            ; ---------------------------------------------------------------------------
0000E940                            Map_obj31:
0000E940                            	include "_maps\obj31.asm"
0000E940                            ; ---------------------------------------------------------------------------
0000E940                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000E940                            ; ---------------------------------------------------------------------------
0000E940 0000                       		dc.w byte_BB64-Map_obj31
0000E942 0000                       		dc.w byte_BB7E-Map_obj31
0000E944 0000                       		dc.w byte_BB98-Map_obj31
0000E946 0000                       		dc.w byte_BB9E-Map_obj31
0000E948 0000                       		dc.w byte_BBA9-Map_obj31
0000E94A 0000                       		dc.w byte_BBBE-Map_obj31
0000E94C 0000                       		dc.w byte_BBDD-Map_obj31
0000E94E 0000                       		dc.w byte_BC06-Map_obj31
0000E950 0000                       		dc.w byte_BC06-Map_obj31
0000E952 0000                       		dc.w byte_BC39-Map_obj31
0000E954 0000                       		dc.w byte_BC53-Map_obj31
0000E956 05                         byte_BB64:	dc.b 5
0000E957 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000E95C F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000E961 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000E966 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000E96B F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000E970 05                         byte_BB7E:	dc.b 5
0000E971 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000E976 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000E97B F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000E980 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000E985 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000E98A 01                         byte_BB98:	dc.b 1
0000E98B DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000E990 02                         byte_BB9E:	dc.b 2
0000E991 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000E996 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000E99B 04                         byte_BBA9:	dc.b 4
0000E99C E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000E9A1 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000E9A6 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000E9AB 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000E9B0 06                         byte_BBBE:	dc.b 6
0000E9B1 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000E9B6 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000E9BB E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000E9C0 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000E9C5 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000E9CA 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000E9CF 08                         byte_BBDD:	dc.b 8
0000E9D0 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000E9D5 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000E9DA C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000E9DF D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000E9E4 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000E9E9 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000E9EE 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000E9F3 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000E9F8 0A                         byte_BC06:	dc.b $A
0000E9F9 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000E9FE 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000EA03 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000EA08 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000EA0D C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000EA12 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000EA17 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000EA1C F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000EA21 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000EA26 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000EA2B 05                         byte_BC39:	dc.b 5
0000EA2C F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000EA31 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000EA36 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000EA3B F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000EA40 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000EA45 01                         byte_BC53:	dc.b 1
0000EA46 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000EA4C 00                         		even
0000EA4C 00                         		even
0000EA4C                            
0000EA4C                            ; ---------------------------------------------------------------------------
0000EA4C                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000EA4C                            ; ---------------------------------------------------------------------------
0000EA4C                            Map_obj45:
0000EA4C                            	include "_maps\obj45.asm"
0000EA4C                            ; ---------------------------------------------------------------------------
0000EA4C                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000EA4C                            ; ---------------------------------------------------------------------------
0000EA4C 0000                       		dc.w byte_BC6C-Map_obj45
0000EA4E 0000                       		dc.w byte_BC7C-Map_obj45
0000EA50 0000                       		dc.w byte_BC8C-Map_obj45
0000EA52 0000                       		dc.w byte_BC92-Map_obj45
0000EA54 0000                       		dc.w byte_BC9D-Map_obj45
0000EA56 0000                       		dc.w byte_BCB2-Map_obj45
0000EA58 0000                       		dc.w byte_BCD1-Map_obj45
0000EA5A 0000                       		dc.w byte_BCFA-Map_obj45
0000EA5C 0000                       		dc.w byte_BCFA-Map_obj45
0000EA5E 03                         byte_BC6C:	dc.b 3
0000EA5F E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000EA64 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000EA69 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000EA6E 03                         byte_BC7C:	dc.b 3
0000EA6F E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000EA74 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000EA79 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000EA7E 01                         byte_BC8C:	dc.b 1
0000EA7F F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000EA84 02                         byte_BC92:	dc.b 2
0000EA85 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000EA8A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000EA8F 04                         byte_BC9D:	dc.b 4
0000EA90 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000EA95 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000EA9A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000EA9F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000EAA4 06                         byte_BCB2:	dc.b 6
0000EAA5 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000EAAA F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000EAAF F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000EAB4 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000EAB9 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000EABE F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000EAC3 08                         byte_BCD1:	dc.b 8
0000EAC4 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000EAC9 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000EACE F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000EAD3 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000EAD8 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000EADD F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000EAE2 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000EAE7 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000EAEC 08                         byte_BCFA:	dc.b 8
0000EAED F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000EAF2 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000EAF7 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000EAFC F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000EB01 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000EB06 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000EB0B F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000EB10 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000EB15 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000EB1A F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000EB20 00                         		even
0000EB20 00                         		even
0000EB20                            
0000EB20                            ; ===========================================================================
0000EB20                            ; ---------------------------------------------------------------------------
0000EB20                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000EB20                            ; ---------------------------------------------------------------------------
0000EB20                            
0000EB20                            Obj32:					; XREF: Obj_Index
0000EB20 7000                       		moveq	#0,d0
0000EB22 1028 0024                  		move.b	$24(a0),d0
0000EB26 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000EB2A 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000EB2E                            ; ===========================================================================
0000EB2E 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000EB30 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000EB32                            ; ===========================================================================
0000EB32                            
0000EB32                            Obj32_Main:				; XREF: Obj32_Index
0000EB32 5428 0024                  		addq.b	#2,$24(a0)
0000EB36 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000EB3E 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000EB44 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000EB4A 6700                       		beq.s	loc_BD60
0000EB4C 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000EB52                            
0000EB52                            loc_BD60:
0000EB52 117C 0004 0001             		move.b	#4,1(a0)
0000EB58 117C 0010 0019             		move.b	#$10,$19(a0)
0000EB5E 117C 0004 0018             		move.b	#4,$18(a0)
0000EB64 5668 000C                  		addq.w	#3,$C(a0)
0000EB68                            
0000EB68                            Obj32_Pressed:				; XREF: Obj32_Index
0000EB68 4A28 0001                  		tst.b	1(a0)
0000EB6C 6A00                       		bpl.s	Obj32_Display
0000EB6E 323C 001B                  		move.w	#$1B,d1
0000EB72 343C 0005                  		move.w	#5,d2
0000EB76 363C 0005                  		move.w	#5,d3
0000EB7A 3828 0008                  		move.w	8(a0),d4
0000EB7E 6100 0000                  		bsr.w	SolidObject
0000EB82 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000EB88 1028 0028                  		move.b	$28(a0),d0
0000EB8C 0240 000F                  		andi.w	#$F,d0
0000EB90 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000EB94 47F3 0000                  		lea	(a3,d0.w),a3
0000EB98 7600                       		moveq	#0,d3
0000EB9A 0828 0006 0028             		btst	#6,$28(a0)
0000EBA0 6700                       		beq.s	loc_BDB2
0000EBA2 7607                       		moveq	#7,d3
0000EBA4                            
0000EBA4                            loc_BDB2:
0000EBA4 4A28 0028                  		tst.b	$28(a0)
0000EBA8 6A00                       		bpl.s	loc_BDBE
0000EBAA 6100 0000                  		bsr.w	Obj32_MZBlock
0000EBAE 6600                       		bne.s	loc_BDC8
0000EBB0                            
0000EBB0                            loc_BDBE:
0000EBB0 4A28 0025                  		tst.b	$25(a0)
0000EBB4 6600                       		bne.s	loc_BDC8
0000EBB6 0793                       		bclr	d3,(a3)
0000EBB8 6000                       		bra.s	loc_BDDE
0000EBBA                            ; ===========================================================================
0000EBBA                            
0000EBBA                            loc_BDC8:
0000EBBA 4A13                       		tst.b	(a3)
0000EBBC 6600                       		bne.s	loc_BDD6
0000EBBE 303C 00CD                  		move.w	#$CD,d0
0000EBC2 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play switch sound
0000EBC8                            
0000EBC8                            loc_BDD6:
0000EBC8 07D3                       		bset	d3,(a3)
0000EBCA 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000EBD0                            
0000EBD0                            loc_BDDE:
0000EBD0 0828 0005 0028             		btst	#5,$28(a0)
0000EBD6 6700                       		beq.s	Obj32_Display
0000EBD8 5328 001E                  		subq.b	#1,$1E(a0)
0000EBDC 6A00                       		bpl.s	Obj32_Display
0000EBDE 117C 0007 001E             		move.b	#7,$1E(a0)
0000EBE4 0868 0001 001A             		bchg	#1,$1A(a0)
0000EBEA                            
0000EBEA                            Obj32_Display:
0000EBEA 6100 0000                  		bsr.w	DisplaySprite
0000EBEE 3028 0008                  		move.w	8(a0),d0
0000EBF2 0240 FF80                  		andi.w	#$FF80,d0
0000EBF6 3238 F700                  		move.w	($FFFFF700).w,d1
0000EBFA 0441 0080                  		subi.w	#$80,d1
0000EBFE 0241 FF80                  		andi.w	#$FF80,d1
0000EC02 9041                       		sub.w	d1,d0
0000EC04 0C40 0280                  		cmpi.w	#$280,d0
0000EC08 6200 0000                  		bhi.w	Obj32_Delete
0000EC0C 4E75                       		rts	
0000EC0E                            ; ===========================================================================
0000EC0E                            
0000EC0E                            Obj32_Delete:
0000EC0E 6100 0000                  		bsr.w	DeleteObject
0000EC12 4E75                       		rts	
0000EC14                            
0000EC14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EC14                            
0000EC14                            
0000EC14                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000EC14 3F03                       		move.w	d3,-(sp)
0000EC16 3428 0008                  		move.w	8(a0),d2
0000EC1A 3628 000C                  		move.w	$C(a0),d3
0000EC1E 0442 0010                  		subi.w	#$10,d2
0000EC22 5143                       		subq.w	#8,d3
0000EC24 383C 0020                  		move.w	#$20,d4
0000EC28 3A3C 0010                  		move.w	#$10,d5
0000EC2C 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000EC30 3C3C 005F                  		move.w	#$5F,d6
0000EC34                            
0000EC34                            Obj32_MZLoop:
0000EC34 4A29 0001                  		tst.b	1(a1)
0000EC38 6A00                       		bpl.s	loc_BE4E
0000EC3A 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000EC3E 6700                       		beq.s	loc_BE5E	; if yes, branch
0000EC40                            
0000EC40                            loc_BE4E:
0000EC40 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000EC44 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000EC48                            
0000EC48 361F                       		move.w	(sp)+,d3
0000EC4A 7000                       		moveq	#0,d0
0000EC4C                            
0000EC4C                            locret_BE5A:
0000EC4C 4E75                       		rts	
0000EC4E                            ; ===========================================================================
0000EC4E 1010                       Obj32_MZData:	dc.b $10, $10
0000EC50                            ; ===========================================================================
0000EC50                            
0000EC50                            loc_BE5E:				; XREF: Obj32_MZBlock
0000EC50 7001                       		moveq	#1,d0
0000EC52 0240 003F                  		andi.w	#$3F,d0
0000EC56 D040                       		add.w	d0,d0
0000EC58 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000EC5C 121A                       		move.b	(a2)+,d1
0000EC5E 4881                       		ext.w	d1
0000EC60 3029 0008                  		move.w	8(a1),d0
0000EC64 9041                       		sub.w	d1,d0
0000EC66 9042                       		sub.w	d2,d0
0000EC68 6400                       		bcc.s	loc_BE80
0000EC6A D241                       		add.w	d1,d1
0000EC6C D041                       		add.w	d1,d0
0000EC6E 6500                       		bcs.s	loc_BE84
0000EC70 60CE                       		bra.s	loc_BE4E
0000EC72                            ; ===========================================================================
0000EC72                            
0000EC72                            loc_BE80:
0000EC72 B044                       		cmp.w	d4,d0
0000EC74 62CA                       		bhi.s	loc_BE4E
0000EC76                            
0000EC76                            loc_BE84:
0000EC76 121A                       		move.b	(a2)+,d1
0000EC78 4881                       		ext.w	d1
0000EC7A 3029 000C                  		move.w	$C(a1),d0
0000EC7E 9041                       		sub.w	d1,d0
0000EC80 9043                       		sub.w	d3,d0
0000EC82 6400                       		bcc.s	loc_BE9A
0000EC84 D241                       		add.w	d1,d1
0000EC86 D041                       		add.w	d1,d0
0000EC88 6500                       		bcs.s	loc_BE9E
0000EC8A 60B4                       		bra.s	loc_BE4E
0000EC8C                            ; ===========================================================================
0000EC8C                            
0000EC8C                            loc_BE9A:
0000EC8C B045                       		cmp.w	d5,d0
0000EC8E 62B0                       		bhi.s	loc_BE4E
0000EC90                            
0000EC90                            loc_BE9E:
0000EC90 361F                       		move.w	(sp)+,d3
0000EC92 7001                       		moveq	#1,d0
0000EC94 4E75                       		rts	
0000EC96                            ; End of function Obj32_MZBlock
0000EC96                            
0000EC96                            ; ===========================================================================
0000EC96                            ; ---------------------------------------------------------------------------
0000EC96                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000EC96                            ; ---------------------------------------------------------------------------
0000EC96                            Map_obj32:
0000EC96                            	include "_maps\obj32.asm"
0000EC96                            ; ---------------------------------------------------------------------------
0000EC96                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000EC96                            ; ---------------------------------------------------------------------------
0000EC96 0000                       		dc.w byte_BEAC-Map_obj32
0000EC98 0000                       		dc.w byte_BEB7-Map_obj32
0000EC9A 0000                       		dc.w byte_BEC2-Map_obj32
0000EC9C 0000                       		dc.w byte_BEB7-Map_obj32
0000EC9E 02                         byte_BEAC:	dc.b 2
0000EC9F F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000ECA4 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000ECA9 02                         byte_BEB7:	dc.b 2
0000ECAA F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000ECAF F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000ECB4 02                         byte_BEC2:	dc.b 2
0000ECB5 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000ECBA F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000ECBF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000ECC4                            		even
0000ECC4                            		even
0000ECC4                            
0000ECC4                            ; ===========================================================================
0000ECC4                            ; ---------------------------------------------------------------------------
0000ECC4                            ; Object 33 - pushable blocks (MZ, LZ)
0000ECC4                            ; ---------------------------------------------------------------------------
0000ECC4                            
0000ECC4                            Obj33:					; XREF: Obj_Index
0000ECC4 7000                       		moveq	#0,d0
0000ECC6 1028 0024                  		move.b	$24(a0),d0
0000ECCA 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000ECCE 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000ECD2                            ; ===========================================================================
0000ECD2 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000ECD4 0000                       		dc.w loc_BF6E-Obj33_Index
0000ECD6 0000                       		dc.w loc_C02C-Obj33_Index
0000ECD8                            
0000ECD8 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000ECDA 4001                       		dc.b $40, 1
0000ECDC                            ; ===========================================================================
0000ECDC                            
0000ECDC                            Obj33_Main:				; XREF: Obj33_Index
0000ECDC 5428 0024                  		addq.b	#2,$24(a0)
0000ECE0 117C 000F 0016             		move.b	#$F,$16(a0)
0000ECE6 117C 000F 0017             		move.b	#$F,$17(a0)
0000ECEC 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000ECF4 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000ECFA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000ED00 6600                       		bne.s	loc_BF16
0000ED02 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000ED08                            
0000ED08                            loc_BF16:
0000ED08 117C 0004 0001             		move.b	#4,1(a0)
0000ED0E 117C 0003 0018             		move.b	#3,$18(a0)
0000ED14 3168 0008 0034             		move.w	8(a0),$34(a0)
0000ED1A 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000ED20 7000                       		moveq	#0,d0
0000ED22 1028 0028                  		move.b	$28(a0),d0
0000ED26 D040                       		add.w	d0,d0
0000ED28 0240 000E                  		andi.w	#$E,d0
0000ED2C 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000ED30 115A 0019                  		move.b	(a2)+,$19(a0)
0000ED34 115A 001A                  		move.b	(a2)+,$1A(a0)
0000ED38 4A28 0028                  		tst.b	$28(a0)
0000ED3C 6700                       		beq.s	Obj33_ChkGone
0000ED3E 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000ED44                            
0000ED44                            Obj33_ChkGone:
0000ED44 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000ED48 7000                       		moveq	#0,d0
0000ED4A 1028 0023                  		move.b	$23(a0),d0
0000ED4E 6700                       		beq.s	loc_BF6E
0000ED50 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000ED56 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000ED5C 6600 0000                  		bne.w	DeleteObject
0000ED60                            
0000ED60                            loc_BF6E:				; XREF: Obj33_Index
0000ED60 4A28 0032                  		tst.b	$32(a0)
0000ED64 6600 0000                  		bne.w	loc_C046
0000ED68 7200                       		moveq	#0,d1
0000ED6A 1228 0019                  		move.b	$19(a0),d1
0000ED6E 0641 000B                  		addi.w	#$B,d1
0000ED72 343C 0010                  		move.w	#$10,d2
0000ED76 363C 0011                  		move.w	#$11,d3
0000ED7A 3828 0008                  		move.w	8(a0),d4
0000ED7E 6100 0000                  		bsr.w	loc_C186
0000ED82 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000ED88 6600                       		bne.s	loc_BFC6	; if not, branch
0000ED8A 08A8 0007 0028             		bclr	#7,$28(a0)
0000ED90 3028 0008                  		move.w	8(a0),d0
0000ED94 0C40 0A20                  		cmpi.w	#$A20,d0
0000ED98 6500                       		bcs.s	loc_BFC6
0000ED9A 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000ED9E 6400                       		bcc.s	loc_BFC6
0000EDA0 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000EDA4 0440 001C                  		subi.w	#$1C,d0
0000EDA8 3140 000C                  		move.w	d0,$C(a0)
0000EDAC 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000EDB2 08E8 0007 0028             		bset	#7,$28(a0)
0000EDB8                            
0000EDB8                            loc_BFC6:
0000EDB8 3028 0008                  		move.w	8(a0),d0
0000EDBC 0240 FF80                  		andi.w	#$FF80,d0
0000EDC0 3238 F700                  		move.w	($FFFFF700).w,d1
0000EDC4 0441 0080                  		subi.w	#$80,d1
0000EDC8 0241 FF80                  		andi.w	#$FF80,d1
0000EDCC 9041                       		sub.w	d1,d0
0000EDCE 0C40 0280                  		cmpi.w	#$280,d0
0000EDD2 6200                       		bhi.s	loc_BFE6
0000EDD4 6000 0000                  		bra.w	DisplaySprite
0000EDD8                            ; ===========================================================================
0000EDD8                            
0000EDD8                            loc_BFE6:
0000EDD8 3028 0034                  		move.w	$34(a0),d0
0000EDDC 0240 FF80                  		andi.w	#$FF80,d0
0000EDE0 3238 F700                  		move.w	($FFFFF700).w,d1
0000EDE4 0441 0080                  		subi.w	#$80,d1
0000EDE8 0241 FF80                  		andi.w	#$FF80,d1
0000EDEC 9041                       		sub.w	d1,d0
0000EDEE 0C40 0280                  		cmpi.w	#$280,d0
0000EDF2 6200                       		bhi.s	loc_C016
0000EDF4 3168 0034 0008             		move.w	$34(a0),8(a0)
0000EDFA 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000EE00 117C 0004 0024             		move.b	#4,$24(a0)
0000EE06 6000                       		bra.s	loc_C02C
0000EE08                            ; ===========================================================================
0000EE08                            
0000EE08                            loc_C016:
0000EE08 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EE0C 7000                       		moveq	#0,d0
0000EE0E 1028 0023                  		move.b	$23(a0),d0
0000EE12 6700                       		beq.s	loc_C028
0000EE14 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000EE1A                            
0000EE1A                            loc_C028:
0000EE1A 6000 0000                  		bra.w	DeleteObject
0000EE1E                            ; ===========================================================================
0000EE1E                            
0000EE1E                            loc_C02C:				; XREF: Obj33_Index
0000EE1E 6100 0000                  		bsr.w	ChkObjOnScreen2
0000EE22 6700                       		beq.s	locret_C044
0000EE24 117C 0002 0024             		move.b	#2,$24(a0)
0000EE2A 4228 0032                  		clr.b	$32(a0)
0000EE2E 4268 0010                  		clr.w	$10(a0)
0000EE32 4268 0012                  		clr.w	$12(a0)
0000EE36                            
0000EE36                            locret_C044:
0000EE36 4E75                       		rts	
0000EE38                            ; ===========================================================================
0000EE38                            
0000EE38                            loc_C046:				; XREF: loc_BF6E
0000EE38 3F28 0008                  		move.w	8(a0),-(sp)
0000EE3C 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000EE42 6400                       		bcc.s	loc_C056
0000EE44 6100 0000                  		bsr.w	SpeedToPos
0000EE48                            
0000EE48                            loc_C056:
0000EE48 0828 0001 0022             		btst	#1,$22(a0)
0000EE4E 6700                       		beq.s	loc_C0A0
0000EE50 0668 0018 0012             		addi.w	#$18,$12(a0)
0000EE56 4EB9 0000 0000             		jsr	ObjHitFloor
0000EE5C 4A41                       		tst.w	d1
0000EE5E 6A00 0000                  		bpl.w	loc_C09E
0000EE62 D368 000C                  		add.w	d1,$C(a0)
0000EE66 4268 0012                  		clr.w	$12(a0)
0000EE6A 08A8 0001 0022             		bclr	#1,$22(a0)
0000EE70 3011                       		move.w	(a1),d0
0000EE72 0240 03FF                  		andi.w	#$3FF,d0
0000EE76 0C40 016A                  		cmpi.w	#$16A,d0
0000EE7A 6500                       		bcs.s	loc_C09E
0000EE7C 3028 0030                  		move.w	$30(a0),d0
0000EE80 E640                       		asr.w	#3,d0
0000EE82 3140 0010                  		move.w	d0,$10(a0)
0000EE86 117C 0001 0032             		move.b	#1,$32(a0)
0000EE8C 4268 000E                  		clr.w	$E(a0)
0000EE90                            
0000EE90                            loc_C09E:
0000EE90 6000                       		bra.s	loc_C0E6
0000EE92                            ; ===========================================================================
0000EE92                            
0000EE92                            loc_C0A0:
0000EE92 4A68 0010                  		tst.w	$10(a0)
0000EE96 6700 0000                  		beq.w	loc_C0D6
0000EE9A 6B00                       		bmi.s	loc_C0BC
0000EE9C 7600                       		moveq	#0,d3
0000EE9E 1628 0019                  		move.b	$19(a0),d3
0000EEA2 4EB9 0000 0000             		jsr	ObjHitWallRight
0000EEA8 4A41                       		tst.w	d1		; has block touched a wall?
0000EEAA 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000EEAC 6000                       		bra.s	loc_C0E6
0000EEAE                            ; ===========================================================================
0000EEAE                            
0000EEAE                            loc_C0BC:
0000EEAE 7600                       		moveq	#0,d3
0000EEB0 1628 0019                  		move.b	$19(a0),d3
0000EEB4 4643                       		not.w	d3
0000EEB6 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000EEBC 4A41                       		tst.w	d1		; has block touched a wall?
0000EEBE 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000EEC0 6000                       		bra.s	loc_C0E6
0000EEC2                            ; ===========================================================================
0000EEC2                            
0000EEC2                            Obj33_StopPush:
0000EEC2 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000EEC6 6000                       		bra.s	loc_C0E6
0000EEC8                            ; ===========================================================================
0000EEC8                            
0000EEC8                            loc_C0D6:
0000EEC8 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000EED0 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000EED6 6400                       		bcc.s	loc_C104
0000EED8                            
0000EED8                            loc_C0E6:
0000EED8 7200                       		moveq	#0,d1
0000EEDA 1228 0019                  		move.b	$19(a0),d1
0000EEDE 0641 000B                  		addi.w	#$B,d1
0000EEE2 343C 0010                  		move.w	#$10,d2
0000EEE6 363C 0011                  		move.w	#$11,d3
0000EEEA 381F                       		move.w	(sp)+,d4
0000EEEC 6100 0000                  		bsr.w	loc_C186
0000EEF0 6100                       		bsr.s	Obj33_ChkLava
0000EEF2 6000 FEC4                  		bra.w	loc_BFC6
0000EEF6                            ; ===========================================================================
0000EEF6                            
0000EEF6                            loc_C104:
0000EEF6 381F                       		move.w	(sp)+,d4
0000EEF8 43F8 D000                  		lea	($FFFFD000).w,a1
0000EEFC 08A9 0003 0022             		bclr	#3,$22(a1)
0000EF02 08A8 0003 0022             		bclr	#3,$22(a0)
0000EF08 6000 FECE                  		bra.w	loc_BFE6
0000EF0C                            ; ===========================================================================
0000EF0C                            
0000EF0C                            Obj33_ChkLava:
0000EF0C 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000EF12 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000EF14 343C FFE0                  		move.w	#-$20,d2
0000EF18 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000EF1E 6700                       		beq.s	Obj33_LoadLava
0000EF20 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000EF26 6700                       		beq.s	Obj33_LoadLava
0000EF28 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000EF2E 6700                       		beq.s	Obj33_LoadLava
0000EF30 4E75                       		rts	
0000EF32                            ; ===========================================================================
0000EF32                            
0000EF32                            Obj33_ChkLava2:
0000EF32 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000EF38 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000EF3A 343C 0020                  		move.w	#$20,d2
0000EF3E 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000EF44 6700                       		beq.s	Obj33_LoadLava
0000EF46 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000EF4C 6700                       		beq.s	Obj33_LoadLava
0000EF4E                            
0000EF4E                            Obj33_NoLava:
0000EF4E 4E75                       		rts	
0000EF50                            ; ===========================================================================
0000EF50                            
0000EF50                            Obj33_LoadLava:
0000EF50 6100 0000                  		bsr.w	SingleObjLoad
0000EF54 6600                       		bne.s	locret_C184
0000EF56 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000EF5A 3368 0008 0008             		move.w	8(a0),8(a1)
0000EF60 D569 0008                  		add.w	d2,8(a1)
0000EF64 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EF6A 0669 0010 000C             		addi.w	#$10,$C(a1)
0000EF70 2348 003C                  		move.l	a0,$3C(a1)
0000EF74                            
0000EF74                            locret_C184:
0000EF74 4E75                       		rts	
0000EF76                            ; ===========================================================================
0000EF76                            
0000EF76                            loc_C186:				; XREF: loc_BF6E
0000EF76 1028 0025                  		move.b	$25(a0),d0
0000EF7A 6700 0000                  		beq.w	loc_C218
0000EF7E 5500                       		subq.b	#2,d0
0000EF80 6600                       		bne.s	loc_C1AA
0000EF82 6100 B168                  		bsr.w	ExitPlatform
0000EF86 0829 0003 0022             		btst	#3,$22(a1)
0000EF8C 6600                       		bne.s	loc_C1A4
0000EF8E 4228 0025                  		clr.b	$25(a0)
0000EF92 4E75                       		rts	
0000EF94                            ; ===========================================================================
0000EF94                            
0000EF94                            loc_C1A4:
0000EF94 3404                       		move.w	d4,d2
0000EF96 6000 B6B2                  		bra.w	MvSonicOnPtfm
0000EF9A                            ; ===========================================================================
0000EF9A                            
0000EF9A                            loc_C1AA:
0000EF9A 5500                       		subq.b	#2,d0
0000EF9C 6600                       		bne.s	loc_C1F2
0000EF9E 6100 0000                  		bsr.w	SpeedToPos
0000EFA2 0668 0018 0012             		addi.w	#$18,$12(a0)
0000EFA8 4EB9 0000 0000             		jsr	ObjHitFloor
0000EFAE 4A41                       		tst.w	d1
0000EFB0 6A00 0000                  		bpl.w	locret_C1F0
0000EFB4 D368 000C                  		add.w	d1,$C(a0)
0000EFB8 4268 0012                  		clr.w	$12(a0)
0000EFBC 4228 0025                  		clr.b	$25(a0)
0000EFC0 3011                       		move.w	(a1),d0
0000EFC2 0240 03FF                  		andi.w	#$3FF,d0
0000EFC6 0C40 016A                  		cmpi.w	#$16A,d0
0000EFCA 6500                       		bcs.s	locret_C1F0
0000EFCC 3028 0030                  		move.w	$30(a0),d0
0000EFD0 E640                       		asr.w	#3,d0
0000EFD2 3140 0010                  		move.w	d0,$10(a0)
0000EFD6 117C 0001 0032             		move.b	#1,$32(a0)
0000EFDC 4268 000E                  		clr.w	$E(a0)
0000EFE0                            
0000EFE0                            locret_C1F0:
0000EFE0 4E75                       		rts	
0000EFE2                            ; ===========================================================================
0000EFE2                            
0000EFE2                            loc_C1F2:
0000EFE2 6100 0000                  		bsr.w	SpeedToPos
0000EFE6 3028 0008                  		move.w	8(a0),d0
0000EFEA 0240 000C                  		andi.w	#$C,d0
0000EFEE 6600 0000                  		bne.w	locret_C2E4
0000EFF2 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000EFF8 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000EFFE 4268 0010                  		clr.w	$10(a0)
0000F002 5528 0025                  		subq.b	#2,$25(a0)
0000F006 4E75                       		rts	
0000F008                            ; ===========================================================================
0000F008                            
0000F008                            loc_C218:
0000F008 6100 0000                  		bsr.w	loc_FAC8
0000F00C 4A44                       		tst.w	d4
0000F00E 6700 0000                  		beq.w	locret_C2E4
0000F012 6B00 0000                  		bmi.w	locret_C2E4
0000F016 4A28 0032                  		tst.b	$32(a0)
0000F01A 6700                       		beq.s	loc_C230
0000F01C 6000 0000                  		bra.w	locret_C2E4
0000F020                            ; ===========================================================================
0000F020                            
0000F020                            loc_C230:
0000F020 4A40                       		tst.w	d0
0000F022 6700 0000                  		beq.w	locret_C2E4
0000F026 6B00                       		bmi.s	loc_C268
0000F028 0829 0000 0022             		btst	#0,$22(a1)
0000F02E 6600 0000                  		bne.w	locret_C2E4
0000F032 3F00                       		move.w	d0,-(sp)
0000F034 7600                       		moveq	#0,d3
0000F036 1628 0019                  		move.b	$19(a0),d3
0000F03A 4EB9 0000 0000             		jsr	ObjHitWallRight
0000F040 301F                       		move.w	(sp)+,d0
0000F042 4A41                       		tst.w	d1
0000F044 6B00 0000                  		bmi.w	locret_C2E4
0000F048 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000F050 7001                       		moveq	#1,d0
0000F052 323C 0040                  		move.w	#$40,d1
0000F056 6000                       		bra.s	loc_C294
0000F058                            ; ===========================================================================
0000F058                            
0000F058                            loc_C268:
0000F058 0829 0000 0022             		btst	#0,$22(a1)
0000F05E 6700                       		beq.s	locret_C2E4
0000F060 3F00                       		move.w	d0,-(sp)
0000F062 7600                       		moveq	#0,d3
0000F064 1628 0019                  		move.b	$19(a0),d3
0000F068 4643                       		not.w	d3
0000F06A 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000F070 301F                       		move.w	(sp)+,d0
0000F072 4A41                       		tst.w	d1
0000F074 6B00                       		bmi.s	locret_C2E4
0000F076 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000F07E 70FF                       		moveq	#-1,d0
0000F080 323C FFC0                  		move.w	#-$40,d1
0000F084                            
0000F084                            loc_C294:
0000F084 43F8 D000                  		lea	($FFFFD000).w,a1
0000F088 D169 0008                  		add.w	d0,8(a1)
0000F08C 3341 0014                  		move.w	d1,$14(a1)
0000F090 337C 0000 0010             		move.w	#0,$10(a1)
0000F096 3F00                       		move.w	d0,-(sp)
0000F098 303C 00A7                  		move.w	#$A7,d0
0000F09C 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play pushing sound
0000F0A2 301F                       		move.w	(sp)+,d0
0000F0A4 4A28 0028                  		tst.b	$28(a0)
0000F0A8 6B00                       		bmi.s	locret_C2E4
0000F0AA 3F00                       		move.w	d0,-(sp)
0000F0AC 4EB9 0000 0000             		jsr	ObjHitFloor
0000F0B2 301F                       		move.w	(sp)+,d0
0000F0B4 0C41 0004                  		cmpi.w	#4,d1
0000F0B8 6F00                       		ble.s	loc_C2E0
0000F0BA 317C 0400 0010             		move.w	#$400,$10(a0)
0000F0C0 4A40                       		tst.w	d0
0000F0C2 6A00                       		bpl.s	loc_C2D8
0000F0C4 4468 0010                  		neg.w	$10(a0)
0000F0C8                            
0000F0C8                            loc_C2D8:
0000F0C8 117C 0006 0025             		move.b	#6,$25(a0)
0000F0CE 6000                       		bra.s	locret_C2E4
0000F0D0                            ; ===========================================================================
0000F0D0                            
0000F0D0                            loc_C2E0:
0000F0D0 D368 000C                  		add.w	d1,$C(a0)
0000F0D4                            
0000F0D4                            locret_C2E4:
0000F0D4 4E75                       		rts	
0000F0D6                            ; ===========================================================================
0000F0D6                            ; ---------------------------------------------------------------------------
0000F0D6                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000F0D6                            ; ---------------------------------------------------------------------------
0000F0D6                            Map_obj33:
0000F0D6                            	include "_maps\obj33.asm"
0000F0D6                            ; ---------------------------------------------------------------------------
0000F0D6                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000F0D6                            ; ---------------------------------------------------------------------------
0000F0D6 0000                       		dc.w byte_C2EA-Map_obj33
0000F0D8 0000                       		dc.w byte_C2F0-Map_obj33
0000F0DA 01                         byte_C2EA:	dc.b 1
0000F0DB F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000F0E0 04                         byte_C2F0:	dc.b 4
0000F0E1 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000F0E6 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000F0EB F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000F0F0 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000F0F6 00                         		even
0000F0F6 00                         		even
0000F0F6                            
0000F0F6                            ; ===========================================================================
0000F0F6                            ; ---------------------------------------------------------------------------
0000F0F6                            ; Object 34 - zone title cards
0000F0F6                            ; ---------------------------------------------------------------------------
0000F0F6                            
0000F0F6                            Obj34:					; XREF: Obj_Index
0000F0F6 7000                       		moveq	#0,d0
0000F0F8 1028 0024                  		move.b	$24(a0),d0
0000F0FC 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000F100 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000F104                            ; ===========================================================================
0000F104 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000F106 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000F108 0000                       		dc.w Obj34_Wait-Obj34_Index
0000F10A 0000                       		dc.w Obj34_Wait-Obj34_Index
0000F10C                            ; ===========================================================================
0000F10C                            
0000F10C                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000F10C 2248                       		movea.l	a0,a1
0000F10E 7000                       		moveq	#0,d0
0000F110 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000F114 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000F11A 6600                       		bne.s	Obj34_CheckFZ
0000F11C 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000F11E                            
0000F11E                            Obj34_CheckFZ:
0000F11E 3400                       		move.w	d0,d2
0000F120 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000F126 6600                       		bne.s	Obj34_LoadConfig
0000F128 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000F12A 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000F12C                            
0000F12C                            Obj34_LoadConfig:
0000F12C 47F9 0000 0000             		lea	(Obj34_ConData).l,a3	; load pos data
0000F132 E948                       		lsl.w	#4,d0
0000F134 D6C0                       		adda.w	d0,a3
0000F136 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000F13C 7203                       		moveq	#3,d1
0000F13E                            
0000F13E                            Obj34_Loop:
0000F13E 12BC 0034                  		move.b	#$34,0(a1)
0000F142 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000F146 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000F14A 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000F14E 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000F152 135A 0024                  		move.b	(a2)+,$24(a1)
0000F156 101A                       		move.b	(a2)+,d0
0000F158 6600                       		bne.s	Obj34_ActNumber
0000F15A 1002                       		move.b	d2,d0
0000F15C                            
0000F15C                            Obj34_ActNumber:
0000F15C 0C00 0007                  		cmpi.b	#7,d0
0000F160 6600                       		bne.s	Obj34_MakeSprite
0000F162 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000F166 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000F16C 6600                       		bne.s	Obj34_MakeSprite
0000F16E 5300                       		subq.b	#1,d0
0000F170                            
0000F170                            Obj34_MakeSprite:
0000F170 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000F174 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000F17C 337C 8580 0002             		move.w	#$8580,2(a1)
0000F182 137C 0078 0019             		move.b	#$78,$19(a1)
0000F188 137C 0000 0001             		move.b	#0,1(a1)
0000F18E 137C 0000 0018             		move.b	#0,$18(a1)
0000F194 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000F19A 43E9 0040                  		lea	$40(a1),a1	; next object
0000F19E 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000F1A2                            
0000F1A2                            Obj34_ChkPos:				; XREF: Obj34_Index
0000F1A2 7210                       		moveq	#$10,d1		; set horizontal speed
0000F1A4 3028 0030                  		move.w	$30(a0),d0
0000F1A8 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000F1AC 6700                       		beq.s	loc_C3C8	; if yes, branch
0000F1AE 6C00                       		bge.s	Obj34_Move
0000F1B0 4441                       		neg.w	d1
0000F1B2                            
0000F1B2                            Obj34_Move:
0000F1B2 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000F1B6                            
0000F1B6                            loc_C3C8:
0000F1B6 3028 0008                  		move.w	8(a0),d0
0000F1BA 6B00                       		bmi.s	locret_C3D8
0000F1BC 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000F1C0 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000F1C2 6000 0000                  		bra.w	DisplaySprite
0000F1C6                            ; ===========================================================================
0000F1C6                            
0000F1C6                            locret_C3D8:
0000F1C6 4E75                       		rts	
0000F1C8                            ; ===========================================================================
0000F1C8                            
0000F1C8                            Obj34_Wait:				; XREF: Obj34_Index
0000F1C8 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000F1CC 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000F1CE 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000F1D2 6000 0000                  		bra.w	DisplaySprite
0000F1D6                            ; ===========================================================================
0000F1D6                            
0000F1D6                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000F1D6 4A28 0001                  		tst.b	1(a0)
0000F1DA 6A00                       		bpl.s	Obj34_ChangeArt
0000F1DC 7220                       		moveq	#$20,d1
0000F1DE 3028 0032                  		move.w	$32(a0),d0
0000F1E2 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000F1E6 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000F1E8 6C00                       		bge.s	Obj34_Move2
0000F1EA 4441                       		neg.w	d1
0000F1EC                            
0000F1EC                            Obj34_Move2:
0000F1EC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000F1F0 3028 0008                  		move.w	8(a0),d0
0000F1F4 6B00                       		bmi.s	locret_C412
0000F1F6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000F1FA 6400                       		bcc.s	locret_C412	; if yes, branch
0000F1FC 6000 0000                  		bra.w	DisplaySprite
0000F200                            ; ===========================================================================
0000F200                            
0000F200                            locret_C412:
0000F200 4E75                       		rts	
0000F202                            ; ===========================================================================
0000F202                            
0000F202                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000F202 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000F208 6600                       		bne.s	Obj34_Delete
0000F20A 7002                       		moveq	#2,d0
0000F20C 4EB9 0000 153E             		jsr	(LoadPLC).l	; load explosion patterns
0000F212 7000                       		moveq	#0,d0
0000F214 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000F218 0640 0015                  		addi.w	#$15,d0
0000F21C 4EB9 0000 153E             		jsr	(LoadPLC).l	; load animal patterns
0000F222                            
0000F222                            Obj34_Delete:
0000F222 6000 0000                  		bra.w	DeleteObject
0000F226                            ; ===========================================================================
0000F226                            ; Data for Title Card Objects
0000F226                            ; Format:
0000F226                            ; Y-axis position, routine number, frame number (changes)
0000F226 00D0                       Obj34_ItemData:	dc.w $D0	; Zone Name
0000F228 0200                       		dc.b 2,	0	;
0000F22A 00E4                       		dc.w $E4	; "ZONE"
0000F22C 0206                       		dc.b 2,	6	;
0000F22E 00EA                       		dc.w $EA	; "ACT X"
0000F230 0207                       		dc.b 2,	7	;
0000F232 00E0                       		dc.w $E0	; Oval
0000F234 020A                       		dc.b 2,	$A      ;
0000F236                            ; ---------------------------------------------------------------------------
0000F236                            ; Title	card configuration data
0000F236                            ; Format:
0000F236                            ; 4 bytes per item (SSSS FFFF), where SSSS is start pos and FFFF is end pos
0000F236                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000F236                            ; ---------------------------------------------------------------------------
0000F236                            ; Vladikcomper: this data was moved to BIN-files, which are updated by S1HS
0000F236                            Obj34_ConData:	incbin	"mapbin\ttlcards_cfg_0.bin"
0000F246                            		incbin	"mapbin\ttlcards_cfg_1.bin"
0000F256                            		incbin	"mapbin\ttlcards_cfg_2.bin"
0000F266                            		incbin	"mapbin\ttlcards_cfg_3.bin"
0000F276                            		incbin	"mapbin\ttlcards_cfg_4.bin"
0000F286                            		incbin	"mapbin\ttlcards_cfg_5.bin"
0000F296                            		incbin	"mapbin\ttlcards_cfg_6.bin"
0000F2A6                            ; ===========================================================================
0000F2A6                            ; ---------------------------------------------------------------------------
0000F2A6                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000F2A6                            ; ---------------------------------------------------------------------------
0000F2A6                            
0000F2A6                            Obj39:					; XREF: Obj_Index
0000F2A6 7000                       		moveq	#0,d0
0000F2A8 1028 0024                  		move.b	$24(a0),d0
0000F2AC 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000F2B0 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000F2B4                            ; ===========================================================================
0000F2B4 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000F2B6 0000                       		dc.w loc_C50C-Obj39_Index
0000F2B8 0000                       		dc.w Obj39_Wait-Obj39_Index
0000F2BA                            ; ===========================================================================
0000F2BA                            
0000F2BA                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000F2BA 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000F2BE 6700                       		beq.s	Obj39_Main	; if yes, branch
0000F2C0 4E75                       		rts	
0000F2C2                            ; ===========================================================================
0000F2C2                            
0000F2C2                            Obj39_Main:
0000F2C2 5428 0024                  		addq.b	#2,$24(a0)
0000F2C6 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000F2CC 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000F2D2 6700                       		beq.s	loc_C4EC	; if not, branch
0000F2D4 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000F2DA                            
0000F2DA                            loc_C4EC:
0000F2DA 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000F2E0 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000F2E8 317C 855E 0002             		move.w	#$855E,2(a0)
0000F2EE 117C 0000 0001             		move.b	#0,1(a0)
0000F2F4 117C 0000 0018             		move.b	#0,$18(a0)
0000F2FA                            
0000F2FA                            loc_C50C:				; XREF: Obj39_Index
0000F2FA 7210                       		moveq	#$10,d1		; set horizontal speed
0000F2FC 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000F302 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000F304 6500                       		bcs.s	Obj39_Move
0000F306 4441                       		neg.w	d1
0000F308                            
0000F308                            Obj39_Move:
0000F308 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000F30C 6000 0000                  		bra.w	DisplaySprite
0000F310                            ; ===========================================================================
0000F310                            
0000F310                            Obj39_SetWait:				; XREF: Obj39_Main
0000F310                                            ;move.b  #$00,($FFFFFF8B).w; set the playable character to sonic (this is needed to fix the bug)
0000F310 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000F316 5428 0024                  		addq.b	#2,$24(a0)
0000F31A 4E75                       		rts	
0000F31C                            ; ===========================================================================
0000F31C                            
0000F31C                            Obj39_Wait:				; XREF: Obj39_Index
0000F31C 1038 F605 0200 0070        		tpress	A+B+C,(Joypad)
0000F324 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000F326 0828 0000 001A             		btst	#0,$1A(a0)
0000F32C 6600                       		bne.s	Obj39_Display
0000F32E 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000F332 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000F334 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000F338 6000 0000                  		bra.w	DisplaySprite
0000F33C                            ; ===========================================================================
0000F33C                            
0000F33C                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000F33C                            		;tst.b	($FFFFFE1A).w	; is time over flag set?
0000F33C                            		;bne.s	Obj39_ResetLvl	; if yes, branch
0000F33C                            		;move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000F33C                            		;tst.b	($FFFFFE18).w	; do you have any continues?
0000F33C                            		;bne.s	Obj39_Display	; if yes, branch
0000F33C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000F342                            ; ===========================================================================
0000F342                            
0000F342                            ;Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000F342                            		;move.w	#1,($FFFFFE02).w ; restart level
0000F342                            
0000F342                            Obj39_Display:				; XREF: Obj39_ChgMode
0000F342 6000 0000                  		bra.w	DisplaySprite
0000F346                            ; ===========================================================================
0000F346                            ; ---------------------------------------------------------------------------
0000F346                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000F346                            ; ---------------------------------------------------------------------------
0000F346                            
0000F346                            Obj3A:					; XREF: Obj_Index
0000F346 7000                       		moveq	#0,d0
0000F348 1028 0024                  		move.b	$24(a0),d0
0000F34C 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000F350 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000F354                            ; ===========================================================================
0000F354 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000F356 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000F358 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000F35A 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000F35C 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000F35E 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000F360 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000F362 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000F364 0000                       		dc.w loc_C766-Obj3A_Index
0000F366                            ; ===========================================================================
0000F366                            
0000F366                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000F366 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000F36A 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000F36C 4E75                       		rts	
0000F36E                            ; ===========================================================================
0000F36E                            
0000F36E                            Obj3A_Main:
0000F36E 2248                       		movea.l	a0,a1
0000F370 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000F376 7206                       		moveq	#6,d1
0000F378                            
0000F378                            Obj3A_Loop:
0000F378 12BC 003A                  		move.b	#$3A,0(a1)
0000F37C 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000F380 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000F384 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000F388 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000F38C 135A 0024                  		move.b	(a2)+,$24(a1)
0000F390 101A                       		move.b	(a2)+,d0
0000F392 0C00 0006                  		cmpi.b	#6,d0
0000F396 6600                       		bne.s	loc_C5CA
0000F398 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000F39C                            
0000F39C                            loc_C5CA:
0000F39C 1340 001A                  		move.b	d0,$1A(a1)
0000F3A0 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000F3A8 337C 8580 0002             		move.w	#$8580,2(a1)
0000F3AE 137C 0000 0001             		move.b	#0,1(a1)
0000F3B4 43E9 0040                  		lea	$40(a1),a1
0000F3B8 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000F3BC                            
0000F3BC                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000F3BC 7210                       		moveq	#$10,d1		; set horizontal speed
0000F3BE 3028 0030                  		move.w	$30(a0),d0
0000F3C2 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000F3C6 6700                       		beq.s	loc_C61A	; if yes, branch
0000F3C8 6C00                       		bge.s	Obj3A_Move
0000F3CA 4441                       		neg.w	d1
0000F3CC                            
0000F3CC                            Obj3A_Move:
0000F3CC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000F3D0                            
0000F3D0                            loc_C5FE:				; XREF: loc_C61A
0000F3D0 3028 0008                  		move.w	8(a0),d0
0000F3D4 6B00                       		bmi.s	locret_C60E
0000F3D6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000F3DA 6400                       		bcc.s	locret_C60E	; if yes, branch
0000F3DC 6000 0000                  		bra.w	DisplaySprite
0000F3E0                            ; ===========================================================================
0000F3E0                            
0000F3E0                            locret_C60E:
0000F3E0 4E75                       		rts	
0000F3E2                            ; ===========================================================================
0000F3E2                            
0000F3E2                            loc_C610:				; XREF: loc_C61A
0000F3E2 117C 000E 0024             		move.b	#$E,$24(a0)
0000F3E8 6000 0000                  		bra.w	Obj3A_ChkPos2
0000F3EC                            ; ===========================================================================
0000F3EC                            
0000F3EC                            loc_C61A:				; XREF: Obj3A_ChkPos
0000F3EC 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000F3F2 67EE                       		beq.s	loc_C610
0000F3F4 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000F3FA 66D4                       		bne.s	loc_C5FE
0000F3FC 5428 0024                  		addq.b	#2,$24(a0)
0000F400 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000F406                            
0000F406                            Obj3A_Wait:				; XREF: Obj3A_Index
0000F406 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000F40A 6600                       		bne.s	Obj3A_Display
0000F40C 5428 0024                  		addq.b	#2,$24(a0)
0000F410                            
0000F410                            Obj3A_Display:
0000F410 6000 0000                  		bra.w	DisplaySprite
0000F414                            ; ===========================================================================
0000F414                            
0000F414                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000F414 6100 0000                  		bsr.w	DisplaySprite
0000F418 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000F41E 7000                       		moveq	#0,d0
0000F420 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000F424 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000F426 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000F42A 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000F430                            
0000F430                            Obj3A_RingBonus:
0000F430 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000F434 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000F436 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000F43A 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000F440                            
0000F440                            Obj3A_ChkBonus:
0000F440 4A40                       		tst.w	d0		; is there any bonus?
0000F442 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000F444 303C 00C5                  		move.w	#$C5,d0
0000F448 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000F44E 5428 0024                  		addq.b	#2,$24(a0)
0000F452 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000F458 6600                       		bne.s	Obj3A_SetDelay
0000F45A 5828 0024                  		addq.b	#4,$24(a0)
0000F45E                            
0000F45E                            Obj3A_SetDelay:
0000F45E 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000F464                            
0000F464                            locret_C692:
0000F464 4E75                       		rts	
0000F466                            ; ===========================================================================
0000F466                            
0000F466                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000F466 4EB9 0000 0000             		jsr	AddPoints
0000F46C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000F470 0200 0003                  		andi.b	#3,d0
0000F474 66EE                       		bne.s	locret_C692
0000F476 303C 00CD                  		move.w	#$CD,d0
0000F47A 4EF9 0000 12D0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000F480                            ; ===========================================================================
0000F480                            
0000F480                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000F480 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; move zone number to d0
0000F484 0240 0007                  		andi.w	#7,d0
0000F488 E748                       		lsl.w	#3,d0		; multiply by 8
0000F48A 1238 FE11                  		move.b	($FFFFFE11).w,d1 ; move act number to d1
0000F48E 0241 0003                  		andi.w	#3,d1
0000F492 D241                       		add.w	d1,d1		; double it
0000F494 D041                       		add.w	d1,d0
0000F496 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000F49A 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000F49E 4A40                       		tst.w	d0
0000F4A0 6600                       		bne.s	Obj3A_ChkSS
0000F4A2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000F4A8 6000                       		bra.s	Obj3A_Display2
0000F4AA                            ; ===========================================================================
0000F4AA                            
0000F4AA                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000F4AA 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000F4AE 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000F4B2 6700                       		beq.s	VBlank_Sub08A	; if not, branch
0000F4B4 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000F4BA 6000                       		bra.s	Obj3A_Display2
0000F4BC                            ; ===========================================================================
0000F4BC                            
0000F4BC                            VBlank_Sub08A:				; XREF: Obj3A_ChkSS
0000F4BC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000F4C2                            
0000F4C2                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000F4C2 6000 0000                  		bra.w	DisplaySprite
0000F4C6                            ; ===========================================================================
0000F4C6                            ; ---------------------------------------------------------------------------
0000F4C6                            ; Level	order array
0000F4C6                            ; ---------------------------------------------------------------------------
0000F4C6                            LevelOrder:	incbin	misc\lvl_ord.bin
0000F4F6                            		even
0000F4F6                            ; ===========================================================================
0000F4F6                            
0000F4F6                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000F4F6 7220                       		moveq	#$20,d1		; set horizontal speed
0000F4F8 3028 0032                  		move.w	$32(a0),d0
0000F4FC B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000F500 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000F502 6C00                       		bge.s	Obj3A_Move2
0000F504 4441                       		neg.w	d1
0000F506                            
0000F506                            Obj3A_Move2:
0000F506 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000F50A 3028 0008                  		move.w	8(a0),d0
0000F50E 6B00                       		bmi.s	locret_C748
0000F510 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000F514 6400                       		bcc.s	locret_C748	; if yes, branch
0000F516 6000 0000                  		bra.w	DisplaySprite
0000F51A                            ; ===========================================================================
0000F51A                            
0000F51A                            locret_C748:
0000F51A 4E75                       		rts	
0000F51C                            ; ===========================================================================
0000F51C                            
0000F51C                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000F51C 11FC 0000 FFFE                             move.b	#0,($FFFFFFFE).w    ; clear win flag ($FFFFFFFE).w
0000F522 4238 F7CC                                  clr.b	($FFFFF7CC).w	; unlock controls
0000F526 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000F52C 6600 0000                  		bne.w	DeleteObject
0000F530 5428 0024                  		addq.b	#2,$24(a0)
0000F534 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000F538 303C 0093                  		move.w	#$93,d0
0000F53C 4EF9 0000 12CA             		jmp	(PlaySound).l	; play FZ music
0000F542                            ; ===========================================================================
0000F542                            
0000F542                            loc_C766:				; XREF: Obj3A_Index
0000F542 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000F546 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000F54C 6700 0000                  		beq.w	DeleteObject
0000F550 4E75                       		rts	
0000F552                            ; ===========================================================================
0000F552 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000F558 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000F55A FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000F560 0201                       		dc.b 2,	1
0000F562                            		incbin "mapbin\sonichaspassed_actconf.bin"	; act
0000F568 0206                       		dc.b 2,	6
0000F56A 0520 0120 00EC             		dc.w $520, $120, $EC
0000F570 0202                       		dc.b 2,	2
0000F572 0540 0120 00FC             		dc.w $540, $120, $FC
0000F578 0203                       		dc.b 2,	3
0000F57A 0560 0120 010C             		dc.w $560, $120, $10C
0000F580 0204                       		dc.b 2,	4
0000F582 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000F588 0205                       		dc.b 2,	5
0000F58A                            ; ===========================================================================
0000F58A                            ; ---------------------------------------------------------------------------
0000F58A                            ; Object 7E - special stage results screen
0000F58A                            ; ---------------------------------------------------------------------------
0000F58A                            
0000F58A                            Obj7E:					; XREF: Obj_Index
0000F58A 7000                       		moveq	#0,d0
0000F58C 1028 0024                  		move.b	$24(a0),d0
0000F590 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000F594 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000F598                            ; ===========================================================================
0000F598 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000F59A 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000F59C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000F59E 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000F5A0 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000F5A2 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000F5A4 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000F5A6 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000F5A8 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000F5AA 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000F5AC 0000                       		dc.w loc_C91A-Obj7E_Index
0000F5AE                            ; ===========================================================================
0000F5AE                            
0000F5AE                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000F5AE 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000F5B2 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000F5B4 4E75                       		rts	
0000F5B6                            ; ===========================================================================
0000F5B6                            
0000F5B6                            Obj7E_Main:
0000F5B6 2248                       		movea.l	a0,a1
0000F5B8 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000F5BE 7203                       		moveq	#3,d1
0000F5C0 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000F5C6 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000F5C8 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000F5CA                            
0000F5CA                            Obj7E_Loop:
0000F5CA 12BC 007E                  		move.b	#$7E,0(a1)
0000F5CE 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000F5D2 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000F5D6 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000F5DA 135A 0024                  		move.b	(a2)+,$24(a1)
0000F5DE 135A 001A                  		move.b	(a2)+,$1A(a1)
0000F5E2 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000F5EA 337C 8580 0002             		move.w	#$8580,2(a1)
0000F5F0 137C 0000 0001             		move.b	#0,1(a1)
0000F5F6 43E9 0040                  		lea	$40(a1),a1
0000F5FA 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000F5FE                            
0000F5FE 7007                       		moveq	#7,d0
0000F600 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000F604 6700                       		beq.s	loc_C842
0000F606 7000                       		moveq	#0,d0
0000F608 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000F60C 6600                       		bne.s	loc_C842	; if not, branch
0000F60E 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000F610 317C 0018 0008             		move.w	#$18,8(a0)
0000F616 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000F61C                            
0000F61C                            loc_C842:
0000F61C 1140 001A                  		move.b	d0,$1A(a0)
0000F620                            
0000F620                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000F620 7210                       		moveq	#$10,d1		; set horizontal speed
0000F622 3028 0030                  		move.w	$30(a0),d0
0000F626 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000F62A 6700                       		beq.s	loc_C86C	; if yes, branch
0000F62C 6C00                       		bge.s	Obj7E_Move
0000F62E 4441                       		neg.w	d1
0000F630                            
0000F630                            Obj7E_Move:
0000F630 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000F634                            
0000F634                            loc_C85A:				; XREF: loc_C86C
0000F634 3028 0008                  		move.w	8(a0),d0
0000F638 6B00                       		bmi.s	locret_C86A
0000F63A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000F63E 6400                       		bcc.s	locret_C86A	; if yes, branch
0000F640 6000 0000                  		bra.w	DisplaySprite
0000F644                            ; ===========================================================================
0000F644                            
0000F644                            locret_C86A:
0000F644 4E75                       		rts	
0000F646                            ; ===========================================================================
0000F646                            
0000F646                            loc_C86C:				; XREF: Obj7E_ChkPos
0000F646 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000F64C 66E6                       		bne.s	loc_C85A
0000F64E 5428 0024                  		addq.b	#2,$24(a0)
0000F652 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000F658 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000F65E                            
0000F65E                            Obj7E_Wait:				; XREF: Obj7E_Index
0000F65E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000F662 6600                       		bne.s	Obj7E_Display
0000F664 5428 0024                  		addq.b	#2,$24(a0)
0000F668                            
0000F668                            Obj7E_Display:
0000F668 6000 0000                  		bra.w	DisplaySprite
0000F66C                            ; ===========================================================================
0000F66C                            
0000F66C                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000F66C 6100 0000                  		bsr.w	DisplaySprite
0000F670 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000F676 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000F67A 6700                       		beq.s	loc_C8C4	; if yes, branch
0000F67C 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000F682 700A                       		moveq	#10,d0		; add 10 to score
0000F684 4EB9 0000 0000             		jsr	AddPoints
0000F68A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000F68E 0200 0003                  		andi.b	#3,d0
0000F692 6600                       		bne.s	locret_C8EA
0000F694 303C 00CD                  		move.w	#$CD,d0
0000F698 4EF9 0000 12D0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000F69E                            ; ===========================================================================
0000F69E                            
0000F69E                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000F69E 303C 00C5                  		move.w	#$C5,d0
0000F6A2 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000F6A8 5428 0024                  		addq.b	#2,$24(a0)
0000F6AC 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000F6B2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000F6B8 6500                       		bcs.s	locret_C8EA	; if not, branch
0000F6BA 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000F6C0 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000F6C4                            
0000F6C4                            locret_C8EA:
0000F6C4 4E75                       		rts	
0000F6C6                            ; ===========================================================================
0000F6C6                            
0000F6C6                            Obj7E_Exit:				; XREF: Obj7E_Index
0000F6C6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000F6CC 6000 0000                  		bra.w	DisplaySprite
0000F6D0                            ; ===========================================================================
0000F6D0                            
0000F6D0                            Obj7E_Continue:				; XREF: Obj7E_Index
0000F6D0 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000F6D6 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000F6DC 303C 00BF                  		move.w	#$BF,d0
0000F6E0 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play continues music
0000F6E6 5428 0024                  		addq.b	#2,$24(a0)
0000F6EA 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000F6F0 6000 0000                  		bra.w	DisplaySprite
0000F6F4                            ; ===========================================================================
0000F6F4                            
0000F6F4                            loc_C91A:				; XREF: Obj7E_Index
0000F6F4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000F6F8 0200 000F                  		andi.b	#$F,d0
0000F6FC 6600                       		bne.s	Obj7E_Display2
0000F6FE 0868 0000 001A             		bchg	#0,$1A(a0)
0000F704                            
0000F704                            Obj7E_Display2:
0000F704 6000 0000                  		bra.w	DisplaySprite
0000F708                            ; ===========================================================================
0000F708 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000F70E 0200                       		dc.b 2,	0		; rountine number, frame number
0000F710 0320 0120 0118             		dc.w $320, $120, $118
0000F716 0201                       		dc.b 2,	1
0000F718 0360 0120 0128             		dc.w $360, $120, $128
0000F71E 0202                       		dc.b 2,	2
0000F720 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000F726 0203                       		dc.b 2,	3
0000F728 03A0 0120 0138             		dc.w $3A0, $120, $138
0000F72E 0206                       		dc.b 2,	6
0000F730                            ; ===========================================================================
0000F730                            ; ---------------------------------------------------------------------------
0000F730                            ; Object 7F - chaos emeralds from the special stage results screen
0000F730                            ; ---------------------------------------------------------------------------
0000F730                            
0000F730                            Obj7F:					; XREF: Obj_Index
0000F730 7000                       		moveq	#0,d0
0000F732 1028 0024                  		move.b	$24(a0),d0
0000F736 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000F73A 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000F73E                            ; ===========================================================================
0000F73E 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000F740 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000F742                            
0000F742                            ; ---------------------------------------------------------------------------
0000F742                            ; X-axis positions for chaos emeralds
0000F742                            ; ---------------------------------------------------------------------------
0000F742 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000F74E                            ; ===========================================================================
0000F74E                            
0000F74E                            Obj7F_Main:				; XREF: Obj7F_Index
0000F74E 2248                       		movea.l	a0,a1
0000F750 45F9 0000 F742             		lea	(Obj7F_PosData).l,a2
0000F756 7400                       		moveq	#0,d2
0000F758 7200                       		moveq	#0,d1
0000F75A 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000F75E 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000F760 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000F764                            
0000F764                            Obj7F_Loop:
0000F764 12BC 007F                  		move.b	#$7F,0(a1)
0000F768 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000F76C 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000F772 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000F776 1633 2000                  		move.b	(a3,d2.w),d3
0000F77A 1343 001A                  		move.b	d3,$1A(a1)
0000F77E 1343 001C                  		move.b	d3,$1C(a1)
0000F782 5202                       		addq.b	#1,d2
0000F784 5429 0024                  		addq.b	#2,$24(a1)
0000F788 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000F790 337C 8541 0002             		move.w	#$8541,2(a1)
0000F796 137C 0000 0001             		move.b	#0,1(a1)
0000F79C 43E9 0040                  		lea	$40(a1),a1	; next object
0000F7A0 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000F7A4                            
0000F7A4                            Obj7F_Flash:				; XREF: Obj7F_Index
0000F7A4 1028 001A                  		move.b	$1A(a0),d0
0000F7A8 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000F7AE 0C00 0006                  		cmpi.b	#6,d0
0000F7B2 6600                       		bne.s	Obj7F_Display
0000F7B4 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000F7BA                            
0000F7BA                            Obj7F_Display:
0000F7BA 6000 0000                  		bra.w	DisplaySprite
0000F7BE                            ; ===========================================================================
0000F7BE                            ; ---------------------------------------------------------------------------
0000F7BE                            ; Sprite mappings - zone title cards
0000F7BE                            ; ---------------------------------------------------------------------------
0000F7BE 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000F7C0 0000                       		dc.w byte_CA2C-Map_obj34
0000F7C2 0000                       		dc.w byte_CA5A-Map_obj34
0000F7C4 0000                       		dc.w byte_CA7A-Map_obj34
0000F7C6 0000                       		dc.w byte_CAA8-Map_obj34
0000F7C8 0000                       		dc.w byte_CADC-Map_obj34
0000F7CA 0000                       		dc.w byte_CB10-Map_obj34
0000F7CC 0000                       		dc.w byte_CB26-Map_obj34
0000F7CE 0000                       		dc.w byte_CB31-Map_obj34
0000F7D0 0000                       		dc.w byte_CB3C-Map_obj34
0000F7D2 0000                       		dc.w byte_CB47-Map_obj34
0000F7D4 0000                       		dc.w byte_CB8A-Map_obj34
0000F7D6                            
0000F7D6                            ; Vladikcomper: Title Cards mappins were converted to binary data to be 
0000F7D6                            ;		easily edited in S1HS.
0000F7D6                            byte_C9FE:      incbin   "mapbin\ttlcards_map_0.bin"
0000F804                            		even
0000F804                            byte_CA2C:      incbin   "mapbin\ttlcards_map_1.bin"
0000F83C                            		even
0000F83C                            byte_CA5A:	incbin   "mapbin\ttlcards_map_2.bin"
0000F870 00                         		even
0000F870                            byte_CA7A:	incbin   "mapbin\ttlcards_map_3.bin"
0000F8AE 00                         		even
0000F8AE                            byte_CAA8:	incbin   "mapbin\ttlcards_map_4.bin"
0000F8EC 00                         		even
0000F8EC                            byte_CADC:	incbin   "mapbin\ttlcards_map_5.bin"
0000F92A 00                         		even
0000F92A 04                         byte_CB10:	dc.b 4			; ZONE
0000F92B F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000F930 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000F935 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000F93A F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000F93F 00                         		dc.b 0
0000F940 02                         byte_CB26:	dc.b 2			; ACT 1
0000F941 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000F946 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000F94B 02                         byte_CB31:	dc.b 2			; ACT 2
0000F94C 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000F951 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000F956 02                         byte_CB3C:	dc.b 2			; ACT 3
0000F957 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000F95C F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000F961 0D                         byte_CB47:	dc.b $D			; Oval
0000F962 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000F967 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000F96C EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000F971 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000F976 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000F97B 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000F980 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000F985 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000F98A EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000F98F F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000F994 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000F999 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000F99E 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000F9A3 00                         		dc.b 0
0000F9A4                            byte_CB8A:	incbin   "mapbin\ttlcards_map_6.bin"
0000F9DC                            		even
0000F9DC                            ; ---------------------------------------------------------------------------
0000F9DC                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000F9DC                            ; ---------------------------------------------------------------------------
0000F9DC                            Map_obj39:
0000F9DC                            	include "_maps\obj39.asm"
0000F9DC                            ; ---------------------------------------------------------------------------
0000F9DC                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000F9DC                            ; ---------------------------------------------------------------------------
0000F9DC 0000                       		dc.w byte_CBAC-Map_obj39
0000F9DE 0000                       		dc.w byte_CBB7-Map_obj39
0000F9E0 0000                       		dc.w byte_CBC2-Map_obj39
0000F9E2 0000                       		dc.w byte_CBCD-Map_obj39
0000F9E4 02                         byte_CBAC:	dc.b 2
0000F9E5 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000F9EA F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000F9EF 02                         byte_CBB7:	dc.b 2
0000F9F0 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000F9F5 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000F9FA 02                         byte_CBC2:	dc.b 2
0000F9FB F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000FA00 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000FA05 02                         byte_CBCD:	dc.b 2
0000FA06 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000FA0B F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000FA10                            		even
0000FA10                            		even
0000FA10                            
0000FA10                            ; ---------------------------------------------------------------------------
0000FA10                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000FA10                            ; ---------------------------------------------------------------------------
0000FA10 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000FA12 0000                       		dc.w byte_CC13-Map_obj3A
0000FA14 0000                       		dc.w byte_CC32-Map_obj3A
0000FA16 0000                       		dc.w byte_CC51-Map_obj3A
0000FA18 0000                       		dc.w byte_CC75-Map_obj3A
0000FA1A FF51                       		dc.w byte_CB47-Map_obj3A
0000FA1C FF30                       		dc.w byte_CB26-Map_obj3A
0000FA1E FF3B                       		dc.w byte_CB31-Map_obj3A
0000FA20 FF46                       		dc.w byte_CB3C-Map_obj3A
0000FA22                            byte_CBEA:	incbin "mapbin\sonichaspassed_map_0.bin"
0000FA42 00                         		even
0000FA42                            byte_CC13:	incbin "mapbin\sonichaspassed_map_1.bin"
0000FA66                            		even
0000FA66 06                         byte_CC32:	dc.b 6			; SCORE
0000FA67 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000FA6C F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000FA71 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000FA76 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000FA7B F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000FA80 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000FA85 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000FA86 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000FA8B F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000FA90 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000FA95 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000FA9A FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000FA9F F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000FAA4 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000FAA9 07                         byte_CC75:	dc.b 7			; RING BONUS
0000FAAA F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000FAAF F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000FAB4 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000FAB9 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000FABE FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000FAC3 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000FAC8 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000FACE 00                         		even
0000FACE                            ; ---------------------------------------------------------------------------
0000FACE                            ; Sprite mappings - special stage results screen
0000FACE                            ; ---------------------------------------------------------------------------
0000FACE 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000FAD0 0000                       		dc.w byte_CCEE-Map_obj7E
0000FAD2 0000                       		dc.w byte_CD0D-Map_obj7E
0000FAD4 FE93                       		dc.w byte_CB47-Map_obj7E
0000FAD6 0000                       		dc.w byte_CD31-Map_obj7E
0000FAD8 0000                       		dc.w byte_CD46-Map_obj7E
0000FADA 0000                       		dc.w byte_CD5B-Map_obj7E
0000FADC 0000                       		dc.w byte_CD6B-Map_obj7E
0000FADE 0000                       		dc.w byte_CDA8-Map_obj7E
0000FAE0 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000FAE1 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000FAE6 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000FAEB F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000FAF0 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000FAF5 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000FAFA F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000FAFF F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000FB04 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000FB09 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000FB0E F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000FB13 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000FB18 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000FB1D F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000FB22 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000FB23 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000FB28 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000FB2D F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000FB32 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000FB37 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000FB3C FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000FB41 07                         byte_CD0D:	dc.b 7
0000FB42 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000FB47 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000FB4C F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000FB51 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000FB56 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000FB5B F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000FB60 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000FB65 04                         byte_CD31:	dc.b 4
0000FB66 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000FB6B F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000FB70 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000FB75 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000FB7A 04                         byte_CD46:	dc.b 4
0000FB7B F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000FB80 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000FB85 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000FB8A F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000FB8F 03                         byte_CD5B:	dc.b 3
0000FB90 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000FB95 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000FB9A F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000FB9F 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000FBA0 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000FBA5 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000FBAA F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000FBAF F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000FBB4 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000FBB9 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000FBBE F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000FBC3 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000FBC8 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000FBCD F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000FBD2 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000FBD7 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000FBDC 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000FBDD F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000FBE2 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000FBE7 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000FBEC F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000FBF1 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000FBF6 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000FBFB F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000FC00 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000FC05 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000FC0A F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000FC0F F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000FC14 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000FC19 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000FC1E F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000FC23 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000FC28                            		even
0000FC28                            ; ---------------------------------------------------------------------------
0000FC28                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000FC28                            ; ---------------------------------------------------------------------------
0000FC28                            Map_obj7F:
0000FC28                            	include "_maps\obj7F.asm"
0000FC28                            ; ---------------------------------------------------------------------------
0000FC28                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000FC28                            ; ---------------------------------------------------------------------------
0000FC28 0000                       		dc.w byte_CE02-Map_obj7F
0000FC2A 0000                       		dc.w byte_CE08-Map_obj7F
0000FC2C 0000                       		dc.w byte_CE0E-Map_obj7F
0000FC2E 0000                       		dc.w byte_CE14-Map_obj7F
0000FC30 0000                       		dc.w byte_CE1A-Map_obj7F
0000FC32 0000                       		dc.w byte_CE20-Map_obj7F
0000FC34 0000                       		dc.w byte_CE26-Map_obj7F
0000FC36 01                         byte_CE02:	dc.b 1
0000FC37 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000FC3C 01                         byte_CE08:	dc.b 1
0000FC3D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000FC42 01                         byte_CE0E:	dc.b 1
0000FC43 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000FC48 01                         byte_CE14:	dc.b 1
0000FC49 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000FC4E 01                         byte_CE1A:	dc.b 1
0000FC4F F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000FC54 01                         byte_CE20:	dc.b 1
0000FC55 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000FC5A 00                         byte_CE26:	dc.b 0			; Blank frame
0000FC5C 00                         		even
0000FC5C 00                         		even
0000FC5C                            
0000FC5C                            ; ===========================================================================
0000FC5C                            ; ---------------------------------------------------------------------------
0000FC5C                            ; Object 36 - spikes
0000FC5C                            ; ---------------------------------------------------------------------------
0000FC5C                            
0000FC5C                            Obj36:					; XREF: Obj_Index
0000FC5C 7000                       		moveq	#0,d0
0000FC5E 1028 0024                  		move.b	$24(a0),d0
0000FC62 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000FC66 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000FC6A                            ; ===========================================================================
0000FC6A 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000FC6C 0000                       		dc.w Obj36_Solid-Obj36_Index
0000FC6E                            
0000FC6E 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000FC70 0110                       		dc.b 1,	$10
0000FC72 0204                       		dc.b 2,	4
0000FC74 031C                       		dc.b 3,	$1C
0000FC76 0440                       		dc.b 4,	$40
0000FC78 0510                       		dc.b 5,	$10
0000FC7A                            ; ===========================================================================
0000FC7A                            
0000FC7A                            Obj36_Main:				; XREF: Obj36_Index
0000FC7A 5428 0024                  		addq.b	#2,$24(a0)
0000FC7E 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000FC86 317C 051B 0002             		move.w	#$51B,2(a0)
0000FC8C 0028 0004 0001             		ori.b	#4,1(a0)
0000FC92 117C 0004 0018             		move.b	#4,$18(a0)
0000FC98 1028 0028                  		move.b	$28(a0),d0
0000FC9C 0228 000F 0028             		andi.b	#$F,$28(a0)
0000FCA2 0240 00F0                  		andi.w	#$F0,d0
0000FCA6 43F9 0000 FC6E             		lea	(Obj36_Var).l,a1
0000FCAC E648                       		lsr.w	#3,d0
0000FCAE D2C0                       		adda.w	d0,a1
0000FCB0 1159 001A                  		move.b	(a1)+,$1A(a0)
0000FCB4 1159 0019                  		move.b	(a1)+,$19(a0)
0000FCB8 3168 0008 0030             		move.w	8(a0),$30(a0)
0000FCBE 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000FCC4                            
0000FCC4                            Obj36_Solid:				; XREF: Obj36_Index
0000FCC4 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000FCC8 343C 0004                  		move.w	#4,d2
0000FCCC 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000FCD2 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000FCD4 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000FCDA 6600                       		bne.s	Obj36_Upright	; if not, branch
0000FCDC 343C 0014                  		move.w	#$14,d2
0000FCE0                            
0000FCE0                            ; Spikes types $1x and $5x face	sideways
0000FCE0                            
0000FCE0                            Obj36_SideWays:				; XREF: Obj36_Solid
0000FCE0 323C 001B                  		move.w	#$1B,d1
0000FCE4 3602                       		move.w	d2,d3
0000FCE6 5243                       		addq.w	#1,d3
0000FCE8 3828 0008                  		move.w	8(a0),d4
0000FCEC 6100 0000                  		bsr.w	SolidObject
0000FCF0 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on spikes?
0000FCF6 6600                       		bne.s	Obj36_Display	; if yes, branch
0000FCF8 0C44 0001                  		cmpi.w	#1,d4
0000FCFC 6700                       		beq.s	Obj36_Hurt
0000FCFE 6000                       		bra.s	Obj36_Display
0000FD00                            ; ===========================================================================
0000FD00                            
0000FD00                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000FD00                            
0000FD00                            Obj36_Upright:				; XREF: Obj36_Solid
0000FD00 7200                       		moveq	#0,d1
0000FD02 1228 0019                  		move.b	$19(a0),d1
0000FD06 0641 000B                  		addi.w	#$B,d1
0000FD0A 343C 0010                  		move.w	#$10,d2
0000FD0E 363C 0011                  		move.w	#$11,d3
0000FD12 3828 0008                  		move.w	8(a0),d4
0000FD16 6100 0000                  		bsr.w	SolidObject
0000FD1A 0828 0003 0022             		btst	#3,$22(a0) ; is Sonic standing on spikes?
0000FD20 6600                       		bne.s	Obj36_Hurt ; if yes, branch
0000FD22 4A44                       		tst.w	d4
0000FD24 6A00                       		bpl.s	Obj36_Display
0000FD26                            
0000FD26                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000FD26 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000FD2A 6600                       		bne.s	Obj36_Display	; if yes, branch
0000FD2C 4A78 D030                  		tst.w   ($FFFFD030).w	; is Sonic invulnerable?
0000FD30 6600                       		bne.s   Obj36_Display	; if yes, branch
0000FD32 2F08                       		move.l	a0,-(sp)	; save a0
0000FD34 2448                       		movea.l	a0,a2
0000FD36 41F8 D000                  		lea	($FFFFD000).w,a0; load Sonic object
0000FD3A 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000FD40 6400                       		bcc.s	loc_CF20
0000FD42 2628 000C                  		move.l	$C(a0),d3
0000FD46 3028 0012                  		move.w	$12(a0),d0
0000FD4A 48C0                       		ext.l	d0
0000FD4C E180                       		asl.l	#8,d0
0000FD4E 9680                       		sub.l	d0,d3
0000FD50 2143 000C                  		move.l	d3,$C(a0)
0000FD54 4EB9 0000 0000             		jsr	HurtSonic
0000FD5A                            
0000FD5A                            loc_CF20:
0000FD5A 205F                       		movea.l	(sp)+,a0	; load saved a0
0000FD5C                            
0000FD5C                            Obj36_Display:
0000FD5C 6100 0000                  		bsr.w	DisplaySprite
0000FD60 3028 0030                  		move.w	$30(a0),d0
0000FD64 0240 FF80                  		andi.w	#$FF80,d0
0000FD68 3238 F700                  		move.w	($FFFFF700).w,d1; move camera X-pos to d1
0000FD6C 0441 0080                  		subi.w	#$80,d1
0000FD70 0241 FF80                  		andi.w	#$FF80,d1
0000FD74 9041                       		sub.w	d1,d0
0000FD76 0C40 0280                  		cmpi.w	#$280,d0        ; is object far enough?
0000FD7A 6200 0000                  		bhi.w	DeleteObject	; if so, delete it
0000FD7E 4E75                       		rts	
0000FD80                            ; ===========================================================================
0000FD80                            
0000FD80                            Obj36_Type0x:				; XREF: Obj36_Solid
0000FD80 7000                       		moveq	#0,d0
0000FD82 1028 0028                  		move.b	$28(a0),d0
0000FD86 D040                       		add.w	d0,d0
0000FD88 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000FD8C 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000FD90                            ; ===========================================================================
0000FD90 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000FD92 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000FD94 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000FD96                            ; ===========================================================================
0000FD96                            
0000FD96                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000FD96 4E75                       		rts			; don't move the object
0000FD98                            ; ===========================================================================
0000FD98                            
0000FD98                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000FD98 6100 0000                  		bsr.w	Obj36_Wait
0000FD9C 7000                       		moveq	#0,d0
0000FD9E 1028 0034                  		move.b	$34(a0),d0
0000FDA2 D068 0032                  		add.w	$32(a0),d0
0000FDA6 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000FDAA 4E75                       		rts	
0000FDAC                            ; ===========================================================================
0000FDAC                            
0000FDAC                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000FDAC 6100 0000                  		bsr.w	Obj36_Wait
0000FDB0 7000                       		moveq	#0,d0
0000FDB2 1028 0034                  		move.b	$34(a0),d0
0000FDB6 D068 0030                  		add.w	$30(a0),d0
0000FDBA 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000FDBE 4E75                       		rts	
0000FDC0                            ; ===========================================================================
0000FDC0                            
0000FDC0                            Obj36_Wait:
0000FDC0 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000FDC4 6700                       		beq.s	loc_CFA4	; if yes, branch
0000FDC6 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000FDCA 6600                       		bne.s	locret_CFE6
0000FDCC 4A28 0001                  		tst.b	1(a0)
0000FDD0 6A00                       		bpl.s	locret_CFE6
0000FDD2 303C 00B6                  		move.w	#$B6,d0
0000FDD6 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000FDDC 6000                       		bra.s	locret_CFE6
0000FDDE                            ; ===========================================================================
0000FDDE                            
0000FDDE                            loc_CFA4:
0000FDDE 4A68 0036                  		tst.w	$36(a0)
0000FDE2 6700                       		beq.s	loc_CFC6
0000FDE4 0468 0800 0034             		subi.w	#$800,$34(a0)
0000FDEA 6400                       		bcc.s	locret_CFE6
0000FDEC 317C 0000 0034             		move.w	#0,$34(a0)
0000FDF2 317C 0000 0036             		move.w	#0,$36(a0)
0000FDF8 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000FDFE 6000                       		bra.s	locret_CFE6
0000FE00                            ; ===========================================================================
0000FE00                            
0000FE00                            loc_CFC6:
0000FE00 0668 0800 0034             		addi.w	#$800,$34(a0)
0000FE06 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000FE0C 6500                       		bcs.s	locret_CFE6
0000FE0E 317C 2000 0034             		move.w	#$2000,$34(a0)
0000FE14 317C 0001 0036             		move.w	#1,$36(a0)
0000FE1A 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000FE20                            
0000FE20                            locret_CFE6:
0000FE20 4E75                       		rts	
0000FE22                            ; ===========================================================================
0000FE22                            ; ---------------------------------------------------------------------------
0000FE22                            ; Sprite mappings - spikes
0000FE22                            ; ---------------------------------------------------------------------------
0000FE22                            Map_obj36:
0000FE22                            	include "_maps\obj36.asm"
0000FE22                            ; ---------------------------------------------------------------------------
0000FE22                            ; Sprite mappings - spikes
0000FE22                            ; ---------------------------------------------------------------------------
0000FE22 0000                       		dc.w byte_CFF4-Map_obj36
0000FE24 0000                       		dc.w byte_D004-Map_obj36
0000FE26 0000                       		dc.w byte_D014-Map_obj36
0000FE28 0000                       		dc.w byte_D01A-Map_obj36
0000FE2A 0000                       		dc.w byte_D02A-Map_obj36
0000FE2C 0000                       		dc.w byte_D049-Map_obj36
0000FE2E 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000FE2F F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000FE34 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000FE39 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000FE3E 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000FE3F EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000FE44 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000FE49 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000FE4E 01                         byte_D014:	dc.b 1			; 1 spike
0000FE4F F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000FE54 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000FE55 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000FE5A F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000FE5F F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000FE64 06                         byte_D02A:	dc.b 6			; 6 spikes
0000FE65 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000FE6A F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000FE6F F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000FE74 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000FE79 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000FE7E F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000FE83 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000FE84 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000FE8A 00                         		even
0000FE8A 00                         		even
0000FE8A                            
0000FE8A                            ; ===========================================================================
0000FE8A                            ; ---------------------------------------------------------------------------
0000FE8A                            ; Object 3B - purple rock (GHZ)
0000FE8A                            ; ---------------------------------------------------------------------------
0000FE8A                            
0000FE8A                            Obj3B:					; XREF: Obj_Index
0000FE8A 7000                       		moveq	#0,d0
0000FE8C 1028 0024                  		move.b	$24(a0),d0
0000FE90 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000FE94 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000FE98                            ; ===========================================================================
0000FE98 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000FE9A 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000FE9C                            ; ===========================================================================
0000FE9C                            
0000FE9C                            Obj3B_Main:				; XREF: Obj3B_Index
0000FE9C 5428 0024                  		addq.b	#2,$24(a0)
0000FEA0 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000FEA8 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000FEAE 117C 0004 0001             		move.b	#4,1(a0)
0000FEB4 117C 0013 0019             		move.b	#$13,$19(a0)
0000FEBA 117C 0004 0018             		move.b	#4,$18(a0)
0000FEC0                            
0000FEC0                            Obj3B_Solid:				; XREF: Obj3B_Index
0000FEC0 323C 001B                  		move.w	#$1B,d1
0000FEC4 343C 0010                  		move.w	#$10,d2
0000FEC8 363C 0010                  		move.w	#$10,d3
0000FECC 3828 0008                  		move.w	8(a0),d4
0000FED0 6100 0000                  		bsr.w	SolidObject
0000FED4 6100 0000                  		bsr.w	DisplaySprite
0000FED8 3028 0008                  		move.w	8(a0),d0
0000FEDC 0240 FF80                  		andi.w	#$FF80,d0
0000FEE0 3238 F700                  		move.w	($FFFFF700).w,d1
0000FEE4 0441 0080                  		subi.w	#$80,d1
0000FEE8 0241 FF80                  		andi.w	#$FF80,d1
0000FEEC 9041                       		sub.w	d1,d0
0000FEEE 0C40 0280                  		cmpi.w	#$280,d0
0000FEF2 6200 0000                  		bhi.w	DeleteObject
0000FEF6 4E75                       		rts	
0000FEF8                            ; ===========================================================================
0000FEF8                            ; ---------------------------------------------------------------------------
0000FEF8                            ; Object 49 - waterfall	sound effect (GHZ)
0000FEF8                            ; ---------------------------------------------------------------------------
0000FEF8                            
0000FEF8                            Obj49:					; XREF: Obj_Index
0000FEF8 7000                       		moveq	#0,d0
0000FEFA 1028 0024                  		move.b	$24(a0),d0
0000FEFE 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000FF02 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000FF06                            ; ===========================================================================
0000FF06 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000FF08 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000FF0A                            ; ===========================================================================
0000FF0A                            
0000FF0A                            Obj49_Main:				; XREF: Obj49_Index
0000FF0A 5428 0024                  		addq.b	#2,$24(a0)
0000FF0E 117C 0004 0001             		move.b	#4,1(a0)
0000FF14                            
0000FF14                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000FF14 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000FF18 0200 003F                  		andi.b	#$3F,d0
0000FF1C 6600                       		bne.s	Obj49_ChkDel
0000FF1E 303C 00D0                  		move.w	#$D0,d0
0000FF22 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000FF28                            
0000FF28                            Obj49_ChkDel:
0000FF28 3028 0008                  		move.w	8(a0),d0
0000FF2C 0240 FF80                  		andi.w	#$FF80,d0
0000FF30 3238 F700                  		move.w	($FFFFF700).w,d1
0000FF34 0441 0080                  		subi.w	#$80,d1
0000FF38 0241 FF80                  		andi.w	#$FF80,d1
0000FF3C 9041                       		sub.w	d1,d0
0000FF3E 0C40 0280                  		cmpi.w	#$280,d0
0000FF42 6200 0000                  		bhi.w	DeleteObject
0000FF46 4E75                       		rts	
0000FF48                            ; ===========================================================================
0000FF48                            ; ---------------------------------------------------------------------------
0000FF48                            ; Sprite mappings - purple rock	(GHZ)
0000FF48                            ; ---------------------------------------------------------------------------
0000FF48                            Map_obj3B:
0000FF48                            	include "_maps\obj3B.asm"
0000FF48                            ; ---------------------------------------------------------------------------
0000FF48                            ; Sprite mappings - purple rock	(GHZ)
0000FF48                            ; ---------------------------------------------------------------------------
0000FF48 0000                       		dc.w byte_D110-Map_obj3B
0000FF4A 02                         byte_D110:	dc.b 2
0000FF4B F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000FF50 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000FF56 00                         		even
0000FF56 00                         		even
0000FF56                            
0000FF56                            ; ===========================================================================
0000FF56                            ; ---------------------------------------------------------------------------
0000FF56                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000FF56                            ; ---------------------------------------------------------------------------
0000FF56                            
0000FF56                            Obj3C:					; XREF: Obj_Index
0000FF56 7000                       		moveq	#0,d0
0000FF58 1028 0024                  		move.b	$24(a0),d0
0000FF5C 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000FF60 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000FF64 6000 0000                  		bra.w	MarkObjGone
0000FF68                            ; ===========================================================================
0000FF68 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000FF6A 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000FF6C 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000FF6E                            ; ===========================================================================
0000FF6E                            
0000FF6E                            Obj3C_Main:				; XREF: Obj3C_Index
0000FF6E 5428 0024                  		addq.b	#2,$24(a0)
0000FF72 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000FF7A 317C 450F 0002             		move.w	#$450F,2(a0)
0000FF80 117C 0004 0001             		move.b	#4,1(a0)
0000FF86 117C 0010 0019             		move.b	#$10,$19(a0)
0000FF8C 117C 0004 0018             		move.b	#4,$18(a0)
0000FF92 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000FF98                            
0000FF98                            Obj3C_Solid:				; XREF: Obj3C_Index
0000FF98 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000FF9E 323C 001B                  		move.w	#$1B,d1
0000FFA2 343C 0020                  		move.w	#$20,d2
0000FFA6 363C 0020                  		move.w	#$20,d3
0000FFAA 3828 0008                  		move.w	8(a0),d4
0000FFAE 6100 0000                  		bsr.w	SolidObject
0000FFB2 0828 0005 0022             		btst	#5,$22(a0)
0000FFB8 6600                       		bne.s	Obj3C_ChkRoll
0000FFBA                            
0000FFBA                            locret_D180:
0000FFBA 4E75                       		rts	
0000FFBC                            ; ===========================================================================
0000FFBC                            
0000FFBC                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000FFBC 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000FFC2 66F6                       		bne.s	locret_D180	; if not, branch
0000FFC4 3028 0030                  		move.w	$30(a0),d0
0000FFC8 6A00                       		bpl.s	Obj3C_ChkSpeed
0000FFCA 4440                       		neg.w	d0
0000FFCC                            
0000FFCC                            Obj3C_ChkSpeed:
0000FFCC 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000FFD0 65E8                       		bcs.s	locret_D180	; if not, branch
0000FFD2 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000FFD8 5869 0008                  		addq.w	#4,8(a1)
0000FFDC 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000FFE2 3028 0008                  		move.w	8(a0),d0
0000FFE6 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000FFEA 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000FFEC 5169 0008                  		subq.w	#8,8(a1)
0000FFF0 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000FFF6                            
0000FFF6                            Obj3C_Smash:
0000FFF6 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000FFFC 08A8 0005 0022             		bclr	#5,$22(a0)
00010002 08A9 0005 0022             		bclr	#5,$22(a1)
00010008 7207                       		moveq	#7,d1		; load 8 fragments
0001000A 343C 0070                  		move.w	#$70,d2
0001000E 6100                       		bsr.s	SmashObject
00010010                            
00010010                            Obj3C_FragMove:				; XREF: Obj3C_Index
00010010 6100 0000                  		bsr.w	SpeedToPos
00010014 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0001001A 6100 0000                  		bsr.w	DisplaySprite
0001001E 4A28 0001                  		tst.b	1(a0)
00010022 6A00 0000                  		bpl.w	DeleteObject
00010026 4E75                       		rts	
00010028                            
00010028                            ; ---------------------------------------------------------------------------
00010028                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
00010028                            ; ---------------------------------------------------------------------------
00010028                            
00010028                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010028                            
00010028                            
00010028                            SmashObject:				; XREF: Obj3C_Smash
00010028 7000                       		moveq	#0,d0
0001002A 1028 001A                  		move.b	$1A(a0),d0
0001002E D040                       		add.w	d0,d0
00010030 2668 0004                  		movea.l	4(a0),a3
00010034 D6F3 0000                  		adda.w	(a3,d0.w),a3
00010038 524B                       		addq.w	#1,a3
0001003A 08E8 0005 0001             		bset	#5,1(a0)
00010040 1810                       		move.b	0(a0),d4
00010042 1A28 0001                  		move.b	1(a0),d5
00010046 2248                       		movea.l	a0,a1
00010048 6000                       		bra.s	Smash_LoadFrag
0001004A                            ; ===========================================================================
0001004A                            
0001004A                            Smash_Loop:
0001004A 6100 0000                  		bsr.w	SingleObjLoad
0001004E 6600                       		bne.s	Smash_PlaySnd
00010050 5A4B                       		addq.w	#5,a3
00010052                            
00010052                            Smash_LoadFrag:				; XREF: SmashObject
00010052 137C 0004 0024             		move.b	#4,$24(a1)
00010058 1284                       		move.b	d4,0(a1)
0001005A 234B 0004                  		move.l	a3,4(a1)
0001005E 1345 0001                  		move.b	d5,1(a1)
00010062 3368 0008 0008             		move.w	8(a0),8(a1)
00010068 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001006E 3368 0002 0002             		move.w	2(a0),2(a1)
00010074 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001007A 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010080 335C 0010                  		move.w	(a4)+,$10(a1)
00010084 335C 0012                  		move.w	(a4)+,$12(a1)
00010088 B3C8                       		cmpa.l	a0,a1
0001008A 6400                       		bcc.s	loc_D268
0001008C 2F08                       		move.l	a0,-(sp)
0001008E 2049                       		movea.l	a1,a0
00010090 6100 0000                  		bsr.w	SpeedToPos
00010094 D568 0012                  		add.w	d2,$12(a0)
00010098 205F                       		movea.l	(sp)+,a0
0001009A 6100 0000                  		bsr.w	DisplaySprite2
0001009E                            
0001009E                            loc_D268:
0001009E 51C9 FFAA                  		dbf	d1,Smash_Loop
000100A2                            
000100A2                            Smash_PlaySnd:
000100A2 303C 00CB                  		move.w	#$CB,d0
000100A6 4EF9 0000 12D0             		jmp	(PlaySound_Special).l ;	play smashing sound
000100AC                            ; End of function SmashObject
000100AC                            
000100AC                            ; ===========================================================================
000100AC                            ; Smashed block	fragment speeds
000100AC                            ;
000100AC 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
000100B0 0600 FF00                  		dc.w $600, $FF00
000100B4 0600 0100                  		dc.w $600, $100
000100B8 0400 0500                  		dc.w $400, $500
000100BC 0600 FA00                  		dc.w $600, $FA00
000100C0 0800 FE00                  		dc.w $800, $FE00
000100C4 0800 0200                  		dc.w $800, $200
000100C8 0600 0600                  		dc.w $600, $600
000100CC                            
000100CC FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
000100D0 F800 FE00                  		dc.w $F800, $FE00
000100D4 F800 0200                  		dc.w $F800, $200
000100D8 FA00 0600                  		dc.w $FA00, $600
000100DC FC00 FB00                  		dc.w $FC00, $FB00
000100E0 FA00 FF00                  		dc.w $FA00, $FF00
000100E4 FA00 0100                  		dc.w $FA00, $100
000100E8 FC00 0500                  		dc.w $FC00, $500
000100EC                            ; ---------------------------------------------------------------------------
000100EC                            ; Sprite mappings - smashable walls (GHZ, SLZ)
000100EC                            ; ---------------------------------------------------------------------------
000100EC                            Map_obj3C:
000100EC                            	include "_maps\obj3C.asm"
000100EC                            ; ---------------------------------------------------------------------------
000100EC                            ; Sprite mappings - smashable walls (GHZ, SLZ)
000100EC                            ; ---------------------------------------------------------------------------
000100EC 0000                       		dc.w byte_D2BC-Map_obj3C
000100EE 0000                       		dc.w byte_D2E5-Map_obj3C
000100F0 0000                       		dc.w byte_D30E-Map_obj3C
000100F2 08                         byte_D2BC:	dc.b 8
000100F3 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
000100F8 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
000100FD 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
00010102 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
00010107 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0001010C F005 0004 00               		dc.b $F0, 5, 0,	4, 0
00010111 0005 0004 00               		dc.b 0,	5, 0, 4, 0
00010116 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0001011B 08                         byte_D2E5:	dc.b 8
0001011C E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
00010121 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
00010126 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0001012B 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
00010130 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
00010135 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0001013A 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0001013F 1005 0004 00               		dc.b $10, 5, 0,	4, 0
00010144 08                         byte_D30E:	dc.b 8
00010145 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0001014A F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0001014F 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
00010154 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
00010159 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0001015E F005 0008 00               		dc.b $F0, 5, 0,	8, 0
00010163 0005 0008 00               		dc.b 0,	5, 0, 8, 0
00010168 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0001016E 00                         		even
0001016E 00                         		even
0001016E                            
0001016E                            ; ---------------------------------------------------------------------------
0001016E                            ; Object code loading subroutine
0001016E                            ; ---------------------------------------------------------------------------
0001016E                            
0001016E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001016E                            
0001016E                            
0001016E                            ObjectsLoad:				; XREF: TitleScreen; et al
0001016E 41F8 D000                  		lea	($FFFFD000).w,a0 ; load object RAM
00010172 7E7F                       		moveq	#$7F,d7
00010174 7000                       		moveq	#0,d0
00010176                            		;cmpi.b	#6,($FFFFD024).w ; is Sonic Dying (primary routine >= 6)?
00010176                            		;bcc.s	ObjectsFreeze	; if yes, branch
00010176                            
00010176                            ExecuteObjects:
00010176 1010                       		move.b	(a0),d0		; load object's id
00010178 6700                       		beq.s	@NextObject	; if it's zero, skip
0001017A D040                       		add.w	d0,d0
0001017C D040                       		add.w	d0,d0
0001017E 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
00010182 4E91                       		jsr	(a1)		; run the object's code
00010184 7000                       		moveq	#0,d0
00010186                            
00010186                            @NextObject:
00010186 41E8 0040                  		lea	$40(a0),a0	; next object
0001018A 51CF FFEA                  		dbf	d7,ExecuteObjects
0001018E 4E75                       		rts
00010190                            
00010190                            ; ===========================================================================
00010190                            ; ---------------------------------------------------------------------------
00010190                            ; Just displays objects without running their code
00010190                            ; Runs if Sonic is in dying state
00010190                            ; ---------------------------------------------------------------------------
00010190                            
00010190                            ;loc_D362:
00010190                            ObjectsFreeze:
00010190 7E1F                       		moveq	#$1F,d7
00010192 61E2                       		bsr.s	ExecuteObjects	; run code only for reserved object SST
00010194 7E5F                       		moveq	#$5F,d7
00010196                            
00010196                            DisplayObjects:
00010196 7000                       		moveq	#0,d0
00010198 1010                       		move.b	(a0),d0		; load object's id
0001019A 6700                       		beq.s	@NextObject	; if it's zero, branch
0001019C 4A28 0001                  		tst.b	1(a0)		; test render flag
000101A0 6A00                       		bpl.s	@NextObject	; if bit #7 isn't set, branch
000101A2 6100 0000                  		bsr.w	DisplaySprite
000101A6                            
000101A6                            @NextObject:
000101A6 41E8 0040                  		lea	$40(a0),a0	; next object
000101AA 51CF FFEA                  		dbf	d7,DisplayObjects
000101AE 4E75                       		rts
000101B0                            ; End of function ObjectsLoad
000101B0                            
000101B0                            ; ===========================================================================
000101B0                            ; ---------------------------------------------------------------------------
000101B0                            ; Object pointers
000101B0                            ; ---------------------------------------------------------------------------
000101B0                            Obj_Index:
000101B0                            	include "_inc\Object pointers.asm"
000101B0                            ; ---------------------------------------------------------------------------
000101B0                            ; Object pointers
000101B0                            ; ---------------------------------------------------------------------------
000101B0 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
000101C0 0000 0000 0000 0000 0000+  	dc.l Obj05, ObjectFall, Obj07, Obj08
000101D0 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
000101E0 0000 0000 0000 D30C 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
000101F0 0000 9E58 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
00010200 0000 A47E 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
00010210 0000 ACA6 0000 AD0E 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
00010220 0000 B358 0000 B646 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
00010230 0000 0000 0000 C3C4 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
00010240 0000 C766 0000 CD62 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
00010250 0000 C072 0000 B42E 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
00010260 0000 DB2A 0000 CF52 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
00010270 0000 E472 0000 EB20 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
00010280 0000 DFD6 0000 FC5C 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
00010290 0000 F2A6 0000 F346 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
000102A0 0000 0000 0000 0000 0000+  	dc.l BossGreenHill, Obj3E, Obj3F, Obj40
000102B0 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
000102C0 0000 E78E 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
000102D0 0000 FEF8 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
000102E0 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
000102F0 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
00010300 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
00010310 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
00010320 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
00010330 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
00010340 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
00010350 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
00010360 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
00010370 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
00010380 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
00010390 0000 0000 0000 0000 0000+  	dc.l Obj79, BossStarLight, Obj7B, Obj7C
000103A0 0000 0000 0000 F58A 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
000103B0 0000 796C 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
000103C0 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
000103D0 0000 8026 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
000103E0 0000 0000 0000 0000 0000+          dc.l BossGreenHill_Saw, Obj8E, Obj8F, Obj90
000103F0 0000 0000 0000 0000 0000+  	dc.l Obj91, Obj92, Obj93, Obj94
00010400 0000 0000 0000 0000        	dc.l Obj95, Obj96
00010400 0000 0000 0000 0000        	dc.l Obj95, Obj96
00010408                            
00010408                            ; ---------------------------------------------------------------------------
00010408                            ; Subroutine to	make an	object fall downwards, increasingly fast
00010408                            ; ---------------------------------------------------------------------------
00010408                            
00010408                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010408                            
00010408                            
00010408                            ObjectFall:
00010408 2428 0008                  		move.l	8(a0),d2
0001040C 2628 000C                  		move.l	$C(a0),d3
00010410 3028 0010                  		move.w	$10(a0),d0	; load X-velocity
00010414 48C0                       		ext.l	d0
00010416 E180                       		asl.l	#8,d0		; multiply speed by $100
00010418 D480                       		add.l	d0,d2		; add to x-axis	position
0001041A 3028 0012                  		move.w	$12(a0),d0	; load Y-velocity
0001041E 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase Y-velocity
00010424 48C0                       		ext.l	d0
00010426 E180                       		asl.l	#8,d0		; multiply speed by $100
00010428 D680                       		add.l	d0,d3		; add to y-axis	position
0001042A 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0001042E 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
00010432 4E75                       		rts	
00010434                            ; End of function ObjectFall
00010434                            
00010434                            ; ---------------------------------------------------------------------------
00010434                            ; Subroutine translating object	speed to update	object position
00010434                            ; ---------------------------------------------------------------------------
00010434                            
00010434                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010434                            
00010434                            
00010434                            SpeedToPos:
00010434 2428 0008                  		move.l	8(a0),d2
00010438 2628 000C                  		move.l	$C(a0),d3
0001043C 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
00010440 48C0                       		ext.l	d0
00010442 E180                       		asl.l	#8,d0		; multiply speed by $100
00010444 D480                       		add.l	d0,d2		; add to x-axis	position
00010446 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0001044A 48C0                       		ext.l	d0
0001044C E180                       		asl.l	#8,d0		; multiply speed by $100
0001044E D680                       		add.l	d0,d3		; add to y-axis	position
00010450 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
00010454 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
00010458 4E75                       		rts	
0001045A                            ; End of function SpeedToPos
0001045A                            
0001045A                            ; ---------------------------------------------------------------------------
0001045A                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0001045A                            ; ---------------------------------------------------------------------------
0001045A                            
0001045A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001045A                            
0001045A                            
0001045A                            DisplaySprite:
0001045A 43F8 AC00                  		lea	($FFFFAC00).w,a1 ; load sprite table
0001045E 3028 0018                  		move.w	$18(a0),d0	; load object's prioity and horizontal radius
00010462 E248                       		lsr.w	#1,d0		; shift 1 bit right
00010464 0240 0380                  		andi.w	#$380,d0	; apply bit mask to erase obj radius value
00010468 D2C0                       		adda.w	d0,a1		; set sprite table destination, depending on priority
0001046A 0C51 007E                  		cmpi.w	#$7E,(a1)	; is sprite table overflowed?
0001046E 6400                       		bcc.s	DisplaySprite_Rts ; if yes, branch
00010470 5451                       		addq.w	#2,(a1)
00010472 D2D1                       		adda.w	(a1),a1		; load free slot in sprite table
00010474 3288                       		move.w	a0,(a1)		; write obj address to that slot
00010476                            
00010476                            DisplaySprite_Rts:
00010476 4E75                       		rts	
00010478                            ; End of function DisplaySprite
00010478                            
00010478                            ; ---------------------------------------------------------------------------
00010478                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
00010478                            ; ---------------------------------------------------------------------------
00010478                            
00010478                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010478                            
00010478                            
00010478                            DisplaySprite2:
00010478 45F8 AC00                  		lea	($FFFFAC00).w,a2 ; load sprite table
0001047C 3029 0018                  		move.w	$18(a1),d0	; load object's prioity and horizontal radius
00010480 E248                       		lsr.w	#1,d0		; shift 1 bit right
00010482 0240 0380                  		andi.w	#$380,d0	; apply bit mask to erase obj radius value
00010486 D4C0                       		adda.w	d0,a2		; set sprite table destination, depending on priority
00010488 0C52 007E                  		cmpi.w	#$7E,(a2)	; is sprite table overflowed?
0001048C 6400                       		bcc.s	DisplaySprite2_Rts ; if yes, branch
0001048E 5452                       		addq.w	#2,(a2)
00010490 D4D2                       		adda.w	(a2),a2		; load free slot in sprite table
00010492 3489                       		move.w	a1,(a2)		; write obj address to that slot
00010494                            
00010494                            DisplaySprite2_Rts:
00010494 4E75                       		rts
00010496                            ; End of function DisplaySprite2
00010496                            
00010496                            ; ---------------------------------------------------------------------------
00010496                            ; Subroutine to	delete an object
00010496                            ; ---------------------------------------------------------------------------
00010496                            
00010496                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010496                            
00010496                            
00010496                            DeleteObject:
00010496 2248                       		movea.l	a0,a1		; load object to a1
00010498                            
00010498                            DeleteObject2:
00010498 7200                       		moveq	#0,d1
0001049A 700F                       		moveq	#$F,d0
0001049C                            
0001049C                            loc_D646:
0001049C 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0001049E 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
000104A2 4E75                       		rts	
000104A4                            ; End of function DeleteObject
000104A4                            
000104A4                            ; ===========================================================================
000104A4 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
000104A8 00FF F700                  		dc.l $FFF700		; main screen x-position
000104AC 00FF F708                  		dc.l $FFF708		; background x-position	1
000104B0 00FF F718                  		dc.l $FFF718		; background x-position	2
000104B4                            
000104B4                            ; ---------------------------------------------------------------------------
000104B4                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
000104B4                            ; ---------------------------------------------------------------------------
000104B4                            
000104B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000104B4                            
000104B4                            
000104B4                            BuildSprites:				; XREF: TitleScreen; et al
000104B4 45F8 F800                  		lea	($FFFFF800).w,a2 ; RAM-space, where sprites in SMD format will be
000104B8 7A00                       		moveq	#0,d5		 ; d5 will be sprite counter
000104BA 49F8 AC00                  		lea	($FFFFAC00).w,a4 ; load sprite table
000104BE 7E07                       		moveq	#7,d7
000104C0                            
000104C0                            BS_Layer:
000104C0 4A54                       		tst.w	(a4)		; is priority layer empty?
000104C2 6700 0000                  		beq.w	BS_NextLayer	; if yes, branch
000104C6 7C02                       		moveq	#2,d6
000104C8                            
000104C8                            BS_Object:
000104C8 3074 6000                  		movea.w	(a4,d6.w),a0	; load an object to display
000104CC 4A10                       		tst.b	(a0)		; is object empty?
000104CE 6700 0000                  		beq.w	BS_NextObject	; if yes, branch
000104D2 08A8 0007 0001             		bclr	#7,1(a0)	; clear display flag
000104D8 1028 0001                  		move.b	1(a0),d0
000104DC 1800                       		move.b	d0,d4
000104DE 0240 000C                  		andi.w	#%1100,d0	; test coordinate system flags
000104E2 6700                       		beq.s	@OnScreenCoords ; if on-screen coordinate system used, branch
000104E4 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
000104E8 7000                       		moveq	#0,d0
000104EA 1028 0019                  		move.b	$19(a0),d0	; move H-radius to d0
000104EE 3628 0008                  		move.w	8(a0),d3	; move X-axis to d3
000104F2 9651                       		sub.w	(a1),d3
000104F4 3203                       		move.w	d3,d1
000104F6 D240                       		add.w	d0,d1
000104F8 6B00 0000                  		bmi.w	BS_NextObject	; if object is out of screen, branch
000104FC 3203                       		move.w	d3,d1
000104FE 9240                       		sub.w	d0,d1
00010500 0C41 0140                  		cmpi.w	#$140,d1
00010504 6C00                       		bge.s	BS_NextObject	; if object is out of screen, branch
00010506 0643 0080                  		addi.w	#$80,d3
0001050A 0804 0004                  		btst	#4,d4
0001050E 6700                       		beq.s	loc_D6E8
00010510 7000                       		moveq	#0,d0
00010512 1028 0016                  		move.b	$16(a0),d0	; move V-radius to d0
00010516 3428 000C                  		move.w	$C(a0),d2	; move Y-axis to d2
0001051A 9469 0004                  		sub.w	4(a1),d2
0001051E 3202                       		move.w	d2,d1
00010520 D240                       		add.w	d0,d1
00010522 6B00                       		bmi.s	BS_NextObject	; if object is out of screen, branch
00010524 3202                       		move.w	d2,d1
00010526 9240                       		sub.w	d0,d1
00010528 0C41 00E0                  		cmpi.w	#$E0,d1
0001052C 6C00                       		bge.s	BS_NextObject	; if object is out of screen, branch
0001052E 0642 0080                  		addi.w	#$80,d2
00010532 6000                       		bra.s	BS_DisplaySprite
00010534                            ; ---------------------------------------------------------------------------
00010534                            
00010534                            @OnScreenCoords:
00010534 3428 000A                  		move.w	$A(a0),d2
00010538 3628 0008                  		move.w	8(a0),d3
0001053C 6000                       		bra.s	BS_DisplaySprite
0001053E                            
0001053E                            ; ===========================================================================
0001053E                            
0001053E                            loc_D6E8:
0001053E 3428 000C                  		move.w	$C(a0),d2
00010542 9469 0004                  		sub.w	4(a1),d2
00010546 0642 0080                  		addi.w	#$80,d2
0001054A 0C42 0060                  		cmpi.w	#$60,d2
0001054E 6500                       		bcs.s	BS_NextObject	; if object is out of screen, branch
00010550 0C42 0180                  		cmpi.w	#$180,d2
00010554 6400                       		bcc.s	BS_NextObject	; if object is out of screen, branch
00010556                            
00010556                            ; ===========================================================================
00010556                            
00010556                            ;loc_D700:
00010556                            BS_DisplaySprite:
00010556 2268 0004                  		movea.l	4(a0),a1	; load mappings addr
0001055A 7200                       		moveq	#0,d1
0001055C 0804 0005                  		btst	#5,d4		; is raw mappings bit set?
00010560 6600                       		bne.s	@DisplayMapFrame; if yes, branch
00010562 1228 001A                  		move.b	$1A(a0),d1	; get mapping frame
00010566 D201                       		add.b	d1,d1
00010568 D2F1 1000                  		adda.w	(a1,d1.w),a1	; load mappings for this frame
0001056C 1219                       		move.b	(a1)+,d1	; get item count in mappings data
0001056E 5301                       		subq.b	#1,d1		; sub 1 from it
00010570 6B00                       		bmi.s	@QuitDisplay	; if there mapping frame is empty, branch
00010572                            
00010572                            @DisplayMapFrame:
00010572 6100 0000                  		bsr.w	sub_D750
00010576                            
00010576                            @QuitDisplay:	
00010576 08E8 0007 0001             		bset	#7,1(a0)	; set display flag
0001057C                            
0001057C                            BS_NextObject:
0001057C 5446                       		addq.w	#2,d6
0001057E 5554                       		subq.w	#2,(a4)		; next object in priority layer
00010580 6600 FF46                  		bne.w	BS_Object
00010584                            
00010584                            BS_NextLayer:
00010584 49EC 0080                  		lea	$80(a4),a4	; next priority layer
00010588 51CF FF36                  		dbf	d7,BS_Layer	; repeat 7 more times
0001058C                            
0001058C 11C5 F62C                  		move.b	d5,($FFFFF62C).w ; save sprite counter
00010590 0C05 0050                  		cmpi.b	#$50,d5		; are 80 sprites displayed?
00010594 6700                       		beq.s	loc_D748	; if yes, branch
00010596 24BC 0000 0000             		move.l	#0,(a2)
0001059C 4E75                       		rts	
0001059E                            ; ===========================================================================
0001059E                            
0001059E                            loc_D748:
0001059E 157C 0000 FFFB             		move.b	#0,-5(a2)
000105A4 4E75                       		rts	
000105A6                            ; End of function BuildSprites
000105A6                            
000105A6                            
000105A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000105A6                            
000105A6                            
000105A6                            sub_D750:				; XREF: BuildSprites
000105A6 3668 0002                  		movea.w	2(a0),a3
000105AA 0804 0000                  		btst	#0,d4
000105AE 6600                       		bne.s	loc_D796
000105B0 0804 0001                  		btst	#1,d4
000105B4 6600 0000                  		bne.w	loc_D7E4
000105B8                            ; End of function sub_D750
000105B8                            
000105B8                            
000105B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000105B8                            
000105B8                            
000105B8                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
000105B8 0C05 0050                  		cmpi.b	#$50,d5		; are 80 sprites displayed?
000105BC 6700                       		beq.s	locret_D794	; if yes, branch
000105BE 1019                       		move.b	(a1)+,d0
000105C0 4880                       		ext.w	d0
000105C2 D042                       		add.w	d2,d0
000105C4 34C0                       		move.w	d0,(a2)+
000105C6 14D9                       		move.b	(a1)+,(a2)+
000105C8 5205                       		addq.b	#1,d5
000105CA 14C5                       		move.b	d5,(a2)+
000105CC 1019                       		move.b	(a1)+,d0
000105CE E148                       		lsl.w	#8,d0
000105D0 1019                       		move.b	(a1)+,d0
000105D2 D04B                       		add.w	a3,d0
000105D4 34C0                       		move.w	d0,(a2)+
000105D6 1019                       		move.b	(a1)+,d0
000105D8 4880                       		ext.w	d0
000105DA D043                       		add.w	d3,d0
000105DC 0240 01FF                  		andi.w	#$1FF,d0
000105E0 6600                       		bne.s	loc_D78E
000105E2 5240                       		addq.w	#1,d0
000105E4                            
000105E4                            loc_D78E:
000105E4 34C0                       		move.w	d0,(a2)+
000105E6 51C9 FFD0                  		dbf	d1,sub_D762
000105EA                            
000105EA                            locret_D794:
000105EA 4E75                       		rts	
000105EC                            ; End of function sub_D762
000105EC                            
000105EC                            ; ===========================================================================
000105EC                            
000105EC                            loc_D796:
000105EC 0804 0001                  		btst	#1,d4
000105F0 6600 0000                  		bne.w	loc_D82A
000105F4                            
000105F4                            loc_D79E:
000105F4 0C05 0050                  		cmpi.b	#$50,d5		; are 80 sprites displayed?
000105F8 6700                       		beq.s	locret_D7E2	; if yes, branch
000105FA 1019                       		move.b	(a1)+,d0
000105FC 4880                       		ext.w	d0
000105FE D042                       		add.w	d2,d0
00010600 34C0                       		move.w	d0,(a2)+
00010602 1819                       		move.b	(a1)+,d4
00010604 14C4                       		move.b	d4,(a2)+
00010606 5205                       		addq.b	#1,d5
00010608 14C5                       		move.b	d5,(a2)+
0001060A 1019                       		move.b	(a1)+,d0
0001060C E148                       		lsl.w	#8,d0
0001060E 1019                       		move.b	(a1)+,d0
00010610 D04B                       		add.w	a3,d0
00010612 0A40 0800                  		eori.w	#$800,d0
00010616 34C0                       		move.w	d0,(a2)+
00010618 1019                       		move.b	(a1)+,d0
0001061A 4880                       		ext.w	d0
0001061C 4440                       		neg.w	d0
0001061E D804                       		add.b	d4,d4
00010620 0244 0018                  		andi.w	#$18,d4
00010624 5044                       		addq.w	#8,d4
00010626 9044                       		sub.w	d4,d0
00010628 D043                       		add.w	d3,d0
0001062A 0240 01FF                  		andi.w	#$1FF,d0
0001062E 6600                       		bne.s	loc_D7DC
00010630 5240                       		addq.w	#1,d0
00010632                            
00010632                            loc_D7DC:
00010632 34C0                       		move.w	d0,(a2)+
00010634 51C9 FFBE                  		dbf	d1,loc_D79E
00010638                            
00010638                            locret_D7E2:
00010638 4E75                       		rts	
0001063A                            ; ===========================================================================
0001063A                            
0001063A                            loc_D7E4:				; XREF: sub_D750
0001063A 0C05 0050                  		cmpi.b	#$50,d5		; are 80 sprites displayed?
0001063E 6700                       		beq.s	locret_D828	; if yes, branch
00010640 1019                       		move.b	(a1)+,d0
00010642 1811                       		move.b	(a1),d4
00010644 4880                       		ext.w	d0
00010646 4440                       		neg.w	d0
00010648 E70C                       		lsl.b	#3,d4
0001064A 0244 0018                  		andi.w	#$18,d4
0001064E 5044                       		addq.w	#8,d4
00010650 9044                       		sub.w	d4,d0
00010652 D042                       		add.w	d2,d0
00010654 34C0                       		move.w	d0,(a2)+
00010656 14D9                       		move.b	(a1)+,(a2)+
00010658 5205                       		addq.b	#1,d5
0001065A 14C5                       		move.b	d5,(a2)+
0001065C 1019                       		move.b	(a1)+,d0
0001065E E148                       		lsl.w	#8,d0
00010660 1019                       		move.b	(a1)+,d0
00010662 D04B                       		add.w	a3,d0
00010664 0A40 1000                  		eori.w	#$1000,d0
00010668 34C0                       		move.w	d0,(a2)+
0001066A 1019                       		move.b	(a1)+,d0
0001066C 4880                       		ext.w	d0
0001066E D043                       		add.w	d3,d0
00010670 0240 01FF                  		andi.w	#$1FF,d0
00010674 6600                       		bne.s	loc_D822
00010676 5240                       		addq.w	#1,d0
00010678                            
00010678                            loc_D822:
00010678 34C0                       		move.w	d0,(a2)+
0001067A 51C9 FFBE                  		dbf	d1,loc_D7E4
0001067E                            
0001067E                            locret_D828:
0001067E 4E75                       		rts	
00010680                            ; ===========================================================================
00010680                            
00010680                            loc_D82A:
00010680 0C05 0050                  		cmpi.b	#$50,d5		; are 80 sprites displayed?
00010684 6700                       		beq.s	locret_D87C	; if yes, branch
00010686 1019                       		move.b	(a1)+,d0
00010688 1811                       		move.b	(a1),d4
0001068A 4880                       		ext.w	d0
0001068C 4440                       		neg.w	d0
0001068E E70C                       		lsl.b	#3,d4
00010690 0244 0018                  		andi.w	#$18,d4
00010694 5044                       		addq.w	#8,d4
00010696 9044                       		sub.w	d4,d0
00010698 D042                       		add.w	d2,d0
0001069A 34C0                       		move.w	d0,(a2)+
0001069C 1819                       		move.b	(a1)+,d4
0001069E 14C4                       		move.b	d4,(a2)+
000106A0 5205                       		addq.b	#1,d5
000106A2 14C5                       		move.b	d5,(a2)+
000106A4 1019                       		move.b	(a1)+,d0
000106A6 E148                       		lsl.w	#8,d0
000106A8 1019                       		move.b	(a1)+,d0
000106AA D04B                       		add.w	a3,d0
000106AC 0A40 1800                  		eori.w	#$1800,d0
000106B0 34C0                       		move.w	d0,(a2)+
000106B2 1019                       		move.b	(a1)+,d0
000106B4 4880                       		ext.w	d0
000106B6 4440                       		neg.w	d0
000106B8 D804                       		add.b	d4,d4
000106BA 0244 0018                  		andi.w	#$18,d4
000106BE 5044                       		addq.w	#8,d4
000106C0 9044                       		sub.w	d4,d0
000106C2 D043                       		add.w	d3,d0
000106C4 0240 01FF                  		andi.w	#$1FF,d0
000106C8 6600                       		bne.s	loc_D876
000106CA 5240                       		addq.w	#1,d0
000106CC                            
000106CC                            loc_D876:
000106CC 34C0                       		move.w	d0,(a2)+
000106CE 51C9 FFB0                  		dbf	d1,loc_D82A
000106D2                            
000106D2                            locret_D87C:
000106D2 4E75                       		rts	
000106D4                            ; ---------------------------------------------------------------------------
000106D4                            ; Subroutine to	check if an object is on the screen
000106D4                            ; ---------------------------------------------------------------------------
000106D4                            
000106D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000106D4                            
000106D4                            
000106D4                            ChkObjOnScreen:
000106D4 3028 0008                  		move.w	8(a0),d0	; get object x-position
000106D8 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
000106DC 6B00                       		bmi.s	NotOnScreen
000106DE 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
000106E2 6C00                       		bge.s	NotOnScreen	; if not, branch
000106E4                            
000106E4 3228 000C                  		move.w	$C(a0),d1	; get object y-position
000106E8 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
000106EC 6B00                       		bmi.s	NotOnScreen
000106EE 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
000106F2 6C00                       		bge.s	NotOnScreen	; if not, branch
000106F4                            
000106F4 7000                       		moveq	#0,d0		; set flag to 0
000106F6 4E75                       		rts	
000106F8                            ; ===========================================================================
000106F8                            
000106F8                            NotOnScreen:				; XREF: ChkObjOnScreen
000106F8 7001                       		moveq	#1,d0		; set flag to 1
000106FA 4E75                       		rts	
000106FC                            ; End of function ChkObjOnScreen
000106FC                            
000106FC                            
000106FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000106FC                            
000106FC                            
000106FC                            ChkObjOnScreen2:
000106FC 7200                       		moveq	#0,d1
000106FE 1228 0019                  		move.b	$19(a0),d1
00010702 3028 0008                  		move.w	8(a0),d0
00010706 9078 F700                  		sub.w	($FFFFF700).w,d0
0001070A D041                       		add.w	d1,d0
0001070C 6B00                       		bmi.s	NotOnScreen2
0001070E D241                       		add.w	d1,d1
00010710 9041                       		sub.w	d1,d0
00010712 0C40 0140                  		cmpi.w	#320,d0
00010716 6C00                       		bge.s	NotOnScreen2
00010718                            
00010718 3228 000C                  		move.w	$C(a0),d1
0001071C 9278 F704                  		sub.w	($FFFFF704).w,d1
00010720 6B00                       		bmi.s	NotOnScreen2
00010722 0C41 00E0                  		cmpi.w	#224,d1
00010726 6C00                       		bge.s	NotOnScreen2
00010728                            
00010728 7000                       		moveq	#0,d0
0001072A 4E75                       		rts	
0001072C                            ; ===========================================================================
0001072C                            
0001072C                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0001072C 7001                       		moveq	#1,d0
0001072E 4E75                       		rts	
00010730                            ; End of function ChkObjOnScreen2
00010730                            
00010730                            ; ---------------------------------------------------------------------------
00010730                            ; Subroutine to	load a level's objects
00010730                            ; ---------------------------------------------------------------------------
00010730                            
00010730                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010730                            
00010730                            
00010730                            ObjPosLoad:				; XREF: Level; et al
00010730 7000                       		moveq	#0,d0
00010732 1038 F76C                  		move.b	($FFFFF76C).w,d0 ; load OPL routine counter
00010736 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0001073A 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0001073E                            ; End of function ObjPosLoad
0001073E                            
0001073E                            ; ===========================================================================
0001073E 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
00010740 0000                       		dc.w OPL_Next-OPL_Index
00010742                            ; ===========================================================================
00010742                            
00010742                            OPL_Main:				; XREF: OPL_Index
00010742 5438 F76C                  		addq.b	#2,($FFFFF76C).w ; increase OPL routine counter
00010746 3038 FE10                  		move.w	($FFFFFE10).w,d0 ; load zone number
0001074A ED08                       		lsl.b	#6,d0
0001074C E848                       		lsr.w	#4,d0
0001074E 41F9 0000 0000             		lea	(ObjPos_Index).l,a0 ; load object list pointers
00010754 2248                       		movea.l	a0,a1
00010756 D0F0 0000                  		adda.w	(a0,d0.w),a0	; load object list for the level
0001075A 21C8 F770                  		move.l	a0,($FFFFF770).w
0001075E 21C8 F774                  		move.l	a0,($FFFFF774).w
00010762 D2F1 0002                  		adda.w	2(a1,d0.w),a1
00010766 21C9 F778                  		move.l	a1,($FFFFF778).w
0001076A 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0001076E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010772 34FC 0101                  		move.w	#$101,(a2)+
00010776 303C 005E                  		move.w	#$5E,d0
0001077A                            
0001077A                            OPL_ClrList:
0001077A 429A                       		clr.l	(a2)+
0001077C 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
00010780                            
00010780 45F8 FC00                  		lea	($FFFFFC00).w,a2 ; load pre-destroyed object list
00010784 7400                       		moveq	#0,d2
00010786 3C38 F700                  		move.w	($FFFFF700).w,d6 ; load camera X-pos
0001078A 0446 0080                  		subi.w	#$80,d6
0001078E 6400                       		bcc.s	loc_D93C
00010790 7C00                       		moveq	#0,d6
00010792                            
00010792                            loc_D93C:
00010792 0246 FF80                  		andi.w	#$FF80,d6
00010796 2078 F770                  		movea.l	($FFFFF770).w,a0
0001079A                            
0001079A                            loc_D944:
0001079A BC50                       		cmp.w	(a0),d6
0001079C 6300                       		bls.s	loc_D956
0001079E 4A28 0004                  		tst.b	4(a0)
000107A2 6A00                       		bpl.s	loc_D952
000107A4 1412                       		move.b	(a2),d2
000107A6 5212                       		addq.b	#1,(a2)
000107A8                            
000107A8                            loc_D952:
000107A8 5C48                       		addq.w	#6,a0
000107AA 60EE                       		bra.s	loc_D944
000107AC                            ; ===========================================================================
000107AC                            
000107AC                            loc_D956:
000107AC 21C8 F770                  		move.l	a0,($FFFFF770).w
000107B0 2078 F774                  		movea.l	($FFFFF774).w,a0
000107B4 0446 0080                  		subi.w	#$80,d6
000107B8 6500                       		bcs.s	loc_D976
000107BA                            
000107BA                            loc_D964:
000107BA BC50                       		cmp.w	(a0),d6
000107BC 6300                       		bls.s	loc_D976
000107BE 4A28 0004                  		tst.b	4(a0)
000107C2 6A00                       		bpl.s	loc_D972
000107C4 522A 0001                  		addq.b	#1,1(a2)
000107C8                            
000107C8                            loc_D972:
000107C8 5C48                       		addq.w	#6,a0
000107CA 60EE                       		bra.s	loc_D964
000107CC                            ; ===========================================================================
000107CC                            
000107CC                            loc_D976:
000107CC 21C8 F774                  		move.l	a0,($FFFFF774).w
000107D0 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
000107D6                            
000107D6                            OPL_Next:				; XREF: OPL_Index
000107D6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000107DA 7400                       		moveq	#0,d2
000107DC 3C38 F700                  		move.w	($FFFFF700).w,d6
000107E0 0246 FF80                  		andi.w	#$FF80,d6
000107E4 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
000107E8 6700 0000                  		beq.w	locret_DA3A
000107EC 6C00                       		bge.s	loc_D9F6
000107EE 31C6 F76E                  		move.w	d6,($FFFFF76E).w
000107F2 2078 F774                  		movea.l	($FFFFF774).w,a0
000107F6 0446 0080                  		subi.w	#$80,d6
000107FA 6500                       		bcs.s	loc_D9D2
000107FC                            
000107FC                            loc_D9A6:
000107FC BC68 FFFA                  		cmp.w	-6(a0),d6
00010800 6C00                       		bge.s	loc_D9D2
00010802 5D48                       		subq.w	#6,a0
00010804 4A28 0004                  		tst.b	4(a0)
00010808 6A00                       		bpl.s	loc_D9BC
0001080A 532A 0001                  		subq.b	#1,1(a2)
0001080E 142A 0001                  		move.b	1(a2),d2
00010812                            
00010812                            loc_D9BC:
00010812 6100 0000                  		bsr.w	loc_DA3C
00010816 6600                       		bne.s	loc_D9C6
00010818 5D48                       		subq.w	#6,a0
0001081A 60E0                       		bra.s	loc_D9A6
0001081C                            ; ===========================================================================
0001081C                            
0001081C                            loc_D9C6:
0001081C 4A28 0004                  		tst.b	4(a0)
00010820 6A00                       		bpl.s	loc_D9D0
00010822 522A 0001                  		addq.b	#1,1(a2)
00010826                            
00010826                            loc_D9D0:
00010826 5C48                       		addq.w	#6,a0
00010828                            
00010828                            loc_D9D2:
00010828 21C8 F774                  		move.l	a0,($FFFFF774).w
0001082C 2078 F770                  		movea.l	($FFFFF770).w,a0
00010830 0646 0300                  		addi.w	#$300,d6
00010834                            
00010834                            loc_D9DE:
00010834 BC68 FFFA                  		cmp.w	-6(a0),d6
00010838 6E00                       		bgt.s	loc_D9F0
0001083A 4A28 FFFE                  		tst.b	-2(a0)
0001083E 6A00                       		bpl.s	loc_D9EC
00010840 5312                       		subq.b	#1,(a2)
00010842                            
00010842                            loc_D9EC:
00010842 5D48                       		subq.w	#6,a0
00010844 60EE                       		bra.s	loc_D9DE
00010846                            ; ===========================================================================
00010846                            
00010846                            loc_D9F0:
00010846 21C8 F770                  		move.l	a0,($FFFFF770).w
0001084A 4E75                       		rts	
0001084C                            ; ===========================================================================
0001084C                            
0001084C                            loc_D9F6:
0001084C 31C6 F76E                  		move.w	d6,($FFFFF76E).w
00010850 2078 F770                  		movea.l	($FFFFF770).w,a0
00010854 0646 0280                  		addi.w	#$280,d6
00010858                            
00010858                            loc_DA02:
00010858 BC50                       		cmp.w	(a0),d6
0001085A 6300                       		bls.s	loc_DA16
0001085C 4A28 0004                  		tst.b	4(a0)
00010860 6A00                       		bpl.s	loc_DA10
00010862 1412                       		move.b	(a2),d2
00010864 5212                       		addq.b	#1,(a2)
00010866                            
00010866                            loc_DA10:
00010866 6100 0000                  		bsr.w	loc_DA3C
0001086A 67EC                       		beq.s	loc_DA02
0001086C                            
0001086C                            loc_DA16:
0001086C 21C8 F770                  		move.l	a0,($FFFFF770).w
00010870 2078 F774                  		movea.l	($FFFFF774).w,a0
00010874 0446 0300                  		subi.w	#$300,d6
00010878 6500                       		bcs.s	loc_DA36
0001087A                            
0001087A                            loc_DA24:
0001087A BC50                       		cmp.w	(a0),d6
0001087C 6300                       		bls.s	loc_DA36
0001087E 4A28 0004                  		tst.b	4(a0)
00010882 6A00                       		bpl.s	loc_DA32
00010884 522A 0001                  		addq.b	#1,1(a2)
00010888                            
00010888                            loc_DA32:
00010888 5C48                       		addq.w	#6,a0
0001088A 60EE                       		bra.s	loc_DA24
0001088C                            ; ===========================================================================
0001088C                            
0001088C                            loc_DA36:
0001088C 21C8 F774                  		move.l	a0,($FFFFF774).w
00010890                            
00010890                            locret_DA3A:
00010890 4E75                       		rts	
00010892                            ; ===========================================================================
00010892                            
00010892                            loc_DA3C:
00010892 4A28 0004                  		tst.b	4(a0)
00010896 6A00                       		bpl.s	OPL_MakeItem
00010898 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0001089E 6700                       		beq.s	OPL_MakeItem
000108A0 5C48                       		addq.w	#6,a0
000108A2 7000                       		moveq	#0,d0
000108A4 4E75                       		rts	
000108A6                            ; ===========================================================================
000108A6                            
000108A6                            OPL_MakeItem:
000108A6 6100 0000                  		bsr.w	SingleObjLoad
000108AA 6600                       		bne.s	locret_DA8A	; if creating object failed, branch
000108AC 3358 0008                  		move.w	(a0)+,8(a1)
000108B0 3018                       		move.w	(a0)+,d0
000108B2 3200                       		move.w	d0,d1
000108B4 0240 0FFF                  		andi.w	#$FFF,d0
000108B8 3340 000C                  		move.w	d0,$C(a1)
000108BC E559                       		rol.w	#2,d1
000108BE 0201 0003                  		andi.b	#3,d1
000108C2 1341 0001                  		move.b	d1,1(a1)
000108C6 1341 0022                  		move.b	d1,$22(a1)
000108CA 1018                       		move.b	(a0)+,d0
000108CC 6A00                       		bpl.s	loc_DA80
000108CE 0200 007F                  		andi.b	#$7F,d0
000108D2 1342 0023                  		move.b	d2,$23(a1)
000108D6                            
000108D6                            loc_DA80:
000108D6 1280                       		move.b	d0,0(a1)
000108D8 1358 0028                  		move.b	(a0)+,$28(a1)
000108DC 7000                       		moveq	#0,d0
000108DE                            
000108DE                            locret_DA8A:
000108DE 4E75                       		rts	
000108E0                            ; ---------------------------------------------------------------------------
000108E0                            ; Single object	loading	subroutine
000108E0                            ; ---------------------------------------------------------------------------
000108E0                            
000108E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000108E0                            
000108E0                            
000108E0                            SingleObjLoad:
000108E0 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
000108E4 303C 005F                  		move.w	#$5F,d0
000108E8                            
000108E8                            loc_DA94:
000108E8 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
000108EA 6700                       		beq.s	locret_DAA0	; if yes, branch
000108EC 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
000108F0 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
000108F4                            
000108F4                            locret_DAA0:
000108F4 4E75                       		rts	
000108F6                            ; End of function SingleObjLoad
000108F6                            
000108F6                            
000108F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000108F6                            
000108F6                            
000108F6                            SingleObjLoad2:
000108F6 2248                       		movea.l	a0,a1
000108F8 303C F000                  		move.w	#-$1000,d0
000108FC 9048                       		sub.w	a0,d0
000108FE EC48                       		lsr.w	#6,d0
00010900 5340                       		subq.w	#1,d0
00010902 6500                       		bcs.s	locret_DABC
00010904                            
00010904                            loc_DAB0:
00010904 4A11                       		tst.b	(a1)
00010906 6700                       		beq.s	locret_DABC
00010908 43E9 0040                  		lea	$40(a1),a1
0001090C 51C8 FFF6                  		dbf	d0,loc_DAB0
00010910                            
00010910                            locret_DABC:
00010910 4E75                       		rts	
00010912                            ; End of function SingleObjLoad2
00010912                            
00010912                            ; ===========================================================================
00010912                            ; ---------------------------------------------------------------------------
00010912                            ; Object 41 - springs
00010912                            ; ---------------------------------------------------------------------------
00010912                            
00010912                            Obj41:					; XREF: Obj_Index
00010912 7000                       		moveq	#0,d0
00010914 1028 0024                  		move.b	$24(a0),d0
00010918 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0001091C 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
00010920 6100 FB38                  		bsr.w	DisplaySprite
00010924 3028 0008                  		move.w	8(a0),d0
00010928 0240 FF80                  		andi.w	#$FF80,d0
0001092C 3238 F700                  		move.w	($FFFFF700).w,d1
00010930 0441 0080                  		subi.w	#$80,d1
00010934 0241 FF80                  		andi.w	#$FF80,d1
00010938 9041                       		sub.w	d1,d0
0001093A 0C40 0280                  		cmpi.w	#$280,d0
0001093E 6200 FB56                  		bhi.w	DeleteObject
00010942 4E75                       		rts	
00010944                            ; ===========================================================================
00010944 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
00010946 0000                       		dc.w Obj41_Up-Obj41_Index
00010948 0000                       		dc.w Obj41_AniUp-Obj41_Index
0001094A 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0001094C 0000                       		dc.w Obj41_LR-Obj41_Index
0001094E 0000                       		dc.w Obj41_AniLR-Obj41_Index
00010950 0000                       		dc.w Obj41_ResetLR-Obj41_Index
00010952 0000                       		dc.w Obj41_Dwn-Obj41_Index
00010954 0000                       		dc.w Obj41_AniDwn-Obj41_Index
00010956 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
00010958                            
00010958 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0001095A F600                       		dc.w -$A00		; power	of yellow spring
0001095C                            ; ===========================================================================
0001095C                            
0001095C                            Obj41_Main:				; XREF: Obj41_Index
0001095C 5428 0024                  		addq.b	#2,$24(a0)
00010960 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
00010968 317C 0523 0002             		move.w	#$523,2(a0)
0001096E 0028 0004 0001             		ori.b	#4,1(a0)
00010974 117C 0010 0019             		move.b	#$10,$19(a0)
0001097A 117C 0004 0018             		move.b	#4,$18(a0)
00010980 1028 0028                  		move.b	$28(a0),d0
00010984 0800 0004                  		btst	#4,d0		; does the spring face left/right?
00010988 6700                       		beq.s	loc_DB54	; if not, branch
0001098A 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
00010990 117C 0001 001C             		move.b	#1,$1C(a0)
00010996 117C 0003 001A             		move.b	#3,$1A(a0)
0001099C 317C 0533 0002             		move.w	#$533,2(a0)
000109A2 117C 0008 0019             		move.b	#8,$19(a0)
000109A8                            
000109A8                            loc_DB54:
000109A8 0800 0005                  		btst	#5,d0		; does the spring face downwards?
000109AC 6700                       		beq.s	loc_DB66	; if not, branch
000109AE 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
000109B4 08E8 0001 0022             		bset	#1,$22(a0)
000109BA                            
000109BA                            loc_DB66:
000109BA 0800 0001                  		btst	#1,d0
000109BE 6700                       		beq.s	loc_DB72
000109C0 08E8 0005 0002             		bset	#5,2(a0)
000109C6                            
000109C6                            loc_DB72:
000109C6 0240 000F                  		andi.w	#$F,d0
000109CA 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
000109D0 4E75                       		rts	
000109D2                            ; ===========================================================================
000109D2                            
000109D2                            Obj41_Up:				; XREF: Obj41_Index
000109D2 323C 001B                  		move.w	#$1B,d1
000109D6 343C 0008                  		move.w	#8,d2
000109DA 363C 0010                  		move.w	#$10,d3
000109DE 3828 0008                  		move.w	8(a0),d4
000109E2 6100 0000                  		bsr.w	SolidObject
000109E6                                            ;bsr.w	PlatformObject
000109E6 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
000109EA 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
000109EC                            		;btst	#1,($FFFFD022).w	; is Sonic in the air?
000109EC                            		;bne.s	Obj41_UpChecking	
000109EC 4E75                                       rts
000109EE                            ;Obj41_UpChecking:
000109EE                             ;               tst.b	$3A(a0)		; has Sonic touched the	object?
000109EE                            ;		bne.s	Obj41_BounceUp		; if yes, branch
000109EE                            ;
000109EE                            ;		rts	
000109EE                            ; ===========================================================================
000109EE                            
000109EE                            Obj41_BounceUp:				; XREF: Obj41_Up
000109EE 5428 0024                  		addq.b	#2,$24(a0)
000109F2 5069 000C                  		addq.w	#8,$C(a1)
000109F6 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
000109FC 08E9 0001 0022             		bset	#1,$22(a1)
00010A02 08A9 0003 0022             		bclr	#3,$22(a1)
00010A08 0C38 0001 FF8C                             cmpi.b	#1,($FFFFFF8C).w
00010A0E 6700 0000                                  beq.w   MightyBounce
00010A12 0C38 0005 FF8C                             cmpi.b	#5,($FFFFFF8C).w
00010A18 6700 0000                                  beq.w   MightyBounce
00010A1C 137C 0021 001C                             move.b	#$21,$1C(a1)	; use "bouncing" animation
00010A22 6000                                       bra.s   ContBounce
00010A24                            
00010A24                            MightyBounce:
00010A24 137C 0010 001C                             move.b  #$10,$1C(a1)
00010A2A                            
00010A2A                            ContBounce:
00010A2A 137C 0002 0024             		move.b	#2,$24(a1)
00010A30 08A8 0003 0022             		bclr	#3,$22(a0)
00010A36 4228 0025                  		clr.b	$25(a0)
00010A3A 303C 00CC                  		move.w	#$CC,d0
00010A3E 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play spring sound
00010A44                            
00010A44                            Obj41_AniUp:				; XREF: Obj41_Index
00010A44 43F9 0000 0000             		lea	(Ani_obj41).l,a1
00010A4A 6000 C99E                  		bra.w	AnimateSprite
00010A4E                            ; ===========================================================================
00010A4E                            
00010A4E                            Obj41_ResetUp:				; XREF: Obj41_Index
00010A4E 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
00010A54 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
00010A58 4E75                       		rts	
00010A5A                            ; ===========================================================================
00010A5A                            
00010A5A                            Obj41_LR:				; XREF: Obj41_Index
00010A5A 323C 0013                  		move.w	#$13,d1
00010A5E 343C 000E                  		move.w	#$E,d2
00010A62 363C 000F                  		move.w	#$F,d3
00010A66 3828 0008                  		move.w	8(a0),d4
00010A6A 6100 0000                  		bsr.w	SolidObject
00010A6E 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00010A74 6600                       		bne.s	loc_DC0C
00010A76 117C 0008 0024             		move.b	#8,$24(a0)
00010A7C                            
00010A7C                            loc_DC0C:
00010A7C 0828 0005 0022             		btst	#5,$22(a0)
00010A82 6600                       		bne.s	Obj41_BounceLR
00010A84 4E75                       		rts	
00010A86                            ; ===========================================================================
00010A86                            
00010A86                            Obj41_BounceLR:				; XREF: Obj41_LR
00010A86 5428 0024                  		addq.b	#2,$24(a0)
00010A8A 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
00010A90 5069 0008                  		addq.w	#8,8(a1)
00010A94 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
00010A9A 6600                       		bne.s	loc_DC36	; if yes, branch
00010A9C 0469 0010 0008             		subi.w	#$10,8(a1)
00010AA2 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
00010AA6                            
00010AA6                            loc_DC36:
00010AA6 337C 000F 003E             		move.w	#$F,$3E(a1)
00010AAC 3369 0010 0014             		move.w	$10(a1),$14(a1)
00010AB2 0869 0000 0022             		bchg	#0,$22(a1)
00010AB8 0829 0002 0022             		btst	#2,$22(a1)
00010ABE 6600                       		bne.s	loc_DC56
00010AC0 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
00010AC6                            
00010AC6                            loc_DC56:
00010AC6 08A8 0005 0022             		bclr	#5,$22(a0)
00010ACC 08A9 0005 0022             		bclr	#5,$22(a1)
00010AD2 303C 00CC                  		move.w	#$CC,d0
00010AD6 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play spring sound
00010ADC                            
00010ADC                            Obj41_AniLR:				; XREF: Obj41_Index
00010ADC 43F9 0000 0000             		lea	(Ani_obj41).l,a1
00010AE2 6000 C906                  		bra.w	AnimateSprite
00010AE6                            ; ===========================================================================
00010AE6                            
00010AE6                            Obj41_ResetLR:				; XREF: Obj41_Index
00010AE6 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
00010AEC 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
00010AF0 4E75                       		rts	
00010AF2                            ; ===========================================================================
00010AF2                            
00010AF2                            Obj41_Dwn:				; XREF: Obj41_Index
00010AF2 323C 001B                  		move.w	#$1B,d1
00010AF6 343C 0008                  		move.w	#8,d2
00010AFA 363C 0010                  		move.w	#$10,d3
00010AFE 3828 0008                  		move.w	8(a0),d4
00010B02 6100 0000                  		bsr.w	SolidObject
00010B06 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00010B0C 6600                       		bne.s	loc_DCA4
00010B0E 117C 000E 0024             		move.b	#$E,$24(a0)
00010B14                            
00010B14                            loc_DCA4:
00010B14 4A28 0025                  		tst.b	$25(a0)
00010B18 6600                       		bne.s	locret_DCAE
00010B1A 4A44                       		tst.w	d4
00010B1C 6B00                       		bmi.s	Obj41_BounceDwn
00010B1E                            
00010B1E                            locret_DCAE:
00010B1E 4E75                       		rts	
00010B20                            ; ===========================================================================
00010B20                            
00010B20                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
00010B20 5428 0024                  		addq.b	#2,$24(a0)
00010B24 5169 000C                  		subq.w	#8,$C(a1)
00010B28 3368 0030 0012             		move.w	$30(a0),$12(a1)
00010B2E 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
00010B32 08E9 0001 0022             		bset	#1,$22(a1)	; set Sonic's in air flag
00010B38 08A9 0003 0022             		bclr	#3,$22(a1)
00010B3E 137C 0002 0024             		move.b	#2,$24(a1)
00010B44 08A8 0003 0022             		bclr	#3,$22(a0)
00010B4A 4228 0025                  		clr.b	$25(a0)
00010B4E 303C 00CC                  		move.w	#$CC,d0
00010B52 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play spring sound
00010B58                            
00010B58                            Obj41_AniDwn:				; XREF: Obj41_Index
00010B58 43F9 0000 0000             		lea	(Ani_obj41).l,a1
00010B5E 6000 C88A                  		bra.w	AnimateSprite
00010B62                            ; ===========================================================================
00010B62                            
00010B62                            Obj41_ResetDwn:				; XREF: Obj41_Index
00010B62 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
00010B68 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
00010B6C 4E75                       		rts	
00010B6E                            ; ===========================================================================
00010B6E                            Ani_obj41:
00010B6E                            	include "_anim\obj41.asm"
00010B6E                            ; ---------------------------------------------------------------------------
00010B6E                            ; Animation script - springs
00010B6E                            ; ---------------------------------------------------------------------------
00010B6E 0000                       		dc.w byte_DD02-Ani_obj41
00010B70 0000                       		dc.w byte_DD0E-Ani_obj41
00010B72 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
00010B7E 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
00010B8A                            		even
00010B8A                            		even
00010B8A                            
00010B8A                            ; ---------------------------------------------------------------------------
00010B8A                            ; Sprite mappings - springs
00010B8A                            ; ---------------------------------------------------------------------------
00010B8A                            Map_obj41:
00010B8A                            	include "_maps\obj41.asm"
00010B8A                            ; ---------------------------------------------------------------------------
00010B8A                            ; Sprite mappings - springs
00010B8A                            ; ---------------------------------------------------------------------------
00010B8A 0000                       		dc.w byte_DD26-Map_obj41
00010B8C 0000                       		dc.w byte_DD31-Map_obj41
00010B8E 0000                       		dc.w byte_DD37-Map_obj41
00010B90 0000                       		dc.w byte_DD47-Map_obj41
00010B92 0000                       		dc.w byte_DD4D-Map_obj41
00010B94 0000                       		dc.w byte_DD53-Map_obj41
00010B96 02                         byte_DD26:	dc.b 2
00010B97 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
00010B9C 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
00010BA1 01                         byte_DD31:	dc.b 1
00010BA2 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
00010BA7 03                         byte_DD37:	dc.b 3
00010BA8 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
00010BAD F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00010BB2 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
00010BB7 01                         byte_DD47:	dc.b 1
00010BB8 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00010BBD 01                         byte_DD4D:	dc.b 1
00010BBE F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
00010BC3 04                         byte_DD53:	dc.b 4
00010BC4 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
00010BC9 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
00010BCE F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
00010BD3 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
00010BD8                            		even
00010BD8                            		even
00010BD8                            
00010BD8                            ; ===========================================================================
00010BD8                            ; ---------------------------------------------------------------------------
00010BD8                            ; Object 42 - Newtron enemy (GHZ)
00010BD8                            ; ---------------------------------------------------------------------------
00010BD8                            
00010BD8                            Obj42:					; XREF: Obj_Index
00010BD8 7000                       		moveq	#0,d0
00010BDA 1028 0024                  		move.b	$24(a0),d0
00010BDE 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
00010BE2 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
00010BE6                            ; ===========================================================================
00010BE6 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
00010BE8 0000                       		dc.w Obj42_Action-Obj42_Index
00010BEA 0000                       		dc.w Obj42_Delete-Obj42_Index
00010BEC                            ; ===========================================================================
00010BEC                            
00010BEC                            Obj42_Main:				; XREF: Obj42_Index
00010BEC 5428 0024                  		addq.b	#2,$24(a0)
00010BF0 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
00010BF8 317C 049B 0002             		move.w	#$49B,2(a0)
00010BFE 117C 0004 0001             		move.b	#4,1(a0)
00010C04 117C 0004 0018             		move.b	#4,$18(a0)
00010C0A 117C 0014 0019             		move.b	#$14,$19(a0)
00010C10 117C 0010 0016             		move.b	#$10,$16(a0)
00010C16 117C 0008 0017             		move.b	#8,$17(a0)
00010C1C                            
00010C1C                            Obj42_Action:				; XREF: Obj42_Index
00010C1C 7000                       		moveq	#0,d0
00010C1E 1028 0025                  		move.b	$25(a0),d0
00010C22 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
00010C26 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
00010C2A 43F9 0000 0000             		lea	(Ani_obj42).l,a1
00010C30 6100 C7B8                  		bsr.w	AnimateSprite
00010C34 6000 0000                  		bra.w	MarkObjGone
00010C38                            ; ===========================================================================
00010C38 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
00010C3A 0000                       		dc.w Obj42_Type00-Obj42_Index2
00010C3C 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
00010C3E 0000                       		dc.w Obj42_Speed-Obj42_Index2
00010C40 0000                       		dc.w Obj42_Type01-Obj42_Index2
00010C42                            ; ===========================================================================
00010C42                            
00010C42                            Obj42_ChkDist:				; XREF: Obj42_Index2
00010C42 08E8 0000 0022             		bset	#0,$22(a0)
00010C48 3038 D008                  		move.w	($FFFFD008).w,d0
00010C4C 9068 0008                  		sub.w	8(a0),d0
00010C50 6400                       		bcc.s	loc_DDEA
00010C52 4440                       		neg.w	d0
00010C54 08A8 0000 0022             		bclr	#0,$22(a0)
00010C5A                            
00010C5A                            loc_DDEA:
00010C5A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
00010C5E 6400                       		bcc.s	locret_DE12	; if not, branch
00010C60 5428 0025                  		addq.b	#2,$25(a0)
00010C64 117C 0001 001C             		move.b	#1,$1C(a0)
00010C6A 4A28 0028                  		tst.b	$28(a0)		; check	object type
00010C6E 6700                       		beq.s	locret_DE12	; if type is 00, branch
00010C70 317C 249B 0002             		move.w	#$249B,2(a0)
00010C76 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
00010C7C 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
00010C82                            
00010C82                            locret_DE12:
00010C82 4E75                       		rts	
00010C84                            ; ===========================================================================
00010C84                            
00010C84                            Obj42_Type00:				; XREF: Obj42_Index2
00010C84 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
00010C8A 6400                       		bcc.s	Obj42_Fall	; if yes, branch
00010C8C 08E8 0000 0022             		bset	#0,$22(a0)
00010C92 3038 D008                  		move.w	($FFFFD008).w,d0
00010C96 9068 0008                  		sub.w	8(a0),d0
00010C9A 6400                       		bcc.s	locret_DE32
00010C9C 08A8 0000 0022             		bclr	#0,$22(a0)
00010CA2                            
00010CA2                            locret_DE32:
00010CA2 4E75                       		rts	
00010CA4                            ; ===========================================================================
00010CA4                            
00010CA4                            Obj42_Fall:				; XREF: Obj42_Type00
00010CA4 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
00010CAA 6600                       		bne.s	loc_DE42
00010CAC 117C 000C 0020             		move.b	#$C,$20(a0)
00010CB2                            
00010CB2                            loc_DE42:
00010CB2 6100 F754                  		bsr.w	ObjectFall
00010CB6 6100 0000                  		bsr.w	ObjHitFloor
00010CBA 4A41                       		tst.w	d1		; has newtron hit the floor?
00010CBC 6A00                       		bpl.s	locret_DE86	; if not, branch
00010CBE D368 000C                  		add.w	d1,$C(a0)
00010CC2 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
00010CC8 5428 0025                  		addq.b	#2,$25(a0)
00010CCC 117C 0002 001C             		move.b	#2,$1C(a0)
00010CD2 0828 0005 0002             		btst	#5,2(a0)
00010CD8 6700                       		beq.s	Obj42_Move
00010CDA 5228 001C                  		addq.b	#1,$1C(a0)
00010CDE                            
00010CDE                            Obj42_Move:
00010CDE 117C 000D 0020             		move.b	#$D,$20(a0)
00010CE4 317C 0300 0010             		move.w	#$300,$10(a0)	; move newtron horizontally
00010CEA 0828 0000 0022             		btst	#0,$22(a0)
00010CF0 6600                       		bne.s	locret_DE86
00010CF2 4468 0010                  		neg.w	$10(a0)
00010CF6                            
00010CF6                            locret_DE86:
00010CF6 4E75                       		rts	
00010CF8                            ; ===========================================================================
00010CF8                            
00010CF8                            Obj42_MatchFloor:			; XREF: Obj42_Index2
00010CF8 6100 F73A                  		bsr.w	SpeedToPos
00010CFC 6100 0000                  		bsr.w	ObjHitFloor
00010D00 0C41 FFF8                  		cmpi.w	#-8,d1
00010D04 6D00                       		blt.s	loc_DEA2
00010D06 0C41 000C                  		cmpi.w	#$C,d1
00010D0A 6C00                       		bge.s	loc_DEA2
00010D0C D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
00010D10 4E75                       		rts	
00010D12                            ; ===========================================================================
00010D12                            
00010D12                            loc_DEA2:
00010D12 5428 0025                  		addq.b	#2,$25(a0)
00010D16 4E75                       		rts	
00010D18                            ; ===========================================================================
00010D18                            
00010D18                            Obj42_Speed:				; XREF: Obj42_Index2
00010D18 6100 F71A                  		bsr.w	SpeedToPos
00010D1C 4E75                       		rts	
00010D1E                            ; ===========================================================================
00010D1E                            
00010D1E                            Obj42_Type01:				; XREF: Obj42_Index2
00010D1E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
00010D24 6600                       		bne.s	Obj42_FireMissile
00010D26 117C 000C 0020             		move.b	#$C,$20(a0)
00010D2C                            
00010D2C                            Obj42_FireMissile:
00010D2C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00010D32 6600                       		bne.s	locret_DF14
00010D34 4A28 0032                  		tst.b	$32(a0)
00010D38 6600                       		bne.s	locret_DF14
00010D3A 117C 0001 0032             		move.b	#1,$32(a0)
00010D40 6100 FB9E                  		bsr.w	SingleObjLoad
00010D44 6600                       		bne.s	locret_DF14
00010D46 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00010D4A 3368 0008 0008             		move.w	8(a0),8(a1)
00010D50 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010D56 5169 000C                  		subq.w	#8,$C(a1)
00010D5A 337C 0200 0010             		move.w	#$200,$10(a1)
00010D60 303C 0014                  		move.w	#$14,d0
00010D64 0828 0000 0022             		btst	#0,$22(a0)
00010D6A 6600                       		bne.s	loc_DF04
00010D6C 4440                       		neg.w	d0
00010D6E 4469 0010                  		neg.w	$10(a1)
00010D72                            
00010D72                            loc_DF04:
00010D72 D169 0008                  		add.w	d0,8(a1)
00010D76 1368 0022 0022             		move.b	$22(a0),$22(a1)
00010D7C 137C 0001 0028             		move.b	#1,$28(a1)
00010D82                            
00010D82                            locret_DF14:
00010D82 4E75                       		rts	
00010D84                            ; ===========================================================================
00010D84                            
00010D84                            Obj42_Delete:				; XREF: Obj42_Index
00010D84 6000 F710                  		bra.w	DeleteObject
00010D88                            ; ===========================================================================
00010D88                            Ani_obj42:
00010D88                            	include "_anim\obj42.asm"
00010D88                            ; ---------------------------------------------------------------------------
00010D88                            ; Animation script - Newtron enemy
00010D88                            ; ---------------------------------------------------------------------------
00010D88 0000                       		dc.w byte_DF24-Ani_obj42
00010D8A 0000                       		dc.w byte_DF28-Ani_obj42
00010D8C 0000                       		dc.w byte_DF30-Ani_obj42
00010D8E 0000                       		dc.w byte_DF34-Ani_obj42
00010D90 0000                       		dc.w byte_DF38-Ani_obj42
00010D92 130A FF00                  byte_DF24:	dc.b $13, $A, $FF, 0
00010D96 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
00010D9E 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
00010DA2 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
00010DA6 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
00010DB0                            		even
00010DB0                            		even
00010DB0                            
00010DB0                            ; ---------------------------------------------------------------------------
00010DB0                            ; Sprite mappings - Newtron enemy (GHZ)
00010DB0                            ; ---------------------------------------------------------------------------
00010DB0                            Map_obj42:
00010DB0                            	include "_maps\obj42.asm"
00010DB0                            ; ---------------------------------------------------------------------------
00010DB0                            ; Sprite mappings - Newtron enemy (GHZ)
00010DB0                            ; ---------------------------------------------------------------------------
00010DB0 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
00010DB4 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
00010DB8 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
00010DBC 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
00010DC0 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
00010DC4 0000                       		dc.w byte_DFF8-Map_obj42
00010DC6 03                         byte_DF58:	dc.b 3
00010DC7 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
00010DCC F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
00010DD1 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
00010DD6 03                         byte_DF68:	dc.b 3
00010DD7 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
00010DDC EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010DE1 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010DE6 03                         byte_DF78:	dc.b 3
00010DE7 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
00010DEC EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010DF1 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010DF6 04                         byte_DF88:	dc.b 4
00010DF7 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
00010DFC EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010E01 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
00010E06 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
00010E0B 03                         byte_DF9D:	dc.b 3
00010E0C F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
00010E11 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
00010E16 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
00010E1B 02                         byte_DFAD:	dc.b 2
00010E1C F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010E21 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010E26 03                         byte_DFB8:	dc.b 3
00010E27 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010E2C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010E31 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
00010E36 03                         byte_DFC8:	dc.b 3
00010E37 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010E3C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010E41 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
00010E46 03                         byte_DFD8:	dc.b 3
00010E47 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010E4C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010E51 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
00010E56 03                         byte_DFE8:	dc.b 3
00010E57 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010E5C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010E61 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
00010E66 00                         byte_DFF8:	dc.b 0
00010E68 00                         		even
00010E68 00                         		even
00010E68                            
00010E68                            ; ===========================================================================
00010E68                            ; ---------------------------------------------------------------------------
00010E68                            ; Object 43 - Roller enemy (SYZ)
00010E68                            ; ---------------------------------------------------------------------------
00010E68                            
00010E68                            Obj43:					; XREF: Obj_Index
00010E68 7000                       		moveq	#0,d0
00010E6A 1028 0024                  		move.b	$24(a0),d0
00010E6E 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
00010E72 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
00010E76                            ; ===========================================================================
00010E76 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
00010E78 0000                       		dc.w Obj43_Action-Obj43_Index
00010E7A                            ; ===========================================================================
00010E7A                            
00010E7A                            Obj43_Main:				; XREF: Obj43_Index
00010E7A 117C 000E 0016             		move.b	#$E,$16(a0)
00010E80 117C 0008 0017             		move.b	#8,$17(a0)
00010E86 6100 F580                  		bsr.w	ObjectFall
00010E8A 6100 0000                  		bsr.w	ObjHitFloor
00010E8E 4A41                       		tst.w	d1
00010E90 6A00                       		bpl.s	locret_E052
00010E92 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
00010E96 317C 0000 0012             		move.w	#0,$12(a0)
00010E9C 5428 0024                  		addq.b	#2,$24(a0)
00010EA0 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
00010EA8 317C 04B8 0002             		move.w	#$4B8,2(a0)
00010EAE 117C 0004 0001             		move.b	#4,1(a0)
00010EB4 117C 0004 0018             		move.b	#4,$18(a0)
00010EBA 117C 0010 0019             		move.b	#$10,$19(a0)
00010EC0                            
00010EC0                            locret_E052:
00010EC0 4E75                       		rts	
00010EC2                            ; ===========================================================================
00010EC2                            
00010EC2                            Obj43_Action:				; XREF: Obj43_Index
00010EC2 7000                       		moveq	#0,d0
00010EC4 1028 0025                  		move.b	$25(a0),d0
00010EC8 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
00010ECC 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
00010ED0 43F9 0000 0000             		lea	(Ani_obj43).l,a1
00010ED6 6100 C512                  		bsr.w	AnimateSprite
00010EDA 3028 0008                  		move.w	8(a0),d0
00010EDE 0240 FF80                  		andi.w	#$FF80,d0
00010EE2 3238 F700                  		move.w	($FFFFF700).w,d1
00010EE6 0441 0080                  		subi.w	#$80,d1
00010EEA 0241 FF80                  		andi.w	#$FF80,d1
00010EEE 9041                       		sub.w	d1,d0
00010EF0 0C40 0280                  		cmpi.w	#$280,d0
00010EF4 6E00 0000                  		bgt.w	Obj43_ChkGone
00010EF8 6000 F560                  		bra.w	DisplaySprite
00010EFC                            ; ===========================================================================
00010EFC                            
00010EFC                            Obj43_ChkGone:				; XREF: Obj43_Action
00010EFC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010F00 7000                       		moveq	#0,d0
00010F02 1028 0023                  		move.b	$23(a0),d0
00010F06 6700                       		beq.s	Obj43_Delete
00010F08 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010F0E                            
00010F0E                            Obj43_Delete:
00010F0E 6000 F586                  		bra.w	DeleteObject
00010F12                            ; ===========================================================================
00010F12 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
00010F14 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
00010F16 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
00010F18 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
00010F1A                            ; ===========================================================================
00010F1A                            
00010F1A                            Obj43_RollChk:				; XREF: Obj43_Index2
00010F1A 3038 D008                  		move.w	($FFFFD008).w,d0
00010F1E 0440 0100                  		subi.w	#$100,d0
00010F22 6500                       		bcs.s	loc_E0D2
00010F24 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
00010F28 6500                       		bcs.s	loc_E0D2
00010F2A 5828 0025                  		addq.b	#4,$25(a0)
00010F2E 117C 0002 001C             		move.b	#2,$1C(a0)
00010F34 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
00010F3A 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
00010F40                            
00010F40                            loc_E0D2:
00010F40 588F                       		addq.l	#4,sp
00010F42 4E75                       		rts	
00010F44                            ; ===========================================================================
00010F44                            
00010F44                            Obj43_RollNoChk:			; XREF: Obj43_Index2
00010F44 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
00010F4A 6700                       		beq.s	loc_E0F8
00010F4C 5368 0030                  		subq.w	#1,$30(a0)
00010F50 6A00                       		bpl.s	locret_E0F6
00010F52 117C 0001 001C             		move.b	#1,$1C(a0)
00010F58 317C 0700 0010             		move.w	#$700,$10(a0)
00010F5E 117C 008E 0020             		move.b	#$8E,$20(a0)
00010F64                            
00010F64                            locret_E0F6:
00010F64 4E75                       		rts	
00010F66                            ; ===========================================================================
00010F66                            
00010F66                            loc_E0F8:
00010F66 5428 0025                  		addq.b	#2,$25(a0)
00010F6A 4E75                       		rts	
00010F6C                            ; ===========================================================================
00010F6C                            
00010F6C                            Obj43_ChkJump:				; XREF: Obj43_Index2
00010F6C 6100 0000                  		bsr.w	Obj43_Stop
00010F70 6100 F4C2                  		bsr.w	SpeedToPos
00010F74 6100 0000                  		bsr.w	ObjHitFloor
00010F78 0C41 FFF8                  		cmpi.w	#-8,d1
00010F7C 6D00                       		blt.s	Obj43_Jump
00010F7E 0C41 000C                  		cmpi.w	#$C,d1
00010F82 6C00                       		bge.s	Obj43_Jump
00010F84 D368 000C                  		add.w	d1,$C(a0)
00010F88 4E75                       		rts	
00010F8A                            ; ===========================================================================
00010F8A                            
00010F8A                            Obj43_Jump:
00010F8A 5428 0025                  		addq.b	#2,$25(a0)
00010F8E 08E8 0000 0032             		bset	#0,$32(a0)
00010F94 6700                       		beq.s	locret_E12E
00010F96 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
00010F9C                            
00010F9C                            locret_E12E:
00010F9C 4E75                       		rts	
00010F9E                            ; ===========================================================================
00010F9E                            
00010F9E                            Obj43_MatchFloor:			; XREF: Obj43_Index2
00010F9E 6100 F468                  		bsr.w	ObjectFall
00010FA2 4A68 0012                  		tst.w	$12(a0)
00010FA6 6B00                       		bmi.s	locret_E150
00010FA8 6100 0000                  		bsr.w	ObjHitFloor
00010FAC 4A41                       		tst.w	d1
00010FAE 6A00                       		bpl.s	locret_E150
00010FB0 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
00010FB4 5528 0025                  		subq.b	#2,$25(a0)
00010FB8 317C 0000 0012             		move.w	#0,$12(a0)
00010FBE                            
00010FBE                            locret_E150:
00010FBE 4E75                       		rts	
00010FC0                            
00010FC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010FC0                            
00010FC0                            
00010FC0                            Obj43_Stop:				; XREF: Obj43_ChkJump
00010FC0 4A28 0032                  		tst.b	$32(a0)
00010FC4 6B00                       		bmi.s	locret_E188
00010FC6 3038 D008                  		move.w	($FFFFD008).w,d0
00010FCA 0440 0030                  		subi.w	#$30,d0
00010FCE 9068 0008                  		sub.w	8(a0),d0
00010FD2 6400                       		bcc.s	locret_E188
00010FD4 117C 0000 001C             		move.b	#0,$1C(a0)
00010FDA 117C 000E 0020             		move.b	#$E,$20(a0)
00010FE0 4268 0010                  		clr.w	$10(a0)
00010FE4 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
00010FEA 117C 0002 0025             		move.b	#2,$25(a0)
00010FF0 08E8 0007 0032             		bset	#7,$32(a0)
00010FF6                            
00010FF6                            locret_E188:
00010FF6 4E75                       		rts	
00010FF8                            ; End of function Obj43_Stop
00010FF8                            
00010FF8                            ; ===========================================================================
00010FF8                            Ani_obj43:
00010FF8                            	include "_anim\obj43.asm"
00010FF8                            ; ---------------------------------------------------------------------------
00010FF8                            ; Animation script - Roller enemy
00010FF8                            ; ---------------------------------------------------------------------------
00010FF8 0000                       		dc.w byte_E190-Ani_obj43
00010FFA 0000                       		dc.w byte_E196-Ani_obj43
00010FFC 0000                       		dc.w byte_E19C-Ani_obj43
00010FFE 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
00011004 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0001100A 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
00011010 00                         		even
00011010 00                         		even
00011010                            
00011010                            ; ---------------------------------------------------------------------------
00011010                            ; Sprite mappings - Roller enemy (SYZ)
00011010                            ; ---------------------------------------------------------------------------
00011010                            Map_obj43:
00011010                            	include "_maps\obj43.asm"
00011010                            ; ---------------------------------------------------------------------------
00011010                            ; Sprite mappings - Roller enemy (SYZ)
00011010                            ; ---------------------------------------------------------------------------
00011010 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
00011014 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
00011018 0000                       		dc.w byte_E1CE-Map_obj43
0001101A 02                         byte_E1AC:	dc.b 2
0001101B DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
00011020 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
00011025 02                         byte_E1B7:	dc.b 2
00011026 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001102B FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
00011030 01                         byte_E1C2:	dc.b 1
00011031 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00011036 01                         byte_E1C8:	dc.b 1
00011037 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0001103C 01                         byte_E1CE:	dc.b 1
0001103D F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00011042                            		even
00011042                            		even
00011042                            
00011042                            ; ===========================================================================
00011042                            ; ---------------------------------------------------------------------------
00011042                            ; Object 44 - walls (GHZ)
00011042                            ; ---------------------------------------------------------------------------
00011042                            
00011042                            Obj44:					; XREF: Obj_Index
00011042 7000                       		moveq	#0,d0
00011044 1028 0024                  		move.b	$24(a0),d0
00011048 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0001104C 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
00011050                            ; ===========================================================================
00011050 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
00011052 0000                       		dc.w Obj44_Solid-Obj44_Index
00011054 0000                       		dc.w Obj44_Display-Obj44_Index
00011056                            ; ===========================================================================
00011056                            
00011056                            Obj44_Main:				; XREF: Obj44_Index
00011056 5428 0024                  		addq.b	#2,$24(a0)
0001105A 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
00011062 317C 434C 0002             		move.w	#$434C,2(a0)
00011068 0028 0004 0001             		ori.b	#4,1(a0)
0001106E 117C 0008 0019             		move.b	#8,$19(a0)
00011074 117C 0006 0018             		move.b	#6,$18(a0)
0001107A 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
00011080 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
00011086 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
00011088 5428 0024                  		addq.b	#2,$24(a0)
0001108C 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0001108E                            ; ===========================================================================
0001108E                            
0001108E                            Obj44_Solid:				; XREF: Obj44_Index
0001108E 323C 0013                  		move.w	#$13,d1
00011092 343C 0028                  		move.w	#$28,d2
00011096 6100 A4C4                  		bsr.w	Obj44_SolidWall
0001109A                            
0001109A                            Obj44_Display:				; XREF: Obj44_Index
0001109A 6100 F3BE                  		bsr.w	DisplaySprite
0001109E 3028 0008                  		move.w	8(a0),d0
000110A2 0240 FF80                  		andi.w	#$FF80,d0
000110A6 3238 F700                  		move.w	($FFFFF700).w,d1
000110AA 0441 0080                  		subi.w	#$80,d1
000110AE 0241 FF80                  		andi.w	#$FF80,d1
000110B2 9041                       		sub.w	d1,d0
000110B4 0C40 0280                  		cmpi.w	#$280,d0
000110B8 6200 F3DC                  		bhi.w	DeleteObject
000110BC 4E75                       		rts	
000110BE                            ; ===========================================================================
000110BE                            ; ---------------------------------------------------------------------------
000110BE                            ; Sprite mappings - walls (GHZ)
000110BE                            ; ---------------------------------------------------------------------------
000110BE                            Map_obj44:
000110BE                            	include "_maps\obj44.asm"
000110BE                            ; ---------------------------------------------------------------------------
000110BE                            ; Sprite mappings - walls (GHZ)
000110BE                            ; ---------------------------------------------------------------------------
000110BE 0000                       		dc.w byte_E256-Map_obj44
000110C0 0000                       		dc.w byte_E26B-Map_obj44
000110C2 0000                       		dc.w byte_E280-Map_obj44
000110C4 04                         byte_E256:	dc.b 4
000110C5 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
000110CA F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000110CF 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000110D4 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000110D9 04                         byte_E26B:	dc.b 4
000110DA E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
000110DF F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000110E4 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000110E9 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000110EE 04                         byte_E280:	dc.b 4
000110EF E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
000110F4 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
000110F9 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
000110FE 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
00011104 00                         		even
00011104 00                         		even
00011104                            
00011104                            ; ===========================================================================
00011104                            ; ---------------------------------------------------------------------------
00011104                            ; Object 13 - lava ball	producer (MZ, SLZ)
00011104                            ; ---------------------------------------------------------------------------
00011104                            
00011104                            Obj13:					; XREF: Obj_Index
00011104 7000                       		moveq	#0,d0
00011106 1028 0024                  		move.b	$24(a0),d0
0001110A 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0001110E 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
00011112 6000 0000                  		bra.w	Obj14_ChkDel
00011116                            ; ===========================================================================
00011116 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
00011118 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0001111A                            ; ---------------------------------------------------------------------------
0001111A                            ;
0001111A                            ; Lava ball production rates
0001111A                            ;
0001111A 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
00011120                            ; ===========================================================================
00011120                            
00011120                            Obj13_Main:				; XREF: Obj13_Index
00011120 5428 0024                  		addq.b	#2,$24(a0)
00011124 1028 0028                  		move.b	$28(a0),d0
00011128 E848                       		lsr.w	#4,d0
0001112A 0240 000F                  		andi.w	#$F,d0
0001112E 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
00011134 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0001113A 0228 000F 0028             		andi.b	#$F,$28(a0)
00011140                            
00011140                            Obj13_MakeLava:				; XREF: Obj13_Index
00011140 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
00011144 6600                       		bne.s	locret_E302	; if time still	remains, branch
00011146 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0001114C 6100 F586                  		bsr.w	ChkObjOnScreen
00011150 6600                       		bne.s	locret_E302
00011152 6100 F78C                  		bsr.w	SingleObjLoad
00011156 6600                       		bne.s	locret_E302
00011158 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0001115C 3368 0008 0008             		move.w	8(a0),8(a1)
00011162 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011168 1368 0028 0028             		move.b	$28(a0),$28(a1)
0001116E                            
0001116E                            locret_E302:
0001116E 4E75                       		rts	
00011170                            ; ===========================================================================
00011170                            ; ---------------------------------------------------------------------------
00011170                            ; Object 14 - lava balls (MZ, SLZ)
00011170                            ; ---------------------------------------------------------------------------
00011170                            
00011170                            Obj14:					; XREF: Obj_Index
00011170 7000                       		moveq	#0,d0
00011172 1028 0024                  		move.b	$24(a0),d0
00011176 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0001117A 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0001117E 6000 F2DA                  		bra.w	DisplaySprite
00011182                            ; ===========================================================================
00011182 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
00011184 0000                       		dc.w Obj14_Action-Obj14_Index
00011186 0000                       		dc.w Obj14_Delete-Obj14_Index
00011188                            
00011188 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
00011192 0300 FE00 0300 0000        		dc.w $300, $FE00, $300,	0
0001119A                            ; ===========================================================================
0001119A                            
0001119A                            Obj14_Main:				; XREF: Obj14_Index
0001119A 5428 0024                  		addq.b	#2,$24(a0)
0001119E 117C 0008 0016             		move.b	#8,$16(a0)
000111A4 117C 0008 0017             		move.b	#8,$17(a0)
000111AA 217C 0000 E166 0004        		move.l	#Map_obj14,4(a0)
000111B2 317C 0345 0002             		move.w	#$345,2(a0)
000111B8 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000111BE 6600                       		bne.s	loc_E35A
000111C0 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
000111C6                            
000111C6                            loc_E35A:
000111C6 117C 0004 0001             		move.b	#4,1(a0)
000111CC 117C 0003 0018             		move.b	#3,$18(a0)
000111D2 117C 008B 0020             		move.b	#$8B,$20(a0)
000111D8 3168 000C 0030             		move.w	$C(a0),$30(a0)
000111DE 4A28 0029                  		tst.b	$29(a0)
000111E2 6700                       		beq.s	Obj14_SetSpeed
000111E4 5428 0018                  		addq.b	#2,$18(a0)
000111E8                            
000111E8                            Obj14_SetSpeed:
000111E8 7000                       		moveq	#0,d0
000111EA 1028 0028                  		move.b	$28(a0),d0
000111EE D040                       		add.w	d0,d0
000111F0 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
000111F6 117C 0008 0019             		move.b	#8,$19(a0)
000111FC 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
00011202 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
00011204 117C 0010 0019             		move.b	#$10,$19(a0)
0001120A 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
00011210 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
00011216 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0001121C                            
0001121C                            Obj14_PlaySnd:  
0001121C 0C28 0005 0028                             cmpi.b  #5,$28(a0)
00011222 6700                                       beq.s   Obj14_PlayShootingSnd
00011224 303C 00AE                  		move.w	#$AE,d0
00011228 6000                                       bra.s   Obj14_PlaySoundSpecial
0001122A                            
0001122A                            Obj14_PlayShootingSnd:
0001122A 303C 00C4                  		move.w	#$C4,d0
0001122E                            
0001122E                            Obj14_PlaySoundSpecial:
0001122E 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play lava ball sound
00011234                            
00011234                            Obj14_Action:				; XREF: Obj14_Index
00011234 7000                       		moveq	#0,d0
00011236 1028 0028                  		move.b	$28(a0),d0
0001123A D040                       		add.w	d0,d0
0001123C 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
00011240 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
00011244 6100 F1EE                  		bsr.w	SpeedToPos
00011248 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0001124E 6100 C19A                  		bsr.w	AnimateSprite
00011252                            
00011252                            Obj14_ChkDel:				; XREF: Obj13
00011252 3028 0008                  		move.w	8(a0),d0
00011256 0240 FF80                  		andi.w	#$FF80,d0
0001125A 3238 F700                  		move.w	($FFFFF700).w,d1
0001125E 0441 0080                  		subi.w	#$80,d1
00011262 0241 FF80                  		andi.w	#$FF80,d1
00011266 9041                       		sub.w	d1,d0
00011268 0C40 0280                  		cmpi.w	#$280,d0
0001126C 6200 F228                  		bhi.w	DeleteObject
00011270 4E75                       		rts	
00011272                            ; ===========================================================================
00011272 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
00011276 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0001127A 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0001127E 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
00011282 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
00011284                            ; ===========================================================================
00011284                            ; lavaball types 00-03 fly up and fall back down
00011284                            
00011284                            Obj14_Type00:				; XREF: Obj14_TypeIndex
00011284 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0001128A 3028 0030                  		move.w	$30(a0),d0
0001128E B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
00011292 6400                       		bcc.s	loc_E41E	; if not, branch
00011294 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
00011298                            
00011298                            loc_E41E:
00011298 08A8 0001 0022             		bclr	#1,$22(a0)
0001129E 4A68 0012                  		tst.w	$12(a0)
000112A2 6A00                       		bpl.s	locret_E430
000112A4 08E8 0001 0022             		bset	#1,$22(a0)
000112AA                            
000112AA                            locret_E430:
000112AA 4E75                       		rts	
000112AC                            ; ===========================================================================
000112AC                            ; lavaball type	04 flies up until it hits the ceiling
000112AC                            
000112AC                            Obj14_Type04:				; XREF: Obj14_TypeIndex
000112AC 08E8 0001 0022             		bset	#1,$22(a0)
000112B2 6100 0000                  		bsr.w	ObjHitCeiling
000112B6 4A41                       		tst.w	d1
000112B8 6A00                       		bpl.s	locret_E452
000112BA 117C 0008 0028             		move.b	#8,$28(a0)
000112C0 117C 0001 001C             		move.b	#1,$1C(a0)
000112C6 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
000112CC                            
000112CC                            locret_E452:
000112CC 4E75                       		rts	
000112CE                            ; ===========================================================================
000112CE                            ; lavaball type	05 falls down until it hits the	floor
000112CE                            
000112CE                            Obj14_Type05:				; XREF: Obj14_TypeIndex
000112CE 08A8 0001 0022             		bclr	#1,$22(a0)
000112D4 6100 0000                  		bsr.w	ObjHitFloor
000112D8 4A41                       		tst.w	d1
000112DA 6A00                       		bpl.s	locret_E474
000112DC 117C 0008 0028             		move.b	#8,$28(a0)
000112E2 117C 0001 001C             		move.b	#1,$1C(a0)
000112E8 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
000112EE                            
000112EE                            locret_E474:
000112EE 4E75                       		rts	
000112F0                            ; ===========================================================================
000112F0                            ; lavaball types 06-07 move sideways
000112F0                            
000112F0                            Obj14_Type06:				; XREF: Obj14_TypeIndex
000112F0 08E8 0000 0022             		bset	#0,$22(a0)
000112F6 76F8                       		moveq	#-8,d3
000112F8 6100 0000                  		bsr.w	ObjHitWallLeft
000112FC 4A41                       		tst.w	d1
000112FE 6A00                       		bpl.s	locret_E498
00011300 117C 0008 0028             		move.b	#8,$28(a0)
00011306 117C 0003 001C             		move.b	#3,$1C(a0)
0001130C 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
00011312                            
00011312                            locret_E498:
00011312 4E75                       		rts	
00011314                            ; ===========================================================================
00011314                            
00011314                            Obj14_Type07:				; XREF: Obj14_TypeIndex
00011314 08A8 0000 0022             		bclr	#0,$22(a0)
0001131A 7608                       		moveq	#8,d3
0001131C 6100 0000                  		bsr.w	ObjHitWallRight
00011320 4A41                       		tst.w	d1
00011322 6A00                       		bpl.s	locret_E4BC
00011324 117C 0008 0028             		move.b	#8,$28(a0)
0001132A 117C 0003 001C             		move.b	#3,$1C(a0)
00011330 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
00011336                            
00011336                            locret_E4BC:
00011336 4E75                       		rts	
00011338                            ; ===========================================================================
00011338                            
00011338                            Obj14_Type08:				; XREF: Obj14_TypeIndex
00011338 4E75                       		rts	
0001133A                            ; ===========================================================================
0001133A                            
0001133A                            Obj14_Delete:				; XREF: Obj14_Index
0001133A 6000 F15A                  		bra.w	DeleteObject
0001133E                            ; ===========================================================================
0001133E                            Ani_obj14:
0001133E                            	include "_anim\obj14.asm"
0001133E                            ; ---------------------------------------------------------------------------
0001133E                            ; Animation script - lava balls
0001133E                            ; ---------------------------------------------------------------------------
0001133E 0000                       		dc.w byte_E4CC-Ani_obj14
00011340 0000                       		dc.w byte_E4D2-Ani_obj14
00011342 0000                       		dc.w byte_E4D6-Ani_obj14
00011344 0000                       		dc.w byte_E4DC-Ani_obj14
00011346 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0001134C 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
00011350 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
00011356 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0001135A                            		even
0001135A                            		even
0001135A                            
0001135A                            ; ===========================================================================
0001135A                            ; ---------------------------------------------------------------------------
0001135A                            ; Object 6D - flame thrower (SBZ)
0001135A                            ; ---------------------------------------------------------------------------
0001135A                            
0001135A                            Obj6D:					; XREF: Obj_Index
0001135A 7000                       		moveq	#0,d0
0001135C 1028 0024                  		move.b	$24(a0),d0
00011360 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
00011364 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
00011368                            ; ===========================================================================
00011368 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0001136A 0000                       		dc.w Obj6D_Action-Obj6D_Index
0001136C                            ; ===========================================================================
0001136C                            
0001136C                            Obj6D_Main:				; XREF: Obj6D_Index
0001136C 5428 0024                  		addq.b	#2,$24(a0)
00011370 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
00011378 317C 83D9 0002             		move.w	#$83D9,2(a0)
0001137E 0028 0004 0001             		ori.b	#4,1(a0)
00011384 117C 0001 0018             		move.b	#1,$18(a0)
0001138A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011390 117C 000C 0019             		move.b	#$C,$19(a0)
00011396 1028 0028                  		move.b	$28(a0),d0
0001139A 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0001139E D040                       		add.w	d0,d0		; multiply by 2
000113A0 3140 0030                  		move.w	d0,$30(a0)
000113A4 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
000113A8 1028 0028                  		move.b	$28(a0),d0
000113AC 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
000113B0 EB48                       		lsl.w	#5,d0		; multiply by $20
000113B2 3140 0034                  		move.w	d0,$34(a0)	; set pause time
000113B6 117C 000A 0036             		move.b	#$A,$36(a0)
000113BC 0828 0001 0022             		btst	#1,$22(a0)
000113C2 6700                       		beq.s	Obj6D_Action
000113C4 117C 0002 001C             		move.b	#2,$1C(a0)
000113CA 117C 0015 0036             		move.b	#$15,$36(a0)
000113D0                            
000113D0                            Obj6D_Action:				; XREF: Obj6D_Index
000113D0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000113D4 6A00                       		bpl.s	loc_E57A	; if time remains, branch
000113D6 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
000113DC 0868 0000 001C             		bchg	#0,$1C(a0)
000113E2 6700                       		beq.s	loc_E57A
000113E4 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
000113EA 303C 00B3                  		move.w	#$B3,d0
000113EE 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play flame sound
000113F4                            
000113F4                            loc_E57A:
000113F4 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
000113FA 6100 BFEE                  		bsr.w	AnimateSprite
000113FE 117C 0000 0020             		move.b	#0,$20(a0)
00011404 1028 0036                  		move.b	$36(a0),d0
00011408 B028 001A                  		cmp.b	$1A(a0),d0
0001140C 6600                       		bne.s	Obj6D_ChkDel
0001140E 117C 00A3 0020             		move.b	#$A3,$20(a0)
00011414                            
00011414                            Obj6D_ChkDel:
00011414 3028 0008                  		move.w	8(a0),d0
00011418 0240 FF80                  		andi.w	#$FF80,d0
0001141C 3238 F700                  		move.w	($FFFFF700).w,d1
00011420 0441 0080                  		subi.w	#$80,d1
00011424 0241 FF80                  		andi.w	#$FF80,d1
00011428 9041                       		sub.w	d1,d0
0001142A 0C40 0280                  		cmpi.w	#$280,d0
0001142E 6200 F066                  		bhi.w	DeleteObject
00011432 6000 F026                  		bra.w	DisplaySprite
00011436                            ; ===========================================================================
00011436                            Ani_obj6D:
00011436                            	include "_anim\obj6D.asm"
00011436                            ; ---------------------------------------------------------------------------
00011436                            ; Animation script - flamethrower (SBZ)
00011436                            ; ---------------------------------------------------------------------------
00011436 0000                       		dc.w byte_E5C4-Ani_obj6D
00011438 0000                       		dc.w byte_E5D2-Ani_obj6D
0001143A 0000                       		dc.w byte_E5DC-Ani_obj6D
0001143C 0000                       		dc.w byte_E5EA-Ani_obj6D
0001143E 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0001144C 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
00011456 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
00011464 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0001146E                            		even
0001146E                            		even
0001146E                            
0001146E                            ; ---------------------------------------------------------------------------
0001146E                            ; Sprite mappings - flame thrower (SBZ)
0001146E                            ; ---------------------------------------------------------------------------
0001146E                            Map_obj6D:
0001146E                            	include "_maps\obj6D.asm"
0001146E                            ; ---------------------------------------------------------------------------
0001146E                            ; Sprite mappings - flame thrower (SBZ)
0001146E                            ; ---------------------------------------------------------------------------
0001146E 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
00011472 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
00011476 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0001147A 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0001147E 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
00011482 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
00011486 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0001148A 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0001148E 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
00011492 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
00011496 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0001149A 01                         byte_E620:	dc.b 1
0001149B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000114A0 02                         byte_E626:	dc.b 2
000114A1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000114A6 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000114AB 02                         byte_E631:	dc.b 2
000114AC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000114B1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000114B6 03                         byte_E63C:	dc.b 3
000114B7 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000114BC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000114C1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000114C6 03                         byte_E64C:	dc.b 3
000114C7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000114CC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000114D1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000114D6 04                         byte_E65C:	dc.b 4
000114D7 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000114DC 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000114E1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000114E6 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000114EB 04                         byte_E671:	dc.b 4
000114EC 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000114F1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000114F6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000114FB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00011500 05                         byte_E686:	dc.b 5
00011501 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00011506 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001150B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00011510 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00011515 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001151A 05                         byte_E6A0:	dc.b 5
0001151B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00011520 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00011525 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001152A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001152F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00011534 06                         byte_E6BA:	dc.b 6
00011535 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0001153A F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0001153F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00011544 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00011549 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001154E 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00011553 06                         byte_E6D9:	dc.b 6
00011554 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00011559 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0001155E 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00011563 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00011568 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001156D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00011572 01                         byte_E6F8:	dc.b 1
00011573 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00011578 02                         byte_E6FE:	dc.b 2
00011579 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001157E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00011583 02                         byte_E709:	dc.b 2
00011584 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00011589 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001158E 03                         byte_E714:	dc.b 3
0001158F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00011594 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00011599 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001159E 03                         byte_E724:	dc.b 3
0001159F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000115A4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000115A9 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000115AE 04                         byte_E734:	dc.b 4
000115AF 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000115B4 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000115B9 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000115BE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000115C3 04                         byte_E749:	dc.b 4
000115C4 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000115C9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000115CE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000115D3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000115D8 05                         byte_E75E:	dc.b 5
000115D9 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
000115DE 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000115E3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000115E8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000115ED 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000115F2 05                         byte_E778:	dc.b 5
000115F3 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000115F8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000115FD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00011602 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00011607 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001160C 06                         byte_E792:	dc.b 6
0001160D E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00011612 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00011617 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001161C 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00011621 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00011626 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001162B 06                         byte_E7B1:	dc.b 6
0001162C E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00011631 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00011636 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0001163B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00011640 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00011645 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001164A                            		even
0001164A                            		even
0001164A                            
0001164A                            ; ===========================================================================
0001164A                            ; ---------------------------------------------------------------------------
0001164A                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0001164A                            ; ---------------------------------------------------------------------------
0001164A                            
0001164A                            Obj46:					; XREF: Obj_Index
0001164A 7000                       		moveq	#0,d0
0001164C 1028 0024                  		move.b	$24(a0),d0
00011650 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
00011654 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
00011658                            ; ===========================================================================
00011658 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0001165A 0000                       		dc.w Obj46_Action-Obj46_Index
0001165C                            ; ===========================================================================
0001165C                            
0001165C                            Obj46_Main:				; XREF: Obj46_Index
0001165C 5428 0024                  		addq.b	#2,$24(a0)
00011660 117C 000F 0016             		move.b	#$F,$16(a0)
00011666 117C 000F 0017             		move.b	#$F,$17(a0)
0001166C 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
00011674 317C 4000 0002             		move.w	#$4000,2(a0)
0001167A 117C 0004 0001             		move.b	#4,1(a0)
00011680 117C 0003 0018             		move.b	#3,$18(a0)
00011686 117C 0010 0019             		move.b	#$10,$19(a0)
0001168C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011692 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00011698                            
00011698                            Obj46_Action:				; XREF: Obj46_Index
00011698 4A28 0001                  		tst.b	1(a0)
0001169C 6A00                       		bpl.s	Obj46_ChkDel
0001169E 7000                       		moveq	#0,d0
000116A0 1028 0028                  		move.b	$28(a0),d0	; get object type
000116A4 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
000116A8 D040                       		add.w	d0,d0
000116AA 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
000116AE 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
000116B2 323C 001B                  		move.w	#$1B,d1
000116B6 343C 0010                  		move.w	#$10,d2
000116BA 363C 0011                  		move.w	#$11,d3
000116BE 3828 0008                  		move.w	8(a0),d4
000116C2 6100 0000                  		bsr.w	SolidObject
000116C6                            
000116C6                            Obj46_ChkDel:
000116C6 6100 ED92                  		bsr.w	DisplaySprite
000116CA 3028 0008                  		move.w	8(a0),d0
000116CE 0240 FF80                  		andi.w	#$FF80,d0
000116D2 3238 F700                  		move.w	($FFFFF700).w,d1
000116D6 0441 0080                  		subi.w	#$80,d1
000116DA 0241 FF80                  		andi.w	#$FF80,d1
000116DE 9041                       		sub.w	d1,d0
000116E0 0C40 0280                  		cmpi.w	#$280,d0
000116E4 6200 EDB0                  		bhi.w	DeleteObject
000116E8 4E75                       		rts	
000116EA                            ; ===========================================================================
000116EA 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
000116EC 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
000116EE 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
000116F0 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
000116F2 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
000116F4                            ; ===========================================================================
000116F4                            
000116F4                            Obj46_Type00:				; XREF: Obj46_TypeIndex
000116F4 4E75                       		rts	
000116F6                            ; ===========================================================================
000116F6                            
000116F6                            Obj46_Type02:				; XREF: Obj46_TypeIndex
000116F6 3038 D008                  		move.w	($FFFFD008).w,d0
000116FA 9068 0008                  		sub.w	8(a0),d0
000116FE 6400                       		bcc.s	loc_E888
00011700 4440                       		neg.w	d0
00011702                            
00011702                            loc_E888:
00011702 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00011706 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
00011708 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0001170E                            
0001170E                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0001170E 7000                       		moveq	#0,d0
00011710 1038 FE74                  		move.b	($FFFFFE74).w,d0
00011714 0828 0003 0028             		btst	#3,$28(a0)
0001171A 6700                       		beq.s	loc_E8A8
0001171C 4440                       		neg.w	d0
0001171E 0640 0010                  		addi.w	#$10,d0
00011722                            
00011722                            loc_E8A8:
00011722 3228 0030                  		move.w	$30(a0),d1
00011726 9240                       		sub.w	d0,d1
00011728 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0001172C 4E75                       		rts	
0001172E                            ; ===========================================================================
0001172E                            
0001172E                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0001172E 6100 ED04                  		bsr.w	SpeedToPos
00011732 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
00011738 6100 0000                  		bsr.w	ObjHitFloor
0001173C 4A41                       		tst.w	d1		; has the block	hit the	floor?
0001173E 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00011742 D368 000C                  		add.w	d1,$C(a0)
00011746 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0001174A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011750 117C 0004 0028             		move.b	#4,$28(a0)
00011756 3011                       		move.w	(a1),d0
00011758 0240 03FF                  		andi.w	#$3FF,d0
0001175C 0C40 02E8                  		cmpi.w	#$2E8,d0
00011760 6400                       		bcc.s	locret_E8EE
00011762 117C 0000 0028             		move.b	#0,$28(a0)
00011768                            
00011768                            locret_E8EE:
00011768 4E75                       		rts	
0001176A                            ; ===========================================================================
0001176A                            
0001176A                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0001176A 7000                       		moveq	#0,d0
0001176C 1038 FE70                  		move.b	($FFFFFE70).w,d0
00011770 E648                       		lsr.w	#3,d0
00011772 3228 0030                  		move.w	$30(a0),d1
00011776 9240                       		sub.w	d0,d1
00011778 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0001177C 4E75                       		rts	
0001177E                            ; ===========================================================================
0001177E                            ; ---------------------------------------------------------------------------
0001177E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0001177E                            ; ---------------------------------------------------------------------------
0001177E                            Map_obj46:
0001177E                            	include "_maps\obj46.asm"
0001177E                            ; ---------------------------------------------------------------------------
0001177E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0001177E                            ; ---------------------------------------------------------------------------
0001177E 0000                       		dc.w byte_E906-Map_obj46
00011780 01                         byte_E906:	dc.b 1
00011781 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00011786                            		even
00011786                            		even
00011786                            
00011786                            ; ===========================================================================
00011786                            ; ---------------------------------------------------------------------------
00011786                            ; Object 12 - Hell girl (badnik)
00011786                            ; ---------------------------------------------------------------------------
00011786                            
00011786                            Obj12:					; XREF: Obj_Index
00011786 7000                       		moveq	#0,d0
00011788 1028 0024                  		move.b	$24(a0),d0
0001178C 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
00011790 4EBB 1000                  		jsr	Obj12_Index(pc,d1.w)
00011794 4EFA ECC4                  		jmp	DisplaySprite
00011798                            ; ===========================================================================
00011798 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0001179A 0000                       		dc.w Obj12_Test-Obj12_Index
0001179C 0000                       		dc.w Obj12_Explode-Obj12_Index
0001179E                            ; ===========================================================================
0001179E                            
0001179E                            Obj12_Main:			
0001179E 5428 0024                  		addq.b	#2,$24(a0)
000117A2 217C 0000 0000 0004        		move.l	#Map_Hellgirl,4(a0)
000117AA 317C 047B 0002             		move.w	#($8F60/$20),2(a0)
000117B0 0028 0004 0001             		ori.b	#4,1(a0)
000117B6 117C 009A 0020             		move.b	#$9A,$20(a0)
000117BC 117C 0004 0018             		move.b	#4,$18(a0)
000117C2 117C 0010 0019             		move.b	#$10,$19(a0)
000117C8 117C 0015 0033             		move.b	#$15,$33(a0)
000117CE                            ; ===========================================================================
000117CE                            
000117CE                            Obj12_Test:
000117CE 4EBA EC8A                  		jsr	DisplaySprite
000117D2 117C 0000 001C             		move.b  #0,$1C(a0)
000117D8 6100 EEFA                  		bsr.w	ChkObjOnScreen
000117DC 6600 0000                  		bne.w	Obj12_Animate
000117E0 3038 D008                      		move.w ($FFFFD000+8).w,d0  
000117E4 9068 0008                  		sub.w 	8(a0),d0 
000117E8 6A00                       		bpl.s	Obj12_Kiss
000117EA 4440                       		neg.w	d0
000117EC                            
000117EC                            Obj12_Kiss: 
000117EC 0C40 00A5                  		cmpi.w	#$A5,d0
000117F0 6400 0000                  		bcc.w	Obj12_Animate
000117F4 117C 0001 001C             		move.b	#1,$1C(a0)
000117FA 5328 0033                  		subq.b	#1,$33(a0)
000117FE 6A00                       		bpl.s	Obj12_Animate
00011800 117C 0000 001C             		move.b	#0,$1C(a0)
00011806 117C 003C 0033             		move.b	#$3C,$33(a0)
0001180C 303C 00AD                  		move.w	#$AD,d0
00011810 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00011816 4EBA F0C8                  		jsr	SingleObjLoad
0001181A 6600 0000                  		bne.w   Obj12_Animate
0001181E 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00011822 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011828 3368 0008 0008             		move.w	8(a0),8(a1)
0001182E 0469 000A 0008             		sub.w   #$A,8(a1)
00011834 0828 0000 0022             		btst	#0,$22(a0)		; is Hell Girl facing right?
0001183A 6700                       		beq.s	Obj12_SetHeartSpd	; if yes, branch
0001183C 0669 0014 0008                             add.w   #$14,8(a1)
00011842                            
00011842                            Obj12_SetHeartSpd:
00011842 3038 D008                      		move.w ($FFFFD000+8).w,d0 ; 
00011846 9068 0008                  		sub.w 	8(a0),d0 ; 
0001184A E540                       		asl.w 	#2,d0 ;
0001184C 3340 0010                                  move.w 	d0,$10(a1);
00011850 3038 D00C                      		move.w ($FFFFD000+$C).w,d0 ;
00011854 9068 000C                  		sub.w 	$C(a0),d0 ; 
00011858 E540                       		asl.w 	#2,d0 ;
0001185A 3340 0012                                  move.w 	d0,$12(a1);
0001185E 5428 0024                  		addq.b  #2,$24(a0);
00011862                            
00011862                            ; ===========================================================================
00011862                            
00011862                            Obj12_Animate:
00011862 43F9 0000 0000             		lea	(Ani_Hellgirl).l,a1
00011868 4EBA BB80                  		jsr	AnimateSprite
0001186C 4E75                                       rts
0001186E                            ; ============================================================================
0001186E                            
0001186E                            Obj12_Explode:
0001186E 5328 0033                  		subq.b	#1,$33(a0)
00011872 6A00                       		bpl.s	locrecio_345Ckorrija
00011874 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	(Obj3F)
00011878 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0001187E 4EFA A0F8                  		jmp	Obj3F		; jump to explosion code
00011882                            
00011882                            locrecio_345Ckorrija:
00011882 4E75                       		rts
00011884                            ; ===========================================================================
00011884                            ; ---------------------------------------------------------------------------
00011884                            ; Sprite mappings - lamp (SYZ)
00011884                            ; ---------------------------------------------------------------------------
00011884                            Map_obj12:
00011884                            	include "_maps\obj12.asm"
00011884                            ; ---------------------------------------------------------------------------
00011884                            ; Sprite mappings - lamp (SYZ)
00011884                            ; ---------------------------------------------------------------------------
00011884 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
00011888 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0001188C 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
00011890 02                         byte_E98E:	dc.b 2
00011891 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
00011896 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0001189B 02                         byte_E999:	dc.b 2
0001189C F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
000118A1 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
000118A6 02                         byte_E9A4:	dc.b 2
000118A7 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
000118AC 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
000118B1 02                         byte_E9AF:	dc.b 2
000118B2 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
000118B7 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
000118BC 02                         byte_E9BA:	dc.b 2
000118BD F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
000118C2 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
000118C7 02                         byte_E9C5:	dc.b 2
000118C8 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
000118CD 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
000118D2                            		even
000118D2                            		even
000118D2                            
000118D2                            ; ===========================================================================
000118D2                            ; ---------------------------------------------------------------------------
000118D2                            ; Object 07 - Hatofu enemy (SLZ)
000118D2                            ; ---------------------------------------------------------------------------
000118D2                            
000118D2                            Obj07:					; XREF: Obj_Index
000118D2 7000                       		moveq	#0,d0
000118D4 1028 0024                  		move.b	$24(a0),d0
000118D8 323B 0000                  		move.w	Obj07_Index(pc,d0.w),d1
000118DC 4EFB 1000                  		jmp	Obj07_Index(pc,d1.w)
000118E0                            ; ===========================================================================
000118E0 0000                       Obj07_Index:	dc.w Obj07_Main-Obj07_Index
000118E2 0000                       		dc.w Obj07_CheckSignal-Obj07_Index
000118E4 0000                       		dc.w Obj07_ThrowBullet-Obj07_Index
000118E6 0000                       		dc.w Obj07_ContinueUp-Obj07_Index
000118E8                            ; ===========================================================================
000118E8                            
000118E8                            Obj07_Main:				; XREF: Obj07_Index
000118E8 5428 0024                  		addq.b	#2,$24(a0)
000118EC 217C 0000 0000 0004        		move.l	#Map_Obj07,4(a0)
000118F4 317C 04F0 0002             		move.w	#($9E00/$20),2(a0)
000118FA 0028 0004 0001             		ori.b	#4,1(a0)
00011900 117C 000A 0020             		move.b	#$A,$20(a0)
00011906 117C 0004 0018             		move.b	#4,$18(a0)
0001190C 117C 0010 0019             		move.b	#$10,$19(a0)
00011912 117C 0000 001C             		move.b	#0,$1C(a0)
00011918 3038 D00C                  		move.w ($FFFFD000+$C).w,d0 ; Çàãðóçèòü Y ïîçèöèþ Ñîíèêà.
0001191C 9068 000C                  		sub.w 	$C(a0),d0 ; Âû÷åñòü ïîçèöèþ îáúåêòà èç ïîçèöèè Ñîíèêà. Òàê ìû ïîëó÷èì äèñòàíöèþ Ñîíèêà ê îáúåêòó.
00011920 E540                       		asl.w 	#2,d0 ; Àðèôìåòè÷åñêèé ñäâèã(2 ðàçà). Íóæíî óâåëè÷èòü çíà÷åíèå äëÿ ïîëó÷åíèÿ íîðìàëüíîé ñêîðîñòè.
00011922 3140 0012                                  move.w 	d0,$12(a0);
00011926 0828 0000 0022             		btst	#0,$22(a0)	; is hatofu facing left?
0001192C 6700                       		beq.s	Obj07_CheckSignal	; if yes, branch
0001192E 4468 0010                  		neg.w	$10(a0)		; move hatofu to the right
00011932                            
00011932                            Obj07_CheckSignal:				; XREF: Obj07_Index
00011932 3038 D008                  		move.w ($FFFFD000+8).w,d0 ; Çàãðóçèòü Y ïîçèöèþ Ñîíèêà.
00011936 9068 0008                  		sub.w 	8(a0),d0 ; Âû÷åñòü ïîçèöèþ îáúåêòà èç ïîçèöèè Ñîíèêà. Òàê ìû ïîëó÷èì äèñòàíöèþ Ñîíèêà ê îáúåêòó.
0001193A E540                       		asl.w 	#2,d0 ; Àðèôìåòè÷åñêèé ñäâèã(2 ðàçà). Íóæíî óâåëè÷èòü çíà÷åíèå äëÿ ïîëó÷åíèÿ íîðìàëüíîé ñêîðîñòè.
0001193C 3140 0010                                  move.w 	d0,$10(a0);	
00011940                            		;subq.w	#4,$12(a0)
00011940 3038 D00C                  		move.w ($FFFFD000+$C).w,d0 ; Çàãðóçèòü Y ïîçèöèþ Ñîíèêà.
00011944 9068 000C                  		sub.w 	$C(a0),d0 ; Âû÷åñòü ïîçèöèþ îáúåêòà èç ïîçèöèè Ñîíèêà. Òàê ìû ïîëó÷èì äèñòàíöèþ Ñîíèêà ê îáúåêòó.
00011948 0C40 001B                  		cmpi.w	#$1B,d0
0001194C 6400                       		bcc.s	Obj07_Animate
0001194E 5428 0024                  		addq.b	#2,$24(a0)
00011952                            
00011952                            Obj07_ThrowBullet:	
00011952 6100 EF8C                  		bsr.w	SingleObjLoad
00011956 6600                       		bne.s	locrecii_E302
00011958 12BC 0014                  		move.b	#$14,0(a1)	; load projectile
0001195C 3368 0008 0008             		move.w	8(a0),8(a1)
00011962 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011968 137C 0005 0028             		move.b	#5,$28(a1)
0001196E 5428 0024                  		addq.b	#2,$24(a0)
00011972                            
00011972                            Obj07_ContinueUp:
00011972 117C 0001 001C             		move.b	#1,$1C(a0)
00011978 317C FD00 0012             		move.w	#-$300,$12(a0)	; move hatofu up
0001197E 317C 0000 0010             		move.w	#0,$10(a0)	; move hatofu to the left
00011984                            
00011984                            Obj07_Animate:
00011984 43F9 0000 0000             		lea	(Ani_Obj07).l,a1
0001198A 6100 BA5E                  		bsr.w	AnimateSprite
0001198E 6100 EAA4                  		bsr.w	SpeedToPos
00011992 6000 0000                  		bra.w	MarkObjGone
00011996                            
00011996                            locrecii_E302:
00011996 4E75                       		rts
00011998                            ; ===========================================================================
00011998                            Ani_Obj07:
00011998                            	include "_anim\Obj07an.asm"
00011998                            ; ---------------------------------------------------------------------------
00011998                            ; Animation script - Hatofu enemy
00011998                            ; ---------------------------------------------------------------------------
00011998 0000                       		dc.w byte_AC6AAu-Ani_obj07
0001199A 0000                       		dc.w byte_AC6AAAu-Ani_obj07
0001199C 0200 01FF                  byte_AC6AAu:	dc.b 2,	0, 1, $FF
000119A0 0200 00FF                  byte_AC6AAAu:	dc.b 2,	0, 0, $FF
000119A4                            		even
000119A4                            		even
000119A4                            
000119A4                            ; ---------------------------------------------------------------------------
000119A4                            ; Sprite mappings - Hatofu enemy (SLZ)
000119A4                            ; ---------------------------------------------------------------------------
000119A4                            Map_Obj07:
000119A4                            	include "_maps\Obj07.asm"
000119A4                            ; --------------------------------------------------------------------------------
000119A4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000119A4                            ; --------------------------------------------------------------------------------
000119A4                            
000119A4                            SME_JQVHU:	
000119A4 0000 0000                  		dc.w SME_JQVHU_4-SME_JQVHU, SME_JQVHU_F-SME_JQVHU	
000119A8 02                         SME_JQVHU_4:	dc.b 2	
000119A9 E00B 0000 F8               		dc.b $E0, $B, 0, 0, $F8	
000119AE 0008 000C F8               		dc.b 0, 8, 0, $C, $F8	
000119B3 02                         SME_JQVHU_F:	dc.b 2	
000119B4 E00B 000F F8               		dc.b $E0, $B, 0, $F, $F8	
000119B9 0008 001B F8               		dc.b 0, 8, 0, $1B, $F8	
000119BE                            		even
000119BE                            		even
000119BE                            
000119BE                            ; ===========================================================================
000119BE                            ; ---------------------------------------------------------------------------
000119BE                            ; Object 47 - pinball bumper (SYZ)
000119BE                            ; ---------------------------------------------------------------------------
000119BE                            
000119BE                            Obj47:					; XREF: Obj_Index
000119BE 7000                       		moveq	#0,d0
000119C0 1028 0024                  		move.b	$24(a0),d0
000119C4 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
000119C8 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
000119CC                            ; ===========================================================================
000119CC 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
000119CE 0000                       		dc.w Obj47_Touch-Obj47_Index
000119D0                            ; ===========================================================================
000119D0                            
000119D0                            Obj47_Main:				; XREF: Obj47_Index
000119D0 5428 0024                  		addq.b	#2,$24(a0)
000119D4 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
000119DC                            		;move.w	#$380,2(a0)
000119DC 317C 0374 0002                             move.w  #($6E80/$20),2(a0);
000119E2 117C 0004 0001             		move.b	#4,1(a0)
000119E8 117C 0010 0019             		move.b	#$10,$19(a0)
000119EE 117C 0001 0018             		move.b	#1,$18(a0)
000119F4 117C 00D7 0020             		move.b	#$D7,$20(a0)
000119FA                            
000119FA                            Obj47_Touch:				; XREF: Obj47_Index
000119FA 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
000119FE 6700 0000                  		beq.w	Obj47_Display	; if not, branch
00011A02                            
00011A02                            Obj47_Hit:
00011A02 4228 0021                  		clr.b	$21(a0)
00011A06 43F8 D000                  		lea	($FFFFD000).w,a1
00011A0A 3228 0008                  		move.w	8(a0),d1
00011A0E 3428 000C                  		move.w	$C(a0),d2
00011A12 9269 0008                  		sub.w	8(a1),d1
00011A16 9469 000C                  		sub.w	$C(a1),d2
00011A1A 4EB9 0000 2F96             		jsr	(CalcAngle).l
00011A20 4EB9 0000 2CC8             		jsr	(CalcSine).l
00011A26 C3FC F900                  		muls.w	#-$700,d1
00011A2A E081                       		asr.l	#8,d1
00011A2C 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
00011A30 C1FC F900                  		muls.w	#-$700,d0
00011A34 E080                       		asr.l	#8,d0
00011A36 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
00011A3A 08E9 0001 0022             		bset	#1,$22(a1)
00011A40 08A9 0004 0022             		bclr	#4,$22(a1)
00011A46 08A9 0005 0022             		bclr	#5,$22(a1)
00011A4C 4229 003C                  		clr.b	$3C(a1)
00011A50 117C 0001 001C             		move.b	#1,$1C(a0)
00011A56 303C 00B4                  		move.w	#$B4,d0
00011A5A 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play bumper sound
00011A60 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011A64 7000                       		moveq	#0,d0
00011A66 1028 0023                  		move.b	$23(a0),d0
00011A6A 6700                       		beq.s	Obj47_Score
00011A6C 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
00011A72 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
00011A74 5232 0002                  		addq.b	#1,2(a2,d0.w)
00011A78                            
00011A78                            Obj47_Score:
00011A78 7001                       		moveq	#1,d0
00011A7A 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
00011A80 6100 EE5E                  		bsr.w	SingleObjLoad
00011A84 6600                       		bne.s	Obj47_Display
00011A86 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00011A8A 3368 0008 0008             		move.w	8(a0),8(a1)
00011A90 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011A96 137C 0004 001A             		move.b	#4,$1A(a1)
00011A9C                            
00011A9C                            Obj47_Display:
00011A9C 43F9 0000 0000             		lea	(Ani_obj47).l,a1
00011AA2 6100 B946                  		bsr.w	AnimateSprite
00011AA6 3028 0008                  		move.w	8(a0),d0
00011AAA 0240 FF80                  		andi.w	#$FF80,d0
00011AAE 3238 F700                  		move.w	($FFFFF700).w,d1
00011AB2 0441 0080                  		subi.w	#$80,d1
00011AB6 0241 FF80                  		andi.w	#$FF80,d1
00011ABA 9041                       		sub.w	d1,d0
00011ABC 0C40 0280                  		cmpi.w	#$280,d0
00011AC0 6200                       		bhi.s	Obj47_ChkHit
00011AC2 6000 E996                  		bra.w	DisplaySprite
00011AC6                            ; ===========================================================================
00011AC6                            
00011AC6                            Obj47_ChkHit:				; XREF: Obj47_Display
00011AC6 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011ACA 7000                       		moveq	#0,d0
00011ACC 1028 0023                  		move.b	$23(a0),d0
00011AD0 6700                       		beq.s	Obj47_Delete
00011AD2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011AD8                            
00011AD8                            Obj47_Delete:
00011AD8 6000 E9BC                  		bra.w	DeleteObject
00011ADC                            ; ===========================================================================
00011ADC                            Ani_obj47:
00011ADC                            	include "_anim\obj47.asm"
00011ADC                            ; ---------------------------------------------------------------------------
00011ADC                            ; Animation script - flamethrower (SBZ)
00011ADC                            ; ---------------------------------------------------------------------------
00011ADC 0000                       		dc.w byte_EAF4-Ani_obj47
00011ADE 0000                       		dc.w byte_EAF8-Ani_obj47
00011AE0 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
00011AE4 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
00011AEC                            		even
00011AEC                            		even
00011AEC                            
00011AEC                            ; ---------------------------------------------------------------------------
00011AEC                            ; Sprite mappings - pinball bumper (SYZ)
00011AEC                            ; ---------------------------------------------------------------------------
00011AEC                            Map_obj47:
00011AEC                            	include "_maps\obj47.asm"
00011AEC                            ; ---------------------------------------------------------------------------
00011AEC                            ; Sprite mappings - pinball bumper (SYZ)
00011AEC                            ; ---------------------------------------------------------------------------
00011AEC 0000                       		dc.w byte_EB06-Map_obj47
00011AEE 0000                       		dc.w byte_EB11-Map_obj47
00011AF0 0000                       		dc.w byte_EB1C-Map_obj47
00011AF2 02                         byte_EB06:	dc.b 2
00011AF3 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00011AF8 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00011AFD 02                         byte_EB11:	dc.b 2
00011AFE F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00011B03 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00011B08 02                         byte_EB1C:	dc.b 2
00011B09 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00011B0E F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00011B14 00                         		even
00011B14 00                         		even
00011B14                            
00011B14                            ; ===========================================================================
00011B14                            ; ---------------------------------------------------------------------------
00011B14                            ; Object 0D - signpost at the end of a level
00011B14                            ; ---------------------------------------------------------------------------
00011B14                            
00011B14                            Obj0D:					; XREF: Obj_Index
00011B14 7000                       		moveq	#0,d0
00011B16 1028 0024                  		move.b	$24(a0),d0
00011B1A 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
00011B1E 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
00011B22 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
00011B28 6100 B8C0                  		bsr.w	AnimateSprite
00011B2C 6100 E92C                  		bsr.w	DisplaySprite
00011B30 3028 0008                  		move.w	8(a0),d0
00011B34 0240 FF80                  		andi.w	#$FF80,d0
00011B38 3238 F700                  		move.w	($FFFFF700).w,d1
00011B3C 0441 0080                  		subi.w	#$80,d1
00011B40 0241 FF80                  		andi.w	#$FF80,d1
00011B44 9041                       		sub.w	d1,d0
00011B46 0C40 0280                  		cmpi.w	#$280,d0
00011B4A 6200 E94A                  		bhi.w	DeleteObject
00011B4E 4E75                       		rts	
00011B50                            ; ===========================================================================
00011B50 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
00011B52 0000                       		dc.w Obj0D_Touch-Obj0D_Index
00011B54 0000                       		dc.w Obj0D_Spin-Obj0D_Index
00011B56 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
00011B58 0000                       		dc.w locret_ED1A-Obj0D_Index
00011B5A                            ; ===========================================================================
00011B5A                            
00011B5A                            Obj0D_Main:				; XREF: Obj0D_Index
00011B5A 5428 0024                  		addq.b	#2,$24(a0)
00011B5E 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
00011B66 317C 0680 0002             		move.w	#$680,2(a0)
00011B6C 117C 0004 0001             		move.b	#4,1(a0)
00011B72 117C 0018 0019             		move.b	#$18,$19(a0)
00011B78 117C 0004 0018             		move.b	#4,$18(a0)
00011B7E                            
00011B7E                            Obj0D_Touch:				; XREF: Obj0D_Index
00011B7E 3038 D008                  		move.w	($FFFFD008).w,d0
00011B82 9068 0008                  		sub.w	8(a0),d0
00011B86 6500                       		bcs.s	locret_EBBA
00011B88 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00011B8C 6400                       		bcc.s	locret_EBBA	; if not, branch
00011B8E 0C78 0101 FE10                             cmpi.w	#$101,($FFFFFE10).w ; is level LZ2?
00011B94 6700 0000                                  beq.w   Obj0D_LockScreen
00011B98 0C78 0201 FE10                             cmpi.w	#$201,($FFFFFE10).w ; is level MZ2?
00011B9E 6700 0000                                  beq.w   Obj0D_LockScreen
00011BA2 0C78 0300 FE10                             cmpi.w	#$300,($FFFFFE10).w ; is level SLZ1?
00011BA8 6700 0000                  		beq.w   Obj0D_LockScreen	; if yes, branch
00011BAC 0C78 0301 FE10                             cmpi.w	#$301,($FFFFFE10).w ; is level SLZ2?
00011BB2 6700 0000                  		beq.w   Obj0D_LockScreen	; if yes, branch
00011BB6 0C78 0401 FE10                             cmpi.w	#$401,($FFFFFE10).w ; is level SYZ2?
00011BBC 6700 0000                                  beq.w   Obj0D_LockScreen
00011BC0 6000                                       bra.s   Obj0D_ContTouch
00011BC2                            
00011BC2                            Obj0D_LockScreen:
00011BC2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00011BC8                            
00011BC8                            Obj0D_ContTouch:
00011BC8 303C 00CF                  		move.w	#$CF,d0
00011BCC 4EB9 0000 12CA             		jsr	(PlaySound).l	; play signpost	sound
00011BD2 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00011BD6 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
00011BDC 5428 0024                  		addq.b	#2,$24(a0)
00011BE0                            
00011BE0                            locret_EBBA:
00011BE0 4E75                       		rts	
00011BE2                            ; ===========================================================================
00011BE2                            
00011BE2                            Obj0D_Spin:				; XREF: Obj0D_Index
00011BE2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
00011BE6 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
00011BE8 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
00011BEE 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
00011BF2 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
00011BF8 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
00011BFA 5428 0024                  		addq.b	#2,$24(a0)
00011BFE                            
00011BFE                            Obj0D_Sparkle:
00011BFE 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00011C02 6A00                       		bpl.s	locret_EC42	; if time remains, branch
00011C04 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
00011C0A 7000                       		moveq	#0,d0
00011C0C 1028 0034                  		move.b	$34(a0),d0
00011C10 5428 0034                  		addq.b	#2,$34(a0)
00011C14 0228 000E 0034             		andi.b	#$E,$34(a0)
00011C1A 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
00011C1E 6100 ECC0                  		bsr.w	SingleObjLoad
00011C22 6600                       		bne.s	locret_EC42
00011C24 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
00011C28 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
00011C2E 101A                       		move.b	(a2)+,d0
00011C30 4880                       		ext.w	d0
00011C32 D068 0008                  		add.w	8(a0),d0
00011C36 3340 0008                  		move.w	d0,8(a1)
00011C3A 101A                       		move.b	(a2)+,d0
00011C3C 4880                       		ext.w	d0
00011C3E D068 000C                  		add.w	$C(a0),d0
00011C42 3340 000C                  		move.w	d0,$C(a1)
00011C46 237C 0000 CBDC 0004        		move.l	#Map_obj25,4(a1)
00011C4E 337C 27B2 0002             		move.w	#$27B2,2(a1)
00011C54 137C 0004 0001             		move.b	#4,1(a1)
00011C5A 137C 0002 0018             		move.b	#2,$18(a1)
00011C60 137C 0008 0019             		move.b	#8,$19(a1)
00011C66                            
00011C66                            locret_EC42:
00011C66 4E75                       		rts	
00011C68                            ; ===========================================================================
00011C68 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00011C6A 0808                       		dc.b	8,   8
00011C6C F000                       		dc.b -$10,   0
00011C6E 18F8                       		dc.b  $18,  -8
00011C70 00F8                       		dc.b	0,  -8
00011C72 1000                       		dc.b  $10,   0
00011C74 E808                       		dc.b -$18,   8
00011C76 1810                       		dc.b  $18, $10
00011C78                            ; ===========================================================================
00011C78                            
00011C78                            Obj0D_SonicRun:				; XREF: Obj0D_Index
00011C78 0C78 0001 FE10                             cmpi.w	#$001,($FFFFFE10).w ; is level LZ2?
00011C7E 6700 0000                                  beq.w   Miniboss_load
00011C82 0C78 0101 FE10                             cmpi.w	#$101,($FFFFFE10).w ; is level LZ2?
00011C88 6700 0000                                  beq.w   Miniboss_load
00011C8C 0C78 0201 FE10                             cmpi.w	#$201,($FFFFFE10).w ; is level MZ2?
00011C92 6700 0000                                  beq.w   Miniboss_load
00011C96 0C78 0300 FE10                             cmpi.w	#$300,($FFFFFE10).w ; is level SLZ1?
00011C9C 6700 0000                  		beq.w   Miniboss_load	; if yes, branch
00011CA0 0C78 0301 FE10                             cmpi.w	#$301,($FFFFFE10).w ; is level SLZ2?
00011CA6 6700 0000                  		beq.w   Miniboss_load	; if yes, branch
00011CAA 0C78 0401 FE10                             cmpi.w	#$401,($FFFFFE10).w ; is level SYZ2?
00011CB0 6700 0000                  		beq.w	Miniboss_load	; if yes, branch
00011CB4 0C78 0400 FE10                             cmpi.w	#$400,($FFFFFE10).w ; is level SYZ1?
00011CBA 6700 0000                  		beq.w	Miniboss_load	; if yes, branch
00011CBE 317C 0000 0014                             move.w  #$0,$14(a0)     ;clear all speeds
00011CC4 11FC 0001 F7CC                             move.b	#1,($FFFFF7CC).w	; lock	controls
00011CCA 337C 0000 0014                             move.w	#0,$14(a1)	; stop Sonic moving
00011CD0 31FC 0008 F602                             move.w	#(Right)<<0,(SonicControl) ; make Sonic stand
00011CD6 4A78 FE08                  		tst.w	($FFFFFE08).w		; is debug mode	on?
00011CDA 6600 0000                  		bne.w	locret_ECEE		; if yes, branch
00011CDE 0838 0001 D022             		btst	#1,($FFFFD022).w	; is Sonic in the air?
00011CE4 6600                       		bne.s	loc_EC70		; if yes, branch
00011CE6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w	; lock	controls
00011CEC 31FC 0008 F602             		move.w	#(Right)<<0,(SonicControl) ; make Sonic stand
00011CF2 11FC 0001 FFFE                             move.b	#1,($FFFFFFFE).w     ; set win flag
00011CF8 4EB9 0000 0000                             jsr     GotThroughAct
00011CFE                            
00011CFE                            loc_EC70:
00011CFE 4A38 D000                  		tst.b	($FFFFD000).w
00011D02 6700                       		beq.s	loc_EC86
00011D04 3038 D008                  		move.w	($FFFFD008).w,d0
00011D08 3238 F72A                  		move.w	($FFFFF72A).w,d1
00011D0C 0641 0128                  		addi.w	#$128,d1
00011D10 B041                       		cmp.w	d1,d0
00011D12 6500                       		bcs.s	locret_ECEE
00011D14                            
00011D14                            loc_EC86:
00011D14 5428 0024                  		addq.b	#2,$24(a0)
00011D18                            
00011D18                            ; ---------------------------------------------------------------------------
00011D18                            ; Subroutine to	set up bonuses at the end of an	act
00011D18                            ; ---------------------------------------------------------------------------
00011D18                            
00011D18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011D18                            
00011D18                            
00011D18                            GotThroughAct:				; XREF: Obj3E_EndAct
00011D18 11FC 0000 FF8E                             move.b  #0,($FFFFFF8E)
00011D1E 11FC 0000 FF8D                             move.b	#$00,($FFFFFF8D).w
00011D24 4A38 D5C0                  		tst.b	($FFFFD5C0).w
00011D28 6600                       		bne.s	locret_ECEE
00011D2A 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
00011D30 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
00011D34 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00011D38 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
00011D3E 7010                       		moveq	#$10,d0
00011D40 4EB9 0000 1570             		jsr	(LoadPLC2).l	; load title card patterns
00011D46 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
00011D4C 7000                       		moveq	#0,d0
00011D4E 1038 FE23                  		move.b	($FFFFFE23).w,d0
00011D52 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00011D56 7200                       		moveq	#0,d1
00011D58 1238 FE24                  		move.b	($FFFFFE24).w,d1
00011D5C D041                       		add.w	d1,d0		; add up your time
00011D5E 80FC 000F                  		divu.w	#15,d0		; divide by 15
00011D62 7214                       		moveq	#$14,d1
00011D64 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00011D66 6500                       		bcs.s	loc_ECD0	; if not, branch
00011D68 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00011D6A                            
00011D6A                            loc_ECD0:
00011D6A D040                       		add.w	d0,d0
00011D6C 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
00011D72 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
00011D76 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00011D7A 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
00011D7E                                            ;move.b	#1,($FFFFF7CC).w	; lock	controls
00011D7E 303C 0099                  		move.w	#$99,d0
00011D82 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
00011D88 11FC 0001 FFFE                             move.b	#1,($FFFFFFFE).w   ; set win flag
00011D8E                            
00011D8E                            locret_ECEE:
00011D8E 4E75                       		rts	
00011D90                            ; End of function GotThroughAct
00011D90                            
00011D90                            ; ===========================================================================
00011D90 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00011DA4 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00011DBA                            ; ===========================================================================
00011DBA                            
00011DBA                            locret_ED1A:				; XREF: Obj0D_Index
00011DBA 4E75                       		rts	
00011DBC                            ; ===========================================================================
00011DBC                            Ani_obj0D:
00011DBC                            	include "_anim\obj0D.asm"
00011DBC                            ; ---------------------------------------------------------------------------
00011DBC                            ; Animation script - signpost
00011DBC                            ; ---------------------------------------------------------------------------
00011DBC 0000                       		dc.w byte_ED24-Ani_obj0D
00011DBE 0000                       		dc.w byte_ED28-Ani_obj0D
00011DC0 0000                       		dc.w byte_ED2E-Ani_obj0D
00011DC2 0000                       		dc.w byte_ED34-Ani_obj0D
00011DC4 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
00011DC8 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
00011DCE 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
00011DD4 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
00011DD8 00                         		even
00011DD8 00                         		even
00011DD8                            
00011DD8                            Miniboss_load:
00011DD8 11FC 0001 FF8D                             move.b	#$01,($FFFFFF8D).w
00011DDE 4EFA E6B6                                  jmp     DeleteObject
00011DE2                            
00011DE2                            ; ---------------------------------------------------------------------------
00011DE2                            ; Sprite mappings - signpost
00011DE2                            ; ---------------------------------------------------------------------------
00011DE2                            Map_obj0D:
00011DE2                            	include "_maps\obj0D.asm"
00011DE2                            ; ---------------------------------------------------------------------------
00011DE2                            ; Sprite mappings - signpost
00011DE2                            ; ---------------------------------------------------------------------------
00011DE2 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
00011DE6 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
00011DEA 0000                       		dc.w byte_ED73-Map_obj0D
00011DEC 03                         byte_ED42:	dc.b 3
00011DED F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
00011DF2 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
00011DF7 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00011DFC 02                         byte_ED52:	dc.b 2
00011DFD F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
00011E02 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00011E07 02                         byte_ED5D:	dc.b 2
00011E08 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
00011E0D 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
00011E12 02                         byte_ED68:	dc.b 2
00011E13 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
00011E18 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
00011E1D 03                         byte_ED73:	dc.b 3
00011E1E F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
00011E23 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
00011E28 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00011E2E 00                         		even
00011E2E 00                         		even
00011E2E                            
00011E2E                            ; ===========================================================================
00011E2E                            ; ---------------------------------------------------------------------------
00011E2E                            ; Object 4C - lava geyser / lavafall producer (MZ)
00011E2E                            ; ---------------------------------------------------------------------------
00011E2E                            
00011E2E                            Obj4C:					; XREF: Obj_Index
00011E2E 7000                       		moveq	#0,d0
00011E30 1028 0024                  		move.b	$24(a0),d0
00011E34 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
00011E38 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
00011E3C 6000 0000                  		bra.w	Obj4D_ChkDel
00011E40                            ; ===========================================================================
00011E40 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
00011E42 0000                       		dc.w loc_EDCC-Obj4C_Index
00011E44 0000                       		dc.w loc_EE3E-Obj4C_Index
00011E46 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
00011E48 0000                       		dc.w Obj4C_Display-Obj4C_Index
00011E4A 0000                       		dc.w Obj4C_Delete-Obj4C_Index
00011E4C                            ; ===========================================================================
00011E4C                            
00011E4C                            Obj4C_Main:				; XREF: Obj4C_Index
00011E4C 5428 0024                  		addq.b	#2,$24(a0)
00011E50 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
00011E58 317C E3A8 0002             		move.w	#$E3A8,2(a0)
00011E5E 117C 0004 0001             		move.b	#4,1(a0)
00011E64 117C 0001 0018             		move.b	#1,$18(a0)
00011E6A 117C 0038 0019             		move.b	#$38,$19(a0)
00011E70 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
00011E76                            
00011E76                            loc_EDCC:				; XREF: Obj4C_Index
00011E76 5368 0032                  		subq.w	#1,$32(a0)
00011E7A 6A00                       		bpl.s	locret_EDF0
00011E7C 3168 0034 0032             		move.w	$34(a0),$32(a0)
00011E82 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011E86 3228 000C                  		move.w	$C(a0),d1
00011E8A B041                       		cmp.w	d1,d0
00011E8C 6400                       		bcc.s	locret_EDF0
00011E8E 0441 0170                  		subi.w	#$170,d1
00011E92 B041                       		cmp.w	d1,d0
00011E94 6500                       		bcs.s	locret_EDF0
00011E96 5428 0024                  		addq.b	#2,$24(a0)
00011E9A                            
00011E9A                            locret_EDF0:
00011E9A 4E75                       		rts	
00011E9C                            ; ===========================================================================
00011E9C                            
00011E9C                            Obj4C_MakeLava:				; XREF: Obj4C_Index
00011E9C 5428 0024                  		addq.b	#2,$24(a0)
00011EA0 6100 EA54                  		bsr.w	SingleObjLoad2
00011EA4 6600                       		bne.s	loc_EE18
00011EA6 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
00011EAA 3368 0008 0008             		move.w	8(a0),8(a1)
00011EB0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011EB6 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011EBC 2348 003C                  		move.l	a0,$3C(a1)
00011EC0                            
00011EC0                            loc_EE18:
00011EC0 117C 0001 001C             		move.b	#1,$1C(a0)
00011EC6 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
00011ECA 6700                       		beq.s	Obj4C_Type00	; if yes, branch
00011ECC 117C 0004 001C             		move.b	#4,$1C(a0)
00011ED2 6000                       		bra.s	Obj4C_Display
00011ED4                            ; ===========================================================================
00011ED4                            
00011ED4                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
00011ED4 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
00011ED8 08E9 0001 0022             		bset	#1,$22(a1)
00011EDE 337C FA80 0012             		move.w	#-$580,$12(a1)
00011EE4 6000                       		bra.s	Obj4C_Display
00011EE6                            ; ===========================================================================
00011EE6                            
00011EE6                            loc_EE3E:				; XREF: Obj4C_Index
00011EE6 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
00011EEA 6700                       		beq.s	Obj4C_Display	; if yes, branch
00011EEC 5428 0024                  		addq.b	#2,$24(a0)
00011EF0 4E75                       		rts	
00011EF2                            ; ===========================================================================
00011EF2                            
00011EF2                            Obj4C_Display:				; XREF: Obj4C_Index
00011EF2 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00011EF8 6100 B4F0                  		bsr.w	AnimateSprite
00011EFC 6100 E55C                  		bsr.w	DisplaySprite
00011F00 4E75                       		rts	
00011F02                            ; ===========================================================================
00011F02                            
00011F02                            Obj4C_Delete:				; XREF: Obj4C_Index
00011F02 117C 0000 001C             		move.b	#0,$1C(a0)
00011F08 117C 0002 0024             		move.b	#2,$24(a0)
00011F0E 4A28 0028                  		tst.b	$28(a0)
00011F12 6700 E582                  		beq.w	DeleteObject
00011F16 4E75                       		rts	
00011F18                            ; ===========================================================================
00011F18                            ; ---------------------------------------------------------------------------
00011F18                            ; Object 4D - lava geyser / lavafall (MZ)
00011F18                            ; ---------------------------------------------------------------------------
00011F18                            
00011F18                            Obj4D:					; XREF: Obj_Index
00011F18 7000                       		moveq	#0,d0
00011F1A 1028 0024                  		move.b	$24(a0),d0
00011F1E 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
00011F22 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
00011F26 6000 E532                  		bra.w	DisplaySprite
00011F2A                            ; ===========================================================================
00011F2A 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
00011F2C 0000                       		dc.w Obj4D_Action-Obj4D_Index
00011F2E 0000                       		dc.w loc_EFFC-Obj4D_Index
00011F30 0000                       		dc.w Obj4D_Delete-Obj4D_Index
00011F32                            
00011F32 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
00011F36                            ; ===========================================================================
00011F36                            
00011F36                            Obj4D_Main:				; XREF: Obj4D_Index
00011F36 5428 0024                  		addq.b	#2,$24(a0)
00011F3A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011F40 4A28 0028                  		tst.b	$28(a0)
00011F44 6700                       		beq.s	loc_EEA4
00011F46 0468 0250 000C             		subi.w	#$250,$C(a0)
00011F4C                            
00011F4C                            loc_EEA4:
00011F4C 7000                       		moveq	#0,d0
00011F4E 1028 0028                  		move.b	$28(a0),d0
00011F52 D040                       		add.w	d0,d0
00011F54 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
00011F5A 2248                       		movea.l	a0,a1
00011F5C 7201                       		moveq	#1,d1
00011F5E 6100                       		bsr.s	Obj4D_MakeLava
00011F60 6000                       		bra.s	loc_EF10
00011F62                            ; ===========================================================================
00011F62                            
00011F62                            Obj4D_Loop:
00011F62 6100 E992                  		bsr.w	SingleObjLoad2
00011F66 6600                       		bne.s	loc_EF0A
00011F68                            
00011F68                            Obj4D_MakeLava:				; XREF: Obj4D_Main
00011F68 12BC 004D                  		move.b	#$4D,0(a1)
00011F6C 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
00011F74 337C 63A8 0002             		move.w	#$63A8,2(a1)
00011F7A 137C 0004 0001             		move.b	#4,1(a1)
00011F80 137C 0020 0019             		move.b	#$20,$19(a1)
00011F86 3368 0008 0008             		move.w	8(a0),8(a1)
00011F8C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011F92 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011F98 137C 0001 0018             		move.b	#1,$18(a1)
00011F9E 137C 0005 001C             		move.b	#5,$1C(a1)
00011FA4 4A28 0028                  		tst.b	$28(a0)
00011FA8 6700                       		beq.s	loc_EF0A
00011FAA 137C 0002 001C             		move.b	#2,$1C(a1)
00011FB0                            
00011FB0                            loc_EF0A:
00011FB0 51C9 FFB0                  		dbf	d1,Obj4D_Loop
00011FB4 4E75                       		rts	
00011FB6                            ; ===========================================================================
00011FB6                            
00011FB6                            loc_EF10:				; XREF: Obj4D_Main
00011FB6 0669 0060 000C             		addi.w	#$60,$C(a1)
00011FBC 3368 0030 0030             		move.w	$30(a0),$30(a1)
00011FC2 0669 0060 0030             		addi.w	#$60,$30(a1)
00011FC8 137C 0093 0020             		move.b	#$93,$20(a1)
00011FCE 137C 0080 0016             		move.b	#$80,$16(a1)
00011FD4 08E9 0004 0001             		bset	#4,1(a1)
00011FDA 5829 0024                  		addq.b	#4,$24(a1)
00011FDE 2348 003C                  		move.l	a0,$3C(a1)
00011FE2 4A28 0028                  		tst.b	$28(a0)
00011FE6 6700                       		beq.s	Obj4D_PlaySnd
00011FE8 7200                       		moveq	#0,d1
00011FEA 6100 FF76                  		bsr.w	Obj4D_Loop
00011FEE 5429 0024                  		addq.b	#2,$24(a1)
00011FF2 08E9 0004 0002             		bset	#4,2(a1)
00011FF8 0669 0100 000C             		addi.w	#$100,$C(a1)
00011FFE 137C 0000 0018             		move.b	#0,$18(a1)
00012004 3368 0030 0030             		move.w	$30(a0),$30(a1)
0001200A 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00012010 117C 0000 0028             		move.b	#0,$28(a0)
00012016                            
00012016                            Obj4D_PlaySnd:
00012016 303C 00C8                  		move.w	#$C8,d0
0001201A 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play flame sound
00012020                            
00012020                            Obj4D_Action:				; XREF: Obj4D_Index
00012020 7000                       		moveq	#0,d0
00012022 1028 0028                  		move.b	$28(a0),d0
00012026 D040                       		add.w	d0,d0
00012028 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0001202C 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
00012030 6100 E402                  		bsr.w	SpeedToPos
00012034 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0001203A 6100 B3AE                  		bsr.w	AnimateSprite
0001203E                            
0001203E                            Obj4D_ChkDel:				; XREF: Obj4C
0001203E 3028 0008                  		move.w	8(a0),d0
00012042 0240 FF80                  		andi.w	#$FF80,d0
00012046 3238 F700                  		move.w	($FFFFF700).w,d1
0001204A 0441 0080                  		subi.w	#$80,d1
0001204E 0241 FF80                  		andi.w	#$FF80,d1
00012052 9041                       		sub.w	d1,d0
00012054 0C40 0280                  		cmpi.w	#$280,d0
00012058 6200 E43C                  		bhi.w	DeleteObject
0001205C 4E75                       		rts	
0001205E                            ; ===========================================================================
0001205E 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
00012060 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
00012062                            ; ===========================================================================
00012062                            
00012062                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
00012062 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00012068 3028 0030                  		move.w	$30(a0),d0
0001206C B068 000C                  		cmp.w	$C(a0),d0
00012070 6400                       		bcc.s	locret_EFDA
00012072 5828 0024                  		addq.b	#4,$24(a0)
00012076 2268 003C                  		movea.l	$3C(a0),a1
0001207A 137C 0003 001C             		move.b	#3,$1C(a1)
00012080                            
00012080                            locret_EFDA:
00012080 4E75                       		rts	
00012082                            ; ===========================================================================
00012082                            
00012082                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
00012082 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00012088 3028 0030                  		move.w	$30(a0),d0
0001208C B068 000C                  		cmp.w	$C(a0),d0
00012090 6400                       		bcc.s	locret_EFFA
00012092 5828 0024                  		addq.b	#4,$24(a0)
00012096 2268 003C                  		movea.l	$3C(a0),a1
0001209A 137C 0001 001C             		move.b	#1,$1C(a1)
000120A0                            
000120A0                            locret_EFFA:
000120A0 4E75                       		rts	
000120A2                            ; ===========================================================================
000120A2                            
000120A2                            loc_EFFC:				; XREF: Obj4D_Index
000120A2 2268 003C                  		movea.l	$3C(a0),a1
000120A6 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000120AC 6700 0000                  		beq.w	Obj4D_Delete
000120B0 3029 000C                  		move.w	$C(a1),d0
000120B4 0640 0060                  		addi.w	#$60,d0
000120B8 3140 000C                  		move.w	d0,$C(a0)
000120BC 9068 0030                  		sub.w	$30(a0),d0
000120C0 4440                       		neg.w	d0
000120C2 7208                       		moveq	#8,d1
000120C4 0C40 0040                  		cmpi.w	#$40,d0
000120C8 6C00                       		bge.s	loc_F026
000120CA 720B                       		moveq	#$B,d1
000120CC                            
000120CC                            loc_F026:
000120CC 0C40 0080                  		cmpi.w	#$80,d0
000120D0 6F00                       		ble.s	loc_F02E
000120D2 720E                       		moveq	#$E,d1
000120D4                            
000120D4                            loc_F02E:
000120D4 5328 001E                  		subq.b	#1,$1E(a0)
000120D8 6A00                       		bpl.s	loc_F04C
000120DA 117C 0007 001E             		move.b	#7,$1E(a0)
000120E0 5228 001B                  		addq.b	#1,$1B(a0)
000120E4 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
000120EA 6500                       		bcs.s	loc_F04C
000120EC 117C 0000 001B             		move.b	#0,$1B(a0)
000120F2                            
000120F2                            loc_F04C:
000120F2 1028 001B                  		move.b	$1B(a0),d0
000120F6 D001                       		add.b	d1,d0
000120F8 1140 001A                  		move.b	d0,$1A(a0)
000120FC 6000 FF40                  		bra.w	Obj4D_ChkDel
00012100                            ; ===========================================================================
00012100                            
00012100                            Obj4D_Delete:				; XREF: Obj4D_Index
00012100 6000 E394                  		bra.w	DeleteObject
00012104                            ; ===========================================================================
00012104                            ; ---------------------------------------------------------------------------
00012104                            ; Object 4E - advancing	wall of	lava (MZ)
00012104                            ; ---------------------------------------------------------------------------
00012104                            
00012104                            Obj4E:					; XREF: Obj_Index
00012104 7000                       		moveq	#0,d0
00012106 1028 0024                  		move.b	$24(a0),d0
0001210A 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0001210E 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
00012112                            ; ===========================================================================
00012112 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
00012114 0000                       		dc.w Obj4E_Solid-Obj4E_Index
00012116 0000                       		dc.w Obj4E_Action-Obj4E_Index
00012118 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0001211A 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0001211C                            ; ===========================================================================
0001211C                            
0001211C                            Obj4E_Main:				; XREF: Obj4E_Index
0001211C 5828 0024                  		addq.b	#4,$24(a0)
00012120 2248                       		movea.l	a0,a1
00012122 7201                       		moveq	#1,d1
00012124 6000                       		bra.s	Obj4E_Main2
00012126                            ; ===========================================================================
00012126                            
00012126                            Obj4E_Loop:
00012126 6100 E7CE                  		bsr.w	SingleObjLoad2
0001212A 6600                       		bne.s	loc_F0C8
0001212C                            
0001212C                            Obj4E_Main2:				; XREF: Obj4E_Main
0001212C 12BC 004E                  		move.b	#$4E,0(a1)	; load object
00012130 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
00012138 337C 63A8 0002             		move.w	#$63A8,2(a1)
0001213E 137C 0004 0001             		move.b	#4,1(a1)
00012144 137C 0050 0019             		move.b	#$50,$19(a1)
0001214A 3368 0008 0008             		move.w	8(a0),8(a1)
00012150 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012156 137C 0001 0018             		move.b	#1,$18(a1)
0001215C 137C 0000 001C             		move.b	#0,$1C(a1)
00012162 137C 0094 0020             		move.b	#$94,$20(a1)
00012168 2348 003C                  		move.l	a0,$3C(a1)
0001216C                            
0001216C                            loc_F0C8:
0001216C 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
00012170                            
00012170 5C29 0024                  		addq.b	#6,$24(a1)
00012174 137C 0004 001A             		move.b	#4,$1A(a1)
0001217A                            
0001217A                            Obj4E_Action:				; XREF: Obj4E_Index
0001217A 3038 D008                  		move.w	($FFFFD008).w,d0
0001217E 9068 0008                  		sub.w	8(a0),d0
00012182 6400                       		bcc.s	Obj4E_ChkSonic
00012184 4440                       		neg.w	d0
00012186                            
00012186                            Obj4E_ChkSonic:
00012186 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0001218A 6400                       		bcc.s	Obj4E_Move	; if not, branch
0001218C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012190 9068 000C                  		sub.w	$C(a0),d0
00012194 6400                       		bcc.s	loc_F0F4
00012196 4440                       		neg.w	d0
00012198                            
00012198                            loc_F0F4:
00012198 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0001219C 6400                       		bcc.s	Obj4E_Move	; if not, branch
0001219E 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
000121A4 6000                       		bra.s	Obj4E_Solid
000121A6                            ; ===========================================================================
000121A6                            
000121A6                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
000121A6 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
000121AA 6700                       		beq.s	Obj4E_Solid	; if not, branch
000121AC 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
000121B2 5528 0024                  		subq.b	#2,$24(a0)
000121B6                            
000121B6                            Obj4E_Solid:				; XREF: Obj4E_Index
000121B6 323C 002B                  		move.w	#$2B,d1
000121BA 343C 0018                  		move.w	#$18,d2
000121BE 3602                       		move.w	d2,d3
000121C0 5243                       		addq.w	#1,d3
000121C2 3828 0008                  		move.w	8(a0),d4
000121C6 1028 0024                  		move.b	$24(a0),d0
000121CA 3F00                       		move.w	d0,-(sp)
000121CC 6100 0000                  		bsr.w	SolidObject
000121D0 301F                       		move.w	(sp)+,d0
000121D2 1140 0024                  		move.b	d0,$24(a0)
000121D6 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
000121DC 6600                       		bne.s	Obj4E_Animate	; if not, branch
000121DE 4268 0010                  		clr.w	$10(a0)		; stop object moving
000121E2 4228 0036                  		clr.b	$36(a0)
000121E6                            
000121E6                            Obj4E_Animate:
000121E6 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
000121EC 6100 B1FC                  		bsr.w	AnimateSprite
000121F0 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000121F6 6400                       		bcc.s	Obj4E_ChkDel
000121F8 6100 E23A                  		bsr.w	SpeedToPos
000121FC                            
000121FC                            Obj4E_ChkDel:
000121FC 6100 E25C                  		bsr.w	DisplaySprite
00012200 4A28 0036                  		tst.b	$36(a0)
00012204 6600                       		bne.s	locret_F17E
00012206 3028 0008                  		move.w	8(a0),d0
0001220A 0240 FF80                  		andi.w	#$FF80,d0
0001220E 3238 F700                  		move.w	($FFFFF700).w,d1
00012212 0441 0080                  		subi.w	#$80,d1
00012216 0241 FF80                  		andi.w	#$FF80,d1
0001221A 9041                       		sub.w	d1,d0
0001221C 0C40 0280                  		cmpi.w	#$280,d0
00012220 6200                       		bhi.s	Obj4E_ChkGone
00012222                            
00012222                            locret_F17E:
00012222 4E75                       		rts	
00012224                            ; ===========================================================================
00012224                            
00012224                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
00012224 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012228 7000                       		moveq	#0,d0
0001222A 1028 0023                  		move.b	$23(a0),d0
0001222E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012234 117C 0008 0024             		move.b	#8,$24(a0)
0001223A 4E75                       		rts	
0001223C                            ; ===========================================================================
0001223C                            
0001223C                            Obj4E_Move2:				; XREF: Obj4E_Index
0001223C 2268 003C                  		movea.l	$3C(a0),a1
00012240 0C29 0008 0024             		cmpi.b	#8,$24(a1)
00012246 6700                       		beq.s	Obj4E_Delete
00012248 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0001224E 0468 0080 0008             		subi.w	#$80,8(a0)
00012254 6000 E204                  		bra.w	DisplaySprite
00012258                            ; ===========================================================================
00012258                            
00012258                            Obj4E_Delete:				; XREF: Obj4E_Index
00012258 6000 E23C                  		bra.w	DeleteObject
0001225C                            ; ===========================================================================
0001225C                            ; ---------------------------------------------------------------------------
0001225C                            ; Object 54 - invisible	lava tag (MZ)
0001225C                            ; ---------------------------------------------------------------------------
0001225C                            
0001225C                            Obj54:					; XREF: Obj_Index
0001225C 7000                       		moveq	#0,d0
0001225E 1028 0024                  		move.b	$24(a0),d0
00012262 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
00012266 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0001226A                            ; ===========================================================================
0001226A 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0001226C 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0001226E                            
0001226E 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
00012272                            ; ===========================================================================
00012272                            
00012272                            Obj54_Main:				; XREF: Obj54_Index
00012272 5428 0024                  		addq.b	#2,$24(a0)
00012276 7000                       		moveq	#0,d0
00012278 1028 0028                  		move.b	$28(a0),d0
0001227C 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
00012282 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0001228A 117C 0084 0001             		move.b	#$84,1(a0)
00012290                            
00012290                            Obj54_ChkDel:				; XREF: Obj54_Index
00012290 3028 0008                  		move.w	8(a0),d0
00012294 0240 FF80                  		andi.w	#$FF80,d0
00012298 3238 F700                  		move.w	($FFFFF700).w,d1
0001229C 0441 0080                  		subi.w	#$80,d1
000122A0 0241 FF80                  		andi.w	#$FF80,d1
000122A4 9041                       		sub.w	d1,d0
000122A6 6B00 E1EE                  		bmi.w	DeleteObject
000122AA 0C40 0280                  		cmpi.w	#$280,d0
000122AE 6200 E1E6                  		bhi.w	DeleteObject
000122B2 4E75                       		rts	
000122B4                            ; ===========================================================================
000122B4                            ; ---------------------------------------------------------------------------
000122B4                            ; Sprite mappings - invisible lava tag (MZ)
000122B4                            ; ---------------------------------------------------------------------------
000122B4                            Map_obj54:
000122B4                            	include "_maps\obj54.asm"
000122B4                            ; ---------------------------------------------------------------------------
000122B4                            ; Sprite mappings - invisible lava tag (MZ)
000122B4                            ; ---------------------------------------------------------------------------
000122B4 0000                       		dc.w byte_F212-Map_obj54
000122B6 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
000122B8 00                         		even
000122B8 00                         		even
000122B8                            
000122B8                            Ani_obj4C:
000122B8                            	include "_anim\obj4C.asm"
000122B8                            ; ---------------------------------------------------------------------------
000122B8                            ; Animation script - geyser of lava (MZ)
000122B8                            ; ---------------------------------------------------------------------------
000122B8 0000                       		dc.w byte_F220-Ani_obj4C
000122BA 0000                       		dc.w byte_F22A-Ani_obj4C
000122BC 0000                       		dc.w byte_F22E-Ani_obj4C
000122BE 0000                       		dc.w byte_F232-Ani_obj4C
000122C0 0000                       		dc.w byte_F23A-Ani_obj4C
000122C2 0000                       		dc.w byte_F23E-Ani_obj4C
000122C4 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
000122CE 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
000122D2 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
000122D6 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
000122DE 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
000122E2 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
000122E6                            		even
000122E6                            		even
000122E6                            
000122E6                            Ani_obj4E:
000122E6                            	include "_anim\obj4E.asm"
000122E6                            ; ---------------------------------------------------------------------------
000122E6                            ; Animation script - advancing wall of lava (MZ)
000122E6                            ; ---------------------------------------------------------------------------
000122E6 0000                       		dc.w byte_F244-Ani_obj4E
000122E8 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
000122EE                            		even
000122EE                            		even
000122EE                            
000122EE                            ; ---------------------------------------------------------------------------
000122EE                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
000122EE                            ; ---------------------------------------------------------------------------
000122EE                            Map_obj4C:
000122EE                            	include "_maps\obj4C.asm"
000122EE                            ; ---------------------------------------------------------------------------
000122EE                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
000122EE                            ; ---------------------------------------------------------------------------
000122EE 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
000122F2 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
000122F6 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
000122FA 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
000122FE 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
00012302 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
00012306 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0001230A 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0001230E 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
00012312 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
00012316 02                         byte_F272:	dc.b 2
00012317 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0001231C EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
00012321 02                         byte_F27D:	dc.b 2
00012322 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00012327 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0001232C 04                         byte_F288:	dc.b 4
0001232D EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00012332 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00012337 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0001233C EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00012341 04                         byte_F29D:	dc.b 4
00012342 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00012347 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0001234C F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00012351 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00012356 06                         byte_F2B2:	dc.b 6
00012357 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0001235C F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00012361 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00012366 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0001236B E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
00012370 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00012375 06                         byte_F2D1:	dc.b 6
00012376 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0001237B F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00012380 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00012385 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0001238A E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0001238F E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00012394 02                         byte_F2F0:	dc.b 2
00012395 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0001239A E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0001239F 02                         byte_F2FB:	dc.b 2
000123A0 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
000123A5 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
000123AA 0A                         byte_F306:	dc.b $A
000123AB 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000123B0 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000123B5 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000123BA B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000123BF D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000123C4 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000123C9 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
000123CE F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
000123D3 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
000123D8 100F 0840 00               		dc.b $10, $F, 8, $40, 0
000123DD 0A                         byte_F339:	dc.b $A
000123DE 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000123E3 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000123E8 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000123ED B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000123F2 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000123F7 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000123FC F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00012401 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00012406 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0001240B 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00012410 0A                         byte_F36C:	dc.b $A
00012411 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00012416 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0001241B B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00012420 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00012425 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0001242A D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001242F F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00012434 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00012439 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0001243E 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00012443 06                         byte_F39F:	dc.b 6
00012444 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00012449 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0001244E B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00012453 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00012458 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0001245D D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00012462 06                         byte_F3BE:	dc.b 6
00012463 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00012468 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0001246D B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00012472 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00012477 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0001247C D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00012481 06                         byte_F3DD:	dc.b 6
00012482 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00012487 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0001248C B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00012491 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00012496 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0001249B D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000124A0 10                         byte_F3FC:	dc.b $10
000124A1 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000124A6 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000124AB B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000124B0 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000124B5 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000124BA D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000124BF F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
000124C4 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
000124C9 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
000124CE 100F 0840 00               		dc.b $10, $F, 8, $40, 0
000124D3 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
000124D8 300F 0840 00               		dc.b $30, $F, 8, $40, 0
000124DD 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
000124E2 500F 0840 00               		dc.b $50, $F, 8, $40, 0
000124E7 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
000124EC 700F 0840 00               		dc.b $70, $F, 8, $40, 0
000124F1 10                         byte_F44D:	dc.b $10
000124F2 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000124F7 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000124FC B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00012501 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00012506 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0001250B D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00012510 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00012515 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0001251A 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0001251F 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00012524 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00012529 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0001252E 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
00012533 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00012538 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0001253D 700F 0850 00               		dc.b $70, $F, 8, $50, 0
00012542 10                         byte_F49E:	dc.b $10
00012543 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00012548 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0001254D B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00012552 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00012557 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0001255C D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00012561 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00012566 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0001256B 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00012570 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00012575 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0001257A 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0001257F 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00012584 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00012589 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0001258E 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00012593 06                         byte_F4EF:	dc.b 6
00012594 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00012599 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0001259E E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
000125A3 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
000125A8 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
000125AD D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
000125B2 06                         byte_F50E:	dc.b 6
000125B3 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
000125B8 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
000125BD E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
000125C2 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
000125C7 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
000125CC D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
000125D1 00                         byte_F52D:	dc.b 0
000125D2                            		even
000125D2                            		even
000125D2                            
000125D2                            ; ---------------------------------------------------------------------------
000125D2                            ; Sprite mappings - advancing wall of lava (MZ)
000125D2                            ; ---------------------------------------------------------------------------
000125D2                            Map_obj4E:
000125D2                            	include "_maps\obj4E.asm"
000125D2                            ; ---------------------------------------------------------------------------
000125D2                            ; Sprite mappings - advancing wall of lava (MZ)
000125D2                            ; ---------------------------------------------------------------------------
000125D2 0000                       		dc.w byte_F538-Map_obj4E
000125D4 0000                       		dc.w byte_F566-Map_obj4E
000125D6 0000                       		dc.w byte_F594-Map_obj4E
000125D8 0000                       		dc.w byte_F5C2-Map_obj4E
000125DA 0000                       		dc.w byte_F5F0-Map_obj4E
000125DC 09                         byte_F538:	dc.b 9
000125DD E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
000125E2 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
000125E7 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000125EC E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000125F1 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000125F6 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000125FB 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00012600 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00012605 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001260A 09                         byte_F566:	dc.b 9
0001260B E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00012610 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
00012615 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0001261A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001261F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00012624 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00012629 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001262E E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00012633 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00012638 09                         byte_F594:	dc.b 9
00012639 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0001263E 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00012643 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00012648 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001264D 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00012652 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00012657 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001265C E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00012661 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00012666 09                         byte_F5C2:	dc.b 9
00012667 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0001266C 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
00012671 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00012676 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001267B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00012680 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00012685 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001268A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001268F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00012694 08                         byte_F5F0:	dc.b 8
00012695 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0001269A 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0001269F E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000126A4 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000126A9 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000126AE 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000126B3 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000126B8 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000126BE 00                         		even
000126BE 00                         		even
000126BE                            
000126BE                            ; ===========================================================================
000126BE                            ; ---------------------------------------------------------------------------
000126BE                            ; Object 40 - Moto Bug enemy (GHZ)
000126BE                            ; ---------------------------------------------------------------------------
000126BE                            
000126BE                            Obj40:					; XREF: Obj_Index
000126BE 7000                       		moveq	#0,d0
000126C0 1028 0024                  		move.b	$24(a0),d0
000126C4 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
000126C8 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
000126CC                            ; ===========================================================================
000126CC 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
000126CE 0000                       		dc.w Obj40_Action-Obj40_Index
000126D0 0000                       		dc.w Obj40_Animate-Obj40_Index
000126D2 0000                       		dc.w Obj40_Delete-Obj40_Index
000126D4                            ; ===========================================================================
000126D4                            
000126D4                            Obj40_Main:				; XREF: Obj40_Index
000126D4 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
000126DC 317C 04F0 0002             		move.w	#$4F0,2(a0)
000126E2 0C38 0003 FE10                             cmpi.b    #3,($FFFFFE10).w    ; çîíà = 0 (GHZ?)
000126E8 6700                                       beq.s    Obj40_SLZTiles        ; åñëè íåò, ïåðåõîä
000126EA 6000                                       bra.s    Obj40_MCont
000126EC                            
000126EC                            Obj40_SLZTiles:
000126EC 317C 0429 0002                             move.w    #($8520/$20),2(a0)    ; ïàëèòðà è òàéëû äëÿ GHZ
000126F2                            
000126F2                            Obj40_MCont:
000126F2 117C 0004 0001             		move.b	#4,1(a0)
000126F8 117C 0004 0018             		move.b	#4,$18(a0)
000126FE 117C 0014 0019             		move.b	#$14,$19(a0)
00012704 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00012708 6600                       		bne.s	locret_F68A	; if yes, branch
0001270A 117C 000E 0016             		move.b	#$E,$16(a0)
00012710 117C 0008 0017             		move.b	#8,$17(a0)
00012716 0C38 0003 FE10                             cmpi.b    #3,($FFFFFE10).w    ; çîíà = 0 (GHZ?)
0001271C 6700                                       beq.s    Obj40_Springer        ; åñëè íåò, ïåðåõîä
0001271E 117C 000C 0020             		move.b	#$C,$20(a0)
00012724 6000                                       bra.s    Obj40_MmCont
00012726                            
00012726                            Obj40_Springer:
00012726 117C 00CC 0020             		move.b	#$CC,$20(a0)
0001272C                            
0001272C                            Obj40_MmCont:
0001272C 6100 DCDA                  		bsr.w	ObjectFall
00012730 4EB9 0000 0000             		jsr	ObjHitFloor
00012736 4A41                       		tst.w	d1		; is object above the ground?
00012738 6A00                       		bpl.s	locret_F68A	; if yes, branch
0001273A D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001273E 317C 0000 0012             		move.w	#0,$12(a0)
00012744 5428 0024                  		addq.b	#2,$24(a0)
00012748 0868 0000 0022             		bchg	#0,$22(a0)	; change object's orientation
0001274E                            
0001274E                            locret_F68A:
0001274E 4E75                       		rts	
00012750                            ; ===========================================================================
00012750                            
00012750                            Obj40_SetSmoke:				; XREF: Obj40_Main
00012750 5828 0024                  		addq.b	#4,$24(a0)
00012754 6000 0000                  		bra.w	Obj40_Animate
00012758                            ; ===========================================================================
00012758                            
00012758                            Obj40_Action:				; XREF: Obj40_Index
00012758 7000                       		moveq	#0,d0
0001275A 1028 0025                  		move.b	$25(a0),d0
0001275E 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
00012762 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
00012766 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0001276C 6100 AC7C                  		bsr.w	AnimateSprite
00012770                            
00012770                            ; ---------------------------------------------------------------------------
00012770                            ; Routine to mark an enemy/monitor/ring	as destroyed
00012770                            ; ---------------------------------------------------------------------------
00012770                            
00012770                            MarkObjGone:
00012770 3028 0008                  		move.w	8(a0),d0
00012774 0240 FF80                  		andi.w	#$FF80,d0
00012778 3238 F700                  		move.w	($FFFFF700).w,d1
0001277C 0441 0080                  		subi.w	#$80,d1
00012780 0241 FF80                  		andi.w	#$FF80,d1
00012784 9041                       		sub.w	d1,d0
00012786 0C40 0280                  		cmpi.w	#$280,d0
0001278A 6200 0000                  		bhi.w	Mark_ChkGone
0001278E 6000 DCCA                  		bra.w	DisplaySprite
00012792                            ; ===========================================================================
00012792                            
00012792                            Mark_ChkGone:
00012792 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012796 7000                       		moveq	#0,d0
00012798 1028 0023                  		move.b	$23(a0),d0
0001279C 6700                       		beq.s	Mark_Delete
0001279E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000127A4                            
000127A4                            Mark_Delete:
000127A4 6000 DCF0                  		bra.w	DeleteObject
000127A8                            
000127A8                            ; ===========================================================================
000127A8 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
000127AA 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
000127AC                            ; ===========================================================================
000127AC                            
000127AC                            Obj40_Move:				; XREF: Obj40_Index2
000127AC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000127B0 6A00                       		bpl.s	locret_F70A	; if time remains, branch
000127B2 5428 0025                  		addq.b	#2,$25(a0)
000127B6                                            ;move.w	#82,$30(a0)	; set time delay to approx 2 seconds
000127B6 317C FF50 0010             		move.w	#-$B0,$10(a0)	; move object to the left
000127BC 117C 0001 001C                             move.b	#1,$1C(a0)
000127C2 0868 0000 0022             		bchg	#0,$22(a0)	; change object's orientation
000127C8 6600                       		bne.s	locret_F70A	; if orientation is left, branch
000127CA 4468 0010                  		neg.w	$10(a0)		; make object move to the right
000127CE                            
000127CE                            locret_F70A:
000127CE 4E75                       		rts	
000127D0                            ; ===========================================================================
000127D0                            
000127D0                            Obj40_FixToFloor:			; XREF: Obj40_Index2
000127D0                            		;bsr.w	SpeedToPos
000127D0                            		;jsr	ObjHitFloor
000127D0                            		;cmpi.w	#-8,d1		; is the nearest floor level >8 pixels down?
000127D0                            		;blt.s	Obj40_Pause	; if yes, stop moving
000127D0                            		;cmpi.w	#$C,d1		; is the nearest floor level <$C pixels up?
000127D0                            		;bge.s	Obj40_Pause	; if yes, stop moving
000127D0                            		;add.w	d1,$C(a0)	; match	object's position with the floor
000127D0                            		;subq.b	#1,$33(a0)	; subtract 1 from smoke delay
000127D0                            		;bpl.s	locret_F756	; if time remains, branch
000127D0                            		;move.b	#$F,$33(a0)	; set smoke delay to $F
000127D0                            		;bsr.w	SingleObjLoad
000127D0                            		;bne.s	locret_F756
000127D0                            		;move.b	#$40,0(a1)	; load exhaust smoke object
000127D0                            		;move.w	8(a0),8(a1)
000127D0                            		;move.w	$C(a0),$C(a1)
000127D0                            		;move.b	$22(a0),$22(a1)
000127D0                            		;move.b	#2,$1C(a1)
000127D0 6100 DC62                                  bsr.w	SpeedToPos
000127D4 6100 0000                  		bsr.w	ObjHitFloor
000127D8 0C41 FFF8                  		cmpi.w	#-8,d1
000127DC 6D00                       		blt.s	Obj40_Pause
000127DE 0C41 000C                  		cmpi.w	#$C,d1
000127E2 6C00                       		bge.s	Obj40_Pause
000127E4 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
000127E8 6100 0000                  		bsr.w	Obj50_ChkWall
000127EC 6600                       		bne.s	Obj40_Pause
000127EE 4E75                       		rts
000127F0                            
000127F0                            locret_F756:
000127F0 4E75                       		rts	
000127F2                            ; ===========================================================================
000127F2                            
000127F2                            Obj40_Pause:				; XREF: Obj40_FixToFloor
000127F2 5528 0025                  		subq.b	#2,$25(a0)
000127F6 317C 001D 0030             		move.w	#29,$30(a0)	; set pause time to 1/2 second
000127FC 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
00012802 117C 0000 001C             		move.b	#0,$1C(a0)
00012808 4E75                       		rts	
0001280A                            ; ===========================================================================
0001280A                            
0001280A                            Obj40_Animate:				; XREF: Obj40_Index
0001280A 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00012810 6100 ABD8                  		bsr.w	AnimateSprite
00012814 6000 DC44                  		bra.w	DisplaySprite
00012818                            ; ===========================================================================
00012818                            
00012818                            Obj40_Delete:				; XREF: Obj40_Index
00012818 6000 DC7C                  		bra.w	DeleteObject
0001281C                            ; ===========================================================================
0001281C                            Ani_obj40:
0001281C                            	include "_anim\obj40.asm"
0001281C                            ; ---------------------------------------------------------------------------
0001281C                            ; Animation script - Motobug enemy
0001281C                            ; ---------------------------------------------------------------------------
0001281C 0000                       		dc.w byte_F788-Ani_obj40
0001281E 0000                       		dc.w byte_F78C-Ani_obj40
00012820                            		;dc.w byte_F792-Ani_obj40
00012820 0F00 FF00                  byte_F788:	dc.b $F, 0, $FF, 0
00012824 0400 0102 FF               byte_F78C:	dc.b 4,	0, 1, 2, $FF
0001282A 00                         		even
0001282A 00                         		even
0001282A                            
0001282A                            ; ---------------------------------------------------------------------------
0001282A                            ; Sprite mappings - Moto Bug enemy (GHZ)
0001282A                            ; ---------------------------------------------------------------------------
0001282A                            Map_obj40:
0001282A                            	include "_maps\obj40.asm"
0001282A                            ; --------------------------------------------------------------------------------
0001282A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001282A                            ; --------------------------------------------------------------------------------
0001282A                            
0001282A                            SME_tkzO5:	
0001282A 0000 0000                  		dc.w SME_tkzO5_E-SME_tkzO5, SME_tkzO5_28-SME_tkzO5	
0001282E 0000 0000                  		dc.w SME_tkzO5_47-SME_tkzO5, SME_tkzO5_61-SME_tkzO5	
00012832 0000 0000                  		dc.w SME_tkzO5_67-SME_tkzO5, SME_tkzO5_6D-SME_tkzO5	
00012836 0000                       		dc.w SME_tkzO5_73-SME_tkzO5	
00012838 05                         SME_tkzO5_E:	dc.b 5	
00012839 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC	
0001283E 000C 0008 EC               		dc.b 0, $C, 0, 8, $EC	
00012843 F801 000C 0C               		dc.b $F8, 1, 0, $C, $C	
00012848 0808 000E F4               		dc.b 8, 8, 0, $E, $F4	
0001284D 0800 001C EC               		dc.b 8, 0, 0, $1C, $EC	
00012852 06                         SME_tkzO5_28:	dc.b 6	
00012853 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC	
00012858 000C 0008 EC               		dc.b 0, $C, 0, 8, $EC	
0001285D F801 000C 0C               		dc.b $F8, 1, 0, $C, $C	
00012862 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
00012867 0700 001B EC               		dc.b 7, 0, 0, $1B, $EC	
0001286C 0800 001B EC               		dc.b 8, 0, 0, $1B, $EC	
00012871 05                         SME_tkzO5_47:	dc.b 5	
00012872 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC	
00012877 000C 0014 EC               		dc.b 0, $C, 0, $14, $EC	
0001287C F801 000C 0C               		dc.b $F8, 1, 0, $C, $C	
00012881 0804 0018 EC               		dc.b 8, 4, 0, $18, $EC	
00012886 0804 0012 FC               		dc.b 8, 4, 0, $12, $FC	
0001288B 01                         SME_tkzO5_61:	dc.b 1	
0001288C FA00 001A 10               		dc.b $FA, 0, 0, $1A, $10	
00012891 01                         SME_tkzO5_67:	dc.b 1	
00012892 FA00 001B 10               		dc.b $FA, 0, 0, $1B, $10	
00012897 01                         SME_tkzO5_6D:	dc.b 1	
00012898 FA00 001C 10               		dc.b $FA, 0, 0, $1C, $10	
0001289D 00                         SME_tkzO5_73:	dc.b 0	
0001289E                            		even
0001289E                            		even
0001289E                            
0001289E                            ; ===========================================================================
0001289E                            ; ---------------------------------------------------------------------------
0001289E                            ; Object 4F - blank
0001289E                            ; ---------------------------------------------------------------------------
0001289E                            
0001289E                            Obj4F:					; XREF: Obj_Index
0001289E 4E75                       		rts	
000128A0                            
000128A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000128A0                            
000128A0                            
000128A0                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
000128A0 3038 FE04                  		move.w	($FFFFFE04).w,d0
000128A4 D047                       		add.w	d7,d0
000128A6 0240 0003                  		andi.w	#3,d0
000128AA 6600                       		bne.s	loc_F836
000128AC 7600                       		moveq	#0,d3
000128AE 1628 0019                  		move.b	$19(a0),d3
000128B2 4A68 0010                  		tst.w	$10(a0)
000128B6 6B00                       		bmi.s	loc_F82C
000128B8 6100 0000                  		bsr.w	ObjHitWallRight
000128BC 4A41                       		tst.w	d1
000128BE 6A00                       		bpl.s	loc_F836
000128C0                            
000128C0                            loc_F828:
000128C0 7001                       		moveq	#1,d0
000128C2 4E75                       		rts	
000128C4                            ; ===========================================================================
000128C4                            
000128C4                            loc_F82C:
000128C4 4643                       		not.w	d3
000128C6 6100 0000                  		bsr.w	ObjHitWallLeft
000128CA 4A41                       		tst.w	d1
000128CC 6BF2                       		bmi.s	loc_F828
000128CE                            
000128CE                            loc_F836:
000128CE 7000                       		moveq	#0,d0
000128D0 4E75                       		rts	
000128D2                            ; End of function Obj50_ChkWall
000128D2                            
000128D2                            ; ===========================================================================
000128D2                            ; ---------------------------------------------------------------------------
000128D2                            ; Object 50 - Yadrin enemy (SYZ/MZ)
000128D2                            ; ---------------------------------------------------------------------------
000128D2                            
000128D2                            Obj50:					; XREF: Obj_Index
000128D2 7000                       		moveq	#0,d0
000128D4 1028 0024                  		move.b	$24(a0),d0
000128D8 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
000128DC 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
000128E0                            ; ===========================================================================
000128E0 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
000128E2 0000                       		dc.w Obj50_Action-Obj50_Index
000128E4                            ; ===========================================================================
000128E4                            
000128E4                            Obj50_Main:				; XREF: Obj50_Index
000128E4 217C 0000 0000 0004                        move.l	#Map_obj50,4(a0)
000128EC 317C 247B 0002             		move.w	#$247B,2(a0)
000128F2 117C 0004 0001             		move.b	#4,1(a0)
000128F8 117C 0004 0018             		move.b	#4,$18(a0)
000128FE 117C 0014 0019             		move.b	#$14,$19(a0)
00012904 117C 0011 0016             		move.b	#$11,$16(a0)
0001290A 117C 0008 0017             		move.b	#8,$17(a0)
00012910 117C 000C 0020                             move.b	#$C,$20(a0)	
00012916 6100 DAF0                  		bsr.w	ObjectFall
0001291A 6100 0000                  		bsr.w	ObjHitFloor
0001291E 4A41                       		tst.w	d1		; is object above the ground?
00012920 6A00                       		bpl.s	locret_F89E	; if yes, branch
00012922 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00012926 317C 0000 0012             		move.w	#0,$12(a0)
0001292C 5428 0024                  		addq.b	#2,$24(a0)
00012930 0868 0000 0022             		bchg	#0,$22(a0)	; change object's orientation
00012936                            
00012936                            locret_F89E:
00012936 4E75                       		rts	
00012938                            ; ===========================================================================
00012938                            
00012938                            Obj50_Action:				; XREF: Obj50_Index
00012938 7000                       		moveq	#0,d0
0001293A 1028 0025                  		move.b	$25(a0),d0
0001293E 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00012942 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
00012946 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0001294C 6100 AA9C                  		bsr.w	AnimateSprite
00012950 6000 FE1E                  		bra.w	MarkObjGone
00012954                            ; ===========================================================================
00012954 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
00012956 0000                       		dc.w Obj50_OtherChecks-Obj50_Index2
00012958                            ; ===========================================================================
00012958                            
00012958                            Obj50_Move:				; XREF: Obj50_Index2
00012958 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0001295C 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0001295E 117C 001C 0033             		move.b	#$1C,$33(a0)
00012964 5428 0025                  		addq.b	#2,$25(a0)
00012968 317C FE00 0010             		move.w	#-$200,$10(a0)	
0001296E 117C 0001 001C             		move.b	#1,$1C(a0)
00012974 0868 0000 0022             		bchg	#0,$22(a0)	; change object's orientation
0001297A 6600                       		bne.s	locret_F8E2	; if orientation is left, branch
0001297C 4468 0010                  		neg.w	$10(a0)		; change direction
00012980                            
00012980                            locret_F8E2:
00012980 4E75                       		rts	
00012982                            ; ===========================================================================
00012982                            
00012982                            Obj50_OtherChecks:			; XREF: Obj50_Index2
00012982 6100 DAB0                  		bsr.w	SpeedToPos
00012986 6100 0000                  		bsr.w	ObjHitFloor
0001298A 0C41 FFF8                  		cmpi.w	#-8,d1
0001298E 6D00                       		blt.s	Obj50_Pause
00012990 0C41 000C                  		cmpi.w	#$C,d1
00012994 6C00                       		bge.s	Obj50_Pause
00012996 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0001299A 6100 FF04                  		bsr.w	Obj50_ChkWall
0001299E 6600                       		bne.s	Obj50_Pause
000129A0 4E75                       		rts	
000129A2                            ; ===========================================================================
000129A2                            
000129A2                            Obj50_Pause:				; XREF: Obj50_FixToFloor
000129A2 5528 0025                  		subq.b	#2,$25(a0)
000129A6                            		;move.w	#59,$30(a0)	; set pause time to 1 second
000129A6 317C 0000 0030                             move.w	#0,$30(a0)	; set pause time to 1 second
000129AC 317C 0000 0010             		move.w	#0,$10(a0)
000129B2 117C 0000 001C             		move.b	#0,$1C(a0)
000129B8 4E75                       		rts	
000129BA                            ; ===========================================================================
000129BA                            Ani_obj50:
000129BA                            	include "_anim\obj50.asm"
000129BA                            ; ---------------------------------------------------------------------------
000129BA                            ; Animation script - Yadrin enemy
000129BA                            ; ---------------------------------------------------------------------------
000129BA 0000                       		dc.w byte_F920-Ani_obj50
000129BC 0000                       		dc.w byte_F924-Ani_obj50
000129BE 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
000129C2 0700 0100 0100 0100 01FF   byte_F924:	dc.b 7,	0, 1, 0, 1, 0, 1, 0, 1,	$FF
000129CC                            		even
000129CC                            		even
000129CC                            
000129CC                            ; ---------------------------------------------------------------------------
000129CC                            ; Sprite mappings - Yadrin enemy (SYZ)
000129CC                            ; ---------------------------------------------------------------------------
000129CC                            Map_obj50:
000129CC                            	include "_maps\obj50.asm"
000129CC                            ; --------------------------------------------------------------------------------
000129CC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000129CC                            ; --------------------------------------------------------------------------------
000129CC                            
000129CC                            SME_JxZZT:	
000129CC 0000 0000                  		dc.w SME_JxZZT_8-SME_JxZZT, SME_JxZZT_31-SME_JxZZT	
000129D0 0000 0000                  		dc.w SME_JxZZT_5A-SME_JxZZT, SME_JxZZT_83-SME_JxZZT	
000129D4 08                         SME_JxZZT_8:	dc.b 8	
000129D5 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC	
000129DA 000C 0008 EC               		dc.b 0, $C, 0, 8, $EC	
000129DF F801 000C 0C               		dc.b $F8, 1, 0, $C, $C	
000129E4 0808 000E F4               		dc.b 8, 8, 0, $E, $F4	
000129E9 0800 001A EC               		dc.b 8, 0, 0, $1A, $EC	
000129EE 0800 001B 0C               		dc.b 8, 0, 0, $1B, $C	
000129F3 F000 001C 0C               		dc.b $F0, 0, 0, $1C, $C	
000129F8 F003 0014 14               		dc.b $F0, 3, 0, $14, $14	
000129FD 08                         SME_JxZZT_31:	dc.b 8	
000129FE F00D 001D EC               		dc.b $F0, $D, 0, $1D, $EC	
00012A03 000C 0025 EC               		dc.b 0, $C, 0, $25, $EC	
00012A08 F801 0029 0C               		dc.b $F8, 1, 0, $29, $C	
00012A0D 0808 002B F4               		dc.b 8, 8, 0, $2B, $F4	
00012A12 0800 0032 EC               		dc.b 8, 0, 0, $32, $EC	
00012A17 0800 0033 0C               		dc.b 8, 0, 0, $33, $C	
00012A1C F000 0034 0C               		dc.b $F0, 0, 0, $34, $C	
00012A21 F003 002E 14               		dc.b $F0, 3, 0, $2E, $14	
00012A26 08                         SME_JxZZT_5A:	dc.b 8	
00012A27 F00D 0035 EC               		dc.b $F0, $D, 0, $35, $EC	
00012A2C 000C 003D EC               		dc.b 0, $C, 0, $3D, $EC	
00012A31 F801 0041 0C               		dc.b $F8, 1, 0, $41, $C	
00012A36 0808 0043 F4               		dc.b 8, 8, 0, $43, $F4	
00012A3B 0800 004A EC               		dc.b 8, 0, 0, $4A, $EC	
00012A40 0800 004B 0C               		dc.b 8, 0, 0, $4B, $C	
00012A45 F000 004C 0C               		dc.b $F0, 0, 0, $4C, $C	
00012A4A F003 0046 14               		dc.b $F0, 3, 0, $46, $14	
00012A4F 00                         SME_JxZZT_83:	dc.b 0	
00012A50                            		even
00012A50                            		even
00012A50                            
00012A50                            ; ===========================================================================
00012A50                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00012A50                            ; ===========================================================================
00012A50                            ; Input:	d1 - width
00012A50                            ; 		d2 - height / 2 (when jumping)
00012A50                            ; 		d3 - height / 2 (when walking)
00012A50                            ; 		d4 - x-axis position
00012A50                            ; ---------------------------------------------------------------------------
00012A50                            
00012A50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012A50                            
00012A50                            
00012A50                            SolidObject:
00012A50 4A28 0025                  		tst.b	$25(a0)		; is Sonic standing on the object?
00012A54 6700 0000                  		beq.w	loc_FAC8	; if not, branch
00012A58 3401                       		move.w	d1,d2
00012A5A D442                       		add.w	d2,d2
00012A5C 43F8 D000                  		lea	($FFFFD000).w,a1 ; load Sonic object to a1
00012A60 0829 0001 0022             		btst	#1,$22(a1)	 ; is Sonic in the air?
00012A66 6600                       		bne.s	loc_F9FE	 ; if yes, branch
00012A68 3029 0008                  		move.w	8(a1),d0
00012A6C 9068 0008                  		sub.w	8(a0),d0
00012A70 D041                       		add.w	d1,d0
00012A72 6B00                       		bmi.s	loc_F9FE
00012A74 B042                       		cmp.w	d2,d0
00012A76 6500                       		bcs.s	loc_FA12
00012A78                            
00012A78                            loc_F9FE:
00012A78 08A9 0003 0022             		bclr	#3,$22(a1)
00012A7E 08A8 0003 0022             		bclr	#3,$22(a0)
00012A84 4228 0025                  		clr.b	$25(a0)
00012A88 7800                       		moveq	#0,d4
00012A8A 4E75                       		rts	
00012A8C                            ; ===========================================================================
00012A8C                            
00012A8C                            loc_FA12:
00012A8C 3404                       		move.w	d4,d2
00012A8E 4EB9 0000 A64A             		jsr	MvSonicOnPtfm
00012A94 7800                       		moveq	#0,d4
00012A96 4E75                       		rts	
00012A98                            ; ===========================================================================
00012A98                            
00012A98                            SolidObject71:				; XREF: Obj71_Solid
00012A98 4A28 0025                  		tst.b	$25(a0)
00012A9C 6700 0000                  		beq.w	loc_FAD0
00012AA0 3401                       		move.w	d1,d2
00012AA2 D442                       		add.w	d2,d2
00012AA4 43F8 D000                  		lea	($FFFFD000).w,a1
00012AA8 0829 0001 0022             		btst	#1,$22(a1)
00012AAE 6600                       		bne.s	loc_FA44
00012AB0 3029 0008                  		move.w	8(a1),d0
00012AB4 9068 0008                  		sub.w	8(a0),d0
00012AB8 D041                       		add.w	d1,d0
00012ABA 6B00                       		bmi.s	loc_FA44
00012ABC B042                       		cmp.w	d2,d0
00012ABE 6500                       		bcs.s	loc_FA58
00012AC0                            
00012AC0                            loc_FA44:
00012AC0 08A9 0003 0022             		bclr	#3,$22(a1)
00012AC6 08A8 0003 0022             		bclr	#3,$22(a0)
00012ACC 4228 0025                  		clr.b	$25(a0)
00012AD0 7800                       		moveq	#0,d4
00012AD2 4E75                       		rts	
00012AD4                            ; ===========================================================================
00012AD4                            
00012AD4                            loc_FA58:
00012AD4 3404                       		move.w	d4,d2
00012AD6 4EB9 0000 A64A             		jsr	MvSonicOnPtfm
00012ADC 7800                       		moveq	#0,d4
00012ADE 4E75                       		rts	
00012AE0                            ; ===========================================================================
00012AE0                            
00012AE0                            SolidObject2F:				; XREF: Obj2F_Solid
00012AE0 43F8 D000                  		lea	($FFFFD000).w,a1
00012AE4 4A28 0001                  		tst.b	1(a0)
00012AE8 6A00 0000                  		bpl.w	loc_FB92
00012AEC 3029 0008                  		move.w	8(a1),d0
00012AF0 9068 0008                  		sub.w	8(a0),d0
00012AF4 D041                       		add.w	d1,d0
00012AF6 6B00 0000                  		bmi.w	loc_FB92
00012AFA 3601                       		move.w	d1,d3
00012AFC D643                       		add.w	d3,d3
00012AFE B043                       		cmp.w	d3,d0
00012B00 6200 0000                  		bhi.w	loc_FB92
00012B04 3A00                       		move.w	d0,d5
00012B06 0828 0000 0001             		btst	#0,1(a0)
00012B0C 6700                       		beq.s	loc_FA94
00012B0E 4645                       		not.w	d5
00012B10 DA43                       		add.w	d3,d5
00012B12                            
00012B12                            loc_FA94:
00012B12 E24D                       		lsr.w	#1,d5
00012B14 7600                       		moveq	#0,d3
00012B16 1632 5000                  		move.b	(a2,d5.w),d3
00012B1A 9612                       		sub.b	(a2),d3
00012B1C 3A28 000C                  		move.w	$C(a0),d5
00012B20 9A43                       		sub.w	d3,d5
00012B22 1629 0016                  		move.b	$16(a1),d3
00012B26 4883                       		ext.w	d3
00012B28 D443                       		add.w	d3,d2
00012B2A 3629 000C                  		move.w	$C(a1),d3
00012B2E 9645                       		sub.w	d5,d3
00012B30 5843                       		addq.w	#4,d3
00012B32 D642                       		add.w	d2,d3
00012B34 6B00 0000                  		bmi.w	loc_FB92
00012B38 3802                       		move.w	d2,d4
00012B3A D844                       		add.w	d4,d4
00012B3C B644                       		cmp.w	d4,d3
00012B3E 6400 0000                  		bcc.w	loc_FB92
00012B42 6000 0000                  		bra.w	loc_FB0E
00012B46                            ; ===========================================================================
00012B46                            
00012B46                            loc_FAC8:
00012B46 4A28 0001                  		tst.b	1(a0)		; is object on screen?
00012B4A 6A00 0000                  		bpl.w	loc_FB92	; if not, branch
00012B4E                            
00012B4E                            loc_FAD0:
00012B4E 43F8 D000                  		lea	($FFFFD000).w,a1 ; load Sonic object to a1
00012B52 3029 0008                  		move.w	8(a1),d0
00012B56 9068 0008                  		sub.w	8(a0),d0
00012B5A D041                       		add.w	d1,d0
00012B5C 6B00 0000                  		bmi.w	loc_FB92
00012B60 3601                       		move.w	d1,d3
00012B62 D643                       		add.w	d3,d3
00012B64 B043                       		cmp.w	d3,d0
00012B66 6200 0000                  		bhi.w	loc_FB92
00012B6A 1629 0016                  		move.b	$16(a1),d3
00012B6E 4883                       		ext.w	d3
00012B70 D443                       		add.w	d3,d2
00012B72 3629 000C                  		move.w	$C(a1),d3
00012B76 9668 000C                  		sub.w	$C(a0),d3
00012B7A 5843                       		addq.w	#4,d3
00012B7C D642                       		add.w	d2,d3
00012B7E 6B00 0000                  		bmi.w	loc_FB92
00012B82 3802                       		move.w	d2,d4
00012B84 D844                       		add.w	d4,d4
00012B86 B644                       		cmp.w	d4,d3
00012B88 6400 0000                  		bcc.w	loc_FB92
00012B8C                            
00012B8C                            loc_FB0E:
00012B8C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012B90 6B00 0000                  		bmi.w	loc_FB92
00012B94 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00012B9A 6400 0000                  		bcc.w	loc_FB92
00012B9E 4A78 FE08                  		tst.w	($FFFFFE08).w
00012BA2 6600 0000                  		bne.w	loc_FBAC
00012BA6 3A00                       		move.w	d0,d5
00012BA8 B240                       		cmp.w	d0,d1
00012BAA 6400                       		bcc.s	loc_FB36
00012BAC D241                       		add.w	d1,d1
00012BAE 9041                       		sub.w	d1,d0
00012BB0 3A00                       		move.w	d0,d5
00012BB2 4445                       		neg.w	d5
00012BB4                            
00012BB4                            loc_FB36:
00012BB4 3203                       		move.w	d3,d1
00012BB6 B443                       		cmp.w	d3,d2
00012BB8 6400                       		bcc.s	loc_FB44
00012BBA 5943                       		subq.w	#4,d3
00012BBC 9644                       		sub.w	d4,d3
00012BBE 3203                       		move.w	d3,d1
00012BC0 4441                       		neg.w	d1
00012BC2                            
00012BC2                            loc_FB44:
00012BC2 BA41                       		cmp.w	d1,d5
00012BC4 6200 0000                  		bhi.w	loc_FBB0
00012BC8 0C41 0004                  		cmpi.w	#4,d1
00012BCC 6300                       		bls.s	loc_FB8C
00012BCE 4A40                       		tst.w	d0
00012BD0 6700                       		beq.s	loc_FB70
00012BD2 6B00                       		bmi.s	loc_FB5E
00012BD4 4A69 0010                  		tst.w	$10(a1)
00012BD8 6B00                       		bmi.s	loc_FB70
00012BDA 6000                       		bra.s	loc_FB64
00012BDC                            ; ===========================================================================
00012BDC                            
00012BDC                            loc_FB5E:
00012BDC 4A69 0010                  		tst.w	$10(a1)
00012BE0 6A00                       		bpl.s	loc_FB70
00012BE2                            
00012BE2                            loc_FB64:
00012BE2 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00012BE8 337C 0000 0010             		move.w	#0,$10(a1)
00012BEE                            
00012BEE                            loc_FB70:
00012BEE 9169 0008                  		sub.w	d0,8(a1)
00012BF2 0829 0001 0022             		btst	#1,$22(a1)
00012BF8 6600                       		bne.s	loc_FB8C
00012BFA 08E9 0005 0022             		bset	#5,$22(a1)
00012C00 08E8 0005 0022             		bset	#5,$22(a0)
00012C06 7801                       		moveq	#1,d4
00012C08 4E75                       		rts	
00012C0A                            ; ===========================================================================
00012C0A                            
00012C0A                            loc_FB8C:
00012C0A 6100                       		bsr.s	loc_FBA0
00012C0C 7801                       		moveq	#1,d4
00012C0E 4E75                       		rts	
00012C10                            ; ===========================================================================
00012C10                            
00012C10                            loc_FB92:
00012C10 0828 0005 0022             		btst	#5,$22(a0)
00012C16 6700                       		beq.s	loc_FBAC
00012C18 0C29 0002 001C                             cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
00012C1E 6700                       		beq.s	loc_FBA0
00012C20 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00012C26                            
00012C26                            loc_FBA0:
00012C26 08A8 0005 0022             		bclr	#5,$22(a0)
00012C2C 08A9 0005 0022             		bclr	#5,$22(a1)
00012C32                            
00012C32                            loc_FBAC:
00012C32 7800                       		moveq	#0,d4
00012C34 4E75                       		rts	
00012C36                            ; ===========================================================================
00012C36                            
00012C36                            loc_FBB0:
00012C36 4A43                       		tst.w	d3
00012C38 6B00                       		bmi.s	loc_FBBC
00012C3A 0C43 0010                  		cmpi.w	#$10,d3
00012C3E 6500                       		bcs.s	loc_FBEE
00012C40 60CE                       		bra.s	loc_FB92
00012C42                            ; ===========================================================================
00012C42                            
00012C42                            loc_FBBC:
00012C42 4A69 0012                  		tst.w	$12(a1)
00012C46 6700                       		beq.s	loc_FBD6
00012C48 6A00                       		bpl.s	loc_FBD2
00012C4A 4A43                       		tst.w	d3
00012C4C 6A00                       		bpl.s	loc_FBD2
00012C4E 9769 000C                  		sub.w	d3,$C(a1)
00012C52 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00012C58                            
00012C58                            loc_FBD2:
00012C58 78FF                       		moveq	#-1,d4
00012C5A 4E75                       		rts	
00012C5C                            ; ===========================================================================
00012C5C                            
00012C5C                            loc_FBD6:
00012C5C 0829 0001 0022             		btst	#1,$22(a1)
00012C62 66F4                       		bne.s	loc_FBD2
00012C64 2F08                       		move.l	a0,-(sp)
00012C66 2049                       		movea.l	a1,a0
00012C68 4EB9 0000 0000             		jsr	KillSonic
00012C6E 205F                       		movea.l	(sp)+,a0
00012C70 78FF                       		moveq	#-1,d4
00012C72 4E75                       		rts	
00012C74                            ; ===========================================================================
00012C74                            
00012C74                            loc_FBEE:
00012C74 5943                       		subq.w	#4,d3
00012C76 7200                       		moveq	#0,d1
00012C78 1228 0019                  		move.b	$19(a0),d1
00012C7C 3401                       		move.w	d1,d2
00012C7E D442                       		add.w	d2,d2
00012C80 D269 0008                  		add.w	8(a1),d1
00012C84 9268 0008                  		sub.w	8(a0),d1
00012C88 6B00                       		bmi.s	loc_FC28
00012C8A B242                       		cmp.w	d2,d1
00012C8C 6400                       		bcc.s	loc_FC28
00012C8E 4A69 0012                  		tst.w	$12(a1)
00012C92 6B00                       		bmi.s	loc_FC28
00012C94 9769 000C                  		sub.w	d3,$C(a1)
00012C98 5369 000C                  		subq.w	#1,$C(a1)
00012C9C 6100                       		bsr.s	sub_FC2C
00012C9E 117C 0002 0025             		move.b	#2,$25(a0)
00012CA4 08E8 0003 0022             		bset	#3,$22(a0)
00012CAA 78FF                       		moveq	#-1,d4
00012CAC 4E75                       		rts	
00012CAE                            ; ===========================================================================
00012CAE                            
00012CAE                            loc_FC28:
00012CAE 7800                       		moveq	#0,d4
00012CB0 4E75                       		rts	
00012CB2                            ; End of function SolidObject
00012CB2                            
00012CB2                            
00012CB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012CB2                            
00012CB2                            
00012CB2                            sub_FC2C:				; XREF: SolidObject
00012CB2 0829 0003 0022             		btst	#3,$22(a1)
00012CB8 6700                       		beq.s	loc_FC4E
00012CBA 7000                       		moveq	#0,d0
00012CBC 1029 003D                  		move.b	$3D(a1),d0
00012CC0 ED48                       		lsl.w	#6,d0
00012CC2 0680 00FF D000             		addi.l	#$FFD000,d0
00012CC8 2440                       		movea.l	d0,a2
00012CCA 08AA 0003 0022             		bclr	#3,$22(a2)
00012CD0 422A 0025                  		clr.b	$25(a2)
00012CD4                            
00012CD4                            loc_FC4E:
00012CD4 3008                       		move.w	a0,d0
00012CD6 0440 D000                  		subi.w	#-$3000,d0
00012CDA EC48                       		lsr.w	#6,d0
00012CDC 0240 007F                  		andi.w	#$7F,d0
00012CE0 1340 003D                  		move.b	d0,$3D(a1)
00012CE4 137C 0000 0026             		move.b	#0,$26(a1)
00012CEA 337C 0000 0012             		move.w	#0,$12(a1)
00012CF0 3369 0010 0014             		move.w	$10(a1),$14(a1)
00012CF6 0829 0001 0022             		btst	#1,$22(a1)
00012CFC 6700                       		beq.s	loc_FC84
00012CFE 2F08                       		move.l	a0,-(sp)
00012D00 2049                       		movea.l	a1,a0
00012D02 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00012D08 205F                       		movea.l	(sp)+,a0
00012D0A                            
00012D0A                            loc_FC84:
00012D0A 08E9 0003 0022             		bset	#3,$22(a1)
00012D10 08E8 0003 0022             		bset	#3,$22(a0)
00012D16 4E75                       		rts	
00012D18                            ; End of function sub_FC2C
00012D18                            
00012D18                            ; ===========================================================================
00012D18                            ; ---------------------------------------------------------------------------
00012D18                            ; Object 51 - smashable	green block (MZ)
00012D18                            ; ---------------------------------------------------------------------------
00012D18                            
00012D18                            Obj51:					; XREF: Obj_Index
00012D18 7000                       		moveq	#0,d0
00012D1A 1028 0024                  		move.b	$24(a0),d0
00012D1E 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00012D22 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00012D26 6000 FA48                  		bra.w	MarkObjGone
00012D2A                            ; ===========================================================================
00012D2A 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00012D2C 0000                       		dc.w Obj51_Solid-Obj51_Index
00012D2E 0000                       		dc.w Obj51_Display-Obj51_Index
00012D30                            ; ===========================================================================
00012D30                            
00012D30                            Obj51_Main:				; XREF: Obj51_Index
00012D30 5428 0024                  		addq.b	#2,$24(a0)
00012D34 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00012D3C 317C 42B8 0002             		move.w	#$42B8,2(a0)
00012D42 117C 0004 0001             		move.b	#4,1(a0)
00012D48 117C 0010 0019             		move.b	#$10,$19(a0)
00012D4E 117C 0004 0018             		move.b	#4,$18(a0)
00012D54 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00012D5A                            
00012D5A                            Obj51_Solid:				; XREF: Obj51_Index
00012D5A 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00012D60 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00012D66 323C 001B                  		move.w	#$1B,d1
00012D6A 343C 0010                  		move.w	#$10,d2
00012D6E 363C 0011                  		move.w	#$11,d3
00012D72 3828 0008                  		move.w	8(a0),d4
00012D76 6100 FCD8                  		bsr.w	SolidObject
00012D7A 0828 0003 0022             		btst	#3,$22(a0)
00012D80 6600                       		bne.s	Obj51_Smash
00012D82                            
00012D82                            locret_FCFC:
00012D82 4E75                       		rts	
00012D84                            ; ===========================================================================
00012D84                            
00012D84                            Obj51_Smash:				; XREF: Obj51_Solid
00012D84 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00012D8A 66F6                       		bne.s	locret_FCFC	; if not, branch
00012D8C 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00012D92 08E9 0002 0022             		bset	#2,$22(a1)
00012D98 137C 000E 0016             		move.b	#$E,$16(a1)
00012D9E 137C 0007 0017             		move.b	#7,$17(a1)
00012DA4 137C 0002 001C             		move.b	#2,$1C(a1)
00012DAA 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00012DB0 08E9 0001 0022             		bset	#1,$22(a1)
00012DB6 08A9 0003 0022             		bclr	#3,$22(a1)
00012DBC 137C 0002 0024             		move.b	#2,$24(a1)
00012DC2 08A8 0003 0022             		bclr	#3,$22(a0)
00012DC8 4228 0025                  		clr.b	$25(a0)
00012DCC 117C 0001 001A             		move.b	#1,$1A(a0)
00012DD2 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00012DD8 7203                       		moveq	#3,d1		; set number of	fragments to 4
00012DDA 343C 0038                  		move.w	#$38,d2
00012DDE 6100 D248                  		bsr.w	SmashObject
00012DE2 6100 DAFC                  		bsr.w	SingleObjLoad
00012DE6 6600                       		bne.s	Obj51_Display
00012DE8 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00012DEC 3368 0008 0008             		move.w	8(a0),8(a1)
00012DF2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012DF8 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00012DFC 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00012E00 0C42 0006                  		cmpi.w	#6,d2
00012E04 6500                       		bcs.s	Obj51_Bonus
00012E06 7406                       		moveq	#6,d2
00012E08                            
00012E08                            Obj51_Bonus:
00012E08 7000                       		moveq	#0,d0
00012E0A 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00012E0E 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00012E14 6500                       		bcs.s	loc_FD98	; if not, branch
00012E16 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00012E1A 740A                       		moveq	#10,d2
00012E1C                            
00012E1C                            loc_FD98:
00012E1C 4EB9 0000 0000             		jsr	AddPoints
00012E22 E24A                       		lsr.w	#1,d2
00012E24 1342 001A                  		move.b	d2,$1A(a1)
00012E28                            
00012E28                            Obj51_Display:				; XREF: Obj51_Index
00012E28 6100 D60A                  		bsr.w	SpeedToPos
00012E2C 0668 0038 0012             		addi.w	#$38,$12(a0)
00012E32 6100 D626                  		bsr.w	DisplaySprite
00012E36 4A28 0001                  		tst.b	1(a0)
00012E3A 6A00 D65A                  		bpl.w	DeleteObject
00012E3E 4E75                       		rts	
00012E40                            ; ===========================================================================
00012E40 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00012E44 FF00 FF00                  		dc.w $FF00, $FF00
00012E48 0200 FE00                  		dc.w $200, $FE00
00012E4C 0100 FF00                  		dc.w $100, $FF00
00012E50                            
00012E50 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00012E58                            ; ---------------------------------------------------------------------------
00012E58                            ; Sprite mappings - smashable green block (MZ)
00012E58                            ; ---------------------------------------------------------------------------
00012E58                            Map_obj51:
00012E58                            	include "_maps\obj51.asm"
00012E58                            ; ---------------------------------------------------------------------------
00012E58                            ; Sprite mappings - smashable green block (MZ)
00012E58                            ; ---------------------------------------------------------------------------
00012E58 0000                       		dc.w byte_FDD8-Map_obj51
00012E5A 0000                       		dc.w byte_FDE3-Map_obj51
00012E5C 02                         byte_FDD8:	dc.b 2
00012E5D F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00012E62 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00012E67 04                         byte_FDE3:	dc.b 4
00012E68 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00012E6D 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00012E72 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00012E77 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00012E7C                            		even
00012E7C                            		even
00012E7C                            
00012E7C                            ; ===========================================================================
00012E7C                            ; ---------------------------------------------------------------------------
00012E7C                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00012E7C                            ; ---------------------------------------------------------------------------
00012E7C                            
00012E7C                            Obj52:					; XREF: Obj_Index
00012E7C 7000                       		moveq	#0,d0
00012E7E 1028 0024                  		move.b	$24(a0),d0
00012E82 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00012E86 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00012E8A                            ; ===========================================================================
00012E8A 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00012E8C 0000                       		dc.w Obj52_Platform-Obj52_Index
00012E8E 0000                       		dc.w Obj52_StandOn-Obj52_Index
00012E90                            
00012E90 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00012E92 2001                       		dc.b $20, 1
00012E94 2002                       		dc.b $20, 2
00012E96 4003                       		dc.b $40, 3
00012E98 3004                       		dc.b $30, 4
00012E9A                            ; ===========================================================================
00012E9A                            
00012E9A                            Obj52_Main:				; XREF: Obj52_Index
00012E9A 5428 0024                  		addq.b	#2,$24(a0)
00012E9E 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00012EA6 317C 42B8 0002             		move.w	#$42B8,2(a0)
00012EAC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012EB2 6600                       		bne.s	loc_FE44
00012EB4 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00012EBC 317C 43BC 0002             		move.w	#$43BC,2(a0)
00012EC2 117C 0007 0016             		move.b	#7,$16(a0)
00012EC8                            
00012EC8                            loc_FE44:
00012EC8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012ECE 6600                       		bne.s	loc_FE60
00012ED0 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00012ED6 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00012EDC 6700                       		beq.s	loc_FE60	; if yes, branch
00012EDE 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00012EE4                            
00012EE4                            loc_FE60:
00012EE4 117C 0004 0001             		move.b	#4,1(a0)
00012EEA 7000                       		moveq	#0,d0
00012EEC 1028 0028                  		move.b	$28(a0),d0
00012EF0 E648                       		lsr.w	#3,d0
00012EF2 0240 001E                  		andi.w	#$1E,d0
00012EF6 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00012EFA 115A 0019                  		move.b	(a2)+,$19(a0)
00012EFE 115A 001A                  		move.b	(a2)+,$1A(a0)
00012F02 117C 0004 0018             		move.b	#4,$18(a0)
00012F08 3168 0008 0030             		move.w	8(a0),$30(a0)
00012F0E 3168 000C 0032             		move.w	$C(a0),$32(a0)
00012F14 0228 000F 0028             		andi.b	#$F,$28(a0)
00012F1A                            
00012F1A                            Obj52_Platform:				; XREF: Obj52_Index
00012F1A 6100 0000                  		bsr.w	Obj52_Move
00012F1E 7200                       		moveq	#0,d1
00012F20 1228 0019                  		move.b	$19(a0),d1
00012F24 4EB9 0000 9F78             		jsr	(PlatformObject).l
00012F2A 6000                       		bra.s	Obj52_ChkDel
00012F2C                            ; ===========================================================================
00012F2C                            
00012F2C                            Obj52_StandOn:				; XREF: Obj52_Index
00012F2C 7200                       		moveq	#0,d1
00012F2E 1228 0019                  		move.b	$19(a0),d1
00012F32 4EB9 0000 A0EC             		jsr	(ExitPlatform).l
00012F38 3F28 0008                  		move.w	8(a0),-(sp)
00012F3C 6100 0000                  		bsr.w	Obj52_Move
00012F40 341F                       		move.w	(sp)+,d2
00012F42 4EB9 0000 A656             		jsr	(MvSonicOnPtfm2).l
00012F48                            
00012F48                            Obj52_ChkDel:				; XREF: Obj52_Platform
00012F48 3028 0030                  		move.w	$30(a0),d0
00012F4C 0240 FF80                  		andi.w	#$FF80,d0
00012F50 3238 F700                  		move.w	($FFFFF700).w,d1
00012F54 0441 0080                  		subi.w	#$80,d1
00012F58 0241 FF80                  		andi.w	#$FF80,d1
00012F5C 9041                       		sub.w	d1,d0
00012F5E 0C40 0280                  		cmpi.w	#$280,d0
00012F62 6200 D532                  		bhi.w	DeleteObject
00012F66 6000 D4F2                  		bra.w	DisplaySprite
00012F6A                            ; ===========================================================================
00012F6A                            
00012F6A                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00012F6A 7000                       		moveq	#0,d0
00012F6C 1028 0028                  		move.b	$28(a0),d0
00012F70 0240 000F                  		andi.w	#$F,d0
00012F74 D040                       		add.w	d0,d0
00012F76 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00012F7A 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00012F7E                            ; ===========================================================================
00012F7E 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00012F82 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00012F86 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00012F8A 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00012F8E 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00012F92 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00012F94                            ; ===========================================================================
00012F94                            
00012F94                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00012F94 4E75                       		rts	
00012F96                            ; ===========================================================================
00012F96                            
00012F96                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00012F96 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00012F9A 323C 0060                  		move.w	#$60,d1
00012F9E 0828 0000 0022             		btst	#0,$22(a0)
00012FA4 6700                       		beq.s	loc_FF26
00012FA6 4440                       		neg.w	d0
00012FA8 D041                       		add.w	d1,d0
00012FAA                            
00012FAA                            loc_FF26:
00012FAA 3228 0030                  		move.w	$30(a0),d1
00012FAE 9240                       		sub.w	d0,d1
00012FB0 3141 0008                  		move.w	d1,8(a0)
00012FB4 4E75                       		rts	
00012FB6                            ; ===========================================================================
00012FB6                            
00012FB6                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00012FB6 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00012FBC 6600                       		bne.s	Obj52_02_Wait
00012FBE 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012FC2                            
00012FC2                            Obj52_02_Wait:
00012FC2 4E75                       		rts	
00012FC4                            ; ===========================================================================
00012FC4                            
00012FC4                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00012FC4 7600                       		moveq	#0,d3
00012FC6 1628 0019                  		move.b	$19(a0),d3
00012FCA 6100 0000                  		bsr.w	ObjHitWallRight
00012FCE 4A41                       		tst.w	d1		; has the platform hit a wall?
00012FD0 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00012FD2 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00012FD6 3168 0008 0030             		move.w	8(a0),$30(a0)
00012FDC 4E75                       		rts	
00012FDE                            ; ===========================================================================
00012FDE                            
00012FDE                            Obj52_03_End:
00012FDE 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00012FE2 4E75                       		rts	
00012FE4                            ; ===========================================================================
00012FE4                            
00012FE4                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00012FE4 7600                       		moveq	#0,d3
00012FE6 1628 0019                  		move.b	$19(a0),d3
00012FEA 6100 0000                  		bsr.w	ObjHitWallRight
00012FEE 4A41                       		tst.w	d1		; has the platform hit a wall?
00012FF0 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00012FF2 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00012FF6 3168 0008 0030             		move.w	8(a0),$30(a0)
00012FFC 4E75                       		rts	
00012FFE                            ; ===========================================================================
00012FFE                            
00012FFE                            Obj52_05_End:
00012FFE 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00013002 4E75                       		rts	
00013004                            ; ===========================================================================
00013004                            
00013004                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00013004 6100 D42E                  		bsr.w	SpeedToPos
00013008 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
0001300E 6100 0000                  		bsr.w	ObjHitFloor
00013012 4A41                       		tst.w	d1		; has platform hit the floor?
00013014 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00013018 D368 000C                  		add.w	d1,$C(a0)
0001301C 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00013020 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00013024                            
00013024                            locret_FFA0:
00013024 4E75                       		rts	
00013026                            ; ===========================================================================
00013026                            
00013026                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00013026 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
0001302A 6700                       		beq.s	Obj52_07_ChkDel
0001302C 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00013030                            
00013030                            Obj52_07_ChkDel:
00013030 588F                       		addq.l	#4,sp
00013032 3028 0030                  		move.w	$30(a0),d0
00013036 0240 FF80                  		andi.w	#$FF80,d0
0001303A 3238 F700                  		move.w	($FFFFF700).w,d1
0001303E 0441 0080                  		subi.w	#$80,d1
00013042 0241 FF80                  		andi.w	#$FF80,d1
00013046 9041                       		sub.w	d1,d0
00013048 0C40 0280                  		cmpi.w	#$280,d0
0001304C 6200 D448                  		bhi.w	DeleteObject
00013050 4E75                       		rts	
00013052                            ; ===========================================================================
00013052                            
00013052                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00013052 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00013056 323C 0080                  		move.w	#$80,d1
0001305A 0828 0000 0022             		btst	#0,$22(a0)
00013060 6700                       		beq.s	loc_FFE2
00013062 4440                       		neg.w	d0
00013064 D041                       		add.w	d1,d0
00013066                            
00013066                            loc_FFE2:
00013066 3228 0032                  		move.w	$32(a0),d1
0001306A 9240                       		sub.w	d0,d1
0001306C 3141 000C                  		move.w	d1,$C(a0)
00013070 4E75                       		rts	
00013072                            ; ===========================================================================
00013072                            
00013072                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00013072 7600                       		moveq	#0,d3
00013074 1628 0019                  		move.b	$19(a0),d3
00013078 D643                       		add.w	d3,d3
0001307A 7208                       		moveq	#8,d1
0001307C 0828 0000 0022             		btst	#0,$22(a0)
00013082 6700                       		beq.s	loc_10004
00013084 4441                       		neg.w	d1
00013086 4443                       		neg.w	d3
00013088                            
00013088                            loc_10004:
00013088 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
0001308C 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
0001308E 3028 0008                  		move.w	8(a0),d0
00013092 9068 0030                  		sub.w	$30(a0),d0
00013096 B043                       		cmp.w	d3,d0
00013098 6700                       		beq.s	Obj52_0A_Wait
0001309A D368 0008                  		add.w	d1,8(a0)	; move platform
0001309E 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000130A4 4E75                       		rts	
000130A6                            ; ===========================================================================
000130A6                            
000130A6                            Obj52_0A_Wait:
000130A6 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000130AA 6600                       		bne.s	locret_1002E	; if time remains, branch
000130AC 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000130B2                            
000130B2                            locret_1002E:
000130B2 4E75                       		rts	
000130B4                            ; ===========================================================================
000130B4                            
000130B4                            Obj52_0A_Back:
000130B4 3028 0008                  		move.w	8(a0),d0
000130B8 9068 0030                  		sub.w	$30(a0),d0
000130BC 6700                       		beq.s	Obj52_0A_Reset
000130BE 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
000130C2 4E75                       		rts	
000130C4                            ; ===========================================================================
000130C4                            
000130C4                            Obj52_0A_Reset:
000130C4 4268 0036                  		clr.w	$36(a0)
000130C8 5328 0028                  		subq.b	#1,$28(a0)
000130CC 4E75                       		rts	
000130CE                            ; ===========================================================================
000130CE                            ; ---------------------------------------------------------------------------
000130CE                            ; Sprite mappings - moving blocks (MZ, SBZ)
000130CE                            ; ---------------------------------------------------------------------------
000130CE                            Map_obj52:
000130CE                            	include "_maps\obj52mz.asm"
000130CE                            ; ---------------------------------------------------------------------------
000130CE                            ; Sprite mappings - moving blocks (MZ, SBZ)
000130CE                            ; ---------------------------------------------------------------------------
000130CE 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
000130D2 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
000130D6 0000                       		dc.w byte_1008F-Map_obj52
000130D8 01                         byte_10054:	dc.b 1
000130D9 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000130DE 02                         byte_1005A:	dc.b 2
000130DF F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000130E4 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000130E9 04                         byte_10065:	dc.b 4
000130EA F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000130EF 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000130F4 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000130F9 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000130FE 04                         byte_1007A:	dc.b 4
000130FF F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00013104 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00013109 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
0001310E F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00013113 03                         byte_1008F:	dc.b 3
00013114 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00013119 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001311E F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00013124 00                         		even
00013124 00                         		even
00013124                            
00013124                            ; ---------------------------------------------------------------------------
00013124                            ; Sprite mappings - moving block (LZ)
00013124                            ; ---------------------------------------------------------------------------
00013124                            Map_obj52a:
00013124                            	include "_maps\obj52lz.asm"
00013124                            ; ---------------------------------------------------------------------------
00013124                            ; Sprite mappings - moving block (LZ)
00013124                            ; ---------------------------------------------------------------------------
00013124 0000                       		dc.w byte_100A2-Map_obj52a
00013126 01                         byte_100A2:	dc.b 1
00013127 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
0001312C                            		even
0001312C                            		even
0001312C                            
0001312C                            ; ===========================================================================
0001312C                            ; ---------------------------------------------------------------------------
0001312C                            ; Object 55 - Fly enemy (MZ)
0001312C                            ; ---------------------------------------------------------------------------
0001312C                            
0001312C                            Obj55:					; XREF: Obj_Index
0001312C 7000                       		moveq	#0,d0
0001312E 1028 0024                  		move.b	$24(a0),d0
00013132 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00013136 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
0001313A                            ; ===========================================================================
0001313A 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
0001313C 0000                       		dc.w Obj55_TurnH-Obj55_Index
0001313E                            ; ===========================================================================
0001313E                            
0001313E                            Obj55_Main:				; XREF: Obj55_Index
0001313E 5428 0024                  		addq.b	#2,$24(a0)
00013142 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
0001314A 0C38 0005 FE10                             cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00013150 6700                       		beq.s	Obj55_SBZTiles
00013152 317C 84B8 0002             		move.w	#$84B8,2(a0)
00013158 6000                                       bra.s   Obj55_mMainCont
0001315A                            
0001315A                            Obj55_SBZTiles:
0001315A 317C 2344 0002                             move.w    #(1<<13)+($6880/$20),2(a0)
00013160                            
00013160                            Obj55_mMainCont:
00013160 117C 0004 0001             		move.b	#4,1(a0)
00013166 117C 0011 0016             		move.b	#$11,$16(a0)
0001316C 117C 0004 0018             		move.b	#4,$18(a0)
00013172 117C 000A 0020                             move.b	#$A,$20(a0)
00013178 117C 0014 0019             		move.b	#$14,$19(a0)
0001317E 0C28 0001 0028                             cmpi.b  #1,$28(a0)
00013184 6700                                       beq.s   Obj55_time01
00013186 0C28 0003 0028                             cmpi.b  #3,$28(a0)
0001318C 6700                                       beq.s   Obj55_time03
0001318E 317C 0062 0030             		move.w	#$62,$30(a0)	; set turn delay timer
00013194 317C 0062 0032                             move.w	#$62,$32(a0)
0001319A 6000                                       bra.s   Obj55_ContLo
0001319C                            
0001319C                            Obj55_time01:
0001319C 317C 0124 0030                             move.w	#$124,$30(a0)	; set turn delay time
000131A2 317C 0124 0032             		move.w	#$124,$32(a0)
000131A8 6000                                       bra.s   Obj55_ContLo
000131AA                            
000131AA                            Obj55_time03:
000131AA 317C 0001 0030             		move.w	#1,$30(a0)
000131B0 317C 0040 0032             		move.w	#$40,$32(a0)
000131B6                            
000131B6                            Obj55_ContLo:
000131B6                                            
000131B6 0C38 0005 FE10                             cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000131BC 6700                       		beq.s	Obj55_SBZAni
000131BE 117C 0001 001C                             move.b	#1,$1C(a0)	; use floating animation
000131C4 6000                                       bra.s   Obj55_SetSpeeds
000131C6                            
000131C6                            Obj55_SBZAni:
000131C6 117C 0001 001C                             move.b	#1,$1C(a0)	; use floating animation
000131CC                            
000131CC                            Obj55_SetSpeeds:
000131CC 0C28 0001 0028                             cmpi.b  #1,$28(a0)
000131D2 6700                                       beq.s   Obj55_speed01
000131D4 0C28 0002 0028                             cmpi.b  #2,$28(a0)
000131DA 6700                                       beq.s   Obj55_speed02
000131DC 0C28 0003 0028                             cmpi.b  #3,$28(a0)
000131E2 6700                                       beq.s   Obj55_speed01
000131E4 317C FEB0 0010             		move.w	#-$150,$10(a0)	; move fly to the left
000131EA 6000 0000                                  bra.w   Obj55_MainCont
000131EE                            
000131EE                            Obj55_speed01:
000131EE 317C FF50 0010                             move.w  #-$B0,$10(a0)
000131F4 6000 0000                                  bra.w   Obj55_MainCont
000131F8                            
000131F8                            Obj55_speed02:
000131F8 317C FE00 0010                             move.w  #-$200,$10(a0)
000131FE 3038 D00C                  		move.w ($FFFFD000+$C).w,d0 ; Çàãðóçèòü X ïîçèöèþ Ñîíèêà.
00013202 9068 000C                  		sub.w 	$C(a0),d0 ; Âû÷åñòü ïîçèöèþ îáúåêòà èç ïîçèöèè Ñîíèêà. Òàê ìû ïîëó÷èì äèñòàíöèþ Ñîíèêà ê îáúåêòó.
00013206 E340                       		asl.w 	#1,d0 ; Àðèôìåòè÷åñêèé ñäâèã(2 ðàçà). Íóæíî óâåëè÷èòü çíà÷åíèå äëÿ ïîëó÷åíèÿ íîðìàëüíîé ñêîðîñòè.
00013208 3140 0012                                  move.w 	d0,$12(a0);
0001320C                            
0001320C                            Obj55_MainCont:
0001320C 0828 0000 0022                             btst	#0,$22(a0)	; is fly facing left?
00013212 6700                                       beq.s	Obj55_TurnH	; if yes, branch
00013214 4468 0010                  		neg.w	$10(a0)		; move fly to the right
00013218                            
00013218                            Obj55_TurnH:				; XREF: Obj55_Index
00013218 5368 0030                                  subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0001321C 6A00 0000                  		bpl.w	Obj55_Animate	; if time remains, branch
00013220 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
00013226 0C28 0002 0028                             cmpi.b  #2,$28(a0)
0001322C 6700 0000                                  beq.w   loc_faak
00013230 0C28 0003 0028                             cmpi.b  #3,$28(a0)
00013236 6700 0000                                  beq.w   Obj55_type03shoot
0001323A 6000 0000                                  bra.w   Obj55_reverse
0001323E                            
0001323E                            Obj55_type03shoot:
0001323E 4A38 F7AA                  		tst.b   ($FFFFF7AA).w
00013242 6600                       		bne.s	Obj55_WhispKing
00013244 6100 D69A                  		bsr.w	SingleObjLoad
00013248 6600 0000                  		bne.w	loc_faak
0001324C 12BC 0023                  		move.b	#$23,0(a1)
00013250 3368 0008 0008             		move.w	8(a0),8(a1)
00013256 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001325C 5C69 000C                                  add.w	#6,$C(a1)
00013260 337C FC00 0010             		move.w	#-$400,$10(a1)	
00013266 337C 0000 0012             		move.w	#0,$12(a1)
0001326C 70FC                       		moveq	#-4,d0
0001326E 0828 0000 0022             		btst	#0,$22(a0)	
00013274 6700 0000                  		beq.w	loc_fukkas	
00013278 4440                       		neg.w	d0
0001327A 4469 0010                  		neg.w	$10(a1)
0001327E 6000 0000                                  bra.w   loc_fukkas
00013282                            
00013282                            Obj55_WhispKing:
00013282 6100 D65C                  		bsr.w	SingleObjLoad
00013286 6600                       		bne.s	loc_faak
00013288 12BC 0020                  		move.b	#$20,0(a1)
0001328C 3368 0008 0008             		move.w	8(a0),8(a1)
00013292 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013298 5C69 000C                                  add.w	#6,$C(a1)
0001329C 337C FC00 0010             		move.w	#-$400,$10(a1)	
000132A2 337C 0000 0012             		move.w	#0,$12(a1)
000132A8 70FC                       		moveq	#-4,d0
000132AA 0828 0000 0022             		btst	#0,$22(a0)	
000132B0 6700                       		beq.s	loc_fukkas	
000132B2 4440                       		neg.w	d0
000132B4 4469 0010                  		neg.w	$10(a1)		
000132B8                            
000132B8                            loc_fukkas:
000132B8 D169 0008                  		add.w	d0,8(a1)
000132BC 1368 0022 0022             		move.b	$22(a0),$22(a1)
000132C2 137C 0001 0028             		move.b	#1,$28(a1)
000132C8                            
000132C8                            loc_faak:
000132C8 6100 0000                  		bsr.w	Obj55_Animate
000132CC 4E75                                       rts
000132CE                            
000132CE                            Obj55_reverse:
000132CE 4468 0010                  		neg.w	$10(a0)		; change speed direction
000132D2 0868 0000 0022             		bchg	#0,$22(a0)	; change fly facing direction
000132D8                            
000132D8                            Obj55_Animate:
000132D8 43F9 0000 0000             		lea	(Ani_obj55).l,a1
000132DE 6100 A10A                  		bsr.w	AnimateSprite
000132E2 6100 D150                                  bsr.w   SpeedToPos
000132E6 6000 F488                  		bra.w	MarkObjGone
000132EA                            ; ===========================================================================
000132EA                            Ani_obj55:
000132EA                            	include "_anim\obj55.asm"
000132EA                            ; ---------------------------------------------------------------------------
000132EA                            ; Animation script - Basaran enemy
000132EA                            ; ---------------------------------------------------------------------------
000132EA 0000                       		dc.w byte_10238-Ani_obj55
000132EC 0000                                       dc.w byte_FlyFly-Ani_obj55
000132EE 0000                                       dc.w byte_Flashingfly-Ani_obj55
000132F0 0F00 FF00                  byte_10238:	dc.b $F, 0, $FF, 0
000132F4 0400 0102 0304 0502 03FF   byte_FlyFly:    dc.b 4, 0, 1, 2, 3, 4, 5, 2, 3, $FF
000132FE 0209 08FF                  byte_Flashingfly: dc.b 2, 9, 8, $FF
00013302                            		even
00013302                            		even
00013302                            
00013302                            ; ---------------------------------------------------------------------------
00013302                            ; Sprite mappings - Basran enemy (MZ)
00013302                            ; ---------------------------------------------------------------------------
00013302                            Map_obj55:
00013302                            	include "_maps\obj55.asm"
00013302                            ; --------------------------------------------------------------------------------
00013302                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00013302                            ; --------------------------------------------------------------------------------
00013302                            
00013302                            SME_qB8uO:	
00013302 0000 0000                  		dc.w SME_qB8uO_14-SME_qB8uO, SME_qB8uO_24-SME_qB8uO	
00013306 0000 0000                  		dc.w SME_qB8uO_34-SME_qB8uO, SME_qB8uO_44-SME_qB8uO	
0001330A 0000 0000                  		dc.w SME_qB8uO_54-SME_qB8uO, SME_qB8uO_64-SME_qB8uO	
0001330E 0000 0000                  		dc.w SME_qB8uO_74-SME_qB8uO, SME_qB8uO_84-SME_qB8uO	
00013312 0000 0000                  		dc.w SME_qB8uO_94-SME_qB8uO, SME_qB8uO_A9-SME_qB8uO	
00013316 03                         SME_qB8uO_14:	dc.b 3	
00013317 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4	
0001331C 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC	
00013321 0200 0027 0C               		dc.b 2, 0, 0, $27, $C	
00013326 03                         SME_qB8uO_24:	dc.b 3	
00013327 F20E 0029 F4               		dc.b $F2, $E, 0, $29, $F4	
0001332C 0A04 0035 FC               		dc.b $A, 4, 0, $35, $FC	
00013331 0200 0037 0C               		dc.b 2, 0, 0, $37, $C	
00013336 03                         SME_qB8uO_34:	dc.b 3	
00013337 F40E 0006 F4               		dc.b $F4, $E, 0, 6, $F4	
0001333C 0C04 0012 FC               		dc.b $C, 4, 0, $12, $FC	
00013341 0400 0027 0C               		dc.b 4, 0, 0, $27, $C	
00013346 03                         SME_qB8uO_44:	dc.b 3	
00013347 F40E 0029 F4               		dc.b $F4, $E, 0, $29, $F4	
0001334C 0C04 0035 FC               		dc.b $C, 4, 0, $35, $FC	
00013351 0400 0037 0C               		dc.b 4, 0, 0, $37, $C	
00013356 03                         SME_qB8uO_54:	dc.b 3	
00013357 F60E 0006 F4               		dc.b $F6, $E, 0, 6, $F4	
0001335C 0E04 0012 FC               		dc.b $E, 4, 0, $12, $FC	
00013361 0600 0027 0C               		dc.b 6, 0, 0, $27, $C	
00013366 03                         SME_qB8uO_64:	dc.b 3	
00013367 F60E 0029 F4               		dc.b $F6, $E, 0, $29, $F4	
0001336C 0E04 0035 FC               		dc.b $E, 4, 0, $35, $FC	
00013371 0600 0037 0C               		dc.b 6, 0, 0, $37, $C	
00013376 03                         SME_qB8uO_74:	dc.b 3	
00013377 F20E 6006 F4               		dc.b $F2, $E, $60, 6, $F4	
0001337C 0A04 6012 FC               		dc.b $A, 4, $60, $12, $FC	
00013381 0200 6027 0C               		dc.b 2, 0, $60, $27, $C	
00013386 03                         SME_qB8uO_84:	dc.b 3	
00013387 F40E 6029 F4               		dc.b $F4, $E, $60, $29, $F4	
0001338C 0C04 6035 FC               		dc.b $C, 4, $60, $35, $FC	
00013391 0400 6037 0C               		dc.b 4, 0, $60, $37, $C	
00013396 04                         SME_qB8uO_94:	dc.b 4	
00013397 F40E 0039 F4               		dc.b $F4, $E, 0, $39, $F4	
0001339C 0C0D 0045 F4               		dc.b $C, $D, 0, $45, $F4	
000133A1 F403 004D 14               		dc.b $F4, 3, 0, $4D, $14	
000133A6 1400 0051 14               		dc.b $14, 0, 0, $51, $14	
000133AB 04                         SME_qB8uO_A9:	dc.b 4	
000133AC F40E 0074 F4               		dc.b $F4, $E, 0, $74, $F4	
000133B1 0C0D 0080 F4               		dc.b $C, $D, 0, $80, $F4	
000133B6 F403 0088 14               		dc.b $F4, 3, 0, $88, $14	
000133BB 1400 008C 14               		dc.b $14, 0, 0, $8C, $14	
000133C0                            		even
000133C0                            		even
000133C0                            
000133C0                            ; ===========================================================================
000133C0                            ; ---------------------------------------------------------------------------
000133C0                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
000133C0                            ; ---------------------------------------------------------------------------
000133C0                            
000133C0                            Obj56:					; XREF: Obj_Index
000133C0 7000                       		moveq	#0,d0
000133C2 1028 0024                  		move.b	$24(a0),d0
000133C6 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
000133CA 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
000133CE                            ; ===========================================================================
000133CE 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
000133D0 0000                       		dc.w Obj56_Action-Obj56_Index
000133D2                            
000133D2 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
000133D4 2020                       		dc.b  $20, $20
000133D6 1020                       		dc.b  $10, $20
000133D8 201A                       		dc.b  $20, $1A
000133DA 1027                       		dc.b  $10, $27
000133DC 1010                       		dc.b  $10, $10
000133DE 0820                       		dc.b	8, $20
000133E0 4010                       		dc.b  $40, $10
000133E2                            ; ===========================================================================
000133E2                            
000133E2                            Obj56_Main:				; XREF: Obj56_Index
000133E2 5428 0024                  		addq.b	#2,$24(a0)
000133E6 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
000133EE 317C 4000 0002             		move.w	#$4000,2(a0)
000133F4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000133FA 6600                       		bne.s	loc_102C8
000133FC 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00013402                            
00013402                            loc_102C8:
00013402 117C 0004 0001             		move.b	#4,1(a0)
00013408 117C 0003 0018             		move.b	#3,$18(a0)
0001340E 7000                       		moveq	#0,d0
00013410 1028 0028                  		move.b	$28(a0),d0
00013414 E648                       		lsr.w	#3,d0
00013416 0240 000E                  		andi.w	#$E,d0
0001341A 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
0001341E 115A 0019                  		move.b	(a2)+,$19(a0)
00013422 1152 0016                  		move.b	(a2),$16(a0)
00013426 E248                       		lsr.w	#1,d0
00013428 1140 001A                  		move.b	d0,$1A(a0)
0001342C 3168 0008 0034             		move.w	8(a0),$34(a0)
00013432 3168 000C 0030             		move.w	$C(a0),$30(a0)
00013438 7000                       		moveq	#0,d0
0001343A 1012                       		move.b	(a2),d0
0001343C D040                       		add.w	d0,d0
0001343E 3140 003A                  		move.w	d0,$3A(a0)
00013442 7000                       		moveq	#0,d0
00013444 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001344A 6700                       		beq.s	loc_10332
0001344C 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00013450 0240 000F                  		andi.w	#$F,d0
00013454 5140                       		subq.w	#8,d0
00013456 6500                       		bcs.s	loc_10332
00013458 E548                       		lsl.w	#2,d0
0001345A 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
0001345E 45F2 0000                  		lea	(a2,d0.w),a2
00013462 4A52                       		tst.w	(a2)
00013464 6A00                       		bpl.s	loc_10332
00013466 0868 0000 0022             		bchg	#0,$22(a0)
0001346C                            
0001346C                            loc_10332:
0001346C 1028 0028                  		move.b	$28(a0),d0
00013470 6A00                       		bpl.s	Obj56_Action
00013472 0200 000F                  		andi.b	#$F,d0
00013476 1140 003C                  		move.b	d0,$3C(a0)
0001347A 117C 0005 0028             		move.b	#5,$28(a0)
00013480 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00013486 6600                       		bne.s	Obj56_ChkGone
00013488 117C 000C 0028             		move.b	#$C,$28(a0)
0001348E 317C 0080 003A             		move.w	#$80,$3A(a0)
00013494                            
00013494                            Obj56_ChkGone:
00013494 45F8 FC00                  		lea	($FFFFFC00).w,a2
00013498 7000                       		moveq	#0,d0
0001349A 1028 0023                  		move.b	$23(a0),d0
0001349E 6700                       		beq.s	Obj56_Action
000134A0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000134A6 0832 0000 0002             		btst	#0,2(a2,d0.w)
000134AC 6700                       		beq.s	Obj56_Action
000134AE 5228 0028                  		addq.b	#1,$28(a0)
000134B2 4268 003A                  		clr.w	$3A(a0)
000134B6                            
000134B6                            Obj56_Action:				; XREF: Obj56_Index
000134B6 3F28 0008                  		move.w	8(a0),-(sp)
000134BA 7000                       		moveq	#0,d0
000134BC 1028 0028                  		move.b	$28(a0),d0	; get object type
000134C0 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000134C4 D040                       		add.w	d0,d0
000134C6 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
000134CA 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
000134CE 381F                       		move.w	(sp)+,d4
000134D0 4A28 0001                  		tst.b	1(a0)
000134D4 6A00                       		bpl.s	Obj56_ChkDel
000134D6 7200                       		moveq	#0,d1
000134D8 1228 0019                  		move.b	$19(a0),d1
000134DC 0641 000B                  		addi.w	#$B,d1
000134E0 7400                       		moveq	#0,d2
000134E2 1428 0016                  		move.b	$16(a0),d2
000134E6 3602                       		move.w	d2,d3
000134E8 5243                       		addq.w	#1,d3
000134EA 6100 F564                  		bsr.w	SolidObject
000134EE                            
000134EE                            Obj56_ChkDel:
000134EE 3028 0034                  		move.w	$34(a0),d0
000134F2 0240 FF80                  		andi.w	#$FF80,d0
000134F6 3238 F700                  		move.w	($FFFFF700).w,d1
000134FA 0441 0080                  		subi.w	#$80,d1
000134FE 0241 FF80                  		andi.w	#$FF80,d1
00013502 9041                       		sub.w	d1,d0
00013504 0C40 0280                  		cmpi.w	#$280,d0
00013508 6200 CF8C                  		bhi.w	DeleteObject
0001350C 6000 CF4C                  		bra.w	DisplaySprite
00013510                            ; ===========================================================================
00013510 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00013514 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00013518 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
0001351C 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00013520 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00013524 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00013528 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
0001352C                            ; ===========================================================================
0001352C                            
0001352C                            Obj56_Type00:				; XREF: Obj56_TypeIndex
0001352C 4E75                       		rts	
0001352E                            ; ===========================================================================
0001352E                            
0001352E                            Obj56_Type01:				; XREF: Obj56_TypeIndex
0001352E 323C 0040                  		move.w	#$40,d1
00013532 7000                       		moveq	#0,d0
00013534 1038 FE68                  		move.b	($FFFFFE68).w,d0
00013538 6000                       		bra.s	Obj56_Move_LR
0001353A                            ; ===========================================================================
0001353A                            
0001353A                            Obj56_Type02:				; XREF: Obj56_TypeIndex
0001353A 323C 0080                  		move.w	#$80,d1
0001353E 7000                       		moveq	#0,d0
00013540 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00013544                            
00013544                            Obj56_Move_LR:
00013544 0828 0000 0022             		btst	#0,$22(a0)
0001354A 6700                       		beq.s	loc_10416
0001354C 4440                       		neg.w	d0
0001354E D041                       		add.w	d1,d0
00013550                            
00013550                            loc_10416:
00013550 3228 0034                  		move.w	$34(a0),d1
00013554 9240                       		sub.w	d0,d1
00013556 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001355A 4E75                       		rts	
0001355C                            ; ===========================================================================
0001355C                            
0001355C                            Obj56_Type03:				; XREF: Obj56_TypeIndex
0001355C 323C 0040                  		move.w	#$40,d1
00013560 7000                       		moveq	#0,d0
00013562 1038 FE68                  		move.b	($FFFFFE68).w,d0
00013566 6000                       		bra.s	Obj56_Move_UD
00013568                            ; ===========================================================================
00013568                            
00013568                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00013568 323C 0080                  		move.w	#$80,d1
0001356C 7000                       		moveq	#0,d0
0001356E 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00013572                            
00013572                            Obj56_Move_UD:
00013572 0828 0000 0022             		btst	#0,$22(a0)
00013578 6700                       		beq.s	loc_10444
0001357A 4440                       		neg.w	d0
0001357C D041                       		add.w	d1,d0
0001357E                            
0001357E                            loc_10444:
0001357E 3228 0030                  		move.w	$30(a0),d1
00013582 9240                       		sub.w	d0,d1
00013584 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00013588 4E75                       		rts	
0001358A                            ; ===========================================================================
0001358A                            
0001358A                            Obj56_Type05:				; XREF: Obj56_TypeIndex
0001358A 4A28 0038                  		tst.b	$38(a0)
0001358E 6600                       		bne.s	loc_104A4
00013590 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00013596 6600                       		bne.s	loc_1047A	; if not, branch
00013598 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
0001359E 6600                       		bne.s	loc_1047A
000135A0 4238 F7C9                  		clr.b	($FFFFF7C9).w
000135A4 3038 D008                  		move.w	($FFFFD008).w,d0
000135A8 B068 0008                  		cmp.w	8(a0),d0
000135AC 6400                       		bcc.s	loc_1047A
000135AE 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
000135B4                            
000135B4                            loc_1047A:
000135B4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000135B8 7000                       		moveq	#0,d0
000135BA 1028 003C                  		move.b	$3C(a0),d0
000135BE 0832 0000 0000             		btst	#0,(a2,d0.w)
000135C4 6700                       		beq.s	loc_104AE
000135C6 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000135CC 6600                       		bne.s	loc_1049E	; if not, branch
000135CE 0C00 0003                  		cmpi.b	#3,d0
000135D2 6600                       		bne.s	loc_1049E
000135D4 4238 F7C9                  		clr.b	($FFFFF7C9).w
000135D8                            
000135D8                            loc_1049E:
000135D8 117C 0001 0038             		move.b	#1,$38(a0)
000135DE                            
000135DE                            loc_104A4:
000135DE 4A68 003A                  		tst.w	$3A(a0)
000135E2 6700                       		beq.s	loc_104C8
000135E4 5568 003A                  		subq.w	#2,$3A(a0)
000135E8                            
000135E8                            loc_104AE:
000135E8 3028 003A                  		move.w	$3A(a0),d0
000135EC 0828 0000 0022             		btst	#0,$22(a0)
000135F2 6700                       		beq.s	loc_104BC
000135F4 4440                       		neg.w	d0
000135F6                            
000135F6                            loc_104BC:
000135F6 3228 0030                  		move.w	$30(a0),d1
000135FA D240                       		add.w	d0,d1
000135FC 3141 000C                  		move.w	d1,$C(a0)
00013600 4E75                       		rts	
00013602                            ; ===========================================================================
00013602                            
00013602                            loc_104C8:
00013602 5228 0028                  		addq.b	#1,$28(a0)
00013606 4228 0038                  		clr.b	$38(a0)
0001360A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001360E 7000                       		moveq	#0,d0
00013610 1028 0023                  		move.b	$23(a0),d0
00013614 67D2                       		beq.s	loc_104AE
00013616 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001361C 60CA                       		bra.s	loc_104AE
0001361E                            ; ===========================================================================
0001361E                            
0001361E                            Obj56_Type06:				; XREF: Obj56_TypeIndex
0001361E 4A28 0038                  		tst.b	$38(a0)
00013622 6600                       		bne.s	loc_10500
00013624 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00013628 7000                       		moveq	#0,d0
0001362A 1028 003C                  		move.b	$3C(a0),d0
0001362E 4A32 0000                  		tst.b	(a2,d0.w)
00013632 6A00                       		bpl.s	loc_10512
00013634 117C 0001 0038             		move.b	#1,$38(a0)
0001363A                            
0001363A                            loc_10500:
0001363A 7000                       		moveq	#0,d0
0001363C 1028 0016                  		move.b	$16(a0),d0
00013640 D040                       		add.w	d0,d0
00013642 B068 003A                  		cmp.w	$3A(a0),d0
00013646 6700                       		beq.s	loc_1052C
00013648 5468 003A                  		addq.w	#2,$3A(a0)
0001364C                            
0001364C                            loc_10512:
0001364C 3028 003A                  		move.w	$3A(a0),d0
00013650 0828 0000 0022             		btst	#0,$22(a0)
00013656 6700                       		beq.s	loc_10520
00013658 4440                       		neg.w	d0
0001365A                            
0001365A                            loc_10520:
0001365A 3228 0030                  		move.w	$30(a0),d1
0001365E D240                       		add.w	d0,d1
00013660 3141 000C                  		move.w	d1,$C(a0)
00013664 4E75                       		rts	
00013666                            ; ===========================================================================
00013666                            
00013666                            loc_1052C:
00013666 5328 0028                  		subq.b	#1,$28(a0)
0001366A 4228 0038                  		clr.b	$38(a0)
0001366E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00013672 7000                       		moveq	#0,d0
00013674 1028 0023                  		move.b	$23(a0),d0
00013678 67D2                       		beq.s	loc_10512
0001367A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00013680 60CA                       		bra.s	loc_10512
00013682                            ; ===========================================================================
00013682                            
00013682                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00013682 4A28 0038                  		tst.b	$38(a0)
00013686 6600                       		bne.s	loc_1055E
00013688 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
0001368C 6700                       		beq.s	locret_10578
0001368E 117C 0001 0038             		move.b	#1,$38(a0)
00013694 4268 003A                  		clr.w	$3A(a0)
00013698                            
00013698                            loc_1055E:
00013698 5268 0008                  		addq.w	#1,8(a0)
0001369C 3168 0008 0034             		move.w	8(a0),$34(a0)
000136A2 5268 003A                  		addq.w	#1,$3A(a0)
000136A6 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
000136AC 6600                       		bne.s	locret_10578
000136AE 4228 0028                  		clr.b	$28(a0)
000136B2                            
000136B2                            locret_10578:
000136B2 4E75                       		rts	
000136B4                            ; ===========================================================================
000136B4                            
000136B4                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
000136B4 4A28 0038                  		tst.b	$38(a0)
000136B8 6600                       		bne.s	loc_10598
000136BA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000136BE 7000                       		moveq	#0,d0
000136C0 1028 003C                  		move.b	$3C(a0),d0
000136C4 0832 0000 0000             		btst	#0,(a2,d0.w)
000136CA 6700                       		beq.s	loc_105A2
000136CC 117C 0001 0038             		move.b	#1,$38(a0)
000136D2                            
000136D2                            loc_10598:
000136D2 4A68 003A                  		tst.w	$3A(a0)
000136D6 6700                       		beq.s	loc_105C0
000136D8 5568 003A                  		subq.w	#2,$3A(a0)
000136DC                            
000136DC                            loc_105A2:
000136DC 3028 003A                  		move.w	$3A(a0),d0
000136E0 0828 0000 0022             		btst	#0,$22(a0)
000136E6 6700                       		beq.s	loc_105B4
000136E8 4440                       		neg.w	d0
000136EA 0640 0080                  		addi.w	#$80,d0
000136EE                            
000136EE                            loc_105B4:
000136EE 3228 0034                  		move.w	$34(a0),d1
000136F2 D240                       		add.w	d0,d1
000136F4 3141 0008                  		move.w	d1,8(a0)
000136F8 4E75                       		rts	
000136FA                            ; ===========================================================================
000136FA                            
000136FA                            loc_105C0:
000136FA 5228 0028                  		addq.b	#1,$28(a0)
000136FE 4228 0038                  		clr.b	$38(a0)
00013702 45F8 FC00                  		lea	($FFFFFC00).w,a2
00013706 7000                       		moveq	#0,d0
00013708 1028 0023                  		move.b	$23(a0),d0
0001370C 67CE                       		beq.s	loc_105A2
0001370E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00013714 60C6                       		bra.s	loc_105A2
00013716                            ; ===========================================================================
00013716                            
00013716                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00013716 4A28 0038                  		tst.b	$38(a0)
0001371A 6600                       		bne.s	loc_105F8
0001371C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00013720 7000                       		moveq	#0,d0
00013722 1028 003C                  		move.b	$3C(a0),d0
00013726 4A32 0000                  		tst.b	(a2,d0.w)
0001372A 6A00                       		bpl.s	loc_10606
0001372C 117C 0001 0038             		move.b	#1,$38(a0)
00013732                            
00013732                            loc_105F8:
00013732 303C 0080                  		move.w	#$80,d0
00013736 B068 003A                  		cmp.w	$3A(a0),d0
0001373A 6700                       		beq.s	loc_10624
0001373C 5468 003A                  		addq.w	#2,$3A(a0)
00013740                            
00013740                            loc_10606:
00013740 3028 003A                  		move.w	$3A(a0),d0
00013744 0828 0000 0022             		btst	#0,$22(a0)
0001374A 6700                       		beq.s	loc_10618
0001374C 4440                       		neg.w	d0
0001374E 0640 0080                  		addi.w	#$80,d0
00013752                            
00013752                            loc_10618:
00013752 3228 0034                  		move.w	$34(a0),d1
00013756 D240                       		add.w	d0,d1
00013758 3141 0008                  		move.w	d1,8(a0)
0001375C 4E75                       		rts	
0001375E                            ; ===========================================================================
0001375E                            
0001375E                            loc_10624:
0001375E 5328 0028                  		subq.b	#1,$28(a0)
00013762 4228 0038                  		clr.b	$38(a0)
00013766 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001376A 7000                       		moveq	#0,d0
0001376C 1028 0023                  		move.b	$23(a0),d0
00013770 67CE                       		beq.s	loc_10606
00013772 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00013778 60C6                       		bra.s	loc_10606
0001377A                            ; ===========================================================================
0001377A                            
0001377A                            Obj56_Type08:				; XREF: Obj56_TypeIndex
0001377A 323C 0010                  		move.w	#$10,d1
0001377E 7000                       		moveq	#0,d0
00013780 1038 FE88                  		move.b	($FFFFFE88).w,d0
00013784 E248                       		lsr.w	#1,d0
00013786 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
0001378A 6000                       		bra.s	Obj56_Move_Sqr
0001378C                            ; ===========================================================================
0001378C                            
0001378C                            Obj56_Type09:				; XREF: Obj56_TypeIndex
0001378C 323C 0030                  		move.w	#$30,d1
00013790 7000                       		moveq	#0,d0
00013792 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00013796 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
0001379A 6000                       		bra.s	Obj56_Move_Sqr
0001379C                            ; ===========================================================================
0001379C                            
0001379C                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
0001379C 323C 0050                  		move.w	#$50,d1
000137A0 7000                       		moveq	#0,d0
000137A2 1038 FE90                  		move.b	($FFFFFE90).w,d0
000137A6 3638 FE92                  		move.w	($FFFFFE92).w,d3
000137AA 6000                       		bra.s	Obj56_Move_Sqr
000137AC                            ; ===========================================================================
000137AC                            
000137AC                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
000137AC 323C 0070                  		move.w	#$70,d1
000137B0 7000                       		moveq	#0,d0
000137B2 1038 FE94                  		move.b	($FFFFFE94).w,d0
000137B6 3638 FE96                  		move.w	($FFFFFE96).w,d3
000137BA                            
000137BA                            Obj56_Move_Sqr:
000137BA 4A43                       		tst.w	d3
000137BC 6600                       		bne.s	loc_1068E
000137BE 5228 0022                  		addq.b	#1,$22(a0)
000137C2 0228 0003 0022             		andi.b	#3,$22(a0)
000137C8                            
000137C8                            loc_1068E:
000137C8 1428 0022                  		move.b	$22(a0),d2
000137CC 0202 0003                  		andi.b	#3,d2
000137D0 6600                       		bne.s	loc_106AE
000137D2 9041                       		sub.w	d1,d0
000137D4 D068 0034                  		add.w	$34(a0),d0
000137D8 3140 0008                  		move.w	d0,8(a0)
000137DC 4441                       		neg.w	d1
000137DE D268 0030                  		add.w	$30(a0),d1
000137E2 3141 000C                  		move.w	d1,$C(a0)
000137E6 4E75                       		rts	
000137E8                            ; ===========================================================================
000137E8                            
000137E8                            loc_106AE:
000137E8 5302                       		subq.b	#1,d2
000137EA 6600                       		bne.s	loc_106CC
000137EC 5341                       		subq.w	#1,d1
000137EE 9041                       		sub.w	d1,d0
000137F0 4440                       		neg.w	d0
000137F2 D068 0030                  		add.w	$30(a0),d0
000137F6 3140 000C                  		move.w	d0,$C(a0)
000137FA 5241                       		addq.w	#1,d1
000137FC D268 0034                  		add.w	$34(a0),d1
00013800 3141 0008                  		move.w	d1,8(a0)
00013804 4E75                       		rts	
00013806                            ; ===========================================================================
00013806                            
00013806                            loc_106CC:
00013806 5302                       		subq.b	#1,d2
00013808 6600                       		bne.s	loc_106EA
0001380A 5341                       		subq.w	#1,d1
0001380C 9041                       		sub.w	d1,d0
0001380E 4440                       		neg.w	d0
00013810 D068 0034                  		add.w	$34(a0),d0
00013814 3140 0008                  		move.w	d0,8(a0)
00013818 5241                       		addq.w	#1,d1
0001381A D268 0030                  		add.w	$30(a0),d1
0001381E 3141 000C                  		move.w	d1,$C(a0)
00013822 4E75                       		rts	
00013824                            ; ===========================================================================
00013824                            
00013824                            loc_106EA:
00013824 9041                       		sub.w	d1,d0
00013826 D068 0030                  		add.w	$30(a0),d0
0001382A 3140 000C                  		move.w	d0,$C(a0)
0001382E 4441                       		neg.w	d1
00013830 D268 0034                  		add.w	$34(a0),d1
00013834 3141 0008                  		move.w	d1,8(a0)
00013838 4E75                       		rts	
0001383A                            ; ===========================================================================
0001383A                            ; ---------------------------------------------------------------------------
0001383A                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
0001383A                            ; ---------------------------------------------------------------------------
0001383A                            Map_obj56:
0001383A                            	include "_maps\obj56.asm"
0001383A                            ; ---------------------------------------------------------------------------
0001383A                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
0001383A                            ; ---------------------------------------------------------------------------
0001383A 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
0001383E 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00013842 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00013846 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
0001384A 01                         byte_10710:	dc.b 1
0001384B F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00013850 04                         byte_10716:	dc.b 4
00013851 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00013856 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
0001385B 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00013860 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00013865 02                         byte_1072B:	dc.b 2
00013866 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
0001386B 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00013870 04                         byte_10736:	dc.b 4
00013871 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00013876 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
0001387B 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00013880 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00013885 03                         byte_1074B:	dc.b 3
00013886 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
0001388B F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00013890 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00013895 01                         byte_1075B:	dc.b 1
00013896 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001389B 02                         byte_10761:	dc.b 2
0001389C E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000138A1 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000138A6 04                         byte_1076C:	dc.b 4
000138A7 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
000138AC F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
000138B1 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
000138B6 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
000138BC 00                         		even
000138BC 00                         		even
000138BC                            
000138BC                            ; ===========================================================================
000138BC                            ; ---------------------------------------------------------------------------
000138BC                            ; Object 57 - spiked balls (SYZ, LZ)
000138BC                            ; ---------------------------------------------------------------------------
000138BC                            
000138BC                            Obj57:					; XREF: Obj_Index
000138BC 7000                       		moveq	#0,d0
000138BE 1028 0024                  		move.b	$24(a0),d0
000138C2 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
000138C6 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
000138CA                            ; ===========================================================================
000138CA 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
000138CC 0000                       		dc.w Obj57_Move-Obj57_Index
000138CE 0000                       		dc.w Obj57_Display-Obj57_Index
000138D0                            ; ===========================================================================
000138D0                            
000138D0                            Obj57_Main:				; XREF: Obj57_Index
000138D0 5428 0024                  		addq.b	#2,$24(a0)
000138D4 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
000138DC 317C 03BA 0002             		move.w	#$3BA,2(a0)
000138E2 117C 0004 0001             		move.b	#4,1(a0)
000138E8 117C 0004 0018             		move.b	#4,$18(a0)
000138EE 117C 0008 0019             		move.b	#8,$19(a0)
000138F4 3168 0008 003A             		move.w	8(a0),$3A(a0)
000138FA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00013900 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00013906 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001390C 6600                       		bne.s	loc_107E8
0001390E 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00013914 317C 0310 0002             		move.w	#$310,2(a0)
0001391A 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00013922                            
00013922                            loc_107E8:
00013922 1228 0028                  		move.b	$28(a0),d1	; get object type
00013926 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001392A 4881                       		ext.w	d1
0001392C E741                       		asl.w	#3,d1		; multiply by 8
0001392E 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00013932 1028 0022                  		move.b	$22(a0),d0
00013936 E418                       		ror.b	#2,d0
00013938 0200 00C0                  		andi.b	#-$40,d0
0001393C 1140 0026                  		move.b	d0,$26(a0)
00013940 45E8 0029                  		lea	$29(a0),a2
00013944 1228 0028                  		move.b	$28(a0),d1	; get object type
00013948 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
0001394C 14FC 0000                  		move.b	#0,(a2)+
00013950 3601                       		move.w	d1,d3
00013952 E94B                       		lsl.w	#4,d3
00013954 1143 003C                  		move.b	d3,$3C(a0)
00013958 5341                       		subq.w	#1,d1		; set chain length (type-1)
0001395A 6500                       		bcs.s	loc_10894
0001395C 0828 0003 0028             		btst	#3,$28(a0)
00013962 6700                       		beq.s	Obj57_MakeChain
00013964 5341                       		subq.w	#1,d1
00013966 6500                       		bcs.s	loc_10894
00013968                            
00013968                            Obj57_MakeChain:
00013968 6100 CF76                  		bsr.w	SingleObjLoad
0001396C 6600                       		bne.s	loc_10894
0001396E 5228 0029                  		addq.b	#1,$29(a0)
00013972 3A09                       		move.w	a1,d5
00013974 0445 D000                  		subi.w	#-$3000,d5
00013978 EC4D                       		lsr.w	#6,d5
0001397A 0245 007F                  		andi.w	#$7F,d5
0001397E 14C5                       		move.b	d5,(a2)+
00013980 137C 0004 0024             		move.b	#4,$24(a1)
00013986 1290                       		move.b	0(a0),0(a1)
00013988 2368 0004 0004             		move.l	4(a0),4(a1)
0001398E 3368 0002 0002             		move.w	2(a0),2(a1)
00013994 1368 0001 0001             		move.b	1(a0),1(a1)
0001399A 1368 0018 0018             		move.b	$18(a0),$18(a1)
000139A0 1368 0019 0019             		move.b	$19(a0),$19(a1)
000139A6 1368 0020 0020             		move.b	$20(a0),$20(a1)
000139AC 0403 0010                  		subi.b	#$10,d3
000139B0 1343 003C                  		move.b	d3,$3C(a1)
000139B4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000139BA 6600                       		bne.s	loc_10890
000139BC 4A03                       		tst.b	d3
000139BE 6600                       		bne.s	loc_10890
000139C0 137C 0002 001A             		move.b	#2,$1A(a1)
000139C6                            
000139C6                            loc_10890:
000139C6 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
000139CA                            
000139CA                            loc_10894:
000139CA 3A08                       		move.w	a0,d5
000139CC 0445 D000                  		subi.w	#-$3000,d5
000139D0 EC4D                       		lsr.w	#6,d5
000139D2 0245 007F                  		andi.w	#$7F,d5
000139D6 14C5                       		move.b	d5,(a2)+
000139D8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000139DE 6600                       		bne.s	Obj57_Move
000139E0 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
000139E6 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000139EC                            
000139EC                            Obj57_Move:				; XREF: Obj57_Index
000139EC 6100 0000                  		bsr.w	Obj57_MoveSub
000139F0 6000 0000                  		bra.w	Obj57_ChkDel
000139F4                            ; ===========================================================================
000139F4                            
000139F4                            Obj57_MoveSub:				; XREF: Obj57_Move
000139F4 3028 003E                  		move.w	$3E(a0),d0
000139F8 D168 0026                  		add.w	d0,$26(a0)
000139FC 1028 0026                  		move.b	$26(a0),d0
00013A00 4EB9 0000 2CC8             		jsr	(CalcSine).l
00013A06 3428 0038                  		move.w	$38(a0),d2
00013A0A 3628 003A                  		move.w	$3A(a0),d3
00013A0E 45E8 0029                  		lea	$29(a0),a2
00013A12 7C00                       		moveq	#0,d6
00013A14 1C1A                       		move.b	(a2)+,d6
00013A16                            
00013A16                            Obj57_MoveLoop:
00013A16 7800                       		moveq	#0,d4
00013A18 181A                       		move.b	(a2)+,d4
00013A1A ED4C                       		lsl.w	#6,d4
00013A1C 0684 00FF D000             		addi.l	#$FFD000,d4
00013A22 2244                       		movea.l	d4,a1
00013A24 7800                       		moveq	#0,d4
00013A26 1829 003C                  		move.b	$3C(a1),d4
00013A2A 2A04                       		move.l	d4,d5
00013A2C C9C0                       		muls.w	d0,d4
00013A2E E084                       		asr.l	#8,d4
00013A30 CBC1                       		muls.w	d1,d5
00013A32 E085                       		asr.l	#8,d5
00013A34 D842                       		add.w	d2,d4
00013A36 DA43                       		add.w	d3,d5
00013A38 3344 000C                  		move.w	d4,$C(a1)
00013A3C 3345 0008                  		move.w	d5,8(a1)
00013A40 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00013A44 4E75                       		rts	
00013A46                            ; ===========================================================================
00013A46                            
00013A46                            Obj57_ChkDel:				; XREF: Obj57_Move
00013A46 3028 003A                  		move.w	$3A(a0),d0
00013A4A 0240 FF80                  		andi.w	#$FF80,d0
00013A4E 3238 F700                  		move.w	($FFFFF700).w,d1
00013A52 0441 0080                  		subi.w	#$80,d1
00013A56 0241 FF80                  		andi.w	#$FF80,d1
00013A5A 9041                       		sub.w	d1,d0
00013A5C 0C40 0280                  		cmpi.w	#$280,d0
00013A60 6200 0000                  		bhi.w	Obj57_Delete
00013A64 6000 C9F4                  		bra.w	DisplaySprite
00013A68                            ; ===========================================================================
00013A68                            
00013A68                            Obj57_Delete:				; XREF: Obj57_ChkDel
00013A68 7400                       		moveq	#0,d2
00013A6A 45E8 0029                  		lea	$29(a0),a2
00013A6E 141A                       		move.b	(a2)+,d2
00013A70                            
00013A70                            Obj57_DelLoop:
00013A70 7000                       		moveq	#0,d0
00013A72 101A                       		move.b	(a2)+,d0
00013A74 ED48                       		lsl.w	#6,d0
00013A76 0680 00FF D000             		addi.l	#$FFD000,d0
00013A7C 2240                       		movea.l	d0,a1
00013A7E 6100 CA18                  		bsr.w	DeleteObject2
00013A82 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00013A86                            
00013A86 4E75                       		rts	
00013A88                            ; ===========================================================================
00013A88                            
00013A88                            Obj57_Display:				; XREF: Obj57_Index
00013A88 6000 C9D0                  		bra.w	DisplaySprite
00013A8C                            ; ===========================================================================
00013A8C                            ; ---------------------------------------------------------------------------
00013A8C                            ; Sprite mappings - chain of spiked balls (SYZ)
00013A8C                            ; ---------------------------------------------------------------------------
00013A8C                            Map_obj57:
00013A8C                            	include "_maps\obj57syz.asm"
00013A8C                            ; ---------------------------------------------------------------------------
00013A8C                            ; Sprite mappings - chain of spiked balls (SYZ)
00013A8C                            ; ---------------------------------------------------------------------------
00013A8C 0000                       		dc.w byte_10958-Map_obj57
00013A8E 01                         byte_10958:	dc.b 1
00013A8F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00013A94                            		even
00013A94                            		even
00013A94                            
00013A94                            ; ---------------------------------------------------------------------------
00013A94                            ; Sprite mappings - spiked ball	on a chain (LZ)
00013A94                            ; ---------------------------------------------------------------------------
00013A94                            Map_obj57a:
00013A94                            	include "_maps\obj57lz.asm"
00013A94                            ; ---------------------------------------------------------------------------
00013A94                            ; Sprite mappings - spiked ball	on a chain (LZ)
00013A94                            ; ---------------------------------------------------------------------------
00013A94 0000                       		dc.w byte_10964-Map_obj57a
00013A96 0000                       		dc.w byte_1096A-Map_obj57a
00013A98 0000                       		dc.w byte_10970-Map_obj57a
00013A9A 01                         byte_10964:	dc.b 1
00013A9B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00013AA0 01                         byte_1096A:	dc.b 1
00013AA1 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00013AA6 01                         byte_10970:	dc.b 1
00013AA7 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00013AAC                            		even
00013AAC                            		even
00013AAC                            
00013AAC                            ; ===========================================================================
00013AAC                            ; ---------------------------------------------------------------------------
00013AAC                            ; Object 58 - giant spiked balls (SYZ)
00013AAC                            ; ---------------------------------------------------------------------------
00013AAC                            
00013AAC                            Obj58:					; XREF: Obj_Index
00013AAC 7000                       		moveq	#0,d0
00013AAE 1028 0024                  		move.b	$24(a0),d0
00013AB2 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00013AB6 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00013ABA                            ; ===========================================================================
00013ABA 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00013ABC 0000                       		dc.w Obj58_Move-Obj58_Index
00013ABE                            ; ===========================================================================
00013ABE                            
00013ABE                            Obj58_Main:				; XREF: Obj58_Index
00013ABE 5428 0024                  		addq.b	#2,$24(a0)
00013AC2 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00013ACA 317C 0396 0002             		move.w	#$396,2(a0)
00013AD0 117C 0004 0001             		move.b	#4,1(a0)
00013AD6 117C 0004 0018             		move.b	#4,$18(a0)
00013ADC 117C 0018 0019             		move.b	#$18,$19(a0)
00013AE2 3168 0008 003A             		move.w	8(a0),$3A(a0)
00013AE8 3168 000C 0038             		move.w	$C(a0),$38(a0)
00013AEE 117C 0086 0020             		move.b	#$86,$20(a0)
00013AF4 1228 0028                  		move.b	$28(a0),d1	; get object type
00013AF8 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00013AFC 4881                       		ext.w	d1
00013AFE E741                       		asl.w	#3,d1		; multiply by 8
00013B00 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00013B04 1028 0022                  		move.b	$22(a0),d0
00013B08 E418                       		ror.b	#2,d0
00013B0A 0200 00C0                  		andi.b	#$C0,d0
00013B0E 1140 0026                  		move.b	d0,$26(a0)
00013B12 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00013B18                            
00013B18                            Obj58_Move:				; XREF: Obj58_Index
00013B18 7000                       		moveq	#0,d0
00013B1A 1028 0028                  		move.b	$28(a0),d0	; get object type
00013B1E 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00013B22 D040                       		add.w	d0,d0
00013B24 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00013B28 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00013B2C 3028 003A                  		move.w	$3A(a0),d0
00013B30 0240 FF80                  		andi.w	#$FF80,d0
00013B34 3238 F700                  		move.w	($FFFFF700).w,d1
00013B38 0441 0080                  		subi.w	#$80,d1
00013B3C 0241 FF80                  		andi.w	#$FF80,d1
00013B40 9041                       		sub.w	d1,d0
00013B42 0C40 0280                  		cmpi.w	#$280,d0
00013B46 6200 C94E                  		bhi.w	DeleteObject
00013B4A 6000 C90E                  		bra.w	DisplaySprite
00013B4E                            ; ===========================================================================
00013B4E 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00013B50 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00013B52 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00013B54 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00013B56                            ; ===========================================================================
00013B56                            
00013B56                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00013B56 4E75                       		rts	
00013B58                            ; ===========================================================================
00013B58                            
00013B58                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00013B58 323C 0060                  		move.w	#$60,d1
00013B5C 7000                       		moveq	#0,d0
00013B5E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00013B62 0828 0000 0022             		btst	#0,$22(a0)
00013B68 6700                       		beq.s	loc_10A38
00013B6A 4440                       		neg.w	d0
00013B6C D041                       		add.w	d1,d0
00013B6E                            
00013B6E                            loc_10A38:
00013B6E 3228 003A                  		move.w	$3A(a0),d1
00013B72 9240                       		sub.w	d0,d1
00013B74 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00013B78 4E75                       		rts	
00013B7A                            ; ===========================================================================
00013B7A                            
00013B7A                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00013B7A 323C 0060                  		move.w	#$60,d1
00013B7E 7000                       		moveq	#0,d0
00013B80 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00013B84 0828 0000 0022             		btst	#0,$22(a0)
00013B8A 6700                       		beq.s	loc_10A5C
00013B8C 4440                       		neg.w	d0
00013B8E 0640 0080                  		addi.w	#$80,d0
00013B92                            
00013B92                            loc_10A5C:
00013B92 3228 0038                  		move.w	$38(a0),d1
00013B96 9240                       		sub.w	d0,d1
00013B98 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00013B9C 4E75                       		rts	
00013B9E                            ; ===========================================================================
00013B9E                            
00013B9E                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00013B9E 3028 003E                  		move.w	$3E(a0),d0
00013BA2 D168 0026                  		add.w	d0,$26(a0)
00013BA6 1028 0026                  		move.b	$26(a0),d0
00013BAA 4EB9 0000 2CC8             		jsr	(CalcSine).l
00013BB0 3428 0038                  		move.w	$38(a0),d2
00013BB4 3628 003A                  		move.w	$3A(a0),d3
00013BB8 7800                       		moveq	#0,d4
00013BBA 1828 003C                  		move.b	$3C(a0),d4
00013BBE 2A04                       		move.l	d4,d5
00013BC0 C9C0                       		muls.w	d0,d4
00013BC2 E084                       		asr.l	#8,d4
00013BC4 CBC1                       		muls.w	d1,d5
00013BC6 E085                       		asr.l	#8,d5
00013BC8 D842                       		add.w	d2,d4
00013BCA DA43                       		add.w	d3,d5
00013BCC 3144 000C                  		move.w	d4,$C(a0)
00013BD0 3145 0008                  		move.w	d5,8(a0)
00013BD4 4E75                       		rts	
00013BD6                            ; ===========================================================================
00013BD6                            ; ---------------------------------------------------------------------------
00013BD6                            ; Sprite mappings - SBZ	spiked ball on a chain
00013BD6                            ; ---------------------------------------------------------------------------
00013BD6                            Map_obj15b:
00013BD6                            	include "_maps\obj15sbz.asm"
00013BD6                            ; ---------------------------------------------------------------------------
00013BD6                            ; Sprite mappings - spiked ball on a chain (SBZ)
00013BD6                            ; ---------------------------------------------------------------------------
00013BD6 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00013BDA 0000                       		dc.w byte_10AC6-Map_obj15b
00013BDC 05                         byte_10AA6:	dc.b 5
00013BDD E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00013BE2 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00013BE7 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00013BEC F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00013BF1 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00013BF6 01                         byte_10AC0:	dc.b 1
00013BF7 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00013BFC 02                         byte_10AC6:	dc.b 2
00013BFD F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00013C02 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00013C08 00                         		even
00013C08 00                         		even
00013C08                            
00013C08                            ; ===========================================================================
00013C08                            ; ---------------------------------------------------------------------------
00013C08                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00013C08                            ; ---------------------------------------------------------------------------
00013C08                            
00013C08                            Obj59:					; XREF: Obj_Index
00013C08 7000                       		moveq	#0,d0
00013C0A 1028 0024                  		move.b	$24(a0),d0
00013C0E 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00013C12 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00013C16 3028 0032                  		move.w	$32(a0),d0
00013C1A 0240 FF80                  		andi.w	#$FF80,d0
00013C1E 3238 F700                  		move.w	($FFFFF700).w,d1
00013C22 0441 0080                  		subi.w	#$80,d1
00013C26 0241 FF80                  		andi.w	#$FF80,d1
00013C2A 9041                       		sub.w	d1,d0
00013C2C 0C40 0280                  		cmpi.w	#$280,d0
00013C30 6200 C864                  		bhi.w	DeleteObject
00013C34 6000 C824                  		bra.w	DisplaySprite
00013C38                            ; ===========================================================================
00013C38 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00013C3A 0000                       		dc.w Obj59_Platform-Obj59_Index
00013C3C 0000                       		dc.w Obj59_Action-Obj59_Index
00013C3E 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00013C40                            
00013C40 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00013C42                            
00013C42 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00013C44 2001                       		dc.b $20, 1
00013C46 3401                       		dc.b $34, 1
00013C48 1003                       		dc.b $10, 3
00013C4A 2003                       		dc.b $20, 3
00013C4C 3403                       		dc.b $34, 3
00013C4E 1401                       		dc.b $14, 1
00013C50 2401                       		dc.b $24, 1
00013C52 2C01                       		dc.b $2C, 1
00013C54 1403                       		dc.b $14, 3
00013C56 2403                       		dc.b $24, 3
00013C58 2C03                       		dc.b $2C, 3
00013C5A 2005                       		dc.b $20, 5
00013C5C 2007                       		dc.b $20, 7
00013C5E 3009                       		dc.b $30, 9
00013C60                            ; ===========================================================================
00013C60                            
00013C60                            Obj59_Main:				; XREF: Obj59_Index
00013C60 5428 0024                  		addq.b	#2,$24(a0)
00013C64 7000                       		moveq	#0,d0
00013C66 1028 0028                  		move.b	$28(a0),d0
00013C6A 6A00                       		bpl.s	Obj59_Main2
00013C6C 5828 0024                  		addq.b	#4,$24(a0)
00013C70 0240 007F                  		andi.w	#$7F,d0
00013C74 C0FC 0006                  		mulu.w	#6,d0
00013C78 3140 003C                  		move.w	d0,$3C(a0)
00013C7C 3140 003E                  		move.w	d0,$3E(a0)
00013C80 588F                       		addq.l	#4,sp
00013C82 4E75                       		rts	
00013C84                            ; ===========================================================================
00013C84                            
00013C84                            Obj59_Main2:
00013C84 E648                       		lsr.w	#3,d0
00013C86 0240 001E                  		andi.w	#$1E,d0
00013C8A 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00013C8E 115A 0019                  		move.b	(a2)+,$19(a0)
00013C92 115A 001A                  		move.b	(a2)+,$1A(a0)
00013C96 7000                       		moveq	#0,d0
00013C98 1028 0028                  		move.b	$28(a0),d0
00013C9C D040                       		add.w	d0,d0
00013C9E 0240 001E                  		andi.w	#$1E,d0
00013CA2 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00013CA6 101A                       		move.b	(a2)+,d0
00013CA8 E548                       		lsl.w	#2,d0
00013CAA 3140 003C                  		move.w	d0,$3C(a0)
00013CAE 115A 0028                  		move.b	(a2)+,$28(a0)
00013CB2 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00013CBA 317C 4000 0002             		move.w	#$4000,2(a0)
00013CC0 117C 0004 0001             		move.b	#4,1(a0)
00013CC6 117C 0004 0018             		move.b	#4,$18(a0)
00013CCC 3168 0008 0032             		move.w	8(a0),$32(a0)
00013CD2 3168 000C 0030             		move.w	$C(a0),$30(a0)
00013CD8                            
00013CD8                            Obj59_Platform:				; XREF: Obj59_Index
00013CD8 7200                       		moveq	#0,d1
00013CDA 1228 0019                  		move.b	$19(a0),d1
00013CDE 4EB9 0000 9F78             		jsr	(PlatformObject).l
00013CE4 6000 0000                  		bra.w	Obj59_Types
00013CE8                            ; ===========================================================================
00013CE8                            
00013CE8                            Obj59_Action:				; XREF: Obj59_Index
00013CE8 7200                       		moveq	#0,d1
00013CEA 1228 0019                  		move.b	$19(a0),d1
00013CEE 4EB9 0000 A0EC             		jsr	(ExitPlatform).l
00013CF4 3F28 0008                  		move.w	8(a0),-(sp)
00013CF8 6100 0000                  		bsr.w	Obj59_Types
00013CFC 341F                       		move.w	(sp)+,d2
00013CFE 4A10                       		tst.b	0(a0)
00013D00 6700                       		beq.s	locret_10BD4
00013D02 4EF9 0000 A656             		jmp	(MvSonicOnPtfm2).l
00013D08                            ; ===========================================================================
00013D08                            
00013D08                            locret_10BD4:
00013D08 4E75                       		rts	
00013D0A                            ; ===========================================================================
00013D0A                            
00013D0A                            Obj59_Types:
00013D0A 7000                       		moveq	#0,d0
00013D0C 1028 0028                  		move.b	$28(a0),d0
00013D10 0240 000F                  		andi.w	#$F,d0
00013D14 D040                       		add.w	d0,d0
00013D16 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00013D1A 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00013D1E                            ; ===========================================================================
00013D1E 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00013D22 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00013D26 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00013D2A 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00013D2E 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00013D32                            ; ===========================================================================
00013D32                            
00013D32                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00013D32 4E75                       		rts	
00013D34                            ; ===========================================================================
00013D34                            
00013D34                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00013D34 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00013D3A 6600                       		bne.s	locret_10C0C
00013D3C 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00013D40                            
00013D40                            locret_10C0C:
00013D40 4E75                       		rts	
00013D42                            ; ===========================================================================
00013D42                            
00013D42                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00013D42 6100 0000                  		bsr.w	Obj59_Move
00013D46 3028 0034                  		move.w	$34(a0),d0
00013D4A 4440                       		neg.w	d0
00013D4C D068 0030                  		add.w	$30(a0),d0
00013D50 3140 000C                  		move.w	d0,$C(a0)
00013D54 4E75                       		rts	
00013D56                            ; ===========================================================================
00013D56                            
00013D56                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00013D56 6100 0000                  		bsr.w	Obj59_Move
00013D5A 3028 0034                  		move.w	$34(a0),d0
00013D5E D068 0030                  		add.w	$30(a0),d0
00013D62 3140 000C                  		move.w	d0,$C(a0)
00013D66 4E75                       		rts	
00013D68                            ; ===========================================================================
00013D68                            
00013D68                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00013D68 6100 0000                  		bsr.w	Obj59_Move
00013D6C 3028 0034                  		move.w	$34(a0),d0
00013D70 E240                       		asr.w	#1,d0
00013D72 4440                       		neg.w	d0
00013D74 D068 0030                  		add.w	$30(a0),d0
00013D78 3140 000C                  		move.w	d0,$C(a0)
00013D7C 3028 0034                  		move.w	$34(a0),d0
00013D80 D068 0032                  		add.w	$32(a0),d0
00013D84 3140 0008                  		move.w	d0,8(a0)
00013D88 4E75                       		rts	
00013D8A                            ; ===========================================================================
00013D8A                            
00013D8A                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00013D8A 6100 0000                  		bsr.w	Obj59_Move
00013D8E 3028 0034                  		move.w	$34(a0),d0
00013D92 E240                       		asr.w	#1,d0
00013D94 D068 0030                  		add.w	$30(a0),d0
00013D98 3140 000C                  		move.w	d0,$C(a0)
00013D9C 3028 0034                  		move.w	$34(a0),d0
00013DA0 4440                       		neg.w	d0
00013DA2 D068 0032                  		add.w	$32(a0),d0
00013DA6 3140 0008                  		move.w	d0,8(a0)
00013DAA 4E75                       		rts	
00013DAC                            ; ===========================================================================
00013DAC                            
00013DAC                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00013DAC 6100 0000                  		bsr.w	Obj59_Move
00013DB0 3028 0034                  		move.w	$34(a0),d0
00013DB4 4440                       		neg.w	d0
00013DB6 D068 0030                  		add.w	$30(a0),d0
00013DBA 3140 000C                  		move.w	d0,$C(a0)
00013DBE 4A28 0028                  		tst.b	$28(a0)
00013DC2 6700 0000                  		beq.w	loc_10C94
00013DC6 4E75                       		rts	
00013DC8                            ; ===========================================================================
00013DC8                            
00013DC8                            loc_10C94:
00013DC8 0828 0003 0022             		btst	#3,$22(a0)
00013DCE 6700                       		beq.s	Obj59_Delete
00013DD0 08E9 0001 0022             		bset	#1,$22(a1)
00013DD6 08A9 0003 0022             		bclr	#3,$22(a1)
00013DDC 137C 0002 0024             		move.b	#2,$24(a1)
00013DE2                            
00013DE2                            Obj59_Delete:
00013DE2 6000 C6B2                  		bra.w	DeleteObject
00013DE6                            
00013DE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DE6                            
00013DE6                            
00013DE6                            Obj59_Move:				; XREF: Obj59_Type02; et al
00013DE6 3028 0038                  		move.w	$38(a0),d0
00013DEA 4A28 003A                  		tst.b	$3A(a0)
00013DEE 6600                       		bne.s	loc_10CC8
00013DF0 0C40 0800                  		cmpi.w	#$800,d0
00013DF4 6400                       		bcc.s	loc_10CD0
00013DF6 0640 0010                  		addi.w	#$10,d0
00013DFA 6000                       		bra.s	loc_10CD0
00013DFC                            ; ===========================================================================
00013DFC                            
00013DFC                            loc_10CC8:
00013DFC 4A40                       		tst.w	d0
00013DFE 6700                       		beq.s	loc_10CD0
00013E00 0440 0010                  		subi.w	#$10,d0
00013E04                            
00013E04                            loc_10CD0:
00013E04 3140 0038                  		move.w	d0,$38(a0)
00013E08 48C0                       		ext.l	d0
00013E0A E180                       		asl.l	#8,d0
00013E0C D0A8 0034                  		add.l	$34(a0),d0
00013E10 2140 0034                  		move.l	d0,$34(a0)
00013E14 4840                       		swap	d0
00013E16 3428 003C                  		move.w	$3C(a0),d2
00013E1A B042                       		cmp.w	d2,d0
00013E1C 6300                       		bls.s	loc_10CF0
00013E1E 117C 0001 003A             		move.b	#1,$3A(a0)
00013E24                            
00013E24                            loc_10CF0:
00013E24 D442                       		add.w	d2,d2
00013E26 B042                       		cmp.w	d2,d0
00013E28 6600                       		bne.s	locret_10CFA
00013E2A 4228 0028                  		clr.b	$28(a0)
00013E2E                            
00013E2E                            locret_10CFA:
00013E2E 4E75                       		rts	
00013E30                            ; End of function Obj59_Move
00013E30                            
00013E30                            ; ===========================================================================
00013E30                            
00013E30                            Obj59_MakeMulti:			; XREF: Obj59_Index
00013E30 5368 003C                  		subq.w	#1,$3C(a0)
00013E34 6600                       		bne.s	Obj59_ChkDel
00013E36 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00013E3C 6100 CAA2                  		bsr.w	SingleObjLoad
00013E40 6600                       		bne.s	Obj59_ChkDel
00013E42 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00013E46 3368 0008 0008             		move.w	8(a0),8(a1)
00013E4C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013E52 137C 000E 0028             		move.b	#$E,$28(a1)
00013E58                            
00013E58                            Obj59_ChkDel:
00013E58 588F                       		addq.l	#4,sp
00013E5A 3028 0008                  		move.w	8(a0),d0
00013E5E 0240 FF80                  		andi.w	#$FF80,d0
00013E62 3238 F700                  		move.w	($FFFFF700).w,d1
00013E66 0441 0080                  		subi.w	#$80,d1
00013E6A 0241 FF80                  		andi.w	#$FF80,d1
00013E6E 9041                       		sub.w	d1,d0
00013E70 0C40 0280                  		cmpi.w	#$280,d0
00013E74 6200 C620                  		bhi.w	DeleteObject
00013E78 4E75                       		rts	
00013E7A                            ; ===========================================================================
00013E7A                            ; ---------------------------------------------------------------------------
00013E7A                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00013E7A                            ; ---------------------------------------------------------------------------
00013E7A                            Map_obj59:
00013E7A                            	include "_maps\obj59.asm"
00013E7A                            ; ---------------------------------------------------------------------------
00013E7A                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00013E7A                            ; ---------------------------------------------------------------------------
00013E7A 0000                       		dc.w byte_10D4A-Map_obj59
00013E7C 03                         byte_10D4A:	dc.b 3
00013E7D F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00013E82 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00013E87 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00013E8C                            		even
00013E8C                            		even
00013E8C                            
00013E8C                            ; ===========================================================================
00013E8C                            ; ---------------------------------------------------------------------------
00013E8C                            ; Object 5A - platforms	moving in circles (SLZ)
00013E8C                            ; ---------------------------------------------------------------------------
00013E8C                            
00013E8C                            Obj5A:					; XREF: Obj_Index
00013E8C 7000                       		moveq	#0,d0
00013E8E 1028 0024                  		move.b	$24(a0),d0
00013E92 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00013E96 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00013E9A 3028 0032                  		move.w	$32(a0),d0
00013E9E 0240 FF80                  		andi.w	#$FF80,d0
00013EA2 3238 F700                  		move.w	($FFFFF700).w,d1
00013EA6 0441 0080                  		subi.w	#$80,d1
00013EAA 0241 FF80                  		andi.w	#$FF80,d1
00013EAE 9041                       		sub.w	d1,d0
00013EB0 0C40 0280                  		cmpi.w	#$280,d0
00013EB4 6200 C5E0                  		bhi.w	DeleteObject
00013EB8 6000 C5A0                  		bra.w	DisplaySprite
00013EBC                            ; ===========================================================================
00013EBC 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00013EBE 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00013EC0 0000                       		dc.w Obj5A_Action-Obj5A_Index
00013EC2                            ; ===========================================================================
00013EC2                            
00013EC2                            Obj5A_Main:				; XREF: Obj5A_Index
00013EC2 5428 0024                  		addq.b	#2,$24(a0)
00013EC6 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00013ECE 317C 4000 0002             		move.w	#$4000,2(a0)
00013ED4 117C 0004 0001             		move.b	#4,1(a0)
00013EDA 117C 0004 0018             		move.b	#4,$18(a0)
00013EE0 117C 0018 0019             		move.b	#$18,$19(a0)
00013EE6 3168 0008 0032             		move.w	8(a0),$32(a0)
00013EEC 3168 000C 0030             		move.w	$C(a0),$30(a0)
00013EF2                            
00013EF2                            Obj5A_Platform:				; XREF: Obj5A_Index
00013EF2 7200                       		moveq	#0,d1
00013EF4 1228 0019                  		move.b	$19(a0),d1
00013EF8 4EB9 0000 9F78             		jsr	(PlatformObject).l
00013EFE 6000 0000                  		bra.w	Obj5A_Types
00013F02                            ; ===========================================================================
00013F02                            
00013F02                            Obj5A_Action:				; XREF: Obj5A_Index
00013F02 7200                       		moveq	#0,d1
00013F04 1228 0019                  		move.b	$19(a0),d1
00013F08 4EB9 0000 A0EC             		jsr	(ExitPlatform).l
00013F0E 3F28 0008                  		move.w	8(a0),-(sp)
00013F12 6100 0000                  		bsr.w	Obj5A_Types
00013F16 341F                       		move.w	(sp)+,d2
00013F18 4EF9 0000 A656             		jmp	(MvSonicOnPtfm2).l
00013F1E                            ; ===========================================================================
00013F1E                            
00013F1E                            Obj5A_Types:
00013F1E 7000                       		moveq	#0,d0
00013F20 1028 0028                  		move.b	$28(a0),d0
00013F24 0240 000C                  		andi.w	#$C,d0
00013F28 E248                       		lsr.w	#1,d0
00013F2A 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00013F2E 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00013F32                            ; ===========================================================================
00013F32 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00013F34 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00013F36                            ; ===========================================================================
00013F36                            
00013F36                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00013F36 1238 FE80                  		move.b	($FFFFFE80).w,d1
00013F3A 0401 0050                  		subi.b	#$50,d1
00013F3E 4881                       		ext.w	d1
00013F40 1438 FE84                  		move.b	($FFFFFE84).w,d2
00013F44 0402 0050                  		subi.b	#$50,d2
00013F48 4882                       		ext.w	d2
00013F4A 0828 0000 0028             		btst	#0,$28(a0)
00013F50 6700                       		beq.s	loc_10E24
00013F52 4441                       		neg.w	d1
00013F54 4442                       		neg.w	d2
00013F56                            
00013F56                            loc_10E24:
00013F56 0828 0001 0028             		btst	#1,$28(a0)
00013F5C 6700                       		beq.s	loc_10E30
00013F5E 4441                       		neg.w	d1
00013F60 C342                       		exg	d1,d2
00013F62                            
00013F62                            loc_10E30:
00013F62 D268 0032                  		add.w	$32(a0),d1
00013F66 3141 0008                  		move.w	d1,8(a0)
00013F6A D468 0030                  		add.w	$30(a0),d2
00013F6E 3142 000C                  		move.w	d2,$C(a0)
00013F72 4E75                       		rts	
00013F74                            ; ===========================================================================
00013F74                            
00013F74                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00013F74 1238 FE80                  		move.b	($FFFFFE80).w,d1
00013F78 0401 0050                  		subi.b	#$50,d1
00013F7C 4881                       		ext.w	d1
00013F7E 1438 FE84                  		move.b	($FFFFFE84).w,d2
00013F82 0402 0050                  		subi.b	#$50,d2
00013F86 4882                       		ext.w	d2
00013F88 0828 0000 0028             		btst	#0,$28(a0)
00013F8E 6700                       		beq.s	loc_10E62
00013F90 4441                       		neg.w	d1
00013F92 4442                       		neg.w	d2
00013F94                            
00013F94                            loc_10E62:
00013F94 0828 0001 0028             		btst	#1,$28(a0)
00013F9A 6700                       		beq.s	loc_10E6E
00013F9C 4441                       		neg.w	d1
00013F9E C342                       		exg	d1,d2
00013FA0                            
00013FA0                            loc_10E6E:
00013FA0 4441                       		neg.w	d1
00013FA2 D268 0032                  		add.w	$32(a0),d1
00013FA6 3141 0008                  		move.w	d1,8(a0)
00013FAA D468 0030                  		add.w	$30(a0),d2
00013FAE 3142 000C                  		move.w	d2,$C(a0)
00013FB2 4E75                       		rts	
00013FB4                            ; ===========================================================================
00013FB4                            ; ---------------------------------------------------------------------------
00013FB4                            ; Sprite mappings - platforms that move	in circles (SLZ)
00013FB4                            ; ---------------------------------------------------------------------------
00013FB4                            Map_obj5A:
00013FB4                            	include "_maps\obj5A.asm"
00013FB4                            ; ---------------------------------------------------------------------------
00013FB4                            ; Sprite mappings - platforms that move	in circles (SLZ)
00013FB4                            ; ---------------------------------------------------------------------------
00013FB4 0000                       		dc.w byte_10E84-Map_obj5A
00013FB6 02                         byte_10E84:	dc.b 2
00013FB7 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00013FBC F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00013FC2 00                         		even
00013FC2 00                         		even
00013FC2                            
00013FC2                            ; ===========================================================================
00013FC2                            ; ---------------------------------------------------------------------------
00013FC2                            ; Object 5B - blocks that form a staircase (SLZ)
00013FC2                            ; ---------------------------------------------------------------------------
00013FC2                            
00013FC2                            Obj5B:					; XREF: Obj_Index
00013FC2 7000                       		moveq	#0,d0
00013FC4 1028 0024                  		move.b	$24(a0),d0
00013FC8 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00013FCC 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00013FD0 3028 0030                  		move.w	$30(a0),d0
00013FD4 0240 FF80                  		andi.w	#$FF80,d0
00013FD8 3238 F700                  		move.w	($FFFFF700).w,d1
00013FDC 0441 0080                  		subi.w	#$80,d1
00013FE0 0241 FF80                  		andi.w	#$FF80,d1
00013FE4 9041                       		sub.w	d1,d0
00013FE6 0C40 0280                  		cmpi.w	#$280,d0
00013FEA 6200 C4AA                  		bhi.w	DeleteObject
00013FEE 6000 C46A                  		bra.w	DisplaySprite
00013FF2                            ; ===========================================================================
00013FF2 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00013FF4 0000                       		dc.w Obj5B_Move-Obj5B_Index
00013FF6 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00013FF8                            ; ===========================================================================
00013FF8                            
00013FF8                            Obj5B_Main:				; XREF: Obj5B_Index
00013FF8 5428 0024                  		addq.b	#2,$24(a0)
00013FFC 7638                       		moveq	#$38,d3
00013FFE 7801                       		moveq	#1,d4
00014000 0828 0000 0022             		btst	#0,$22(a0)
00014006 6700                       		beq.s	loc_10EDA
00014008 763B                       		moveq	#$3B,d3
0001400A 78FF                       		moveq	#-1,d4
0001400C                            
0001400C                            loc_10EDA:
0001400C 3428 0008                  		move.w	8(a0),d2
00014010 2248                       		movea.l	a0,a1
00014012 7203                       		moveq	#3,d1
00014014 6000                       		bra.s	Obj5B_MakeBlocks
00014016                            ; ===========================================================================
00014016                            
00014016                            Obj5B_Loop:
00014016 6100 C8DE                  		bsr.w	SingleObjLoad2
0001401A 6600 0000                  		bne.w	Obj5B_Move
0001401E 137C 0004 0024             		move.b	#4,$24(a1)
00014024                            
00014024                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00014024 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00014028 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00014030 337C 4000 0002             		move.w	#$4000,2(a1)
00014036 137C 0004 0001             		move.b	#4,1(a1)
0001403C 137C 0003 0018             		move.b	#3,$18(a1)
00014042 137C 0010 0019             		move.b	#$10,$19(a1)
00014048 1368 0028 0028             		move.b	$28(a0),$28(a1)
0001404E 3342 0008                  		move.w	d2,8(a1)
00014052 3368 000C 000C             		move.w	$C(a0),$C(a1)
00014058 3368 0008 0030             		move.w	8(a0),$30(a1)
0001405E 3369 000C 0032             		move.w	$C(a1),$32(a1)
00014064 0642 0020                  		addi.w	#$20,d2
00014068 1343 0037                  		move.b	d3,$37(a1)
0001406C 2348 003C                  		move.l	a0,$3C(a1)
00014070 D604                       		add.b	d4,d3
00014072 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00014076                            
00014076                            Obj5B_Move:				; XREF: Obj5B_Index
00014076 7000                       		moveq	#0,d0
00014078 1028 0028                  		move.b	$28(a0),d0
0001407C 0240 0007                  		andi.w	#7,d0
00014080 D040                       		add.w	d0,d0
00014082 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00014086 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
0001408A                            
0001408A                            Obj5B_Solid:				; XREF: Obj5B_Index
0001408A 2468 003C                  		movea.l	$3C(a0),a2
0001408E 7000                       		moveq	#0,d0
00014090 1028 0037                  		move.b	$37(a0),d0
00014094 1032 0000                  		move.b	(a2,d0.w),d0
00014098 D068 0032                  		add.w	$32(a0),d0
0001409C 3140 000C                  		move.w	d0,$C(a0)
000140A0 7200                       		moveq	#0,d1
000140A2 1228 0019                  		move.b	$19(a0),d1
000140A6 0641 000B                  		addi.w	#$B,d1
000140AA 343C 0010                  		move.w	#$10,d2
000140AE 363C 0011                  		move.w	#$11,d3
000140B2 3828 0008                  		move.w	8(a0),d4
000140B6 6100 E998                  		bsr.w	SolidObject
000140BA 4A04                       		tst.b	d4
000140BC 6A00                       		bpl.s	loc_10F92
000140BE 1544 0036                  		move.b	d4,$36(a2)
000140C2                            
000140C2                            loc_10F92:
000140C2 0828 0003 0022             		btst	#3,$22(a0)
000140C8 6700                       		beq.s	locret_10FA0
000140CA 157C 0001 0036             		move.b	#1,$36(a2)
000140D0                            
000140D0                            locret_10FA0:
000140D0 4E75                       		rts	
000140D2                            ; ===========================================================================
000140D2 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000140D4 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000140D6 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
000140D8 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000140DA                            ; ===========================================================================
000140DA                            
000140DA                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
000140DA 4A68 0034                  		tst.w	$34(a0)
000140DE 6600                       		bne.s	loc_10FC0
000140E0 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000140E6 6600                       		bne.s	locret_10FBE
000140E8 317C 001E 0034             		move.w	#$1E,$34(a0)
000140EE                            
000140EE                            locret_10FBE:
000140EE 4E75                       		rts	
000140F0                            ; ===========================================================================
000140F0                            
000140F0                            loc_10FC0:
000140F0 5368 0034                  		subq.w	#1,$34(a0)
000140F4 66F8                       		bne.s	locret_10FBE
000140F6 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000140FA 4E75                       		rts	
000140FC                            ; ===========================================================================
000140FC                            
000140FC                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
000140FC 4A68 0034                  		tst.w	$34(a0)
00014100 6600                       		bne.s	loc_10FE0
00014102 4A28 0036                  		tst.b	$36(a0)
00014106 6A00                       		bpl.s	locret_10FDE
00014108 317C 003C 0034             		move.w	#$3C,$34(a0)
0001410E                            
0001410E                            locret_10FDE:
0001410E 4E75                       		rts	
00014110                            ; ===========================================================================
00014110                            
00014110                            loc_10FE0:
00014110 5368 0034                  		subq.w	#1,$34(a0)
00014114 6600                       		bne.s	loc_10FEC
00014116 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001411A 4E75                       		rts	
0001411C                            ; ===========================================================================
0001411C                            
0001411C                            loc_10FEC:
0001411C 43E8 0038                  		lea	$38(a0),a1
00014120 3028 0034                  		move.w	$34(a0),d0
00014124 E408                       		lsr.b	#2,d0
00014126 0200 0001                  		andi.b	#1,d0
0001412A 12C0                       		move.b	d0,(a1)+
0001412C 0A00 0001                  		eori.b	#1,d0
00014130 12C0                       		move.b	d0,(a1)+
00014132 0A00 0001                  		eori.b	#1,d0
00014136 12C0                       		move.b	d0,(a1)+
00014138 0A00 0001                  		eori.b	#1,d0
0001413C 12C0                       		move.b	d0,(a1)+
0001413E 4E75                       		rts	
00014140                            ; ===========================================================================
00014140                            
00014140                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00014140 43E8 0038                  		lea	$38(a0),a1
00014144 0C11 0080                  		cmpi.b	#$80,(a1)
00014148 6700                       		beq.s	locret_11038
0001414A 5211                       		addq.b	#1,(a1)
0001414C 7200                       		moveq	#0,d1
0001414E 1219                       		move.b	(a1)+,d1
00014150 4841                       		swap	d1
00014152 E289                       		lsr.l	#1,d1
00014154 2401                       		move.l	d1,d2
00014156 E289                       		lsr.l	#1,d1
00014158 2601                       		move.l	d1,d3
0001415A D682                       		add.l	d2,d3
0001415C 4841                       		swap	d1
0001415E 4842                       		swap	d2
00014160 4843                       		swap	d3
00014162 12C3                       		move.b	d3,(a1)+
00014164 12C2                       		move.b	d2,(a1)+
00014166 12C1                       		move.b	d1,(a1)+
00014168                            
00014168                            locret_11038:
00014168 4E75                       		rts	
0001416A 4E75                       		rts	
0001416C                            ; ===========================================================================
0001416C                            ; ---------------------------------------------------------------------------
0001416C                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001416C                            ; ---------------------------------------------------------------------------
0001416C                            Map_obj5B:
0001416C                            	include "_maps\obj5B.asm"
0001416C                            ; ---------------------------------------------------------------------------
0001416C                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001416C                            ; ---------------------------------------------------------------------------
0001416C 0000                       		dc.w byte_1103E-Map_obj5B
0001416E 01                         byte_1103E:	dc.b 1
0001416F F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00014174                            		even
00014174                            		even
00014174                            
00014174                            ; ===========================================================================
00014174                            ; ---------------------------------------------------------------------------
00014174                            ; Object 5C - metal girders in foreground (SLZ)
00014174                            ; ---------------------------------------------------------------------------
00014174                            
00014174                            Obj5C:					; XREF: Obj_Index
00014174 7000                       		moveq	#0,d0
00014176 1028 0024                  		move.b	$24(a0),d0
0001417A 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
0001417E 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00014182                            ; ===========================================================================
00014182 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00014184 0000                       		dc.w Obj5C_Display-Obj5C_Index
00014186                            ; ===========================================================================
00014186                            
00014186                            Obj5C_Main:				; XREF: Obj5C_Index
00014186 5428 0024                  		addq.b	#2,$24(a0)
0001418A 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00014192 317C 83CC 0002             		move.w	#$83CC,2(a0)
00014198 117C 0010 0019             		move.b	#$10,$19(a0)
0001419E                            
0001419E                            Obj5C_Display:				; XREF: Obj5C_Index
0001419E 2238 F700                  		move.l	($FFFFF700).w,d1
000141A2 D281                       		add.l	d1,d1
000141A4 4841                       		swap	d1
000141A6 4441                       		neg.w	d1
000141A8 3141 0008                  		move.w	d1,8(a0)
000141AC 2238 F704                  		move.l	($FFFFF704).w,d1
000141B0 D281                       		add.l	d1,d1
000141B2 4841                       		swap	d1
000141B4 0241 003F                  		andi.w	#$3F,d1
000141B8 4441                       		neg.w	d1
000141BA 0641 0100                  		addi.w	#$100,d1
000141BE 3141 000A                  		move.w	d1,$A(a0)
000141C2 6000 C296                  		bra.w	DisplaySprite
000141C6                            ; ===========================================================================
000141C6                            ; ---------------------------------------------------------------------------
000141C6                            ; Sprite mappings - metal girders in foreground	(SLZ)
000141C6                            ; ---------------------------------------------------------------------------
000141C6                            Map_obj5C:
000141C6                            	include "_maps\obj5C.asm"
000141C6                            ; ---------------------------------------------------------------------------
000141C6                            ; Sprite mappings - metal girders in foreground	(SLZ)
000141C6                            ; ---------------------------------------------------------------------------
000141C6 0000                       		dc.w byte_11098-Map_obj5C
000141C8 09                         byte_11098:	dc.b 9
000141C9 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000141CE A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000141D3 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000141D8 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000141DD 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000141E2 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000141E7 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000141EC 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000141F1 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000141F6                            		even
000141F6                            		even
000141F6                            
000141F6                            ; ===========================================================================
000141F6                            ; ---------------------------------------------------------------------------
000141F6                            ; Object 1B - water surface (LZ)
000141F6                            ; ---------------------------------------------------------------------------
000141F6                            
000141F6                            Obj1B:					; XREF: Obj_Index
000141F6 7000                       		moveq	#0,d0
000141F8 1028 0024                  		move.b	$24(a0),d0
000141FC 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00014200 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00014204                            ; ===========================================================================
00014204 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00014206 0000                       		dc.w Obj1B_Action-Obj1B_Index
00014208                            ; ===========================================================================
00014208                            
00014208                            Obj1B_Main:				; XREF: Obj1B_Index
00014208 5428 0024                  		addq.b	#2,$24(a0)
0001420C 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00014214 317C C300 0002             		move.w	#$C300,2(a0)
0001421A 117C 0004 0001             		move.b	#4,1(a0)
00014220 117C 0080 0019             		move.b	#$80,$19(a0)
00014226 3168 0008 0030             		move.w	8(a0),$30(a0)
0001422C                            
0001422C                            Obj1B_Action:				; XREF: Obj1B_Index
0001422C 3238 F700                  		move.w	($FFFFF700).w,d1
00014230 0241 FFE0                  		andi.w	#$FFE0,d1
00014234 D268 0030                  		add.w	$30(a0),d1
00014238 0838 0000 FE05             		btst	#0,($FFFFFE05).w
0001423E 6700                       		beq.s	loc_11114
00014240 0641 0020                  		addi.w	#$20,d1
00014244                            
00014244                            loc_11114:
00014244 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00014248 3238 F646                  		move.w	($FFFFF646).w,d1
0001424C 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00014250 4A28 0032                  		tst.b	$32(a0)
00014254 6600                       		bne.s	Obj1B_Animate
00014256 0838 0007 F605             		btst	#iStart,(Joypad|Press)	; is Start button pressed?
0001425C 6700                       		beq.s	loc_1114A		; if not, branch
0001425E 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00014262 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00014268 6000                       		bra.s	Obj1B_Display
0001426A                            ; ===========================================================================
0001426A                            
0001426A                            Obj1B_Animate:				; XREF: loc_11114
0001426A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001426E 6600                       		bne.s	Obj1B_Display	; if yes, branch
00014270 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00014276 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
0001427A                            
0001427A                            loc_1114A:				; XREF: loc_11114
0001427A 5328 001E                  		subq.b	#1,$1E(a0)
0001427E 6A00                       		bpl.s	Obj1B_Display
00014280 117C 0007 001E             		move.b	#7,$1E(a0)
00014286 5228 001A                  		addq.b	#1,$1A(a0)
0001428A 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00014290 6500                       		bcs.s	Obj1B_Display
00014292 117C 0000 001A             		move.b	#0,$1A(a0)
00014298                            
00014298                            Obj1B_Display:
00014298 6000 C1C0                  		bra.w	DisplaySprite
0001429C                            ; ===========================================================================
0001429C                            ; ---------------------------------------------------------------------------
0001429C                            ; Sprite mappings - water surface (LZ)
0001429C                            ; ---------------------------------------------------------------------------
0001429C                            Map_obj1B:
0001429C                            	include "_maps\obj1B.asm"
0001429C                            ; ---------------------------------------------------------------------------
0001429C                            ; Sprite mappings - water surface (LZ)
0001429C                            ; ---------------------------------------------------------------------------
0001429C 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000142A0 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000142A4 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000142A8 03                         byte_11178:	dc.b 3
000142A9 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000142AE FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000142B3 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000142B8 03                         byte_11188:	dc.b 3
000142B9 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000142BE FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000142C3 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000142C8 03                         byte_11198:	dc.b 3
000142C9 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000142CE FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000142D3 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000142D8 06                         byte_111A8:	dc.b 6
000142D9 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000142DE FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
000142E3 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000142E8 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
000142ED FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000142F2 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
000142F7 06                         byte_111C7:	dc.b 6
000142F8 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000142FD FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00014302 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00014307 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
0001430C FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00014311 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00014316 06                         byte_111E6:	dc.b 6
00014317 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001431C FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00014321 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00014326 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
0001432B FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00014330 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00014336 00                         		even
00014336 00                         		even
00014336                            
00014336                            ; ===========================================================================
00014336                            ; ---------------------------------------------------------------------------
00014336                            ; Object 0B - pole that	breaks (LZ)
00014336                            ; ---------------------------------------------------------------------------
00014336                            
00014336                            Obj0B:					; XREF: Obj_Index
00014336 7000                       		moveq	#0,d0
00014338 1028 0024                  		move.b	$24(a0),d0
0001433C 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00014340 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00014344                            ; ===========================================================================
00014344 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00014346 0000                       		dc.w Obj0B_Action-Obj0B_Index
00014348 0000                       		dc.w Obj0B_Display-Obj0B_Index
0001434A                            ; ===========================================================================
0001434A                            
0001434A                            Obj0B_Main:				; XREF: Obj0B_Index
0001434A 5428 0024                  		addq.b	#2,$24(a0)
0001434E 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00014356 317C 43DE 0002             		move.w	#$43DE,2(a0)
0001435C 117C 0004 0001             		move.b	#4,1(a0)
00014362 117C 0008 0019             		move.b	#8,$19(a0)
00014368 117C 0004 0018             		move.b	#4,$18(a0)
0001436E 117C 00E1 0020             		move.b	#$E1,$20(a0)
00014374 7000                       		moveq	#0,d0
00014376 1028 0028                  		move.b	$28(a0),d0	; get object type
0001437A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001437E 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00014382                            
00014382                            Obj0B_Action:				; XREF: Obj0B_Index
00014382 4A28 0032                  		tst.b	$32(a0)
00014386 6700                       		beq.s	Obj0B_Grab
00014388 4A68 0030                  		tst.w	$30(a0)
0001438C 6700                       		beq.s	Obj0B_MoveUp
0001438E 5368 0030                  		subq.w	#1,$30(a0)
00014392 6600                       		bne.s	Obj0B_MoveUp
00014394 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
0001439A 6000                       		bra.s	Obj0B_Release
0001439C                            ; ===========================================================================
0001439C                            
0001439C                            Obj0B_MoveUp:				; XREF: Obj0B_Action
0001439C 43F8 D000                  		lea	($FFFFD000).w,a1
000143A0 3028 000C                  		move.w	$C(a0),d0
000143A4 0440 0018                  		subi.w	#$18,d0
000143A8 0838 0000 F604             		btst	#iUp,(Joypad|Held) ; check if "up" is pressed
000143AE 6700                       		beq.s	Obj0B_MoveDown
000143B0 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000143B4 B069 000C                  		cmp.w	$C(a1),d0
000143B8 6500                       		bcs.s	Obj0B_MoveDown
000143BA 3340 000C                  		move.w	d0,$C(a1)
000143BE                            
000143BE                            Obj0B_MoveDown:
000143BE 0640 0024                  		addi.w	#$24,d0
000143C2 0838 0001 F604             		btst	#iDown,(Joypad|Held) ; check if "down" is pressed
000143C8 6700                       		beq.s	Obj0B_LetGo
000143CA 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000143CE B069 000C                  		cmp.w	$C(a1),d0
000143D2 6400                       		bcc.s	Obj0B_LetGo
000143D4 3340 000C                  		move.w	d0,$C(a1)
000143D8                            
000143D8                            Obj0B_LetGo:
000143D8 1038 F603 0200 0070        		tpress	A+B+C,(SonicControl)
000143E0 6700                       		beq.s	Obj0B_Display
000143E2                            
000143E2                            Obj0B_Release:				; XREF: Obj0B_Action
000143E2 4228 0020                  		clr.b	$20(a0)
000143E6 5428 0024                  		addq.b	#2,$24(a0)
000143EA 4238 F7C8                  		clr.b	($FFFFF7C8).w
000143EE 4238 F7C9                  		clr.b	($FFFFF7C9).w
000143F2 4228 0032                  		clr.b	$32(a0)
000143F6 6000                       		bra.s	Obj0B_Display
000143F8                            ; ===========================================================================
000143F8                            
000143F8                            Obj0B_Grab:				; XREF: Obj0B_Action
000143F8 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
000143FC 6700                       		beq.s	Obj0B_Display	; if not, branch
000143FE 43F8 D000                  		lea	($FFFFD000).w,a1; load Sonic object
00014402 3028 0008                  		move.w	8(a0),d0
00014406 0640 0014                  		addi.w	#$14,d0
0001440A B069 0008                  		cmp.w	8(a1),d0
0001440E 6400                       		bcc.s	Obj0B_Display
00014410 4228 0021                  		clr.b	$21(a0)
00014414 0C29 0004 0024             		cmpi.b	#4,$24(a1)
0001441A 6400                       		bcc.s	Obj0B_Display
0001441C 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00014420 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00014424 3028 0008                  		move.w	8(a0),d0
00014428 0640 0014                  		addi.w	#$14,d0
0001442C 3340 0008                  		move.w	d0,8(a1)
00014430 08A9 0000 0022             		bclr	#0,$22(a1)
00014436 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
0001443C 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00014442 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00014448 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
0001444E                            
0001444E                            Obj0B_Display:				; XREF: Obj0B_Index
0001444E 6000 E320                  		bra.w	MarkObjGone
00014452                            ; ===========================================================================
00014452                            ; ---------------------------------------------------------------------------
00014452                            ; Sprite mappings - pole that breaks (LZ)
00014452                            ; ---------------------------------------------------------------------------
00014452                            Map_obj0B:
00014452                            	include "_maps\obj0B.asm"
00014452                            ; ---------------------------------------------------------------------------
00014452                            ; Sprite mappings - pole that breaks (LZ)
00014452                            ; ---------------------------------------------------------------------------
00014452 0000                       		dc.w byte_11326-Map_obj0B
00014454 0000                       		dc.w byte_11331-Map_obj0B
00014456 02                         byte_11326:	dc.b 2			; normal pole
00014457 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
0001445C 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00014461 04                         byte_11331:	dc.b 4			; broken pole
00014462 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00014467 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
0001446C 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00014471 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00014476                            		even
00014476                            		even
00014476                            
00014476                            ; ===========================================================================
00014476                            ; ---------------------------------------------------------------------------
00014476                            ; Object 0C - flapping door (LZ)
00014476                            ; ---------------------------------------------------------------------------
00014476                            
00014476                            Obj0C:					; XREF: Obj_Index
00014476 7000                       		moveq	#0,d0
00014478 1028 0024                  		move.b	$24(a0),d0
0001447C 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00014480 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00014484                            ; ===========================================================================
00014484 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00014486 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00014488                            ; ===========================================================================
00014488                            
00014488                            Obj0C_Main:				; XREF: Obj0C_Index
00014488 5428 0024                  		addq.b	#2,$24(a0)
0001448C 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00014494 317C 4328 0002             		move.w	#$4328,2(a0)
0001449A 0028 0004 0001             		ori.b	#4,1(a0)
000144A0 117C 0028 0019             		move.b	#$28,$19(a0)
000144A6 7000                       		moveq	#0,d0
000144A8 1028 0028                  		move.b	$28(a0),d0	; get object type
000144AC C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000144B0 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
000144B4                            
000144B4                            Obj0C_OpenClose:			; XREF: Obj0C_Index
000144B4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000144B8 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
000144BA 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
000144C0 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
000144C6 4A28 0001                  		tst.b	1(a0)
000144CA 6A00                       		bpl.s	Obj0C_Solid
000144CC 303C 00BB                  		move.w	#$BB,d0
000144D0 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play door sound
000144D6                            
000144D6                            Obj0C_Solid:
000144D6 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
000144DC 6100 8F0C                  		bsr.w	AnimateSprite
000144E0 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
000144E4 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
000144E8 6600                       		bne.s	Obj0C_Display	; if yes, branch
000144EA 3038 D008                  		move.w	($FFFFD008).w,d0
000144EE B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
000144F2 6400                       		bcc.s	Obj0C_Display	; if yes, branch
000144F4 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
000144FA 323C 0013                  		move.w	#$13,d1
000144FE 343C 0020                  		move.w	#$20,d2
00014502 3602                       		move.w	d2,d3
00014504 5243                       		addq.w	#1,d3
00014506 3828 0008                  		move.w	8(a0),d4
0001450A 6100 E544                  		bsr.w	SolidObject	; make the door	solid
0001450E                            
0001450E                            Obj0C_Display:
0001450E 6000 E260                  		bra.w	MarkObjGone
00014512                            ; ===========================================================================
00014512                            Ani_obj0C:
00014512                            	include "_anim\obj0C.asm"
00014512                            ; ---------------------------------------------------------------------------
00014512                            ; Animation script - flapping door (LZ)
00014512                            ; ---------------------------------------------------------------------------
00014512 0000                       		dc.w byte_113E6-Ani_obj0C
00014514 0000                       		dc.w byte_113EC-Ani_obj0C
00014516 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
0001451C 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00014522                            		even
00014522                            		even
00014522                            
00014522                            ; ---------------------------------------------------------------------------
00014522                            ; Sprite mappings - flapping door (LZ)
00014522                            ; ---------------------------------------------------------------------------
00014522                            Map_obj0C:
00014522                            	include "_maps\obj0C.asm"
00014522                            ; ---------------------------------------------------------------------------
00014522                            ; Sprite mappings - flapping door (LZ)
00014522                            ; ---------------------------------------------------------------------------
00014522 0000                       		dc.w byte_113F8-Map_obj0C
00014524 0000                       		dc.w byte_11403-Map_obj0C
00014526 0000                       		dc.w byte_1140E-Map_obj0C
00014528 02                         byte_113F8:	dc.b 2
00014529 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001452E 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00014533 02                         byte_11403:	dc.b 2
00014534 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00014539 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
0001453E 02                         byte_1140E:	dc.b 2
0001453F D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00014544 180D 1018 00               		dc.b $18, $D, $10, $18,	0
0001454A 00                         		even
0001454A 00                         		even
0001454A                            
0001454A                            ; ===========================================================================
0001454A                            ; ---------------------------------------------------------------------------
0001454A                            ; Object 71 - invisible	solid blocks
0001454A                            ; ---------------------------------------------------------------------------
0001454A                            
0001454A                            Obj71:					; XREF: Obj_Index
0001454A 7000                       		moveq	#0,d0
0001454C 1028 0024                  		move.b	$24(a0),d0
00014550 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00014554 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00014558                            ; ===========================================================================
00014558 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
0001455A 0000                       		dc.w Obj71_Solid-Obj71_Index
0001455C                            ; ===========================================================================
0001455C                            
0001455C                            Obj71_Main:				; XREF: Obj71_Index
0001455C 5428 0024                  		addq.b	#2,$24(a0)
00014560 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00014568 317C 8680 0002             		move.w	#$8680,2(a0)
0001456E 0028 0004 0001             		ori.b	#4,1(a0)
00014574 1028 0028                  		move.b	$28(a0),d0	; get object type
00014578 1200                       		move.b	d0,d1
0001457A 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
0001457E 0640 0010                  		addi.w	#$10,d0
00014582 E248                       		lsr.w	#1,d0
00014584 1140 0019                  		move.b	d0,$19(a0)	; set object width
00014588 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
0001458C 5241                       		addq.w	#1,d1
0001458E E749                       		lsl.w	#3,d1
00014590 1141 0016                  		move.b	d1,$16(a0)	; set object height
00014594                            
00014594                            Obj71_Solid:				; XREF: Obj71_Index
00014594 6100 C13E                  		bsr.w	ChkObjOnScreen
00014598 6600                       		bne.s	Obj71_ChkDel
0001459A 7200                       		moveq	#0,d1
0001459C 1228 0019                  		move.b	$19(a0),d1
000145A0 0641 000B                  		addi.w	#$B,d1
000145A4 7400                       		moveq	#0,d2
000145A6 1428 0016                  		move.b	$16(a0),d2
000145AA 3602                       		move.w	d2,d3
000145AC 5243                       		addq.w	#1,d3
000145AE 3828 0008                  		move.w	8(a0),d4
000145B2 6100 E4E4                  		bsr.w	SolidObject71
000145B6                            
000145B6                            Obj71_ChkDel:
000145B6 3028 0008                  		move.w	8(a0),d0
000145BA 0240 FF80                  		andi.w	#$FF80,d0
000145BE 3238 F700                  		move.w	($FFFFF700).w,d1
000145C2 0441 0080                  		subi.w	#$80,d1
000145C6 0241 FF80                  		andi.w	#$FF80,d1
000145CA 9041                       		sub.w	d1,d0
000145CC 0C40 0280                  		cmpi.w	#$280,d0
000145D0 6200                       		bhi.s	Obj71_Delete
000145D2 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
000145D6 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
000145D8 4EFA BE80                  		jmp	DisplaySprite	; if yes, display the object
000145DC                            ; ===========================================================================
000145DC                            
000145DC                            Obj71_NoDisplay:
000145DC 4E75                       		rts	
000145DE                            ; ===========================================================================
000145DE                            
000145DE                            Obj71_Delete:
000145DE 4EFA BEB6                  		jmp	DeleteObject
000145E2                            ; ===========================================================================
000145E2                            ; ---------------------------------------------------------------------------
000145E2                            ; Sprite mappings - invisible solid blocks
000145E2                            ; ---------------------------------------------------------------------------
000145E2                            Map_obj71:
000145E2                            	include "_maps\obj71.asm"
000145E2                            ; ---------------------------------------------------------------------------
000145E2                            ; Sprite mappings - invisible solid blocks
000145E2                            ; ---------------------------------------------------------------------------
000145E2 0000                       		dc.w byte_114BC-Map_obj71
000145E4 0000                       		dc.w byte_114D1-Map_obj71
000145E6 0000                       		dc.w byte_114E6-Map_obj71
000145E8 04                         byte_114BC:	dc.b 4
000145E9 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
000145EE F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
000145F3 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
000145F8 0005 0018 00               		dc.b 0,	5, 0, $18, 0
000145FD 04                         byte_114D1:	dc.b 4
000145FE E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00014603 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00014608 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
0001460D 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00014612 04                         byte_114E6:	dc.b 4
00014613 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00014618 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
0001461D 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00014622 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00014628 00                         		even
00014628 00                         		even
00014628                            
00014628                            ; ===========================================================================
00014628                            ; ---------------------------------------------------------------------------
00014628                            ; Object 5D - fans (SLZ)
00014628                            ; ---------------------------------------------------------------------------
00014628                            
00014628                            Obj5D:					; XREF: Obj_Index
00014628 7000                       		moveq	#0,d0
0001462A 1028 0024                  		move.b	$24(a0),d0
0001462E 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00014632 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00014636                            ; ===========================================================================
00014636 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00014638 0000                       		dc.w Obj5D_Delay-Obj5D_Index
0001463A                            ; ===========================================================================
0001463A                            
0001463A                            Obj5D_Main:				; XREF: Obj5D_Index
0001463A 5428 0024                  		addq.b	#2,$24(a0)
0001463E 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00014646 317C 43A0 0002             		move.w	#$43A0,2(a0)
0001464C 0028 0004 0001             		ori.b	#4,1(a0)
00014652 117C 0010 0019             		move.b	#$10,$19(a0)
00014658 117C 0004 0018             		move.b	#4,$18(a0)
0001465E                            
0001465E                            Obj5D_Delay:				; XREF: Obj5D_Index
0001465E 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00014664 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00014666 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001466A 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
0001466C 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00014672 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00014678 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
0001467A 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00014680                            
00014680                            Obj5D_Blow:
00014680 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00014684 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00014688 43F8 D000                  		lea	($FFFFD000).w,a1
0001468C 3029 0008                  		move.w	8(a1),d0
00014690 9068 0008                  		sub.w	8(a0),d0
00014694 0828 0000 0022             		btst	#0,$22(a0)
0001469A 6600                       		bne.s	Obj5D_ChkSonic
0001469C 4440                       		neg.w	d0
0001469E                            
0001469E                            Obj5D_ChkSonic:
0001469E 0640 0050                  		addi.w	#$50,d0
000146A2 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
000146A6 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
000146A8 3229 000C                  		move.w	$C(a1),d1
000146AC 0641 0060                  		addi.w	#$60,d1
000146B0 9268 000C                  		sub.w	$C(a0),d1
000146B4 6500                       		bcs.s	Obj5D_Animate
000146B6 0C41 0070                  		cmpi.w	#$70,d1
000146BA 6400                       		bcc.s	Obj5D_Animate
000146BC 0440 0050                  		subi.w	#$50,d0
000146C0 6400                       		bcc.s	loc_1159A
000146C2 4640                       		not.w	d0
000146C4 D040                       		add.w	d0,d0
000146C6                            
000146C6                            loc_1159A:
000146C6 0640 0060                  		addi.w	#$60,d0
000146CA 0828 0000 0022             		btst	#0,$22(a0)
000146D0 6600                       		bne.s	loc_115A8
000146D2 4440                       		neg.w	d0
000146D4                            
000146D4                            loc_115A8:
000146D4 4400                       		neg.b	d0
000146D6 E840                       		asr.w	#4,d0
000146D8 0828 0000 0028             		btst	#0,$28(a0)
000146DE 6700                       		beq.s	Obj5D_MoveSonic
000146E0 4440                       		neg.w	d0
000146E2                            
000146E2                            Obj5D_MoveSonic:
000146E2 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
000146E6                            
000146E6                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
000146E6 5328 001E                  		subq.b	#1,$1E(a0)
000146EA 6A00                       		bpl.s	Obj5D_ChkDel
000146EC 117C 0000 001E             		move.b	#0,$1E(a0)
000146F2 5228 001B                  		addq.b	#1,$1B(a0)
000146F6 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
000146FC 6500                       		bcs.s	loc_115D8
000146FE 117C 0000 001B             		move.b	#0,$1B(a0)
00014704                            
00014704                            loc_115D8:
00014704 7000                       		moveq	#0,d0
00014706 0828 0000 0028             		btst	#0,$28(a0)
0001470C 6700                       		beq.s	loc_115E4
0001470E 7002                       		moveq	#2,d0
00014710                            
00014710                            loc_115E4:
00014710 D028 001B                  		add.b	$1B(a0),d0
00014714 1140 001A                  		move.b	d0,$1A(a0)
00014718                            
00014718                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00014718 6100 BD40                  		bsr.w	DisplaySprite
0001471C 3028 0008                  		move.w	8(a0),d0
00014720 0240 FF80                  		andi.w	#$FF80,d0
00014724 3238 F700                  		move.w	($FFFFF700).w,d1
00014728 0441 0080                  		subi.w	#$80,d1
0001472C 0241 FF80                  		andi.w	#$FF80,d1
00014730 9041                       		sub.w	d1,d0
00014732 0C40 0280                  		cmpi.w	#$280,d0
00014736 6200 BD5E                  		bhi.w	DeleteObject
0001473A 4E75                       		rts	
0001473C                            ; ===========================================================================
0001473C                            ; ---------------------------------------------------------------------------
0001473C                            ; Sprite mappings - fans (SLZ)
0001473C                            ; ---------------------------------------------------------------------------
0001473C                            Map_obj5D:
0001473C                            	include "_maps\obj5D.asm"
0001473C                            ; ---------------------------------------------------------------------------
0001473C                            ; Sprite mappings - fans (SLZ)
0001473C                            ; ---------------------------------------------------------------------------
0001473C 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00014740 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00014744 0000                       		dc.w byte_1161A-Map_obj5D
00014746 02                         byte_1161A:	dc.b 2
00014747 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
0001474C 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00014751 02                         byte_11625:	dc.b 2
00014752 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00014757 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
0001475C 02                         byte_11630:	dc.b 2
0001475D F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00014762 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00014768 00                         		even
00014768 00                         		even
00014768                            
00014768                            ; ===========================================================================
00014768                            ; ---------------------------------------------------------------------------
00014768                            ; Object 5E - seesaws (SLZ)
00014768                            ; ---------------------------------------------------------------------------
00014768                            
00014768                            Obj5E:					; XREF: Obj_Index
00014768 7000                       		moveq	#0,d0
0001476A 1028 0024                  		move.b	$24(a0),d0
0001476E 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00014772 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00014776 3028 0030                  		move.w	$30(a0),d0
0001477A 0240 FF80                  		andi.w	#$FF80,d0
0001477E 3238 F700                  		move.w	($FFFFF700).w,d1
00014782 0441 0080                  		subi.w	#$80,d1
00014786 0241 FF80                  		andi.w	#$FF80,d1
0001478A 9041                       		sub.w	d1,d0
0001478C 6B00 BD08                  		bmi.w	DeleteObject
00014790 0C40 0280                  		cmpi.w	#$280,d0
00014794 6200 BD00                  		bhi.w	DeleteObject
00014798 6000 BCC0                  		bra.w	DisplaySprite
0001479C                            ; ===========================================================================
0001479C 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
0001479E 0000                       		dc.w Obj5E_Slope-Obj5E_Index
000147A0 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
000147A2 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
000147A4 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
000147A6 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
000147A8                            ; ===========================================================================
000147A8                            
000147A8                            Obj5E_Main:				; XREF: Obj5E_Index
000147A8 5428 0024                  		addq.b	#2,$24(a0)
000147AC 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
000147B4 317C 0374 0002             		move.w	#$374,2(a0)
000147BA 0028 0004 0001             		ori.b	#4,1(a0)
000147C0 117C 0004 0018             		move.b	#4,$18(a0)
000147C6 117C 0030 0019             		move.b	#$30,$19(a0)
000147CC 3168 0008 0030             		move.w	8(a0),$30(a0)
000147D2 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
000147D6 6600                       		bne.s	loc_116D2	; if not, branch
000147D8 6100 C11C                  		bsr.w	SingleObjLoad2
000147DC 6600                       		bne.s	loc_116D2
000147DE 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
000147E2 5C29 0024                  		addq.b	#6,$24(a1)
000147E6 3368 0008 0008             		move.w	8(a0),8(a1)
000147EC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000147F2 1368 0022 0022             		move.b	$22(a0),$22(a1)
000147F8 2348 003C                  		move.l	a0,$3C(a1)
000147FC                            
000147FC                            loc_116D2:
000147FC 0828 0000 0022             		btst	#0,$22(a0)
00014802 6700                       		beq.s	loc_116E0
00014804 117C 0002 001A             		move.b	#2,$1A(a0)
0001480A                            
0001480A                            loc_116E0:
0001480A 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00014810                            
00014810                            Obj5E_Slope:				; XREF: Obj5E_Index
00014810 1228 003A                  		move.b	$3A(a0),d1
00014814 6100 0000                  		bsr.w	loc_11766
00014818 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001481E 0828 0000 001A             		btst	#0,$1A(a0)
00014824 6700                       		beq.s	loc_11702
00014826 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001482C                            
0001482C                            loc_11702:
0001482C 43F8 D000                  		lea	($FFFFD000).w,a1
00014830 3169 0012 0038             		move.w	$12(a1),$38(a0)
00014836 323C 0030                  		move.w	#$30,d1
0001483A 4EB9 0000 A04C             		jsr	(SlopeObject).l
00014840 4E75                       		rts	
00014842                            ; ===========================================================================
00014842                            
00014842                            Obj5E_Slope2:				; XREF: Obj5E_Index
00014842 6100 0000                  		bsr.w	loc_1174A
00014846 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001484C 0828 0000 001A             		btst	#0,$1A(a0)
00014852 6700                       		beq.s	loc_11730
00014854 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001485A                            
0001485A                            loc_11730:
0001485A 323C 0030                  		move.w	#$30,d1
0001485E 4EB9 0000 A0EC             		jsr	(ExitPlatform).l
00014864 323C 0030                  		move.w	#$30,d1
00014868 3428 0008                  		move.w	8(a0),d2
0001486C 4EB9 0000 B024             		jsr	SlopeObject2
00014872 4E75                       		rts	
00014874                            ; ===========================================================================
00014874                            
00014874                            loc_1174A:				; XREF: Obj5E_Slope2
00014874 7202                       		moveq	#2,d1
00014876 43F8 D000                  		lea	($FFFFD000).w,a1
0001487A 3028 0008                  		move.w	8(a0),d0
0001487E 9069 0008                  		sub.w	8(a1),d0
00014882 6400                       		bcc.s	loc_1175E
00014884 4440                       		neg.w	d0
00014886 7200                       		moveq	#0,d1
00014888                            
00014888                            loc_1175E:
00014888 0C40 0008                  		cmpi.w	#8,d0
0001488C 6400                       		bcc.s	loc_11766
0001488E 7201                       		moveq	#1,d1
00014890                            
00014890                            loc_11766:
00014890 1028 001A                  		move.b	$1A(a0),d0
00014894 B001                       		cmp.b	d1,d0
00014896 6700                       		beq.s	locret_11790
00014898 6400                       		bcc.s	loc_11772
0001489A 5400                       		addq.b	#2,d0
0001489C                            
0001489C                            loc_11772:
0001489C 5300                       		subq.b	#1,d0
0001489E 1140 001A                  		move.b	d0,$1A(a0)
000148A2 1141 003A                  		move.b	d1,$3A(a0)
000148A6 08A8 0000 0001             		bclr	#0,1(a0)
000148AC 0828 0001 001A             		btst	#1,$1A(a0)
000148B2 6700                       		beq.s	locret_11790
000148B4 08E8 0000 0001             		bset	#0,1(a0)
000148BA                            
000148BA                            locret_11790:
000148BA 4E75                       		rts	
000148BC                            ; ===========================================================================
000148BC                            
000148BC                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000148BC 5428 0024                  		addq.b	#2,$24(a0)
000148C0 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
000148C8 317C 04F0 0002             		move.w	#$4F0,2(a0)
000148CE 0028 0004 0001             		ori.b	#4,1(a0)
000148D4 117C 0004 0018             		move.b	#4,$18(a0)
000148DA 117C 008B 0020             		move.b	#$8B,$20(a0)
000148E0 117C 000C 0019             		move.b	#$C,$19(a0)
000148E6 3168 0008 0030             		move.w	8(a0),$30(a0)
000148EC 0668 0028 0008             		addi.w	#$28,8(a0)
000148F2 3168 000C 0034             		move.w	$C(a0),$34(a0)
000148F8 117C 0001 001A             		move.b	#1,$1A(a0)
000148FE 0828 0000 0022             		btst	#0,$22(a0)
00014904 6700                       		beq.s	Obj5E_MoveSpike
00014906 0468 0050 0008             		subi.w	#$50,8(a0)
0001490C 117C 0002 003A             		move.b	#2,$3A(a0)
00014912                            
00014912                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00014912 2268 003C                  		movea.l	$3C(a0),a1
00014916 7000                       		moveq	#0,d0
00014918 1028 003A                  		move.b	$3A(a0),d0
0001491C 9029 003A                  		sub.b	$3A(a1),d0
00014920 6700                       		beq.s	loc_1183E
00014922 6400                       		bcc.s	loc_117FC
00014924 4400                       		neg.b	d0
00014926                            
00014926                            loc_117FC:
00014926 323C F7E8                  		move.w	#-$818,d1
0001492A 343C FEEC                  		move.w	#-$114,d2
0001492E 0C00 0001                  		cmpi.b	#1,d0
00014932 6700                       		beq.s	loc_11822
00014934 323C F510                  		move.w	#-$AF0,d1
00014938 343C FF34                  		move.w	#-$CC,d2
0001493C 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00014942 6D00                       		blt.s	loc_11822
00014944 323C F200                  		move.w	#-$E00,d1
00014948 343C FF60                  		move.w	#-$A0,d2
0001494C                            
0001494C                            loc_11822:
0001494C 3141 0012                  		move.w	d1,$12(a0)
00014950 3142 0010                  		move.w	d2,$10(a0)
00014954 3028 0008                  		move.w	8(a0),d0
00014958 9068 0030                  		sub.w	$30(a0),d0
0001495C 6400                       		bcc.s	loc_11838
0001495E 4468 0010                  		neg.w	$10(a0)
00014962                            
00014962                            loc_11838:
00014962 5428 0024                  		addq.b	#2,$24(a0)
00014966 6000                       		bra.s	Obj5E_SpikeFall
00014968                            ; ===========================================================================
00014968                            
00014968                            loc_1183E:				; XREF: Obj5E_MoveSpike
00014968 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001496E 7000                       		moveq	#0,d0
00014970 1029 001A                  		move.b	$1A(a1),d0
00014974 343C 0028                  		move.w	#$28,d2
00014978 3228 0008                  		move.w	8(a0),d1
0001497C 9268 0030                  		sub.w	$30(a0),d1
00014980 6400                       		bcc.s	loc_1185C
00014982 4442                       		neg.w	d2
00014984 5440                       		addq.w	#2,d0
00014986                            
00014986                            loc_1185C:
00014986 D040                       		add.w	d0,d0
00014988 3228 0034                  		move.w	$34(a0),d1
0001498C D272 0000                  		add.w	(a2,d0.w),d1
00014990 3141 000C                  		move.w	d1,$C(a0)
00014994 D468 0030                  		add.w	$30(a0),d2
00014998 3142 0008                  		move.w	d2,8(a0)
0001499C 4268 000E                  		clr.w	$E(a0)
000149A0 4268 000A                  		clr.w	$A(a0)
000149A4 4E75                       		rts	
000149A6                            ; ===========================================================================
000149A6                            
000149A6                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000149A6 4A68 0012                  		tst.w	$12(a0)
000149AA 6A00                       		bpl.s	loc_1189A
000149AC 6100 BA5A                  		bsr.w	ObjectFall
000149B0 3028 0034                  		move.w	$34(a0),d0
000149B4 0440 002F                  		subi.w	#$2F,d0
000149B8 B068 000C                  		cmp.w	$C(a0),d0
000149BC 6E00                       		bgt.s	locret_11898
000149BE 6100 BA48                  		bsr.w	ObjectFall
000149C2                            
000149C2                            locret_11898:
000149C2 4E75                       		rts	
000149C4                            ; ===========================================================================
000149C4                            
000149C4                            loc_1189A:				; XREF: Obj5E_SpikeFall
000149C4 6100 BA42                  		bsr.w	ObjectFall
000149C8 2268 003C                  		movea.l	$3C(a0),a1
000149CC 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000149D2 7000                       		moveq	#0,d0
000149D4 1029 001A                  		move.b	$1A(a1),d0
000149D8 3228 0008                  		move.w	8(a0),d1
000149DC 9268 0030                  		sub.w	$30(a0),d1
000149E0 6400                       		bcc.s	loc_118BA
000149E2 5440                       		addq.w	#2,d0
000149E4                            
000149E4                            loc_118BA:
000149E4 D040                       		add.w	d0,d0
000149E6 3228 0034                  		move.w	$34(a0),d1
000149EA D272 0000                  		add.w	(a2,d0.w),d1
000149EE B268 000C                  		cmp.w	$C(a0),d1
000149F2 6E00                       		bgt.s	locret_11938
000149F4 2268 003C                  		movea.l	$3C(a0),a1
000149F8 7202                       		moveq	#2,d1
000149FA 4A68 0010                  		tst.w	$10(a0)
000149FE 6B00                       		bmi.s	Obj5E_Spring
00014A00 7200                       		moveq	#0,d1
00014A02                            
00014A02                            Obj5E_Spring:
00014A02 1341 003A                  		move.b	d1,$3A(a1)
00014A06 1141 003A                  		move.b	d1,$3A(a0)
00014A0A B229 001A                  		cmp.b	$1A(a1),d1
00014A0E 6700                       		beq.s	loc_1192C
00014A10 08A9 0003 0022             		bclr	#3,$22(a1)
00014A16 6700                       		beq.s	loc_1192C
00014A18 4229 0025                  		clr.b	$25(a1)
00014A1C 137C 0002 0024             		move.b	#2,$24(a1)
00014A22 45F8 D000                  		lea	($FFFFD000).w,a2
00014A26 3568 0012 0012             		move.w	$12(a0),$12(a2)
00014A2C 446A 0012                  		neg.w	$12(a2)
00014A30 08EA 0001 0022             		bset	#1,$22(a2)
00014A36 08AA 0003 0022             		bclr	#3,$22(a2)
00014A3C 422A 003C                  		clr.b	$3C(a2)
00014A40 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00014A46 157C 0002 0024             		move.b	#2,$24(a2)
00014A4C 303C 00CC                  		move.w	#$CC,d0
00014A50 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play spring sound
00014A56                            
00014A56                            loc_1192C:
00014A56 4268 0010                  		clr.w	$10(a0)
00014A5A 4268 0012                  		clr.w	$12(a0)
00014A5E 5528 0024                  		subq.b	#2,$24(a0)
00014A62                            
00014A62                            locret_11938:
00014A62 4E75                       		rts	
00014A64                            ; ===========================================================================
00014A64 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00014A6E                            
00014A6E                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00014A9E                            		even
00014A9E                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00014ACE                            		even
00014ACE                            ; ---------------------------------------------------------------------------
00014ACE                            ; Sprite mappings - seesaws (SLZ)
00014ACE                            ; ---------------------------------------------------------------------------
00014ACE                            Map_obj5E:
00014ACE                            	include "_maps\obj5E.asm"
00014ACE                            ; ---------------------------------------------------------------------------
00014ACE                            ; Sprite mappings - seesaws (SLZ)
00014ACE                            ; ---------------------------------------------------------------------------
00014ACE 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00014AD2 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00014AD6 07                         byte_119AC:	dc.b 7
00014AD7 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00014ADC DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00014AE1 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00014AE6 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00014AEB FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00014AF0 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00014AF5 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00014AFA 04                         byte_119D0:	dc.b 4
00014AFB E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00014B00 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00014B05 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00014B0A E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00014B10 00                         		even
00014B10 00                         		even
00014B10                            
00014B10                            ; ---------------------------------------------------------------------------
00014B10                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00014B10                            ; ---------------------------------------------------------------------------
00014B10                            Map_obj5Ea:
00014B10                            	include "_maps\obj5Eballs.asm"
00014B10                            ; ---------------------------------------------------------------------------
00014B10                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00014B10                            ; ---------------------------------------------------------------------------
00014B10 0000                       		dc.w byte_119EA-Map_obj5Ea
00014B12 0000                       		dc.w byte_119F0-Map_obj5Ea
00014B14 01                         byte_119EA:	dc.b 1
00014B15 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00014B1A 01                         byte_119F0:	dc.b 1
00014B1B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00014B20                            		even
00014B20                            		even
00014B20                            
00014B20                            ; ===========================================================================
00014B20                            ; ---------------------------------------------------------------------------
00014B20                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00014B20                            ; ---------------------------------------------------------------------------
00014B20                            
00014B20                            Obj5F:					; XREF: Obj_Index
00014B20 7000                       		moveq	#0,d0
00014B22 1028 0024                  		move.b	$24(a0),d0
00014B26 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00014B2A 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00014B2E                            ; ===========================================================================
00014B2E 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00014B30 0000                       		dc.w Obj5F_Action-Obj5F_Index
00014B32 0000                       		dc.w Obj5F_Display-Obj5F_Index
00014B34 0000                       		dc.w Obj5F_End-Obj5F_Index
00014B36                            ; ===========================================================================
00014B36                            
00014B36                            Obj5F_Main:				; XREF: Obj5F_Index
00014B36 5428 0024                  		addq.b	#2,$24(a0)
00014B3A 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00014B42 317C 0400 0002             		move.w	#$400,2(a0)
00014B48 0028 0004 0001             		ori.b	#4,1(a0)
00014B4E 117C 0003 0018             		move.b	#3,$18(a0)
00014B54 117C 000C 0019             		move.b	#$C,$19(a0)
00014B5A 1028 0028                  		move.b	$28(a0),d0
00014B5E 6700                       		beq.s	loc_11A3C
00014B60 1140 0024                  		move.b	d0,$24(a0)
00014B64 4E75                       		rts	
00014B66                            ; ===========================================================================
00014B66                            
00014B66                            loc_11A3C:
00014B66 117C 009A 0020             		move.b	#$9A,$20(a0)
00014B6C 0868 0000 0022             		bchg	#0,$22(a0)
00014B72                            
00014B72                            Obj5F_Action:				; XREF: Obj5F_Index
00014B72 7000                       		moveq	#0,d0
00014B74 1028 0025                  		move.b	$25(a0),d0
00014B78 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00014B7C 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00014B80 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00014B86 6100 8862                  		bsr.w	AnimateSprite
00014B8A 6000 DBE4                  		bra.w	MarkObjGone
00014B8E                            ; ===========================================================================
00014B8E 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00014B90 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00014B92 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00014B94                            ; ===========================================================================
00014B94                            
00014B94                            Obj5F_Walk:				; XREF: Obj5F_Index2
00014B94 6100 0000                  		bsr.w	Obj5F_ChkSonic
00014B98 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00014B9C 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00014B9E 5428 0025                  		addq.b	#2,$25(a0)
00014BA2 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00014BA8 317C 0010 0010             		move.w	#$10,$10(a0)
00014BAE 117C 0001 001C             		move.b	#1,$1C(a0)
00014BB4 0868 0000 0022             		bchg	#0,$22(a0)
00014BBA 6700                       		beq.s	locret_11A96
00014BBC 4468 0010                  		neg.w	$10(a0)		; change direction
00014BC0                            
00014BC0                            locret_11A96:
00014BC0 4E75                       		rts	
00014BC2                            ; ===========================================================================
00014BC2                            
00014BC2                            Obj5F_Wait:				; XREF: Obj5F_Index2
00014BC2 6100 0000                  		bsr.w	Obj5F_ChkSonic
00014BC6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00014BCA 6B00                       		bmi.s	loc_11AA8
00014BCC 6100 B866                  		bsr.w	SpeedToPos
00014BD0 4E75                       		rts	
00014BD2                            ; ===========================================================================
00014BD2                            
00014BD2                            loc_11AA8:
00014BD2 5528 0025                  		subq.b	#2,$25(a0)
00014BD6 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00014BDC 4268 0010                  		clr.w	$10(a0)		; stop walking
00014BE0 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00014BE6 4E75                       		rts	
00014BE8                            ; ===========================================================================
00014BE8                            
00014BE8                            Obj5F_Explode:				; XREF: Obj5F_Index2
00014BE8 5368 0030                  		subq.w	#1,$30(a0)
00014BEC 6A00                       		bpl.s	locret_11AD0
00014BEE 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00014BF2 117C 0000 0024             		move.b	#0,$24(a0)
00014BF8                            
00014BF8                            locret_11AD0:
00014BF8 4E75                       		rts	
00014BFA                            ; ===========================================================================
00014BFA                            
00014BFA                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00014BFA 3038 D008                  		move.w	($FFFFD008).w,d0
00014BFE 9068 0008                  		sub.w	8(a0),d0
00014C02 6400                       		bcc.s	loc_11ADE
00014C04 4440                       		neg.w	d0
00014C06                            
00014C06                            loc_11ADE:
00014C06 0C40 0060                  		cmpi.w	#$60,d0
00014C0A 6400                       		bcc.s	locret_11B5E
00014C0C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014C10 9068 000C                  		sub.w	$C(a0),d0
00014C14 6400                       		bcc.s	Obj5F_MakeFuse
00014C16 4440                       		neg.w	d0
00014C18                            
00014C18                            Obj5F_MakeFuse:
00014C18 0C40 0060                  		cmpi.w	#$60,d0
00014C1C 6400                       		bcc.s	locret_11B5E
00014C1E 4A78 FE08                  		tst.w	($FFFFFE08).w
00014C22 6600                       		bne.s	locret_11B5E
00014C24 117C 0004 0025             		move.b	#4,$25(a0)
00014C2A 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00014C30 4268 0010                  		clr.w	$10(a0)
00014C34 117C 0002 001C             		move.b	#2,$1C(a0)
00014C3A 6100 BCBA                  		bsr.w	SingleObjLoad2
00014C3E 6600                       		bne.s	locret_11B5E
00014C40 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00014C44 3368 0008 0008             		move.w	8(a0),8(a1)
00014C4A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00014C50 3368 000C 0034             		move.w	$C(a0),$34(a1)
00014C56 1368 0022 0022             		move.b	$22(a0),$22(a1)
00014C5C 137C 0004 0028             		move.b	#4,$28(a1)
00014C62 137C 0003 001C             		move.b	#3,$1C(a1)
00014C68 337C 0010 0012             		move.w	#$10,$12(a1)
00014C6E 0828 0001 0022             		btst	#1,$22(a0)
00014C74 6700                       		beq.s	loc_11B54
00014C76 4469 0012                  		neg.w	$12(a1)
00014C7A                            
00014C7A                            loc_11B54:
00014C7A 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00014C80 2348 003C                  		move.l	a0,$3C(a1)
00014C84                            
00014C84                            locret_11B5E:
00014C84 4E75                       		rts	
00014C86                            ; ===========================================================================
00014C86                            
00014C86                            Obj5F_Display:				; XREF: Obj5F_Index
00014C86 6100                       		bsr.s	loc_11B70
00014C88 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00014C8E 6100 875A                  		bsr.w	AnimateSprite
00014C92 6000 DADC                  		bra.w	MarkObjGone
00014C96                            ; ===========================================================================
00014C96                            
00014C96                            loc_11B70:
00014C96 5368 0030                  		subq.w	#1,$30(a0)
00014C9A 6B00                       		bmi.s	loc_11B7C
00014C9C 6100 B796                  		bsr.w	SpeedToPos
00014CA0 4E75                       		rts	
00014CA2                            ; ===========================================================================
00014CA2                            
00014CA2                            loc_11B7C:
00014CA2 4268 0030                  		clr.w	$30(a0)
00014CA6 4228 0024                  		clr.b	$24(a0)
00014CAA 3168 0034 000C             		move.w	$34(a0),$C(a0)
00014CB0 7203                       		moveq	#3,d1
00014CB2 2248                       		movea.l	a0,a1
00014CB4 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00014CBA 6000                       		bra.s	Obj5F_MakeShrap
00014CBC                            ; ===========================================================================
00014CBC                            
00014CBC                            Obj5F_Loop:
00014CBC 6100 BC38                  		bsr.w	SingleObjLoad2
00014CC0 6600                       		bne.s	loc_11BCE
00014CC2                            
00014CC2                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00014CC2 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00014CC6 3368 0008 0008             		move.w	8(a0),8(a1)
00014CCC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00014CD2 137C 0006 0028             		move.b	#6,$28(a1)
00014CD8 137C 0004 001C             		move.b	#4,$1C(a1)
00014CDE 335A 0010                  		move.w	(a2)+,$10(a1)
00014CE2 335A 0012                  		move.w	(a2)+,$12(a1)
00014CE6 137C 0098 0020             		move.b	#$98,$20(a1)
00014CEC 08E9 0007 0001             		bset	#7,1(a1)
00014CF2                            
00014CF2                            loc_11BCE:
00014CF2 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00014CF6                            
00014CF6 117C 0006 0024             		move.b	#6,$24(a0)
00014CFC                            
00014CFC                            Obj5F_End:				; XREF: Obj5F_Index
00014CFC 6100 B736                  		bsr.w	SpeedToPos
00014D00 0668 0018 0012             		addi.w	#$18,$12(a0)
00014D06 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00014D0C 6100 86DC                  		bsr.w	AnimateSprite
00014D10 4A28 0001                  		tst.b	1(a0)
00014D14 6A00 B780                  		bpl.w	DeleteObject
00014D18 6000 B740                  		bra.w	DisplaySprite
00014D1C                            ; ===========================================================================
00014D1C FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00014D2C                            
00014D2C                            Ani_obj5F:
00014D2C                            	include "_anim\obj5F.asm"
00014D2C                            ; ---------------------------------------------------------------------------
00014D2C                            ; Animation script - Bomb enemy
00014D2C                            ; ---------------------------------------------------------------------------
00014D2C 0000                       		dc.w byte_11C12-Ani_obj5F
00014D2E 0000                       		dc.w byte_11C16-Ani_obj5F
00014D30 0000                       		dc.w byte_11C1C-Ani_obj5F
00014D32 0000                       		dc.w byte_11C20-Ani_obj5F
00014D34 0000                       		dc.w byte_11C24-Ani_obj5F
00014D36 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00014D3A 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00014D40 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00014D44 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00014D48 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00014D4C                            		even
00014D4C                            		even
00014D4C                            
00014D4C                            ; ---------------------------------------------------------------------------
00014D4C                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00014D4C                            ; ---------------------------------------------------------------------------
00014D4C                            Map_obj5F:
00014D4C                            	include "_maps\obj5F.asm"
00014D4C                            ; ---------------------------------------------------------------------------
00014D4C                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00014D4C                            ; ---------------------------------------------------------------------------
00014D4C 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00014D50 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00014D54 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00014D58 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00014D5C 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00014D60 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00014D64 03                         byte_11C40:	dc.b 3
00014D65 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00014D6A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014D6F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014D74 03                         byte_11C50:	dc.b 3
00014D75 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014D7A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014D7F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014D84 03                         byte_11C60:	dc.b 3
00014D85 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00014D8A 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00014D8F E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00014D94 03                         byte_11C70:	dc.b 3
00014D95 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014D9A 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00014D9F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014DA4 03                         byte_11C80:	dc.b 3
00014DA5 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00014DAA 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00014DAF E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00014DB4 03                         byte_11C90:	dc.b 3
00014DB5 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014DBA 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00014DBF E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014DC4 02                         byte_11CA0:	dc.b 2
00014DC5 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00014DCA 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014DCF 02                         byte_11CAB:	dc.b 2
00014DD0 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014DD5 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014DDA 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00014DDB E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00014DE0 01                         byte_11CBC:	dc.b 1			; fuse
00014DE1 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00014DE6 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00014DE7 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00014DEC 01                         byte_11CC8:	dc.b 1			; fireball
00014DED FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00014DF2                            		even
00014DF2                            		even
00014DF2                            
00014DF2                            ; ===========================================================================
00014DF2                            ; ---------------------------------------------------------------------------
00014DF2                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00014DF2                            ; ---------------------------------------------------------------------------
00014DF2                            
00014DF2                            Obj60:					; XREF: Obj_Index
00014DF2 7000                       		moveq	#0,d0
00014DF4 1028 0024                  		move.b	$24(a0),d0
00014DF8 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00014DFC 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00014E00                            ; ===========================================================================
00014E00 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00014E02 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00014E04 0000                       		dc.w Obj60_Display-Obj60_Index
00014E06 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00014E08 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00014E0A                            ; ===========================================================================
00014E0A                            
00014E0A                            Obj60_Main:				; XREF: Obj60_Index
00014E0A 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00014E12 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00014E18 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00014E1E 6700                       		beq.s	loc_11D02
00014E20 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00014E26                            
00014E26                            loc_11D02:
00014E26 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00014E2C 6600                       		bne.s	loc_11D10
00014E2E 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00014E34                            
00014E34                            loc_11D10:
00014E34 0028 0004 0001             		ori.b	#4,1(a0)
00014E3A 117C 0004 0018             		move.b	#4,$18(a0)
00014E40 117C 000B 0020             		move.b	#$B,$20(a0)
00014E46 117C 000C 0019             		move.b	#$C,$19(a0)
00014E4C 7400                       		moveq	#0,d2
00014E4E 45E8 0037                  		lea	$37(a0),a2
00014E52 264A                       		movea.l	a2,a3
00014E54 524A                       		addq.w	#1,a2
00014E56 7203                       		moveq	#3,d1
00014E58                            
00014E58                            Obj60_MakeOrbs:
00014E58 6100 BA9C                  		bsr.w	SingleObjLoad2
00014E5C 6600                       		bne.s	loc_11D90
00014E5E 5213                       		addq.b	#1,(a3)
00014E60 3A09                       		move.w	a1,d5
00014E62 0445 D000                  		subi.w	#-$3000,d5
00014E66 EC4D                       		lsr.w	#6,d5
00014E68 0245 007F                  		andi.w	#$7F,d5
00014E6C 14C5                       		move.b	d5,(a2)+
00014E6E 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00014E70 137C 0006 0024             		move.b	#6,$24(a1)
00014E76 2368 0004 0004             		move.l	4(a0),4(a1)
00014E7C 3368 0002 0002             		move.w	2(a0),2(a1)
00014E82 0029 0004 0001             		ori.b	#4,1(a1)
00014E88 137C 0004 0018             		move.b	#4,$18(a1)
00014E8E 137C 0008 0019             		move.b	#8,$19(a1)
00014E94 137C 0003 001A             		move.b	#3,$1A(a1)
00014E9A 137C 0098 0020             		move.b	#$98,$20(a1)
00014EA0 1342 0026                  		move.b	d2,$26(a1)
00014EA4 0602 0040                  		addi.b	#$40,d2
00014EA8 2348 003C                  		move.l	a0,$3C(a1)
00014EAC 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00014EB0                            
00014EB0                            loc_11D90:
00014EB0 7001                       		moveq	#1,d0
00014EB2 0828 0000 0022             		btst	#0,$22(a0)
00014EB8 6700                       		beq.s	Obj60_Move
00014EBA 4440                       		neg.w	d0
00014EBC                            
00014EBC                            Obj60_Move:
00014EBC 1140 0036                  		move.b	d0,$36(a0)
00014EC0 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00014EC6 5428 0024                  		addq.b	#2,$24(a0)
00014ECA 317C FF80 0010             		move.w	#-$80,$10(a0)	; move orbinaut	to the left
00014ED0 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00014ED6 6700                       		beq.s	locret_11DBC	; if not, branch
00014ED8 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00014EDC                            
00014EDC                            locret_11DBC:
00014EDC 4E75                       		rts	
00014EDE                            ; ===========================================================================
00014EDE                            
00014EDE                            Obj60_ChkSonic:				; XREF: Obj60_Index
00014EDE 3038 D008                  		move.w	($FFFFD008).w,d0
00014EE2 9068 0008                  		sub.w	8(a0),d0
00014EE6 6400                       		bcc.s	loc_11DCA
00014EE8 4440                       		neg.w	d0
00014EEA                            
00014EEA                            loc_11DCA:
00014EEA 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00014EEE 6400                       		bcc.s	Obj60_Animate	; if not, branch
00014EF0 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014EF4 9068 000C                  		sub.w	$C(a0),d0
00014EF8 6400                       		bcc.s	loc_11DDC
00014EFA 4440                       		neg.w	d0
00014EFC                            
00014EFC                            loc_11DDC:
00014EFC 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00014F00 6400                       		bcc.s	Obj60_Animate	; if not, branch
00014F02 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00014F06 6600                       		bne.s	Obj60_Animate	; if yes, branch
00014F08 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00014F0E                            
00014F0E                            Obj60_Animate:
00014F0E 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00014F14 6100 84D4                  		bsr.w	AnimateSprite
00014F18 6000 0000                  		bra.w	Obj60_ChkDel
00014F1C                            ; ===========================================================================
00014F1C                            
00014F1C                            Obj60_Display:				; XREF: Obj60_Index
00014F1C 6100 B516                  		bsr.w	SpeedToPos
00014F20                            
00014F20                            Obj60_ChkDel:				; XREF: Obj60_Animate
00014F20 3028 0008                  		move.w	8(a0),d0
00014F24 0240 FF80                  		andi.w	#$FF80,d0
00014F28 3238 F700                  		move.w	($FFFFF700).w,d1
00014F2C 0441 0080                  		subi.w	#$80,d1
00014F30 0241 FF80                  		andi.w	#$FF80,d1
00014F34 9041                       		sub.w	d1,d0
00014F36 0C40 0280                  		cmpi.w	#$280,d0
00014F3A 6200 0000                  		bhi.w	Obj60_ChkGone
00014F3E 6000 B51A                  		bra.w	DisplaySprite
00014F42                            ; ===========================================================================
00014F42                            
00014F42                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00014F42 45F8 FC00                  		lea	($FFFFFC00).w,a2
00014F46 7000                       		moveq	#0,d0
00014F48 1028 0023                  		move.b	$23(a0),d0
00014F4C 6700                       		beq.s	loc_11E34
00014F4E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00014F54                            
00014F54                            loc_11E34:
00014F54 45E8 0037                  		lea	$37(a0),a2
00014F58 7400                       		moveq	#0,d2
00014F5A 141A                       		move.b	(a2)+,d2
00014F5C 5342                       		subq.w	#1,d2
00014F5E 6500                       		bcs.s	Obj60_Delete
00014F60                            
00014F60                            loc_11E40:
00014F60 7000                       		moveq	#0,d0
00014F62 101A                       		move.b	(a2)+,d0
00014F64 ED48                       		lsl.w	#6,d0
00014F66 0680 00FF D000             		addi.l	#$FFD000,d0
00014F6C 2240                       		movea.l	d0,a1
00014F6E 6100 B528                  		bsr.w	DeleteObject2
00014F72 51CA FFEC                  		dbf	d2,loc_11E40
00014F76                            
00014F76                            Obj60_Delete:
00014F76 6000 B51E                  		bra.w	DeleteObject
00014F7A                            ; ===========================================================================
00014F7A                            
00014F7A                            Obj60_MoveOrb:				; XREF: Obj60_Index
00014F7A 2268 003C                  		movea.l	$3C(a0),a1
00014F7E 0C11 0060                  		cmpi.b	#$60,0(a1)
00014F82 6600 B512                  		bne.w	DeleteObject
00014F86 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00014F8C 6600                       		bne.s	Obj60_Circle
00014F8E 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00014F94 6600                       		bne.s	Obj60_Circle
00014F96 5428 0024                  		addq.b	#2,$24(a0)
00014F9A 5329 0037                  		subq.b	#1,$37(a1)
00014F9E 6600                       		bne.s	Obj60_FireOrb
00014FA0 5429 0024                  		addq.b	#2,$24(a1)
00014FA4                            
00014FA4                            Obj60_FireOrb:
00014FA4 0C38 0001 FE10                             cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00014FAA 6700                                       beq.s   FireOrbishLZ
00014FAC 317C FD00 0010             		move.w	#-$300,$10(a0)	; move orb to the left (quickly)
00014FB2 6000                                       bra.s   ContFireOrbish
00014FB4                            
00014FB4                            FireOrbishLZ:
00014FB4 317C FD00 0010                             move.w  #-$300,$10(a0)  ; move orb to the left (quickly)
00014FBA                            
00014FBA                            ContFireOrbish:
00014FBA 0829 0000 0022             		btst	#0,$22(a1)
00014FC0 6700                       		beq.s	Obj60_Display2
00014FC2 4468 0010                  		neg.w	$10(a0)
00014FC6                            
00014FC6                            Obj60_Display2:
00014FC6 6000 B492                  		bra.w	DisplaySprite
00014FCA                            ; ===========================================================================
00014FCA                            
00014FCA                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00014FCA 1028 0026                  		move.b	$26(a0),d0
00014FCE 4EB9 0000 2CC8             		jsr	(CalcSine).l
00014FD4 E841                       		asr.w	#4,d1
00014FD6 D269 0008                  		add.w	8(a1),d1
00014FDA 3141 0008                  		move.w	d1,8(a0)
00014FDE E840                       		asr.w	#4,d0
00014FE0 D069 000C                  		add.w	$C(a1),d0
00014FE4 3140 000C                  		move.w	d0,$C(a0)
00014FE8 1029 0036                  		move.b	$36(a1),d0
00014FEC D128 0026                  		add.b	d0,$26(a0)
00014FF0 6000 B468                  		bra.w	DisplaySprite
00014FF4                            ; ===========================================================================
00014FF4                            
00014FF4                            Obj60_ChkDel2:				; XREF: Obj60_Index
00014FF4 6100 B43E                  		bsr.w	SpeedToPos
00014FF8 4A28 0001                  		tst.b	1(a0)
00014FFC 6A00 B498                  		bpl.w	DeleteObject
00015000 6000 B458                  		bra.w	DisplaySprite
00015004                            ; ===========================================================================
00015004                            Ani_obj60:
00015004                            	include "_anim\obj60.asm"
00015004                            ; ---------------------------------------------------------------------------
00015004                            ; Animation script - Orbinaut enemy
00015004                            ; ---------------------------------------------------------------------------
00015004 0000                       		dc.w byte_11EDA-Ani_obj60
00015006 0000                       		dc.w byte_11EDE-Ani_obj60
00015008 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
0001500C 0F02 02FE 0100             byte_11EDE:	dc.b $F, 2, 2, $FE, 1, 0
00015012                            		even
00015012                            		even
00015012                            
00015012                            ; ---------------------------------------------------------------------------
00015012                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00015012                            ; ---------------------------------------------------------------------------
00015012                            Map_obj60:
00015012                            	include "_maps\obj60.asm"
00015012                            ; ---------------------------------------------------------------------------
00015012                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00015012                            ; ---------------------------------------------------------------------------
00015012 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00015016 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
0001501A 01                         byte_11EEC:	dc.b 1
0001501B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00015020 01                         byte_11EF2:	dc.b 1
00015021 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00015026 01                         byte_11EF8:	dc.b 1
00015027 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001502C 01                         byte_11EFE:	dc.b 1
0001502D F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00015032                            		even
00015032                            		even
00015032                            
00015032                            ; ===========================================================================
00015032                            ; ---------------------------------------------------------------------------
00015032                            ; Object 16 - harpoon (LZ)
00015032                            ; ---------------------------------------------------------------------------
00015032                            
00015032                            Obj16:					; XREF: Obj_Index
00015032 7000                       		moveq	#0,d0
00015034 1028 0024                  		move.b	$24(a0),d0
00015038 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
0001503C 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00015040                            ; ===========================================================================
00015040 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00015042 0000                       		dc.w Obj16_Move-Obj16_Index
00015044 0000                       		dc.w Obj16_Wait-Obj16_Index
00015046                            ; ===========================================================================
00015046                            
00015046                            Obj16_Main:				; XREF: Obj16_Index
00015046 5428 0024                  		addq.b	#2,$24(a0)
0001504A 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00015052 317C 03CC 0002             		move.w	#$3CC,2(a0)
00015058 0028 0004 0001             		ori.b	#4,1(a0)
0001505E 117C 0004 0018             		move.b	#4,$18(a0)
00015064 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0001506A 117C 0014 0019             		move.b	#$14,$19(a0)
00015070 317C 003C 0030             		move.w	#60,$30(a0)
00015076                            
00015076                            Obj16_Move:				; XREF: Obj16_Index
00015076 43F9 0000 0000             		lea	(Ani_obj16).l,a1
0001507C 6100 836C                  		bsr.w	AnimateSprite
00015080 7000                       		moveq	#0,d0
00015082 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00015086 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
0001508C 6000 D6E2                  		bra.w	MarkObjGone
00015090                            ; ===========================================================================
00015090 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00015096                            ; ===========================================================================
00015096                            
00015096                            Obj16_Wait:				; XREF: Obj16_Index
00015096 5368 0030                  		subq.w	#1,$30(a0)
0001509A 6A00                       		bpl.s	Obj16_ChkDel
0001509C 317C 003C 0030             		move.w	#60,$30(a0)
000150A2 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000150A6 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000150AC                            
000150AC                            Obj16_ChkDel:
000150AC 6000 D6C2                  		bra.w	MarkObjGone
000150B0                            ; ===========================================================================
000150B0                            Ani_obj16:
000150B0                            	include "_anim\obj16.asm"
000150B0                            ; ---------------------------------------------------------------------------
000150B0                            ; Animation script - harpoon (LZ)
000150B0                            ; ---------------------------------------------------------------------------
000150B0 0000                       		dc.w byte_11F8A-Ani_obj16
000150B2 0000                       		dc.w byte_11F8E-Ani_obj16
000150B4 0000                       		dc.w byte_11F92-Ani_obj16
000150B6 0000                       		dc.w byte_11F96-Ani_obj16
000150B8 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000150BC 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000150C0 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000150C4 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000150C8                            		even
000150C8                            		even
000150C8                            
000150C8                            ; ---------------------------------------------------------------------------
000150C8                            ; Sprite mappings - harpoon (LZ)
000150C8                            ; ---------------------------------------------------------------------------
000150C8                            Map_obj16:
000150C8                            	include "_maps\obj16.asm"
000150C8                            ; ---------------------------------------------------------------------------
000150C8                            ; Sprite mappings - harpoon (LZ)
000150C8                            ; ---------------------------------------------------------------------------
000150C8 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000150CC 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000150D0 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000150D4 01                         byte_11FA6:	dc.b 1
000150D5 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000150DA 01                         byte_11FAC:	dc.b 1
000150DB FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000150E0 02                         byte_11FB2:	dc.b 2
000150E1 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000150E6 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000150EB 01                         byte_11FBD:	dc.b 1
000150EC F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000150F1 01                         byte_11FC3:	dc.b 1
000150F2 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000150F7 02                         byte_11FC9:	dc.b 2
000150F8 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000150FD F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00015102                            		even
00015102                            		even
00015102                            
00015102                            ; ===========================================================================
00015102                            ; ---------------------------------------------------------------------------
00015102                            ; Object 61 - blocks (LZ)
00015102                            ; ---------------------------------------------------------------------------
00015102                            
00015102                            Obj61:					; XREF: Obj_Index
00015102 7000                       		moveq	#0,d0
00015104 1028 0024                  		move.b	$24(a0),d0
00015108 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
0001510C 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00015110                            ; ===========================================================================
00015110 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00015112 0000                       		dc.w Obj61_Action-Obj61_Index
00015114                            
00015114 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00015116 200C                       		dc.b $20, $C
00015118 1010                       		dc.b $10, $10
0001511A 1010                       		dc.b $10, $10
0001511C                            ; ===========================================================================
0001511C                            
0001511C                            Obj61_Main:				; XREF: Obj61_Index
0001511C 5428 0024                  		addq.b	#2,$24(a0)
00015120 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00015128 317C 43E6 0002             		move.w	#$43E6,2(a0)
0001512E 117C 0004 0001             		move.b	#4,1(a0)
00015134 117C 0003 0018             		move.b	#3,$18(a0)
0001513A 7000                       		moveq	#0,d0
0001513C 1028 0028                  		move.b	$28(a0),d0
00015140 E648                       		lsr.w	#3,d0
00015142 0240 000E                  		andi.w	#$E,d0
00015146 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
0001514A 115A 0019                  		move.b	(a2)+,$19(a0)
0001514E 1152 0016                  		move.b	(a2),$16(a0)
00015152 E248                       		lsr.w	#1,d0
00015154 1140 001A                  		move.b	d0,$1A(a0)
00015158 3168 0008 0034             		move.w	8(a0),$34(a0)
0001515E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015164 1028 0028                  		move.b	$28(a0),d0
00015168 0200 000F                  		andi.b	#$F,d0
0001516C 6700                       		beq.s	Obj61_Action
0001516E 0C00 0007                  		cmpi.b	#7,d0
00015172 6700                       		beq.s	Obj61_Action
00015174 117C 0001 0038             		move.b	#1,$38(a0)
0001517A                            
0001517A                            Obj61_Action:				; XREF: Obj61_Index
0001517A 3F28 0008                  		move.w	8(a0),-(sp)
0001517E 7000                       		moveq	#0,d0
00015180 1028 0028                  		move.b	$28(a0),d0
00015184 0240 000F                  		andi.w	#$F,d0
00015188 D040                       		add.w	d0,d0
0001518A 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
0001518E 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00015192 381F                       		move.w	(sp)+,d4
00015194 4A28 0001                  		tst.b	1(a0)
00015198 6A00                       		bpl.s	Obj61_ChkDel
0001519A 7200                       		moveq	#0,d1
0001519C 1228 0019                  		move.b	$19(a0),d1
000151A0 0641 000B                  		addi.w	#$B,d1
000151A4 7400                       		moveq	#0,d2
000151A6 1428 0016                  		move.b	$16(a0),d2
000151AA 3602                       		move.w	d2,d3
000151AC 5243                       		addq.w	#1,d3
000151AE 6100 D8A0                  		bsr.w	SolidObject
000151B2 1144 003F                  		move.b	d4,$3F(a0)
000151B6 6100 0000                  		bsr.w	loc_12180
000151BA                            
000151BA                            Obj61_ChkDel:
000151BA 3028 0034                  		move.w	$34(a0),d0
000151BE 0240 FF80                  		andi.w	#$FF80,d0
000151C2 3238 F700                  		move.w	($FFFFF700).w,d1
000151C6 0441 0080                  		subi.w	#$80,d1
000151CA 0241 FF80                  		andi.w	#$FF80,d1
000151CE 9041                       		sub.w	d1,d0
000151D0 0C40 0280                  		cmpi.w	#$280,d0
000151D4 6200 B2C0                  		bhi.w	DeleteObject
000151D8 6000 B280                  		bra.w	DisplaySprite
000151DC                            ; ===========================================================================
000151DC 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000151E0 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000151E4 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
000151E8 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
000151EC                            ; ===========================================================================
000151EC                            
000151EC                            Obj61_Type00:				; XREF: Obj61_TypeIndex
000151EC 4E75                       		rts	
000151EE                            ; ===========================================================================
000151EE                            
000151EE                            Obj61_Type01:				; XREF: Obj61_TypeIndex
000151EE 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
000151F2 6600                       		bne.s	loc_120D6	; if yes, branch
000151F4 0828 0003 0022             		btst	#3,$22(a0)
000151FA 6700                       		beq.s	locret_120D4
000151FC 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
00015202                            
00015202                            locret_120D4:
00015202 4E75                       		rts	
00015204                            ; ===========================================================================
00015204                            
00015204                            loc_120D6:
00015204 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00015208 66F8                       		bne.s	locret_120D4	; if time remains, branch
0001520A 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001520E 4228 0038                  		clr.b	$38(a0)
00015212 4E75                       		rts	
00015214                            ; ===========================================================================
00015214                            
00015214                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00015214 6100 B21E                  		bsr.w	SpeedToPos
00015218 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
0001521C 6100 0000                  		bsr.w	ObjHitFloor
00015220 4A41                       		tst.w	d1
00015222 6A00 0000                  		bpl.w	locret_12106
00015226 5241                       		addq.w	#1,d1
00015228 D368 000C                  		add.w	d1,$C(a0)
0001522C 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00015230 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00015234                            
00015234                            locret_12106:
00015234 4E75                       		rts	
00015236                            ; ===========================================================================
00015236                            
00015236                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00015236 6100 B1FC                  		bsr.w	SpeedToPos
0001523A 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
0001523E 6100 0000                  		bsr.w	ObjHitCeiling
00015242 4A41                       		tst.w	d1
00015244 6A00 0000                  		bpl.w	locret_12126
00015248 9368 000C                  		sub.w	d1,$C(a0)
0001524C 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00015250 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00015254                            
00015254                            locret_12126:
00015254 4E75                       		rts	
00015256                            ; ===========================================================================
00015256                            
00015256                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00015256 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
0001525C 6600                       		bne.s	locret_12138	; if not, branch
0001525E 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00015262 4228 0038                  		clr.b	$38(a0)
00015266                            
00015266                            locret_12138:
00015266 4E75                       		rts	
00015268                            ; ===========================================================================
00015268                            
00015268                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00015268 3038 F646                  		move.w	($FFFFF646).w,d0
0001526C 9068 000C                  		sub.w	$C(a0),d0
00015270 6700                       		beq.s	locret_1217E
00015272 6400                       		bcc.s	loc_12162
00015274 0C40 FFFE                  		cmpi.w	#-2,d0
00015278 6C00                       		bge.s	loc_1214E
0001527A 70FE                       		moveq	#-2,d0
0001527C                            
0001527C                            loc_1214E:
0001527C D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00015280 6100 0000                  		bsr.w	ObjHitCeiling
00015284 4A41                       		tst.w	d1
00015286 6A00 0000                  		bpl.w	locret_12160
0001528A 9368 000C                  		sub.w	d1,$C(a0)
0001528E                            
0001528E                            locret_12160:
0001528E 4E75                       		rts	
00015290                            ; ===========================================================================
00015290                            
00015290                            loc_12162:				; XREF: Obj61_Type07
00015290 0C40 0002                  		cmpi.w	#2,d0
00015294 6F00                       		ble.s	loc_1216A
00015296 7002                       		moveq	#2,d0
00015298                            
00015298                            loc_1216A:
00015298 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
0001529C 6100 0000                  		bsr.w	ObjHitFloor
000152A0 4A41                       		tst.w	d1
000152A2 6A00 0000                  		bpl.w	locret_1217E
000152A6 5241                       		addq.w	#1,d1
000152A8 D368 000C                  		add.w	d1,$C(a0)
000152AC                            
000152AC                            locret_1217E:
000152AC 4E75                       		rts	
000152AE                            ; ===========================================================================
000152AE                            
000152AE                            loc_12180:				; XREF: Obj61_Action
000152AE 4A28 0038                  		tst.b	$38(a0)
000152B2 6700                       		beq.s	locret_121C0
000152B4 0828 0003 0022             		btst	#3,$22(a0)
000152BA 6600                       		bne.s	loc_1219A
000152BC 4A28 003E                  		tst.b	$3E(a0)
000152C0 6700                       		beq.s	locret_121C0
000152C2 5928 003E                  		subq.b	#4,$3E(a0)
000152C6 6000                       		bra.s	loc_121A6
000152C8                            ; ===========================================================================
000152C8                            
000152C8                            loc_1219A:
000152C8 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000152CE 6700                       		beq.s	locret_121C0
000152D0 5828 003E                  		addq.b	#4,$3E(a0)
000152D4                            
000152D4                            loc_121A6:
000152D4 1028 003E                  		move.b	$3E(a0),d0
000152D8 4EB9 0000 2CC8             		jsr	(CalcSine).l
000152DE 323C 0400                  		move.w	#$400,d1
000152E2 C1C1                       		muls.w	d1,d0
000152E4 4840                       		swap	d0
000152E6 D068 0030                  		add.w	$30(a0),d0
000152EA 3140 000C                  		move.w	d0,$C(a0)
000152EE                            
000152EE                            locret_121C0:
000152EE 4E75                       		rts	
000152F0                            ; ===========================================================================
000152F0                            ; ---------------------------------------------------------------------------
000152F0                            ; Sprite mappings - blocks (LZ)
000152F0                            ; ---------------------------------------------------------------------------
000152F0                            Map_obj61:
000152F0                            	include "_maps\obj61.asm"
000152F0                            ; ---------------------------------------------------------------------------
000152F0                            ; Sprite mappings - blocks (LZ)
000152F0                            ; ---------------------------------------------------------------------------
000152F0 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
000152F4 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
000152F8 01                         byte_121CA:	dc.b 1
000152F9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000152FE 02                         byte_121D0:	dc.b 2
000152FF F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00015304 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00015309 01                         byte_121DB:	dc.b 1
0001530A F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
0001530F 01                         byte_121E1:	dc.b 1
00015310 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00015316 00                         		even
00015316 00                         		even
00015316                            
00015316                            ; ===========================================================================
00015316                            ; ---------------------------------------------------------------------------
00015316                            ; Object 62 - gargoyle head (LZ)
00015316                            ; ---------------------------------------------------------------------------
00015316                            
00015316                            Obj62:					; XREF: Obj_Index
00015316 7000                       		moveq	#0,d0
00015318 1028 0024                  		move.b	$24(a0),d0
0001531C 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00015320 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00015324 6000 D44A                  		bra.w	MarkObjGone
00015328                            ; ===========================================================================
00015328 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
0001532A 0000                       		dc.w Obj62_MakeFire-Obj62_Index
0001532C 0000                       		dc.w Obj62_FireBall-Obj62_Index
0001532E 0000                       		dc.w Obj62_AniFire-Obj62_Index
00015330                            
00015330 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00015338                            ; ===========================================================================
00015338                            
00015338                            Obj62_Main:				; XREF: Obj62_Index
00015338 5428 0024                  		addq.b	#2,$24(a0)
0001533C 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00015344 0C38 0003 FE10                             cmpi.b    #3,($FFFFFE10).w   
0001534A 317C 42E9 0002             		move.w	#$42E9,2(a0)
00015350 0028 0004 0001             		ori.b	#4,1(a0)
00015356 117C 0003 0018             		move.b	#3,$18(a0)
0001535C 117C 0010 0019             		move.b	#$10,$19(a0)
00015362 1028 0028                  		move.b	$28(a0),d0	; get object type
00015366 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001536A 117B 00C4 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00015370 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00015376 0228 000F 0028             		andi.b	#$F,$28(a0)
0001537C                            
0001537C                            Obj62_MakeFire:				; XREF: Obj62_Index
0001537C 5328 001E                  		subq.b	#1,$1E(a0)
00015380 6600                       		bne.s	Obj62_NoFire
00015382 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00015388 6100 B34A                  		bsr.w	ChkObjOnScreen
0001538C 6600                       		bne.s	Obj62_NoFire
0001538E 6100 B550                  		bsr.w	SingleObjLoad
00015392 6600                       		bne.s	Obj62_NoFire
00015394 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00015398 5829 0024                  		addq.b	#4,$24(a1)
0001539C 3368 0008 0008             		move.w	8(a0),8(a1)
000153A2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000153A8 1368 0001 0001             		move.b	1(a0),1(a1)
000153AE 1368 0022 0022             		move.b	$22(a0),$22(a1)
000153B4                            
000153B4                            Obj62_NoFire:
000153B4 4E75                       		rts	
000153B6                            ; ===========================================================================
000153B6                            
000153B6                            Obj62_FireBall:				; XREF: Obj62_Index
000153B6 5428 0024                  		addq.b	#2,$24(a0)
000153BA 117C 0008 0016             		move.b	#8,$16(a0)
000153C0 117C 0008 0017             		move.b	#8,$17(a0)
000153C6 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000153CE 6700                                       beq.s    Obj62_SLZTiles    
000153D0 6000                                       bra.s    Obj62_MCont
000153D2                            
000153D2                            Obj62_SLZTiles:
000153D2 317C 2500 0002                             move.w    #(1<<13)+($A000/$20),2(a0)    ; ïàëèòðà è òàéëû äëÿ GHZ
000153D8                            
000153D8                            Obj62_MCont:
000153D8 317C 02E9 0002             		move.w	#$2E9,2(a0)
000153DE 0028 0004 0001             		ori.b	#4,1(a0)
000153E4 117C 0004 0018             		move.b	#4,$18(a0)
000153EA 117C 0098 0020             		move.b	#$98,$20(a0)
000153F0 117C 0008 0019             		move.b	#8,$19(a0)
000153F6 117C 0002 001A             		move.b	#2,$1A(a0)
000153FC 5068 000C                  		addq.w	#8,$C(a0)
00015400 317C 0300 0010             		move.w	#$300,$10(a0)
00015406 0828 0000 0022             		btst	#0,$22(a0)
0001540C 6600                       		bne.s	Obj62_Sound
0001540E 4468 0010                  		neg.w	$10(a0)
00015412                            
00015412                            Obj62_Sound:
00015412 303C 00AE                  		move.w	#$AE,d0
00015416 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play lava ball sound
0001541C                            
0001541C                            Obj62_AniFire:				; XREF: Obj62_Index
0001541C 1038 FE05                  		move.b	($FFFFFE05).w,d0
00015420 0200 0007                  		andi.b	#7,d0
00015424 6600                       		bne.s	Obj62_StopFire
00015426 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
0001542C                            
0001542C                            Obj62_StopFire:
0001542C 6100 B006                  		bsr.w	SpeedToPos
00015430 0828 0000 0022             		btst	#0,$22(a0)
00015436 6600                       		bne.s	Obj62_StopFire2
00015438 76F8                       		moveq	#-8,d3
0001543A 6100 0000                  		bsr.w	ObjHitWallLeft
0001543E 4A41                       		tst.w	d1
00015440 6B00 B054                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00015444 4E75                       		rts	
00015446                            ; ===========================================================================
00015446                            
00015446                            Obj62_StopFire2:
00015446 7608                       		moveq	#8,d3
00015448 6100 0000                  		bsr.w	ObjHitWallRight
0001544C 4A41                       		tst.w	d1
0001544E 6B00 B046                  		bmi.w	DeleteObject
00015452 4E75                       		rts	
00015454                            ; ===========================================================================
00015454                            ; ---------------------------------------------------------------------------
00015454                            ; Sprite mappings - gargoyle head (LZ)
00015454                            ; ---------------------------------------------------------------------------
00015454                            Map_obj62:
00015454                            	include "_maps\obj62.asm"
00015454                            ; ---------------------------------------------------------------------------
00015454                            ; Sprite mappings - gargoyle head (LZ)
00015454                            ; ---------------------------------------------------------------------------
00015454 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00015458 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
0001545C 03                         byte_12320:	dc.b 3
0001545D F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00015462 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00015467 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
0001546C 01                         byte_12330:	dc.b 1
0001546D FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00015472 01                         byte_12336:	dc.b 1
00015473 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00015478                            		even
00015478                            		even
00015478                            
00015478                            ; ===========================================================================
00015478                            ; ---------------------------------------------------------------------------
00015478                            ; Object 63 - platforms	on a conveyor belt (LZ)
00015478                            ; ---------------------------------------------------------------------------
00015478                            
00015478                            Obj63:					; XREF: Obj_Index
00015478 7000                       		moveq	#0,d0
0001547A 1028 0024                  		move.b	$24(a0),d0
0001547E 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00015482 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00015486 3028 0030                  		move.w	$30(a0),d0
0001548A 0240 FF80                  		andi.w	#$FF80,d0
0001548E 3238 F700                  		move.w	($FFFFF700).w,d1
00015492 0441 0080                  		subi.w	#$80,d1
00015496 0241 FF80                  		andi.w	#$FF80,d1
0001549A 9041                       		sub.w	d1,d0
0001549C 0C40 0280                  		cmpi.w	#$280,d0
000154A0 6200                       		bhi.s	loc_1236A
000154A2                            
000154A2                            Obj63_Display:				; XREF: loc_1236A
000154A2 6000 AFB6                  		bra.w	DisplaySprite
000154A6                            ; ===========================================================================
000154A6                            
000154A6                            loc_1236A:				; XREF: Obj63
000154A6 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
000154AC 6600                       		bne.s	loc_12378
000154AE 0C40 FF80                  		cmpi.w	#-$80,d0
000154B2 64EE                       		bcc.s	Obj63_Display
000154B4                            
000154B4                            loc_12378:
000154B4 1028 002F                  		move.b	$2F(a0),d0
000154B8 6A00 AFDC                  		bpl.w	DeleteObject
000154BC 0240 007F                  		andi.w	#$7F,d0
000154C0 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000154C4 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000154CA 6000 AFCA                  		bra.w	DeleteObject
000154CE                            ; ===========================================================================
000154CE 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
000154D0 0000                       		dc.w loc_124B2-Obj63_Index
000154D2 0000                       		dc.w loc_124C2-Obj63_Index
000154D4 0000                       		dc.w loc_124DE-Obj63_Index
000154D6                            ; ===========================================================================
000154D6                            
000154D6                            Obj63_Main:				; XREF: Obj63_Index
000154D6 1028 0028                  		move.b	$28(a0),d0
000154DA 6B00 0000                  		bmi.w	loc_12460
000154DE 5428 0024                  		addq.b	#2,$24(a0)
000154E2 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
000154EA 317C 43F6 0002             		move.w	#$43F6,2(a0)
000154F0 0028 0004 0001             		ori.b	#4,1(a0)
000154F6 117C 0010 0019             		move.b	#$10,$19(a0)
000154FC 117C 0004 0018             		move.b	#4,$18(a0)
00015502 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00015508 6600                       		bne.s	loc_123E2
0001550A 5828 0024                  		addq.b	#4,$24(a0)
0001550E 317C 03F6 0002             		move.w	#$3F6,2(a0)
00015514 117C 0001 0018             		move.b	#1,$18(a0)
0001551A 6000 0000                  		bra.w	loc_124DE
0001551E                            ; ===========================================================================
0001551E                            
0001551E                            loc_123E2:
0001551E 117C 0004 001A             		move.b	#4,$1A(a0)
00015524 7000                       		moveq	#0,d0
00015526 1028 0028                  		move.b	$28(a0),d0
0001552A 3200                       		move.w	d0,d1
0001552C E648                       		lsr.w	#3,d0
0001552E 0240 001E                  		andi.w	#$1E,d0
00015532 45FA 0000                  		lea	Obj63_Data(pc),a2
00015536 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001553A 315A 0038                  		move.w	(a2)+,$38(a0)
0001553E 315A 0030                  		move.w	(a2)+,$30(a0)
00015542 214A 003C                  		move.l	a2,$3C(a0)
00015546 0241 000F                  		andi.w	#$F,d1
0001554A E549                       		lsl.w	#2,d1
0001554C 1141 0038                  		move.b	d1,$38(a0)
00015550 117C 0004 003A             		move.b	#4,$3A(a0)
00015556 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001555A 6700                       		beq.s	loc_1244C
0001555C 117C 0001 003B             		move.b	#1,$3B(a0)
00015562 4428 003A                  		neg.b	$3A(a0)
00015566 7200                       		moveq	#0,d1
00015568 1228 0038                  		move.b	$38(a0),d1
0001556C D228 003A                  		add.b	$3A(a0),d1
00015570 B228 0039                  		cmp.b	$39(a0),d1
00015574 6500                       		bcs.s	loc_12448
00015576 1001                       		move.b	d1,d0
00015578 7200                       		moveq	#0,d1
0001557A 4A00                       		tst.b	d0
0001557C 6A00                       		bpl.s	loc_12448
0001557E 1228 0039                  		move.b	$39(a0),d1
00015582 5901                       		subq.b	#4,d1
00015584                            
00015584                            loc_12448:
00015584 1141 0038                  		move.b	d1,$38(a0)
00015588                            
00015588                            loc_1244C:
00015588 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001558E 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00015594 6100 0000                  		bsr.w	Obj63_ChangeDir
00015598 6000 0000                  		bra.w	loc_124B2
0001559C                            ; ===========================================================================
0001559C                            
0001559C                            loc_12460:				; XREF: Obj63_Main
0001559C 1140 002F                  		move.b	d0,$2F(a0)
000155A0 0240 007F                  		andi.w	#$7F,d0
000155A4 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000155A8 08F2 0000 0000             		bset	#0,(a2,d0.w)
000155AE 6600 AEE6                  		bne.w	DeleteObject
000155B2 D040                       		add.w	d0,d0
000155B4 0240 001E                  		andi.w	#$1E,d0
000155B8 0640 0070                  		addi.w	#$70,d0
000155BC 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000155C2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000155C6 321A                       		move.w	(a2)+,d1
000155C8 2248                       		movea.l	a0,a1
000155CA 6000                       		bra.s	Obj63_MakePtfms
000155CC                            ; ===========================================================================
000155CC                            
000155CC                            Obj63_Loop:
000155CC 6100 B312                  		bsr.w	SingleObjLoad
000155D0 6600                       		bne.s	loc_124AA
000155D2                            
000155D2                            Obj63_MakePtfms:			; XREF: loc_12460
000155D2 12BC 0063                  		move.b	#$63,0(a1)
000155D6 335A 0008                  		move.w	(a2)+,8(a1)
000155DA 335A 000C                  		move.w	(a2)+,$C(a1)
000155DE 301A                       		move.w	(a2)+,d0
000155E0 1340 0028                  		move.b	d0,$28(a1)
000155E4                            
000155E4                            loc_124AA:
000155E4 51C9 FFE6                  		dbf	d1,Obj63_Loop
000155E8                            
000155E8 588F                       		addq.l	#4,sp
000155EA 4E75                       		rts	
000155EC                            ; ===========================================================================
000155EC                            
000155EC                            loc_124B2:				; XREF: Obj63_Index
000155EC 7200                       		moveq	#0,d1
000155EE 1228 0019                  		move.b	$19(a0),d1
000155F2 4EB9 0000 9F78             		jsr	(PlatformObject).l
000155F8 6000 0000                  		bra.w	sub_12502
000155FC                            ; ===========================================================================
000155FC                            
000155FC                            loc_124C2:				; XREF: Obj63_Index
000155FC 7200                       		moveq	#0,d1
000155FE 1228 0019                  		move.b	$19(a0),d1
00015602 4EB9 0000 A0EC             		jsr	(ExitPlatform).l
00015608 3F28 0008                  		move.w	8(a0),-(sp)
0001560C 6100 0000                  		bsr.w	sub_12502
00015610 341F                       		move.w	(sp)+,d2
00015612 4EF9 0000 A656             		jmp	(MvSonicOnPtfm2).l
00015618                            ; ===========================================================================
00015618                            
00015618                            loc_124DE:				; XREF: Obj63_Index
00015618 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001561C 0240 0003                  		andi.w	#3,d0
00015620 6600                       		bne.s	loc_124FC
00015622 7201                       		moveq	#1,d1
00015624 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00015628 6700                       		beq.s	loc_124F2
0001562A 4401                       		neg.b	d1
0001562C                            
0001562C                            loc_124F2:
0001562C D328 001A                  		add.b	d1,$1A(a0)
00015630 0228 0003 001A             		andi.b	#3,$1A(a0)
00015636                            
00015636                            loc_124FC:
00015636 588F                       		addq.l	#4,sp
00015638 6000 D136                  		bra.w	MarkObjGone
0001563C                            
0001563C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001563C                            
0001563C                            
0001563C                            sub_12502:				; XREF: loc_124B2; loc_124C2
0001563C 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00015640 6700                       		beq.s	loc_12520
00015642 4A28 003B                  		tst.b	$3B(a0)
00015646 6600                       		bne.s	loc_12520
00015648 117C 0001 003B             		move.b	#1,$3B(a0)
0001564E 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00015654 4428 003A                  		neg.b	$3A(a0)
00015658 6000                       		bra.s	loc_12534
0001565A                            ; ===========================================================================
0001565A                            
0001565A                            loc_12520:
0001565A 3028 0008                  		move.w	8(a0),d0
0001565E B068 0034                  		cmp.w	$34(a0),d0
00015662 6600                       		bne.s	loc_1256A
00015664 3028 000C                  		move.w	$C(a0),d0
00015668 B068 0036                  		cmp.w	$36(a0),d0
0001566C 6600                       		bne.s	loc_1256A
0001566E                            
0001566E                            loc_12534:
0001566E 7200                       		moveq	#0,d1
00015670 1228 0038                  		move.b	$38(a0),d1
00015674 D228 003A                  		add.b	$3A(a0),d1
00015678 B228 0039                  		cmp.b	$39(a0),d1
0001567C 6500                       		bcs.s	loc_12552
0001567E 1001                       		move.b	d1,d0
00015680 7200                       		moveq	#0,d1
00015682 4A00                       		tst.b	d0
00015684 6A00                       		bpl.s	loc_12552
00015686 1228 0039                  		move.b	$39(a0),d1
0001568A 5901                       		subq.b	#4,d1
0001568C                            
0001568C                            loc_12552:
0001568C 1141 0038                  		move.b	d1,$38(a0)
00015690 2268 003C                  		movea.l	$3C(a0),a1
00015694 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001569A 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000156A0 6100 0000                  		bsr.w	Obj63_ChangeDir
000156A4                            
000156A4                            loc_1256A:
000156A4 6100 AD8E                  		bsr.w	SpeedToPos
000156A8 4E75                       		rts	
000156AA                            ; End of function sub_12502
000156AA                            
000156AA                            
000156AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156AA                            
000156AA                            
000156AA                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
000156AA 7000                       		moveq	#0,d0
000156AC 343C FF00                  		move.w	#-$100,d2
000156B0 3028 0008                  		move.w	8(a0),d0
000156B4 9068 0034                  		sub.w	$34(a0),d0
000156B8 6400                       		bcc.s	loc_12584
000156BA 4440                       		neg.w	d0
000156BC 4442                       		neg.w	d2
000156BE                            
000156BE                            loc_12584:
000156BE 7200                       		moveq	#0,d1
000156C0 363C FF00                  		move.w	#-$100,d3
000156C4 3228 000C                  		move.w	$C(a0),d1
000156C8 9268 0036                  		sub.w	$36(a0),d1
000156CC 6400                       		bcc.s	loc_12598
000156CE 4441                       		neg.w	d1
000156D0 4443                       		neg.w	d3
000156D2                            
000156D2                            loc_12598:
000156D2 B240                       		cmp.w	d0,d1
000156D4 6500                       		bcs.s	loc_125C2
000156D6 3028 0008                  		move.w	8(a0),d0
000156DA 9068 0034                  		sub.w	$34(a0),d0
000156DE 6700                       		beq.s	loc_125AE
000156E0 48C0                       		ext.l	d0
000156E2 E180                       		asl.l	#8,d0
000156E4 81C1                       		divs.w	d1,d0
000156E6 4440                       		neg.w	d0
000156E8                            
000156E8                            loc_125AE:
000156E8 3140 0010                  		move.w	d0,$10(a0)
000156EC 3143 0012                  		move.w	d3,$12(a0)
000156F0 4840                       		swap	d0
000156F2 3140 000A                  		move.w	d0,$A(a0)
000156F6 4268 000E                  		clr.w	$E(a0)
000156FA 4E75                       		rts	
000156FC                            ; ===========================================================================
000156FC                            
000156FC                            loc_125C2:				; XREF: Obj63_ChangeDir
000156FC 3228 000C                  		move.w	$C(a0),d1
00015700 9268 0036                  		sub.w	$36(a0),d1
00015704 6700                       		beq.s	loc_125D4
00015706 48C1                       		ext.l	d1
00015708 E181                       		asl.l	#8,d1
0001570A 83C0                       		divs.w	d0,d1
0001570C 4441                       		neg.w	d1
0001570E                            
0001570E                            loc_125D4:
0001570E 3141 0012                  		move.w	d1,$12(a0)
00015712 3142 0010                  		move.w	d2,$10(a0)
00015716 4841                       		swap	d1
00015718 3141 000E                  		move.w	d1,$E(a0)
0001571C 4268 000A                  		clr.w	$A(a0)
00015720 4E75                       		rts	
00015722                            ; End of function Obj63_ChangeDir
00015722                            
00015722                            ; ===========================================================================
00015722 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00015724 0000                       		dc.w word_12610-Obj63_Data
00015726 0000                       		dc.w word_12628-Obj63_Data
00015728 0000                       		dc.w word_1263C-Obj63_Data
0001572A 0000                       		dc.w word_12650-Obj63_Data
0001572C 0000                       		dc.w word_12668-Obj63_Data
0001572E 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
0001573E 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
0001574A 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
0001575A 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00015762 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00015776 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
0001578A 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
000157A2 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000157B6                            
000157B6                            ; ---------------------------------------------------------------------------
000157B6                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000157B6                            ; ---------------------------------------------------------------------------
000157B6                            Map_obj63:
000157B6                            	include "_maps\obj63.asm"
000157B6                            ; ---------------------------------------------------------------------------
000157B6                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000157B6                            ; ---------------------------------------------------------------------------
000157B6 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
000157BA 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
000157BE 0000                       		dc.w byte_1269E-Map_obj63
000157C0 01                         byte_12686:	dc.b 1
000157C1 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000157C6 01                         byte_1268C:	dc.b 1
000157C7 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000157CC 01                         byte_12692:	dc.b 1
000157CD F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000157D2 01                         byte_12698:	dc.b 1
000157D3 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000157D8 01                         byte_1269E:	dc.b 1
000157D9 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
000157DE                            		even
000157DE                            		even
000157DE                            
000157DE                            ; ===========================================================================
000157DE                            ; ---------------------------------------------------------------------------
000157DE                            ; Object 64 - bubbles (LZ)
000157DE                            ; ---------------------------------------------------------------------------
000157DE                            
000157DE                            Obj64:					; XREF: Obj_Index
000157DE 7000                       		moveq	#0,d0
000157E0 1028 0024                  		move.b	$24(a0),d0
000157E4 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
000157E8 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
000157EC                            ; ===========================================================================
000157EC 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
000157EE 0000                       		dc.w Obj64_Animate-Obj64_Index
000157F0 0000                       		dc.w Obj64_ChkWater-Obj64_Index
000157F2 0000                       		dc.w Obj64_Display2-Obj64_Index
000157F4 0000                       		dc.w Obj64_Delete3-Obj64_Index
000157F6 0000                       		dc.w Obj64_BblMaker-Obj64_Index
000157F8                            ; ===========================================================================
000157F8                            
000157F8                            Obj64_Main:				; XREF: Obj64_Index
000157F8 5428 0024                  		addq.b	#2,$24(a0)
000157FC 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00015804 317C 8348 0002             		move.w	#$8348,2(a0)
0001580A 117C 0084 0001             		move.b	#$84,1(a0)
00015810 117C 0010 0019             		move.b	#$10,$19(a0)
00015816 117C 0001 0018             		move.b	#1,$18(a0)
0001581C 1028 0028                  		move.b	$28(a0),d0	; get object type
00015820 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00015822 5028 0024                  		addq.b	#8,$24(a0)
00015826 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
0001582A 1140 0032                  		move.b	d0,$32(a0)
0001582E 1140 0033                  		move.b	d0,$33(a0)
00015832 117C 0006 001C             		move.b	#6,$1C(a0)
00015838 6000 0000                  		bra.w	Obj64_BblMaker
0001583C                            ; ===========================================================================
0001583C                            
0001583C                            Obj64_Bubble:				; XREF: Obj64_Main
0001583C 1140 001C                  		move.b	d0,$1C(a0)
00015840 3168 0008 0030             		move.w	8(a0),$30(a0)
00015846 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
0001584C 4EB9 0000 2CA2             		jsr	(RandomNumber).l
00015852 1140 0026                  		move.b	d0,$26(a0)
00015856                            
00015856                            Obj64_Animate:				; XREF: Obj64_Index
00015856 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001585C 4EB9 0000 D3EA             		jsr	AnimateSprite
00015862 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00015868 6600                       		bne.s	Obj64_ChkWater
0001586A 117C 0001 002E             		move.b	#1,$2E(a0)
00015870                            
00015870                            Obj64_ChkWater:				; XREF: Obj64_Index
00015870 3038 F646                  		move.w	($FFFFF646).w,d0
00015874 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00015878 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
0001587A                            
0001587A                            Obj64_Burst:				; XREF: Obj64_Wobble
0001587A 117C 0006 0024             		move.b	#6,$24(a0)
00015880 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00015884 6000 0000                  		bra.w	Obj64_Display2
00015888                            ; ===========================================================================
00015888                            
00015888                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00015888 1028 0026                  		move.b	$26(a0),d0
0001588C 5228 0026                  		addq.b	#1,$26(a0)
00015890 0240 007F                  		andi.w	#$7F,d0
00015894 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001589A 1031 0000                  		move.b	(a1,d0.w),d0
0001589E 4880                       		ext.w	d0
000158A0 D068 0030                  		add.w	$30(a0),d0
000158A4 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
000158A8 4A28 002E                  		tst.b	$2E(a0)
000158AC 6700                       		beq.s	Obj64_Display
000158AE 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
000158B2 6700                       		beq.s	Obj64_Display	; if not, branch
000158B4                            
000158B4 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
000158B8 303C 00AD                  		move.w	#$AD,d0
000158BC 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
000158C2 43F8 D000                  		lea	($FFFFD000).w,a1
000158C6 4269 0010                  		clr.w	$10(a1)
000158CA 4269 0012                  		clr.w	$12(a1)
000158CE 4269 0014                  		clr.w	$14(a1)
000158D2 137C 0015 001C             		move.b	#$15,$1C(a1)
000158D8 337C 0023 003E             		move.w	#$23,$3E(a1)
000158DE 137C 0000 003C             		move.b	#0,$3C(a1)
000158E4 08A9 0005 0022             		bclr	#5,$22(a1)
000158EA 08A9 0004 0022             		bclr	#4,$22(a1)
000158F0 0829 0002 0022             		btst	#2,$22(a1)
000158F6 6700 FF82                  		beq.w	Obj64_Burst
000158FA 08A9 0002 0022             		bclr	#2,$22(a1)
00015900 137C 0013 0016             		move.b	#$13,$16(a1)
00015906 137C 0009 0017             		move.b	#9,$17(a1)
0001590C 5B69 000C                  		subq.w	#5,$C(a1)
00015910 6000 FF68                  		bra.w	Obj64_Burst
00015914                            ; ===========================================================================
00015914                            
00015914                            Obj64_Display:				; XREF: Obj64_Wobble
00015914 6100 AB1E                  		bsr.w	SpeedToPos
00015918 4A28 0001                  		tst.b	1(a0)
0001591C 6A00                       		bpl.s	Obj64_Delete
0001591E 4EFA AB3A                  		jmp	DisplaySprite
00015922                            ; ===========================================================================
00015922                            
00015922                            Obj64_Delete:
00015922 4EFA AB72                  		jmp	DeleteObject
00015926                            ; ===========================================================================
00015926                            
00015926                            Obj64_Display2:				; XREF: Obj64_Index
00015926 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001592C 4EB9 0000 D3EA             		jsr	AnimateSprite
00015932 4A28 0001                  		tst.b	1(a0)
00015936 6A00                       		bpl.s	Obj64_Delete2
00015938 4EFA AB20                  		jmp	DisplaySprite
0001593C                            ; ===========================================================================
0001593C                            
0001593C                            Obj64_Delete2:
0001593C 4EFA AB58                  		jmp	DeleteObject
00015940                            ; ===========================================================================
00015940                            
00015940                            Obj64_Delete3:				; XREF: Obj64_Index
00015940 6000 AB54                  		bra.w	DeleteObject
00015944                            ; ===========================================================================
00015944                            
00015944                            Obj64_BblMaker:				; XREF: Obj64_Index
00015944 4A68 0036                  		tst.w	$36(a0)
00015948 6600                       		bne.s	loc_12874
0001594A 3038 F646                  		move.w	($FFFFF646).w,d0
0001594E B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00015952 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00015956 4A28 0001                  		tst.b	1(a0)
0001595A 6A00 0000                  		bpl.w	Obj64_ChkDel
0001595E 5368 0038                  		subq.w	#1,$38(a0)
00015962 6A00 0000                  		bpl.w	loc_12914
00015966 317C 0001 0036             		move.w	#1,$36(a0)
0001596C                            
0001596C                            loc_1283A:
0001596C 4EB9 0000 2CA2             		jsr	(RandomNumber).l
00015972 3200                       		move.w	d0,d1
00015974 0240 0007                  		andi.w	#7,d0
00015978 0C40 0006                  		cmpi.w	#6,d0
0001597C 64EE                       		bcc.s	loc_1283A
0001597E                            
0001597E 1140 0034                  		move.b	d0,$34(a0)
00015982 0241 000C                  		andi.w	#$C,d1
00015986 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
0001598C D2C1                       		adda.w	d1,a1
0001598E 2149 003C                  		move.l	a1,$3C(a0)
00015992 5328 0032                  		subq.b	#1,$32(a0)
00015996 6A00                       		bpl.s	loc_12872
00015998 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001599E 08E8 0007 0036             		bset	#7,$36(a0)
000159A4                            
000159A4                            loc_12872:
000159A4 6000                       		bra.s	loc_1287C
000159A6                            ; ===========================================================================
000159A6                            
000159A6                            loc_12874:				; XREF: Obj64_BblMaker
000159A6 5368 0038                  		subq.w	#1,$38(a0)
000159AA 6A00 0000                  		bpl.w	loc_12914
000159AE                            
000159AE                            loc_1287C:
000159AE 0C38 0002 FF8C                             cmpi.b	#2,($FFFFFF8C).w	; is Metal Sonic?
000159B4 6700 0000                                  beq.w   Obj0A_RtS    ; if yes, branch
000159B8 4EB9 0000 2CA2             		jsr	(RandomNumber).l
000159BE 0240 001F                  		andi.w	#$1F,d0
000159C2 3140 0038                  		move.w	d0,$38(a0)
000159C6 6100 AF18                  		bsr.w	SingleObjLoad
000159CA 6600                       		bne.s	loc_128F8
000159CC 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000159D0 3368 0008 0008             		move.w	8(a0),8(a1)
000159D6 4EB9 0000 2CA2             		jsr	(RandomNumber).l
000159DC 0240 000F                  		andi.w	#$F,d0
000159E0 5140                       		subq.w	#8,d0
000159E2 D169 0008                  		add.w	d0,8(a1)
000159E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000159EC 7000                       		moveq	#0,d0
000159EE 1028 0034                  		move.b	$34(a0),d0
000159F2 2468 003C                  		movea.l	$3C(a0),a2
000159F6 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
000159FC 0828 0007 0036             		btst	#7,$36(a0)
00015A02 6700                       		beq.s	loc_128F8
00015A04 4EB9 0000 2CA2             		jsr	(RandomNumber).l
00015A0A 0240 0003                  		andi.w	#3,d0
00015A0E 6600                       		bne.s	loc_128E4
00015A10 08E8 0006 0036             		bset	#6,$36(a0)
00015A16 6600                       		bne.s	loc_128F8
00015A18 137C 0002 0028             		move.b	#2,$28(a1)
00015A1E                            
00015A1E                            loc_128E4:
00015A1E 4A28 0034                  		tst.b	$34(a0)
00015A22 6600                       		bne.s	loc_128F8
00015A24 08E8 0006 0036             		bset	#6,$36(a0)
00015A2A 6600                       		bne.s	loc_128F8
00015A2C 137C 0002 0028             		move.b	#2,$28(a1)
00015A32                            
00015A32                            loc_128F8:
00015A32 5328 0034                  		subq.b	#1,$34(a0)
00015A36 6A00                       		bpl.s	loc_12914
00015A38 4EB9 0000 2CA2             		jsr	(RandomNumber).l
00015A3E 0240 007F                  		andi.w	#$7F,d0
00015A42 0640 0080                  		addi.w	#$80,d0
00015A46 D168 0038                  		add.w	d0,$38(a0)
00015A4A 4268 0036                  		clr.w	$36(a0)
00015A4E                            
00015A4E                            loc_12914:
00015A4E 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00015A54 4EB9 0000 D3EA             		jsr	AnimateSprite
00015A5A                            
00015A5A                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00015A5A 3028 0008                  		move.w	8(a0),d0
00015A5E 0240 FF80                  		andi.w	#$FF80,d0
00015A62 3238 F700                  		move.w	($FFFFF700).w,d1
00015A66 0441 0080                  		subi.w	#$80,d1
00015A6A 0241 FF80                  		andi.w	#$FF80,d1
00015A6E 9041                       		sub.w	d1,d0
00015A70 0C40 0280                  		cmpi.w	#$280,d0
00015A74 6200 AA20                  		bhi.w	DeleteObject
00015A78 3038 F646                  		move.w	($FFFFF646).w,d0
00015A7C B068 000C                  		cmp.w	$C(a0),d0
00015A80 6500 A9D8                  		bcs.w	DisplaySprite
00015A84                            		
00015A84                            Obj0A_RtS:
00015A84 4E75                                       rts	
00015A86                            ; ===========================================================================
00015A86                            ; bubble production sequence
00015A86                            
00015A86                            ; 0 = small bubble, 1 =	large bubble
00015A86                            
00015A86 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00015A98                            
00015A98                            ; ===========================================================================
00015A98                            
00015A98                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00015A98 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00015A9C 6B00                       		bmi.s	loc_12998
00015A9E 43F8 D000                  		lea	($FFFFD000).w,a1
00015AA2 3029 0008                  		move.w	8(a1),d0
00015AA6 3228 0008                  		move.w	8(a0),d1
00015AAA 0441 0010                  		subi.w	#$10,d1
00015AAE B240                       		cmp.w	d0,d1
00015AB0 6400                       		bcc.s	loc_12998
00015AB2 0641 0020                  		addi.w	#$20,d1
00015AB6 B240                       		cmp.w	d0,d1
00015AB8 6500                       		bcs.s	loc_12998
00015ABA 3029 000C                  		move.w	$C(a1),d0
00015ABE 3228 000C                  		move.w	$C(a0),d1
00015AC2 B240                       		cmp.w	d0,d1
00015AC4 6400                       		bcc.s	loc_12998
00015AC6 0641 0010                  		addi.w	#$10,d1
00015ACA B240                       		cmp.w	d0,d1
00015ACC 6500                       		bcs.s	loc_12998
00015ACE 7001                       		moveq	#1,d0
00015AD0 4E75                       		rts	
00015AD2                            ; ===========================================================================
00015AD2                            
00015AD2                            loc_12998:
00015AD2 7000                       		moveq	#0,d0
00015AD4 4E75                       		rts	
00015AD6                            ; ===========================================================================
00015AD6                            Ani_obj64:
00015AD6                            	include "_anim\obj64.asm"
00015AD6                            ; ---------------------------------------------------------------------------
00015AD6                            ; Animation script - bubbles (LZ)
00015AD6                            ; ---------------------------------------------------------------------------
00015AD6 0000                       		dc.w byte_129AA-Ani_obj64
00015AD8 0000                       		dc.w byte_129B0-Ani_obj64
00015ADA 0000                       		dc.w byte_129B6-Ani_obj64
00015ADC 0000                       		dc.w byte_129BE-Ani_obj64
00015ADE 0000                       		dc.w byte_129BE-Ani_obj64
00015AE0 0000                       		dc.w byte_129C0-Ani_obj64
00015AE2 0000                       		dc.w byte_129C6-Ani_obj64
00015AE4 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00015AEA 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00015AF0 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00015AF8 04FC                       byte_129BE:	dc.b 4,	$FC
00015AFA 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00015B00 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00015B06 00                         		even
00015B06 00                         		even
00015B06                            
00015B06                            ; ---------------------------------------------------------------------------
00015B06                            ; Sprite mappings - bubbles (LZ)
00015B06                            ; ---------------------------------------------------------------------------
00015B06                            Map_obj64:
00015B06                            	include "_maps\obj64.asm"
00015B06                            ; ---------------------------------------------------------------------------
00015B06                            ; Sprite mappings - bubbles (LZ)
00015B06                            ; ---------------------------------------------------------------------------
00015B06 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00015B0A 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00015B0E 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00015B12 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00015B16 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00015B1A 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00015B1E 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00015B22 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00015B26 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00015B2A 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00015B2E 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00015B32 0000                       		dc.w byte_12A9C-Map_obj64
00015B34 01                         byte_129FA:	dc.b 1
00015B35 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00015B3A 01                         byte_12A00:	dc.b 1
00015B3B FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00015B40 01                         byte_12A06:	dc.b 1
00015B41 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00015B46 01                         byte_12A0C:	dc.b 1
00015B47 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00015B4C 01                         byte_12A12:	dc.b 1
00015B4D F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00015B52 01                         byte_12A18:	dc.b 1
00015B53 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00015B58 01                         byte_12A1E:	dc.b 1
00015B59 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00015B5E 04                         byte_12A24:	dc.b 4
00015B5F F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00015B64 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00015B69 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00015B6E 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00015B73 04                         byte_12A39:	dc.b 4
00015B74 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00015B79 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00015B7E 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00015B83 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00015B88 01                         byte_12A4E:	dc.b 1
00015B89 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00015B8E 01                         byte_12A54:	dc.b 1
00015B8F F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00015B94 01                         byte_12A5A:	dc.b 1
00015B95 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00015B9A 01                         byte_12A60:	dc.b 1
00015B9B F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00015BA0 01                         byte_12A66:	dc.b 1
00015BA1 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00015BA6 01                         byte_12A6C:	dc.b 1
00015BA7 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00015BAC 01                         byte_12A72:	dc.b 1
00015BAD F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00015BB2 01                         byte_12A78:	dc.b 1
00015BB3 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00015BB8 01                         byte_12A7E:	dc.b 1
00015BB9 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00015BBE 01                         byte_12A84:	dc.b 1
00015BBF F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00015BC4 01                         byte_12A8A:	dc.b 1
00015BC5 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00015BCA 01                         byte_12A90:	dc.b 1
00015BCB F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00015BD0 01                         byte_12A96:	dc.b 1
00015BD1 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00015BD6 00                         byte_12A9C:	dc.b 0
00015BD8 00                         		even
00015BD8 00                         		even
00015BD8                            
00015BD8                            Ani_obj65:
00015BD8                            	include "_anim\obj65.asm"
00015BD8                            ; ---------------------------------------------------------------------------
00015BD8                            ; Animation script - waterfall (LZ)
00015BD8                            ; ---------------------------------------------------------------------------
00015BD8 0000                       		dc.w byte_12B4E-Ani_obj65
00015BDA 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00015BE0 00                         		even
00015BE0 00                         		even
00015BE0                            
00015BE0                            ; ---------------------------------------------------------------------------
00015BE0                            ; Sprite mappings - waterfalls (LZ)
00015BE0                            ; ---------------------------------------------------------------------------
00015BE0                            Mappios_obj65:
00015BE0                            	include "_maps\obj65.asm"
00015BE0                            ; ---------------------------------------------------------------------------
00015BE0                            ; Sprite mappings - waterfalls (LZ)
00015BE0                            ; ---------------------------------------------------------------------------
00015BE0 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00015BE4 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00015BE8 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00015BEC 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00015BF0 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00015BF4 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00015BF8 01                         byte_12B6C:	dc.b 1
00015BF9 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00015BFE 02                         byte_12B72:	dc.b 2
00015BFF F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00015C04 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00015C09 02                         byte_12B7D:	dc.b 2
00015C0A F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00015C0F 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00015C14 01                         byte_12B88:	dc.b 1
00015C15 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00015C1A 02                         byte_12B8E:	dc.b 2
00015C1B F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00015C20 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00015C25 01                         byte_12B99:	dc.b 1
00015C26 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00015C2B 01                         byte_12B9F:	dc.b 1
00015C2C F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00015C31 01                         byte_12BA5:	dc.b 1
00015C32 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00015C37 02                         byte_12BAB:	dc.b 2
00015C38 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00015C3D 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00015C42 02                         byte_12BB6:	dc.b 2
00015C43 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00015C48 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00015C4D 02                         byte_12BC1:	dc.b 2
00015C4E F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00015C53 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00015C58 02                         byte_12BCC:	dc.b 2
00015C59 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00015C5E F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00015C64 00                         		even
00015C64 00                         		even
00015C64                            
00015C64                            
00015C64                            ; ===========================================================================
00015C64                            ; ---------------------------------------------------------------------------
00015C64                            ; Object 05 - Spin Dash Dust
00015C64                            ; ---------------------------------------------------------------------------
00015C64                            ; Vladikcomper:	this code was absolutely rewriten
00015C64                            
00015C64                            Obj05:
00015C64 7000                       		moveq	#0,d0
00015C66 1028 0024                  		move.b	$24(a0),d0
00015C6A 323B 0000                  		move.w	Obj05_Index(pc,d0.w),d1
00015C6E 4EFB 1000                  		jmp	Obj05_Index(pc,d1.w)
00015C72                            
00015C72                            ; ===========================================================================
00015C72 0000                       Obj05_Index:	dc.w Obj05_Main-Obj05_Index	; 0
00015C74 0000                       		dc.w Obj05_Dust-Obj05_Index	; 2
00015C76                            
00015C76                            ; ===========================================================================
00015C76                            Obj05_Main:
00015C76 5428 0024                  		addq.b	#2,$24(a0)
00015C7A 217C 0000 0000 0004        		move.l	#Map_Obj05,4(a0)
00015C82 117C 0004 0001             		move.b	#4,1(a0)
00015C88 117C 0001 0018             		move.b	#1,$18(a0)
00015C8E 117C 0010 0019             		move.b	#$10,$19(a0)
00015C94 317C 07A0 0002             		move.w	#$7A0,2(a0)
00015C9A 317C F400 003C             		move.w	#$F400,$3C(a0)	; VRAM destination for DMA
00015CA0                            
00015CA0                            ; ===========================================================================
00015CA0                            Obj05_Dust:
00015CA0 45F8 D000                  		lea	($FFFFD000).w,a2; load Sonic object
00015CA4 0C2A 0006 0024             		cmpi.b	#6,$24(a2)	; is Sonic dying?
00015CAA 6400                       		bcc.s   Obj05_Rts	; if yes, branch
00015CAC 4A2A 0039                  		tst.b	$39(a2)		; is Sonic Spin Dashing?
00015CB0 6700                       		beq.s	Obj05_Rts	; if not, branch
00015CB2 116A 0001 0001             		move.b	1(a2),1(a0)
00015CB8 316A 0008 0008             		move.w	8(a2),8(a0)
00015CBE 316A 000C 000C             		move.w	$C(a2),$C(a0)
00015CC4 116A 0022 0022             		move.b	$22(a2),$22(a0)
00015CCA 0228 0001 0022             		andi.b	#1,$22(a0)
00015CD0                            
00015CD0                            Obj05_Display:
00015CD0 43F9 0000 0000             		lea	(Ani_Obj05).l,a1
00015CD6 4EB9 0000 D3EA             		jsr	AnimateSprite
00015CDC 6100                       		bsr.s	Load_SpinDust_DPLC
00015CDE 6000 A77A                  		bra.w	DisplaySprite
00015CE2                            
00015CE2                            Obj05_Rts:
00015CE2 4E75                       		rts
00015CE4                            ; ===========================================================================
00015CE4                            
00015CE4                            Load_SpinDust_DPLC:
00015CE4 7000                       		moveq	#0,d0
00015CE6 1028 001A                  		move.b	$1A(a0),d0
00015CEA B028 0030                  		cmp.b	$30(a0),d0
00015CEE 6700 0000                  		beq.w	locret_1DF36
00015CF2 1140 0030                  		move.b	d0,$30(a0)
00015CF6 45F9 0000 0000             		lea	(off_1E074).l,a2
00015CFC D040                       		add	d0,d0
00015CFE D4F2 0000                  		add	(a2,d0.w),a2
00015D02 3A1A                       		move	(a2)+,d5
00015D04 5345                       		subq	#1,d5
00015D06 6B00 0000                  		bmi.w	locret_1DF36
00015D0A 3828 003C                  		move.w	$3C(a0),d4	; load VRAM destination
00015D0E                             
00015D0E                            loc_1DF0A:
00015D0E 7200                       		moveq	#0,d1
00015D10 321A                       		move.w	(a2)+,d1
00015D12 3601                       		move.w	d1,d3
00015D14 E04B                       		lsr.w	#8,d3
00015D16 0243 00F0                  		andi.w	#$F0,d3
00015D1A 0643 0010                  		addi.w	#$10,d3
00015D1E 0241 0FFF                  		andi.w	#$FFF,d1
00015D22 EB89                       		lsl.l	#5,d1
00015D24 0681 0000 0000             		add.l	#Art_Dust,d1
00015D2A 3404                       		move	d4,d2
00015D2C D843                       		add	d3,d4
00015D2E D843                       		add	d3,d4
00015D30 4EB9 0000 136E             		jsr	(QueueDMATransfer).l
00015D36 51CD FFD6                  		dbf	d5,loc_1DF0A
00015D3A 4E75                       		rts
00015D3C                             
00015D3C                            locret_1DF36:
00015D3C 4E75                       		rts	
00015D3E                            
00015D3E                            ; ===========================================================================
00015D3E 0000                       Ani_Obj05:	dc.w byte_1DF4F-Ani_Obj05
00015D40 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b 1, $A, $B, $C, $D, $E, $F, $10, $FF
00015D4A 00                         		even
00015D4A                            
00015D4A                            ; -------------------------------------------------------------------------------
00015D4A                            ; Sprite Mappings - Spin Dust
00015D4A                            ; -------------------------------------------------------------------------------
00015D4A                            Map_Obj05:
00015D4A 0000                       	dc.w word_1DF8A-Map_Obj05; 0
00015D4C 0000                       	dc.w word_1DF8C-Map_Obj05; 1
00015D4E 0000                       	dc.w word_1DF96-Map_Obj05; 2
00015D50 0000                       	dc.w word_1DFA0-Map_Obj05; 3
00015D52 0000                       	dc.w word_1DFAA-Map_Obj05; 4
00015D54 0000                       	dc.w word_1DFB4-Map_Obj05; 5
00015D56 0000                       	dc.w word_1DFBE-Map_Obj05; 6
00015D58 0000                       	dc.w word_1DFC8-Map_Obj05; 7
00015D5A 0000                       	dc.w word_1DFD2-Map_Obj05; 8
00015D5C 0000                       	dc.w word_1DFDC-Map_Obj05; 9
00015D5E 0000                       	dc.w word_1DFE6-Map_Obj05; 10
00015D60 0000                       	dc.w word_1DFF0-Map_Obj05; 11
00015D62 0000                       	dc.w word_1DFFA-Map_Obj05; 12
00015D64 0000                       	dc.w word_1E004-Map_Obj05; 13
00015D66 0000                       	dc.w word_1E016-Map_Obj05; 14
00015D68 0000                       	dc.w word_1E028-Map_Obj05; 15
00015D6A 0000                       	dc.w word_1E03A-Map_Obj05; 16
00015D6C 0000                       	dc.w word_1E04C-Map_Obj05; 17
00015D6E 0000                       	dc.w word_1E056-Map_Obj05; 18
00015D70 0000                       	dc.w word_1E060-Map_Obj05; 19
00015D72 0000                       	dc.w word_1E06A-Map_Obj05; 20
00015D74 0000                       	dc.w word_1DF8A-Map_Obj05; 21
00015D76 00                         word_1DF8A:	dc.b 0
00015D77 01                         word_1DF8C:	dc.b 1
00015D78 F20D 0000 F0               		dc.b $F2, $0D, $0, 0,$F0; 0
00015D7D 01                         word_1DF96:	dc.b 1
00015D7E E20F 0000 F0               		dc.b $E2, $0F, $0, 0,$F0; 0
00015D83 01                         word_1DFA0:	dc.b 1
00015D84 E20F 0000 F0               		dc.b $E2, $0F, $0, 0,$F0; 0
00015D89 01                         word_1DFAA:	dc.b 1
00015D8A E20F 0000 F0               		dc.b $E2, $0F, $0, 0,$F0; 0
00015D8F 01                         word_1DFB4:	dc.b 1
00015D90 E20F 0000 F0               		dc.b $E2, $0F, $0, 0,$F0; 0
00015D95 01                         word_1DFBE:	dc.b 1
00015D96 E20F 0000 F0               		dc.b $E2, $0F, $0, 0,$F0; 0
00015D9B 01                         word_1DFC8:	dc.b 1
00015D9C F20D 0000 F0               		dc.b $F2, $0D, $0, 0,$F0; 0
00015DA1 01                         word_1DFD2:	dc.b 1
00015DA2 F20D 0000 F0               		dc.b $F2, $0D, $0, 0,$F0; 0
00015DA7 01                         word_1DFDC:	dc.b 1
00015DA8 F20D 0000 F0               		dc.b $F2, $0D, $0, 0,$F0; 0
00015DAD 01                         word_1DFE6:	dc.b 1
00015DAE 040D 0000 E0               		dc.b $4, $0D, $0, 0,$E0; 0
00015DB3 01                         word_1DFF0:	dc.b 1
00015DB4 040D 0000 E0               		dc.b $4, $0D, $0, 0,$E0; 0
00015DB9 01                         word_1DFFA:	dc.b 1
00015DBA 040D 0000 E0               		dc.b $4, $0D, $0, 0,$E0; 0
00015DBF 02                         word_1E004:	dc.b 2
00015DC0 F401 0000 E8               		dc.b $F4, $01, $0, 0,$E8; 0
00015DC5 040D 0002 E0               		dc.b $4, $0D, $0, 2,$E0; 4
00015DCA 02                         word_1E016:	dc.b 2
00015DCB F405 0000 E8               		dc.b $F4, $05, $0, 0,$E8; 0
00015DD0 040D 0004 E0               		dc.b $4, $0D, $0, 4,$E0; 4
00015DD5 02                         word_1E028:	dc.b 2
00015DD6 F409 0000 E0               		dc.b $F4, $09, $0, 0,$E0; 0
00015DDB 040D 0006 E0               		dc.b $4, $0D, $0, 6,$E0; 4
00015DE0 02                         word_1E03A:	dc.b 2
00015DE1 F409 0000 E0               		dc.b $F4, $09, $0, 0,$E0; 0
00015DE6 040D 0006 E0               		dc.b $4, $0D, $0, 6,$E0; 4
00015DEB 01                         word_1E04C:	dc.b 1
00015DEC F805 0000 F8               		dc.b $F8, $05, $0, 0,$F8; 0
00015DF1 01                         word_1E056:	dc.b 1
00015DF2 F805 0004 F8               		dc.b $F8, $05, $0, 4,$F8; 0
00015DF7 01                         word_1E060:	dc.b 1
00015DF8 F805 0008 F8               		dc.b $F8, $05, $0, 8,$F8; 0
00015DFD 01                         word_1E06A:	dc.b 1
00015DFE F805 000C F8               		dc.b $F8, $05, $0, $C,$F8; 0
00015E03 00                         		dc.b 0
00015E04                             
00015E04                            ; -------------------------------------------------------------------------------
00015E04                            ; Dynamic Pattern Load Cues - Spin Dust
00015E04                            ; -------------------------------------------------------------------------------
00015E04                            
00015E04 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00015E06 0000                       	dc word_1E0A2-off_1E074; 1
00015E08 0000                       	dc word_1E0A6-off_1E074; 2
00015E0A 0000                       	dc word_1E0AA-off_1E074; 3
00015E0C 0000                       	dc word_1E0AE-off_1E074; 4
00015E0E 0000                       	dc word_1E0B2-off_1E074; 5
00015E10 0000                       	dc word_1E0B6-off_1E074; 6
00015E12 0000                       	dc word_1E0BA-off_1E074; 7
00015E14 0000                       	dc word_1E0BE-off_1E074; 8
00015E16 0000                       	dc word_1E0C2-off_1E074; 9
00015E18 0000                       	dc word_1E0C6-off_1E074; 10
00015E1A 0000                       	dc word_1E0CA-off_1E074; 11
00015E1C 0000                       	dc word_1E0CE-off_1E074; 12
00015E1E 0000                       	dc word_1E0D2-off_1E074; 13
00015E20 0000                       	dc word_1E0D8-off_1E074; 14
00015E22 0000                       	dc word_1E0DE-off_1E074; 15
00015E24 0000                       	dc word_1E0E4-off_1E074; 16
00015E26 0000                       	dc word_1E0EA-off_1E074; 17
00015E28 0000                       	dc word_1E0EA-off_1E074; 18
00015E2A 0000                       	dc word_1E0EA-off_1E074; 19
00015E2C 0000                       	dc word_1E0EA-off_1E074; 20
00015E2E 0000                       	dc word_1E0EC-off_1E074; 21
00015E30 0000                       word_1E0A0:	dc 0
00015E32 0001                       word_1E0A2:	dc 1
00015E34 7000                       	dc $7000
00015E36 0001                       word_1E0A6:	dc 1
00015E38 F008                       	dc $F008
00015E3A 0001                       word_1E0AA:	dc 1
00015E3C F018                       	dc $F018
00015E3E 0001                       word_1E0AE:	dc 1
00015E40 F028                       	dc $F028
00015E42 0001                       word_1E0B2:	dc 1
00015E44 F038                       	dc $F038
00015E46 0001                       word_1E0B6:	dc 1
00015E48 F048                       	dc $F048
00015E4A 0001                       word_1E0BA:	dc 1
00015E4C 7058                       	dc $7058
00015E4E 0001                       word_1E0BE:	dc 1
00015E50 7060                       	dc $7060
00015E52 0001                       word_1E0C2:	dc 1
00015E54 7068                       	dc $7068
00015E56 0001                       word_1E0C6:	dc 1
00015E58 7070                       	dc $7070
00015E5A 0001                       word_1E0CA:	dc 1
00015E5C 7078                       	dc $7078
00015E5E 0001                       word_1E0CE:	dc 1
00015E60 7080                       	dc $7080
00015E62 0002                       word_1E0D2:	dc 2
00015E64 1088                       	dc $1088
00015E66 708A                       	dc $708A
00015E68 0002                       word_1E0D8:	dc 2
00015E6A 3092                       	dc $3092
00015E6C 7096                       	dc $7096
00015E6E 0002                       word_1E0DE:	dc 2
00015E70 509E                       	dc $509E
00015E72 70A4                       	dc $70A4
00015E74 0002                       word_1E0E4:	dc 2
00015E76 50AC                       	dc $50AC
00015E78 70B2                       	dc $70B2
00015E7A 0000                       word_1E0EA:	dc 0
00015E7C 0001                       word_1E0EC:	dc 1
00015E7E F0BA                       	dc $F0BA
00015E80                            	even
00015E80                            
00015E80                            
00015E80                            ; ===========================================================================
00015E80                            ; ---------------------------------------------------------------------------
00015E80                            ; Object 01 - Sonic
00015E80                            ; ---------------------------------------------------------------------------
00015E80                            
00015E80                            Obj01:					; XREF: Obj_Index
00015E80 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00015E84 6700                       		beq.s	Obj01_Normal	; if not, branch
00015E86 4EF9 0000 0000             		jmp	DebugMode
00015E8C                            ; ===========================================================================
00015E8C                            
00015E8C                            Obj01_Normal:
00015E8C 7000                       		moveq	#0,d0
00015E8E 1028 0024                  		move.b	$24(a0),d0
00015E92 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00015E96 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00015E9A                            ; ===========================================================================
00015E9A 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00015E9C 0000                       		dc.w Obj01_Control-Obj01_Index
00015E9E 0000                       		dc.w Obj01_Hurt-Obj01_Index
00015EA0 0000                       		dc.w Obj01_Death-Obj01_Index
00015EA2 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00015EA4                            ; ===========================================================================
00015EA4                            
00015EA4                            Obj01_Main:				; XREF: Obj01_Index
00015EA4 5428 0024                  		addq.b	#2,$24(a0)	; switch to the next routine, so this won't run twice
00015EA8 117C 0013 0016             		move.b	#$13,$16(a0)
00015EAE 117C 0009 0017             		move.b	#9,$17(a0)
00015EB4 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00015EBC 317C 0780 0002             		move.w	#$780,2(a0)
00015EC2 117C 0002 0018             		move.b	#2,$18(a0)
00015EC8 117C 0018 0019             		move.b	#$18,$19(a0)
00015ECE 117C 0004 0001             		move.b	#4,1(a0)
00015ED4 31FC 0700 F760             		move.w	#$700,($FFFFF760).w	; Sonic's Top Speed
00015EDA 31FC 000C F762             		move.w	#$C,($FFFFF762).w	; Sonic's acceleration
00015EE0 31FC 0080 F764             		move.w	#$80,($FFFFF764).w	; Sonic's deceleration
00015EE6                            	;if _SPINDASH_
00015EE6                            		;move.b	#5,$FFFFD1C0.w	; create Spin Dust object
00015EE6                            	;endc
00015EE6 4A38 FE30                                  tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00015EEA 6600 0000                  		bne.w	ClrWinFlg	; if yes, branch
00015EEE 0C78 0000 FE10                             cmpi.w	#$000,($FFFFFE10).w	; is level GHZ1?
00015EF4 6700 0000                                  beq.w   GottaGoFast
00015EF8 0C78 0002 FE10                             cmpi.w	#$002,($FFFFFE10).w	; is level GHZ3?
00015EFE 6700 0000                                  beq.w   GottaGoSlow
00015F02 0C78 0200 FE10                             cmpi.w	#$200,($FFFFFE10).w	; is level MZ1?
00015F08 6700 0000                                  beq.w   GottaGoSlow
00015F0C 0C78 0400 FE10                             cmpi.w	#$400,($FFFFFE10).w ; is level SYZ1?
00015F12 6700 0000                  		beq.w	GottaGoFast	; if yes, branch
00015F16 0C78 0401 FE10                             cmpi.w	#$401,($FFFFFE10).w ; is level SYZ2?
00015F1C 6700 0000                  		beq.w	GottaGoSlow	; if yes, branch
00015F20 0C78 0500 FE10                             cmpi.w	#$500,($FFFFFE10).w ; is level SBZ1?
00015F26 6700 0000                  		beq.w	GottaGoSlow	; if yes, branch
00015F2A 0C78 0300 FE10                             cmpi.w	#$300,($FFFFFE10).w ; is level SLZ1?
00015F30 6700 0000                  		beq.w	GottaGoFast	; if yes, branch
00015F34 6000 0000                                  bra.w   ClrWinFlg
00015F38                            
00015F38                            GottaGoFast:
00015F38 317C 0C00 0014                             move.w    #$C00,$14(a0)    ; set speed
00015F3E 117C 0001 001C                             move.b    #1,$1C(a0)
00015F44 6000                                       bra.s     ClrWinFlg
00015F46                            GottaGoSlow:
00015F46 317C 0300 0014                             move.w    #$300,$14(a0)    ; set speed
00015F4C 117C 0001 001C                             move.b    #1,$1C(a0)
00015F52                            
00015F52                            ClrWinFlg:
00015F52 11FC 0000 FFFE                             move.b	#0,($FFFFFFFE).w   ; clear win flag
00015F58                            
00015F58                            Obj01_Control:				; XREF: Obj01_Index
00015F58 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00015F5C 6700                       		beq.s	loc_12C58	; if not, branch
00015F5E 0838 0004 F605             		btst	#iC,(Joypad|Press)	; is button C pressed?
00015F64 6700                       		beq.s	loc_12C58		; if not, branch
00015F66 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w	; change Sonic	into a ring/item
00015F6C 4238 F7CC                  		clr.b	($FFFFF7CC).w
00015F70 4E75                       		rts	
00015F72                            ; ===========================================================================
00015F72                            
00015F72                            loc_12C58:
00015F72 4A38 F7CC                  		tst.b	($FFFFF7CC).w		; are controls locked?
00015F76 6600                       		bne.s	loc_12C64		; if yes, branch
00015F78 31F8 F604 F602             		move.w	(Joypad),(SonicControl)	; enable joypad control
00015F7E                            
00015F7E                            loc_12C64:
00015F7E 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w	; is Sonic freezed?
00015F84 6600                       		bne.s	loc_12C7E		; if yes, branch
00015F86 7000                       		moveq	#0,d0
00015F88 1028 0022                  		move.b	$22(a0),d0	; byte $22 used as the secondary routine counter
00015F8C 0240 0006                  		andi.w	#%110,d0	; filter only bits #1 and #2
00015F90 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00015F94 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00015F98                            
00015F98                            loc_12C7E:
00015F98 6100                       		bsr.s	Sonic_Display
00015F9A 6100 0000                  		bsr.w	Sonic_RecordPos
00015F9E 6100 0000                  		bsr.w	Sonic_Water
00015FA2 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00015FA8 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00015FAE 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00015FB2 6700                       		beq.s	loc_12CA6
00015FB4 4A28 001C                  		tst.b	$1C(a0)
00015FB8 6600                       		bne.s	loc_12CA6
00015FBA 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00015FC0                            
00015FC0                            loc_12CA6:
00015FC0 6100 0000                  		bsr.w	Sonic_Animate
00015FC4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00015FC8 6B00                       		bmi.s	loc_12CB6
00015FCA 4EB9 0000 0000             		jsr	TouchResponse
00015FD0                            
00015FD0                            loc_12CB6:
00015FD0 6100 0000                  		bsr.w	Sonic_Loops
00015FD4 6100 0000                  		bsr.w	LoadSonicDynPLC
00015FD8 4E75                       		rts	
00015FDA                            ; ===========================================================================
00015FDA 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00015FDC 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00015FDE 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00015FE0 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00015FE2                            
00015FE2                            ; ===========================================================================
00015FE2                            
00015FE2                            Sonic_Display:				; XREF: loc_12C7E
00015FE2 3028 0030                  		move.w	$30(a0),d0	; move remaining invulnerability time to d0
00015FE6 6700                       		beq.s	Obj01_Display	; if it's zero, branch
00015FE8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00015FEC E648                       		lsr.w	#3,d0
00015FEE 6400                       		bcc.s	Obj01_ChkInvin	; skip sprite displaying
00015FF0                            
00015FF0                            Obj01_Display:
00015FF0 4EBA A468                  		jsr	DisplaySprite
00015FF4                            
00015FF4                            Obj01_ChkInvin:
00015FF4 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00015FF8 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
00015FFA 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00015FFE 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
00016000 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00016004 6600                       		bne.s	Obj01_ChkShoes	; if time remains, branch
00016006 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001600A 6600                       		bne.s	Obj01_RmvInvin
0001600C 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00016012 6500                       		bcs.s	Obj01_RmvInvin
00016014 7000                       		moveq	#0,d0
00016016 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001601A 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ3
00016020 6600                       		bne.s	Obj01_PlayMusic
00016022 7005                       		moveq	#5,d0		; play SBZ music
00016024                            
00016024                            Obj01_PlayMusic:
00016024 43F9 0000 5DC2             		lea	(MusicList).l,a1 ; load	music playlist
0001602A 1031 0000                  		move.b	(a1,d0.w),d0
0001602E 1238 FE11                  		move.b  ($FFFFFE11).w,d1
00016032 0C01 0003                                  cmpi.b	#3,d1		; is this act 4?
00016036 6600                                       bne.s   @Play		; if not, branch
00016038 5301                                       subi.b	#1,d1
0001603A D001                       	@Play:	add.b	d1,d0		; add act number to the current song
0001603C 4EB9 0000 12CA             		jsr	(PlaySound).l	; play music
00016042                            
00016042                            Obj01_RmvInvin:
00016042 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00016048                            
00016048                            Obj01_ChkShoes:
00016048 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
0001604C 6700                       		beq.s	Obj01_ExitChk	; if not, branch
0001604E 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00016052 6700                       		beq.s	Obj01_ExitChk
00016054 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00016058 6600                       		bne.s	Obj01_ExitChk	; if time remains, branch
0001605A                            
0001605A 31FC 0600 F760             		move.w	#$600,($FFFFF760).w	; restore Sonic's Top Speed
00016060 31FC 000C F762             		move.w	#$C,($FFFFF762).w	; restore Sonic's acceleration
00016066 31FC 0080 F764             		move.w	#$80,($FFFFF764).w	; restore Sonic's deceleration
0001606C 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w	; cancel speed	shoes
00016072 303C 00E3                  		move.w	#$E3,d0
00016076 4EF9 0000 12CA             		jmp	(PlaySound).l	; run music at normal speed
0001607C                            ; ===========================================================================
0001607C                            
0001607C                            Obj01_ExitChk:
0001607C 4E75                       		rts	
0001607E                            
0001607E                            ; ---------------------------------------------------------------------------
0001607E                            ; Subroutine to	record Sonic's previous positions for invincibility stars
0001607E                            ; ---------------------------------------------------------------------------
0001607E                            
0001607E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001607E                            
0001607E                            
0001607E                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death et al
0001607E 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00016082 43F8 CB00                  		lea	($FFFFCB00).w,a1 ; load previous positions array
00016086 43F1 0000                  		lea	(a1,d0.w),a1
0001608A 32E8 0008                  		move.w	8(a0),(a1)+
0001608E 32E8 000C                  		move.w	$C(a0),(a1)+
00016092 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00016096 4E75                       		rts	
00016098                            ; End of function Sonic_RecordPos
00016098                            
00016098                            ; ---------------------------------------------------------------------------
00016098                            ; Subroutine for Sonic when he's underwater
00016098                            ; ---------------------------------------------------------------------------
00016098                            
00016098                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016098                            
00016098                            
00016098                            Sonic_Water:				; XREF: loc_12C7E
00016098 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0001609E 6700                       		beq.s	Obj01_InWater	; if yes, branch
000160A0                            
000160A0                            locret_12D80:
000160A0 4E75                       		rts	
000160A2                            ; ===========================================================================
000160A2                            
000160A2                            Obj01_InWater:
000160A2 3038 F646                  		move.w	($FFFFF646).w,d0
000160A6 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
000160AA 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
000160AC 08E8 0006 0022             		bset	#6,$22(a0)	; is Sonic already in water?
000160B2 66EC                       		bne.s	locret_12D80	; if yes, branch
000160B4 6100 0000                  		bsr.w	ResumeMusic
000160B8 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
000160BE 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
000160C4 31FC 0300 F760             		move.w	#$300,($FFFFF760).w	; change Sonic's top speed
000160CA 31FC 0006 F762             		move.w	#6,($FFFFF762).w 	; change Sonic's acceleration
000160D0 31FC 0040 F764             		move.w	#$40,($FFFFF764).w	; change Sonic's deceleration
000160D6 E0E8 0010                  		asr	$10(a0)
000160DA E0E8 0012                  		asr	$12(a0)
000160DE E0E8 0012                  		asr	$12(a0)
000160E2 67BC                       		beq.s	locret_12D80
000160E4 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000160EA 303C 00AA                  		move.w	#$AA,d0
000160EE 4EF9 0000 12D0             		jmp	(PlaySound_Special).l ;	play splash sound
000160F4                            ; ===========================================================================
000160F4                            
000160F4                            Obj01_OutWater:
000160F4 08A8 0006 0022             		bclr	#6,$22(a0)	; is Sonic already out of water?
000160FA 67A4                       		beq.s	locret_12D80	; if yes, branch
000160FC 6100 0000                  		bsr.w	ResumeMusic
00016100 31FC 0600 F760             		move.w	#$600,($FFFFF760).w	; restore Sonic's speed
00016106 31FC 000C F762             		move.w	#$C,($FFFFF762).w	; restore Sonic's acceleration
0001610C 31FC 0080 F764             		move.w	#$80,($FFFFF764).w	; restore Sonic's deceleration
00016112 E1E8 0012                  		asl	$12(a0)
00016116 6700 FF88                  		beq.w	locret_12D80
0001611A 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00016120 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00016126 6E00                       		bgt.s	loc_12E0E
00016128 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
0001612E                            
0001612E                            loc_12E0E:
0001612E 303C 00AA                  		move.w	#$AA,d0
00016132 4EF9 0000 12D0             		jmp	(PlaySound_Special).l ;	play splash sound
00016138                            ; End of function Sonic_Water
00016138                            
00016138                            ; ===========================================================================
00016138                            ; ---------------------------------------------------------------------------
00016138                            ; Modes for controlling Sonic
00016138                            ; ---------------------------------------------------------------------------
00016138                            
00016138                            Obj01_MdNormal:				; XREF: Obj01_Modes
00016138 6100 0000                  		bsr.w	Sonic_SpinDash
0001613C 4EB9 0000 0000                             jsr     Sonic_Peelout
00016142 6100 0000                                  bsr.w	Sonic_Jump
00016146 6100 0000                  		bsr.w	Sonic_SlopeResist
0001614A 6100 0000                  		bsr.w	Sonic_Move
0001614E 6100 0000                  		bsr.w	Sonic_Roll
00016152 6100 0000                  		bsr.w	Sonic_LevelBound
00016156 4EBA A2DC                  		jsr	SpeedToPos
0001615A 6100 0000                  		bsr.w	Sonic_AnglePos
0001615E 6100 0000                  		bsr.w	Sonic_SlopeRepel
00016162 4E75                       		rts
00016164                            ; ===========================================================================
00016164                            
00016164                            Obj01_MdJump:				; XREF: Obj01_Modes
00016164 4228 0039                  		clr.b	$39(a0)		; clear Spin Dash flag
00016168 6100 0000                  		bsr.w	Sonic_JumpHeight
0001616C 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00016170 6100 0000                  		bsr.w	Sonic_LevelBound
00016174 4EBA A292                  		jsr	ObjectFall
00016178 0828 0006 0022             		btst	#6,$22(a0)	; is Sonic underwater?
0001617E 6700                       		beq.s	loc_12E5C	; if no, branch
00016180 0468 0028 0012             		subi.w	#$28,$12(a0)
00016186                            
00016186                            loc_12E5C:
00016186 6100 0000                  		bsr.w	Sonic_JumpAngle
0001618A 6100 0000                  		bsr.w	Sonic_Floor
0001618E 4E75                       		rts	
00016190                            ; ===========================================================================
00016190                            
00016190                            Obj01_MdRoll:				; XREF: Obj01_Modes
00016190 6100 0000                  		bsr.w	Sonic_Jump
00016194 6100 0000                  		bsr.w	Sonic_RollRepel
00016198 6100 0000                  		bsr.w	Sonic_RollSpeed
0001619C 6100 0000                  		bsr.w	Sonic_LevelBound
000161A0 4EBA A292                  		jsr	SpeedToPos
000161A4 6100 0000                  		bsr.w	Sonic_AnglePos
000161A8 6100 0000                  		bsr.w	Sonic_SlopeRepel
000161AC 4E75                       		rts	
000161AE                            ; ===========================================================================
000161AE                            
000161AE                            Obj01_MdJump2:				; XREF: Obj01_Modes
000161AE 6100 0000                  		bsr.w	Sonic_JumpDash
000161B2 4EB9 0000 0000                             jsr     Sonic_DoubleJump
000161B8 6100 0000                  		bsr.w	Sonic_JumpHeight
000161BC 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000161C0 6100 0000                  		bsr.w	Sonic_LevelBound
000161C4 4EBA A242                  		jsr	ObjectFall
000161C8 0828 0006 0022             		btst	#6,$22(a0)	; is Sonic underwater?
000161CE 6700                       		beq.s	loc_12EA6	; if no, branch
000161D0 0468 0028 0012             		subi.w	#$28,$12(a0)
000161D6                            
000161D6                            loc_12EA6:
000161D6 6100 0000                  		bsr.w	Sonic_JumpAngle
000161DA 6100 0000                  		bsr.w	Sonic_Floor
000161DE 4E75                       		rts	
000161E0                            ; ---------------------------------------------------------------------------
000161E0                            ; Subroutine to	make Sonic walk/run
000161E0                            ; ---------------------------------------------------------------------------
000161E0                            
000161E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161E0                            
000161E0                            
000161E0                            Sonic_Move:				; XREF: Obj01_MdNormal
000161E0 3C38 F760                  		move.w	($FFFFF760).w,d6
000161E4 3A38 F762                  		move.w	($FFFFF762).w,d5
000161E8 3838 F764                  		move.w	($FFFFF764).w,d4
000161EC 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000161F0 6600 0000                  		bne.w	loc_12FEE
000161F4 4A68 003E                  		tst.w	$3E(a0)
000161F8 6600 0000                  		bne.w	Obj01_ResetScr
000161FC 0838 0002 F602             		btst	#iLeft,(SonicControl|Held)	; is left being pressed?
00016202 6700                       		beq.s	Obj01_NotLeft			; if not, branch
00016204 6100 0000                  		bsr.w	Sonic_MoveLeft
00016208                            
00016208                            Obj01_NotLeft:
00016208 0838 0003 F602             		btst	#iRight,(SonicControl|Held)	; is right being pressed?
0001620E 6700                       		beq.s	Obj01_NotRight			; if not, branch
00016210 6100 0000                  		bsr.w	Sonic_MoveRight
00016214                            
00016214                            Obj01_NotRight:
00016214 1028 0026                  		move.b	$26(a0),d0
00016218 0600 0020                  		addi.b	#$20,d0
0001621C 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00016220 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00016224 4A68 0014                  		tst.w	$14(a0)		; test Sonic's inertia
00016228 6600 0000                  		bne.w	Obj01_ResetScr	; if it's not zero, branch
0001622C                            
0001622C 08A8 0005 0022             		bclr	#5,$22(a0)	; clear pushing flag
00016232 0C38 0001 FFFE                             cmpi.b	#1,($FFFFFFFE).w   ; is win flag set to 1?
00016238 6700                       		beq.s	locofz
0001623A 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00016240 6000                                       bra.s   Contloc              
00016242                            
00016242                            locofz: 
00016242 0C38 0001 FF8C                             cmpi.b	#1,($FFFFFF8C).w        ; is Mighty?
00016248 6700 0000                                  beq.w   MightyVictory
0001624C 0C38 0004 FF8C                             cmpi.b	#4,($FFFFFF8C).w        ; is Shadow?
00016252 6700 0000                                  beq.w   MightyVictory
00016256 0C38 0005 FF8C                             cmpi.b	#5,($FFFFFF8C).w        ; is Espio?
0001625C 6700 0000                                  beq.w   MightyVictory
00016260 317C 0000 0014                             move.w  #$0,$14(a0)     ;clear all speeds
00016266 11FC 0001 F7CC                             move.b	#1,($FFFFF7CC).w	; lock	controls
0001626C 337C 0000 0014                             move.w	#0,$14(a1)	; stop Sonic moving
00016272 31FC 0008 F602                             move.w	#(Right)<<0,(SonicControl) ; make Sonic stand
00016278 117C 0009 001C                             move.b  #9,$1C(a0)         ; WEEHAA! You got through act! It's flawless victory! Well done, Sonic!
0001627E 6000                                       bra.s   Contloc
00016280                            
00016280                            MightyVictory:
00016280 317C 0000 0014                             move.w  #$0,$14(a0)     ;clear all speeds
00016286 11FC 0001 F7CC                             move.b	#1,($FFFFF7CC).w	; lock	controls
0001628C 337C 0000 0014                             move.w	#0,$14(a1)	; stop Sonic moving
00016292 31FC 0008 F602                             move.w	#(Right)<<0,(SonicControl) ; make Sonic stand
00016298 11FC 0001 F7CC                             move.b	#1,($FFFFF7CC).w	; lock	controls
0001629E                                            ;move.b  #7,$17(a0)
0001629E 0C38 0004 FF8C                             cmpi.b	#4,($FFFFFF8C).w        ; is Shadow?
000162A4 6700 0000                                  beq.w   ShadowVictory
000162A8 0C38 0005 FF8C                             cmpi.b	#5,($FFFFFF8C).w        ; is Espio?
000162AE 6700 0000                                  beq.w   ShadowVictory
000162B2 117C 000A 001C                             move.b  #$A,$1C(a0)
000162B8 6000                                       bra.s   Contloc
000162BA                            
000162BA                            ShadowVictory:
000162BA 117C 0024 001C                             move.b  #$24,$1C(a0) ; I am too cool to dance like others
000162C0                            
000162C0                            Contloc:
000162C0 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on an object?
000162C6 6700                       		beq.s	Sonic_Balance 	; if not, branch
000162C8 7000                       		moveq	#0,d0
000162CA 1028 003D                  		move.b	$3D(a0),d0
000162CE ED48                       		lsl.w	#6,d0
000162D0 43F8 D000                  		lea	($FFFFD000).w,a1
000162D4 43F1 0000                  		lea	(a1,d0.w),a1
000162D8 4A29 0022                  		tst.b	$22(a1)
000162DC 6B00                       		bmi.s	Sonic_LookUp
000162DE 7200                       		moveq	#0,d1
000162E0 1229 0019                  		move.b	$19(a1),d1
000162E4 3401                       		move.w	d1,d2
000162E6 D442                       		add.w	d2,d2
000162E8 5942                       		subq.w	#4,d2
000162EA D268 0008                  		add.w	8(a0),d1
000162EE 9269 0008                  		sub.w	8(a1),d1
000162F2 0C41 0004                  		cmpi.w	#4,d1
000162F6 6D00                       		blt.s	loc_12F6A
000162F8 B242                       		cmp.w	d2,d1
000162FA 6C00                       		bge.s	loc_12F5A
000162FC 6000                       		bra.s	Sonic_LookUp
000162FE                            ; ===========================================================================
000162FE                            
000162FE                            Sonic_Balance:
000162FE 4EB9 0000 0000             		jsr	ObjHitFloor
00016304 0C41 000C                  		cmpi.w	#$C,d1
00016308 6D00                       		blt.s	Sonic_LookUp
0001630A 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00016310 6600                       		bne.s	loc_12F62
00016312                            
00016312                            loc_12F5A:
00016312 08A8 0000 0022             		bclr	#0,$22(a0)
00016318 6000                       		bra.s	loc_12F70
0001631A                            ; ===========================================================================
0001631A                            
0001631A                            loc_12F62:
0001631A 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00016320 6600                       		bne.s	Sonic_LookUp
00016322                            
00016322                            loc_12F6A:
00016322 08E8 0000 0022             		bset	#0,$22(a0)
00016328                            
00016328                            loc_12F70:
00016328 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
0001632E 6000                       		bra.s	Obj01_ResetScr
00016330                            ; ===========================================================================
00016330                            
00016330                            Sonic_LookUp:
00016330 0838 0000 F602             		btst	#iUp,(SonicControl|Held)	; is up being pressed?
00016336 6700                       		beq.s	Sonic_Duck			; if not, branch
00016338 117C 0007 001C             		move.b	#7,$1C(a0)			; use "looking up" animation
0001633E 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00016344 6700                       		beq.s	loc_12FC2
00016346 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001634A 6000                       		bra.s	loc_12FC2
0001634C                            ; ===========================================================================
0001634C                            
0001634C                            Sonic_Duck:
0001634C 0838 0001 F602             		btst	#iDown,(SonicControl|Held)	; is down being pressed?
00016352 6700                       		beq.s	Obj01_ResetScr			; if not, branch
00016354 117C 0008 001C             		move.b	#8,$1C(a0)			; use "ducking"	animation
0001635A 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00016360 6700                       		beq.s	loc_12FC2
00016362 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00016366 6000                       		bra.s	loc_12FC2
00016368                            ; ===========================================================================
00016368                            
00016368                            Obj01_ResetScr:
00016368 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
0001636E 6700                       		beq.s	loc_12FC2	; if yes, branch
00016370 6400                       		bcc.s	loc_12FBE
00016372 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00016376                            
00016376                            loc_12FBE:
00016376 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
0001637A                            
0001637A                            loc_12FC2:
0001637A 1038 F602 0200 000C        		theld	Left+Right,(SonicControl)
00016382 6600                       		bne.s	loc_12FEE	; if Left/Right held, branch
00016384 3028 0014                  		move.w	$14(a0),d0	; load Sonic's inertia to d0
00016388 6700                       		beq.s	loc_12FEE	; if it's zero, branch
0001638A 6B00                       		bmi.s	loc_12FE2	; if it's negative, branch
0001638C 9045                       		sub.w	d5,d0
0001638E 6400                       		bcc.s	loc_12FDC
00016390 303C 0000                  		move.w	#0,d0
00016394                            
00016394                            loc_12FDC:
00016394 3140 0014                  		move.w	d0,$14(a0)
00016398 6000                       		bra.s	loc_12FEE
0001639A                            ; ===========================================================================
0001639A                            
0001639A                            loc_12FE2:
0001639A D045                       		add.w	d5,d0
0001639C 6400                       		bcc.s	loc_12FEA
0001639E 303C 0000                  		move.w	#0,d0
000163A2                            
000163A2                            loc_12FEA:
000163A2 3140 0014                  		move.w	d0,$14(a0)
000163A6                            
000163A6                            loc_12FEE:
000163A6 1028 0026                  		move.b	$26(a0),d0
000163AA 4EB9 0000 2CC8             		jsr	(CalcSine).l
000163B0 C3E8 0014                  		muls.w	$14(a0),d1
000163B4 E081                       		asr.l	#8,d1
000163B6 3141 0010                  		move.w	d1,$10(a0)
000163BA C1E8 0014                  		muls.w	$14(a0),d0
000163BE E080                       		asr.l	#8,d0
000163C0 3140 0012                  		move.w	d0,$12(a0)
000163C4                            
000163C4                            loc_1300C:
000163C4 1028 0026                  		move.b	$26(a0),d0
000163C8 0600 0040                  		addi.b	#$40,d0
000163CC 6B00                       		bmi.s	locret_1307C
000163CE 123C 0040                  		move.b	#$40,d1
000163D2 4A68 0014                  		tst.w	$14(a0)
000163D6 6700                       		beq.s	locret_1307C
000163D8 6B00                       		bmi.s	loc_13024
000163DA 4441                       		neg.w	d1
000163DC                            
000163DC                            loc_13024:
000163DC 1028 0026                  		move.b	$26(a0),d0
000163E0 D001                       		add.b	d1,d0
000163E2 3F00                       		move.w	d0,-(sp)
000163E4 6100 0000                  		bsr.w	Sonic_WalkSpeed
000163E8 301F                       		move.w	(sp)+,d0
000163EA 4A41                       		tst.w	d1
000163EC 6A00                       		bpl.s	locret_1307C
000163EE E141                       		asl.w	#8,d1
000163F0 0600 0020                  		addi.b	#$20,d0
000163F4 0200 00C0                  		andi.b	#$C0,d0
000163F8 6700                       		beq.s	loc_13078
000163FA 0C00 0040                  		cmpi.b	#$40,d0
000163FE 6700                       		beq.s	loc_13066
00016400 0C00 0080                  		cmpi.b	#$80,d0
00016404 6700                       		beq.s	loc_13060
00016406 D368 0010                  		add.w	d1,$10(a0)
0001640A 08E8 0005 0022             		bset	#5,$22(a0)
00016410 317C 0000 0014             		move.w	#0,$14(a0)
00016416 4E75                       		rts	
00016418                            ; ===========================================================================
00016418                            
00016418                            loc_13060:
00016418 9368 0012                  		sub.w	d1,$12(a0)
0001641C 4E75                       		rts	
0001641E                            ; ===========================================================================
0001641E                            
0001641E                            loc_13066:
0001641E 9368 0010                  		sub.w	d1,$10(a0)
00016422 08E8 0005 0022             		bset	#5,$22(a0)
00016428 317C 0000 0014             		move.w	#0,$14(a0)
0001642E 4E75                       		rts	
00016430                            ; ===========================================================================
00016430                            
00016430                            loc_13078:
00016430 D368 0012                  		add.w	d1,$12(a0)
00016434                            
00016434                            locret_1307C:
00016434 4E75                       		rts	
00016436                            ; End of function Sonic_Move
00016436                            
00016436                            
00016436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016436                            
00016436                            
00016436                            Sonic_MoveLeft:				; XREF: Sonic_Move
00016436 3028 0014                  		move.w	$14(a0),d0	; load Sonic's inertia to d0
0001643A 6700                       		beq.s	loc_13086	; if it's zero, branch
0001643C 6A00                       		bpl.s	loc_130B2	; if it's positive, branch
0001643E                            
0001643E                            loc_13086:
0001643E 08E8 0000 0022             		bset	#0,$22(a0)	; set Sonic's orientation to 1 (left)
00016444 6600                       		bne.s	loc_1309A	; if orientation was already left, branch
00016446 08A8 0005 0022             		bclr	#5,$22(a0)	; clear pushing flag
0001644C 117C 0001 001D             		move.b	#1,$1D(a0)
00016452                            
00016452                            loc_1309A:
00016452 9045                       		sub.w	d5,d0
00016454 3206                       		move.w	d6,d1
00016456 4441                       		neg.w	d1
00016458 B041                       		cmp.w	d1,d0
0001645A 6E00                       		bgt.s	loc_130A6
0001645C D045                       		add.w   d5,d0
0001645E B041                       		cmp.w   d1,d0
00016460 6F00                       		ble.s   loc_130A6
00016462 3001                       		move.w	d1,d0
00016464                            
00016464                            loc_130A6:
00016464 3140 0014                  		move.w	d0,$14(a0)
00016468 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001646E 4E75                       		rts	
00016470                            ; ===========================================================================
00016470                            
00016470                            loc_130B2:				; XREF: Sonic_MoveLeft
00016470 9044                       		sub.w	d4,d0
00016472 6400                       		bcc.s	loc_130BA
00016474 303C FF80                  		move.w	#-$80,d0
00016478                            
00016478                            loc_130BA:
00016478 3140 0014                  		move.w	d0,$14(a0)
0001647C 1028 0026                  		move.b	$26(a0),d0
00016480 0600 0020                  		addi.b	#$20,d0
00016484 0200 00C0                  		andi.b	#$C0,d0
00016488 6600                       		bne.s	locret_130E8
0001648A 0C40 0400                  		cmpi.w	#$400,d0
0001648E 6D00                       		blt.s	locret_130E8
00016490 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00016496 08A8 0000 0022             		bclr	#0,$22(a0)
0001649C 303C 00A4                  		move.w	#$A4,d0
000164A0 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play stopping sound
000164A6                            
000164A6                            locret_130E8:
000164A6 4E75                       		rts	
000164A8                            ; End of function Sonic_MoveLeft
000164A8                            
000164A8                            
000164A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000164A8                            
000164A8                            
000164A8                            Sonic_MoveRight:			; XREF: Sonic_Move
000164A8 3028 0014                  		move.w	$14(a0),d0	; load Sonic's inertia to d0
000164AC 6B00                       		bmi.s	loc_13118	; if it's negative, branch
000164AE                            
000164AE 08A8 0000 0022             		bclr	#0,$22(a0)	; set Sonic's orientation to 0 (right)
000164B4 6700                       		beq.s	loc_13104	; if orientation was already right, branch
000164B6 08A8 0005 0022             		bclr	#5,$22(a0)	; clear pushing flag
000164BC 117C 0001 001D             		move.b	#1,$1D(a0)
000164C2                            
000164C2                            loc_13104:
000164C2 D045                       		add.w	d5,d0
000164C4 B046                       		cmp.w	d6,d0
000164C6 6D00                       		blt.s	loc_1310C
000164C8 9045                       		sub.w   d5,d0
000164CA B046                       		cmp.w   d6,d0
000164CC 6C00                       		bge.s   loc_1310C
000164CE 3006                       		move.w	d6,d0
000164D0                            
000164D0                            loc_1310C:
000164D0 3140 0014                  		move.w	d0,$14(a0)
000164D4 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000164DA 4E75                       		rts	
000164DC                            ; ===========================================================================
000164DC                            
000164DC                            loc_13118:				; XREF: Sonic_MoveRight
000164DC D044                       		add.w	d4,d0
000164DE 6400                       		bcc.s	loc_13120
000164E0 303C 0080                  		move.w	#$80,d0
000164E4                            
000164E4                            loc_13120:
000164E4 3140 0014                  		move.w	d0,$14(a0)
000164E8 1028 0026                  		move.b	$26(a0),d0
000164EC 0600 0020                  		addi.b	#$20,d0
000164F0 0200 00C0                  		andi.b	#$C0,d0
000164F4 6600                       		bne.s	locret_1314E
000164F6 0C40 FC00                  		cmpi.w	#-$400,d0
000164FA 6E00                       		bgt.s	locret_1314E
000164FC 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00016502 08E8 0000 0022             		bset	#0,$22(a0)
00016508 303C 00A4                  		move.w	#$A4,d0
0001650C 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play stopping sound
00016512                            
00016512                            locret_1314E:
00016512 4E75                       		rts	
00016514                            ; End of function Sonic_MoveRight
00016514                            
00016514                            ; ---------------------------------------------------------------------------
00016514                            ; Subroutine to	change Sonic's speed as he rolls
00016514                            ; ---------------------------------------------------------------------------
00016514                            
00016514                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016514                            
00016514                            
00016514                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00016514 3C38 F760                  		move.w	($FFFFF760).w,d6
00016518 E346                       		asl.w	#1,d6
0001651A 3A38 F762                  		move.w	($FFFFF762).w,d5
0001651E E245                       		asr.w	#1,d5
00016520 3838 F764                  		move.w	($FFFFF764).w,d4
00016524 E444                       		asr.w	#2,d4
00016526 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001652A 6600 0000                  		bne.w	loc_131CC
0001652E 4A68 003E                  		tst.w	$3E(a0)
00016532 6600                       		bne.s	loc_13188
00016534 0838 0002 F602             		btst	#iLeft,(SonicControl|Held)	; is left being pressed?
0001653A 6700                       		beq.s	loc_1317C			; if not, branch
0001653C 6100 0000                  		bsr.w	Sonic_RollLeft
00016540                            
00016540                            loc_1317C:
00016540 0838 0003 F602             		btst	#iRight,(SonicControl|Held)	; is right being pressed?
00016546 6700                       		beq.s	loc_13188			; if not, branch
00016548 6100 0000                  		bsr.w	Sonic_RollRight
0001654C                            
0001654C                            loc_13188:
0001654C 3028 0014                  		move.w	$14(a0),d0
00016550 6700                       		beq.s	loc_131AA
00016552 6B00                       		bmi.s	loc_1319E
00016554 9045                       		sub.w	d5,d0
00016556 6400                       		bcc.s	loc_13198
00016558 303C 0000                  		move.w	#0,d0
0001655C                            
0001655C                            loc_13198:
0001655C 3140 0014                  		move.w	d0,$14(a0)
00016560 6000                       		bra.s	loc_131AA
00016562                            ; ===========================================================================
00016562                            
00016562                            loc_1319E:				; XREF: Sonic_RollSpeed
00016562 D045                       		add.w	d5,d0
00016564 6400                       		bcc.s	loc_131A6
00016566 303C 0000                  		move.w	#0,d0
0001656A                            
0001656A                            loc_131A6:
0001656A 3140 0014                  		move.w	d0,$14(a0)
0001656E                            
0001656E                            loc_131AA:
0001656E 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00016572 6600                       		bne.s	loc_131CC	; if yes, branch
00016574 08A8 0002 0022             		bclr	#2,$22(a0)
0001657A 117C 0013 0016             		move.b	#$13,$16(a0)
00016580 117C 0009 0017             		move.b	#9,$17(a0)
00016586 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001658C 5B68 000C                  		subq.w	#5,$C(a0)
00016590                            
00016590                            loc_131CC:
00016590 1028 0026                  		move.b	$26(a0),d0
00016594 4EB9 0000 2CC8             		jsr	(CalcSine).l
0001659A C1E8 0014                  		muls.w	$14(a0),d0
0001659E E080                       		asr.l	#8,d0
000165A0 3140 0012                  		move.w	d0,$12(a0)
000165A4 C3E8 0014                  		muls.w	$14(a0),d1
000165A8 E081                       		asr.l	#8,d1
000165AA 0C41 1000                  		cmpi.w	#$1000,d1
000165AE 6F00                       		ble.s	loc_131F0
000165B0 323C 1000                  		move.w	#$1000,d1
000165B4                            
000165B4                            loc_131F0:
000165B4 0C41 F000                  		cmpi.w	#-$1000,d1
000165B8 6C00                       		bge.s	loc_131FA
000165BA 323C F000                  		move.w	#-$1000,d1
000165BE                            
000165BE                            loc_131FA:
000165BE 3141 0010                  		move.w	d1,$10(a0)
000165C2 6000 FE00                  		bra.w	loc_1300C
000165C6                            ; End of function Sonic_RollSpeed
000165C6                            
000165C6                            
000165C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000165C6                            
000165C6                            
000165C6                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
000165C6 3028 0014                  		move.w	$14(a0),d0	; load Sonic's inertia to d0
000165CA 6700                       		beq.s	loc_1320A	; if it's zero, branch
000165CC 6A00                       		bpl.s	loc_13218	; if it's positive, branch
000165CE                            
000165CE                            loc_1320A:
000165CE 08E8 0000 0022             		bset	#0,$22(a0)	; set orientation to #1 (left)
000165D4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000165DA 4E75                       		rts	
000165DC                            ; ===========================================================================
000165DC                            
000165DC                            loc_13218:
000165DC 9044                       		sub.w	d4,d0		; decrease inertia
000165DE 6400                       		bcc.s	loc_13220
000165E0 303C FF80                  		move.w	#-$80,d0
000165E4                            
000165E4                            loc_13220:
000165E4 3140 0014                  		move.w	d0,$14(a0)	; update Sonic's inertia
000165E8 4E75                       		rts	
000165EA                            ; End of function Sonic_RollLeft
000165EA                            
000165EA                            
000165EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000165EA                            
000165EA                            
000165EA                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
000165EA 3028 0014                  		move.w	$14(a0),d0	; load Sonic's inertia
000165EE 6B00                       		bmi.s	loc_1323A	; if it's negative, branch
000165F0 08A8 0000 0022             		bclr	#0,$22(a0)	; set orientation to #0 (rigth)
000165F6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000165FC 4E75                       		rts	
000165FE                            ; ===========================================================================
000165FE                            
000165FE                            loc_1323A:
000165FE D044                       		add.w	d4,d0		; increase inertia
00016600 6400                       		bcc.s	loc_13242
00016602 303C 0080                  		move.w	#$80,d0
00016606                            
00016606                            loc_13242:
00016606 3140 0014                  		move.w	d0,$14(a0)	; update Sonic's inertia
0001660A 4E75                       		rts	
0001660C                            ; End of function Sonic_RollRight
0001660C                            
0001660C                            ; ---------------------------------------------------------------------------
0001660C                            ; Subroutine to	change Sonic's direction while jumping
0001660C                            ; ---------------------------------------------------------------------------
0001660C                            
0001660C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001660C                            
0001660C                            
0001660C                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001660C 3C38 F760                  		move.w	($FFFFF760).w,d6
00016610 3A38 F762                  		move.w	($FFFFF762).w,d5
00016614 E345                       		asl.w	#1,d5
00016616 0828 0004 0022             		btst	#4,$22(a0)
0001661C 6600                       		bne.s	Obj01_ResetScr2
0001661E 3028 0010                  		move.w	$10(a0),d0
00016622 0838 0002 F602             		btst	#iLeft,(SonicControl|Held)	; is left being pressed?
00016628 6700                       		beq.s	loc_13278			; if not, branch
0001662A 08E8 0000 0022             		bset	#0,$22(a0)			; set orientation to #1 (left)
00016630 9045                       		sub.w	d5,d0
00016632 3206                       		move.w	d6,d1
00016634 4441                       		neg.w	d1
00016636 B041                       		cmp.w	d1,d0
00016638 6E00                       		bgt.s	loc_13278
0001663A D045                       		add.w   d5,d0
0001663C B041                       		cmp.w   d1,d0
0001663E 6F00                       		ble.s   loc_13278
00016640 3001                       		move.w	d1,d0
00016642                            
00016642                            loc_13278:
00016642 0838 0003 F602             		btst	#iRight,(SonicControl|Held).w	; is right being pressed?
00016648 6700                       		beq.s	Obj01_JumpMove			; if not, branch
0001664A 08A8 0000 0022             		bclr	#0,$22(a0)			; set orientation to #0 (right)
00016650 D045                       		add.w	d5,d0
00016652 B046                       		cmp.w	d6,d0
00016654 6D00                       		blt.s	Obj01_JumpMove
00016656 9045                       		sub.w   d5,d0
00016658 B046                       		cmp.w   d6,d0
0001665A 6C00                       		bge.s   Obj01_JumpMove
0001665C 3006                       		move.w	d6,d0
0001665E                            
0001665E                            Obj01_JumpMove:
0001665E 3140 0010                  		move.w	d0,$10(a0)		; change Sonic's horizontal speed
00016662                            
00016662                            Obj01_ResetScr2:
00016662 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w	; is the screen in its default position?
00016668 6700                       		beq.s	loc_132A4		; if yes, branch
0001666A 6400                       		bcc.s	loc_132A0
0001666C 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00016670                            
00016670                            loc_132A0:
00016670 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00016674                            
00016674                            loc_132A4:
00016674 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
0001667A 6500                       		bcs.s	locret_132D2	; if yes, branch
0001667C 3028 0010                  		move.w	$10(a0),d0
00016680 3200                       		move.w	d0,d1
00016682 EA41                       		asr.w	#5,d1
00016684 6700                       		beq.s	locret_132D2
00016686 6B00                       		bmi.s	loc_132C6
00016688 9041                       		sub.w	d1,d0
0001668A 6400                       		bcc.s	loc_132C0
0001668C 303C 0000                  		move.w	#0,d0
00016690                            
00016690                            loc_132C0:
00016690 3140 0010                  		move.w	d0,$10(a0)
00016694 4E75                       		rts	
00016696                            ; ===========================================================================
00016696                            
00016696                            loc_132C6:
00016696 9041                       		sub.w	d1,d0
00016698 6500                       		bcs.s	loc_132CE
0001669A 303C 0000                  		move.w	#0,d0
0001669E                            
0001669E                            loc_132CE:
0001669E 3140 0010                  		move.w	d0,$10(a0)
000166A2                            
000166A2                            locret_132D2:
000166A2 4E75                       		rts	
000166A4                            ; End of function Sonic_ChgJumpDir
000166A4                            
000166A4                            ; ===========================================================================
000166A4                            ; ---------------------------------------------------------------------------
000166A4                            ; Unused subroutine to squash Sonic
000166A4                            ; ---------------------------------------------------------------------------
000166A4 1028 0026                  		move.b	$26(a0),d0
000166A8 0600 0020                  		addi.b	#$20,d0
000166AC 0200 00C0                  		andi.b	#$C0,d0
000166B0 6600                       		bne.s	locret_13302
000166B2 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000166B6 4A41                       		tst.w	d1
000166B8 6A00                       		bpl.s	locret_13302
000166BA 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
000166C0 317C 0000 0010             		move.w	#0,$10(a0)
000166C6 317C 0000 0012             		move.w	#0,$12(a0)
000166CC 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
000166D2                            
000166D2                            locret_13302:
000166D2 4E75                       		rts	
000166D4                            ; ---------------------------------------------------------------------------
000166D4                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
000166D4                            ; ---------------------------------------------------------------------------
000166D4                            
000166D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166D4                            
000166D4                            
000166D4                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
000166D4 2228 0008                  		move.l	8(a0),d1	; load Sonic's X-pos to d1
000166D8 3028 0010                  		move.w	$10(a0),d0	; load Sonic's X-velocity to d0
000166DC 48C0                       		ext.l	d0
000166DE E180                       		asl.l	#8,d0
000166E0 D280                       		add.l	d0,d1
000166E2 4841                       		swap	d1
000166E4 3038 F728                  		move.w	($FFFFF728).w,d0
000166E8 0640 0010                  		addi.w	#$10,d0
000166EC B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000166EE 6200                       		bhi.s	Boundary_Sides	; if yes, branch
000166F0 3038 F72A                  		move.w	($FFFFF72A).w,d0
000166F4 0640 0128                  		addi.w	#$128,d0
000166F8 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000166FC 6600                       		bne.s	loc_13332
000166FE 0640 0040                  		addi.w	#$40,d0
00016702                            
00016702                            loc_13332:
00016702 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00016704 6300                       		bls.s	Boundary_Sides	; if yes, branch
00016706                            
00016706                            loc_13336:
00016706 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001670A 0640 00E0                  		addi.w	#$E0,d0
0001670E B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00016712 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00016714 4E75                       		rts	
00016716                            ; ===========================================================================
00016716                            
00016716                            Boundary_Bottom:
00016716 3038 F726                  		move.w	($FFFFF726).w,d0
0001671A 3238 F72E                  		move.w	($FFFFF72E).w,d1
0001671E B240                       		cmp.w	d0,d1			; screen still scrolling down?
00016720 6D00                       		blt.s	Boundary_Bottom_locret	; if so, don't kill Sonic
00016722 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w	; is level SBZ2 ?
00016728 6600 0000                  		bne.w	JmpTo_KillSonic		; if not, kill Sonic
0001672C 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00016732 6500 0000                  		bcs.w	JmpTo_KillSonic
00016736 4238 FE30                  		clr.b	($FFFFFE30).w		; clear lamppost counter
0001673A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w	; restart the level
00016740 31FC 0100 FE10             		move.w	#$100,($FFFFFE10).w	; set level to SBZ3 (LZ4)
00016746                             
00016746                            Boundary_Bottom_locret:
00016746 4E75                       		rts		
00016748                            ; ===========================================================================
00016748                            
00016748                            Boundary_Sides:
00016748 3140 0008                  		move.w	d0,8(a0)
0001674C 317C 0000 000A             		move.w	#0,$A(a0)
00016752 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00016758 317C 0000 0014             		move.w	#0,$14(a0)
0001675E 60A6                       		bra.s	loc_13336
00016760                            ; End of function Sonic_LevelBound
00016760                            
00016760                            ; ---------------------------------------------------------------------------
00016760                            ; Subroutine allowing Sonic to roll when he's moving
00016760                            ; ---------------------------------------------------------------------------
00016760                            
00016760                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016760                            
00016760                            
00016760                            Sonic_Roll:				; XREF: Obj01_MdNormal
00016760 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00016764 6600                       		bne.s	Obj01_NoRoll
00016766 3028 0014                  		move.w	$14(a0),d0
0001676A 6A00                       		bpl.s	loc_13392
0001676C 4440                       		neg.w	d0
0001676E                            
0001676E                            loc_13392:
0001676E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00016772 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00016774                            
00016774 1038 F602 0200 000C        		theld	Left+Right,(SonicControl)
0001677C 6600                       		bne.s	Obj01_NoRoll			; if Left/Right held, branch
0001677E 0838 0001 F602             		btst	#iDown,(SonicControl|Held)	; is down being pressed?
00016784 6600                       		bne.s	Obj01_ChkRoll			; if yes, branch
00016786                            
00016786                            Obj01_NoRoll:
00016786 4E75                       		rts	
00016788                            ; ===========================================================================
00016788                            
00016788                            Obj01_ChkRoll:
00016788 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
0001678E 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00016790 4E75                       		rts	
00016792                            ; ===========================================================================
00016792                            
00016792                            Obj01_DoRoll:
00016792 08E8 0002 0022             		bset	#2,$22(a0)
00016798 117C 000E 0016             		move.b	#$E,$16(a0)
0001679E 117C 0007 0017             		move.b	#7,$17(a0)
000167A4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000167AA 5A68 000C                  		addq.w	#5,$C(a0)
000167AE 303C 00BE                  		move.w	#$BE,d0
000167B2 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play rolling sound
000167B8 4A68 0014                  		tst.w	$14(a0)
000167BC 6600                       		bne.s	locret_133E8
000167BE 317C 0200 0014             		move.w	#$200,$14(a0)
000167C4                            
000167C4                            locret_133E8:
000167C4 4E75                       		rts	
000167C6                            ; End of function Sonic_Roll
000167C6                            
000167C6                            ; ---------------------------------------------------------------------------
000167C6                            ; Subroutine allowing Sonic to jump
000167C6                            ; ---------------------------------------------------------------------------
000167C6                            
000167C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167C6                            
000167C6                            
000167C6                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000167C6 1038 F603 0200 0070        		tpress	A+B+C,(SonicControl)	; is A,	B or C pressed?
000167CE 6700 0000                  		beq.w	locret_1348E		; if not, branch
000167D2 7000                       		moveq	#0,d0
000167D4 1028 0026                  		move.b	$26(a0),d0
000167D8 0600 0080                  		addi.b	#$80,d0
000167DC 6100 0000                  		bsr.w	sub_14D48
000167E0 0C41 0006                  		cmpi.w	#6,d1
000167E4 6D00 0000                  		blt.w	locret_1348E
000167E8 343C 0680                  		move.w	#$680,d2
000167EC 0828 0006 0022             		btst	#6,$22(a0)
000167F2 6700                       		beq.s	loc_1341C
000167F4 343C 0380                  		move.w	#$380,d2
000167F8                            
000167F8                            loc_1341C:
000167F8 7000                       		moveq	#0,d0
000167FA 1028 0026                  		move.b	$26(a0),d0
000167FE 0400 0040                  		subi.b	#$40,d0
00016802 4EB9 0000 2CC8             		jsr	(CalcSine).l
00016808 C3C2                       		muls.w	d2,d1
0001680A E081                       		asr.l	#8,d1
0001680C D368 0010                  		add.w	d1,$10(a0)	; set Jump X-vel
00016810 C1C2                       		muls.w	d2,d0
00016812 E080                       		asr.l	#8,d0
00016814 D168 0012                  		add.w	d0,$12(a0)	; set Jump Y-vel
00016818 08E8 0001 0022             		bset	#1,$22(a0)
0001681E 08A8 0005 0022             		bclr	#5,$22(a0)
00016824 588F                       		addq.l	#4,sp
00016826 117C 0001 003C             		move.b	#1,$3C(a0)
0001682C 4228 0038                  		clr.b	$38(a0)
00016830 303C 00A0                  		move.w	#$A0,d0
00016834 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play jumping sound
0001683A 117C 0013 0016             		move.b	#$13,$16(a0)
00016840 117C 0009 0017             		move.b	#9,$17(a0)
00016846 0828 0002 0022             		btst	#2,$22(a0)
0001684C 6600                       		bne.s	loc_13490
0001684E 117C 000E 0016             		move.b	#$E,$16(a0)
00016854 117C 0007 0017             		move.b	#7,$17(a0)
0001685A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00016860 08E8 0002 0022             		bset	#2,$22(a0)
00016866 5A68 000C                  		addq.w	#5,$C(a0)
0001686A                            
0001686A                            locret_1348E:
0001686A 4E75                       		rts	
0001686C                            ; ===========================================================================
0001686C                            
0001686C                            loc_13490:
0001686C 08E8 0004 0022             		bset	#4,$22(a0)
00016872 4E75                       		rts	
00016874                            ; End of function Sonic_Jump
00016874                            
00016874                            
00016874                            
00016874                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016874                            
00016874                            
00016874                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00016874 4A28 003C                  		tst.b	$3C(a0)
00016878 6700                       		beq.s	loc_134C4
0001687A 323C FC00                  		move.w	#-$400,d1
0001687E 0828 0006 0022             		btst	#6,$22(a0)
00016884 6700                       		beq.s	loc_134AE
00016886 323C FE00                  		move.w	#-$200,d1
0001688A                            
0001688A                            loc_134AE:
0001688A B268 0012                  		cmp.w	$12(a0),d1
0001688E 6F00                       		ble.s	locret_134C2
00016890 1038 F602 0200 0070        		theld	A+B+C,(SonicControl)	; is A,	B or C pressed?
00016898 6600                       		bne.s	locret_134C2		; if yes, branch
0001689A 3141 0012                  		move.w	d1,$12(a0)
0001689E                            
0001689E                            locret_134C2:
0001689E 4E75                       		rts	
000168A0                            ; ===========================================================================
000168A0                            
000168A0                            loc_134C4:
000168A0 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
000168A6 6C00                       		bge.s	locret_134D2
000168A8 317C F040 0012             		move.w	#-$FC0,$12(a0)
000168AE                            
000168AE                            locret_134D2:
000168AE 4E75                       		rts	
000168B0                            ; End of function Sonic_JumpHeight
000168B0                            
000168B0                            ;============================================================================
000168B0                            ; ---------------------------------------------------------------------------
000168B0                            ; Subroutine to do Jump Dash (code by Vladikcomper)
000168B0                            ; ---------------------------------------------------------------------------
000168B0                            
000168B0                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000168B0                            
000168B0                            
000168B0                            Sonic_JumpDash:
000168B0 0C38 0004 FF8C                             cmpi.b	#4,($FFFFFF8C).w        ; is Shadow?
000168B6 6600 0000                                  bne.w   Sonic_JD_Rts
000168BA 0C28 0002 001C             		cmpi.b	#2,$1C(a0)    		; is Sonic rolling?
000168C0 6600                       		bne.s	Sonic_JD_Rts		; if no, branch
000168C2 0828 0007 0022             		btst	#7,$22(a0)		; was Jump Dash flag set?
000168C8 6600                       		bne.s	Sonic_JD_Rts		; if yes, branch
000168CA 1038 F603 0200 0070        		tpress	A+B+C,(SonicControl)	; is A, B or C pressed?
000168D2 6700 0000                  		beq.w	Sonic_JD_Rts		; if not, branch
000168D6 08E8 0007 0022             		bset	#7,$22(a0)		; set Jump Dash flag
000168DC 303C 00BC                  		move.w	#$BC,d0			; play JD sound
000168E0 4EB9 0000 12D0             		jsr	(PlaySound_Special).l   ;
000168E6 317C 0900 0010             		move.w	#$900,$10(a0)		; set Jump Dash speed
000168EC 317C 0000 0012             		move.w	#0,$12(a0)		; clear Y-velocity
000168F2 0828 0006 0022             		btst	#6,$22(a0)		; is Sonic underwater?
000168F8 6700                       		beq.s	Sonic_JD_ChkShoes
000168FA 0468 0300 0010             		subi.w	#$300,$10(a0)		; set speed to $600
00016900                            		
00016900                            Sonic_JD_ChkShoes:
00016900 4A38 FE2E                  		tst.b	($FFFFFE2E).w		; does Sonic have speed	shoes?
00016904 6700                       		beq.s	Sonic_JD_ChkOrientation	; if not, branch
00016906 0668 0200 0010             		addi.w	#$200,$10(a0)		; set speed to $B00 or $500 if underwater
0001690C                            
0001690C                            Sonic_JD_ChkOrientation:
0001690C 0828 0000 0022             		btst	#0,$22(a0)
00016912 6700                       		beq.s	Sonic_JD_Rts
00016914 4468 0010                  		neg.w	$10(a0)
00016918                            
00016918                            Sonic_JD_Rts:
00016918 4E75                       		rts    
0001691A                            ; End of function Sonic_JumpDash
0001691A                            
0001691A                            ; ---------------------------------------------------------------------------
0001691A                            ; Subroutine to perform Spin Dash
0001691A                            ; ---------------------------------------------------------------------------
0001691A                            
0001691A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001691A                            
0001691A                            Sonic_SpinDash:
0001691A 0C38 0001 FF8C                             cmpi.b	#1,($FFFFFF8C).w        ; is Mighty?
00016920 6700                                       beq.s   Sonic_SpinDash_Rts
00016922 4A28 0039                  		tst.b	$39(a0)			; already Spin Dashing?
00016926 6600                       		bne.s	SpinDash_Process	; if yes, branch
00016928 0C28 0008 001C             		cmpi.b	#8,$1C(a0)		; is animation Duck?
0001692E 6600                       		bne.s	Sonic_SpinDash_Rts	; if not, branch
00016930 1038 F603 0200 0070        		tpress	A+B+C,(SonicControl)	; is A, B or C pressed?
00016938 6700 0000                  		beq.w	Sonic_SpinDash_Rts      	; if not, branch
0001693C 117C 001F 001C                             move.b	#$1F,$1C(a0)		; use Spin Dash animation
00016942 303C 0FD1                  		move.w	#$FD1,d0
00016946 4EB9 0000 12D0             		jsr	(PlaySound_Special).l
0001694C 588F                       		addq.l	#4,sp			; avoid Sonic_Jump call
0001694E 117C 0001 0039             		move.b	#1,$39(a0)		; set Spin Dash flag
00016954 317C 0000 003A             		move.w	#0,$3A(a0)
0001695A 6100 FD78                  		bsr.w	Sonic_LevelBound
0001695E 6100 0000                  		bsr.w	Sonic_AnglePos
00016962                             
00016962                            Sonic_SpinDash_Rts:
00016962 4E75                       		rts	
00016964                            ; ---------------------------------------------------------------------------
00016964                             
00016964                            SpinDash_Process:
00016964                                            
00016964 0C38 0003 FF8C                             cmpi.b	#3,($FFFFFF8C).w       
0001696A 6700 0000                                  beq.w   SpinDash_Release
0001696E 117C 001F 001C                             move.b	#$1F,$1C(a0)		; use Spin Dash animation
00016974                            		;move.w	#$FD1,d0
00016974                            		;jsr	(PlaySound_Special).l
00016974 1038 F602                  		move.b	(SonicControl|Held),d0	; load held buttons bitfield to d0
00016978 0800 0001                  		btst	#iDown,d0		; is Down held?
0001697C 6600 0000                  		bne.w	SpinDash_Charge		; if yes, branch
00016980                            		
00016980                            SpinDash_Release:
00016980 117C 000E 0016             		move.b	#$E,$16(a0)		; decrease Sonic's height
00016986 117C 0007 0017             		move.b	#7,$17(a0)
0001698C 117C 0002 001C             		move.b	#2,$1C(a0)		; use rolling animation
00016992 5A68 000C                  		addq.w	#5,$C(a0)		; add 5 to Y coordinate
00016996 117C 0000 0039             		move.b	#0,$39(a0)		; clear Spin Dash flag
0001699C 7000                       		moveq	#0,d0
0001699E 1028 003A                  		move.b	$3A(a0),d0
000169A2 D040                       		add.w	d0,d0
000169A4 317B 0000 0014             		move.w	DashSpeeds(pc,d0.w),$14(a0) ; get Spin Dash speed
000169AA 0828 0000 0022             		btst	#0,$22(a0)		; is Sonic facing right?
000169B0 6700                       		beq.s	SpinDash_ReleaseSound	; if yes, branch
000169B2 4468 0014                  		neg.w	$14(a0)			; negate inertia
000169B6                            
000169B6                            SpinDash_ReleaseSound:
000169B6 08E8 0002 0022             		bset	#2,$22(a0)
000169BC 303C 00BC                  		move.w	#$BC,d0
000169C0 4EB9 0000 12D0             		jsr	(PlaySound_Special).l
000169C6 6000                       		bra.s	loc2_1AD78
000169C8                            
000169C8                            ; ---------------------------------------------------------------------------
000169C8 0800                       DashSpeeds:	dc.w  $800		; 0
000169CA 0880                       		dc.w  $880		; 1
000169CC 0900                       		dc.w  $900		; 2
000169CE 0980                       		dc.w  $980		; 3
000169D0 0A00                       		dc.w  $A00		; 4
000169D2 0A80                       		dc.w  $A80		; 5
000169D4 0B00                       		dc.w  $B00		; 6
000169D6 0B80                       		dc.w  $B80		; 7
000169D8 0C00                       		dc.w  $C00		; 8
000169DA                            ; ---------------------------------------------------------------------------
000169DA                            
000169DA                            SpinDash_Charge:
000169DA 4A68 003A                  		tst.w	$3A(a0)		; test charge counter
000169DE 6700                       		beq.s	loc2_1AD48	; if it's zero, branch
000169E0 3028 003A                  		move.w	$3A(a0),d0	; move it to d0
000169E4 EA48                       		lsr.w	#5,d0		; divide by 32
000169E6 9168 003A                  		sub.w	d0,$3A(a0)
000169EA 6400                       		bcc.s	loc2_1AD48
000169EC 317C 0000 003A             		move.w	#0,$3A(a0)
000169F2                             
000169F2                            loc2_1AD48:
000169F2 1038 F603 0200 0070        		tpress	A+B+C,(SonicControl)
000169FA 6700 0000                  		beq.w	loc2_1AD78
000169FE 317C 1F00 001C             		move.w	#$1F00,$1C(a0)
00016A04 303C 00D1                  		move.w	#$D1,d0
00016A08 4EB9 0000 12D0             		jsr	(PlaySound_Special).l
00016A0E 0668 0200 003A             		addi.w	#$200,$3A(a0)
00016A14 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)
00016A1A 6500                       		bcs.s	loc2_1AD78
00016A1C 317C 0800 003A             		move.w	#$800,$3A(a0)
00016A22                             
00016A22                            loc2_1AD78:
00016A22 588F                       		addq.l	#4,sp		; avoid Sonic_Jump call
00016A24 0C78 0060 EED8             		cmpi.w	#$60,($FFFFEED8).w
00016A2A 6700                       		beq.s	loc2_1AD8C
00016A2C 6400                       		bcc.s	loc2_1AD88
00016A2E 5878 EED8                  		addq.w	#4,($FFFFEED8).w
00016A32                             
00016A32                            loc2_1AD88:
00016A32 5578 EED8                  		subq.w	#2,($FFFFEED8).w
00016A36                             
00016A36                            loc2_1AD8C:
00016A36 6100 FC9C                  		bsr.w	Sonic_LevelBound
00016A3A 6100 0000                  		bsr.w	Sonic_AnglePos
00016A3E 31FC 0060 F73E             		move.w	#$60,($FFFFF73E).w	; reset looking up/down
00016A44 4E75                       		rts                     
00016A46                            ; End of subroutine Sonic_Spin_Dash
00016A46                            
00016A46                            
00016A46                            ; ---------------------------------------------------------------------------
00016A46                            ; Subroutine to	slow Sonic walking up a	slope
00016A46                            ; ---------------------------------------------------------------------------
00016A46                            
00016A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A46                            
00016A46                            
00016A46                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00016A46 1028 0026                  		move.b	$26(a0),d0
00016A4A 0600 0060                  		addi.b	#$60,d0
00016A4E 0C00 00C0                  		cmpi.b	#$C0,d0
00016A52 6400                       		bcc.s	locret_13508
00016A54 1028 0026                  		move.b	$26(a0),d0
00016A58 4EB9 0000 2CC8             		jsr	(CalcSine).l
00016A5E C1FC 0020                  		muls.w	#$20,d0
00016A62 E080                       		asr.l	#8,d0
00016A64 4A68 0014                  		tst.w	$14(a0)
00016A68 6700                       		beq.s	locret_13508
00016A6A 6B00                       		bmi.s	loc_13504
00016A6C 4A40                       		tst.w	d0
00016A6E 6700                       		beq.s	locret_13502
00016A70 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00016A74                            
00016A74                            locret_13502:
00016A74 4E75                       		rts	
00016A76                            ; ===========================================================================
00016A76                            
00016A76                            loc_13504:
00016A76 D168 0014                  		add.w	d0,$14(a0)
00016A7A                            
00016A7A                            locret_13508:
00016A7A 4E75                       		rts	
00016A7C                            ; End of function Sonic_SlopeResist
00016A7C                            
00016A7C                            ; ---------------------------------------------------------------------------
00016A7C                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00016A7C                            ; ---------------------------------------------------------------------------
00016A7C                            
00016A7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A7C                            
00016A7C                            
00016A7C                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00016A7C 1028 0026                  		move.b	$26(a0),d0
00016A80 0600 0060                  		addi.b	#$60,d0
00016A84 0C00 00C0                  		cmpi.b	#-$40,d0
00016A88 6400                       		bcc.s	locret_13544
00016A8A 1028 0026                  		move.b	$26(a0),d0
00016A8E 4EB9 0000 2CC8             		jsr	(CalcSine).l
00016A94 C1FC 0050                  		muls.w	#$50,d0
00016A98 E080                       		asr.l	#8,d0
00016A9A 4A68 0014                  		tst.w	$14(a0)
00016A9E 6B00                       		bmi.s	loc_1353A
00016AA0 4A40                       		tst.w	d0
00016AA2 6A00                       		bpl.s	loc_13534
00016AA4 E480                       		asr.l	#2,d0
00016AA6                            
00016AA6                            loc_13534:
00016AA6 D168 0014                  		add.w	d0,$14(a0)
00016AAA 4E75                       		rts	
00016AAC                            ; ===========================================================================
00016AAC                            
00016AAC                            loc_1353A:
00016AAC 4A40                       		tst.w	d0
00016AAE 6B00                       		bmi.s	loc_13540
00016AB0 E480                       		asr.l	#2,d0
00016AB2                            
00016AB2                            loc_13540:
00016AB2 D168 0014                  		add.w	d0,$14(a0)
00016AB6                            
00016AB6                            locret_13544:
00016AB6 4E75                       		rts	
00016AB8                            ; End of function Sonic_RollRepel
00016AB8                            
00016AB8                            ; ---------------------------------------------------------------------------
00016AB8                            ; Subroutine to	push Sonic down	a slope
00016AB8                            ; ---------------------------------------------------------------------------
00016AB8                            
00016AB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016AB8                            
00016AB8                            
00016AB8                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00016AB8 4E71                       		nop	
00016ABA 4A28 0038                  		tst.b	$38(a0)
00016ABE 6600                       		bne.s	locret_13580
00016AC0 4A68 003E                  		tst.w	$3E(a0)
00016AC4 6600                       		bne.s	loc_13582
00016AC6 1028 0026                  		move.b	$26(a0),d0
00016ACA 0600 0020                  		addi.b	#$20,d0
00016ACE 0200 00C0                  		andi.b	#$C0,d0
00016AD2 6700                       		beq.s	locret_13580
00016AD4 3028 0014                  		move.w	$14(a0),d0
00016AD8 6A00                       		bpl.s	loc_1356A
00016ADA 4440                       		neg.w	d0
00016ADC                            
00016ADC                            loc_1356A:
00016ADC 0C40 0280                  		cmpi.w	#$280,d0
00016AE0 6400                       		bcc.s	locret_13580
00016AE2 4268 0014                  		clr.w	$14(a0)
00016AE6 08E8 0001 0022             		bset	#1,$22(a0)
00016AEC 317C 001E 003E             		move.w	#$1E,$3E(a0)
00016AF2                            
00016AF2                            locret_13580:
00016AF2 4E75                       		rts	
00016AF4                            ; ===========================================================================
00016AF4                            
00016AF4                            loc_13582:
00016AF4 5368 003E                  		subq.w	#1,$3E(a0)
00016AF8 4E75                       		rts	
00016AFA                            ; End of function Sonic_SlopeRepel
00016AFA                            
00016AFA                            
00016AFA                            ; ---------------------------------------------------------------------------
00016AFA                            ; Routine that jumps to kill Sonic
00016AFA                            ; ---------------------------------------------------------------------------
00016AFA                            JmpTo_KillSonic:
00016AFA 4EF9 0000 0000             		jmp	KillSonic
00016B00                            
00016B00                            ; ---------------------------------------------------------------------------
00016B00                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00016B00                            ; ---------------------------------------------------------------------------
00016B00                            
00016B00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016B00                            
00016B00                            
00016B00                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00016B00 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00016B04 6700                       		beq.s	locret_135A2	; if already 0,	branch
00016B06 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00016B08                            
00016B08 5400                       		addq.b	#2,d0		; increase angle
00016B0A 6400                       		bcc.s	loc_13596
00016B0C 7000                       		moveq	#0,d0
00016B0E                            
00016B0E                            loc_13596:
00016B0E 6000                       		bra.s	loc_1359E
00016B10                            ; ===========================================================================
00016B10                            
00016B10                            loc_13598:
00016B10 5500                       		subq.b	#2,d0		; decrease angle
00016B12 6400                       		bcc.s	loc_1359E
00016B14 7000                       		moveq	#0,d0
00016B16                            
00016B16                            loc_1359E:
00016B16 1140 0026                  		move.b	d0,$26(a0)
00016B1A                            
00016B1A                            locret_135A2:
00016B1A 4E75                       		rts	
00016B1C                            ; End of function Sonic_JumpAngle
00016B1C                            
00016B1C                            ; ---------------------------------------------------------------------------
00016B1C                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00016B1C                            ; ---------------------------------------------------------------------------
00016B1C                            
00016B1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016B1C                            
00016B1C                            
00016B1C                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00016B1C 3228 0010                  		move.w	$10(a0),d1
00016B20 3428 0012                  		move.w	$12(a0),d2
00016B24 4EB9 0000 2F96             		jsr	(CalcAngle).l
00016B2A 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00016B2E 0400 0020                  		subi.b	#$20,d0
00016B32 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00016B36 0200 00C0                  		andi.b	#$C0,d0
00016B3A 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00016B3E 0C00 0040                  		cmpi.b	#$40,d0
00016B42 6700 0000                  		beq.w	loc_13680
00016B46 0C00 0080                  		cmpi.b	#$80,d0
00016B4A 6700 0000                  		beq.w	loc_136E2
00016B4E 0C00 00C0                  		cmpi.b	#-$40,d0
00016B52 6700 0000                  		beq.w	loc_1373E
00016B56 6100 0000                  		bsr.w	Sonic_HitWall
00016B5A 4A41                       		tst.w	d1
00016B5C 6A00                       		bpl.s	loc_135F0
00016B5E 9368 0008                  		sub.w	d1,8(a0)
00016B62 317C 0000 0010             		move.w	#0,$10(a0)
00016B68                            
00016B68                            loc_135F0:
00016B68 6100 0000                  		bsr.w	sub_14EB4
00016B6C 4A41                       		tst.w	d1
00016B6E 6A00                       		bpl.s	loc_13602
00016B70 D368 0008                  		add.w	d1,8(a0)
00016B74 317C 0000 0010             		move.w	#0,$10(a0)
00016B7A                            
00016B7A                            loc_13602:
00016B7A 6100 0000                  		bsr.w	Sonic_HitFloor
00016B7E 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00016B82 4A41                       		tst.w	d1
00016B84 6A00                       		bpl.s	locret_1367E
00016B86 1428 0012                  		move.b	$12(a0),d2
00016B8A 5002                       		addq.b	#8,d2
00016B8C 4402                       		neg.b	d2
00016B8E B202                       		cmp.b	d2,d1
00016B90 6C00                       		bge.s	loc_1361E
00016B92 B002                       		cmp.b	d2,d0
00016B94 6D00                       		blt.s	locret_1367E
00016B96                            
00016B96                            loc_1361E:
00016B96 D368 000C                  		add.w	d1,$C(a0)
00016B9A 1143 0026                  		move.b	d3,$26(a0)
00016B9E 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016BA2 117C 0000 001C             		move.b	#0,$1C(a0)
00016BA8 1003                       		move.b	d3,d0
00016BAA 0600 0020                  		addi.b	#$20,d0
00016BAE 0200 0040                  		andi.b	#$40,d0
00016BB2 6600                       		bne.s	loc_1365C
00016BB4 1003                       		move.b	d3,d0
00016BB6 0600 0010                  		addi.b	#$10,d0
00016BBA 0200 0020                  		andi.b	#$20,d0
00016BBE 6700                       		beq.s	loc_1364E
00016BC0 E0E8 0012                  		asr	$12(a0)
00016BC4 6000                       		bra.s	loc_13670
00016BC6                            ; ===========================================================================
00016BC6                            
00016BC6                            loc_1364E:
00016BC6 317C 0000 0012             		move.w	#0,$12(a0)
00016BCC 3168 0010 0014             		move.w	$10(a0),$14(a0)
00016BD2 4E75                       		rts	
00016BD4                            ; ===========================================================================
00016BD4                            
00016BD4                            loc_1365C:
00016BD4 317C 0000 0010             		move.w	#0,$10(a0)
00016BDA 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00016BE0 6F00                       		ble.s	loc_13670
00016BE2 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00016BE8                            
00016BE8                            loc_13670:
00016BE8 3168 0012 0014             		move.w	$12(a0),$14(a0)
00016BEE 4A03                       		tst.b	d3
00016BF0 6A00                       		bpl.s	locret_1367E
00016BF2 4468 0014                  		neg.w	$14(a0)
00016BF6                            
00016BF6                            locret_1367E:
00016BF6 4E75                       		rts	
00016BF8                            ; ===========================================================================
00016BF8                            
00016BF8                            loc_13680:
00016BF8 6100 0000                  		bsr.w	Sonic_HitWall
00016BFC 4A41                       		tst.w	d1
00016BFE 6A00                       		bpl.s	loc_1369A
00016C00 9368 0008                  		sub.w	d1,8(a0)
00016C04 317C 0000 0010             		move.w	#0,$10(a0)
00016C0A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00016C10 4E75                       		rts	
00016C12                            ; ===========================================================================
00016C12                            
00016C12                            loc_1369A:
00016C12 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016C16 4A41                       		tst.w	d1
00016C18 6A00                       		bpl.s	loc_136B4
00016C1A 9368 000C                  		sub.w	d1,$C(a0)
00016C1E 4A68 0012                  		tst.w	$12(a0)
00016C22 6A00                       		bpl.s	locret_136B2
00016C24 317C 0000 0012             		move.w	#0,$12(a0)
00016C2A                            
00016C2A                            locret_136B2:
00016C2A 4E75                       		rts	
00016C2C                            ; ===========================================================================
00016C2C                            
00016C2C                            loc_136B4:
00016C2C 4A68 0012                  		tst.w	$12(a0)
00016C30 6B00                       		bmi.s	locret_136E0
00016C32 6100 0000                  		bsr.w	Sonic_HitFloor
00016C36 4A41                       		tst.w	d1
00016C38 6A00                       		bpl.s	locret_136E0
00016C3A D368 000C                  		add.w	d1,$C(a0)
00016C3E 1143 0026                  		move.b	d3,$26(a0)
00016C42 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016C46 117C 0000 001C             		move.b	#0,$1C(a0)
00016C4C 317C 0000 0012             		move.w	#0,$12(a0)
00016C52 3168 0010 0014             		move.w	$10(a0),$14(a0)
00016C58                            
00016C58                            locret_136E0:
00016C58 4E75                       		rts	
00016C5A                            ; ===========================================================================
00016C5A                            
00016C5A                            loc_136E2:
00016C5A 6100 0000                  		bsr.w	Sonic_HitWall
00016C5E 4A41                       		tst.w	d1
00016C60 6A00                       		bpl.s	loc_136F4
00016C62 9368 0008                  		sub.w	d1,8(a0)
00016C66 317C 0000 0010             		move.w	#0,$10(a0)
00016C6C                            
00016C6C                            loc_136F4:
00016C6C 6100 0000                  		bsr.w	sub_14EB4
00016C70 4A41                       		tst.w	d1
00016C72 6A00                       		bpl.s	loc_13706
00016C74 D368 0008                  		add.w	d1,8(a0)
00016C78 317C 0000 0010             		move.w	#0,$10(a0)
00016C7E                            
00016C7E                            loc_13706:
00016C7E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016C82 4A41                       		tst.w	d1
00016C84 6A00                       		bpl.s	locret_1373C
00016C86 9368 000C                  		sub.w	d1,$C(a0)
00016C8A 1003                       		move.b	d3,d0
00016C8C 0600 0020                  		addi.b	#$20,d0
00016C90 0200 0040                  		andi.b	#$40,d0
00016C94 6600                       		bne.s	loc_13726
00016C96 317C 0000 0012             		move.w	#0,$12(a0)
00016C9C 4E75                       		rts	
00016C9E                            ; ===========================================================================
00016C9E                            
00016C9E                            loc_13726:
00016C9E 1143 0026                  		move.b	d3,$26(a0)
00016CA2 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016CA6 3168 0012 0014             		move.w	$12(a0),$14(a0)
00016CAC 4A03                       		tst.b	d3
00016CAE 6A00                       		bpl.s	locret_1373C
00016CB0 4468 0014                  		neg.w	$14(a0)
00016CB4                            
00016CB4                            locret_1373C:
00016CB4 4E75                       		rts	
00016CB6                            ; ===========================================================================
00016CB6                            
00016CB6                            loc_1373E:
00016CB6 6100 0000                  		bsr.w	sub_14EB4
00016CBA 4A41                       		tst.w	d1
00016CBC 6A00                       		bpl.s	loc_13758
00016CBE D368 0008                  		add.w	d1,8(a0)
00016CC2 317C 0000 0010             		move.w	#0,$10(a0)
00016CC8 3168 0012 0014             		move.w	$12(a0),$14(a0)
00016CCE 4E75                       		rts	
00016CD0                            ; ===========================================================================
00016CD0                            
00016CD0                            loc_13758:
00016CD0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016CD4 4A41                       		tst.w	d1
00016CD6 6A00                       		bpl.s	loc_13772
00016CD8 9368 000C                  		sub.w	d1,$C(a0)
00016CDC 4A68 0012                  		tst.w	$12(a0)
00016CE0 6A00                       		bpl.s	locret_13770
00016CE2 317C 0000 0012             		move.w	#0,$12(a0)
00016CE8                            
00016CE8                            locret_13770:
00016CE8 4E75                       		rts	
00016CEA                            ; ===========================================================================
00016CEA                            
00016CEA                            loc_13772:
00016CEA 4A68 0012                  		tst.w	$12(a0)
00016CEE 6B00                       		bmi.s	locret_1379E
00016CF0 6100 0000                  		bsr.w	Sonic_HitFloor
00016CF4 4A41                       		tst.w	d1
00016CF6 6A00                       		bpl.s	locret_1379E
00016CF8 D368 000C                  		add.w	d1,$C(a0)
00016CFC 1143 0026                  		move.b	d3,$26(a0)
00016D00 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016D04 117C 0000 001C             		move.b	#0,$1C(a0)
00016D0A 317C 0000 0012             		move.w	#0,$12(a0)
00016D10 3168 0010 0014             		move.w	$10(a0),$14(a0)
00016D16                            
00016D16                            locret_1379E:
00016D16 4E75                       		rts	
00016D18                            ; End of function Sonic_Floor
00016D18                            
00016D18                            ; ---------------------------------------------------------------------------
00016D18                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00016D18                            ; ---------------------------------------------------------------------------
00016D18                            
00016D18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016D18                            
00016D18                            
00016D18                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00016D18 08A8 0007 0022             		bclr    #7,$22(a0)
00016D1E 0828 0004 0022             		btst	#4,$22(a0)
00016D24 6700                       		beq.s	loc_137AE
00016D26 4E71                       		nop
00016D28 4E71                       		nop	
00016D2A 4E71                       		nop	
00016D2C                            
00016D2C                            loc_137AE:
00016D2C 08A8 0005 0022             		bclr	#5,$22(a0)
00016D32 08A8 0001 0022             		bclr	#1,$22(a0)
00016D38 08A8 0004 0022             		bclr	#4,$22(a0)
00016D3E 0828 0002 0022             		btst	#2,$22(a0)
00016D44 6700                       		beq.s	loc_137E4
00016D46 08A8 0002 0022             		bclr	#2,$22(a0)
00016D4C 117C 0013 0016             		move.b	#$13,$16(a0)
00016D52 117C 0009 0017             		move.b	#9,$17(a0)
00016D58 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00016D5E 5B68 000C                  		subq.w	#5,$C(a0)
00016D62                            
00016D62                            loc_137E4:
00016D62 117C 0000 003C             		move.b	#0,$3C(a0)
00016D68 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00016D6E 4E75                       		rts	
00016D70                            ; End of function Sonic_ResetOnFloor
00016D70                            
00016D70                            ; ===========================================================================
00016D70                            ; ---------------------------------------------------------------------------
00016D70                            ; Sonic	when he	gets hurt
00016D70                            ; ---------------------------------------------------------------------------
00016D70                            
00016D70                            Obj01_Hurt:				; XREF: Obj01_Index
00016D70 4EBA 96C2                  		jsr	SpeedToPos
00016D74 0668 0030 0012             		addi.w	#$30,$12(a0)	; decrease speed
00016D7A 0828 0006 0022             		btst	#6,$22(a0)	; is Sonic underwater?
00016D80 6700                       		beq.s	loc_1380C	; if not, branch
00016D82 0468 0020 0012             		subi.w	#$20,$12(a0)	; reduce speed a bit
00016D88                            
00016D88                            loc_1380C:
00016D88 6100 0000                  		bsr.w	Sonic_HurtStop
00016D8C 6100 F946                  		bsr.w	Sonic_LevelBound
00016D90 6100 F2EC                  		bsr.w	Sonic_RecordPos
00016D94 6100 0000                  		bsr.w	Sonic_Animate
00016D98 6100 0000                  		bsr.w	LoadSonicDynPLC
00016D9C 4EFA 96BC                  		jmp	DisplaySprite
00016DA0                            
00016DA0                            ; ---------------------------------------------------------------------------
00016DA0                            ; Subroutine to	stop Sonic falling after he's been hurt
00016DA0                            ; ---------------------------------------------------------------------------
00016DA0                            
00016DA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DA0                            
00016DA0                            
00016DA0                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00016DA0 3038 F72E                  		move.w	($FFFFF72E).w,d0
00016DA4 0640 00E0                  		addi.w	#$E0,d0
00016DA8 B068 000C                  		cmp.w	$C(a0),d0
00016DAC 6500 FD4C                  		bcs.w	JmpTo_KillSonic
00016DB0 4EBA FD6A                  		jsr	Sonic_Floor
00016DB4 0828 0001 0022             		btst	#1,$22(a0)	; is Sonic in the air?
00016DBA 6600                       		bne.s	@NoHurtStop	; if yes, branch
00016DBC 7000                       		moveq	#0,d0
00016DBE 3140 0012                  		move.w	d0,$12(a0)	; clear all his speeds
00016DC2 3140 0010                  		move.w	d0,$10(a0)	;
00016DC6 3140 0014                  		move.w	d0,$14(a0)	;
00016DCA 117C 0000 001C             		move.b	#0,$1C(a0)
00016DD0 5528 0024                  		subq.b	#2,$24(a0)	; switch to "Obj01_Control" routine
00016DD4 317C 0078 0030             		move.w	#$78,$30(a0)	; set intervurable time
00016DDA                            
00016DDA                            @NoHurtStop:
00016DDA 4E75                       		rts	
00016DDC                            ; End of function Sonic_HurtStop
00016DDC                            
00016DDC                            ; ===========================================================================
00016DDC                            ; ---------------------------------------------------------------------------
00016DDC                            ; Sonic	when he	dies
00016DDC                            ; ---------------------------------------------------------------------------
00016DDC                            
00016DDC                            Obj01_Death:				; XREF: Obj01_Index
00016DDC 6100 0000                  		bsr.w	GameOver
00016DE0 4EBA 9626                  		jsr	ObjectFall
00016DE4 6100 F298                  		bsr.w	Sonic_RecordPos
00016DE8 6100 0000                  		bsr.w	Sonic_Animate
00016DEC 6100 0000                  		bsr.w	LoadSonicDynPLC
00016DF0 4EFA 9668                  		jmp	DisplaySprite
00016DF4                            
00016DF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DF4                            
00016DF4                            
00016DF4                            GameOver:				; XREF: Obj01_Death
00016DF4 3038 F72E                  		move.w	($FFFFF72E).w,d0
00016DF8 0640 0100                  		addi.w	#$100,d0
00016DFC B068 000C                  		cmp.w	$C(a0),d0
00016E00 6400 0000                  		bcc.w	locret_13900
00016E04 317C FFC8 0012             		move.w	#-$38,$12(a0)
00016E0A 5428 0024                  		addq.b	#2,$24(a0)
00016E0E 4238 FE1E                  		clr.b	($FFFFFE1E).w	 ; stop time counter
00016E12 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00016E16 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00016E1A 6600                       		bne.s	loc_138D4
00016E1C 317C 0000 003A             		move.w	#0,$3A(a0)
00016E22 11FC 0039 D080             		move.b	#$39,($FFFFD080).w	; load GAME object
00016E28 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w	; load OVER object
00016E2E 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w	; set OVER object to correct frame
00016E34 4238 FE1A                  		clr.b	($FFFFFE1A).w
00016E38                            
00016E38                            loc_138C2:
00016E38 303C 009E                  		move.w	#$9E,d0
00016E3C 4EB9 0000 12CA             		jsr	(PlaySound).l	; play game over music
00016E42 7003                       		moveq	#3,d0
00016E44 4EF9 0000 153E             		jmp	(LoadPLC).l	; load game over patterns
00016E4A                            ; ===========================================================================
00016E4A                            
00016E4A                            loc_138D4:
00016E4A 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00016E50 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00016E54 6700                       		beq.s	locret_13900	; if not, branch
00016E56 317C 0000 003A             		move.w	#0,$3A(a0)
00016E5C 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00016E62 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00016E68 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00016E6E 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00016E74 60C2                       		bra.s	loc_138C2
00016E76                            ; ===========================================================================
00016E76                            
00016E76                            locret_13900:
00016E76 4E75                       		rts	
00016E78                            ; End of function GameOver
00016E78                            
00016E78                            ; ===========================================================================
00016E78                            ; ---------------------------------------------------------------------------
00016E78                            ; Sonic	when the level is restarted
00016E78                            ; ---------------------------------------------------------------------------
00016E78                            
00016E78                            Obj01_ResetLevel:			; XREF: Obj01_Index
00016E78 4A68 003A                  		tst.w	$3A(a0)
00016E7C 6700                       		beq.s	locret_13914
00016E7E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00016E82 6600                       		bne.s	locret_13914
00016E84 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00016E8A                            
00016E8A                            locret_13914:
00016E8A 4E75                       		rts	
00016E8C                            
00016E8C                            ; ---------------------------------------------------------------------------
00016E8C                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00016E8C                            ; ---------------------------------------------------------------------------
00016E8C                            
00016E8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E8C                            
00016E8C                            
00016E8C                            Sonic_Loops:				; XREF: Obj01_Control
00016E8C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00016E92 6700                       		beq.s	loc_13926	; if yes, branch
00016E94 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00016E98 6600 0000                  		bne.w	locret_139C2	; if not, branch
00016E9C                            
00016E9C                            loc_13926:
00016E9C 3028 000C                  		move.w	$C(a0),d0
00016EA0 E248                       		lsr.w	#1,d0
00016EA2 0240 0380                  		andi.w	#$380,d0
00016EA6 1228 0008                  		move.b	8(a0),d1
00016EAA 0241 007F                  		andi.w	#$7F,d1
00016EAE D041                       		add.w	d1,d0
00016EB0 43F8 A400                  		lea	($FFFFA400).w,a1
00016EB4 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00016EB8 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00016EBC 6700 F8CA                  		beq.w	Obj01_ChkRoll
00016EC0 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00016EC4 6700 F8C2                  		beq.w	Obj01_ChkRoll
00016EC8 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00016ECC 6700                       		beq.s	loc_13976
00016ECE B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00016ED2 6700                       		beq.s	loc_13966
00016ED4 08A8 0006 0001             		bclr	#6,1(a0)
00016EDA 4E75                       		rts	
00016EDC                            ; ===========================================================================
00016EDC                            
00016EDC                            loc_13966:
00016EDC 0828 0001 0022             		btst	#1,$22(a0)
00016EE2 6700                       		beq.s	loc_13976
00016EE4 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00016EEA 4E75                       		rts	
00016EEC                            ; ===========================================================================
00016EEC                            
00016EEC                            loc_13976:
00016EEC 3428 0008                  		move.w	8(a0),d2
00016EF0 0C02 002C                  		cmpi.b	#$2C,d2
00016EF4 6400                       		bcc.s	loc_13988
00016EF6 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00016EFC 4E75                       		rts	
00016EFE                            ; ===========================================================================
00016EFE                            
00016EFE                            loc_13988:
00016EFE 0C02 00E0                  		cmpi.b	#-$20,d2
00016F02 6500                       		bcs.s	loc_13996
00016F04 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00016F0A 4E75                       		rts	
00016F0C                            ; ===========================================================================
00016F0C                            
00016F0C                            loc_13996:
00016F0C 0828 0006 0001             		btst	#6,1(a0)
00016F12 6600                       		bne.s	loc_139B2
00016F14 1228 0026                  		move.b	$26(a0),d1
00016F18 6700                       		beq.s	locret_139C2
00016F1A 0C01 0080                  		cmpi.b	#-$80,d1
00016F1E 6200                       		bhi.s	locret_139C2
00016F20 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00016F26 4E75                       		rts	
00016F28                            ; ===========================================================================
00016F28                            
00016F28                            loc_139B2:
00016F28 1228 0026                  		move.b	$26(a0),d1
00016F2C 0C01 0080                  		cmpi.b	#-$80,d1
00016F30 6300                       		bls.s	locret_139C2
00016F32 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00016F38                            
00016F38                            locret_139C2:
00016F38 4E75                       		rts	
00016F3A                            ; End of function Sonic_Loops
00016F3A                            
00016F3A                            ; ---------------------------------------------------------------------------
00016F3A                            ; Subroutine to	animate	Sonic's sprites
00016F3A                            ; ---------------------------------------------------------------------------
00016F3A                            
00016F3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F3A                            
00016F3A                            
00016F3A                            Sonic_Animate:				; XREF: Obj01_Control; et al
00016F3A 43F9 0000 0000             		lea	(SonicAniData).l,a1
00016F40 7000                       		moveq	#0,d0
00016F42 1028 001C                  		move.b	$1C(a0),d0
00016F46 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00016F4A 6700                       		beq.s	SAnim_Do	; if not, branch
00016F4C 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00016F50 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00016F56 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00016F5C                            
00016F5C                            SAnim_Do:
00016F5C D040                       		add.w	d0,d0
00016F5E D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00016F62 1011                       		move.b	(a1),d0
00016F64 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00016F66 1228 0022                  		move.b	$22(a0),d1
00016F6A 0201 0001                  		andi.b	#1,d1
00016F6E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00016F74 8328 0001                  		or.b	d1,1(a0)
00016F78 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00016F7C 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00016F7E 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00016F82                            
00016F82                            SAnim_Do2:
00016F82 7200                       		moveq	#0,d1
00016F84 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00016F88 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00016F8C 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00016F8E                            
00016F8E                            SAnim_Next:
00016F8E 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00016F92 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00016F96                            
00016F96                            SAnim_Delay:
00016F96 4E75                       		rts	
00016F98                            ; ===========================================================================
00016F98                            
00016F98                            SAnim_End_FF:
00016F98 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00016F9A 6600                       		bne.s	SAnim_End_FE	; if not, branch
00016F9C 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00016FA2 1029 0001                  		move.b	1(a1),d0	; read sprite number
00016FA6 60E6                       		bra.s	SAnim_Next
00016FA8                            ; ===========================================================================
00016FA8                            
00016FA8                            SAnim_End_FE:
00016FA8 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00016FAA 6600                       		bne.s	SAnim_End_FD	; if not, branch
00016FAC 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00016FB0 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00016FB4 9200                       		sub.b	d0,d1
00016FB6 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00016FBA 60D2                       		bra.s	SAnim_Next
00016FBC                            ; ===========================================================================
00016FBC                            
00016FBC                            SAnim_End_FD:
00016FBC 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00016FBE 6600                       		bne.s	SAnim_End	; if not, branch
00016FC0 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00016FC6                            
00016FC6                            SAnim_End:
00016FC6 4E75                       		rts	
00016FC8                            ; ===========================================================================
00016FC8                            
00016FC8                            SAnim_WalkRun:				; XREF: SAnim_Do
00016FC8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00016FCC 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00016FCE 5200                       		addq.b	#1,d0		; is animation walking/running?
00016FD0 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00016FD4 7200                       		moveq	#0,d1
00016FD6 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00016FDA 1428 0022                  		move.b	$22(a0),d2
00016FDE 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00016FE2 6600                       		bne.s	loc_13A70	; if yes, branch
00016FE4 4600                       		not.b	d0		; reverse angle
00016FE6                            
00016FE6                            loc_13A70:
00016FE6 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00016FEA 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00016FEC 7203                       		moveq	#3,d1
00016FEE                            
00016FEE                            loc_13A78:
00016FEE 0228 00FC 0001             		andi.b	#$FC,1(a0)
00016FF4 B302                       		eor.b	d1,d2
00016FF6 8528 0001                  		or.b	d2,1(a0)
00016FFA 0828 0005 0022             		btst	#5,$22(a0)
00017000 6600 0000                  		bne.w	SAnim_Push
00017004 E808                       		lsr.b	#4,d0		; divide angle by $10
00017006 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
0001700A 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001700E 6A00                       		bpl.s	loc_13A9C
00017010 4442                       		neg.w	d2
00017012                            
00017012                            loc_13A9C:
00017012 0C38 0001 FF8C                             cmpi.b	#1,($FFFFFF8C).w        ; is Mighty?
00017018 6700 0000                                  beq.w   loc_13A9CM
0001701C 0C38 0003 FF8C                             cmpi.b	#3,($FFFFFF8C).w        ; is Tikal?
00017022 6700 0000                                  beq.w   loc_13A9CM
00017026 0C38 0004 FF8C                             cmpi.b	#4,($FFFFFF8C).w        ; is Mighty?
0001702C 6700 0000                                  beq.w   loc_13A9CM
00017030 0C38 0005 FF8C                             cmpi.b	#5,($FFFFFF8C).w        ; is Espio?
00017036 6700 0000                                  beq.w   loc_13A9CM
0001703A 0C38 0002 FF8C                             cmpi.b	#2,($FFFFFF8C).w	
00017040 6700 0000                                  beq.w   loc_13a9cmetal
00017044 43F9 0000 0000                             lea	(SonAni_Outing).l,a1  ; use outing animation
0001704A 0C42 0700                  		cmpi.w  #$700,d2	 ; is Sonic running really fast?
0001704E 6400                       		bcc.s   loc_13AB4	  ; branch if carry clear
00017050 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00017056 0C42 0500                  		cmpi.w	#$500,d2	; is Sonic at running speed?
0001705A 6400                       		bcc.s	loc_13AB4	; if yes, branch
0001705C 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00017062 6000                                       bra.s	loc_13A9CCont
00017064                            
00017064                            loc_13A9CM:
00017064 43F9 0000 0000                             lea	(SonAni_Run).l,a1 ; use	running	animation
0001706A 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
0001706E 6400                       		bcc.s	loc_13AB4	; if yes, branch
00017070 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00017076 6000                                       bra.s   loc_13A9CCont
00017078                            
00017078                            loc_13a9cmetal:
00017078 43F9 0000 0000                             lea	(SonAni_MetOuting).l,a1  ; use outing animation
0001707E 0C42 0700                  		cmpi.w  #$700,d2	 ; is Sonic running really fast?
00017082 6400                       		bcc.s   loc_13AB4	  ; branch if carry clear
00017084 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
0001708A 0C42 0500                  		cmpi.w	#$500,d2	; is Sonic at running speed?
0001708E 6400                       		bcc.s	loc_13AB4	; if yes, branch
00017090 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00017096                            
00017096                            loc_13A9CCont:
00017096 1200                       		move.b	d0,d1
00017098 E209                       		lsr.b	#1,d1
0001709A D001                       		add.b	d1,d0
0001709C                            
0001709C                            loc_13AB4:
0001709C D000                       		add.b	d0,d0
0001709E 1600                       		move.b	d0,d3
000170A0 4442                       		neg.w	d2
000170A2 0642 0800                  		addi.w	#$800,d2
000170A6 6A00                       		bpl.s	loc_13AC2
000170A8 7400                       		moveq	#0,d2
000170AA                            
000170AA                            loc_13AC2:
000170AA E04A                       		lsr.w	#8,d2
000170AC 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000170B0 6100 FED0                  		bsr.w	SAnim_Do2
000170B4 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000170B8 4E75                       		rts	
000170BA                            ; ===========================================================================
000170BA                            
000170BA                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000170BA 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000170BC 6600                       		bne.s	SAnim_Push	; if not, branch
000170BE 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000170C2 6A00                       		bpl.s	loc_13ADE
000170C4 4442                       		neg.w	d2
000170C6                            
000170C6                            loc_13ADE:
000170C6 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000170CC 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000170D0 6400                       		bcc.s	loc_13AF0	; if yes, branch
000170D2 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000170D8                            
000170D8                            loc_13AF0:
000170D8 4442                       		neg.w	d2
000170DA 0642 0400                  		addi.w	#$400,d2
000170DE 6A00                       		bpl.s	loc_13AFA
000170E0 7400                       		moveq	#0,d2
000170E2                            
000170E2                            loc_13AFA:
000170E2 E04A                       		lsr.w	#8,d2
000170E4 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000170E8 1228 0022                  		move.b	$22(a0),d1
000170EC 0201 0001                  		andi.b	#1,d1
000170F0 0228 00FC 0001             		andi.b	#$FC,1(a0)
000170F6 8328 0001                  		or.b	d1,1(a0)
000170FA 6000 FE86                  		bra.w	SAnim_Do2
000170FE                            ; ===========================================================================
000170FE                            
000170FE                            SAnim_Push:				; XREF: SAnim_RollJump
000170FE 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00017102 6B00                       		bmi.s	loc_13B1E
00017104 4442                       		neg.w	d2
00017106                            
00017106                            loc_13B1E:
00017106 0642 0800                  		addi.w	#$800,d2
0001710A 6A00                       		bpl.s	loc_13B26
0001710C 7400                       		moveq	#0,d2
0001710E                            
0001710E                            loc_13B26:
0001710E EC4A                       		lsr.w	#6,d2
00017110 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00017114 43F9 0000 0000             		lea	(SonAni_Push).l,a1
0001711A 1228 0022                  		move.b	$22(a0),d1
0001711E 0201 0001                  		andi.b	#1,d1
00017122 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017128 8328 0001                  		or.b	d1,1(a0)
0001712C 6000 FE54                  		bra.w	SAnim_Do2
00017130                            ; End of function Sonic_Animate
00017130                            
00017130                            ; ===========================================================================
00017130                            SonicAniData:
00017130                            	include "_anim\Sonic.asm"
00017130                            ; ---------------------------------------------------------------------------
00017130                            ; Sonic Animation Script
00017130                            ; ---------------------------------------------------------------------------
00017130 0000                       		dc.w SonAni_Walk-SonicAniData ;0
00017132 0000                       		dc.w SonAni_Run-SonicAniData;1
00017134 0000                       		dc.w SonAni_Roll-SonicAniData;2
00017136 0000                       		dc.w SonAni_Roll2-SonicAniData;3
00017138 0000                       		dc.w SonAni_Push-SonicAniData;4
0001713A 0000                       		dc.w SonAni_Wait-SonicAniData;5
0001713C 0000                       		dc.w SonAni_Balance-SonicAniData;6a
0001713E 0000                       		dc.w SonAni_LookUp-SonicAniData;7
00017140 0000                       		dc.w SonAni_Duck-SonicAniData;8
00017142 0000                       		dc.w SonAni_Warp1-SonicAniData;9
00017144 0000                       		dc.w SonAni_Warp2-SonicAniData;a
00017146 0000                       		dc.w SonAni_Warp3-SonicAniData;b
00017148 0000                       		dc.w SonAni_Warp4-SonicAniData;c
0001714A 0000                       		dc.w SonAni_Stop-SonicAniData;d
0001714C 0000                       		dc.w SonAni_Float1-SonicAniData;e
0001714E 0000                       		dc.w SonAni_Float2-SonicAniData;f
00017150 0000                       		dc.w SonAni_Spring-SonicAniData;10
00017152 0000                       		dc.w SonAni_LZHang-SonicAniData;11
00017154 0000                       		dc.w SonAni_Leap1-SonicAniData;12
00017156 0000                       		dc.w SonAni_Leap2-SonicAniData;13
00017158 0000                       		dc.w SonAni_Surf-SonicAniData;14
0001715A 0000                       		dc.w SonAni_Bubble-SonicAniData;15
0001715C 0000                       		dc.w SonAni_Death1-SonicAniData;16
0001715E 0000                       		dc.w SonAni_Drown-SonicAniData;17
00017160 0000                       		dc.w SonAni_Death2-SonicAniData;18
00017162 0000                       		dc.w SonAni_Shrink-SonicAniData;19
00017164 0000                       		dc.w SonAni_Hurt-SonicAniData;1a
00017166 0000                       		dc.w SonAni_LZSlide-SonicAniData;1b
00017168 0000                       		dc.w SonAni_Blank-SonicAniData;1c
0001716A 0000                       		dc.w SonAni_Float3-SonicAniData;1e
0001716C 0000                       		dc.w SonAni_Float4-SonicAniData;1f
0001716E 0000                       		dc.w SonAni_Spin_Dash-SonicAniData 
00017170 0000                                       dc.w SonAni_SSO-SonicAniData;20
00017172 0000                                       dc.w SonAni_SpringFromSonicCD-SonicAniData;21
00017174 0000                                       dc.w SonAni_Outing-SonicAniData;22
00017176 0000                                       dc.w SonAni_MetOuting-SonicAniData;23
00017178 0000                                       dc.w SonAni_ShdBored-SonicAniData;24
0001717A 0000                                       dc.w SonAni_EspWhirl-SonicAniData;25
0001717C FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
00017184 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
0001718C FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00017194 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
0001719C FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
000171A4 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 3, 3, 3, 3, 4, $FE, 2, 0
000171BA 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
000171BE 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000171C2 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
000171C6 0749 4EFF 00               SonAni_Warp1:	dc.b 7, $49, $4E, $FF, 0
000171CB 3F35 FF00                  SonAni_Warp2:	dc.b $3F, $35, $FF, 0 
000171CF 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
000171D3 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
000171D7 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
000171DB 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
000171DF 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
000171E7 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
000171EB 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
000171EF 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000171F5 1043 4444 FE01 00          SonAni_Leap2:	dc.b $10, $43, $44, $44, $FE, 1, 0
000171FC 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00017200 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00017208 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
0001720C 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00017210 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00017214 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
0001721E 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
00017222 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00017226 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
0001722A 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00017232 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00017236 002E 2F30 3132 FF          SonAni_Spin_Dash:	  dc.b 0, $2E, $2F, $30, $31, $32, $FF
0001723D 0208 0808 0909 0A0A 0B06+  SonAni_SSO:               dc.b 2, 8, 8, 8, 9, 9, $A, $A, $B, 6, 7, $1E, $1F, $20, $21, $5E, $5F, $60, $61, $FE, 4
00017252 FF67 6869 6AFF FFFF FFFF   SonAni_Outing:            dc.b $FF, $67, $68, $69, $6A, $FF, $FF, $FF, $FF, $FF
0001725C FF67 6869 68FF FFFF FFFF   SonAni_MetOuting:            dc.b $FF, $67, $68, $69, $68, $FF, $FF, $FF, $FF, $FF
00017266 0362 6364 6566 6263 6465+  SonAni_SpringFromSonicCD: dc.b $3, $62, $63, $64, $65, $66, $62, $63, $64, $65, $66, $62, $63, $64, $65, $66, $FD, 0
00017278 1703 0303 0303 04FE 0200   SonAni_ShdBored: dc.b $17, 3, 3, 3, 3, 3, 4, $FE, 2, 0
00017282 0062 6364 65FF             SonAni_EspWhirl: dc.b 0, $62, $63, $64, $65, $FF
00017288                            		even
00017288                            		even
00017288                            
00017288                            ; ---------------------------------------------------------------------------
00017288                            ; Sonic	pattern	loading	subroutine
00017288                            ; ---------------------------------------------------------------------------
00017288                            
00017288                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017288                            
00017288                            
00017288                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00017288 7000                       		moveq	#0,d0
0001728A 1028 001A                  		move.b	$1A(a0),d0	 ; load frame number
0001728E B038 F766                  		cmp.b	($FFFFF766).w,d0 ; has Sonic frame changed?
00017292 6700 0000                  		beq.w	locret_13C96	 ; if not, branch
00017296 11C0 F766                  		move.b	d0,($FFFFF766).w ; update frame number
0001729A 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
000172A0 D040                       		add.w	d0,d0
000172A2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000172A6 7A00                       		moveq	#0,d5
000172A8 1A1A                       		move.b	(a2)+,d5
000172AA 5345                       		subq.w	#1,d5
000172AC 6B00 0000                  		bmi.w	locret_13C96
000172B0 383C F000                  		move.w	#$F000,d4
000172B4 0C38 0001 FF8C                             cmpi.b	#01,($FFFFFF8C).w	; is Mighty?
000172BA 6700                       		beq.s	LoadMightyart		; if yes, branch
000172BC 0C38 0002 FF8C                             cmpi.b  #02,($FFFFFF8C).w
000172C2 6700                                       beq.s   LoadMetalart
000172C4 0C38 0003 FF8C                             cmpi.b  #03,($FFFFFF8C).w
000172CA 6700                                       beq.s   LoadTikalart
000172CC 0C38 0004 FF8C                             cmpi.b  #04,($FFFFFF8C).w
000172D2 6700                                       beq.s   LoadShadowart
000172D4 0C38 0005 FF8C                             cmpi.b  #05,($FFFFFF8C).w
000172DA 6700                                       beq.s   LoadEspioart
000172DC 2C3C 0000 0000             		move.l	#Art_Sonic,d6
000172E2 6000                                       bra.s   SPLC_ReadEntry
000172E4                            
000172E4                            LoadMightyart:
000172E4 2C3C 0000 0000                             move.l  #Art_Mighty,d6
000172EA 6000                                       bra.s   SPLC_ReadEntry
000172EC                            
000172EC                            LoadMetalart:
000172EC 2C3C 0000 0000                             move.l  #Art_Metal,d6
000172F2 6000                                       bra.s   SPLC_ReadEntry
000172F4                            
000172F4                            LoadTikalart:
000172F4 2C3C 0000 0000                             move.l  #Art_Tikal,d6
000172FA 6000                                       bra.s   SPLC_ReadEntry
000172FC                            
000172FC                            LoadShadowart:
000172FC 2C3C 0000 0000                             move.l  #Art_Shadow,d6
00017302 6000                                       bra.s   SPLC_ReadEntry
00017304                            
00017304                            LoadEspioart:
00017304 2C3C 0000 0000                             move.l  #Art_Espio,d6
0001730A                             
0001730A                            SPLC_ReadEntry:
0001730A 7200                       		moveq	#0,d1
0001730C 121A                       		move.b	(a2)+,d1
0001730E E149                       		lsl.w	#8,d1
00017310 121A                       		move.b	(a2)+,d1
00017312 3601                       		move.w	d1,d3
00017314 E04B                       		lsr.w	#8,d3
00017316 0243 00F0                  		andi.w	#$F0,d3
0001731A 0643 0010                  		addi.w	#$10,d3
0001731E 0241 0FFF                  		andi.w	#$FFF,d1
00017322 EB89                       		lsl.l	#5,d1
00017324 D286                       		add.l	d6,d1
00017326 3404                       		move.w	d4,d2
00017328 D843                       		add.w	d3,d4
0001732A D843                       		add.w	d3,d4
0001732C 4EB9 0000 136E             		jsr	(QueueDMATransfer).l
00017332 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00017336                             
00017336                            locret_13C96:
00017336 4E75                       		rts	
00017338                            ; End of function LoadSonicDynPLC
00017338                            
00017338                            ; ===========================================================================
00017338                            ; ---------------------------------------------------------------------------
00017338                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00017338                            ; ---------------------------------------------------------------------------
00017338                            
00017338                            Obj0A:					; XREF: Obj_Index
00017338 7000                       		moveq	#0,d0
0001733A 1028 0024                  		move.b	$24(a0),d0
0001733E 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00017342 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00017346                            ; ===========================================================================
00017346 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
0001734A 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
0001734E 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00017352 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00017356 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00017358                            ; ===========================================================================
00017358                            
00017358                            Obj0A_Main:				; XREF: Obj0A_Index
00017358 5428 0024                  		addq.b	#2,$24(a0)
0001735C 217C 0001 5B06 0004        		move.l	#Map_obj64,4(a0)
00017364 317C 8348 0002             		move.w	#$8348,2(a0)
0001736A 117C 0084 0001             		move.b	#$84,1(a0)
00017370 117C 0010 0019             		move.b	#$10,$19(a0)
00017376 117C 0001 0018             		move.b	#1,$18(a0)
0001737C 1028 0028                  		move.b	$28(a0),d0
00017380 6A00                       		bpl.s	loc_13D00
00017382 5028 0024                  		addq.b	#8,$24(a0)
00017386 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
0001738E 317C 0440 0002             		move.w	#$440,2(a0)
00017394 0240 007F                  		andi.w	#$7F,d0
00017398 1140 0033                  		move.b	d0,$33(a0)
0001739C 6000 0000                  		bra.w	Obj0A_Countdown
000173A0                            ; ===========================================================================
000173A0                            
000173A0                            loc_13D00:
000173A0 1140 001C                  		move.b	d0,$1C(a0)
000173A4 3168 0008 0030             		move.w	8(a0),$30(a0)
000173AA 317C FF78 0012             		move.w	#-$88,$12(a0)
000173B0                            
000173B0                            Obj0A_Animate:				; XREF: Obj0A_Index
000173B0 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000173B6 4EB9 0000 D3EA             		jsr	AnimateSprite
000173BC                            
000173BC                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000173BC 3038 F646                  		move.w	($FFFFF646).w,d0
000173C0 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000173C4 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000173C6 117C 0006 0024             		move.b	#6,$24(a0)
000173CC 5E28 001C                  		addq.b	#7,$1C(a0)
000173D0 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
000173D6 6700                       		beq.s	Obj0A_Display
000173D8 6000                       		bra.s	Obj0A_Display
000173DA                            ; ===========================================================================
000173DA                            
000173DA                            Obj0A_Wobble:
000173DA 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000173DE 6700                       		beq.s	loc_13D44
000173E0 5868 0030                  		addq.w	#4,$30(a0)
000173E4                            
000173E4                            loc_13D44:
000173E4 1028 0026                  		move.b	$26(a0),d0
000173E8 5228 0026                  		addq.b	#1,$26(a0)
000173EC 0240 007F                  		andi.w	#$7F,d0
000173F0 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000173F6 1031 0000                  		move.b	(a1,d0.w),d0
000173FA 4880                       		ext.w	d0
000173FC D068 0030                  		add.w	$30(a0),d0
00017400 3140 0008                  		move.w	d0,8(a0)
00017404 6100                       		bsr.s	Obj0A_ShowNumber
00017406 4EBA 902C                  		jsr	SpeedToPos
0001740A 4A28 0001                  		tst.b	1(a0)
0001740E 6A00                       		bpl.s	Obj0A_Delete
00017410 4EFA 9048                  		jmp	DisplaySprite
00017414                            ; ===========================================================================
00017414                            
00017414                            Obj0A_Delete:
00017414 4EFA 9080                  		jmp	DeleteObject
00017418                            ; ===========================================================================
00017418                            
00017418                            Obj0A_Display:				; XREF: Obj0A_Index
00017418 6100                       		bsr.s	Obj0A_ShowNumber
0001741A 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00017420 4EB9 0000 D3EA             		jsr	AnimateSprite
00017426 4EFA 9032                  		jmp	DisplaySprite
0001742A                            ; ===========================================================================
0001742A                            
0001742A                            Obj0A_Delete2:				; XREF: Obj0A_Index
0001742A 4EFA 906A                  		jmp	DeleteObject
0001742E                            ; ===========================================================================
0001742E                            
0001742E                            Obj0A_AirLeft:				; XREF: Obj0A_Index
0001742E 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00017434 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00017436 5368 0038                  		subq.w	#1,$38(a0)
0001743A 6600                       		bne.s	Obj0A_Display2
0001743C 117C 000E 0024             		move.b	#$E,$24(a0)
00017442 5E28 001C                  		addq.b	#7,$1C(a0)
00017446 60D0                       		bra.s	Obj0A_Display
00017448                            ; ===========================================================================
00017448                            
00017448                            Obj0A_Display2:
00017448 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001744E 4EB9 0000 D3EA             		jsr	AnimateSprite
00017454 4A28 0001                  		tst.b	1(a0)
00017458 6A00                       		bpl.s	Obj0A_Delete3
0001745A 4EFA 8FFE                  		jmp	DisplaySprite
0001745E                            ; ===========================================================================
0001745E                            
0001745E                            Obj0A_Delete3:
0001745E 4EFA 9036                  		jmp	DeleteObject
00017462                            ; ===========================================================================
00017462                            
00017462                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00017462 4A68 0038                  		tst.w	$38(a0)
00017466 6700                       		beq.s	locret_13E1A
00017468 5368 0038                  		subq.w	#1,$38(a0)
0001746C 6600                       		bne.s	locret_13E1A
0001746E 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00017474 6400                       		bcc.s	locret_13E1A
00017476 317C 000F 0038             		move.w	#$F,$38(a0)
0001747C 4268 0012                  		clr.w	$12(a0)
00017480 117C 0080 0001             		move.b	#$80,1(a0)
00017486 3028 0008                  		move.w	8(a0),d0
0001748A 9078 F700                  		sub.w	($FFFFF700).w,d0
0001748E 0640 0080                  		addi.w	#$80,d0
00017492 3140 0008                  		move.w	d0,8(a0)
00017496 3028 000C                  		move.w	$C(a0),d0
0001749A 9078 F704                  		sub.w	($FFFFF704).w,d0
0001749E 0640 0080                  		addi.w	#$80,d0
000174A2 3140 000A                  		move.w	d0,$A(a0)
000174A6 117C 000C 0024             		move.b	#$C,$24(a0)
000174AC                            
000174AC                            locret_13E1A:
000174AC 4E75                       		rts	
000174AE                            ; ===========================================================================
000174AE                            Obj0A_WobbleData:
000174AE 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000174BF 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000174D0 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
000174E1 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
000174F1 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000174FE FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001750B FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00017518 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00017525 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001752E                            ; ===========================================================================
0001752E                            
0001752E                            Obj0A_Countdown:			; XREF: Obj0A_Index
0001752E 0C38 0002 FF8C                             cmpi.b	#2,($FFFFFF8C).w	; is Metal Sonic?
00017534 6700 0000                                  beq.w   Obj0A_IgnoreCountdown    ; if yes, branch
00017538 4A68 002C                  		tst.w	$2C(a0)
0001753C 6600 0000                  		bne.w	loc_13F86
00017540 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00017546 6400 0000                  		bcc.w	locret_1408C
0001754A 0838 0006 D022             		btst	#6,($FFFFD022).w
00017550 6700 0000                  		beq.w	locret_1408C
00017554 5368 0038                  		subq.w	#1,$38(a0)
00017558 6A00 0000                  		bpl.w	loc_13FAC
0001755C 317C 003B 0038             		move.w	#59,$38(a0)
00017562 317C 0001 0036             		move.w	#1,$36(a0)
00017568 4EB9 0000 2CA2             		jsr	(RandomNumber).l
0001756E 0240 0001                  		andi.w	#1,d0
00017572 1140 0034                  		move.b	d0,$34(a0)
00017576 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
0001757A 0C40 0019                  		cmpi.w	#$19,d0
0001757E 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00017580 0C40 0014                  		cmpi.w	#$14,d0
00017584 6700                       		beq.s	Obj0A_WarnSound
00017586 0C40 000F                  		cmpi.w	#$F,d0
0001758A 6700                       		beq.s	Obj0A_WarnSound
0001758C 0C40 000C                  		cmpi.w	#$C,d0
00017590 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00017592 6600                       		bne.s	loc_13F02
00017594 303C 009A                  		move.w	#$9A,d0
00017598 4EB9 0000 12CA             		jsr	(PlaySound).l	; play countdown music
0001759E                            
0001759E                            loc_13F02:
0001759E 5328 0032                  		subq.b	#1,$32(a0)
000175A2 6A00                       		bpl.s	Obj0A_ReduceAir
000175A4 1168 0033 0032             		move.b	$33(a0),$32(a0)
000175AA 08E8 0007 0036             		bset	#7,$36(a0)
000175B0 6000                       		bra.s	Obj0A_ReduceAir
000175B2                            ; ===========================================================================
000175B2                            
000175B2                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000175B2 303C 00C2                  		move.w	#$C2,d0
000175B6 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000175BC                            
000175BC                            Obj0A_ReduceAir:
000175BC 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000175C0 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000175C4 6100 0000                  		bsr.w	ResumeMusic
000175C8 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000175CE 303C 00B2                  		move.w	#$B2,d0
000175D2 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play drowning sound
000175D8 117C 000A 0034             		move.b	#$A,$34(a0)
000175DE 317C 0001 0036             		move.w	#1,$36(a0)
000175E4 317C 0078 002C             		move.w	#$78,$2C(a0)
000175EA 2F08                       		move.l	a0,-(sp)
000175EC 41F8 D000                  		lea	($FFFFD000).w,a0
000175F0 6100 F726                  		bsr.w	Sonic_ResetOnFloor
000175F4 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
000175FA 08E8 0001 0022             		bset	#1,$22(a0)
00017600 08E8 0007 0002             		bset	#7,2(a0)
00017606 317C 0000 0012             		move.w	#0,$12(a0)
0001760C 317C 0000 0010             		move.w	#0,$10(a0)
00017612 317C 0000 0014             		move.w	#0,$14(a0)
00017618 11FC 0001 F744             		move.b	#1,($FFFFF744).w
0001761E 205F                       		movea.l	(sp)+,a0
00017620                            
00017620                            Obj0A_IgnoreCountdown:
00017620 4E75                       		rts	
00017622                            ; ===========================================================================
00017622                            
00017622                            loc_13F86:
00017622 5368 002C                  		subq.w	#1,$2C(a0)
00017626 6600                       		bne.s	loc_13F94
00017628 11FC 0006 D024             		move.b	#6,($FFFFD024).w
0001762E 4E75                       		rts	
00017630                            ; ===========================================================================
00017630                            
00017630                            loc_13F94:
00017630 2F08                       		move.l	a0,-(sp)
00017632 41F8 D000                  		lea	($FFFFD000).w,a0
00017636 4EBA 8DFC                  		jsr	SpeedToPos
0001763A 0668 0010 0012             		addi.w	#$10,$12(a0)
00017640 205F                       		movea.l	(sp)+,a0
00017642 6000                       		bra.s	loc_13FAC
00017644                            ; ===========================================================================
00017644                            
00017644                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00017644 6000                       		bra.s	Obj0A_MakeItem
00017646                            ; ===========================================================================
00017646                            
00017646                            loc_13FAC:
00017646 4A68 0036                  		tst.w	$36(a0)
0001764A 6700 0000                  		beq.w	locret_1408C
0001764E 5368 003A                  		subq.w	#1,$3A(a0)
00017652 6A00 0000                  		bpl.w	locret_1408C
00017656                            
00017656                            Obj0A_MakeItem:
00017656 4EB9 0000 2CA2             		jsr	(RandomNumber).l
0001765C 0240 000F                  		andi.w	#$F,d0
00017660 3140 003A                  		move.w	d0,$3A(a0)
00017664 4EBA 927A                  		jsr	SingleObjLoad
00017668 6600 0000                  		bne.w	locret_1408C
0001766C 12BC 000A                  		move.b	#$A,0(a1)	; load object
00017670 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00017676 7006                       		moveq	#6,d0
00017678 0838 0000 D022             		btst	#0,($FFFFD022).w
0001767E 6700                       		beq.s	loc_13FF2
00017680 4440                       		neg.w	d0
00017682 137C 0040 0026             		move.b	#$40,$26(a1)
00017688                            
00017688                            loc_13FF2:
00017688 D169 0008                  		add.w	d0,8(a1)
0001768C 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00017692 137C 0006 0028             		move.b	#6,$28(a1)
00017698 4A68 002C                  		tst.w	$2C(a0)
0001769C 6700 0000                  		beq.w	loc_1403E
000176A0 0268 0007 003A             		andi.w	#7,$3A(a0)
000176A6 0668 0000 003A             		addi.w	#0,$3A(a0)
000176AC 3038 D00C                  		move.w	($FFFFD00C).w,d0
000176B0 0440 000C                  		subi.w	#$C,d0
000176B4 3340 000C                  		move.w	d0,$C(a1)
000176B8 4EB9 0000 2CA2             		jsr	(RandomNumber).l
000176BE 1340 0026                  		move.b	d0,$26(a1)
000176C2 3038 FE04                  		move.w	($FFFFFE04).w,d0
000176C6 0200 0003                  		andi.b	#3,d0
000176CA 6600                       		bne.s	loc_14082
000176CC 137C 000E 0028             		move.b	#$E,$28(a1)
000176D2 6000                       		bra.s	loc_14082
000176D4                            ; ===========================================================================
000176D4                            
000176D4                            loc_1403E:
000176D4 0828 0007 0036             		btst	#7,$36(a0)
000176DA 6700                       		beq.s	loc_14082
000176DC 3438 FE14                  		move.w	($FFFFFE14).w,d2
000176E0 E24A                       		lsr.w	#1,d2
000176E2 4EB9 0000 2CA2             		jsr	(RandomNumber).l
000176E8 0240 0003                  		andi.w	#3,d0
000176EC 6600                       		bne.s	loc_1406A
000176EE 08E8 0006 0036             		bset	#6,$36(a0)
000176F4 6600                       		bne.s	loc_14082
000176F6 1342 0028                  		move.b	d2,$28(a1)
000176FA 337C 001C 0038             		move.w	#$1C,$38(a1)
00017700                            
00017700                            loc_1406A:
00017700 4A28 0034                  		tst.b	$34(a0)
00017704 6600                       		bne.s	loc_14082
00017706 08E8 0006 0036             		bset	#6,$36(a0)
0001770C 6600                       		bne.s	loc_14082
0001770E 1342 0028                  		move.b	d2,$28(a1)
00017712 337C 001C 0038             		move.w	#$1C,$38(a1)
00017718                            
00017718                            loc_14082:
00017718 5328 0034                  		subq.b	#1,$34(a0)
0001771C 6A00                       		bpl.s	locret_1408C
0001771E 4268 0036                  		clr.w	$36(a0)
00017722                            
00017722                            locret_1408C:
00017722 4E75                       		rts	
00017724                            
00017724                            ; ---------------------------------------------------------------------------
00017724                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00017724                            ; ---------------------------------------------------------------------------
00017724                            
00017724                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017724                            
00017724                            
00017724                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00017724 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001772A 6200                       		bhi.s	loc_140AC
0001772C                            
0001772C                            ; Vladikcomper: Music play code changed
0001772C 7000                                       moveq   #0,d0
0001772E 7200                                       moveq   #0,d1
00017730 103C 0092                                  move.b  #$92,d0          ; SBZ music
00017734 0C38 0003 FE11                             cmpi.b  #3,($FFFFFE11).w ; is this act 4?
0001773A 6700                                       beq.s	@ExecuteMusic	 ; if yes, branch
0001773C 0400 000E                                  subi.b	#$E,d0		 ; set music to LZ
00017740 1238 FE11                                  move.b  ($FFFFFE11).w,d1
00017744 D001                                       add.b	d1,d0		 ; add act number
00017746 4EB9 0000 12CA             @ExecuteMusic:	jsr	(PlaySound).l	 ; play music
0001774C                            
0001774C                            loc_140AC:
0001774C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00017752 4238 D372                  		clr.b	($FFFFD372).w
00017756 4E75                       		rts	
00017758                            ; End of function ResumeMusic
00017758                            
00017758                            ; ===========================================================================
00017758                            Ani_obj0A:
00017758                            	include "_anim\obj0A.asm"
00017758                            ; ---------------------------------------------------------------------------
00017758                            ; Animation script - countdown numbers and bubbles (LZ)
00017758                            ; ---------------------------------------------------------------------------
00017758 0000                       		dc.w byte_140D6-Ani_obj0A
0001775A 0000                       		dc.w byte_140E0-Ani_obj0A
0001775C 0000                       		dc.w byte_140EA-Ani_obj0A
0001775E 0000                       		dc.w byte_140F4-Ani_obj0A
00017760 0000                       		dc.w byte_140FE-Ani_obj0A
00017762 0000                       		dc.w byte_14108-Ani_obj0A
00017764 0000                       		dc.w byte_14112-Ani_obj0A
00017766 0000                       		dc.w byte_14118-Ani_obj0A
00017768 0000                       		dc.w byte_14120-Ani_obj0A
0001776A 0000                       		dc.w byte_14128-Ani_obj0A
0001776C 0000                       		dc.w byte_14130-Ani_obj0A
0001776E 0000                       		dc.w byte_14138-Ani_obj0A
00017770 0000                       		dc.w byte_14140-Ani_obj0A
00017772 0000                       		dc.w byte_14148-Ani_obj0A
00017774 0000                       		dc.w byte_1414A-Ani_obj0A
00017776 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00017780 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
0001778A 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00017794 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
0001779E 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
000177A8 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
000177B2 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
000177B8 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
000177C0 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
000177C8 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
000177D0 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
000177D8 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
000177E0 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
000177E8 0EFC                       byte_14148:	dc.b $E, $FC
000177EA 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
000177F0                            		even
000177F0                            		even
000177F0                            
000177F0                            ; ---------------------------------------------------------------------------
000177F0                            ; Sprite mappings - drowning countdown numbers (LZ)
000177F0                            ; ---------------------------------------------------------------------------
000177F0                            Map_obj0A:
000177F0                            	include "_maps\obj0A.asm"
000177F0                            ; ---------------------------------------------------------------------------
000177F0                            ; Sprite mappings - drowning countdown numbers (LZ)
000177F0                            ; ---------------------------------------------------------------------------
000177F0 0000                       		dc.w byte_14152-Map_obj0A
000177F2 01                         byte_14152:	dc.b 1
000177F3 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
000177F8                            		even
000177F8                            		even
000177F8                            
000177F8                            ; ===========================================================================
000177F8                            ; ---------------------------------------------------------------------------
000177F8                            ; Object 38 - shield and invincibility stars
000177F8                            ; ---------------------------------------------------------------------------
000177F8                            
000177F8                            Obj38:					; XREF: Obj_Index
000177F8 7000                       		moveq	#0,d0
000177FA 1028 0024                  		move.b	$24(a0),d0
000177FE 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00017802 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00017806                            ; ===========================================================================
00017806 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00017808 0000                       		dc.w Obj38_Shield-Obj38_Index
0001780A 0000                       		dc.w Obj38_Stars-Obj38_Index
0001780C                            ; ===========================================================================
0001780C                            
0001780C                            Obj38_Main:				; XREF: Obj38_Index
0001780C 5428 0024                  		addq.b	#2,$24(a0)
00017810 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00017818 117C 0004 0001             		move.b	#4,1(a0)
0001781E 117C 0001 0018             		move.b	#1,$18(a0)
00017824 117C 0010 0019             		move.b	#$10,$19(a0)
0001782A 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
0001782E 6600                       		bne.s	Obj38_DoStars	; if not, branch
00017830 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00017836 4E75                       		rts	
00017838                            ; ===========================================================================
00017838                            
00017838                            Obj38_DoStars:
00017838 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
0001783C 317C 055C 0002             		move.w	#$55C,2(a0)
00017842 4E75                       		rts	
00017844                            ; ===========================================================================
00017844                            
00017844                            Obj38_Shield:				; XREF: Obj38_Index
00017844 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00017848 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
0001784A 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
0001784E 6700                       		beq.s	Obj38_Delete	; if not, branch
00017850 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00017856 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001785C 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00017862 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00017868 4EB9 0000 D3EA             		jsr	AnimateSprite
0001786E 4EFA 8BEA                  		jmp	DisplaySprite
00017872                            ; ===========================================================================
00017872                            
00017872                            Obj38_RmvShield:
00017872 4E75                       		rts	
00017874                            ; ===========================================================================
00017874                            
00017874                            Obj38_Delete:
00017874 4EFA 8C20                  		jmp	DeleteObject
00017878                            ; ===========================================================================
00017878                            
00017878                            Obj38_Stars:				; XREF: Obj38_Index
00017878 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001787C 6700                       		beq.s	Obj38_Delete2	; if not, branch
0001787E 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00017882 1228 001C                  		move.b	$1C(a0),d1
00017886 5301                       		subq.b	#1,d1
00017888 6000                       		bra.s	Obj38_StarTrail
0001788A                            ; ===========================================================================
0001788A E909                       		lsl.b	#4,d1
0001788C 5801                       		addq.b	#4,d1
0001788E 9001                       		sub.b	d1,d0
00017890 1228 0030                  		move.b	$30(a0),d1
00017894 9001                       		sub.b	d1,d0
00017896 5801                       		addq.b	#4,d1
00017898 0201 000F                  		andi.b	#$F,d1
0001789C 1141 0030                  		move.b	d1,$30(a0)
000178A0 6000                       		bra.s	Obj38_StarTrail2a
000178A2                            ; ===========================================================================
000178A2                            
000178A2                            Obj38_StarTrail:			; XREF: Obj38_Stars
000178A2 E709                       		lsl.b	#3,d1
000178A4 1401                       		move.b	d1,d2
000178A6 D201                       		add.b	d1,d1
000178A8 D202                       		add.b	d2,d1
000178AA 5801                       		addq.b	#4,d1
000178AC 9001                       		sub.b	d1,d0
000178AE 1228 0030                  		move.b	$30(a0),d1
000178B2 9001                       		sub.b	d1,d0
000178B4 5801                       		addq.b	#4,d1
000178B6 0C01 0018                  		cmpi.b	#$18,d1
000178BA 6500                       		bcs.s	Obj38_StarTrail2
000178BC 7200                       		moveq	#0,d1
000178BE                            
000178BE                            Obj38_StarTrail2:
000178BE 1141 0030                  		move.b	d1,$30(a0)
000178C2                            
000178C2                            Obj38_StarTrail2a:
000178C2 43F8 CB00                  		lea	($FFFFCB00).w,a1
000178C6 43F1 0000                  		lea	(a1,d0.w),a1
000178CA 3159 0008                  		move.w	(a1)+,8(a0)
000178CE 3159 000C                  		move.w	(a1)+,$C(a0)
000178D2 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000178D8 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000178DE 4EB9 0000 D3EA             		jsr	AnimateSprite
000178E4 4EFA 8B74                  		jmp	DisplaySprite
000178E8                            ; ===========================================================================
000178E8                            
000178E8                            Obj38_Delete2:				; XREF: Obj38_Stars
000178E8 4EFA 8BAC                  		jmp	DeleteObject
000178EC                            ; ===========================================================================
000178EC                            ; ---------------------------------------------------------------------------
000178EC                            ; Object 4A - special stage entry from beta
000178EC                            ; ---------------------------------------------------------------------------
000178EC                            
000178EC                            Obj4A:					; XREF: Obj_Index
000178EC 7000                       		moveq	#0,d0
000178EE 1028 0024                  		move.b	$24(a0),d0
000178F2 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
000178F6 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
000178FA                            ; ===========================================================================
000178FA 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
000178FC 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
000178FE 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00017900                            ; ===========================================================================
00017900                            
00017900                            Obj4A_Main:				; XREF: Obj4A_Index
00017900 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00017904 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00017906 4E75                       		rts	
00017908                            ; ===========================================================================
00017908                            
00017908                            Obj4A_Main2:
00017908 5428 0024                  		addq.b	#2,$24(a0)
0001790C 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00017914 117C 0004 0001             		move.b	#4,1(a0)
0001791A 117C 0001 0018             		move.b	#1,$18(a0)
00017920 117C 0038 0019             		move.b	#$38,$19(a0)
00017926 317C 0541 0002             		move.w	#$541,2(a0)
0001792C 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00017932                            
00017932                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00017932 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00017938 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001793E 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00017944 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
0001794A 4EB9 0000 D3EA             		jsr	AnimateSprite
00017950 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00017956 6600                       		bne.s	Obj4A_Display
00017958 4A38 D000                  		tst.b	($FFFFD000).w
0001795C 6700                       		beq.s	Obj4A_Display
0001795E 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00017964 303C 00A8                  		move.w	#$A8,d0
00017968 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
0001796E                            
0001796E                            Obj4A_Display:
0001796E 4EFA 8AEA                  		jmp	DisplaySprite
00017972                            ; ===========================================================================
00017972                            
00017972                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00017972 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00017976 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00017978 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0001797E 4EFA 8B16                  		jmp	DeleteObject
00017982                            ; ===========================================================================
00017982                            
00017982                            Obj4A_Wait:
00017982 4E75                       		rts	
00017984                            ; ===========================================================================
00017984                            ; ---------------------------------------------------------------------------
00017984                            ; Object 08 - water splash (LZ)
00017984                            ; ---------------------------------------------------------------------------
00017984                            
00017984                            Obj08:					; XREF: Obj_Index
00017984 7000                       		moveq	#0,d0
00017986 1028 0024                  		move.b	$24(a0),d0
0001798A 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
0001798E 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00017992                            ; ===========================================================================
00017992 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00017994 0000                       		dc.w Obj08_Display-Obj08_Index
00017996 0000                       		dc.w Obj08_Delete-Obj08_Index
00017998                            ; ===========================================================================
00017998                            
00017998                            Obj08_Main:				; XREF: Obj08_Index
00017998 5428 0024                  		addq.b	#2,$24(a0)
0001799C 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
000179A4 0028 0004 0001             		ori.b	#4,1(a0)
000179AA 117C 0001 0018             		move.b	#1,$18(a0)
000179B0 117C 0010 0019             		move.b	#$10,$19(a0)
000179B6 317C 4259 0002             		move.w	#$4259,2(a0)
000179BC 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
000179C2                            
000179C2                            Obj08_Display:				; XREF: Obj08_Index
000179C2 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
000179C8 43F9 0000 0000             		lea	(Ani_obj08).l,a1
000179CE 4EB9 0000 D3EA             		jsr	AnimateSprite
000179D4 4EFA 8A84                  		jmp	DisplaySprite
000179D8                            ; ===========================================================================
000179D8                            
000179D8                            Obj08_Delete:				; XREF: Obj08_Index
000179D8 4EFA 8ABC                  		jmp	DeleteObject	; delete when animation	is complete
000179DC                            ; ===========================================================================
000179DC                            Ani_obj38:
000179DC                            	include "_anim\obj38.asm"
000179DC                            ; ---------------------------------------------------------------------------
000179DC                            ; Animation script - shield and invincibility stars
000179DC                            ; ---------------------------------------------------------------------------
000179DC 0000                       		dc.w byte_14356-Ani_obj38
000179DE 0000                       		dc.w byte_1435E-Ani_obj38
000179E0 0000                       		dc.w byte_14364-Ani_obj38
000179E2 0000                       		dc.w byte_1437E-Ani_obj38
000179E4 0000                       		dc.w byte_14398-Ani_obj38
000179E6 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
000179EE 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
000179F4 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00017A05 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00017A0E 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00017A1F 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00017A28 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00017A39 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00017A42                            		even
00017A42                            		even
00017A42                            
00017A42                            ; ---------------------------------------------------------------------------
00017A42                            ; Sprite mappings - shield and invincibility stars
00017A42                            ; ---------------------------------------------------------------------------
00017A42                            Map_obj38:
00017A42                            	include "_maps\obj38.asm"
00017A42                            ; ---------------------------------------------------------------------------
00017A42                            ; Sprite mappings - shield and invincibility stars
00017A42                            ; ---------------------------------------------------------------------------
00017A42 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00017A46 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00017A4A 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00017A4E 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00017A52 04                         byte_143C2:	dc.b 4
00017A53 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00017A58 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00017A5D 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00017A62 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00017A67 04                         byte_143D7:	dc.b 4
00017A68 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00017A6D E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00017A72 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00017A77 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00017A7C 04                         byte_143EC:	dc.b 4
00017A7D E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00017A82 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00017A87 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00017A8C 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00017A91 04                         byte_14401:	dc.b 4
00017A92 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00017A97 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00017A9C 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00017AA1 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00017AA6 04                         byte_14416:	dc.b 4
00017AA7 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00017AAC E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00017AB1 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00017AB6 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00017ABB 04                         byte_1442B:	dc.b 4
00017ABC E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00017AC1 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00017AC6 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00017ACB 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00017AD0 04                         byte_14440:	dc.b 4
00017AD1 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00017AD6 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00017ADB 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00017AE0 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00017AE6 00                         		even
00017AE6 00                         		even
00017AE6                            
00017AE6                            Ani_obj4A:
00017AE6                            	include "_anim\obj4A.asm"
00017AE6                            ; ---------------------------------------------------------------------------
00017AE6                            ; Animation script - special stage entry effect from beta
00017AE6                            ; ---------------------------------------------------------------------------
00017AE6 0000                       		dc.w byte_14458-Ani_obj4A
00017AE8 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00017AFC                            		even
00017AFC                            		even
00017AFC                            
00017AFC                            ; ---------------------------------------------------------------------------
00017AFC                            ; Sprite mappings - special stage entry	from beta
00017AFC                            ; ---------------------------------------------------------------------------
00017AFC                            Map_obj4A:
00017AFC                            	include "_maps\obj4A.asm"
00017AFC                            ; ---------------------------------------------------------------------------
00017AFC                            ; Sprite mappings - special stage entry	from beta
00017AFC                            ; ---------------------------------------------------------------------------
00017AFC 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00017B00 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00017B04 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00017B08 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00017B0C 03                         byte_1447C:	dc.b 3
00017B0D F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00017B12 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00017B17 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00017B1C 03                         byte_1448C:	dc.b 3
00017B1D F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00017B22 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00017B27 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00017B2C 05                         byte_1449C:	dc.b 5
00017B2D E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00017B32 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00017B37 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00017B3C 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00017B41 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00017B46 09                         byte_144B6:	dc.b 9
00017B47 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00017B4C F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00017B51 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00017B56 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00017B5B F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00017B60 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00017B65 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00017B6A 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00017B6F F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00017B74 12                         byte_144E4:	dc.b $12
00017B75 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00017B7A F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00017B7F F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00017B84 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00017B89 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00017B8E 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00017B93 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00017B98 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00017B9D 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00017BA2 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00017BA7 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00017BAC 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00017BB1 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00017BB6 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00017BBB 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00017BC0 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00017BC5 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00017BCA F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00017BCF 11                         byte_1453F:	dc.b $11
00017BD0 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00017BD5 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00017BDA 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00017BDF 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00017BE4 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00017BE9 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00017BEE 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00017BF3 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00017BF8 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00017BFD 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00017C02 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00017C07 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00017C0C F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00017C11 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00017C16 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00017C1B 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00017C20 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00017C25 09                         byte_14595:	dc.b 9
00017C26 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00017C2B 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00017C30 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00017C35 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00017C3A FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00017C3F FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00017C44 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00017C49 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00017C4E 04                         		dc.b 4
00017C4F 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00017C54                            		even
00017C54                            		even
00017C54                            
00017C54                            Ani_obj08:
00017C54                            	include "_anim\obj08.asm"
00017C54                            ; ---------------------------------------------------------------------------
00017C54                            ; Animation script - water splash (LZ)
00017C54                            ; ---------------------------------------------------------------------------
00017C54 0000                       		dc.w byte_145C6-Ani_obj08
00017C56 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00017C5C                            		even
00017C5C                            		even
00017C5C                            
00017C5C                            ; ---------------------------------------------------------------------------
00017C5C                            ; Sprite mappings - water splash (LZ)
00017C5C                            ; ---------------------------------------------------------------------------
00017C5C                            Map_obj08:
00017C5C                            	include "_maps\obj08.asm"
00017C5C                            ; ---------------------------------------------------------------------------
00017C5C                            ; Sprite mappings - water splash (LZ)
00017C5C                            ; ---------------------------------------------------------------------------
00017C5C 0000                       		dc.w byte_145D2-Map_obj08
00017C5E 0000                       		dc.w byte_145DD-Map_obj08
00017C60 0000                       		dc.w byte_145E8-Map_obj08
00017C62 02                         byte_145D2:	dc.b 2
00017C63 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00017C68 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00017C6D 02                         byte_145DD:	dc.b 2
00017C6E E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00017C73 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00017C78 01                         byte_145E8:	dc.b 1
00017C79 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00017C7E                            		even
00017C7E                            		even
00017C7E                            
00017C7E                            ; ---------------------------------------------------------------------------
00017C7E                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00017C7E                            ; ---------------------------------------------------------------------------
00017C7E                            
00017C7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C7E                            
00017C7E                            
00017C7E                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00017C7E 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on an object?
00017C84 6700                       		beq.s	loc_14602	; if yes, branch
00017C86 7000                       		moveq	#0,d0
00017C88 11C0 F768                  		move.b	d0,($FFFFF768).w
00017C8C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017C90 4E75                       		rts	
00017C92                            ; ===========================================================================
00017C92                            
00017C92                            loc_14602:
00017C92 7003                       		moveq	#3,d0
00017C94 11C0 F768                  		move.b	d0,($FFFFF768).w
00017C98 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017C9C 1028 0026                  		move.b	$26(a0),d0
00017CA0 0600 0020                  		addi.b	#$20,d0
00017CA4 6A00                       		bpl.s	loc_14624
00017CA6 1028 0026                  		move.b	$26(a0),d0
00017CAA 6A00                       		bpl.s	loc_1461E
00017CAC 5300                       		subq.b	#1,d0
00017CAE                            
00017CAE                            loc_1461E:
00017CAE 0600 0020                  		addi.b	#$20,d0
00017CB2 6000                       		bra.s	loc_14630
00017CB4                            ; ===========================================================================
00017CB4                            
00017CB4                            loc_14624:
00017CB4 1028 0026                  		move.b	$26(a0),d0
00017CB8 6A00                       		bpl.s	loc_1462C
00017CBA 5200                       		addq.b	#1,d0
00017CBC                            
00017CBC                            loc_1462C:
00017CBC 0600 001F                  		addi.b	#$1F,d0
00017CC0                            
00017CC0                            loc_14630:
00017CC0 0200 00C0                  		andi.b	#$C0,d0
00017CC4 0C00 0040                  		cmpi.b	#$40,d0
00017CC8 6700 0000                  		beq.w	Sonic_WalkVertL
00017CCC 0C00 0080                  		cmpi.b	#$80,d0
00017CD0 6700 0000                  		beq.w	Sonic_WalkCeiling
00017CD4 0C00 00C0                  		cmpi.b	#$C0,d0
00017CD8 6700 0000                  		beq.w	Sonic_WalkVertR
00017CDC 3428 000C                  		move.w	$C(a0),d2
00017CE0 3628 0008                  		move.w	8(a0),d3
00017CE4 7000                       		moveq	#0,d0
00017CE6 1028 0016                  		move.b	$16(a0),d0
00017CEA 4880                       		ext.w	d0
00017CEC D440                       		add.w	d0,d2
00017CEE 1028 0017                  		move.b	$17(a0),d0
00017CF2 4880                       		ext.w	d0
00017CF4 D640                       		add.w	d0,d3
00017CF6 49F8 F768                  		lea	($FFFFF768).w,a4
00017CFA 367C 0010                  		movea.w	#$10,a3
00017CFE 3C3C 0000                  		move.w	#0,d6
00017D02 7A0D                       		moveq	#$D,d5
00017D04 6100 0000                  		bsr.w	FindFloor
00017D08 3F01                       		move.w	d1,-(sp)
00017D0A 3428 000C                  		move.w	$C(a0),d2
00017D0E 3628 0008                  		move.w	8(a0),d3
00017D12 7000                       		moveq	#0,d0
00017D14 1028 0016                  		move.b	$16(a0),d0
00017D18 4880                       		ext.w	d0
00017D1A D440                       		add.w	d0,d2
00017D1C 1028 0017                  		move.b	$17(a0),d0
00017D20 4880                       		ext.w	d0
00017D22 4440                       		neg.w	d0
00017D24 D640                       		add.w	d0,d3
00017D26 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017D2A 367C 0010                  		movea.w	#$10,a3
00017D2E 3C3C 0000                  		move.w	#0,d6
00017D32 7A0D                       		moveq	#$D,d5
00017D34 6100 0000                  		bsr.w	FindFloor
00017D38 301F                       		move.w	(sp)+,d0
00017D3A 6100 0000                  		bsr.w	Sonic_Angle
00017D3E 4A41                       		tst.w	d1
00017D40 6700                       		beq.s	locret_146BE
00017D42 6A00                       		bpl.s	loc_146C0
00017D44 0C41 FFF2                  		cmpi.w	#-$E,d1
00017D48 6D00                       		blt.s	locret_146E6
00017D4A D368 000C                  		add.w	d1,$C(a0)
00017D4E                            
00017D4E                            locret_146BE:
00017D4E 4E75                       		rts	
00017D50                            ; ===========================================================================
00017D50                            
00017D50                            loc_146C0:
00017D50 0C41 000E                  		cmpi.w	#$E,d1
00017D54 6E00                       		bgt.s	loc_146CC
00017D56                            
00017D56                            loc_146C6:
00017D56 D368 000C                  		add.w	d1,$C(a0)
00017D5A 4E75                       		rts	
00017D5C                            ; ===========================================================================
00017D5C                            
00017D5C                            loc_146CC:
00017D5C 4A28 0038                  		tst.b	$38(a0)
00017D60 66F4                       		bne.s	loc_146C6
00017D62 08E8 0001 0022             		bset	#1,$22(a0)	; set Sonic's in the air flag
00017D68 08A8 0005 0022             		bclr	#5,$22(a0)	; clear pushing flag
00017D6E 117C 0001 001D             		move.b	#1,$1D(a0)	; force animation reset
00017D74 4E75                       		rts
00017D76                            ; ===========================================================================
00017D76                            
00017D76                            locret_146E6:
00017D76 4E75                       		rts	
00017D78                            ; End of function Sonic_AnglePos
00017D78                            
00017D78                            ; ===========================================================================
00017D78 2428 0008                  		move.l	8(a0),d2
00017D7C 3028 0010                  		move.w	$10(a0),d0
00017D80 48C0                       		ext.l	d0
00017D82 E180                       		asl.l	#8,d0
00017D84 9480                       		sub.l	d0,d2
00017D86 2142 0008                  		move.l	d2,8(a0)
00017D8A 303C 0038                  		move.w	#$38,d0
00017D8E 48C0                       		ext.l	d0
00017D90 E180                       		asl.l	#8,d0
00017D92 9680                       		sub.l	d0,d3
00017D94 2143 000C                  		move.l	d3,$C(a0)
00017D98 4E75                       		rts	
00017D9A                            ; ===========================================================================
00017D9A                            
00017D9A                            locret_1470A:
00017D9A 4E75                       		rts	
00017D9C                            ; ===========================================================================
00017D9C 2628 000C                  		move.l	$C(a0),d3
00017DA0 3028 0012                  		move.w	$12(a0),d0
00017DA4 0440 0038                  		subi.w	#$38,d0
00017DA8 3140 0012                  		move.w	d0,$12(a0)
00017DAC 48C0                       		ext.l	d0
00017DAE E180                       		asl.l	#8,d0
00017DB0 9680                       		sub.l	d0,d3
00017DB2 2143 000C                  		move.l	d3,$C(a0)
00017DB6 4E75                       		rts	
00017DB8 4E75                       		rts	
00017DBA                            ; ===========================================================================
00017DBA 2428 0008                  		move.l	8(a0),d2
00017DBE 2628 000C                  		move.l	$C(a0),d3
00017DC2 3028 0010                  		move.w	$10(a0),d0
00017DC6 48C0                       		ext.l	d0
00017DC8 E180                       		asl.l	#8,d0
00017DCA 9480                       		sub.l	d0,d2
00017DCC 3028 0012                  		move.w	$12(a0),d0
00017DD0 48C0                       		ext.l	d0
00017DD2 E180                       		asl.l	#8,d0
00017DD4 9680                       		sub.l	d0,d3
00017DD6 2142 0008                  		move.l	d2,8(a0)
00017DDA 2143 000C                  		move.l	d3,$C(a0)
00017DDE 4E75                       		rts	
00017DE0                            
00017DE0                            ; ---------------------------------------------------------------------------
00017DE0                            ; Subroutine to	change Sonic's angle as he walks along the floor
00017DE0                            ; ---------------------------------------------------------------------------
00017DE0                            
00017DE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DE0                            
00017DE0                            
00017DE0                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00017DE0 1438 F76A                  		move.b	($FFFFF76A).w,d2
00017DE4 B240                       		cmp.w	d0,d1
00017DE6 6F00                       		ble.s	loc_1475E
00017DE8 1438 F768                  		move.b	($FFFFF768).w,d2
00017DEC 3200                       		move.w	d0,d1
00017DEE                            
00017DEE                            loc_1475E:
00017DEE 0802 0000                  		btst	#0,d2
00017DF2 6600                       		bne.s	loc_1476A
00017DF4 1142 0026                  		move.b	d2,$26(a0)
00017DF8 4E75                       		rts	
00017DFA                            ; ===========================================================================
00017DFA                            
00017DFA                            loc_1476A:
00017DFA 1428 0026                  		move.b	$26(a0),d2
00017DFE 0602 0020                  		addi.b	#$20,d2
00017E02 0202 00C0                  		andi.b	#$C0,d2
00017E06 1142 0026                  		move.b	d2,$26(a0)
00017E0A 4E75                       		rts	
00017E0C                            ; End of function Sonic_Angle
00017E0C                            
00017E0C                            ; ---------------------------------------------------------------------------
00017E0C                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00017E0C                            ; ---------------------------------------------------------------------------
00017E0C                            
00017E0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E0C                            
00017E0C                            
00017E0C                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00017E0C 3428 000C                  		move.w	$C(a0),d2
00017E10 3628 0008                  		move.w	8(a0),d3
00017E14 7000                       		moveq	#0,d0
00017E16 1028 0017                  		move.b	$17(a0),d0
00017E1A 4880                       		ext.w	d0
00017E1C 4440                       		neg.w	d0
00017E1E D440                       		add.w	d0,d2
00017E20 1028 0016                  		move.b	$16(a0),d0
00017E24 4880                       		ext.w	d0
00017E26 D640                       		add.w	d0,d3
00017E28 49F8 F768                  		lea	($FFFFF768).w,a4
00017E2C 367C 0010                  		movea.w	#$10,a3
00017E30 3C3C 0000                  		move.w	#0,d6
00017E34 7A0D                       		moveq	#$D,d5
00017E36 6100 0000                  		bsr.w	FindWall
00017E3A 3F01                       		move.w	d1,-(sp)
00017E3C 3428 000C                  		move.w	$C(a0),d2
00017E40 3628 0008                  		move.w	8(a0),d3
00017E44 7000                       		moveq	#0,d0
00017E46 1028 0017                  		move.b	$17(a0),d0
00017E4A 4880                       		ext.w	d0
00017E4C D440                       		add.w	d0,d2
00017E4E 1028 0016                  		move.b	$16(a0),d0
00017E52 4880                       		ext.w	d0
00017E54 D640                       		add.w	d0,d3
00017E56 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017E5A 367C 0010                  		movea.w	#$10,a3
00017E5E 3C3C 0000                  		move.w	#0,d6
00017E62 7A0D                       		moveq	#$D,d5
00017E64 6100 0000                  		bsr.w	FindWall
00017E68 301F                       		move.w	(sp)+,d0
00017E6A 6100 FF74                  		bsr.w	Sonic_Angle
00017E6E 4A41                       		tst.w	d1
00017E70 6700                       		beq.s	locret_147F0
00017E72 6A00                       		bpl.s	loc_147F2
00017E74 0C41 FFF2                  		cmpi.w	#-$E,d1
00017E78 6D00 FF20                  		blt.w	locret_1470A
00017E7C D368 0008                  		add.w	d1,8(a0)
00017E80                            
00017E80                            locret_147F0:
00017E80 4E75                       		rts	
00017E82                            ; ===========================================================================
00017E82                            
00017E82                            loc_147F2:
00017E82 0C41 000E                  		cmpi.w	#$E,d1
00017E86 6E00                       		bgt.s	loc_147FE
00017E88                            
00017E88                            loc_147F8:
00017E88 D368 0008                  		add.w	d1,8(a0)
00017E8C 4E75                       		rts	
00017E8E                            ; ===========================================================================
00017E8E                            
00017E8E                            loc_147FE:
00017E8E 4A28 0038                  		tst.b	$38(a0)
00017E92 66F4                       		bne.s	loc_147F8
00017E94 08E8 0001 0022             		bset	#1,$22(a0)
00017E9A 08A8 0005 0022             		bclr	#5,$22(a0)
00017EA0 117C 0001 001D             		move.b	#1,$1D(a0)
00017EA6 4E75                       		rts	
00017EA8                            ; End of function Sonic_WalkVertR
00017EA8                            
00017EA8                            ; ---------------------------------------------------------------------------
00017EA8                            ; Subroutine allowing Sonic to walk upside-down
00017EA8                            ; ---------------------------------------------------------------------------
00017EA8                            
00017EA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EA8                            
00017EA8                            
00017EA8                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00017EA8 3428 000C                  		move.w	$C(a0),d2
00017EAC 3628 0008                  		move.w	8(a0),d3
00017EB0 7000                       		moveq	#0,d0
00017EB2 1028 0016                  		move.b	$16(a0),d0
00017EB6 4880                       		ext.w	d0
00017EB8 9440                       		sub.w	d0,d2
00017EBA 0A42 000F                  		eori.w	#$F,d2
00017EBE 1028 0017                  		move.b	$17(a0),d0
00017EC2 4880                       		ext.w	d0
00017EC4 D640                       		add.w	d0,d3
00017EC6 49F8 F768                  		lea	($FFFFF768).w,a4
00017ECA 367C FFF0                  		movea.w	#-$10,a3
00017ECE 3C3C 1000                  		move.w	#$1000,d6
00017ED2 7A0D                       		moveq	#$D,d5
00017ED4 6100 0000                  		bsr.w	FindFloor
00017ED8 3F01                       		move.w	d1,-(sp)
00017EDA 3428 000C                  		move.w	$C(a0),d2
00017EDE 3628 0008                  		move.w	8(a0),d3
00017EE2 7000                       		moveq	#0,d0
00017EE4 1028 0016                  		move.b	$16(a0),d0
00017EE8 4880                       		ext.w	d0
00017EEA 9440                       		sub.w	d0,d2
00017EEC 0A42 000F                  		eori.w	#$F,d2
00017EF0 1028 0017                  		move.b	$17(a0),d0
00017EF4 4880                       		ext.w	d0
00017EF6 9640                       		sub.w	d0,d3
00017EF8 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017EFC 367C FFF0                  		movea.w	#-$10,a3
00017F00 3C3C 1000                  		move.w	#$1000,d6
00017F04 7A0D                       		moveq	#$D,d5
00017F06 6100 0000                  		bsr.w	FindFloor
00017F0A 301F                       		move.w	(sp)+,d0
00017F0C 6100 FED2                  		bsr.w	Sonic_Angle
00017F10 4A41                       		tst.w	d1
00017F12 6700                       		beq.s	locret_14892
00017F14 6A00                       		bpl.s	loc_14894
00017F16 0C41 FFF2                  		cmpi.w	#-$E,d1
00017F1A 6D00 FE5A                  		blt.w	locret_146E6
00017F1E 9368 000C                  		sub.w	d1,$C(a0)
00017F22                            
00017F22                            locret_14892:
00017F22 4E75                       		rts	
00017F24                            ; ===========================================================================
00017F24                            
00017F24                            loc_14894:
00017F24 0C41 000E                  		cmpi.w	#$E,d1
00017F28 6E00                       		bgt.s	loc_148A0
00017F2A                            
00017F2A                            loc_1489A:
00017F2A 9368 000C                  		sub.w	d1,$C(a0)
00017F2E 4E75                       		rts	
00017F30                            ; ===========================================================================
00017F30                            
00017F30                            loc_148A0:
00017F30 4A28 0038                  		tst.b	$38(a0)
00017F34 66F4                       		bne.s	loc_1489A
00017F36 08E8 0001 0022             		bset	#1,$22(a0)
00017F3C 08A8 0005 0022             		bclr	#5,$22(a0)
00017F42 117C 0001 001D             		move.b	#1,$1D(a0)
00017F48 4E75                       		rts	
00017F4A                            ; End of function Sonic_WalkCeiling
00017F4A                            
00017F4A                            ; ---------------------------------------------------------------------------
00017F4A                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00017F4A                            ; ---------------------------------------------------------------------------
00017F4A                            
00017F4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F4A                            
00017F4A                            
00017F4A                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00017F4A 3428 000C                  		move.w	$C(a0),d2
00017F4E 3628 0008                  		move.w	8(a0),d3
00017F52 7000                       		moveq	#0,d0
00017F54 1028 0017                  		move.b	$17(a0),d0
00017F58 4880                       		ext.w	d0
00017F5A 9440                       		sub.w	d0,d2
00017F5C 1028 0016                  		move.b	$16(a0),d0
00017F60 4880                       		ext.w	d0
00017F62 9640                       		sub.w	d0,d3
00017F64 0A43 000F                  		eori.w	#$F,d3
00017F68 49F8 F768                  		lea	($FFFFF768).w,a4
00017F6C 367C FFF0                  		movea.w	#-$10,a3
00017F70 3C3C 0800                  		move.w	#$800,d6
00017F74 7A0D                       		moveq	#$D,d5
00017F76 6100 0000                  		bsr.w	FindWall
00017F7A 3F01                       		move.w	d1,-(sp)
00017F7C 3428 000C                  		move.w	$C(a0),d2
00017F80 3628 0008                  		move.w	8(a0),d3
00017F84 7000                       		moveq	#0,d0
00017F86 1028 0017                  		move.b	$17(a0),d0
00017F8A 4880                       		ext.w	d0
00017F8C D440                       		add.w	d0,d2
00017F8E 1028 0016                  		move.b	$16(a0),d0
00017F92 4880                       		ext.w	d0
00017F94 9640                       		sub.w	d0,d3
00017F96 0A43 000F                  		eori.w	#$F,d3
00017F9A 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017F9E 367C FFF0                  		movea.w	#-$10,a3
00017FA2 3C3C 0800                  		move.w	#$800,d6
00017FA6 7A0D                       		moveq	#$D,d5
00017FA8 6100 0000                  		bsr.w	FindWall
00017FAC 301F                       		move.w	(sp)+,d0
00017FAE 6100 FE30                  		bsr.w	Sonic_Angle
00017FB2 4A41                       		tst.w	d1
00017FB4 6700                       		beq.s	locret_14934
00017FB6 6A00                       		bpl.s	loc_14936
00017FB8 0C41 FFF2                  		cmpi.w	#-$E,d1
00017FBC 6D00 FDDC                  		blt.w	locret_1470A
00017FC0 9368 0008                  		sub.w	d1,8(a0)
00017FC4                            
00017FC4                            locret_14934:
00017FC4 4E75                       		rts	
00017FC6                            ; ===========================================================================
00017FC6                            
00017FC6                            loc_14936:
00017FC6 0C41 000E                  		cmpi.w	#$E,d1
00017FCA 6E00                       		bgt.s	loc_14942
00017FCC                            
00017FCC                            loc_1493C:
00017FCC 9368 0008                  		sub.w	d1,8(a0)
00017FD0 4E75                       		rts	
00017FD2                            ; ===========================================================================
00017FD2                            
00017FD2                            loc_14942:
00017FD2 4A28 0038                  		tst.b	$38(a0)
00017FD6 66F4                       		bne.s	loc_1493C
00017FD8 08E8 0001 0022             		bset	#1,$22(a0)
00017FDE 08A8 0005 0022             		bclr	#5,$22(a0)
00017FE4 117C 0001 001D             		move.b	#1,$1D(a0)
00017FEA 4E75                       		rts	
00017FEC                            ; End of function Sonic_WalkVertL
00017FEC                            
00017FEC                            ; ---------------------------------------------------------------------------
00017FEC                            ; Subroutine to	find which tile	the object is standing on
00017FEC                            ; ---------------------------------------------------------------------------
00017FEC                            
00017FEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017FEC                            
00017FEC                            
00017FEC                            Floor_ChkTile:				; XREF: FindFloor; et al
00017FEC 3002                       		move.w	d2,d0
00017FEE E248                       		lsr.w	#1,d0
00017FF0 0240 0380                  		andi.w	#$380,d0
00017FF4 3203                       		move.w	d3,d1
00017FF6 E049                       		lsr.w	#8,d1
00017FF8 0241 007F                  		andi.w	#$7F,d1
00017FFC D041                       		add.w	d1,d0
00017FFE 72FF                       		moveq	#-1,d1
00018000 43F8 A400                  		lea	($FFFFA400).w,a1
00018004 1231 0000                  		move.b	(a1,d0.w),d1
00018008 6700                       		beq.s	loc_14996
0001800A 6B00                       		bmi.s	loc_1499A
0001800C 5301                       		subq.b	#1,d1
0001800E 4881                       		ext.w	d1
00018010 EE59                       		ror.w	#7,d1
00018012 3002                       		move.w	d2,d0
00018014 D040                       		add.w	d0,d0
00018016 0240 01E0                  		andi.w	#$1E0,d0
0001801A D240                       		add.w	d0,d1
0001801C 3003                       		move.w	d3,d0
0001801E E648                       		lsr.w	#3,d0
00018020 0240 001E                  		andi.w	#$1E,d0
00018024 D240                       		add.w	d0,d1
00018026                            
00018026                            loc_14996:
00018026 2241                       		movea.l	d1,a1
00018028 4E75                       		rts	
0001802A                            ; ===========================================================================
0001802A                            
0001802A                            loc_1499A:
0001802A 0241 007F                  		andi.w	#$7F,d1
0001802E 0828 0006 0001             		btst	#6,1(a0)
00018034 6700                       		beq.s	loc_149B2
00018036 5241                       		addq.w	#1,d1
00018038 0C41 0029                  		cmpi.w	#$29,d1
0001803C 6600                       		bne.s	loc_149B2
0001803E 323C 0051                  		move.w	#$51,d1
00018042                            
00018042                            loc_149B2:
00018042 5301                       		subq.b	#1,d1
00018044 EE59                       		ror.w	#7,d1
00018046 3002                       		move.w	d2,d0
00018048 D040                       		add.w	d0,d0
0001804A 0240 01E0                  		andi.w	#$1E0,d0
0001804E D240                       		add.w	d0,d1
00018050 3003                       		move.w	d3,d0
00018052 E648                       		lsr.w	#3,d0
00018054 0240 001E                  		andi.w	#$1E,d0
00018058 D240                       		add.w	d0,d1
0001805A 2241                       		movea.l	d1,a1
0001805C 4E75                       		rts	
0001805E                            ; End of function Floor_ChkTile
0001805E                            
0001805E                            
0001805E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001805E                            
0001805E                            
0001805E                            FindFloor:				; XREF: Sonic_AnglePos; et al
0001805E 618C                       		bsr.s	Floor_ChkTile
00018060 3011                       		move.w	(a1),d0
00018062 3800                       		move.w	d0,d4
00018064 0240 07FF                  		andi.w	#$7FF,d0
00018068 6700                       		beq.s	loc_149DE
0001806A 0B04                       		btst	d5,d4
0001806C 6600                       		bne.s	loc_149EC
0001806E                            
0001806E                            loc_149DE:
0001806E D44B                       		add.w	a3,d2
00018070 6100 0000                  		bsr.w	FindFloor2
00018074 944B                       		sub.w	a3,d2
00018076 0641 0010                  		addi.w	#$10,d1
0001807A 4E75                       		rts	
0001807C                            ; ===========================================================================
0001807C                            
0001807C                            loc_149EC:
0001807C 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00018080 1032 0000                  		move.b	(a2,d0.w),d0
00018084 0240 00FF                  		andi.w	#$FF,d0
00018088 67E4                       		beq.s	loc_149DE
0001808A 45F9 0000 0000             		lea	(AngleMap).l,a2
00018090 18B2 0000                  		move.b	(a2,d0.w),(a4)
00018094 E948                       		lsl.w	#4,d0
00018096 3203                       		move.w	d3,d1
00018098 0804 000B                  		btst	#$B,d4
0001809C 6700                       		beq.s	loc_14A12
0001809E 4641                       		not.w	d1
000180A0 4414                       		neg.b	(a4)
000180A2                            
000180A2                            loc_14A12:
000180A2 0804 000C                  		btst	#$C,d4
000180A6 6700                       		beq.s	loc_14A22
000180A8 0614 0040                  		addi.b	#$40,(a4)
000180AC 4414                       		neg.b	(a4)
000180AE 0414 0040                  		subi.b	#$40,(a4)
000180B2                            
000180B2                            loc_14A22:
000180B2 0241 000F                  		andi.w	#$F,d1
000180B6 D240                       		add.w	d0,d1
000180B8 45F9 0000 0000             		lea	(CollArray1).l,a2
000180BE 1032 1000                  		move.b	(a2,d1.w),d0
000180C2 4880                       		ext.w	d0
000180C4 BD44                       		eor.w	d6,d4
000180C6 0804 000C                  		btst	#$C,d4
000180CA 6700                       		beq.s	loc_14A3E
000180CC 4440                       		neg.w	d0
000180CE                            
000180CE                            loc_14A3E:
000180CE 4A40                       		tst.w	d0
000180D0 679C                       		beq.s	loc_149DE
000180D2 6B00                       		bmi.s	loc_14A5A
000180D4 0C00 0010                  		cmpi.b	#$10,d0
000180D8 6700                       		beq.s	loc_14A66
000180DA 3202                       		move.w	d2,d1
000180DC 0241 000F                  		andi.w	#$F,d1
000180E0 D041                       		add.w	d1,d0
000180E2 323C 000F                  		move.w	#$F,d1
000180E6 9240                       		sub.w	d0,d1
000180E8 4E75                       		rts	
000180EA                            ; ===========================================================================
000180EA                            
000180EA                            loc_14A5A:
000180EA 3202                       		move.w	d2,d1
000180EC 0241 000F                  		andi.w	#$F,d1
000180F0 D041                       		add.w	d1,d0
000180F2 6A00 FF7A                  		bpl.w	loc_149DE
000180F6                            
000180F6                            loc_14A66:
000180F6 944B                       		sub.w	a3,d2
000180F8 6100 0000                  		bsr.w	FindFloor2
000180FC D44B                       		add.w	a3,d2
000180FE 0441 0010                  		subi.w	#$10,d1
00018102 4E75                       		rts	
00018104                            ; End of function FindFloor
00018104                            
00018104                            
00018104                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018104                            
00018104                            
00018104                            FindFloor2:				; XREF: FindFloor
00018104 6100 FEE6                  		bsr.w	Floor_ChkTile
00018108 3011                       		move.w	(a1),d0
0001810A 3800                       		move.w	d0,d4
0001810C 0240 07FF                  		andi.w	#$7FF,d0
00018110 6700                       		beq.s	loc_14A86
00018112 0B04                       		btst	d5,d4
00018114 6600                       		bne.s	loc_14A94
00018116                            
00018116                            loc_14A86:
00018116 323C 000F                  		move.w	#$F,d1
0001811A 3002                       		move.w	d2,d0
0001811C 0240 000F                  		andi.w	#$F,d0
00018120 9240                       		sub.w	d0,d1
00018122 4E75                       		rts	
00018124                            ; ===========================================================================
00018124                            
00018124                            loc_14A94:
00018124 2478 F796                  		movea.l	($FFFFF796).w,a2
00018128 1032 0000                  		move.b	(a2,d0.w),d0
0001812C 0240 00FF                  		andi.w	#$FF,d0
00018130 67E4                       		beq.s	loc_14A86
00018132 45F9 0000 0000             		lea	(AngleMap).l,a2
00018138 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001813C E948                       		lsl.w	#4,d0
0001813E 3203                       		move.w	d3,d1
00018140 0804 000B                  		btst	#$B,d4
00018144 6700                       		beq.s	loc_14ABA
00018146 4641                       		not.w	d1
00018148 4414                       		neg.b	(a4)
0001814A                            
0001814A                            loc_14ABA:
0001814A 0804 000C                  		btst	#$C,d4
0001814E 6700                       		beq.s	loc_14ACA
00018150 0614 0040                  		addi.b	#$40,(a4)
00018154 4414                       		neg.b	(a4)
00018156 0414 0040                  		subi.b	#$40,(a4)
0001815A                            
0001815A                            loc_14ACA:
0001815A 0241 000F                  		andi.w	#$F,d1
0001815E D240                       		add.w	d0,d1
00018160 45F9 0000 0000             		lea	(CollArray1).l,a2
00018166 1032 1000                  		move.b	(a2,d1.w),d0
0001816A 4880                       		ext.w	d0
0001816C BD44                       		eor.w	d6,d4
0001816E 0804 000C                  		btst	#$C,d4
00018172 6700                       		beq.s	loc_14AE6
00018174 4440                       		neg.w	d0
00018176                            
00018176                            loc_14AE6:
00018176 4A40                       		tst.w	d0
00018178 679C                       		beq.s	loc_14A86
0001817A 6B00                       		bmi.s	loc_14AFC
0001817C 3202                       		move.w	d2,d1
0001817E 0241 000F                  		andi.w	#$F,d1
00018182 D041                       		add.w	d1,d0
00018184 323C 000F                  		move.w	#$F,d1
00018188 9240                       		sub.w	d0,d1
0001818A 4E75                       		rts	
0001818C                            ; ===========================================================================
0001818C                            
0001818C                            loc_14AFC:
0001818C 3202                       		move.w	d2,d1
0001818E 0241 000F                  		andi.w	#$F,d1
00018192 D041                       		add.w	d1,d0
00018194 6A00 FF80                  		bpl.w	loc_14A86
00018198 4641                       		not.w	d1
0001819A 4E75                       		rts	
0001819C                            ; End of function FindFloor2
0001819C                            
0001819C                            
0001819C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001819C                            
0001819C                            
0001819C                            FindWall:				; XREF: Sonic_WalkVertR; et al
0001819C 6100 FE4E                  		bsr.w	Floor_ChkTile
000181A0 3011                       		move.w	(a1),d0
000181A2 3800                       		move.w	d0,d4
000181A4 0240 07FF                  		andi.w	#$7FF,d0
000181A8 6700                       		beq.s	loc_14B1E
000181AA 0B04                       		btst	d5,d4
000181AC 6600                       		bne.s	loc_14B2C
000181AE                            
000181AE                            loc_14B1E:
000181AE D64B                       		add.w	a3,d3
000181B0 6100 0000                  		bsr.w	FindWall2
000181B4 964B                       		sub.w	a3,d3
000181B6 0641 0010                  		addi.w	#$10,d1
000181BA 4E75                       		rts	
000181BC                            ; ===========================================================================
000181BC                            
000181BC                            loc_14B2C:
000181BC 2478 F796                  		movea.l	($FFFFF796).w,a2
000181C0 1032 0000                  		move.b	(a2,d0.w),d0
000181C4 0240 00FF                  		andi.w	#$FF,d0
000181C8 67E4                       		beq.s	loc_14B1E
000181CA 45F9 0000 0000             		lea	(AngleMap).l,a2
000181D0 18B2 0000                  		move.b	(a2,d0.w),(a4)
000181D4 E948                       		lsl.w	#4,d0
000181D6 3202                       		move.w	d2,d1
000181D8 0804 000C                  		btst	#$C,d4
000181DC 6700                       		beq.s	loc_14B5A
000181DE 4641                       		not.w	d1
000181E0 0614 0040                  		addi.b	#$40,(a4)
000181E4 4414                       		neg.b	(a4)
000181E6 0414 0040                  		subi.b	#$40,(a4)
000181EA                            
000181EA                            loc_14B5A:
000181EA 0804 000B                  		btst	#$B,d4
000181EE 6700                       		beq.s	loc_14B62
000181F0 4414                       		neg.b	(a4)
000181F2                            
000181F2                            loc_14B62:
000181F2 0241 000F                  		andi.w	#$F,d1
000181F6 D240                       		add.w	d0,d1
000181F8 45F9 0000 0000             		lea	(CollArray2).l,a2
000181FE 1032 1000                  		move.b	(a2,d1.w),d0
00018202 4880                       		ext.w	d0
00018204 BD44                       		eor.w	d6,d4
00018206 0804 000B                  		btst	#$B,d4
0001820A 6700                       		beq.s	loc_14B7E
0001820C 4440                       		neg.w	d0
0001820E                            
0001820E                            loc_14B7E:
0001820E 4A40                       		tst.w	d0
00018210 679C                       		beq.s	loc_14B1E
00018212 6B00                       		bmi.s	loc_14B9A
00018214 0C00 0010                  		cmpi.b	#$10,d0
00018218 6700                       		beq.s	loc_14BA6
0001821A 3203                       		move.w	d3,d1
0001821C 0241 000F                  		andi.w	#$F,d1
00018220 D041                       		add.w	d1,d0
00018222 323C 000F                  		move.w	#$F,d1
00018226 9240                       		sub.w	d0,d1
00018228 4E75                       		rts	
0001822A                            ; ===========================================================================
0001822A                            
0001822A                            loc_14B9A:
0001822A 3203                       		move.w	d3,d1
0001822C 0241 000F                  		andi.w	#$F,d1
00018230 D041                       		add.w	d1,d0
00018232 6A00 FF7A                  		bpl.w	loc_14B1E
00018236                            
00018236                            loc_14BA6:
00018236 964B                       		sub.w	a3,d3
00018238 6100 0000                  		bsr.w	FindWall2
0001823C D64B                       		add.w	a3,d3
0001823E 0441 0010                  		subi.w	#$10,d1
00018242 4E75                       		rts	
00018244                            ; End of function FindWall
00018244                            
00018244                            
00018244                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018244                            
00018244                            
00018244                            FindWall2:				; XREF: FindWall
00018244 6100 FDA6                  		bsr.w	Floor_ChkTile
00018248 3011                       		move.w	(a1),d0
0001824A 3800                       		move.w	d0,d4
0001824C 0240 07FF                  		andi.w	#$7FF,d0
00018250 6700                       		beq.s	loc_14BC6
00018252 0B04                       		btst	d5,d4
00018254 6600                       		bne.s	loc_14BD4
00018256                            
00018256                            loc_14BC6:
00018256 323C 000F                  		move.w	#$F,d1
0001825A 3003                       		move.w	d3,d0
0001825C 0240 000F                  		andi.w	#$F,d0
00018260 9240                       		sub.w	d0,d1
00018262 4E75                       		rts	
00018264                            ; ===========================================================================
00018264                            
00018264                            loc_14BD4:
00018264 2478 F796                  		movea.l	($FFFFF796).w,a2
00018268 1032 0000                  		move.b	(a2,d0.w),d0
0001826C 0240 00FF                  		andi.w	#$FF,d0
00018270 67E4                       		beq.s	loc_14BC6
00018272 45F9 0000 0000             		lea	(AngleMap).l,a2
00018278 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001827C E948                       		lsl.w	#4,d0
0001827E 3202                       		move.w	d2,d1
00018280 0804 000C                  		btst	#$C,d4
00018284 6700                       		beq.s	loc_14C02
00018286 4641                       		not.w	d1
00018288 0614 0040                  		addi.b	#$40,(a4)
0001828C 4414                       		neg.b	(a4)
0001828E 0414 0040                  		subi.b	#$40,(a4)
00018292                            
00018292                            loc_14C02:
00018292 0804 000B                  		btst	#$B,d4
00018296 6700                       		beq.s	loc_14C0A
00018298 4414                       		neg.b	(a4)
0001829A                            
0001829A                            loc_14C0A:
0001829A 0241 000F                  		andi.w	#$F,d1
0001829E D240                       		add.w	d0,d1
000182A0 45F9 0000 0000             		lea	(CollArray2).l,a2
000182A6 1032 1000                  		move.b	(a2,d1.w),d0
000182AA 4880                       		ext.w	d0
000182AC BD44                       		eor.w	d6,d4
000182AE 0804 000B                  		btst	#$B,d4
000182B2 6700                       		beq.s	loc_14C26
000182B4 4440                       		neg.w	d0
000182B6                            
000182B6                            loc_14C26:
000182B6 4A40                       		tst.w	d0
000182B8 679C                       		beq.s	loc_14BC6
000182BA 6B00                       		bmi.s	loc_14C3C
000182BC 3203                       		move.w	d3,d1
000182BE 0241 000F                  		andi.w	#$F,d1
000182C2 D041                       		add.w	d1,d0
000182C4 323C 000F                  		move.w	#$F,d1
000182C8 9240                       		sub.w	d0,d1
000182CA 4E75                       		rts	
000182CC                            ; ===========================================================================
000182CC                            
000182CC                            loc_14C3C:
000182CC 3203                       		move.w	d3,d1
000182CE 0241 000F                  		andi.w	#$F,d1
000182D2 D041                       		add.w	d1,d0
000182D4 6A00 FF80                  		bpl.w	loc_14BC6
000182D8 4641                       		not.w	d1
000182DA 4E75                       		rts	
000182DC                            ; End of function FindWall2
000182DC                            
000182DC                            ; ---------------------------------------------------------------------------
000182DC                            ; Unused floor/wall subroutine - logs something	to do with collision
000182DC                            ; ---------------------------------------------------------------------------
000182DC                            
000182DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000182DC                            
000182DC                            
000182DC                            FloorLog_Unk:				; XREF: Level
000182DC 4E75                       		rts	
000182DE                            
000182DE 43F9 0000 0000             		lea	(CollArray1).l,a1
000182E4 45F9 0000 0000             		lea	(CollArray1).l,a2
000182EA 363C 00FF                  		move.w	#$FF,d3
000182EE                            
000182EE                            loc_14C5E:
000182EE 7A10                       		moveq	#$10,d5
000182F0 343C 000F                  		move.w	#$F,d2
000182F4                            
000182F4                            loc_14C64:
000182F4 7800                       		moveq	#0,d4
000182F6 323C 000F                  		move.w	#$F,d1
000182FA                            
000182FA                            loc_14C6A:
000182FA 3019                       		move.w	(a1)+,d0
000182FC EAA8                       		lsr.l	d5,d0
000182FE D944                       		addx.w	d4,d4
00018300 51C9 FFF8                  		dbf	d1,loc_14C6A
00018304                            
00018304 34C4                       		move.w	d4,(a2)+
00018306 92FC 0020                  		suba.w	#$20,a1
0001830A 5345                       		subq.w	#1,d5
0001830C 51CA FFE6                  		dbf	d2,loc_14C64
00018310                            
00018310 D2FC 0020                  		adda.w	#$20,a1
00018314 51CB FFD8                  		dbf	d3,loc_14C5E
00018318                            
00018318 43F9 0000 0000             		lea	(CollArray1).l,a1
0001831E 45F9 0000 0000             		lea	(CollArray2).l,a2
00018324 6100                       		bsr.s	FloorLog_Unk2
00018326 43F9 0000 0000             		lea	(CollArray1).l,a1
0001832C 45F9 0000 0000             		lea	(CollArray1).l,a2
00018332                            
00018332                            ; End of function FloorLog_Unk
00018332                            
00018332                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018332                            
00018332                            
00018332                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00018332 363C 0FFF                  		move.w	#$FFF,d3
00018336                            
00018336                            loc_14CA6:
00018336 7400                       		moveq	#0,d2
00018338 323C 000F                  		move.w	#$F,d1
0001833C 3019                       		move.w	(a1)+,d0
0001833E 6700                       		beq.s	loc_14CD4
00018340 6B00                       		bmi.s	loc_14CBE
00018342                            
00018342                            loc_14CB2:
00018342 E248                       		lsr.w	#1,d0
00018344 6400                       		bcc.s	loc_14CB8
00018346 5202                       		addq.b	#1,d2
00018348                            
00018348                            loc_14CB8:
00018348 51C9 FFF8                  		dbf	d1,loc_14CB2
0001834C                            
0001834C 6000                       		bra.s	loc_14CD6
0001834E                            ; ===========================================================================
0001834E                            
0001834E                            loc_14CBE:
0001834E 0C40 FFFF                  		cmpi.w	#-1,d0
00018352 6700                       		beq.s	loc_14CD0
00018354                            
00018354                            loc_14CC4:
00018354 E348                       		lsl.w	#1,d0
00018356 6400                       		bcc.s	loc_14CCA
00018358 5302                       		subq.b	#1,d2
0001835A                            
0001835A                            loc_14CCA:
0001835A 51C9 FFF8                  		dbf	d1,loc_14CC4
0001835E                            
0001835E 6000                       		bra.s	loc_14CD6
00018360                            ; ===========================================================================
00018360                            
00018360                            loc_14CD0:
00018360 303C 0010                  		move.w	#$10,d0
00018364                            
00018364                            loc_14CD4:
00018364 3400                       		move.w	d0,d2
00018366                            
00018366                            loc_14CD6:
00018366 14C2                       		move.b	d2,(a2)+
00018368 51CB FFCC                  		dbf	d3,loc_14CA6
0001836C                            
0001836C 4E75                       		rts	
0001836E                            
0001836E                            ; End of function FloorLog_Unk2
0001836E                            
0001836E                            
0001836E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001836E                            
0001836E                            
0001836E                            Sonic_WalkSpeed:			; XREF: Sonic_Move
0001836E 2628 0008                  		move.l	8(a0),d3
00018372 2428 000C                  		move.l	$C(a0),d2
00018376 3228 0010                  		move.w	$10(a0),d1
0001837A 48C1                       		ext.l	d1
0001837C E181                       		asl.l	#8,d1
0001837E D681                       		add.l	d1,d3
00018380 3228 0012                  		move.w	$12(a0),d1
00018384 48C1                       		ext.l	d1
00018386 E181                       		asl.l	#8,d1
00018388 D481                       		add.l	d1,d2
0001838A 4842                       		swap	d2
0001838C 4843                       		swap	d3
0001838E 11C0 F768                  		move.b	d0,($FFFFF768).w
00018392 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00018396 1200                       		move.b	d0,d1
00018398 0600 0020                  		addi.b	#$20,d0
0001839C 6A00                       		bpl.s	loc_14D1A
0001839E 1001                       		move.b	d1,d0
000183A0 6A00                       		bpl.s	loc_14D14
000183A2 5300                       		subq.b	#1,d0
000183A4                            
000183A4                            loc_14D14:
000183A4 0600 0020                  		addi.b	#$20,d0
000183A8 6000                       		bra.s	loc_14D24
000183AA                            ; ===========================================================================
000183AA                            
000183AA                            loc_14D1A:
000183AA 1001                       		move.b	d1,d0
000183AC 6A00                       		bpl.s	loc_14D20
000183AE 5200                       		addq.b	#1,d0
000183B0                            
000183B0                            loc_14D20:
000183B0 0600 001F                  		addi.b	#$1F,d0
000183B4                            
000183B4                            loc_14D24:
000183B4 0200 00C0                  		andi.b	#$C0,d0
000183B8 6700 0000                  		beq.w	loc_14DF0
000183BC 0C00 0080                  		cmpi.b	#$80,d0
000183C0 6700 0000                  		beq.w	loc_14F7C
000183C4 0201 0038                  		andi.b	#$38,d1
000183C8 6600                       		bne.s	loc_14D3C
000183CA 5042                       		addq.w	#8,d2
000183CC                            
000183CC                            loc_14D3C:
000183CC 0C00 0040                  		cmpi.b	#$40,d0
000183D0 6700 0000                  		beq.w	loc_1504A
000183D4 6000 0000                  		bra.w	loc_14EBC
000183D8                            
000183D8                            ; End of function Sonic_WalkSpeed
000183D8                            
000183D8                            
000183D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000183D8                            
000183D8                            
000183D8                            sub_14D48:				; XREF: Sonic_Jump
000183D8 11C0 F768                  		move.b	d0,($FFFFF768).w
000183DC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000183E0 0600 0020                  		addi.b	#$20,d0
000183E4 0200 00C0                  		andi.b	#$C0,d0
000183E8 0C00 0040                  		cmpi.b	#$40,d0
000183EC 6700 0000                  		beq.w	loc_14FD6
000183F0 0C00 0080                  		cmpi.b	#$80,d0
000183F4 6700 0000                  		beq.w	Sonic_DontRunOnWalls
000183F8 0C00 00C0                  		cmpi.b	#$C0,d0
000183FC 6700 0000                  		beq.w	sub_14E50
00018400                            
00018400                            ; End of function sub_14D48
00018400                            
00018400                            ; ---------------------------------------------------------------------------
00018400                            ; Subroutine to	make Sonic land	on the floor after jumping
00018400                            ; ---------------------------------------------------------------------------
00018400                            
00018400                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018400                            
00018400                            
00018400                            Sonic_HitFloor:				; XREF: Sonic_Floor
00018400 3428 000C                  		move.w	$C(a0),d2	; load Sonic's Y-position
00018404 3628 0008                  		move.w	8(a0),d3	; load Sonic's X-postion
00018408 7000                       		moveq	#0,d0
0001840A 1028 0016                  		move.b	$16(a0),d0	; load Sonic's height
0001840E 4880                       		ext.w	d0
00018410 D440                       		add.w	d0,d2		; add height to Y-position
00018412 1028 0017                  		move.b	$17(a0),d0	; load Sonic's width
00018416 4880                       		ext.w	d0
00018418 D640                       		add.w	d0,d3		; add width to X-postion
0001841A 49F8 F768                  		lea	($FFFFF768).w,a4
0001841E 367C 0010                  		movea.w	#$10,a3
00018422 3C3C 0000                  		move.w	#0,d6
00018426 7A0D                       		moveq	#$D,d5
00018428 6100 FC34                  		bsr.w	FindFloor
0001842C 3F01                       		move.w	d1,-(sp)
0001842E 3428 000C                  		move.w	$C(a0),d2
00018432 3628 0008                  		move.w	8(a0),d3
00018436 7000                       		moveq	#0,d0
00018438 1028 0016                  		move.b	$16(a0),d0
0001843C 4880                       		ext.w	d0
0001843E D440                       		add.w	d0,d2
00018440 1028 0017                  		move.b	$17(a0),d0
00018444 4880                       		ext.w	d0
00018446 9640                       		sub.w	d0,d3
00018448 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001844C 367C 0010                  		movea.w	#$10,a3
00018450 3C3C 0000                  		move.w	#0,d6
00018454 7A0D                       		moveq	#$D,d5
00018456 6100 FC06                  		bsr.w	FindFloor
0001845A 301F                       		move.w	(sp)+,d0
0001845C 143C 0000                  		move.b	#0,d2
00018460                            
00018460                            loc_14DD0:
00018460 1638 F76A                  		move.b	($FFFFF76A).w,d3
00018464 B240                       		cmp.w	d0,d1
00018466 6F00                       		ble.s	loc_14DDE
00018468 1638 F768                  		move.b	($FFFFF768).w,d3
0001846C C141                       		exg	d0,d1
0001846E                            
0001846E                            loc_14DDE:
0001846E 0803 0000                  		btst	#0,d3
00018472 6700                       		beq.s	locret_14DE6
00018474 1602                       		move.b	d2,d3
00018476                            
00018476                            locret_14DE6:
00018476 4E75                       		rts	
00018478                            
00018478                            ; End of function Sonic_HitFloor
00018478                            
00018478                            ; ===========================================================================
00018478 3428 000C                  		move.w	$C(a0),d2
0001847C 3628 0008                  		move.w	8(a0),d3
00018480                            
00018480                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00018480 0642 000A                  		addi.w	#$A,d2
00018484 49F8 F768                  		lea	($FFFFF768).w,a4
00018488 367C 0010                  		movea.w	#$10,a3
0001848C 3C3C 0000                  		move.w	#0,d6
00018490 7A0E                       		moveq	#$E,d5
00018492 6100 FBCA                  		bsr.w	FindFloor
00018496 143C 0000                  		move.b	#0,d2
0001849A                            
0001849A                            loc_14E0A:				; XREF: sub_14EB4
0001849A 1638 F768                  		move.b	($FFFFF768).w,d3
0001849E 0803 0000                  		btst	#0,d3
000184A2 6700                       		beq.s	locret_14E16
000184A4 1602                       		move.b	d2,d3
000184A6                            
000184A6                            locret_14E16:
000184A6 4E75                       		rts	
000184A8                            
000184A8                            ; ---------------------------------------------------------------------------
000184A8                            ; Subroutine allowing objects to interact with the floor
000184A8                            ; ---------------------------------------------------------------------------
000184A8                            
000184A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000184A8                            
000184A8                            
000184A8                            ObjHitFloor:
000184A8 3628 0008                  		move.w	8(a0),d3
000184AC                            
000184AC                            ObjHitFloor2:
000184AC 3428 000C                  		move.w	$C(a0),d2
000184B0 7000                       		moveq	#0,d0
000184B2 1028 0016                  		move.b	$16(a0),d0
000184B6 4880                       		ext.w	d0
000184B8 D440                       		add.w	d0,d2
000184BA 49F8 F768                  		lea	($FFFFF768).w,a4
000184BE 18BC 0000                  		move.b	#0,(a4)
000184C2 367C 0010                  		movea.w	#$10,a3
000184C6 3C3C 0000                  		move.w	#0,d6
000184CA 7A0D                       		moveq	#$D,d5
000184CC 6100 FB90                  		bsr.w	FindFloor
000184D0 1638 F768                  		move.b	($FFFFF768).w,d3
000184D4 0803 0000                  		btst	#0,d3
000184D8 6700                       		beq.s	locret_14E4E
000184DA 163C 0000                  		move.b	#0,d3
000184DE                            
000184DE                            locret_14E4E:
000184DE 4E75                       		rts	
000184E0                            ; End of function ObjHitFloor2
000184E0                            
000184E0                            
000184E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000184E0                            
000184E0                            
000184E0                            sub_14E50:				; XREF: sub_14D48
000184E0 3428 000C                  		move.w	$C(a0),d2
000184E4 3628 0008                  		move.w	8(a0),d3
000184E8 7000                       		moveq	#0,d0
000184EA 1028 0017                  		move.b	$17(a0),d0
000184EE 4880                       		ext.w	d0
000184F0 9440                       		sub.w	d0,d2
000184F2 1028 0016                  		move.b	$16(a0),d0
000184F6 4880                       		ext.w	d0
000184F8 D640                       		add.w	d0,d3
000184FA 49F8 F768                  		lea	($FFFFF768).w,a4
000184FE 367C 0010                  		movea.w	#$10,a3
00018502 3C3C 0000                  		move.w	#0,d6
00018506 7A0E                       		moveq	#$E,d5
00018508 6100 FC92                  		bsr.w	FindWall
0001850C 3F01                       		move.w	d1,-(sp)
0001850E 3428 000C                  		move.w	$C(a0),d2
00018512 3628 0008                  		move.w	8(a0),d3
00018516 7000                       		moveq	#0,d0
00018518 1028 0017                  		move.b	$17(a0),d0
0001851C 4880                       		ext.w	d0
0001851E D440                       		add.w	d0,d2
00018520 1028 0016                  		move.b	$16(a0),d0
00018524 4880                       		ext.w	d0
00018526 D640                       		add.w	d0,d3
00018528 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001852C 367C 0010                  		movea.w	#$10,a3
00018530 3C3C 0000                  		move.w	#0,d6
00018534 7A0E                       		moveq	#$E,d5
00018536 6100 FC64                  		bsr.w	FindWall
0001853A 301F                       		move.w	(sp)+,d0
0001853C 143C 00C0                  		move.b	#-$40,d2
00018540 6000 FF1E                  		bra.w	loc_14DD0
00018544                            
00018544                            ; End of function sub_14E50
00018544                            
00018544                            
00018544                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018544                            
00018544                            
00018544                            sub_14EB4:				; XREF: Sonic_Floor
00018544 3428 000C                  		move.w	$C(a0),d2
00018548 3628 0008                  		move.w	8(a0),d3
0001854C                            
0001854C                            loc_14EBC:
0001854C 0643 000A                  		addi.w	#$A,d3
00018550 49F8 F768                  		lea	($FFFFF768).w,a4
00018554 367C 0010                  		movea.w	#$10,a3
00018558 3C3C 0000                  		move.w	#0,d6
0001855C 7A0E                       		moveq	#$E,d5
0001855E 6100 FC3C                  		bsr.w	FindWall
00018562 143C 00C0                  		move.b	#-$40,d2
00018566 6000 FF32                  		bra.w	loc_14E0A
0001856A                            
0001856A                            ; End of function sub_14EB4
0001856A                            
0001856A                            ; ---------------------------------------------------------------------------
0001856A                            ; Subroutine to	detect when an object hits a wall to its right
0001856A                            ; ---------------------------------------------------------------------------
0001856A                            
0001856A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001856A                            
0001856A                            
0001856A                            ObjHitWallRight:
0001856A D668 0008                  		add.w	8(a0),d3
0001856E 3428 000C                  		move.w	$C(a0),d2
00018572 49F8 F768                  		lea	($FFFFF768).w,a4
00018576 18BC 0000                  		move.b	#0,(a4)
0001857A 367C 0010                  		movea.w	#$10,a3
0001857E 3C3C 0000                  		move.w	#0,d6
00018582 7A0E                       		moveq	#$E,d5
00018584 6100 FC16                  		bsr.w	FindWall
00018588 1638 F768                  		move.b	($FFFFF768).w,d3
0001858C 0803 0000                  		btst	#0,d3
00018590 6700                       		beq.s	locret_14F06
00018592 163C 00C0                  		move.b	#-$40,d3
00018596                            
00018596                            locret_14F06:
00018596 4E75                       		rts	
00018598                            
00018598                            ; End of function ObjHitWallRight
00018598                            
00018598                            ; ---------------------------------------------------------------------------
00018598                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00018598                            ; touches them
00018598                            ; ---------------------------------------------------------------------------
00018598                            
00018598                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018598                            
00018598                            
00018598                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00018598 3428 000C                  		move.w	$C(a0),d2
0001859C 3628 0008                  		move.w	8(a0),d3
000185A0 7000                       		moveq	#0,d0
000185A2 1028 0016                  		move.b	$16(a0),d0
000185A6 4880                       		ext.w	d0
000185A8 9440                       		sub.w	d0,d2
000185AA 0A42 000F                  		eori.w	#$F,d2
000185AE 1028 0017                  		move.b	$17(a0),d0
000185B2 4880                       		ext.w	d0
000185B4 D640                       		add.w	d0,d3
000185B6 49F8 F768                  		lea	($FFFFF768).w,a4
000185BA 367C FFF0                  		movea.w	#-$10,a3
000185BE 3C3C 1000                  		move.w	#$1000,d6
000185C2 7A0E                       		moveq	#$E,d5
000185C4 6100 FA98                  		bsr.w	FindFloor
000185C8 3F01                       		move.w	d1,-(sp)
000185CA 3428 000C                  		move.w	$C(a0),d2
000185CE 3628 0008                  		move.w	8(a0),d3
000185D2 7000                       		moveq	#0,d0
000185D4 1028 0016                  		move.b	$16(a0),d0
000185D8 4880                       		ext.w	d0
000185DA 9440                       		sub.w	d0,d2
000185DC 0A42 000F                  		eori.w	#$F,d2
000185E0 1028 0017                  		move.b	$17(a0),d0
000185E4 4880                       		ext.w	d0
000185E6 9640                       		sub.w	d0,d3
000185E8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000185EC 367C FFF0                  		movea.w	#-$10,a3
000185F0 3C3C 1000                  		move.w	#$1000,d6
000185F4 7A0E                       		moveq	#$E,d5
000185F6 6100 FA66                  		bsr.w	FindFloor
000185FA 301F                       		move.w	(sp)+,d0
000185FC 143C 0080                  		move.b	#-$80,d2
00018600 6000 FE5E                  		bra.w	loc_14DD0
00018604                            ; End of function Sonic_DontRunOnWalls
00018604                            
00018604                            ; ===========================================================================
00018604 3428 000C                  		move.w	$C(a0),d2
00018608 3628 0008                  		move.w	8(a0),d3
0001860C                            
0001860C                            loc_14F7C:
0001860C 0442 000A                  		subi.w	#$A,d2
00018610 0A42 000F                  		eori.w	#$F,d2
00018614 49F8 F768                  		lea	($FFFFF768).w,a4
00018618 367C FFF0                  		movea.w	#-$10,a3
0001861C 3C3C 1000                  		move.w	#$1000,d6
00018620 7A0E                       		moveq	#$E,d5
00018622 6100 FA3A                  		bsr.w	FindFloor
00018626 143C 0080                  		move.b	#-$80,d2
0001862A 6000 FE6E                  		bra.w	loc_14E0A
0001862E                            
0001862E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001862E                            
0001862E                            
0001862E                            ObjHitCeiling:
0001862E 3428 000C                  		move.w	$C(a0),d2
00018632 3628 0008                  		move.w	8(a0),d3
00018636 7000                       		moveq	#0,d0
00018638 1028 0016                  		move.b	$16(a0),d0
0001863C 4880                       		ext.w	d0
0001863E 9440                       		sub.w	d0,d2
00018640 0A42 000F                  		eori.w	#$F,d2
00018644 49F8 F768                  		lea	($FFFFF768).w,a4
00018648 367C FFF0                  		movea.w	#-$10,a3
0001864C 3C3C 1000                  		move.w	#$1000,d6
00018650 7A0E                       		moveq	#$E,d5
00018652 6100 FA0A                  		bsr.w	FindFloor
00018656 1638 F768                  		move.b	($FFFFF768).w,d3
0001865A 0803 0000                  		btst	#0,d3
0001865E 6700                       		beq.s	locret_14FD4
00018660 163C 0080                  		move.b	#-$80,d3
00018664                            
00018664                            locret_14FD4:
00018664 4E75                       		rts	
00018666                            ; End of function ObjHitCeiling
00018666                            
00018666                            ; ===========================================================================
00018666                            
00018666                            loc_14FD6:				; XREF: sub_14D48
00018666 3428 000C                  		move.w	$C(a0),d2
0001866A 3628 0008                  		move.w	8(a0),d3
0001866E 7000                       		moveq	#0,d0
00018670 1028 0017                  		move.b	$17(a0),d0
00018674 4880                       		ext.w	d0
00018676 9440                       		sub.w	d0,d2
00018678 1028 0016                  		move.b	$16(a0),d0
0001867C 4880                       		ext.w	d0
0001867E 9640                       		sub.w	d0,d3
00018680 0A43 000F                  		eori.w	#$F,d3
00018684 49F8 F768                  		lea	($FFFFF768).w,a4
00018688 367C FFF0                  		movea.w	#-$10,a3
0001868C 3C3C 0800                  		move.w	#$800,d6
00018690 7A0E                       		moveq	#$E,d5
00018692 6100 FB08                  		bsr.w	FindWall
00018696 3F01                       		move.w	d1,-(sp)
00018698 3428 000C                  		move.w	$C(a0),d2
0001869C 3628 0008                  		move.w	8(a0),d3
000186A0 7000                       		moveq	#0,d0
000186A2 1028 0017                  		move.b	$17(a0),d0
000186A6 4880                       		ext.w	d0
000186A8 D440                       		add.w	d0,d2
000186AA 1028 0016                  		move.b	$16(a0),d0
000186AE 4880                       		ext.w	d0
000186B0 9640                       		sub.w	d0,d3
000186B2 0A43 000F                  		eori.w	#$F,d3
000186B6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000186BA 367C FFF0                  		movea.w	#-$10,a3
000186BE 3C3C 0800                  		move.w	#$800,d6
000186C2 7A0E                       		moveq	#$E,d5
000186C4 6100 FAD6                  		bsr.w	FindWall
000186C8 301F                       		move.w	(sp)+,d0
000186CA 143C 0040                  		move.b	#$40,d2
000186CE 6000 FD90                  		bra.w	loc_14DD0
000186D2                            
000186D2                            ; ---------------------------------------------------------------------------
000186D2                            ; Subroutine to	stop Sonic when	he jumps at a wall
000186D2                            ; ---------------------------------------------------------------------------
000186D2                            
000186D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000186D2                            
000186D2                            
000186D2                            Sonic_HitWall:				; XREF: Sonic_Floor
000186D2 3428 000C                  		move.w	$C(a0),d2
000186D6 3628 0008                  		move.w	8(a0),d3
000186DA                            
000186DA                            loc_1504A:
000186DA 0443 000A                  		subi.w	#$A,d3
000186DE 0A43 000F                  		eori.w	#$F,d3
000186E2 49F8 F768                  		lea	($FFFFF768).w,a4
000186E6 367C FFF0                  		movea.w	#-$10,a3
000186EA 3C3C 0800                  		move.w	#$800,d6
000186EE 7A0E                       		moveq	#$E,d5
000186F0 6100 FAAA                  		bsr.w	FindWall
000186F4 143C 0040                  		move.b	#$40,d2
000186F8 6000 FDA0                  		bra.w	loc_14E0A
000186FC                            ; End of function Sonic_HitWall
000186FC                            
000186FC                            ; ---------------------------------------------------------------------------
000186FC                            ; Subroutine to	detect when an object hits a wall to its left
000186FC                            ; ---------------------------------------------------------------------------
000186FC                            
000186FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000186FC                            
000186FC                            
000186FC                            ObjHitWallLeft:
000186FC D668 0008                  		add.w	8(a0),d3
00018700 3428 000C                  		move.w	$C(a0),d2
00018704 49F8 F768                  		lea	($FFFFF768).w,a4
00018708 18BC 0000                  		move.b	#0,(a4)
0001870C 367C FFF0                  		movea.w	#-$10,a3
00018710 3C3C 0800                  		move.w	#$800,d6
00018714 7A0E                       		moveq	#$E,d5
00018716 6100 FA84                  		bsr.w	FindWall
0001871A 1638 F768                  		move.b	($FFFFF768).w,d3
0001871E 0803 0000                  		btst	#0,d3
00018722 6700                       		beq.s	locret_15098
00018724 163C 0040                  		move.b	#$40,d3
00018728                            
00018728                            locret_15098:
00018728 4E75                       		rts	
0001872A                            ; End of function ObjHitWallLeft
0001872A                            
0001872A                            ; ===========================================================================
0001872A                            ; ---------------------------------------------------------------------------
0001872A                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
0001872A                            ; ---------------------------------------------------------------------------
0001872A                            
0001872A                            Obj66:					; XREF: Obj_Index
0001872A 7000                       		moveq	#0,d0
0001872C 1028 0024                  		move.b	$24(a0),d0
00018730 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00018734 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00018738                            ; ===========================================================================
00018738 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
0001873A 0000                       		dc.w Obj66_Action-Obj66_Index
0001873C 0000                       		dc.w Obj66_Display-Obj66_Index
0001873E 0000                       		dc.w Obj66_Release-Obj66_Index
00018740                            ; ===========================================================================
00018740                            
00018740                            Obj66_Main:				; XREF: Obj66_Index
00018740 5428 0024                  		addq.b	#2,$24(a0)
00018744 323C 0001                  		move.w	#1,d1
00018748 2248                       		movea.l	a0,a1
0001874A 6000                       		bra.s	Obj66_MakeItem
0001874C                            ; ===========================================================================
0001874C                            
0001874C                            Obj66_Loop:
0001874C 6100 8192                  		bsr.w	SingleObjLoad
00018750 6600                       		bne.s	loc_150FE
00018752 12BC 0066                  		move.b	#$66,0(a1)
00018756 5829 0024                  		addq.b	#4,$24(a1)
0001875A 3368 0008 0008             		move.w	8(a0),8(a1)
00018760 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018766 137C 0003 0018             		move.b	#3,$18(a1)
0001876C 137C 0010 001A             		move.b	#$10,$1A(a1)
00018772                            
00018772                            Obj66_MakeItem:				; XREF: Obj66_Main
00018772 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
0001877A                            		;move.w	#$4348,2(a1)
0001877A 0029 0004 0001             		ori.b	#4,1(a1)
00018780 137C 0038 0019             		move.b	#$38,$19(a1)
00018786                            
00018786                            loc_150FE:
00018786 51C9 FFC4                  		dbf	d1,Obj66_Loop
0001878A                            
0001878A 117C 0030 0019             		move.b	#$30,$19(a0)
00018790 117C 0004 0018             		move.b	#4,$18(a0)
00018796 317C 003C 0030             		move.w	#$3C,$30(a0)
0001879C 117C 0001 0034             		move.b	#1,$34(a0)
000187A2 1168 0028 0038             		move.b	$28(a0),$38(a0)
000187A8                            
000187A8                            Obj66_Action:				; XREF: Obj66_Index
000187A8 6100 0000                  		bsr.w	Obj66_ChkSwitch
000187AC 4A28 0001                  		tst.b	1(a0)
000187B0 6A00 0000                  		bpl.w	Obj66_Display
000187B4 323C 0030                  		move.w	#$30,d1
000187B8 3401                       		move.w	d1,d2
000187BA 3602                       		move.w	d2,d3
000187BC 5243                       		addq.w	#1,d3
000187BE 3828 0008                  		move.w	8(a0),d4
000187C2 6100 A28C                  		bsr.w	SolidObject
000187C6 0828 0005 0022             		btst	#5,$22(a0)
000187CC 6700 0000                  		beq.w	Obj66_Display
000187D0 43F8 D000                  		lea	($FFFFD000).w,a1
000187D4 720E                       		moveq	#$E,d1
000187D6 3029 0008                  		move.w	8(a1),d0
000187DA B068 0008                  		cmp.w	8(a0),d0
000187DE 6500                       		bcs.s	Obj66_GrabSonic
000187E0 7207                       		moveq	#7,d1
000187E2                            
000187E2                            Obj66_GrabSonic:
000187E2 B228 001A                  		cmp.b	$1A(a0),d1
000187E6 6600                       		bne.s	Obj66_Display
000187E8 1141 0032                  		move.b	d1,$32(a0)
000187EC 5828 0024                  		addq.b	#4,$24(a0)
000187F0 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000187F6 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
000187FC 337C 0800 0014             		move.w	#$800,$14(a1)
00018802 337C 0000 0010             		move.w	#0,$10(a1)
00018808 337C 0000 0012             		move.w	#0,$12(a1)
0001880E 08A8 0005 0022             		bclr	#5,$22(a0)
00018814 08A9 0005 0022             		bclr	#5,$22(a1)
0001881A 08E9 0001 0022             		bset	#1,$22(a1)
00018820 3429 0008                  		move.w	8(a1),d2
00018824 3629 000C                  		move.w	$C(a1),d3
00018828 6100 0000                  		bsr.w	Obj66_ChgPos
0001882C D569 0008                  		add.w	d2,8(a1)
00018830 D769 000C                  		add.w	d3,$C(a1)
00018834 E0E9 0008                  		asr	8(a1)
00018838 E0E9 000C                  		asr	$C(a1)
0001883C                            
0001883C                            Obj66_Display:				; XREF: Obj66_Index
0001883C 6000 9F32                  		bra.w	MarkObjGone
00018840                            ; ===========================================================================
00018840                            
00018840                            Obj66_Release:				; XREF: Obj66_Index
00018840 1028 001A                  		move.b	$1A(a0),d0
00018844 0C00 0004                  		cmpi.b	#4,d0
00018848 6700                       		beq.s	loc_151C8
0001884A 0C00 0007                  		cmpi.b	#7,d0
0001884E 6600                       		bne.s	loc_151F8
00018850                            
00018850                            loc_151C8:
00018850 B028 0032                  		cmp.b	$32(a0),d0
00018854 6700                       		beq.s	loc_151F8
00018856 43F8 D000                  		lea	($FFFFD000).w,a1
0001885A 337C 0000 0010             		move.w	#0,$10(a1)
00018860 337C 0800 0012             		move.w	#$800,$12(a1)
00018866 0C00 0004                  		cmpi.b	#4,d0
0001886A 6700                       		beq.s	loc_151F0
0001886C 337C 0800 0010             		move.w	#$800,$10(a1)
00018872 337C 0800 0012             		move.w	#$800,$12(a1)
00018878                            
00018878                            loc_151F0:
00018878 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
0001887C 5928 0024                  		subq.b	#4,$24(a0)
00018880                            
00018880                            loc_151F8:
00018880 6100                       		bsr.s	Obj66_ChkSwitch
00018882 6100                       		bsr.s	Obj66_ChgPos
00018884 6000 9EEA                  		bra.w	MarkObjGone
00018888                            
00018888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018888                            
00018888                            
00018888                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00018888 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001888C 7000                       		moveq	#0,d0
0001888E 1028 0038                  		move.b	$38(a0),d0
00018892 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00018898 6700                       		beq.s	loc_15224	; if not, branch
0001889A 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
0001889E 6600                       		bne.s	Obj66_Animate	; if yes, branch
000188A0 4428 0034                  		neg.b	$34(a0)
000188A4 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
000188AA 6000                       		bra.s	Obj66_Animate
000188AC                            ; ===========================================================================
000188AC                            
000188AC                            loc_15224:
000188AC 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
000188B0                            
000188B0                            Obj66_Animate:
000188B0 5328 001E                  		subq.b	#1,$1E(a0)
000188B4 6A00                       		bpl.s	locret_15246
000188B6 117C 0007 001E             		move.b	#7,$1E(a0)
000188BC 1228 0034                  		move.b	$34(a0),d1
000188C0 1028 001A                  		move.b	$1A(a0),d0
000188C4 D001                       		add.b	d1,d0
000188C6 0200 000F                  		andi.b	#$F,d0
000188CA 1140 001A                  		move.b	d0,$1A(a0)
000188CE                            
000188CE                            locret_15246:
000188CE 4E75                       		rts	
000188D0                            ; End of function Obj66_ChkSwitch
000188D0                            
000188D0                            
000188D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000188D0                            
000188D0                            
000188D0                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
000188D0 43F8 D000                  		lea	($FFFFD000).w,a1
000188D4 7000                       		moveq	#0,d0
000188D6 1028 001A                  		move.b	$1A(a0),d0
000188DA D040                       		add.w	d0,d0
000188DC 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
000188E0 101A                       		move.b	(a2)+,d0
000188E2 4880                       		ext.w	d0
000188E4 D068 0008                  		add.w	8(a0),d0
000188E8 3340 0008                  		move.w	d0,8(a1)
000188EC 101A                       		move.b	(a2)+,d0
000188EE 4880                       		ext.w	d0
000188F0 D068 000C                  		add.w	$C(a0),d0
000188F4 3340 000C                  		move.w	d0,$C(a1)
000188F8 4E75                       		rts	
000188FA                            ; End of function Obj66_ChgPos
000188FA                            
000188FA                            ; ===========================================================================
000188FA E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
000188FE E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00018902 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00018906 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
0001890A 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
0001890E 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00018912 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00018916 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
0001891A                            ; ---------------------------------------------------------------------------
0001891A                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001891A                            ; ---------------------------------------------------------------------------
0001891A                            Map_obj66:
0001891A                            	include "_maps\obj66.asm"
0001891A                            ; ---------------------------------------------------------------------------
0001891A                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001891A                            ; ---------------------------------------------------------------------------
0001891A 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
0001891E 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00018922 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00018926 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
0001892A 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
0001892E 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00018932 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00018936 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
0001893A 0000                       		dc.w byte_154A4-Map_obj66
0001893C 06                         byte_152B4:	dc.b 6
0001893D E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00018942 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00018947 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
0001894C E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00018951 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00018956 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
0001895B 06                         byte_152D3:	dc.b 6
0001895C F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00018961 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00018966 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
0001896B F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00018970 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00018975 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
0001897A 06                         byte_152F2:	dc.b 6
0001897B 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00018980 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00018985 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
0001898A 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
0001898F 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00018994 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00018999 06                         byte_15311:	dc.b 6
0001899A 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
0001899F 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
000189A4 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
000189A9 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
000189AE 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
000189B3 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
000189B8 06                         byte_15330:	dc.b 6
000189B9 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
000189BE 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
000189C3 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
000189C8 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
000189CD 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
000189D2 200A 1800 00               		dc.b $20, $A, $18, 0, 0
000189D7 06                         byte_1534F:	dc.b 6
000189D8 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
000189DD 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
000189E2 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
000189E7 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
000189EC 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
000189F1 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
000189F6 06                         byte_1536E:	dc.b 6
000189F7 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
000189FC 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00018A01 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00018A06 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00018A0B 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00018A10 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00018A15 06                         byte_1538D:	dc.b 6
00018A16 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00018A1B F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00018A20 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00018A25 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00018A2A 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00018A2F 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00018A34 06                         byte_153AC:	dc.b 6
00018A35 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00018A3A 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00018A3F E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00018A44 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00018A49 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00018A4E 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00018A53 06                         byte_153CB:	dc.b 6
00018A54 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00018A59 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00018A5E DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00018A63 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00018A68 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00018A6D F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00018A72 06                         byte_153EA:	dc.b 6
00018A73 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00018A78 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00018A7D D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00018A82 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00018A87 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00018A8C E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00018A91 06                         byte_15409:	dc.b 6
00018A92 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00018A97 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00018A9C CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00018AA1 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00018AA6 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00018AAB E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00018AB0 06                         byte_15428:	dc.b 6
00018AB1 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00018AB6 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00018ABB C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00018AC0 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00018AC5 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00018ACA E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00018ACF 06                         byte_15447:	dc.b 6
00018AD0 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00018AD5 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00018ADA CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00018ADF CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00018AE4 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00018AE9 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00018AEE 06                         byte_15466:	dc.b 6
00018AEF E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00018AF4 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00018AF9 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00018AFE D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00018B03 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00018B08 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00018B0D 06                         byte_15485:	dc.b 6
00018B0E E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00018B13 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00018B18 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00018B1D DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00018B22 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00018B27 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00018B2C 0C                         byte_154A4:	dc.b $C
00018B2D C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00018B32 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00018B37 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00018B3C C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00018B41 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00018B46 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00018B4B 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00018B50 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00018B55 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00018B5A 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00018B5F 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00018B64 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00018B6A 00                         		even
00018B6A 00                         		even
00018B6A                            
00018B6A                            ; ===========================================================================
00018B6A                            ; ---------------------------------------------------------------------------
00018B6A                            ; Object 67 - disc that	you run	around (SBZ)
00018B6A                            ; ---------------------------------------------------------------------------
00018B6A                            
00018B6A                            Obj67:					; XREF: Obj_Index
00018B6A 7000                       		moveq	#0,d0
00018B6C 1028 0024                  		move.b	$24(a0),d0
00018B70 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00018B74 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00018B78                            ; ===========================================================================
00018B78 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00018B7A 0000                       		dc.w Obj67_Action-Obj67_Index
00018B7C                            ; ===========================================================================
00018B7C                            
00018B7C                            Obj67_Main:				; XREF: Obj67_Index
00018B7C 5428 0024                  		addq.b	#2,$24(a0)
00018B80 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00018B88 317C C344 0002             		move.w	#$C344,2(a0)
00018B8E 117C 0004 0001             		move.b	#4,1(a0)
00018B94 117C 0004 0018             		move.b	#4,$18(a0)
00018B9A 117C 0008 0019             		move.b	#8,$19(a0)
00018BA0 3168 0008 0032             		move.w	8(a0),$32(a0)
00018BA6 3168 000C 0030             		move.w	$C(a0),$30(a0)
00018BAC 117C 0018 0034             		move.b	#$18,$34(a0)
00018BB2 117C 0048 0038             		move.b	#$48,$38(a0)
00018BB8 1228 0028                  		move.b	$28(a0),d1	; get object type
00018BBC 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00018BC0 6700                       		beq.s	loc_15546
00018BC2 117C 0010 0034             		move.b	#$10,$34(a0)
00018BC8 117C 0038 0038             		move.b	#$38,$38(a0)
00018BCE                            
00018BCE                            loc_15546:
00018BCE 1228 0028                  		move.b	$28(a0),d1	; get object type
00018BD2 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00018BD6 4881                       		ext.w	d1
00018BD8 E741                       		asl.w	#3,d1
00018BDA 3141 0036                  		move.w	d1,$36(a0)
00018BDE 1028 0022                  		move.b	$22(a0),d0
00018BE2 E418                       		ror.b	#2,d0
00018BE4 0200 00C0                  		andi.b	#-$40,d0
00018BE8 1140 0026                  		move.b	d0,$26(a0)
00018BEC                            
00018BEC                            Obj67_Action:				; XREF: Obj67_Index
00018BEC 6100 0000                  		bsr.w	Obj67_MoveSonic
00018BF0 6100 0000                  		bsr.w	Obj67_MoveSpot
00018BF4 6000 0000                  		bra.w	Obj67_ChkDel
00018BF8                            ; ===========================================================================
00018BF8                            
00018BF8                            Obj67_MoveSonic:			; XREF: Obj67_Action
00018BF8 7400                       		moveq	#0,d2
00018BFA 1428 0038                  		move.b	$38(a0),d2
00018BFE 3602                       		move.w	d2,d3
00018C00 D643                       		add.w	d3,d3
00018C02 43F8 D000                  		lea	($FFFFD000).w,a1
00018C06 3029 0008                  		move.w	8(a1),d0
00018C0A 9068 0032                  		sub.w	$32(a0),d0
00018C0E D042                       		add.w	d2,d0
00018C10 B043                       		cmp.w	d3,d0
00018C12 6400                       		bcc.s	loc_155A8
00018C14 3229 000C                  		move.w	$C(a1),d1
00018C18 9268 0030                  		sub.w	$30(a0),d1
00018C1C D242                       		add.w	d2,d1
00018C1E B243                       		cmp.w	d3,d1
00018C20 6400                       		bcc.s	loc_155A8
00018C22 0829 0001 0022             		btst	#1,$22(a1)
00018C28 6700                       		beq.s	loc_155B8
00018C2A 4228 003A                  		clr.b	$3A(a0)
00018C2E 4E75                       		rts	
00018C30                            ; ===========================================================================
00018C30                            
00018C30                            loc_155A8:
00018C30 4A28 003A                  		tst.b	$3A(a0)
00018C34 6700                       		beq.s	locret_155B6
00018C36 4229 0038                  		clr.b	$38(a1)
00018C3A 4228 003A                  		clr.b	$3A(a0)
00018C3E                            
00018C3E                            locret_155B6:
00018C3E 4E75                       		rts	
00018C40                            ; ===========================================================================
00018C40                            
00018C40                            loc_155B8:
00018C40 4A28 003A                  		tst.b	$3A(a0)
00018C44 6600                       		bne.s	loc_155E2
00018C46 117C 0001 003A             		move.b	#1,$3A(a0)
00018C4C 0829 0002 0022             		btst	#2,$22(a1)
00018C52 6600                       		bne.s	loc_155D0
00018C54 4229 001C                  		clr.b	$1C(a1)
00018C58                            
00018C58                            loc_155D0:
00018C58 08A9 0005 0022             		bclr	#5,$22(a1)
00018C5E 137C 0001 001D             		move.b	#1,$1D(a1)
00018C64 137C 0001 0038             		move.b	#1,$38(a1)
00018C6A                            
00018C6A                            loc_155E2:
00018C6A 3029 0014                  		move.w	$14(a1),d0
00018C6E 4A68 0036                  		tst.w	$36(a0)
00018C72 6A00                       		bpl.s	loc_15608
00018C74 0C40 FC00                  		cmpi.w	#-$400,d0
00018C78 6F00                       		ble.s	loc_155FA
00018C7A 337C FC00 0014             		move.w	#-$400,$14(a1)
00018C80 4E75                       		rts	
00018C82                            ; ===========================================================================
00018C82                            
00018C82                            loc_155FA:
00018C82 0C40 F100                  		cmpi.w	#-$F00,d0
00018C86 6C00                       		bge.s	locret_15606
00018C88 337C F100 0014             		move.w	#-$F00,$14(a1)
00018C8E                            
00018C8E                            locret_15606:
00018C8E 4E75                       		rts	
00018C90                            ; ===========================================================================
00018C90                            
00018C90                            loc_15608:
00018C90 0C40 0400                  		cmpi.w	#$400,d0
00018C94 6C00                       		bge.s	loc_15616
00018C96 337C 0400 0014             		move.w	#$400,$14(a1)
00018C9C 4E75                       		rts	
00018C9E                            ; ===========================================================================
00018C9E                            
00018C9E                            loc_15616:
00018C9E 0C40 0F00                  		cmpi.w	#$F00,d0
00018CA2 6F00                       		ble.s	locret_15622
00018CA4 337C 0F00 0014             		move.w	#$F00,$14(a1)
00018CAA                            
00018CAA                            locret_15622:
00018CAA 4E75                       		rts	
00018CAC                            ; ===========================================================================
00018CAC                            
00018CAC                            Obj67_MoveSpot:				; XREF: Obj67_Action
00018CAC 3028 0036                  		move.w	$36(a0),d0
00018CB0 D168 0026                  		add.w	d0,$26(a0)
00018CB4 1028 0026                  		move.b	$26(a0),d0
00018CB8 4EB9 0000 2CC8             		jsr	(CalcSine).l
00018CBE 3428 0030                  		move.w	$30(a0),d2
00018CC2 3628 0032                  		move.w	$32(a0),d3
00018CC6 7800                       		moveq	#0,d4
00018CC8 1828 0034                  		move.b	$34(a0),d4
00018CCC E14C                       		lsl.w	#8,d4
00018CCE 2A04                       		move.l	d4,d5
00018CD0 C9C0                       		muls.w	d0,d4
00018CD2 4844                       		swap	d4
00018CD4 CBC1                       		muls.w	d1,d5
00018CD6 4845                       		swap	d5
00018CD8 D842                       		add.w	d2,d4
00018CDA DA43                       		add.w	d3,d5
00018CDC 3144 000C                  		move.w	d4,$C(a0)
00018CE0 3145 0008                  		move.w	d5,8(a0)
00018CE4 4E75                       		rts	
00018CE6                            ; ===========================================================================
00018CE6                            
00018CE6                            Obj67_ChkDel:				; XREF: Obj67_Action
00018CE6 3028 0032                  		move.w	$32(a0),d0
00018CEA 0240 FF80                  		andi.w	#-$80,d0
00018CEE 3238 F700                  		move.w	($FFFFF700).w,d1
00018CF2 0441 0080                  		subi.w	#$80,d1
00018CF6 0241 FF80                  		andi.w	#-$80,d1
00018CFA 9041                       		sub.w	d1,d0
00018CFC 0C40 0280                  		cmpi.w	#$280,d0
00018D00 6200                       		bhi.s	Obj67_Delete
00018D02 4EF9 0001 045A             		jmp	DisplaySprite
00018D08                            ; ===========================================================================
00018D08                            
00018D08                            Obj67_Delete:
00018D08 4EF9 0001 0496             		jmp	DeleteObject
00018D0E                            ; ===========================================================================
00018D0E                            ; ---------------------------------------------------------------------------
00018D0E                            ; Sprite mappings - disc that you run around (SBZ)
00018D0E                            ; (It's just a small blob that moves around in a circle. The disc itself is
00018D0E                            ; part of the level tiles.)
00018D0E                            ; ---------------------------------------------------------------------------
00018D0E                            Map_obj67:
00018D0E                            	include "_maps\obj67.asm"
00018D0E                            ; ---------------------------------------------------------------------------
00018D0E                            ; Sprite mappings - disc that you run around (SBZ)
00018D0E                            ; (It's just a small blob that moves around in a circle. The disc itself is
00018D0E                            ; part of the level tiles.)
00018D0E                            ; ---------------------------------------------------------------------------
00018D0E 0000                       		dc.w byte_15688-Map_obj67
00018D10 01                         byte_15688:	dc.b 1
00018D11 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018D16                            		even
00018D16                            		even
00018D16                            
00018D16                            ; ===========================================================================
00018D16                            ; ---------------------------------------------------------------------------
00018D16                            ; Object 68 - conveyor belts (SBZ)
00018D16                            ; ---------------------------------------------------------------------------
00018D16                            
00018D16                            Obj68:					; XREF: Obj_Index
00018D16 7000                       		moveq	#0,d0
00018D18 1028 0024                  		move.b	$24(a0),d0
00018D1C 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00018D20 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00018D24                            ; ===========================================================================
00018D24 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00018D26 0000                       		dc.w Obj68_Action-Obj68_Index
00018D28                            ; ===========================================================================
00018D28                            
00018D28                            Obj68_Main:				; XREF: Obj68_Index
00018D28 5428 0024                  		addq.b	#2,$24(a0)
00018D2C 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00018D32 1228 0028                  		move.b	$28(a0),d1	; get object type
00018D36 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00018D3A 6700                       		beq.s	loc_156BA	; if zero, branch
00018D3C 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00018D42                            
00018D42                            loc_156BA:
00018D42 1228 0028                  		move.b	$28(a0),d1	; get object type
00018D46 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00018D4A 4881                       		ext.w	d1
00018D4C E841                       		asr.w	#4,d1
00018D4E 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00018D52                            
00018D52                            Obj68_Action:				; XREF: Obj68_Index
00018D52 6100                       		bsr.s	Obj68_MoveSonic
00018D54 3028 0008                  		move.w	8(a0),d0
00018D58 0240 FF80                  		andi.w	#$FF80,d0
00018D5C 3238 F700                  		move.w	($FFFFF700).w,d1
00018D60 0441 0080                  		subi.w	#$80,d1
00018D64 0241 FF80                  		andi.w	#$FF80,d1
00018D68 9041                       		sub.w	d1,d0
00018D6A 0C40 0280                  		cmpi.w	#$280,d0
00018D6E 6200                       		bhi.s	Obj68_Delete
00018D70 4E75                       		rts	
00018D72                            ; ===========================================================================
00018D72                            
00018D72                            Obj68_Delete:
00018D72 4EF9 0001 0496             		jmp	DeleteObject
00018D78                            ; ===========================================================================
00018D78                            
00018D78                            Obj68_MoveSonic:			; XREF: Obj68_Action
00018D78 7400                       		moveq	#0,d2
00018D7A 1428 0038                  		move.b	$38(a0),d2
00018D7E 3602                       		move.w	d2,d3
00018D80 D643                       		add.w	d3,d3
00018D82 43F8 D000                  		lea	($FFFFD000).w,a1
00018D86 3029 0008                  		move.w	8(a1),d0
00018D8A 9068 0008                  		sub.w	8(a0),d0
00018D8E D042                       		add.w	d2,d0
00018D90 B043                       		cmp.w	d3,d0
00018D92 6400                       		bcc.s	locret_1572E
00018D94 3229 000C                  		move.w	$C(a1),d1
00018D98 9268 000C                  		sub.w	$C(a0),d1
00018D9C 0641 0030                  		addi.w	#$30,d1
00018DA0 0C41 0030                  		cmpi.w	#$30,d1
00018DA4 6400                       		bcc.s	locret_1572E
00018DA6 0829 0001 0022             		btst	#1,$22(a1)
00018DAC 6600                       		bne.s	locret_1572E
00018DAE 3028 0036                  		move.w	$36(a0),d0
00018DB2 D169 0008                  		add.w	d0,8(a1)
00018DB6                            
00018DB6                            locret_1572E:
00018DB6 4E75                       		rts	
00018DB8                            
00018DB8                            ; ===========================================================================
00018DB8                            ; ---------------------------------------------------------------------------
00018DB8                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00018DB8                            ; ---------------------------------------------------------------------------
00018DB8                            
00018DB8                            Obj69:					; XREF: Obj_Index
00018DB8 7000                       		moveq	#0,d0
00018DBA 1028 0024                  		move.b	$24(a0),d0
00018DBE 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00018DC2 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00018DC6                            ; ===========================================================================
00018DC6 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00018DC8 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00018DCA 0000                       		dc.w Obj69_Spinner-Obj69_Index
00018DCC                            ; ===========================================================================
00018DCC                            
00018DCC                            Obj69_Main:				; XREF: Obj69_Index
00018DCC 5428 0024                  		addq.b	#2,$24(a0)
00018DD0 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00018DD8 317C 4492 0002             		move.w	#$4492,2(a0)
00018DDE 0028 0004 0001             		ori.b	#4,1(a0)
00018DE4 117C 0080 0019             		move.b	#$80,$19(a0)
00018DEA 7000                       		moveq	#0,d0
00018DEC 1028 0028                  		move.b	$28(a0),d0
00018DF0 0240 000F                  		andi.w	#$F,d0
00018DF4 C0FC 003C                  		mulu.w	#$3C,d0
00018DF8 3140 0032                  		move.w	d0,$32(a0)
00018DFC 4A28 0028                  		tst.b	$28(a0)
00018E00 6A00                       		bpl.s	Obj69_Trapdoor
00018E02 5428 0024                  		addq.b	#2,$24(a0)
00018E06 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00018E0E 317C 04DF 0002             		move.w	#$4DF,2(a0)
00018E14 117C 0010 0019             		move.b	#$10,$19(a0)
00018E1A 117C 0002 001C             		move.b	#2,$1C(a0)
00018E20 7000                       		moveq	#0,d0
00018E22 1028 0028                  		move.b	$28(a0),d0	; get object type
00018E26 3200                       		move.w	d0,d1
00018E28 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00018E2C C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00018E30 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00018E34 3140 0032                  		move.w	d0,$32(a0)
00018E38 0241 0070                  		andi.w	#$70,d1
00018E3C 0641 0010                  		addi.w	#$10,d1
00018E40 E549                       		lsl.w	#2,d1
00018E42 5341                       		subq.w	#1,d1
00018E44 3141 0036                  		move.w	d1,$36(a0)
00018E48 6000                       		bra.s	Obj69_Spinner
00018E4A                            ; ===========================================================================
00018E4A                            
00018E4A                            Obj69_Trapdoor:				; XREF: Obj69_Index
00018E4A 5368 0030                  		subq.w	#1,$30(a0)
00018E4E 6A00                       		bpl.s	Obj69_Animate
00018E50 3168 0032 0030             		move.w	$32(a0),$30(a0)
00018E56 0868 0000 001C             		bchg	#0,$1C(a0)
00018E5C 4A28 0001                  		tst.b	1(a0)
00018E60 6A00                       		bpl.s	Obj69_Animate
00018E62 303C 00BB                  		move.w	#$BB,d0
00018E66 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play door sound
00018E6C                            
00018E6C                            Obj69_Animate:
00018E6C 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00018E72 4EB9 0000 D3EA             		jsr	AnimateSprite
00018E78 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00018E7C 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00018E7E 323C 004B                  		move.w	#$4B,d1
00018E82 343C 000C                  		move.w	#$C,d2
00018E86 3602                       		move.w	d2,d3
00018E88 5243                       		addq.w	#1,d3
00018E8A 3828 0008                  		move.w	8(a0),d4
00018E8E 6100 9BC0                  		bsr.w	SolidObject
00018E92 6000 98DC                  		bra.w	MarkObjGone
00018E96                            ; ===========================================================================
00018E96                            
00018E96                            Obj69_NotSolid:
00018E96 0828 0003 0022             		btst	#3,$22(a0)
00018E9C 6700                       		beq.s	Obj69_Display
00018E9E 43F8 D000                  		lea	($FFFFD000).w,a1
00018EA2 08A9 0003 0022             		bclr	#3,$22(a1)
00018EA8 08A8 0003 0022             		bclr	#3,$22(a0)
00018EAE 4228 0025                  		clr.b	$25(a0)
00018EB2                            
00018EB2                            Obj69_Display:
00018EB2 6000 98BC                  		bra.w	MarkObjGone
00018EB6                            ; ===========================================================================
00018EB6                            
00018EB6                            Obj69_Spinner:				; XREF: Obj69_Index
00018EB6 3038 FE04                  		move.w	($FFFFFE04).w,d0
00018EBA C068 0036                  		and.w	$36(a0),d0
00018EBE 6600                       		bne.s	Obj69_Delay
00018EC0 117C 0001 0034             		move.b	#1,$34(a0)
00018EC6                            
00018EC6                            Obj69_Delay:
00018EC6 4A28 0034                  		tst.b	$34(a0)
00018ECA 6700                       		beq.s	Obj69_Animate2
00018ECC 5368 0030                  		subq.w	#1,$30(a0)
00018ED0 6A00                       		bpl.s	Obj69_Animate2
00018ED2 3168 0032 0030             		move.w	$32(a0),$30(a0)
00018ED8 4228 0034                  		clr.b	$34(a0)
00018EDC 0868 0000 001C             		bchg	#0,$1C(a0)
00018EE2                            
00018EE2                            Obj69_Animate2:
00018EE2 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00018EE8 4EB9 0000 D3EA             		jsr	AnimateSprite
00018EEE 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00018EF2 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00018EF4 323C 001B                  		move.w	#$1B,d1
00018EF8 343C 0007                  		move.w	#7,d2
00018EFC 3602                       		move.w	d2,d3
00018EFE 5243                       		addq.w	#1,d3
00018F00 3828 0008                  		move.w	8(a0),d4
00018F04 6100 9B4A                  		bsr.w	SolidObject
00018F08 6000 9866                  		bra.w	MarkObjGone
00018F0C                            ; ===========================================================================
00018F0C                            
00018F0C                            Obj69_NotSolid2:
00018F0C 0828 0003 0022             		btst	#3,$22(a0)
00018F12 6700                       		beq.s	Obj69_Display2
00018F14 43F8 D000                  		lea	($FFFFD000).w,a1
00018F18 08A9 0003 0022             		bclr	#3,$22(a1)
00018F1E 08A8 0003 0022             		bclr	#3,$22(a0)
00018F24 4228 0025                  		clr.b	$25(a0)
00018F28                            
00018F28                            Obj69_Display2:
00018F28 6000 9846                  		bra.w	MarkObjGone
00018F2C                            ; ===========================================================================
00018F2C                            Ani_obj69:
00018F2C                            	include "_anim\obj69.asm"
00018F2C                            ; ---------------------------------------------------------------------------
00018F2C                            ; Animation script - trapdoor (SBZ)
00018F2C                            ; ---------------------------------------------------------------------------
00018F2C 0000                       		dc.w byte_158AC-Ani_obj69
00018F2E 0000                       		dc.w byte_158B2-Ani_obj69
00018F30 0000                       		dc.w byte_158B8-Ani_obj69
00018F32 0000                       		dc.w byte_158CC-Ani_obj69
00018F34 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00018F3A 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00018F40 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00018F4D 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00018F54 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00018F61 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00018F68                            		even
00018F68                            		even
00018F68                            
00018F68                            ; ---------------------------------------------------------------------------
00018F68                            ; Sprite mappings - trapdoor (SBZ)
00018F68                            ; ---------------------------------------------------------------------------
00018F68                            Map_obj69:
00018F68                            	include "_maps\obj69.asm"
00018F68                            ; ---------------------------------------------------------------------------
00018F68                            ; Sprite mappings - trapdoor (SBZ)
00018F68                            ; ---------------------------------------------------------------------------
00018F68 0000                       		dc.w byte_158E6-Map_obj69
00018F6A 0000                       		dc.w byte_158FB-Map_obj69
00018F6C 0000                       		dc.w byte_15924-Map_obj69
00018F6E 04                         byte_158E6:	dc.b 4
00018F6F F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00018F74 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00018F79 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00018F7E F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00018F83 08                         byte_158FB:	dc.b 8
00018F84 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00018F89 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00018F8E 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00018F93 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00018F98 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00018F9D 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00018FA2 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00018FA7 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00018FAC 04                         byte_15924:	dc.b 4
00018FAD 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00018FB2 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00018FB7 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00018FBC 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00018FC2 00                         		even
00018FC2 00                         		even
00018FC2                            
00018FC2                            ; ---------------------------------------------------------------------------
00018FC2                            ; Sprite mappings - spinning platforms (SBZ)
00018FC2                            ; ---------------------------------------------------------------------------
00018FC2                            Map_obj69a:
00018FC2                            	include "_maps\obj69a.asm"
00018FC2                            ; ---------------------------------------------------------------------------
00018FC2                            ; Sprite mappings - spinning platforms (SBZ)
00018FC2                            ; ---------------------------------------------------------------------------
00018FC2 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00018FC6 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00018FCA 0000                       		dc.w byte_15970-Map_obj69a
00018FCC 02                         byte_15944:	dc.b 2
00018FCD F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00018FD2 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00018FD7 02                         byte_1594F:	dc.b 2
00018FD8 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00018FDD 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00018FE2 02                         byte_1595A:	dc.b 2
00018FE3 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00018FE8 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00018FED 02                         byte_15965:	dc.b 2
00018FEE F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00018FF3 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00018FF8 02                         byte_15970:	dc.b 2
00018FF9 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00018FFE 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00019004 00                         		even
00019004 00                         		even
00019004                            
00019004                            ; ===========================================================================
00019004                            ; ---------------------------------------------------------------------------
00019004                            ; Object 6A - ground saws and pizza cutters (SBZ)
00019004                            ; ---------------------------------------------------------------------------
00019004                            
00019004                            Obj6A:					; XREF: Obj_Index
00019004 7000                       		moveq	#0,d0
00019006 1028 0024                  		move.b	$24(a0),d0
0001900A 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
0001900E 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00019012                            ; ===========================================================================
00019012 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00019014 0000                       		dc.w Obj6A_Action-Obj6A_Index
00019016                            ; ===========================================================================
00019016                            
00019016                            Obj6A_Main:				; XREF: Obj6A_Index
00019016 5428 0024                  		addq.b	#2,$24(a0)
0001901A 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00019022 317C 43B5 0002             		move.w	#$43B5,2(a0)
00019028 117C 0004 0001             		move.b	#4,1(a0)
0001902E 117C 0004 0018             		move.b	#4,$18(a0)
00019034 117C 0020 0019             		move.b	#$20,$19(a0)
0001903A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00019040 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019046 0C28 0003 0028             		cmpi.b	#3,$28(a0)
0001904C 6400                       		bcc.s	Obj6A_Action
0001904E 117C 00A2 0020             		move.b	#$A2,$20(a0)
00019054                            
00019054                            Obj6A_Action:				; XREF: Obj6A_Index
00019054 7000                       		moveq	#0,d0
00019056 1028 0028                  		move.b	$28(a0),d0
0001905A 0240 0007                  		andi.w	#7,d0
0001905E D040                       		add.w	d0,d0
00019060 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00019064 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00019068 3028 003A                  		move.w	$3A(a0),d0
0001906C 0240 FF80                  		andi.w	#$FF80,d0
00019070 3238 F700                  		move.w	($FFFFF700).w,d1
00019074 0441 0080                  		subi.w	#$80,d1
00019078 0241 FF80                  		andi.w	#$FF80,d1
0001907C 9041                       		sub.w	d1,d0
0001907E 0C40 0280                  		cmpi.w	#$280,d0
00019082 6200                       		bhi.s	Obj6A_Delete
00019084 4EF9 0001 045A             		jmp	DisplaySprite
0001908A                            ; ===========================================================================
0001908A                            
0001908A                            Obj6A_Delete:
0001908A 4EF9 0001 0496             		jmp	DeleteObject
00019090                            ; ===========================================================================
00019090 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00019094 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00019098 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
0001909A                            ; ===========================================================================
0001909A                            
0001909A                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
0001909A 4E75                       		rts	
0001909C                            ; ===========================================================================
0001909C                            
0001909C                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
0001909C 323C 0060                  		move.w	#$60,d1
000190A0 7000                       		moveq	#0,d0
000190A2 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000190A6 0828 0000 0022             		btst	#0,$22(a0)
000190AC 6700                       		beq.s	Obj6A_Animate01
000190AE 4440                       		neg.w	d0
000190B0 D041                       		add.w	d1,d0
000190B2                            
000190B2                            Obj6A_Animate01:
000190B2 3228 003A                  		move.w	$3A(a0),d1
000190B6 9240                       		sub.w	d0,d1
000190B8 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
000190BC 5328 001E                  		subq.b	#1,$1E(a0)
000190C0 6A00                       		bpl.s	loc_15A46
000190C2 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
000190C8 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000190CE                            
000190CE                            loc_15A46:
000190CE 4A28 0001                  		tst.b	1(a0)
000190D2 6A00                       		bpl.s	locret_15A60
000190D4 3038 FE04                  		move.w	($FFFFFE04).w,d0
000190D8 0240 000F                  		andi.w	#$F,d0
000190DC 6600                       		bne.s	locret_15A60
000190DE 303C 00B0                  		move.w	#$B0,d0
000190E2 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play saw sound
000190E8                            
000190E8                            locret_15A60:
000190E8 4E75                       		rts	
000190EA                            ; ===========================================================================
000190EA                            
000190EA                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
000190EA 323C 0030                  		move.w	#$30,d1
000190EE 7000                       		moveq	#0,d0
000190F0 1038 FE64                  		move.b	($FFFFFE64).w,d0
000190F4 0828 0000 0022             		btst	#0,$22(a0)
000190FA 6700                       		beq.s	Obj6A_Animate02
000190FC 4440                       		neg.w	d0
000190FE 0640 0080                  		addi.w	#$80,d0
00019102                            
00019102                            Obj6A_Animate02:
00019102 3228 0038                  		move.w	$38(a0),d1
00019106 9240                       		sub.w	d0,d1
00019108 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
0001910C 5328 001E                  		subq.b	#1,$1E(a0)
00019110 6A00                       		bpl.s	loc_15A96
00019112 117C 0002 001E             		move.b	#2,$1E(a0)
00019118 0868 0000 001A             		bchg	#0,$1A(a0)
0001911E                            
0001911E                            loc_15A96:
0001911E 4A28 0001                  		tst.b	1(a0)
00019122 6A00                       		bpl.s	locret_15AB0
00019124 1038 FE64                  		move.b	($FFFFFE64).w,d0
00019128 0C00 0018                  		cmpi.b	#$18,d0
0001912C 6600                       		bne.s	locret_15AB0
0001912E 303C 00B0                  		move.w	#$B0,d0
00019132 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play saw sound
00019138                            
00019138                            locret_15AB0:
00019138 4E75                       		rts	
0001913A                            ; ===========================================================================
0001913A                            
0001913A                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
0001913A 4A28 003D                  		tst.b	$3D(a0)
0001913E 6600                       		bne.s	Obj6A_Animate03
00019140 3038 D008                  		move.w	($FFFFD008).w,d0
00019144 0440 00C0                  		subi.w	#$C0,d0
00019148 6500                       		bcs.s	loc_15B02
0001914A 9068 0008                  		sub.w	8(a0),d0
0001914E 6500                       		bcs.s	loc_15B02
00019150 3038 D00C                  		move.w	($FFFFD00C).w,d0
00019154 0440 0080                  		subi.w	#$80,d0
00019158 B068 000C                  		cmp.w	$C(a0),d0
0001915C 6400                       		bcc.s	locret_15B04
0001915E 0640 0100                  		addi.w	#$100,d0
00019162 B068 000C                  		cmp.w	$C(a0),d0
00019166 6500                       		bcs.s	locret_15B04
00019168 117C 0001 003D             		move.b	#1,$3D(a0)
0001916E 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00019174 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001917A 117C 0002 001A             		move.b	#2,$1A(a0)
00019180 303C 00B0                  		move.w	#$B0,d0
00019184 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play saw sound
0001918A                            
0001918A                            loc_15B02:
0001918A 588F                       		addq.l	#4,sp
0001918C                            
0001918C                            locret_15B04:
0001918C 4E75                       		rts	
0001918E                            ; ===========================================================================
0001918E                            
0001918E                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
0001918E 4EB9 0001 0434             		jsr	SpeedToPos
00019194 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001919A 5328 001E                  		subq.b	#1,$1E(a0)
0001919E 6A00                       		bpl.s	locret_15B24
000191A0 117C 0002 001E             		move.b	#2,$1E(a0)
000191A6 0868 0000 001A             		bchg	#0,$1A(a0)
000191AC                            
000191AC                            locret_15B24:
000191AC 4E75                       		rts	
000191AE                            ; ===========================================================================
000191AE                            
000191AE                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
000191AE 4A28 003D                  		tst.b	$3D(a0)
000191B2 6600                       		bne.s	Obj6A_Animate04
000191B4 3038 D008                  		move.w	($FFFFD008).w,d0
000191B8 0640 00E0                  		addi.w	#$E0,d0
000191BC 9068 0008                  		sub.w	8(a0),d0
000191C0 6400                       		bcc.s	loc_15B74
000191C2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000191C6 0440 0080                  		subi.w	#$80,d0
000191CA B068 000C                  		cmp.w	$C(a0),d0
000191CE 6400                       		bcc.s	locret_15B76
000191D0 0640 0100                  		addi.w	#$100,d0
000191D4 B068 000C                  		cmp.w	$C(a0),d0
000191D8 6500                       		bcs.s	locret_15B76
000191DA 117C 0001 003D             		move.b	#1,$3D(a0)
000191E0 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
000191E6 117C 00A2 0020             		move.b	#$A2,$20(a0)
000191EC 117C 0002 001A             		move.b	#2,$1A(a0)
000191F2 303C 00B0                  		move.w	#$B0,d0
000191F6 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play saw sound
000191FC                            
000191FC                            loc_15B74:
000191FC 588F                       		addq.l	#4,sp
000191FE                            
000191FE                            locret_15B76:
000191FE 4E75                       		rts	
00019200                            ; ===========================================================================
00019200                            
00019200                            Obj6A_Animate04:
00019200 4EB9 0001 0434             		jsr	SpeedToPos
00019206 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001920C 5328 001E                  		subq.b	#1,$1E(a0)
00019210 6A00                       		bpl.s	locret_15B96
00019212 117C 0002 001E             		move.b	#2,$1E(a0)
00019218 0868 0000 001A             		bchg	#0,$1A(a0)
0001921E                            
0001921E                            locret_15B96:
0001921E 4E75                       		rts	
00019220                            ; ===========================================================================
00019220                            ; ---------------------------------------------------------------------------
00019220                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00019220                            ; ---------------------------------------------------------------------------
00019220                            Map_obj6A:
00019220                            	include "_maps\obj6A.asm"
00019220                            ; ---------------------------------------------------------------------------
00019220                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00019220                            ; ---------------------------------------------------------------------------
00019220 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00019224 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00019228 07                         byte_15BA0:	dc.b 7
00019229 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001922E D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00019233 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00019238 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001923D E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00019242 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00019247 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001924C 07                         byte_15BC4:	dc.b 7
0001924D C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00019252 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00019257 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001925C E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00019261 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00019266 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001926B 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00019270 04                         byte_15BE8:	dc.b 4
00019271 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00019276 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
0001927B 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00019280 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00019285 04                         byte_15BFD:	dc.b 4
00019286 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001928B E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00019290 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00019295 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001929A                            		even
0001929A                            		even
0001929A                            
0001929A                            ; ===========================================================================
0001929A                            ; ---------------------------------------------------------------------------
0001929A                            ; Object 6B - stomper (SBZ)
0001929A                            ; ---------------------------------------------------------------------------
0001929A                            
0001929A                            Obj6B:					; XREF: Obj_Index
0001929A 7000                       		moveq	#0,d0
0001929C 1028 0024                  		move.b	$24(a0),d0
000192A0 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
000192A4 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
000192A8                            ; ===========================================================================
000192A8 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
000192AA 0000                       		dc.w Obj6B_Action-Obj6B_Index
000192AC                            
000192AC 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
000192B0 1C20 3803                  		dc.b  $1C, $20,	$38,   3
000192B4 1C20 4004                  		dc.b  $1C, $20,	$40,   4
000192B8 1C20 6004                  		dc.b  $1C, $20,	$60,   4
000192BC 8040 0005                  		dc.b  $80, $40,	  0,   5
000192C0                            ; ===========================================================================
000192C0                            
000192C0                            Obj6B_Main:				; XREF: Obj6B_Index
000192C0 5428 0024                  		addq.b	#2,$24(a0)
000192C4 7000                       		moveq	#0,d0
000192C6 1028 0028                  		move.b	$28(a0),d0
000192CA E448                       		lsr.w	#2,d0
000192CC 0240 001C                  		andi.w	#$1C,d0
000192D0 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
000192D4 115B 0019                  		move.b	(a3)+,$19(a0)
000192D8 115B 0016                  		move.b	(a3)+,$16(a0)
000192DC E448                       		lsr.w	#2,d0
000192DE 1140 001A                  		move.b	d0,$1A(a0)
000192E2 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
000192EA 317C 22C0 0002             		move.w	#$22C0,2(a0)
000192F0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
000192F6 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
000192F8 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
000192FE 6700                       		beq.s	Obj6B_SBZ3
00019300                            
00019300                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00019300 45F8 FC00                  		lea	($FFFFFC00).w,a2
00019304 7000                       		moveq	#0,d0
00019306 1028 0023                  		move.b	$23(a0),d0
0001930A 6700                       		beq.s	Obj6B_Delete
0001930C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019312                            
00019312                            Obj6B_Delete:
00019312 4EF9 0001 0496             		jmp	DeleteObject
00019318                            ; ===========================================================================
00019318                            
00019318                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00019318 317C 41F0 0002             		move.w	#$41F0,2(a0)
0001931E 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00019324 6600                       		bne.s	Obj6B_SBZ12
00019326 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001932A 7000                       		moveq	#0,d0
0001932C 1028 0023                  		move.b	$23(a0),d0
00019330 6700                       		beq.s	Obj6B_SBZ12
00019332 0832 0000 0002             		btst	#0,2(a2,d0.w)
00019338 6700                       		beq.s	Obj6B_SBZ12
0001933A 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001933E 60C0                       		bra.s	Obj6B_ChkGone
00019340                            ; ===========================================================================
00019340                            
00019340                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00019340 0028 0004 0001             		ori.b	#4,1(a0)
00019346 117C 0004 0018             		move.b	#4,$18(a0)
0001934C 3168 0008 0034             		move.w	8(a0),$34(a0)
00019352 3168 000C 0030             		move.w	$C(a0),$30(a0)
00019358 7000                       		moveq	#0,d0
0001935A 101B                       		move.b	(a3)+,d0
0001935C 3140 003C                  		move.w	d0,$3C(a0)
00019360 7000                       		moveq	#0,d0
00019362 1028 0028                  		move.b	$28(a0),d0
00019366 6A00                       		bpl.s	Obj6B_Action
00019368 0200 000F                  		andi.b	#$F,d0
0001936C 1140 003E                  		move.b	d0,$3E(a0)
00019370 1153 0028                  		move.b	(a3),$28(a0)
00019374 0C13 0005                  		cmpi.b	#5,(a3)
00019378 6600                       		bne.s	Obj6B_ChkGone2
0001937A 08E8 0004 0001             		bset	#4,1(a0)
00019380                            
00019380                            Obj6B_ChkGone2:
00019380 45F8 FC00                  		lea	($FFFFFC00).w,a2
00019384 7000                       		moveq	#0,d0
00019386 1028 0023                  		move.b	$23(a0),d0
0001938A 6700                       		beq.s	Obj6B_Action
0001938C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019392                            
00019392                            Obj6B_Action:				; XREF: Obj6B_Index
00019392 3F28 0008                  		move.w	8(a0),-(sp)
00019396 7000                       		moveq	#0,d0
00019398 1028 0028                  		move.b	$28(a0),d0
0001939C 0240 000F                  		andi.w	#$F,d0
000193A0 D040                       		add.w	d0,d0
000193A2 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
000193A6 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
000193AA 381F                       		move.w	(sp)+,d4
000193AC 4A28 0001                  		tst.b	1(a0)
000193B0 6A00                       		bpl.s	Obj6B_ChkDel
000193B2 7200                       		moveq	#0,d1
000193B4 1228 0019                  		move.b	$19(a0),d1
000193B8 0641 000B                  		addi.w	#$B,d1
000193BC 7400                       		moveq	#0,d2
000193BE 1428 0016                  		move.b	$16(a0),d2
000193C2 3602                       		move.w	d2,d3
000193C4 5243                       		addq.w	#1,d3
000193C6 6100 9688                  		bsr.w	SolidObject
000193CA                            
000193CA                            Obj6B_ChkDel:
000193CA 3028 0034                  		move.w	$34(a0),d0
000193CE 0240 FF80                  		andi.w	#$FF80,d0
000193D2 3238 F700                  		move.w	($FFFFF700).w,d1
000193D6 0441 0080                  		subi.w	#$80,d1
000193DA 0241 FF80                  		andi.w	#$FF80,d1
000193DE 9041                       		sub.w	d1,d0
000193E0 0C40 0280                  		cmpi.w	#$280,d0
000193E4 6200                       		bhi.s	loc_15D64
000193E6 4EF9 0001 045A             		jmp	DisplaySprite
000193EC                            ; ===========================================================================
000193EC                            
000193EC                            loc_15D64:
000193EC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000193F2 6600                       		bne.s	Obj6B_Delete2
000193F4 4238 F7CB                  		clr.b	($FFFFF7CB).w
000193F8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000193FC 7000                       		moveq	#0,d0
000193FE 1028 0023                  		move.b	$23(a0),d0
00019402 6700                       		beq.s	Obj6B_Delete2
00019404 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001940A                            
0001940A                            Obj6B_Delete2:
0001940A 4EF9 0001 0496             		jmp	DeleteObject
00019410                            ; ===========================================================================
00019410 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00019414 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00019418 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
0001941C                            ; ===========================================================================
0001941C                            
0001941C                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
0001941C 4E75                       		rts	
0001941E                            ; ===========================================================================
0001941E                            
0001941E                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
0001941E 4A28 0038                  		tst.b	$38(a0)
00019422 6600                       		bne.s	loc_15DB4
00019424 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00019428 7000                       		moveq	#0,d0
0001942A 1028 003E                  		move.b	$3E(a0),d0
0001942E 0832 0000 0000             		btst	#0,(a2,d0.w)
00019434 6700                       		beq.s	loc_15DC2
00019436 117C 0001 0038             		move.b	#1,$38(a0)
0001943C                            
0001943C                            loc_15DB4:
0001943C 3028 003C                  		move.w	$3C(a0),d0
00019440 B068 003A                  		cmp.w	$3A(a0),d0
00019444 6700                       		beq.s	loc_15DE0
00019446 5468 003A                  		addq.w	#2,$3A(a0)
0001944A                            
0001944A                            loc_15DC2:
0001944A 3028 003A                  		move.w	$3A(a0),d0
0001944E 0828 0000 0022             		btst	#0,$22(a0)
00019454 6700                       		beq.s	loc_15DD4
00019456 4440                       		neg.w	d0
00019458 0640 0080                  		addi.w	#$80,d0
0001945C                            
0001945C                            loc_15DD4:
0001945C 3228 0034                  		move.w	$34(a0),d1
00019460 9240                       		sub.w	d0,d1
00019462 3141 0008                  		move.w	d1,8(a0)
00019466 4E75                       		rts	
00019468                            ; ===========================================================================
00019468                            
00019468                            loc_15DE0:
00019468 5228 0028                  		addq.b	#1,$28(a0)
0001946C 317C 00B4 0036             		move.w	#$B4,$36(a0)
00019472 4228 0038                  		clr.b	$38(a0)
00019476 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001947A 7000                       		moveq	#0,d0
0001947C 1028 0023                  		move.b	$23(a0),d0
00019480 67C8                       		beq.s	loc_15DC2
00019482 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019488 60C0                       		bra.s	loc_15DC2
0001948A                            ; ===========================================================================
0001948A                            
0001948A                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
0001948A 4A28 0038                  		tst.b	$38(a0)
0001948E 6600                       		bne.s	loc_15E14
00019490 5368 0036                  		subq.w	#1,$36(a0)
00019494 6600                       		bne.s	loc_15E1E
00019496 117C 0001 0038             		move.b	#1,$38(a0)
0001949C                            
0001949C                            loc_15E14:
0001949C 4A68 003A                  		tst.w	$3A(a0)
000194A0 6700                       		beq.s	loc_15E3C
000194A2 5568 003A                  		subq.w	#2,$3A(a0)
000194A6                            
000194A6                            loc_15E1E:
000194A6 3028 003A                  		move.w	$3A(a0),d0
000194AA 0828 0000 0022             		btst	#0,$22(a0)
000194B0 6700                       		beq.s	loc_15E30
000194B2 4440                       		neg.w	d0
000194B4 0640 0080                  		addi.w	#$80,d0
000194B8                            
000194B8                            loc_15E30:
000194B8 3228 0034                  		move.w	$34(a0),d1
000194BC 9240                       		sub.w	d0,d1
000194BE 3141 0008                  		move.w	d1,8(a0)
000194C2 4E75                       		rts	
000194C4                            ; ===========================================================================
000194C4                            
000194C4                            loc_15E3C:
000194C4 5328 0028                  		subq.b	#1,$28(a0)
000194C8 4228 0038                  		clr.b	$38(a0)
000194CC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000194D0 7000                       		moveq	#0,d0
000194D2 1028 0023                  		move.b	$23(a0),d0
000194D6 67CE                       		beq.s	loc_15E1E
000194D8 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000194DE 60C6                       		bra.s	loc_15E1E
000194E0                            ; ===========================================================================
000194E0                            
000194E0                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
000194E0 4A28 0038                  		tst.b	$38(a0)
000194E4 6600                       		bne.s	loc_15E7C
000194E6 4A68 003A                  		tst.w	$3A(a0)
000194EA 6700                       		beq.s	loc_15E6A
000194EC 5368 003A                  		subq.w	#1,$3A(a0)
000194F0 6000                       		bra.s	loc_15E8E
000194F2                            ; ===========================================================================
000194F2                            
000194F2                            loc_15E6A:
000194F2 5368 0036                  		subq.w	#1,$36(a0)
000194F6 6A00                       		bpl.s	loc_15E8E
000194F8 317C 003C 0036             		move.w	#$3C,$36(a0)
000194FE 117C 0001 0038             		move.b	#1,$38(a0)
00019504                            
00019504                            loc_15E7C:
00019504 5068 003A                  		addq.w	#8,$3A(a0)
00019508 3028 003A                  		move.w	$3A(a0),d0
0001950C B068 003C                  		cmp.w	$3C(a0),d0
00019510 6600                       		bne.s	loc_15E8E
00019512 4228 0038                  		clr.b	$38(a0)
00019516                            
00019516                            loc_15E8E:
00019516 3028 003A                  		move.w	$3A(a0),d0
0001951A 0828 0000 0022             		btst	#0,$22(a0)
00019520 6700                       		beq.s	loc_15EA0
00019522 4440                       		neg.w	d0
00019524 0640 0038                  		addi.w	#$38,d0
00019528                            
00019528                            loc_15EA0:
00019528 3228 0030                  		move.w	$30(a0),d1
0001952C D240                       		add.w	d0,d1
0001952E 3141 000C                  		move.w	d1,$C(a0)
00019532 4E75                       		rts	
00019534                            ; ===========================================================================
00019534                            
00019534                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00019534 4A28 0038                  		tst.b	$38(a0)
00019538 6600                       		bne.s	loc_15ED0
0001953A 4A68 003A                  		tst.w	$3A(a0)
0001953E 6700                       		beq.s	loc_15EBE
00019540 5168 003A                  		subq.w	#8,$3A(a0)
00019544 6000                       		bra.s	loc_15EF0
00019546                            ; ===========================================================================
00019546                            
00019546                            loc_15EBE:
00019546 5368 0036                  		subq.w	#1,$36(a0)
0001954A 6A00                       		bpl.s	loc_15EF0
0001954C 317C 003C 0036             		move.w	#$3C,$36(a0)
00019552 117C 0001 0038             		move.b	#1,$38(a0)
00019558                            
00019558                            loc_15ED0:
00019558 3028 003A                  		move.w	$3A(a0),d0
0001955C B068 003C                  		cmp.w	$3C(a0),d0
00019560 6700                       		beq.s	loc_15EE0
00019562 5068 003A                  		addq.w	#8,$3A(a0)
00019566 6000                       		bra.s	loc_15EF0
00019568                            ; ===========================================================================
00019568                            
00019568                            loc_15EE0:
00019568 5368 0036                  		subq.w	#1,$36(a0)
0001956C 6A00                       		bpl.s	loc_15EF0
0001956E 317C 003C 0036             		move.w	#$3C,$36(a0)
00019574 4228 0038                  		clr.b	$38(a0)
00019578                            
00019578                            loc_15EF0:
00019578 3028 003A                  		move.w	$3A(a0),d0
0001957C 0828 0000 0022             		btst	#0,$22(a0)
00019582 6700                       		beq.s	loc_15F02
00019584 4440                       		neg.w	d0
00019586 0640 0038                  		addi.w	#$38,d0
0001958A                            
0001958A                            loc_15F02:
0001958A 3228 0030                  		move.w	$30(a0),d1
0001958E D240                       		add.w	d0,d1
00019590 3141 000C                  		move.w	d1,$C(a0)
00019594 4E75                       		rts	
00019596                            ; ===========================================================================
00019596                            
00019596                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00019596 4A28 0038                  		tst.b	$38(a0)
0001959A 6600                       		bne.s	loc_15F3E
0001959C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000195A0 7000                       		moveq	#0,d0
000195A2 1028 003E                  		move.b	$3E(a0),d0
000195A6 0832 0000 0000             		btst	#0,(a2,d0.w)
000195AC 6700                       		beq.s	locret_15F5C
000195AE 117C 0001 0038             		move.b	#1,$38(a0)
000195B4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000195B8 7000                       		moveq	#0,d0
000195BA 1028 0023                  		move.b	$23(a0),d0
000195BE 6700                       		beq.s	loc_15F3E
000195C0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000195C6                            
000195C6                            loc_15F3E:
000195C6 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
000195CE 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
000195D6 3168 0008 0034             		move.w	8(a0),$34(a0)
000195DC 0C68 0980 0008             		cmpi.w	#$980,8(a0)
000195E2 6700                       		beq.s	loc_15F5E
000195E4                            
000195E4                            locret_15F5C:
000195E4 4E75                       		rts	
000195E6                            ; ===========================================================================
000195E6                            
000195E6                            loc_15F5E:
000195E6 4228 0028                  		clr.b	$28(a0)
000195EA 4228 0038                  		clr.b	$38(a0)
000195EE 4E75                       		rts	
000195F0                            ; ===========================================================================
000195F0                            ; ---------------------------------------------------------------------------
000195F0                            ; Sprite mappings - stomper and	platforms (SBZ)
000195F0                            ; ---------------------------------------------------------------------------
000195F0                            Map_obj6B:
000195F0                            	include "_maps\obj6B.asm"
000195F0                            ; ---------------------------------------------------------------------------
000195F0                            ; Sprite mappings - stomper and	platforms (SBZ)
000195F0                            ; ---------------------------------------------------------------------------
000195F0 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
000195F4 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
000195F8 0000                       		dc.w byte_15FB0-Map_obj6B
000195FA 04                         byte_15F72:	dc.b 4
000195FB F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00019600 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00019605 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
0001960A F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
0001960F 08                         byte_15F87:	dc.b 8
00019610 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00019615 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
0001961A E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
0001961F E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00019624 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00019629 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
0001962E 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00019633 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00019638 0E                         byte_15FB0:	dc.b $E
00019639 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
0001963E C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00019643 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00019648 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
0001964D C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00019652 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00019657 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
0001965C C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00019661 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00019666 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
0001966B E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00019670 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00019675 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
0001967A 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00019680 00                         		even
00019680 00                         		even
00019680                            
00019680                            ; ===========================================================================
00019680                            ; ---------------------------------------------------------------------------
00019680                            ; Object 6C - vanishing	platforms (SBZ)
00019680                            ; ---------------------------------------------------------------------------
00019680                            
00019680                            Obj6C:					; XREF: Obj_Index
00019680 7000                       		moveq	#0,d0
00019682 1028 0024                  		move.b	$24(a0),d0
00019686 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
0001968A 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
0001968E                            ; ===========================================================================
0001968E 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00019690 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00019692 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00019694 0000                       		dc.w loc_16068-Obj6C_Index
00019696                            ; ===========================================================================
00019696                            
00019696                            Obj6C_Main:				; XREF: Obj6C_Index
00019696 5C28 0024                  		addq.b	#6,$24(a0)
0001969A 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000196A2 317C 44C3 0002             		move.w	#$44C3,2(a0)
000196A8 0028 0004 0001             		ori.b	#4,1(a0)
000196AE 117C 0010 0019             		move.b	#$10,$19(a0)
000196B4 117C 0004 0018             		move.b	#4,$18(a0)
000196BA 7000                       		moveq	#0,d0
000196BC 1028 0028                  		move.b	$28(a0),d0	; get object type
000196C0 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000196C4 5240                       		addq.w	#1,d0		; add 1
000196C6 EF48                       		lsl.w	#7,d0		; multiply by $80
000196C8 3200                       		move.w	d0,d1
000196CA 5340                       		subq.w	#1,d0
000196CC 3140 0030                  		move.w	d0,$30(a0)
000196D0 3140 0032                  		move.w	d0,$32(a0)
000196D4 7000                       		moveq	#0,d0
000196D6 1028 0028                  		move.b	$28(a0),d0	; get object type
000196DA 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
000196DE 0641 0080                  		addi.w	#$80,d1
000196E2 C0C1                       		mulu.w	d1,d0
000196E4 E088                       		lsr.l	#8,d0
000196E6 3140 0036                  		move.w	d0,$36(a0)
000196EA 5341                       		subq.w	#1,d1
000196EC 3141 0038                  		move.w	d1,$38(a0)
000196F0                            
000196F0                            loc_16068:				; XREF: Obj6C_Index
000196F0 3038 FE04                  		move.w	($FFFFFE04).w,d0
000196F4 9068 0036                  		sub.w	$36(a0),d0
000196F8 C068 0038                  		and.w	$38(a0),d0
000196FC 6600                       		bne.s	Obj6C_Animate
000196FE 5928 0024                  		subq.b	#4,$24(a0)
00019702 6000                       		bra.s	Obj6C_Vanish
00019704                            ; ===========================================================================
00019704                            
00019704                            Obj6C_Animate:
00019704 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001970A 4EB9 0000 D3EA             		jsr	AnimateSprite
00019710 6000 905E                  		bra.w	MarkObjGone
00019714                            ; ===========================================================================
00019714                            
00019714                            Obj6C_Vanish:				; XREF: Obj6C_Index
00019714 5368 0030                  		subq.w	#1,$30(a0)
00019718 6A00                       		bpl.s	loc_160AA
0001971A 317C 007F 0030             		move.w	#127,$30(a0)
00019720 4A28 001C                  		tst.b	$1C(a0)
00019724 6700                       		beq.s	loc_160A4
00019726 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001972C                            
0001972C                            loc_160A4:
0001972C 0868 0000 001C             		bchg	#0,$1C(a0)
00019732                            
00019732                            loc_160AA:
00019732 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00019738 4EB9 0000 D3EA             		jsr	AnimateSprite
0001973E 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00019744 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00019746 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0001974C 6600                       		bne.s	loc_160D6
0001974E 7200                       		moveq	#0,d1
00019750 1228 0019                  		move.b	$19(a0),d1
00019754 4EB9 0000 9F78             		jsr	(PlatformObject).l
0001975A 6000 9014                  		bra.w	MarkObjGone
0001975E                            ; ===========================================================================
0001975E                            
0001975E                            loc_160D6:
0001975E 7200                       		moveq	#0,d1
00019760 1228 0019                  		move.b	$19(a0),d1
00019764 4EB9 0000 A0EC             		jsr	(ExitPlatform).l
0001976A 3428 0008                  		move.w	8(a0),d2
0001976E 4EB9 0000 A656             		jsr	(MvSonicOnPtfm2).l
00019774 6000 8FFA                  		bra.w	MarkObjGone
00019778                            ; ===========================================================================
00019778                            
00019778                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00019778 0828 0003 0022             		btst	#3,$22(a0)
0001977E 6700                       		beq.s	Obj6C_Display
00019780 43F8 D000                  		lea	($FFFFD000).w,a1
00019784 08A9 0003 0022             		bclr	#3,$22(a1)
0001978A 08A8 0003 0022             		bclr	#3,$22(a0)
00019790 117C 0002 0024             		move.b	#2,$24(a0)
00019796 4228 0025                  		clr.b	$25(a0)
0001979A                            
0001979A                            Obj6C_Display:
0001979A 6000 8FD4                  		bra.w	MarkObjGone
0001979E                            ; ===========================================================================
0001979E                            Ani_obj6C:
0001979E                            	include "_anim\obj6C.asm"
0001979E                            ; ---------------------------------------------------------------------------
0001979E                            ; Animation script - vanishing platforms (SBZ)
0001979E                            ; ---------------------------------------------------------------------------
0001979E 0000                       		dc.w byte_1611A-Ani_obj6C
000197A0 0000                       		dc.w byte_16122-Ani_obj6C
000197A2 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
000197AA 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
000197B2                            		even
000197B2                            		even
000197B2                            
000197B2                            ; ---------------------------------------------------------------------------
000197B2                            ; Sprite mappings - vanishing platforms	(SBZ)
000197B2                            ; ---------------------------------------------------------------------------
000197B2                            Map_obj6C:
000197B2                            	include "_maps\obj6C.asm"
000197B2                            ; ---------------------------------------------------------------------------
000197B2                            ; Sprite mappings - vanishing platforms	(SBZ)
000197B2                            ; ---------------------------------------------------------------------------
000197B2 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
000197B6 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
000197BA 01                         byte_16132:	dc.b 1
000197BB F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
000197C0 01                         byte_16138:	dc.b 1
000197C1 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
000197C6 01                         byte_1613E:	dc.b 1
000197C7 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
000197CC 00                         byte_16144:	dc.b 0
000197CE 00                         		even
000197CE 00                         		even
000197CE                            
000197CE                            ; ===========================================================================
000197CE                            ; ---------------------------------------------------------------------------
000197CE                            ; Object 6E - electrocution orbs (SBZ)
000197CE                            ; ---------------------------------------------------------------------------
000197CE                            
000197CE                            Obj6E:					; XREF: Obj_Index
000197CE 7000                       		moveq	#0,d0
000197D0 1028 0024                  		move.b	$24(a0),d0
000197D4 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
000197D8 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
000197DC                            ; ===========================================================================
000197DC 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
000197DE 0000                       		dc.w Obj6E_Shock-Obj6E_Index
000197E0                            ; ===========================================================================
000197E0                            
000197E0                            Obj6E_Main:				; XREF: Obj6E_Index
000197E0 5428 0024                  		addq.b	#2,$24(a0)
000197E4 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
000197EC 317C 047E 0002             		move.w	#$47E,2(a0)
000197F2 0028 0004 0001             		ori.b	#4,1(a0)
000197F8 117C 0028 0019             		move.b	#$28,$19(a0)
000197FE 7000                       		moveq	#0,d0
00019800 1028 0028                  		move.b	$28(a0),d0	; read object type
00019804 E948                       		lsl.w	#4,d0		; multiply by $10
00019806 5340                       		subq.w	#1,d0
00019808 3140 0034                  		move.w	d0,$34(a0)
0001980C                            
0001980C                            Obj6E_Shock:				; XREF: Obj6E_Index
0001980C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00019810 C068 0034                  		and.w	$34(a0),d0
00019814 6600                       		bne.s	Obj6E_Animate
00019816 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
0001981C 4A28 0001                  		tst.b	1(a0)
00019820 6A00                       		bpl.s	Obj6E_Animate
00019822 303C 00B1                  		move.w	#$B1,d0
00019826 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play electricity sound
0001982C                            
0001982C                            Obj6E_Animate:
0001982C 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00019832 4EB9 0000 D3EA             		jsr	AnimateSprite
00019838 117C 0000 0020             		move.b	#0,$20(a0)
0001983E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00019844 6600                       		bne.s	Obj6E_Display	; if not, branch
00019846 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
0001984C                            
0001984C                            Obj6E_Display:
0001984C 6000 8F22                  		bra.w	MarkObjGone
00019850                            ; ===========================================================================
00019850                            Ani_obj6E:
00019850                            	include "_anim\obj6E.asm"
00019850                            ; ---------------------------------------------------------------------------
00019850                            ; Animation script - electrocution orbs (SBZ)
00019850                            ; ---------------------------------------------------------------------------
00019850 0000                       		dc.w byte_161CC-Ani_obj6E
00019852 0000                       		dc.w byte_161D0-Ani_obj6E
00019854 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00019858 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00019868                            		even
00019868                            		even
00019868                            
00019868                            ; ---------------------------------------------------------------------------
00019868                            ; Sprite mappings - electrocution orbs (SBZ)
00019868                            ; ---------------------------------------------------------------------------
00019868                            Map_obj6E:
00019868                            	include "_maps\obj6E.asm"
00019868                            ; ---------------------------------------------------------------------------
00019868                            ; Sprite mappings - electrocution orbs (SBZ)
00019868                            ; ---------------------------------------------------------------------------
00019868 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
0001986C 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
00019870 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00019874 02                         byte_161EC:	dc.b 2
00019875 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001987A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001987F 03                         byte_161F7:	dc.b 3
00019880 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00019885 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001988A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001988F 05                         byte_16207:	dc.b 5
00019890 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00019895 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001989A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001989F F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
000198A4 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
000198A9 04                         byte_16221:	dc.b 4
000198AA F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000198AF 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000198B4 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
000198B9 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
000198BE 06                         byte_16236:	dc.b 6
000198BF F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000198C4 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000198C9 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
000198CE F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
000198D3 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
000198D8 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
000198DD 04                         byte_16255:	dc.b 4
000198DE F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000198E3 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000198E8 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
000198ED F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
000198F2                            		even
000198F2                            		even
000198F2                            
000198F2                            ; ===========================================================================
000198F2                            ; ---------------------------------------------------------------------------
000198F2                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
000198F2                            ; ---------------------------------------------------------------------------
000198F2                            
000198F2                            Obj6F:					; XREF: Obj_Index
000198F2 7000                       		moveq	#0,d0
000198F4 1028 0024                  		move.b	$24(a0),d0
000198F8 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
000198FC 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00019900 3028 0030                  		move.w	$30(a0),d0
00019904 0240 FF80                  		andi.w	#$FF80,d0
00019908 3238 F700                  		move.w	($FFFFF700).w,d1
0001990C 0441 0080                  		subi.w	#$80,d1
00019910 0241 FF80                  		andi.w	#$FF80,d1
00019914 9041                       		sub.w	d1,d0
00019916 0C40 0280                  		cmpi.w	#$280,d0
0001991A 6200                       		bhi.s	loc_1629A
0001991C                            
0001991C                            Obj6F_Display:
0001991C 4EF9 0001 045A             		jmp	DisplaySprite
00019922                            ; ===========================================================================
00019922                            
00019922                            loc_1629A:
00019922 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00019928 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
0001992A 0C40 FF80                  		cmpi.w	#-$80,d0
0001992E 64EC                       		bcc.s	Obj6F_Display
00019930                            
00019930                            Obj6F_Act1or2:
00019930 1028 002F                  		move.b	$2F(a0),d0
00019934 6A00                       		bpl.s	Obj6F_Delete
00019936 0240 007F                  		andi.w	#$7F,d0
0001993A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001993E 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00019944                            
00019944                            Obj6F_Delete:
00019944 4EF9 0001 0496             		jmp	DeleteObject
0001994A                            ; ===========================================================================
0001994A 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
0001994C 0000                       		dc.w loc_163D8-Obj6F_Index
0001994E                            ; ===========================================================================
0001994E                            
0001994E                            Obj6F_Main:				; XREF: Obj6F_Index
0001994E 1028 0028                  		move.b	$28(a0),d0
00019952 6B00 0000                  		bmi.w	loc_16380
00019956 5428 0024                  		addq.b	#2,$24(a0)
0001995A 217C 0001 8FC2 0004        		move.l	#Map_obj69a,4(a0)
00019962 317C 04DF 0002             		move.w	#$4DF,2(a0)
00019968 117C 0010 0019             		move.b	#$10,$19(a0)
0001996E 0028 0004 0001             		ori.b	#4,1(a0)
00019974 117C 0004 0018             		move.b	#4,$18(a0)
0001997A 7000                       		moveq	#0,d0
0001997C 1028 0028                  		move.b	$28(a0),d0
00019980 3200                       		move.w	d0,d1
00019982 E648                       		lsr.w	#3,d0
00019984 0240 001E                  		andi.w	#$1E,d0
00019988 45FA 0000                  		lea	off_164A6(pc),a2
0001998C D4F2 0000                  		adda.w	(a2,d0.w),a2
00019990 315A 0038                  		move.w	(a2)+,$38(a0)
00019994 315A 0030                  		move.w	(a2)+,$30(a0)
00019998 214A 003C                  		move.l	a2,$3C(a0)
0001999C 0241 000F                  		andi.w	#$F,d1
000199A0 E549                       		lsl.w	#2,d1
000199A2 1141 0038                  		move.b	d1,$38(a0)
000199A6 117C 0004 003A             		move.b	#4,$3A(a0)
000199AC 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000199B0 6700                       		beq.s	loc_16356
000199B2 117C 0001 003B             		move.b	#1,$3B(a0)
000199B8 4428 003A                  		neg.b	$3A(a0)
000199BC 7200                       		moveq	#0,d1
000199BE 1228 0038                  		move.b	$38(a0),d1
000199C2 D228 003A                  		add.b	$3A(a0),d1
000199C6 B228 0039                  		cmp.b	$39(a0),d1
000199CA 6500                       		bcs.s	loc_16352
000199CC 1001                       		move.b	d1,d0
000199CE 7200                       		moveq	#0,d1
000199D0 4A00                       		tst.b	d0
000199D2 6A00                       		bpl.s	loc_16352
000199D4 1228 0039                  		move.b	$39(a0),d1
000199D8 5901                       		subq.b	#4,d1
000199DA                            
000199DA                            loc_16352:
000199DA 1141 0038                  		move.b	d1,$38(a0)
000199DE                            
000199DE                            loc_16356:
000199DE 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000199E4 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000199EA 4A41                       		tst.w	d1
000199EC 6600                       		bne.s	loc_1636C
000199EE 117C 0001 001C             		move.b	#1,$1C(a0)
000199F4                            
000199F4                            loc_1636C:
000199F4 0C41 0008                  		cmpi.w	#8,d1
000199F8 6600                       		bne.s	loc_16378
000199FA 117C 0000 001C             		move.b	#0,$1C(a0)
00019A00                            
00019A00                            loc_16378:
00019A00 6100 BCA8                  		bsr.w	Obj63_ChangeDir
00019A04 6000 0000                  		bra.w	loc_163D8
00019A08                            ; ===========================================================================
00019A08                            
00019A08                            loc_16380:				; XREF: Obj6F_Main
00019A08 1140 002F                  		move.b	d0,$2F(a0)
00019A0C 0240 007F                  		andi.w	#$7F,d0
00019A10 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00019A14 08F2 0000 0000             		bset	#0,(a2,d0.w)
00019A1A 6700                       		beq.s	loc_1639A
00019A1C 4EF9 0001 0496             		jmp	DeleteObject
00019A22                            ; ===========================================================================
00019A22                            
00019A22                            loc_1639A:
00019A22 D040                       		add.w	d0,d0
00019A24 0240 001E                  		andi.w	#$1E,d0
00019A28 0640 0080                  		addi.w	#$80,d0
00019A2C 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00019A32 D4F2 0000                  		adda.w	(a2,d0.w),a2
00019A36 321A                       		move.w	(a2)+,d1
00019A38 2248                       		movea.l	a0,a1
00019A3A 6000                       		bra.s	Obj6F_LoadPform
00019A3C                            ; ===========================================================================
00019A3C                            
00019A3C                            Obj6F_Loop:
00019A3C 4EB9 0001 08E0             		jsr	SingleObjLoad
00019A42 6600                       		bne.s	loc_163D0
00019A44                            
00019A44                            Obj6F_LoadPform:			; XREF: loc_1639A
00019A44 12BC 006F                  		move.b	#$6F,0(a1)
00019A48 335A 0008                  		move.w	(a2)+,8(a1)
00019A4C 335A 000C                  		move.w	(a2)+,$C(a1)
00019A50 301A                       		move.w	(a2)+,d0
00019A52 1340 0028                  		move.b	d0,$28(a1)
00019A56                            
00019A56                            loc_163D0:
00019A56 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00019A5A                            
00019A5A 588F                       		addq.l	#4,sp
00019A5C 4E75                       		rts	
00019A5E                            ; ===========================================================================
00019A5E                            
00019A5E                            loc_163D8:				; XREF: Obj6F_Index
00019A5E 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00019A64 4EB9 0000 D3EA             		jsr	AnimateSprite
00019A6A 4A28 001A                  		tst.b	$1A(a0)
00019A6E 6600                       		bne.s	loc_16404
00019A70 3F28 0008                  		move.w	8(a0),-(sp)
00019A74 6100 0000                  		bsr.w	loc_16424
00019A78 323C 001B                  		move.w	#$1B,d1
00019A7C 343C 0007                  		move.w	#7,d2
00019A80 3602                       		move.w	d2,d3
00019A82 5243                       		addq.w	#1,d3
00019A84 381F                       		move.w	(sp)+,d4
00019A86 6000 8FC8                  		bra.w	SolidObject
00019A8A                            ; ===========================================================================
00019A8A                            
00019A8A                            loc_16404:
00019A8A 0828 0003 0022             		btst	#3,$22(a0)
00019A90 6700                       		beq.s	loc_16420
00019A92 43F8 D000                  		lea	($FFFFD000).w,a1
00019A96 08A9 0003 0022             		bclr	#3,$22(a1)
00019A9C 08A8 0003 0022             		bclr	#3,$22(a0)
00019AA2 4228 0025                  		clr.b	$25(a0)
00019AA6                            
00019AA6                            loc_16420:
00019AA6 6000 0002                  		bra.w	*+4
00019AAA                            
00019AAA                            loc_16424:
00019AAA 3028 0008                  		move.w	8(a0),d0
00019AAE B068 0034                  		cmp.w	$34(a0),d0
00019AB2 6600                       		bne.s	loc_16484
00019AB4 3028 000C                  		move.w	$C(a0),d0
00019AB8 B068 0036                  		cmp.w	$36(a0),d0
00019ABC 6600                       		bne.s	loc_16484
00019ABE 7200                       		moveq	#0,d1
00019AC0 1228 0038                  		move.b	$38(a0),d1
00019AC4 D228 003A                  		add.b	$3A(a0),d1
00019AC8 B228 0039                  		cmp.b	$39(a0),d1
00019ACC 6500                       		bcs.s	loc_16456
00019ACE 1001                       		move.b	d1,d0
00019AD0 7200                       		moveq	#0,d1
00019AD2 4A00                       		tst.b	d0
00019AD4 6A00                       		bpl.s	loc_16456
00019AD6 1228 0039                  		move.b	$39(a0),d1
00019ADA 5901                       		subq.b	#4,d1
00019ADC                            
00019ADC                            loc_16456:
00019ADC 1141 0038                  		move.b	d1,$38(a0)
00019AE0 2268 003C                  		movea.l	$3C(a0),a1
00019AE4 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00019AEA 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00019AF0 4A41                       		tst.w	d1
00019AF2 6600                       		bne.s	loc_16474
00019AF4 117C 0001 001C             		move.b	#1,$1C(a0)
00019AFA                            
00019AFA                            loc_16474:
00019AFA 0C41 0008                  		cmpi.w	#8,d1
00019AFE 6600                       		bne.s	loc_16480
00019B00 117C 0000 001C             		move.b	#0,$1C(a0)
00019B06                            
00019B06                            loc_16480:
00019B06 6100 BBA2                  		bsr.w	Obj63_ChangeDir
00019B0A                            
00019B0A                            loc_16484:
00019B0A 4EF9 0001 0434             		jmp	SpeedToPos
00019B10                            ; ===========================================================================
00019B10                            Ani_obj6F:
00019B10                            	include "_anim\obj6F.asm"
00019B10                            ; ---------------------------------------------------------------------------
00019B10                            ; Animation script - platform on conveyor belt (SBZ)
00019B10                            ; ---------------------------------------------------------------------------
00019B10 0000                       		dc.w byte_1648E-Ani_obj6F
00019B12 0000                       		dc.w byte_164A2-Ani_obj6F
00019B14 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00019B21 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00019B28 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00019B2C 00                         		even
00019B2C 00                         		even
00019B2C                            
00019B2C 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00019B32 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00019B38 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00019B4C 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00019B60 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00019B74 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00019B88 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00019B9C 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00019BB0                            ; ===========================================================================
00019BB0                            ; ---------------------------------------------------------------------------
00019BB0                            ; Object 70 - large girder block (SBZ)
00019BB0                            ; ---------------------------------------------------------------------------
00019BB0                            
00019BB0                            Obj70:					; XREF: Obj_Index
00019BB0 7000                       		moveq	#0,d0
00019BB2 1028 0024                  		move.b	$24(a0),d0
00019BB6 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00019BBA 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00019BBE                            ; ===========================================================================
00019BBE 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00019BC0 0000                       		dc.w Obj70_Action-Obj70_Index
00019BC2                            ; ===========================================================================
00019BC2                            
00019BC2                            Obj70_Main:				; XREF: Obj70_Index
00019BC2 5428 0024                  		addq.b	#2,$24(a0)
00019BC6 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00019BCE 317C 42F0 0002             		move.w	#$42F0,2(a0)
00019BD4 0028 0004 0001             		ori.b	#4,1(a0)
00019BDA 117C 0004 0018             		move.b	#4,$18(a0)
00019BE0 117C 0060 0019             		move.b	#$60,$19(a0)
00019BE6 117C 0018 0016             		move.b	#$18,$16(a0)
00019BEC 3168 0008 0032             		move.w	8(a0),$32(a0)
00019BF2 3168 000C 0030             		move.w	$C(a0),$30(a0)
00019BF8 6100 0000                  		bsr.w	Obj70_Move2
00019BFC                            
00019BFC                            Obj70_Action:				; XREF: Obj70_Index
00019BFC 3F28 0008                  		move.w	8(a0),-(sp)
00019C00 4A68 003A                  		tst.w	$3A(a0)
00019C04 6700                       		beq.s	Obj70_Move
00019C06 5368 003A                  		subq.w	#1,$3A(a0)
00019C0A 6600                       		bne.s	Obj70_Solid
00019C0C                            
00019C0C                            Obj70_Move:
00019C0C 4EB9 0001 0434             		jsr	SpeedToPos
00019C12 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00019C16 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00019C18 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00019C1C                            
00019C1C                            Obj70_Solid:
00019C1C 381F                       		move.w	(sp)+,d4
00019C1E 4A28 0001                  		tst.b	1(a0)
00019C22 6A00                       		bpl.s	Obj70_ChkDel
00019C24 7200                       		moveq	#0,d1
00019C26 1228 0019                  		move.b	$19(a0),d1
00019C2A 0641 000B                  		addi.w	#$B,d1
00019C2E 7400                       		moveq	#0,d2
00019C30 1428 0016                  		move.b	$16(a0),d2
00019C34 3602                       		move.w	d2,d3
00019C36 5243                       		addq.w	#1,d3
00019C38 6100 8E16                  		bsr.w	SolidObject
00019C3C                            
00019C3C                            Obj70_ChkDel:
00019C3C 3028 0032                  		move.w	$32(a0),d0
00019C40 0240 FF80                  		andi.w	#$FF80,d0
00019C44 3238 F700                  		move.w	($FFFFF700).w,d1
00019C48 0441 0080                  		subi.w	#$80,d1
00019C4C 0241 FF80                  		andi.w	#$FF80,d1
00019C50 9041                       		sub.w	d1,d0
00019C52 0C40 0280                  		cmpi.w	#$280,d0
00019C56 6200                       		bhi.s	Obj70_Delete
00019C58 4EF9 0001 045A             		jmp	DisplaySprite
00019C5E                            ; ===========================================================================
00019C5E                            
00019C5E                            Obj70_Delete:
00019C5E 4EF9 0001 0496             		jmp	DeleteObject
00019C64                            ; ===========================================================================
00019C64                            
00019C64                            Obj70_Move2:				; XREF: Obj70_Main
00019C64 1028 0038                  		move.b	$38(a0),d0
00019C68 0240 0018                  		andi.w	#$18,d0
00019C6C 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00019C72 43F1 0000                  		lea	(a1,d0.w),a1
00019C76 3159 0010                  		move.w	(a1)+,$10(a0)
00019C7A 3159 0012                  		move.w	(a1)+,$12(a0)
00019C7E 3159 0034                  		move.w	(a1)+,$34(a0)
00019C82 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00019C86 317C 0007 003A             		move.w	#7,$3A(a0)
00019C8C 4E75                       		rts	
00019C8E                            ; ===========================================================================
00019C8E 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00019C96 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00019C9E FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00019CA6 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00019CAE                            ; ---------------------------------------------------------------------------
00019CAE                            ; Sprite mappings - large girder block (SBZ)
00019CAE                            ; ---------------------------------------------------------------------------
00019CAE                            Map_obj70:
00019CAE                            	include "_maps\obj70.asm"
00019CAE                            ; ---------------------------------------------------------------------------
00019CAE                            ; Sprite mappings - large girder block (SBZ)
00019CAE                            ; ---------------------------------------------------------------------------
00019CAE 0000                       		dc.w byte_1662A-Map_obj70
00019CB0 0C                         byte_1662A:	dc.b $C
00019CB1 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00019CB6 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00019CBB E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00019CC0 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00019CC5 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00019CCA 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00019CCF E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00019CD4 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00019CD9 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00019CDE 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00019CE3 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00019CE8 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00019CEE 00                         		even
00019CEE 00                         		even
00019CEE                            
00019CEE                            ; ===========================================================================
00019CEE                            ; ---------------------------------------------------------------------------
00019CEE                            ; Object 72 - teleporter (SBZ)
00019CEE                            ; ---------------------------------------------------------------------------
00019CEE                            
00019CEE                            Obj72:					; XREF: Obj_Index
00019CEE 7000                       		moveq	#0,d0
00019CF0 1028 0024                  		move.b	$24(a0),d0
00019CF4 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00019CF8 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00019CFC 3028 0008                  		move.w	8(a0),d0
00019D00 0240 FF80                  		andi.w	#$FF80,d0
00019D04 3238 F700                  		move.w	($FFFFF700).w,d1
00019D08 0441 0080                  		subi.w	#$80,d1
00019D0C 0241 FF80                  		andi.w	#$FF80,d1
00019D10 9041                       		sub.w	d1,d0
00019D12 0C40 0280                  		cmpi.w	#$280,d0
00019D16 6200                       		bhi.s	Obj72_Delete
00019D18 4E75                       		rts	
00019D1A                            ; ===========================================================================
00019D1A                            
00019D1A                            Obj72_Delete:
00019D1A 4EF9 0001 0496             		jmp	DeleteObject
00019D20                            ; ===========================================================================
00019D20 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00019D22 0000                       		dc.w loc_166C8-Obj72_Index
00019D24 0000                       		dc.w loc_1675E-Obj72_Index
00019D26 0000                       		dc.w loc_16798-Obj72_Index
00019D28                            ; ===========================================================================
00019D28                            
00019D28                            Obj72_Main:				; XREF: Obj72_Index
00019D28 5428 0024                  		addq.b	#2,$24(a0)
00019D2C 1028 0028                  		move.b	$28(a0),d0
00019D30 D040                       		add.w	d0,d0
00019D32 0240 001E                  		andi.w	#$1E,d0
00019D36 45FA 0000                  		lea	Obj72_Data(pc),a2
00019D3A D4F2 0000                  		adda.w	(a2,d0.w),a2
00019D3E 315A 003A                  		move.w	(a2)+,$3A(a0)
00019D42 214A 003C                  		move.l	a2,$3C(a0)
00019D46 315A 0036                  		move.w	(a2)+,$36(a0)
00019D4A 315A 0038                  		move.w	(a2)+,$38(a0)
00019D4E                            
00019D4E                            loc_166C8:				; XREF: Obj72_Index
00019D4E 43F8 D000                  		lea	($FFFFD000).w,a1
00019D52 3029 0008                  		move.w	8(a1),d0
00019D56 9068 0008                  		sub.w	8(a0),d0
00019D5A 0828 0000 0022             		btst	#0,$22(a0)
00019D60 6700                       		beq.s	loc_166E0
00019D62 0640 000F                  		addi.w	#$F,d0
00019D66                            
00019D66                            loc_166E0:
00019D66 0C40 0010                  		cmpi.w	#$10,d0
00019D6A 6400                       		bcc.s	locret_1675C
00019D6C 3229 000C                  		move.w	$C(a1),d1
00019D70 9268 000C                  		sub.w	$C(a0),d1
00019D74 0641 0020                  		addi.w	#$20,d1
00019D78 0C41 0040                  		cmpi.w	#$40,d1
00019D7C 6400                       		bcc.s	locret_1675C
00019D7E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00019D82 6600                       		bne.s	locret_1675C
00019D84 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00019D8A 6600                       		bne.s	loc_1670E
00019D8C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00019D92 6500                       		bcs.s	locret_1675C
00019D94                            
00019D94                            loc_1670E:
00019D94 5428 0024                  		addq.b	#2,$24(a0)
00019D98 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00019D9E 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00019DA4 337C 0800 0014             		move.w	#$800,$14(a1)
00019DAA 337C 0000 0010             		move.w	#0,$10(a1)
00019DB0 337C 0000 0012             		move.w	#0,$12(a1)
00019DB6 08A8 0005 0022             		bclr	#5,$22(a0)
00019DBC 08A9 0005 0022             		bclr	#5,$22(a1)
00019DC2 08E9 0001 0022             		bset	#1,$22(a1)
00019DC8 3368 0008 0008             		move.w	8(a0),8(a1)
00019DCE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019DD4 4228 0032                  		clr.b	$32(a0)
00019DD8 303C 00BE                  		move.w	#$BE,d0
00019DDC 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00019DE2                            
00019DE2                            locret_1675C:
00019DE2 4E75                       		rts	
00019DE4                            ; ===========================================================================
00019DE4                            
00019DE4                            loc_1675E:				; XREF: Obj72_Index
00019DE4 43F8 D000                  		lea	($FFFFD000).w,a1
00019DE8 1028 0032                  		move.b	$32(a0),d0
00019DEC 5428 0032                  		addq.b	#2,$32(a0)
00019DF0 4EB9 0000 2CC8             		jsr	(CalcSine).l
00019DF6 EA40                       		asr.w	#5,d0
00019DF8 3428 000C                  		move.w	$C(a0),d2
00019DFC 9440                       		sub.w	d0,d2
00019DFE 3342 000C                  		move.w	d2,$C(a1)
00019E02 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00019E08 6600                       		bne.s	locret_16796
00019E0A 6100 0000                  		bsr.w	sub_1681C
00019E0E 5428 0024                  		addq.b	#2,$24(a0)
00019E12 303C 00BC                  		move.w	#$BC,d0
00019E16 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play teleport sound
00019E1C                            
00019E1C                            locret_16796:
00019E1C 4E75                       		rts	
00019E1E                            ; ===========================================================================
00019E1E                            
00019E1E                            loc_16798:				; XREF: Obj72_Index
00019E1E 588F                       		addq.l	#4,sp
00019E20 43F8 D000                  		lea	($FFFFD000).w,a1
00019E24 5328 002E                  		subq.b	#1,$2E(a0)
00019E28 6A00                       		bpl.s	loc_167DA
00019E2A 3368 0036 0008             		move.w	$36(a0),8(a1)
00019E30 3368 0038 000C             		move.w	$38(a0),$C(a1)
00019E36 7200                       		moveq	#0,d1
00019E38 1228 003A                  		move.b	$3A(a0),d1
00019E3C 5801                       		addq.b	#4,d1
00019E3E B228 003B                  		cmp.b	$3B(a0),d1
00019E42 6500                       		bcs.s	loc_167C2
00019E44 7200                       		moveq	#0,d1
00019E46 6000                       		bra.s	loc_16800
00019E48                            ; ===========================================================================
00019E48                            
00019E48                            loc_167C2:
00019E48 1141 003A                  		move.b	d1,$3A(a0)
00019E4C 2468 003C                  		movea.l	$3C(a0),a2
00019E50 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00019E56 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00019E5C 6000 0000                  		bra.w	sub_1681C
00019E60                            ; ===========================================================================
00019E60                            
00019E60                            loc_167DA:
00019E60 2429 0008                  		move.l	8(a1),d2
00019E64 2629 000C                  		move.l	$C(a1),d3
00019E68 3029 0010                  		move.w	$10(a1),d0
00019E6C 48C0                       		ext.l	d0
00019E6E E180                       		asl.l	#8,d0
00019E70 D480                       		add.l	d0,d2
00019E72 3029 0012                  		move.w	$12(a1),d0
00019E76 48C0                       		ext.l	d0
00019E78 E180                       		asl.l	#8,d0
00019E7A D680                       		add.l	d0,d3
00019E7C 2342 0008                  		move.l	d2,8(a1)
00019E80 2343 000C                  		move.l	d3,$C(a1)
00019E84 4E75                       		rts	
00019E86                            ; ===========================================================================
00019E86                            
00019E86                            loc_16800:
00019E86 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00019E8C 4228 0024                  		clr.b	$24(a0)
00019E90 4238 F7C8                  		clr.b	($FFFFF7C8).w
00019E94 337C 0000 0010             		move.w	#0,$10(a1)
00019E9A 337C 0200 0012             		move.w	#$200,$12(a1)
00019EA0 4E75                       		rts	
00019EA2                            
00019EA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019EA2                            
00019EA2                            
00019EA2                            sub_1681C:
00019EA2 7000                       		moveq	#0,d0
00019EA4 343C 1000                  		move.w	#$1000,d2
00019EA8 3028 0036                  		move.w	$36(a0),d0
00019EAC 9069 0008                  		sub.w	8(a1),d0
00019EB0 6C00                       		bge.s	loc_16830
00019EB2 4440                       		neg.w	d0
00019EB4 4442                       		neg.w	d2
00019EB6                            
00019EB6                            loc_16830:
00019EB6 7200                       		moveq	#0,d1
00019EB8 363C 1000                  		move.w	#$1000,d3
00019EBC 3228 0038                  		move.w	$38(a0),d1
00019EC0 9269 000C                  		sub.w	$C(a1),d1
00019EC4 6C00                       		bge.s	loc_16844
00019EC6 4441                       		neg.w	d1
00019EC8 4443                       		neg.w	d3
00019ECA                            
00019ECA                            loc_16844:
00019ECA B240                       		cmp.w	d0,d1
00019ECC 6500                       		bcs.s	loc_1687A
00019ECE 7200                       		moveq	#0,d1
00019ED0 3228 0038                  		move.w	$38(a0),d1
00019ED4 9269 000C                  		sub.w	$C(a1),d1
00019ED8 4841                       		swap	d1
00019EDA 83C3                       		divs.w	d3,d1
00019EDC 7000                       		moveq	#0,d0
00019EDE 3028 0036                  		move.w	$36(a0),d0
00019EE2 9069 0008                  		sub.w	8(a1),d0
00019EE6 6700                       		beq.s	loc_16866
00019EE8 4840                       		swap	d0
00019EEA 81C1                       		divs.w	d1,d0
00019EEC                            
00019EEC                            loc_16866:
00019EEC 3340 0010                  		move.w	d0,$10(a1)
00019EF0 3343 0012                  		move.w	d3,$12(a1)
00019EF4 4A41                       		tst.w	d1
00019EF6 6A00                       		bpl.s	loc_16874
00019EF8 4441                       		neg.w	d1
00019EFA                            
00019EFA                            loc_16874:
00019EFA 3141 002E                  		move.w	d1,$2E(a0)
00019EFE 4E75                       		rts	
00019F00                            ; ===========================================================================
00019F00                            
00019F00                            loc_1687A:
00019F00 7000                       		moveq	#0,d0
00019F02 3028 0036                  		move.w	$36(a0),d0
00019F06 9069 0008                  		sub.w	8(a1),d0
00019F0A 4840                       		swap	d0
00019F0C 81C2                       		divs.w	d2,d0
00019F0E 7200                       		moveq	#0,d1
00019F10 3228 0038                  		move.w	$38(a0),d1
00019F14 9269 000C                  		sub.w	$C(a1),d1
00019F18 6700                       		beq.s	loc_16898
00019F1A 4841                       		swap	d1
00019F1C 83C0                       		divs.w	d0,d1
00019F1E                            
00019F1E                            loc_16898:
00019F1E 3341 0012                  		move.w	d1,$12(a1)
00019F22 3342 0010                  		move.w	d2,$10(a1)
00019F26 4A40                       		tst.w	d0
00019F28 6A00                       		bpl.s	loc_168A6
00019F2A 4440                       		neg.w	d0
00019F2C                            
00019F2C                            loc_168A6:
00019F2C 3140 002E                  		move.w	d0,$2E(a0)
00019F30 4E75                       		rts	
00019F32                            ; End of function sub_1681C
00019F32                            
00019F32                            ; ===========================================================================
00019F32 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00019F38 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00019F3E 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00019F42 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00019F48 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00019F4E 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00019F54 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00019F5A 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00019F60 0884 0298 0894             		dc.w $884, $298, $894
00019F66 0270 0894 0190             		dc.w $270, $894, $190
00019F6C 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00019F72 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00019F78 1184 0498 1158             		dc.w $1184, $498, $1158
00019F7E 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00019F84 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00019F8A 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00019F90 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00019F96 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00019F9C 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00019FA2 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00019FA8 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00019FAE FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00019FB4 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00019FBA                            ; ===========================================================================
00019FBA                            ; ---------------------------------------------------------------------------
00019FBA                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00019FBA                            ; ---------------------------------------------------------------------------
00019FBA                            
00019FBA                            Obj78:					; XREF: Obj_Index
00019FBA 7000                       		moveq	#0,d0
00019FBC 1028 0024                  		move.b	$24(a0),d0
00019FC0 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00019FC4 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00019FC8                            ; ===========================================================================
00019FC8 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00019FCA 0000                       		dc.w Obj78_Action-Obj78_Index
00019FCC 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00019FCE 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00019FD0 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00019FD2 0000                       		dc.w Obj78_Delete-Obj78_Index
00019FD4 0000                       		dc.w loc_16CC0-Obj78_Index
00019FD6                            ; ===========================================================================
00019FD6                            
00019FD6                            locret_16950:
00019FD6 4E75                       		rts	
00019FD8                            ; ===========================================================================
00019FD8                            
00019FD8                            Obj78_Main:				; XREF: Obj78_Index
00019FD8 117C 0007 0016             		move.b	#7,$16(a0)
00019FDE 117C 0008 0017             		move.b	#8,$17(a0)
00019FE4 4EB9 0001 0408             		jsr	ObjectFall
00019FEA 4EBA E4BC                  		jsr	ObjHitFloor
00019FEE 4A41                       		tst.w	d1
00019FF0 6AE4                       		bpl.s	locret_16950
00019FF2 D368 000C                  		add.w	d1,$C(a0)
00019FF6 4268 0012                  		clr.w	$12(a0)
00019FFA 5428 0024                  		addq.b	#2,$24(a0)
00019FFE 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
0001A006 317C 22B0 0002             		move.w	#$22B0,2(a0)
0001A00C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
0001A012 6700                       		beq.s	loc_16996
0001A014 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
0001A01A                            
0001A01A                            loc_16996:
0001A01A 0228 0003 0001             		andi.b	#3,1(a0)
0001A020 0028 0004 0001             		ori.b	#4,1(a0)
0001A026 1168 0001 0022             		move.b	1(a0),$22(a0)
0001A02C 117C 0004 0018             		move.b	#4,$18(a0)
0001A032 117C 0008 0019             		move.b	#8,$19(a0)
0001A038 117C 000B 0020             		move.b	#$B,$20(a0)
0001A03E 3428 0008                  		move.w	8(a0),d2
0001A042 7A0C                       		moveq	#$C,d5
0001A044 0828 0000 0022             		btst	#0,$22(a0)
0001A04A 6700                       		beq.s	loc_169CA
0001A04C 4445                       		neg.w	d5
0001A04E                            
0001A04E                            loc_169CA:
0001A04E 1C3C 0004                  		move.b	#4,d6
0001A052 7600                       		moveq	#0,d3
0001A054 7804                       		moveq	#4,d4
0001A056 2448                       		movea.l	a0,a2
0001A058 7202                       		moveq	#2,d1
0001A05A                            
0001A05A                            Obj78_LoadBody:
0001A05A 4EB9 0001 08F6             		jsr	SingleObjLoad2
0001A060 6600                       		bne.s	Obj78_QuitLoad
0001A062 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
0001A066 1346 0024                  		move.b	d6,$24(a1)
0001A06A 5406                       		addq.b	#2,d6
0001A06C 2368 0004 0004             		move.l	4(a0),4(a1)
0001A072 3368 0002 0002             		move.w	2(a0),2(a1)
0001A078 137C 0005 0018             		move.b	#5,$18(a1)
0001A07E 137C 0008 0019             		move.b	#8,$19(a1)
0001A084 137C 00CB 0020             		move.b	#$CB,$20(a1)
0001A08A D445                       		add.w	d5,d2
0001A08C 3342 0008                  		move.w	d2,8(a1)
0001A090 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A096 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001A09C 1368 0022 0001             		move.b	$22(a0),1(a1)
0001A0A2 137C 0008 001A             		move.b	#8,$1A(a1)
0001A0A8 234A 003C                  		move.l	a2,$3C(a1)
0001A0AC 1344 003C                  		move.b	d4,$3C(a1)
0001A0B0 5804                       		addq.b	#4,d4
0001A0B2 2449                       		movea.l	a1,a2
0001A0B4                            
0001A0B4                            Obj78_QuitLoad:
0001A0B4 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
0001A0B8                            
0001A0B8 117C 0007 002A             		move.b	#7,$2A(a0)
0001A0BE 4228 003C                  		clr.b	$3C(a0)
0001A0C2                            
0001A0C2                            Obj78_Action:				; XREF: Obj78_Index
0001A0C2 4A28 0022                  		tst.b	$22(a0)
0001A0C6 6B00 0000                  		bmi.w	loc_16C96
0001A0CA 7000                       		moveq	#0,d0
0001A0CC 1028 0025                  		move.b	$25(a0),d0
0001A0D0 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
0001A0D4 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
0001A0D8 1228 002B                  		move.b	$2B(a0),d1
0001A0DC 6A00                       		bpl.s	Obj78_Display
0001A0DE 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001A0E4 1028 0026                  		move.b	$26(a0),d0
0001A0E8 0240 007F                  		andi.w	#$7F,d0
0001A0EC 5828 0026                  		addq.b	#4,$26(a0)
0001A0F0 1031 0000                  		move.b	(a1,d0.w),d0
0001A0F4 6A00                       		bpl.s	Obj78_AniHead
0001A0F6 08A8 0007 002B             		bclr	#7,$2B(a0)
0001A0FC 6000                       		bra.s	Obj78_Display
0001A0FE                            ; ===========================================================================
0001A0FE                            
0001A0FE                            Obj78_AniHead:
0001A0FE 0201 0010                  		andi.b	#$10,d1
0001A102 D001                       		add.b	d1,d0
0001A104 1140 001A                  		move.b	d0,$1A(a0)
0001A108                            
0001A108                            Obj78_Display:
0001A108 3028 0008                  		move.w	8(a0),d0
0001A10C 0240 FF80                  		andi.w	#$FF80,d0
0001A110 3238 F700                  		move.w	($FFFFF700).w,d1
0001A114 0441 0080                  		subi.w	#$80,d1
0001A118 0241 FF80                  		andi.w	#$FF80,d1
0001A11C 9041                       		sub.w	d1,d0
0001A11E 0C40 0280                  		cmpi.w	#$280,d0
0001A122 6200 0000                  		bhi.w	Obj78_ChkGone
0001A126 4EF9 0001 045A             		jmp	DisplaySprite
0001A12C                            ; ===========================================================================
0001A12C                            
0001A12C                            Obj78_ChkGone:
0001A12C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001A130 7000                       		moveq	#0,d0
0001A132 1028 0023                  		move.b	$23(a0),d0
0001A136 6700                       		beq.s	loc_16ABC
0001A138 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001A13E                            
0001A13E                            loc_16ABC:
0001A13E 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
0001A144 4E75                       		rts	
0001A146                            ; ===========================================================================
0001A146                            
0001A146                            Obj78_Delete:				; XREF: Obj78_Index
0001A146 4EF9 0001 0496             		jmp	DeleteObject
0001A14C                            ; ===========================================================================
0001A14C 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
0001A14E 0000                       		dc.w loc_16B02-Obj78_Index2
0001A150                            ; ===========================================================================
0001A150                            
0001A150                            Obj78_Move:				; XREF: Obj78_Index2
0001A150 5328 002A                  		subq.b	#1,$2A(a0)
0001A154 6B00                       		bmi.s	Obj78_Move2
0001A156 4E75                       		rts	
0001A158                            ; ===========================================================================
0001A158                            
0001A158                            Obj78_Move2:
0001A158 5428 0025                  		addq.b	#2,$25(a0)
0001A15C 117C 0010 002A             		move.b	#$10,$2A(a0)
0001A162 317C FF10 0010             		move.w	#-$F0,$10(a0)
0001A168 317C 0040 0014             		move.w	#$40,$14(a0) ;set speed
0001A16E 0868 0004 002B             		bchg	#4,$2B(a0)
0001A174 6600                       		bne.s	loc_16AFC
0001A176 4268 0010                  		clr.w	$10(a0)
0001A17A 4468 0014                  		neg.w	$14(a0)
0001A17E                            
0001A17E                            loc_16AFC:
0001A17E 08E8 0007 002B             		bset	#7,$2B(a0)
0001A184                            
0001A184                            loc_16B02:				; XREF: Obj78_Index2
0001A184 5328 002A                  		subq.b	#1,$2A(a0)
0001A188 6B00                       		bmi.s	loc_16B5E
0001A18A 2F28 0008                  		move.l	8(a0),-(sp)
0001A18E 2428 0008                  		move.l	8(a0),d2
0001A192 3028 0010                  		move.w	$10(a0),d0
0001A196 0828 0000 0022             		btst	#0,$22(a0)
0001A19C 6700                       		beq.s	loc_16B1E
0001A19E 4440                       		neg.w	d0
0001A1A0                            
0001A1A0                            loc_16B1E:
0001A1A0 48C0                       		ext.l	d0
0001A1A2 E180                       		asl.l	#8,d0
0001A1A4 D480                       		add.l	d0,d2
0001A1A6 2142 0008                  		move.l	d2,8(a0)
0001A1AA 4EBA E2FC                  		jsr	ObjHitFloor
0001A1AE 241F                       		move.l	(sp)+,d2
0001A1B0 0C41 FFF8                  		cmpi.w	#-8,d1
0001A1B4 6D00                       		blt.s	loc_16B70
0001A1B6 0C41 000C                  		cmpi.w	#$C,d1
0001A1BA 6C00                       		bge.s	loc_16B70
0001A1BC D368 000C                  		add.w	d1,$C(a0)
0001A1C0 4842                       		swap	d2
0001A1C2 B468 0008                  		cmp.w	8(a0),d2
0001A1C6 6700                       		beq.s	locret_16B5C
0001A1C8 7000                       		moveq	#0,d0
0001A1CA 1028 003C                  		move.b	$3C(a0),d0
0001A1CE 5228 003C                  		addq.b	#1,$3C(a0)
0001A1D2 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001A1D8 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001A1DC                            
0001A1DC                            locret_16B5C:
0001A1DC 4E75                       		rts	
0001A1DE                            ; ===========================================================================
0001A1DE                            
0001A1DE                            loc_16B5E:
0001A1DE 5528 0025                  		subq.b	#2,$25(a0)
0001A1E2 117C 0007 002A             		move.b	#7,$2A(a0)
0001A1E8 317C 0000 0010             		move.w	#0,$10(a0)
0001A1EE 4E75                       		rts	
0001A1F0                            ; ===========================================================================
0001A1F0                            
0001A1F0                            loc_16B70:
0001A1F0 2142 0008                  		move.l	d2,8(a0)
0001A1F4 0868 0000 0022             		bchg	#0,$22(a0)
0001A1FA 1168 0022 0001             		move.b	$22(a0),1(a0)
0001A200 7000                       		moveq	#0,d0
0001A202 1028 003C                  		move.b	$3C(a0),d0
0001A206 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
0001A20C 5228 003C                  		addq.b	#1,$3C(a0)
0001A210 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001A216 4E75                       		rts	
0001A218                            ; ===========================================================================
0001A218                            
0001A218                            Obj78_BodySeg2:				; XREF: Obj78_Index
0001A218 2268 003C                  		movea.l	$3C(a0),a1
0001A21C 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001A222 6A00                       		bpl.s	Obj78_BodySeg1
0001A224 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001A22A 1028 0026                  		move.b	$26(a0),d0 ;load angle to d0
0001A22E 0240 007F                  		andi.w	#$7F,d0
0001A232 5828 0026                  		addq.b	#4,$26(a0)
0001A236 4A31 0004                  		tst.b	4(a1,d0.w)
0001A23A 6A00                       		bpl.s	Obj78_AniBody
0001A23C 5828 0026                  		addq.b	#4,$26(a0)
0001A240                            
0001A240                            Obj78_AniBody:
0001A240 1031 0000                  		move.b	(a1,d0.w),d0
0001A244 5000                       		addq.b	#8,d0
0001A246 1140 001A                  		move.b	d0,$1A(a0)
0001A24A                            
0001A24A                            Obj78_BodySeg1:				; XREF: Obj78_Index
0001A24A 2268 003C                  		movea.l	$3C(a0),a1
0001A24E 4A28 0022                  		tst.b	$22(a0)
0001A252 6B00 0000                  		bmi.w	loc_16C90
0001A256 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001A25C 1169 0025 0025             		move.b	$25(a1),$25(a0)
0001A262 6700 0000                  		beq.w	loc_16C64
0001A266 3169 0014 0014             		move.w	$14(a1),$14(a0)
0001A26C 3029 0010                  		move.w	$10(a1),d0
0001A270 D069 0014                  		add.w	$14(a1),d0
0001A274 3140 0010                  		move.w	d0,$10(a0)
0001A278 2428 0008                  		move.l	8(a0),d2
0001A27C 2602                       		move.l	d2,d3
0001A27E 3028 0010                  		move.w	$10(a0),d0
0001A282 0828 0000 0022             		btst	#0,$22(a0)
0001A288 6700                       		beq.s	loc_16C0C
0001A28A 4440                       		neg.w	d0
0001A28C                            
0001A28C                            loc_16C0C:
0001A28C 48C0                       		ext.l	d0
0001A28E E180                       		asl.l	#8,d0
0001A290 D480                       		add.l	d0,d2
0001A292 2142 0008                  		move.l	d2,8(a0)
0001A296 4843                       		swap	d3
0001A298 B668 0008                  		cmp.w	8(a0),d3
0001A29C 6700                       		beq.s	loc_16C64
0001A29E 7000                       		moveq	#0,d0
0001A2A0 1028 003C                  		move.b	$3C(a0),d0
0001A2A4 1231 002C                  		move.b	$2C(a1,d0.w),d1
0001A2A8 0C01 0080                  		cmpi.b	#-$80,d1
0001A2AC 6600                       		bne.s	loc_16C50
0001A2AE 4843                       		swap	d3
0001A2B0 2143 0008                  		move.l	d3,8(a0)
0001A2B4 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001A2B8 0868 0000 0022             		bchg	#0,$22(a0)
0001A2BE 1168 0022 0001             		move.b	$22(a0),1(a0)
0001A2C4 5228 003C                  		addq.b	#1,$3C(a0)
0001A2C8 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001A2CE 6000                       		bra.s	loc_16C64
0001A2D0                            ; ===========================================================================
0001A2D0                            
0001A2D0                            loc_16C50:
0001A2D0 4881                       		ext.w	d1
0001A2D2 D368 000C                  		add.w	d1,$C(a0)
0001A2D6 5228 003C                  		addq.b	#1,$3C(a0)
0001A2DA 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001A2E0 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001A2E4                            
0001A2E4                            loc_16C64:
0001A2E4 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
0001A2EA 6700                       		beq.s	loc_16C90
0001A2EC 0C11 0027                  		cmpi.b	#$27,0(a1)
0001A2F0 6700                       		beq.s	loc_16C7C
0001A2F2 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
0001A2F8 6600                       		bne.s	loc_16C82
0001A2FA                            
0001A2FA                            loc_16C7C:
0001A2FA 117C 000A 0024             		move.b	#$A,$24(a0)
0001A300                            
0001A300                            loc_16C82:
0001A300 4EF9 0001 045A             		jmp	DisplaySprite
0001A306                            
0001A306                            ; ===========================================================================
0001A306 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
0001A30E                            ; ===========================================================================
0001A30E                            
0001A30E                            loc_16C90:
0001A30E 08E9 0007 0022             		bset	#7,$22(a1)
0001A314                            
0001A314                            loc_16C96:
0001A314 7000                       		moveq	#0,d0
0001A316 1028 0024                  		move.b	$24(a0),d0
0001A31A 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
0001A31E 0828 0000 0022             		btst	#0,$22(a0)
0001A324 6700                       		beq.s	loc_16CAA
0001A326 4440                       		neg.w	d0
0001A328                            
0001A328                            loc_16CAA:
0001A328 3140 0010                  		move.w	d0,$10(a0)
0001A32C 317C FC00 0012             		move.w	#-$400,$12(a0)
0001A332 117C 000C 0024             		move.b	#$C,$24(a0)
0001A338 0228 00F8 001A             		andi.b	#-8,$1A(a0)
0001A33E                            
0001A33E                            loc_16CC0:				; XREF: Obj78_Index
0001A33E 4EB9 0001 0408             		jsr	ObjectFall
0001A344 4A68 0012                  		tst.w	$12(a0)
0001A348 6B00                       		bmi.s	loc_16CE0
0001A34A 4EBA E15C                  		jsr	ObjHitFloor
0001A34E 4A41                       		tst.w	d1
0001A350 6A00                       		bpl.s	loc_16CE0
0001A352 D368 000C                  		add.w	d1,$C(a0)
0001A356 317C FC00 0012             		move.w	#-$400,$12(a0)
0001A35C                            
0001A35C                            loc_16CE0:
0001A35C 4A28 0001                  		tst.b	1(a0)
0001A360 6A00 FDCA                  		bpl.w	Obj78_ChkGone
0001A364 4EF9 0001 045A             		jmp	DisplaySprite
0001A36A                            ; ===========================================================================
0001A36A                            Ani_obj78:
0001A36A                            	include "_anim\obj78.asm"
0001A36A                            ; ---------------------------------------------------------------------------
0001A36A                            ; Animation script - Caterkiller enemy (uses non-standard format)
0001A36A                            ; ---------------------------------------------------------------------------
0001A36A 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
0001A37A 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
0001A38A 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
0001A39A 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
0001A3AA 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0001A3BA 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0001A3CA 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0001A3DA 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
0001A3EA                            	even
0001A3EA                            	even
0001A3EA                            
0001A3EA                            ; ---------------------------------------------------------------------------
0001A3EA                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001A3EA                            ; ---------------------------------------------------------------------------
0001A3EA                            Map_obj78:
0001A3EA                            	include "_maps\obj78.asm"
0001A3EA                            ; --------------------------------------------------------------------------------
0001A3EA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001A3EA                            ; --------------------------------------------------------------------------------
0001A3EA                            
0001A3EA                            SME_mLFTs:	
0001A3EA 0000 0000                  		dc.w SME_mLFTs_30-SME_mLFTs, SME_mLFTs_36-SME_mLFTs	
0001A3EE 0000 0000                  		dc.w SME_mLFTs_3C-SME_mLFTs, SME_mLFTs_42-SME_mLFTs	
0001A3F2 0000 0000                  		dc.w SME_mLFTs_48-SME_mLFTs, SME_mLFTs_4E-SME_mLFTs	
0001A3F6 0000 0000                  		dc.w SME_mLFTs_54-SME_mLFTs, SME_mLFTs_5A-SME_mLFTs	
0001A3FA 0000 0000                  		dc.w SME_mLFTs_60-SME_mLFTs, SME_mLFTs_66-SME_mLFTs	
0001A3FE 0000 0000                  		dc.w SME_mLFTs_6C-SME_mLFTs, SME_mLFTs_72-SME_mLFTs	
0001A402 0000 0000                  		dc.w SME_mLFTs_78-SME_mLFTs, SME_mLFTs_7E-SME_mLFTs	
0001A406 0000 0000                  		dc.w SME_mLFTs_84-SME_mLFTs, SME_mLFTs_8A-SME_mLFTs	
0001A40A 0000 0000                  		dc.w SME_mLFTs_90-SME_mLFTs, SME_mLFTs_96-SME_mLFTs	
0001A40E 0000 0000                  		dc.w SME_mLFTs_9C-SME_mLFTs, SME_mLFTs_A2-SME_mLFTs	
0001A412 0000 0000                  		dc.w SME_mLFTs_A8-SME_mLFTs, SME_mLFTs_AE-SME_mLFTs	
0001A416 0000 0000                  		dc.w SME_mLFTs_B4-SME_mLFTs, SME_mLFTs_BA-SME_mLFTs	
0001A41A 01                         SME_mLFTs_30:	dc.b 1	
0001A41B F206 0000 F8               		dc.b $F2, 6, 0, 0, $F8	
0001A420 01                         SME_mLFTs_36:	dc.b 1	
0001A421 F206 0000 F8               		dc.b $F2, 6, 0, 0, $F8	
0001A426 01                         SME_mLFTs_3C:	dc.b 1	
0001A427 F206 0000 F8               		dc.b $F2, 6, 0, 0, $F8	
0001A42C 01                         SME_mLFTs_42:	dc.b 1	
0001A42D F206 0000 F8               		dc.b $F2, 6, 0, 0, $F8	
0001A432 01                         SME_mLFTs_48:	dc.b 1	
0001A433 F206 0000 F8               		dc.b $F2, 6, 0, 0, $F8	
0001A438 01                         SME_mLFTs_4E:	dc.b 1	
0001A439 F206 0000 F8               		dc.b $F2, 6, 0, 0, $F8	
0001A43E 01                         SME_mLFTs_54:	dc.b 1	
0001A43F F206 0000 F8               		dc.b $F2, 6, 0, 0, $F8	
0001A444 01                         SME_mLFTs_5A:	dc.b 1	
0001A445 F206 0000 F8               		dc.b $F2, 6, 0, 0, $F8	
0001A44A 01                         SME_mLFTs_60:	dc.b 1	
0001A44B F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
0001A450 01                         SME_mLFTs_66:	dc.b 1	
0001A451 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
0001A456 01                         SME_mLFTs_6C:	dc.b 1	
0001A457 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
0001A45C 01                         SME_mLFTs_72:	dc.b 1	
0001A45D F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
0001A462 01                         SME_mLFTs_78:	dc.b 1	
0001A463 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
0001A468 01                         SME_mLFTs_7E:	dc.b 1	
0001A469 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
0001A46E 01                         SME_mLFTs_84:	dc.b 1	
0001A46F F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
0001A474 01                         SME_mLFTs_8A:	dc.b 1	
0001A475 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
0001A47A 01                         SME_mLFTs_90:	dc.b 1	
0001A47B F206 0006 F8               		dc.b $F2, 6, 0, 6, $F8	
0001A480 01                         SME_mLFTs_96:	dc.b 1	
0001A481 F206 0006 F8               		dc.b $F2, 6, 0, 6, $F8	
0001A486 01                         SME_mLFTs_9C:	dc.b 1	
0001A487 F206 0006 F8               		dc.b $F2, 6, 0, 6, $F8	
0001A48C 01                         SME_mLFTs_A2:	dc.b 1	
0001A48D F206 0006 F8               		dc.b $F2, 6, 0, 6, $F8	
0001A492 01                         SME_mLFTs_A8:	dc.b 1	
0001A493 F206 0006 F8               		dc.b $F2, 6, 0, 6, $F8	
0001A498 01                         SME_mLFTs_AE:	dc.b 1	
0001A499 F206 0006 F8               		dc.b $F2, 6, 0, 6, $F8	
0001A49E 01                         SME_mLFTs_B4:	dc.b 1	
0001A49F F206 0006 F8               		dc.b $F2, 6, 0, 6, $F8	
0001A4A4 01                         SME_mLFTs_BA:	dc.b 1	
0001A4A5 F206 0006 F8               		dc.b $F2, 6, 0, 6, $F8	
0001A4AA                            		even
0001A4AA                            		even
0001A4AA                            
0001A4AA                            ; ===========================================================================
0001A4AA                            ; ---------------------------------------------------------------------------
0001A4AA                            ; Object 79 - lamppost
0001A4AA                            ; ---------------------------------------------------------------------------
0001A4AA                            
0001A4AA                            Obj79:					; XREF: Obj_Index
0001A4AA 7000                       		moveq	#0,d0
0001A4AC 1028 0024                  		move.b	$24(a0),d0
0001A4B0 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
0001A4B4 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
0001A4B8 4EFA 82B6                  		jmp	MarkObjGone
0001A4BC                            ; ===========================================================================
0001A4BC 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
0001A4BE 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
0001A4C0 0000                       		dc.w Obj79_AfterHit-Obj79_Index
0001A4C2 0000                       		dc.w Obj79_Twirl-Obj79_Index
0001A4C4                            ; ===========================================================================
0001A4C4                            
0001A4C4                            Obj79_Main:				; XREF: Obj79_Index
0001A4C4 5428 0024                  		addq.b	#2,$24(a0)
0001A4C8 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
0001A4D0 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
0001A4D6 117C 0004 0001             		move.b	#4,1(a0)
0001A4DC 117C 0008 0019             		move.b	#8,$19(a0)
0001A4E2 117C 0005 0018             		move.b	#5,$18(a0)
0001A4E8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001A4EC 7000                       		moveq	#0,d0
0001A4EE 1028 0023                  		move.b	$23(a0),d0
0001A4F2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001A4F8 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001A4FE 6600                       		bne.s	Obj79_RedLamp
0001A500 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001A504 0201 007F                  		andi.b	#$7F,d1
0001A508 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
0001A50C 0202 007F                  		andi.b	#$7F,d2
0001A510 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
0001A512 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
0001A514                            
0001A514                            Obj79_RedLamp:
0001A514 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A51A 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
0001A520 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
0001A526 4E75                       		rts	
0001A528                            ; ===========================================================================
0001A528                            
0001A528                            Obj79_BlueLamp:				; XREF: Obj79_Index
0001A528 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001A52C 6600 0000                  		bne.w	locret_16F90	; if yes, branch
0001A530 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001A534 6B00 0000                  		bmi.w	locret_16F90
0001A538 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001A53C 0201 007F                  		andi.b	#$7F,d1
0001A540 1428 0028                  		move.b	$28(a0),d2
0001A544 0202 007F                  		andi.b	#$7F,d2
0001A548 B202                       		cmp.b	d2,d1
0001A54A 6500                       		bcs.s	Obj79_HitLamp
0001A54C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001A550 7000                       		moveq	#0,d0
0001A552 1028 0023                  		move.b	$23(a0),d0
0001A556 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A55C 117C 0004 0024             		move.b	#4,$24(a0)
0001A562 117C 0003 001A             		move.b	#3,$1A(a0)
0001A568 6000 0000                  		bra.w	locret_16F90
0001A56C                            ; ===========================================================================
0001A56C                            
0001A56C                            Obj79_HitLamp:
0001A56C 3038 D008                  		move.w	($FFFFD008).w,d0
0001A570 9068 0008                  		sub.w	8(a0),d0
0001A574 5040                       		addq.w	#8,d0
0001A576 0C40 0010                  		cmpi.w	#$10,d0
0001A57A 6400 0000                  		bcc.w	locret_16F90
0001A57E 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001A582 9068 000C                  		sub.w	$C(a0),d0
0001A586 0640 0040                  		addi.w	#$40,d0
0001A58A 0C40 0068                  		cmpi.w	#$68,d0
0001A58E 6400                       		bcc.s	locret_16F90
0001A590 303C 00A1                  		move.w	#$A1,d0
0001A594 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play lamppost sound
0001A59A 5428 0024                  		addq.b	#2,$24(a0)
0001A59E 4EB9 0001 08E0             		jsr	SingleObjLoad
0001A5A4 6600                       		bne.s	loc_16F76
0001A5A6 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
0001A5AA 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
0001A5B0 3368 0008 0030             		move.w	8(a0),$30(a1)
0001A5B6 3368 000C 0032             		move.w	$C(a0),$32(a1)
0001A5BC 0469 0018 0032             		subi.w	#$18,$32(a1)
0001A5C2 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
0001A5CA 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
0001A5D0 137C 0004 0001             		move.b	#4,1(a1)
0001A5D6 137C 0008 0019             		move.b	#8,$19(a1)
0001A5DC 137C 0004 0018             		move.b	#4,$18(a1)
0001A5E2 137C 0002 001A             		move.b	#2,$1A(a1)
0001A5E8 337C 0020 0036             		move.w	#$20,$36(a1)
0001A5EE                            
0001A5EE                            loc_16F76:
0001A5EE 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
0001A5F4 6100 0000                  		bsr.w	Obj79_StoreInfo
0001A5F8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001A5FC 7000                       		moveq	#0,d0
0001A5FE 1028 0023                  		move.b	$23(a0),d0
0001A602 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A608                            
0001A608                            locret_16F90:
0001A608 4E75                       		rts	
0001A60A                            ; ===========================================================================
0001A60A                            
0001A60A                            Obj79_AfterHit:				; XREF: Obj79_Index
0001A60A 4E75                       		rts	
0001A60C                            ; ===========================================================================
0001A60C                            
0001A60C                            Obj79_Twirl:				; XREF: Obj79_Index
0001A60C 5368 0036                  		subq.w	#1,$36(a0)
0001A610 6A00                       		bpl.s	loc_16FA0
0001A612 117C 0004 0024             		move.b	#4,$24(a0)
0001A618                            
0001A618                            loc_16FA0:
0001A618 1028 0026                  		move.b	$26(a0),d0
0001A61C 0428 0010 0026             		subi.b	#$10,$26(a0)
0001A622 0400 0040                  		subi.b	#$40,d0
0001A626 4EB9 0000 2CC8             		jsr	(CalcSine).l
0001A62C C3FC 0C00                  		muls.w	#$C00,d1
0001A630 4841                       		swap	d1
0001A632 D268 0030                  		add.w	$30(a0),d1
0001A636 3141 0008                  		move.w	d1,8(a0)
0001A63A C1FC 0C00                  		muls.w	#$C00,d0
0001A63E 4840                       		swap	d0
0001A640 D068 0032                  		add.w	$32(a0),d0
0001A644 3140 000C                  		move.w	d0,$C(a0)
0001A648 4E75                       		rts	
0001A64A                            ; ===========================================================================
0001A64A                            ; ---------------------------------------------------------------------------
0001A64A                            ; Subroutine to	store information when you hit a lamppost
0001A64A                            ; ---------------------------------------------------------------------------
0001A64A                            
0001A64A                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
0001A64A 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
0001A650 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
0001A656 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
0001A65C 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
0001A662 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
0001A668 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
0001A66E 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
0001A674 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
0001A67A 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
0001A680 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
0001A686 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
0001A68C 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
0001A692 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
0001A698 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
0001A69E 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
0001A6A4 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
0001A6AA 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
0001A6B0 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
0001A6B6 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
0001A6BC 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
0001A6C2 4E75                       		rts	
0001A6C4                            
0001A6C4                            ; ---------------------------------------------------------------------------
0001A6C4                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001A6C4                            ; ---------------------------------------------------------------------------
0001A6C4                            
0001A6C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A6C4                            
0001A6C4                            
0001A6C4                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
0001A6C4 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
0001A6CA 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
0001A6D0 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
0001A6D6 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
0001A6DC 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
0001A6E2 4278 FE20                  		clr.w	($FFFFFE20).w
0001A6E6 4238 FE1B                  		clr.b	($FFFFFE1B).w
0001A6EA 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
0001A6F0 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
0001A6F6 5338 FE24                  		subq.b	#1,($FFFFFE24).w
0001A6FA 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
0001A700 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001A706 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
0001A70C 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
0001A712 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
0001A718 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
0001A71E 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
0001A724 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
0001A72A 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
0001A730 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
0001A736 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
0001A73C 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
0001A742 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001A748 6600                       		bne.s	loc_170E4
0001A74A 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
0001A750 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001A756 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0001A75C                            
0001A75C                            loc_170E4:
0001A75C 4A38 FE30                  		tst.b	($FFFFFE30).w
0001A760 6A00                       		bpl.s	locret_170F6
0001A762 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001A766 0440 00A0                  		subi.w	#$A0,d0
0001A76A 31C0 F728                  		move.w	d0,($FFFFF728).w
0001A76E                            
0001A76E                            locret_170F6:
0001A76E 4E75                       		rts	
0001A770                            ; End of function Obj79_LoadInfo
0001A770                            
0001A770                            ; ===========================================================================
0001A770                            ; ---------------------------------------------------------------------------
0001A770                            ; Sprite mappings - lamppost
0001A770                            ; ---------------------------------------------------------------------------
0001A770                            Map_obj79:
0001A770                            	include "_maps\obj79.asm"
0001A770                            ; ---------------------------------------------------------------------------
0001A770                            ; Sprite mappings - lamppost
0001A770                            ; ---------------------------------------------------------------------------
0001A770 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
0001A774 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
0001A778 06                         byte_17100:	dc.b 6
0001A779 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001A77E E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001A783 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001A788 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001A78D D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
0001A792 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
0001A797 04                         byte_1711F:	dc.b 4
0001A798 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001A79D E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001A7A2 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001A7A7 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001A7AC 02                         byte_17134:	dc.b 2
0001A7AD F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A7B2 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
0001A7B7 06                         byte_1713F:	dc.b 6
0001A7B8 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001A7BD E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001A7C2 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001A7C7 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001A7CC D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
0001A7D1 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
0001A7D6                            		even
0001A7D6                            		even
0001A7D6                            
0001A7D6                            ; ===========================================================================
0001A7D6                            ; ---------------------------------------------------------------------------
0001A7D6                            ; Object 7D - hidden points at the end of a level
0001A7D6                            ; ---------------------------------------------------------------------------
0001A7D6                            
0001A7D6                            Obj7D:					; XREF: Obj_Index
0001A7D6 7000                       		moveq	#0,d0
0001A7D8 1028 0024                  		move.b	$24(a0),d0
0001A7DC 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
0001A7E0 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
0001A7E4                            ; ===========================================================================
0001A7E4 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
0001A7E6 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
0001A7E8                            ; ===========================================================================
0001A7E8                            
0001A7E8                            Obj7D_Main:				; XREF: Obj7D_Index
0001A7E8 7410                       		moveq	#$10,d2
0001A7EA 3602                       		move.w	d2,d3
0001A7EC D643                       		add.w	d3,d3
0001A7EE 43F8 D000                  		lea	($FFFFD000).w,a1
0001A7F2 3029 0008                  		move.w	8(a1),d0
0001A7F6 9068 0008                  		sub.w	8(a0),d0
0001A7FA D042                       		add.w	d2,d0
0001A7FC B043                       		cmp.w	d3,d0
0001A7FE 6400                       		bcc.s	Obj7D_ChkDel
0001A800 3229 000C                  		move.w	$C(a1),d1
0001A804 9268 000C                  		sub.w	$C(a0),d1
0001A808 D242                       		add.w	d2,d1
0001A80A B243                       		cmp.w	d3,d1
0001A80C 6400                       		bcc.s	Obj7D_ChkDel
0001A80E 4A78 FE08                  		tst.w	($FFFFFE08).w
0001A812 6600                       		bne.s	Obj7D_ChkDel
0001A814 4A38 F7CD                  		tst.b	($FFFFF7CD).w
0001A818 6600                       		bne.s	Obj7D_ChkDel
0001A81A 5428 0024                  		addq.b	#2,$24(a0)
0001A81E 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
0001A826 317C 84B6 0002             		move.w	#$84B6,2(a0)
0001A82C 0028 0004 0001             		ori.b	#4,1(a0)
0001A832 117C 0000 0018             		move.b	#0,$18(a0)
0001A838 117C 0010 0019             		move.b	#$10,$19(a0)
0001A83E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001A844 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
0001A84A 303C 00C9                  		move.w	#$C9,d0
0001A84E 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play bonus sound
0001A854 7000                       		moveq	#0,d0
0001A856 1028 0028                  		move.b	$28(a0),d0
0001A85A D040                       		add.w	d0,d0
0001A85C 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
0001A860 4EB9 0000 0000             		jsr	AddPoints
0001A866                            
0001A866                            Obj7D_ChkDel:
0001A866 3028 0008                  		move.w	8(a0),d0
0001A86A 0240 FF80                  		andi.w	#$FF80,d0
0001A86E 3238 F700                  		move.w	($FFFFF700).w,d1
0001A872 0441 0080                  		subi.w	#$80,d1
0001A876 0241 FF80                  		andi.w	#$FF80,d1
0001A87A 9041                       		sub.w	d1,d0
0001A87C 0C40 0280                  		cmpi.w	#$280,d0
0001A880 6200                       		bhi.s	Obj7D_Delete
0001A882 4E75                       		rts	
0001A884                            ; ===========================================================================
0001A884                            
0001A884                            Obj7D_Delete:
0001A884 4EF9 0001 0496             		jmp	DeleteObject
0001A88A                            ; ===========================================================================
0001A88A 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
0001A88C 03E8                       		dc.w 1000
0001A88E 0064                       		dc.w 100
0001A890 0001                       		dc.w 1
0001A892                            ; ===========================================================================
0001A892                            
0001A892                            Obj7D_DelayDel:				; XREF: Obj7D_Index
0001A892 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
0001A896 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
0001A898 3028 0008                  		move.w	8(a0),d0
0001A89C 0240 FF80                  		andi.w	#-$80,d0
0001A8A0 3238 F700                  		move.w	($FFFFF700).w,d1
0001A8A4 0441 0080                  		subi.w	#$80,d1
0001A8A8 0241 FF80                  		andi.w	#-$80,d1
0001A8AC 9041                       		sub.w	d1,d0
0001A8AE 0C40 0280                  		cmpi.w	#$280,d0
0001A8B2 6200                       		bhi.s	Obj7D_Delete2
0001A8B4 4EF9 0001 045A             		jmp	DisplaySprite
0001A8BA                            ; ===========================================================================
0001A8BA                            
0001A8BA                            Obj7D_Delete2:
0001A8BA 4EF9 0001 0496             		jmp	DeleteObject
0001A8C0                            ; ===========================================================================
0001A8C0                            ; ---------------------------------------------------------------------------
0001A8C0                            ; Sprite mappings - hidden points at the end of	a level
0001A8C0                            ; ---------------------------------------------------------------------------
0001A8C0                            Map_obj7D:
0001A8C0                            	include "_maps\obj7D.asm"
0001A8C0                            ; ---------------------------------------------------------------------------
0001A8C0                            ; Sprite mappings - hidden points at the end of	a level
0001A8C0                            ; ---------------------------------------------------------------------------
0001A8C0 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
0001A8C4 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
0001A8C8 00                         byte_17250:	dc.b 0
0001A8C9 01                         byte_17251:	dc.b 1
0001A8CA F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001A8CF 01                         byte_17257:	dc.b 1
0001A8D0 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001A8D5 01                         byte_1725D:	dc.b 1
0001A8D6 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001A8DC 00                         		even
0001A8DC 00                         		even
0001A8DC                            
0001A8DC                            ; ===========================================================================
0001A8DC                            ; ---------------------------------------------------------------------------
0001A8DC                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001A8DC                            ; ---------------------------------------------------------------------------
0001A8DC                            
0001A8DC                            Obj8A:					; XREF: Obj_Index
0001A8DC 7000                       		moveq	#0,d0
0001A8DE 1028 0024                  		move.b	$24(a0),d0
0001A8E2 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
0001A8E6 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
0001A8EA                            ; ===========================================================================
0001A8EA 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
0001A8EC 0000                       		dc.w Obj8A_Display-Obj8A_Index
0001A8EE                            ; ===========================================================================
0001A8EE                            
0001A8EE                            Obj8A_Main:				; XREF: Obj8A_Index
0001A8EE 5428 0024                  		addq.b	#2,$24(a0)
0001A8F2 317C 0120 0008             		move.w	#$120,8(a0)
0001A8F8 317C 00F0 000A             		move.w	#$F0,$A(a0)
0001A8FE 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
0001A906 317C 0580 0002             		move.w	#$580,2(a0)	; fixed from $5A0
0001A90C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
0001A910 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
0001A914 117C 0000 0001             		move.b	#0,1(a0)
0001A91A 117C 0000 0018             		move.b	#0,$18(a0)
0001A920 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
0001A926 6600                       		bne.s	Obj8A_Display	; if not, branch
0001A928 317C 00A6 0002             		move.w	#$A6,2(a0)
0001A92E 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
0001A934 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
0001A938 6700                       		beq.s	Obj8A_Display	; if not, branch
0001A93A 0C38 00D2 F604             		cmpi.b	#Start+A+C+Down,(Joypad|Held)	; is Start, A, C or Down being pressed?
0001A940 6600                       		bne.s	Obj8A_Display			; if not, branch
0001A942 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
0001A948 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
0001A94E 4EF9 0001 0496             		jmp	DeleteObject
0001A954                            ; ===========================================================================
0001A954                            
0001A954                            Obj8A_Display:				; XREF: Obj8A_Index
0001A954 4EF9 0001 045A             		jmp	DisplaySprite
0001A95A                            ; ===========================================================================
0001A95A                            ; ---------------------------------------------------------------------------
0001A95A                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001A95A                            ; ---------------------------------------------------------------------------
0001A95A                            Map_obj8A:
0001A95A 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
0001A95E 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
0001A962 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
0001A966 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
0001A96A 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
0001A96E 0000 0000                  		dc.w byte_176A9-Map_obj8A, byte_fuckyou-Map_obj8A
0001A972                            byte_172F8:	incbin "mapbin\credits_map_1.bin"
0001A996                            		even
0001A996                            byte_1733F:	incbin "mapbin\credits_map_2.bin"
0001A9FC 00                         		even
0001A9FC                            byte_17390:	incbin "mapbin\credits_map_3.bin"
0001AB2A 00                         		even
0001AB2A                            byte_173C3:	incbin "mapbin\credits_map_4.bin"
0001ACAC                            		even
0001ACAC                            byte_1743C:	incbin "mapbin\credits_map_5.bin"
0001AD8E                            		even
0001AD8E                            byte_174A1:	incbin "mapbin\credits_map_6.bin"
0001AE26 00                         		even
0001AE26                            byte_17524:	incbin "mapbin\credits_map_7.bin"
0001AF22 00                         		even
0001AF22                            byte_17598:	incbin "mapbin\credits_map_8.bin"
0001AFAA                            		even
0001AFAA                            byte_17634:	incbin "mapbin\credits_map_9.bin"
0001B01E                            		even
0001B01E                            byte_17680:	incbin "mapbin\credits_map_10.bin"
0001B074                            		even
0001B074                            byte_176A9:	incbin "mapbin\credits_map_0.bin"
0001B110                            		even
0001B110                            byte_fuckyou: incbin "mapbin\fuckyou.bin"
0001B134                            		even
0001B134                            
0001B134                            		
0001B134                            ; ---------------------------------------------------------------------------
0001B134                            ; Subroutine to generate explosions arround the boss
0001B134                            ; ---------------------------------------------------------------------------
0001B134                            
0001B134                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B134                            
0001B134                            BossDefeated:
0001B134 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001B138 0200 0007                  		andi.b	#7,d0
0001B13C 6600                       		bne.s	locret_178A2
0001B13E 4EB9 0001 08E0             		jsr	SingleObjLoad
0001B144 6600                       		bne.s	locret_178A2
0001B146 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B14A 3368 0008 0008             		move.w	8(a0),8(a1)
0001B150 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B156 4EB9 0000 2CA2             		jsr	(RandomNumber).l
0001B15C 3200                       		move.w	d0,d1
0001B15E 7200                       		moveq	#0,d1
0001B160 1200                       		move.b	d0,d1
0001B162 E409                       		lsr.b	#2,d1
0001B164 0441 0020                  		subi.w	#$20,d1
0001B168 D369 0008                  		add.w	d1,8(a1)
0001B16C E048                       		lsr.w	#8,d0
0001B16E E608                       		lsr.b	#3,d0
0001B170 D169 000C                  		add.w	d0,$C(a1)
0001B174                            
0001B174                            locret_178A2:
0001B174 4E75                       		rts	
0001B176                            ; End of function BossDefeated
0001B176                            
0001B176                            ; ---------------------------------------------------------------------------
0001B176                            ; Subroutine to	move a boss
0001B176                            ; ---------------------------------------------------------------------------
0001B176                            
0001B176                            ; Like SpeedToPos, but outputs coordinates into $30(a0) and $38(a0)
0001B176                            
0001B176                            BossMove:
0001B176 2428 0030                  		move.l	$30(a0),d2
0001B17A 2628 0038                  		move.l	$38(a0),d3
0001B17E 3028 0010                  		move.w	$10(a0),d0
0001B182 48C0                       		ext.l	d0
0001B184 E180                       		asl.l	#8,d0
0001B186 D480                       		add.l	d0,d2
0001B188 3028 0012                  		move.w	$12(a0),d0
0001B18C 48C0                       		ext.l	d0
0001B18E E180                       		asl.l	#8,d0
0001B190 D680                       		add.l	d0,d3
0001B192 2142 0030                  		move.l	d2,$30(a0)
0001B196 2143 0038                  		move.l	d3,$38(a0)
0001B19A 4E75                       		rts	
0001B19C                            ; End of function BossMove
0001B19C                            
0001B19C                            ; ===========================================================================
0001B19C                            
0001B19C                            
0001B19C                            
0001B19C                            ; ===========================================================================
0001B19C                            ; ---------------------------------------------------------------------------
0001B19C                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001B19C                            ; ---------------------------------------------------------------------------
0001B19C                            
0001B19C                            Obj48:					; XREF: Obj_Index
0001B19C 7000                       		moveq	#0,d0
0001B19E 1028 0024                  		move.b	$24(a0),d0
0001B1A2 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
0001B1A6 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
0001B1AA                            ; ===========================================================================
0001B1AA 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index	; 0
0001B1AC 0000                       		dc.w Obj48_Base-Obj48_Index	; 2
0001B1AE 0000                       		dc.w Obj48_Display2-Obj48_Index	; 4
0001B1B0 0000                       		dc.w Obj48_Chain-Obj48_Index	; 6
0001B1B2 0000                       		dc.w Obj48_Ball-Obj48_Index	; 8
0001B1B4                            ; ===========================================================================
0001B1B4                            
0001B1B4                            Obj48_Main:				; XREF: Obj48_Index
0001B1B4 5428 0024                  		addq.b	#2,$24(a0)
0001B1B8 317C 4080 0026             		move.w	#$4080,$26(a0)
0001B1BE 317C FC00 003E             		move.w	#-$400,$3E(a0)
0001B1C4 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
0001B1CC 317C 046C 0002             		move.w	#$46C,2(a0)
0001B1D2 45E8 0028                  		lea	$28(a0),a2	; load chain objects array
0001B1D6 14FC 0000                  		move.b	#0,(a2)+	; first item will contain the amount of objects
0001B1DA 7205                       		moveq	#5,d1
0001B1DC 2248                       		movea.l	a0,a1		; copy object addr to a1
0001B1DE 6000                       		bra.s	loc_17B60
0001B1E0                            ; ===========================================================================
0001B1E0                            
0001B1E0                            Obj48_MakeLinks:
0001B1E0 4EB9 0001 08F6             		jsr	SingleObjLoad2
0001B1E6 6600                       		bne.s	Obj48_MakeBall
0001B1E8 3368 0008 0008             		move.w	8(a0),8(a1)
0001B1EE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B1F4 12BC 0048                  		move.b	#$48,(a1)	; load chain link object
0001B1F8 137C 0006 0024             		move.b	#6,$24(a1)	; set routine to #6 (loc_17C68)
0001B1FE 237C 0000 A74A 0004        		move.l	#Map_obj15,4(a1)
0001B206 337C 0380 0002             		move.w	#$380,2(a1)
0001B20C 137C 0001 001A             		move.b	#1,$1A(a1)
0001B212 5228 0028                  		addq.b	#1,$28(a0)	; add 1 to the amount of object in chain
0001B216                            
0001B216                            loc_17B60:				; XREF: Obj48_Main
0001B216 3A09                       		move.w	a1,d5		; move object addr to d5
0001B218 0445 D000                  		subi.w	#$D000,d5	; subtract $D000 from it
0001B21C EC4D                       		lsr.w	#6,d5		; divide by $40 (obj STT size)
0001B21E 0245 007F                  		andi.w	#$7F,d5		; apply mask
0001B222 14C5                       		move.b	d5,(a2)+	; put d5 into objects addresses array (now is d4)
0001B224 137C 0004 0001             		move.b	#4,1(a1)
0001B22A 137C 0008 0019             		move.b	#8,$19(a1)
0001B230 137C 0006 0018             		move.b	#6,$18(a1)
0001B236 2368 0034 0034             		move.l	$34(a0),$34(a1)	; parent object (Eggman's ship)
0001B23C 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
0001B240                            
0001B240                            Obj48_MakeBall:
0001B240 137C 0008 0024             		move.b	#8,$24(a1)
0001B246 237C 0000 ACA8 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
0001B24E 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
0001B254 137C 0001 001A             		move.b	#1,$1A(a1)
0001B25A 137C 0005 0018             		move.b	#5,$18(a1)
0001B260 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
0001B266 4E75                       		rts	
0001B268                            ; ===========================================================================
0001B268                            
0001B268                            Obj48_PosData:	;dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001B268 0010 2020 2040                              dc.b 0, $10, $20, $20, $20, $40
0001B26E                            
0001B26E                            ; ===========================================================================
0001B26E                            
0001B26E                            Obj48_Base:				; XREF: Obj48_Index
0001B26E 47F9 0001 B268             		lea	(Obj48_PosData).l,a3
0001B274 45E8 0028                  		lea	$28(a0),a2	; load chain objects array
0001B278 7C00                       		moveq	#0,d6
0001B27A 1C1A                       		move.b	(a2)+,d6	; get the amount of object
0001B27C                            
0001B27C                            ;loc_17BC6:
0001B27C                            Obj48_LowerChain:
0001B27C 7800                       		moveq	#0,d4
0001B27E 181A                       		move.b	(a2)+,d4	; load array item to d4
0001B280 ED4C                       		lsl.w	#6,d4		; multiply by $40
0001B282 0684 00FF D000             		addi.l	#$FFD000,d4	; add $FFD000 to get a proper address
0001B288 2244                       		movea.l	d4,a1		; load object
0001B28A 101B                       		move.b	(a3)+,d0	; load object's target Y-position
0001B28C B029 003C                  		cmp.b	$3C(a1),d0	; has object reached it?
0001B290 6700                       		beq.s	@NextObject	; if yes, branch
0001B292 5229 003C                  		addq.b	#1,$3C(a1)	; add 1 to Y-position
0001B296                            
0001B296                            @NextObject:	
0001B296 51CE FFE4                  		dbf	d6,Obj48_LowerChain	; repeat for the amount of objects in chain
0001B29A                            
0001B29A B029 003C                  		cmp.b	$3C(a1),d0
0001B29E 6600                       		bne.s	loc_17BFA
0001B2A0 2268 0034                  		movea.l	$34(a0),a1	; load parent object (Eggman's Ship)
0001B2A4 0C29 0006 0025             		cmpi.b	#6,$25(a1)	; is secondary routine set to #6 (Obj3D_ShipMove2)?
0001B2AA 6600                       		bne.s	loc_17BFA	; if not, branch
0001B2AC 5428 0024                  		addq.b	#2,$24(a0)
0001B2B0                            
0001B2B0                            loc_17BFA:
0001B2B0 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001B2B6 6700                       		beq.s	Obj48_Display
0001B2B8 5268 0032                  		addq.w	#1,$32(a0)
0001B2BC                            
0001B2BC                            Obj48_Display:
0001B2BC 6100 0000                  		bsr.w	Obj48_FollowShip
0001B2C0 1028 0026                  		move.b	$26(a0),d0	; load angle to d0
0001B2C4 4EB9 0000 A6AE             		jsr	Obj15_Move2	; subroutine to move chain
0001B2CA 4EF9 0001 045A             		jmp	DisplaySprite
0001B2D0                            ; ===========================================================================
0001B2D0                            
0001B2D0                            Obj48_Display2:				; XREF: Obj48_Index
0001B2D0 6100 0000                  		bsr.w	Obj48_FollowShip
0001B2D4 4EB9 0000 A68C             		jsr	Obj15_Move ;obj48_move
0001B2DA 4EF9 0001 045A             		jmp	DisplaySprite
0001B2E0                            
0001B2E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B2E0                            
0001B2E0                            
0001B2E0                            ;sub_17C2A:
0001B2E0                            Obj48_FollowShip:			; XREF: Obj48_Display; Obj48_Display2
0001B2E0 2268 0034                  		movea.l	$34(a0),a1	; load parent object (Eggman's ship)
0001B2E4 0628 0020 001B             		addi.b	#$20,$1B(a0)
0001B2EA 6400                       		bcc.s	loc_17C3C
0001B2EC 0868 0000 001A             		bchg	#0,$1A(a0)	; change $1A every 8 frames
0001B2F2                            
0001B2F2                            loc_17C3C:
0001B2F2 3169 0008 003A             		move.w	8(a1),$3A(a0)
0001B2F8 3029 000C                  		move.w	$C(a1),d0
0001B2FC D068 0032                  		add.w	$32(a0),d0
0001B300 3140 0038                  		move.w	d0,$38(a0)
0001B304 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001B30A 4A29 0022                  		tst.b	$22(a1)		; was the boss defeated?
0001B30E 6A00                       		bpl.s	locret_17C66	; if not, branch
0001B310 10BC 003F                  		move.b	#$3F,0(a0)	; replace chain base with Obj3D (red explosion)
0001B314 117C 0000 0024             		move.b	#0,$24(a0)
0001B31A                            
0001B31A                            locret_17C66:
0001B31A 4E75                       		rts	
0001B31C                            ; End of function sub_17C2A
0001B31C                            
0001B31C                            ; ===========================================================================
0001B31C                            
0001B31C                            Obj48_Chain:				; XREF: Obj48_Index
0001B31C 2268 0034                  		movea.l	$34(a0),a1	; load parent object (Eggman's ship)
0001B320 4A29 0022                  		tst.b	$22(a1)		; was the boss defeated?
0001B324 6A00                       		bpl.s	Obj48_Display3	; if not, branch
0001B326 10BC 003F                  		move.b	#$3F,0(a0)	; replace chain link with Obj3F (red explosion)
0001B32A 117C 0000 0024             		move.b	#0,$24(a0)
0001B330                            
0001B330                            Obj48_Display3:
0001B330 4EF9 0001 045A             		jmp	DisplaySprite
0001B336                            ; ===========================================================================
0001B336                            
0001B336                            Obj48_Ball:				; XREF: Obj48_Index
0001B336 7000                       		moveq	#0,d0		; use frame #0
0001B338 4A28 001A                  		tst.b	$1A(a0)		; test ball mapping frame
0001B33C 6600                       		bne.s	Obj48_Vanish	; if its not zero, branch
0001B33E 5200                       		addq.b	#1,d0		; use frame #1
0001B340                            
0001B340                            Obj48_Vanish:
0001B340 1140 001A                  		move.b	d0,$1A(a0)	; update mapping frame
0001B344 2268 0034                  		movea.l	$34(a0),a1	; load parent object (Eggman's ship)
0001B348 4A29 0022                  		tst.b	$22(a1)		; was the boss defeated?
0001B34C 6A00                       		bpl.s	Obj48_Display4	; if not, branch
0001B34E 117C 0000 0020             		move.b	#0,$20(a0)	; clear touch response, the ball can't hurt Sonic anymore
0001B354 6100 FDDE                  		bsr.w	BossDefeated	; make ball explode
0001B358 5328 003C                  		subq.b	#1,$3C(a0)	; subtract 1 from timer
0001B35C 6A00                       		bpl.s	Obj48_Display4	; if time remains, branch
0001B35E 10BC 003F                  		move.b	#$3F,(a0)	; replace the ball with Obj3F (red explosion)
0001B362 117C 0000 0024             		move.b	#0,$24(a0)
0001B368                            
0001B368                            Obj48_Display4:
0001B368 4EF9 0001 045A             		jmp	DisplaySprite
0001B36E                            ; ===========================================================================
0001B36E                            Ani_Eggman:
0001B36E                            	include "_anim\Eggman.asm"
0001B36E                            ; ---------------------------------------------------------------------------
0001B36E                            ; Animation script - Eggman (bosses)
0001B36E                            ; ---------------------------------------------------------------------------
0001B36E 0000                       		dc.w byte_17CD4-Ani_Eggman
0001B370 0000                       		dc.w byte_17CD8-Ani_Eggman
0001B372 0000                       		dc.w byte_17CDC-Ani_Eggman
0001B374 0000                       		dc.w byte_17CE0-Ani_Eggman
0001B376 0000                       		dc.w byte_17CE4-Ani_Eggman
0001B378 0000                       		dc.w byte_17CE8-Ani_Eggman
0001B37A 0000                       		dc.w byte_17CEC-Ani_Eggman
0001B37C 0000                       		dc.w byte_17CF0-Ani_Eggman
0001B37E 0000                       		dc.w byte_17CF4-Ani_Eggman
0001B380 0000                       		dc.w byte_17CF8-Ani_Eggman
0001B382 0000                       		dc.w byte_17CFC-Ani_Eggman
0001B384 0000                       		dc.w byte_17D00-Ani_Eggman
0001B386 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
0001B38A 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
0001B38E 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
0001B392 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
0001B396 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
0001B39A 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
0001B39E 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
0001B3A2 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
0001B3A6 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
0001B3AA 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
0001B3AE 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
0001B3B2 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
0001B3BE                            		even
0001B3BE                            		even
0001B3BE                            Ani_SilvSon:
0001B3BE                            	include "_anim\SilvSon.asm"
0001B3BE                            ; ---------------------------------------------------------------------------
0001B3BE                            ; Animation script - Silver Sonic mc 2
0001B3BE                            ; ---------------------------------------------------------------------------
0001B3BE 0000                       		dc.w byte_17CD4haha-Ani_SilvSon
0001B3C0 0000                       		dc.w byte_17CD8haha-Ani_SilvSon
0001B3C2 0000                       		dc.w byte_17CDChaha-Ani_SilvSon
0001B3C4 0000                       		dc.w byte_17CE0haha-Ani_SilvSon
0001B3C6 0000                       		dc.w byte_17CE4haha-Ani_SilvSon
0001B3C8 0000                       		dc.w byte_17CE8haha-Ani_SilvSon
0001B3CA 0000                       		dc.w byte_17CEChaha-Ani_SilvSon
0001B3CC 0000                       		dc.w byte_17CF0haha-Ani_SilvSon
0001B3CE 0000                       		dc.w byte_17CF4haha-Ani_SilvSon
0001B3D0 0000                       		dc.w byte_17CF8haha-Ani_SilvSon
0001B3D2 0000                       		dc.w byte_17CFChaha-Ani_SilvSon
0001B3D4 0000                       		dc.w byte_17D00haha-Ani_SilvSon
0001B3D6 FF00 01FF                  byte_17CD4haha:	dc.b $FF, 0, 1, $FF
0001B3DA FE02 0304 05FF FF          byte_17CD8haha:	dc.b $FE, 2, 3, 4, 5, $FF, $FF
0001B3E1 0301 02FF                  byte_17CDChaha:	dc.b 3,	1, 2, $FF
0001B3E5 0101 02FF                  byte_17CE0haha:	dc.b 1,	1, 2, $FF
0001B3E9 0403 04FF                  byte_17CE4haha:	dc.b 4,	3, 4, $FF
0001B3ED 1F05 01FF                  byte_17CE8haha:	dc.b $1F, 5, 1,	$FF
0001B3F1 0306 01FF                  byte_17CEChaha:	dc.b 3,	6, 1, $FF
0001B3F5 0F0A FF00                  byte_17CF0haha:	dc.b $F, $A, $FF, 0
0001B3F9 0308 09FF                  byte_17CF4haha:	dc.b 3,	8, 9, $FF
0001B3FD 0108 09FF                  byte_17CF8haha:	dc.b 1,	8, 9, $FF
0001B401 0F07 FF00                  byte_17CFChaha:	dc.b $F, 7, $FF, 0
0001B405 0209 080B 0C0B 0C09 08FE+  byte_17D00haha:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
0001B412 00                         		even
0001B412 00                         		even
0001B412                            Ani_WhispKing:
0001B412                            	include "_anim\WhispKing.asm"
0001B412                            ; ---------------------------------------------------------------------------
0001B412                            ; Animation script - Whisp King (SYZ2 miniboss)
0001B412                            ; ---------------------------------------------------------------------------
0001B412 0000                       		dc.w byte_17CD4bebebebe-Ani_WhispKing
0001B414 0400 01FF                  byte_17CD4bebebebe:	dc.b 4, 0, 1, $FF
0001B418                            		even
0001B418                            		even
0001B418                            Ani_MechaSonic:
0001B418                            	include "_anim\mchs.asm"
0001B418                            ; ---------------------------------------------------------------------------
0001B418                            ; Animation script - Mecha Sonic (SLZ2 miniboss)
0001B418                            ; ---------------------------------------------------------------------------
0001B418 0000                       		dc.w byte_17CD4lala-Ani_MechaSonic
0001B41A 0000                       		dc.w byte_17CD8lala-Ani_MechaSonic
0001B41C 0000                       		dc.w byte_17CDClala-Ani_MechaSonic
0001B41E FE00 FFFF                  byte_17CD4lala:	dc.b $FE, 0, $FF, $FF
0001B422 FE01 FFFF                  byte_17CD8lala:	dc.b $FE, 1, $FF, $FF
0001B426 0402 0304 FF               byte_17CDClala:	dc.b 4,	2, 3, 4, $FF
0001B42C 00                         		even
0001B42C 00                         		even
0001B42C                            Ani_DinoKing:
0001B42C                            	include "_anim\DinoKing.asm"
0001B42C                            ; ---------------------------------------------------------------------------
0001B42C                            ; Animation script - Eggman (bosses)
0001B42C                            ; ---------------------------------------------------------------------------
0001B42C 0000                       		dc.w byteDK_17CD4-Ani_DinoKing
0001B42E 0000                       		dc.w byteDK_17CD8-Ani_DinoKing
0001B430 0000                       		dc.w byteDK_17CDC-Ani_DinoKing
0001B432 0000                       		dc.w byteDK_17CE0-Ani_DinoKing
0001B434 0000                       		dc.w byteDK_17CE4-Ani_DinoKing
0001B436 0000                       		dc.w byteDK_17CE8-Ani_DinoKing
0001B438 0000                       		dc.w byteDK_17CEC-Ani_DinoKing
0001B43A 0000                       		dc.w byteDK_17CF0-Ani_DinoKing
0001B43C 0000                       		dc.w byteDK_17CF4-Ani_DinoKing
0001B43E 0000                       		dc.w byteDK_17CF8-Ani_DinoKing
0001B440 0000                       		dc.w byteDK_17CFC-Ani_DinoKing
0001B442 0000                       		dc.w byteDK_17D00-Ani_DinoKing
0001B444 0700 01FF                  byteDK_17CD4:	dc.b 7, 0, 1, $FF
0001B448 0400 FF                    byteDK_17CD8:	dc.b 4, 0, $FF
0001B44B 0402 FF                    byteDK_17CDC:	dc.b 4, 2, $FF
0001B44E 0101 02FF                  byteDK_17CE0:	dc.b 1,	1, 2, $FF
0001B452 0403 04FF                  byteDK_17CE4:	dc.b 4,	3, 4, $FF
0001B456 1F05 01FF                  byteDK_17CE8:	dc.b $1F, 5, 1,	$FF
0001B45A 0306 01FF                  byteDK_17CEC:	dc.b 3,	6, 1, $FF
0001B45E 0F0A FF00                  byteDK_17CF0:	dc.b $F, $A, $FF, 0
0001B462 0308 09FF                  byteDK_17CF4:	dc.b 3,	8, 9, $FF
0001B466 0108 09FF                  byteDK_17CF8:	dc.b 1,	8, 9, $FF
0001B46A 0F07 FF00                  byteDK_17CFC:	dc.b $F, 7, $FF, 0
0001B46E 0209 080B 0C0B 0C09 08FE+  byteDK_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
0001B47A                            		even
0001B47A                            		even
0001B47A                            Ani_MegaNewt:
0001B47A                                    include "#Bosses\#BrutalNewt\obj90.asm"
0001B47A                            ; ---------------------------------------------------------------------------
0001B47A                            ; Animation script - Brutal Newtron boss
0001B47A                            ; ---------------------------------------------------------------------------
0001B47A 0000                       		dc.w byte_DF24Newtron-Ani_MegaNewt
0001B47C 0000                       		dc.w byte_DF28Newtron-Ani_MegaNewt
0001B47E 0000                       		dc.w byte_DF30Newtron-Ani_MegaNewt
0001B480 0000                       		dc.w byte_DF32Newtron-Ani_MegaNewt
0001B482 3C00 01FF                  byte_DF24Newtron:	dc.b $3C, 0, 1, $FF
0001B486 FE01 FF                    byte_DF28Newtron:	dc.b $FE, 1, $FF
0001B489 0001 0202 01FF             byte_DF30Newtron:	dc.b 0, 1, 2, 2, 1, $FF
0001B48F 3C01 00FF                  byte_DF32Newtron:       dc.b $3C, 1, 0, $FF
0001B494 00                         		even
0001B494 00                         		even
0001B494                            Ani_Hellgirl:
0001B494                                    include "#Bosses\#Hellgirl\obj91.asm"
0001B494                            ; ---------------------------------------------------------------------------
0001B494                            ; Animation script - Hellgirl (MZ act 2 miniboss)
0001B494                            ; ---------------------------------------------------------------------------
0001B494 0000                       		dc.w byte_17CD4Love-Ani_Hellgirl
0001B496 0000                       		dc.w byte_17CD8Love-Ani_Hellgirl
0001B498 0F00 FF00                  byte_17CD4Love:	dc.b $F, 0, $FF, 0
0001B49C 0F01 FF00                  byte_17CD8Love:	dc.b $F, 1, $FF, 0
0001B4A0                            		even
0001B4A0                            		even
0001B4A0                            Ani_TailsDoll:
0001B4A0                                    include "#Bosses\#Tailsdoll\obj96.asm"
0001B4A0                            ; ---------------------------------------------------------------------------
0001B4A0                            ; Animation script - Tails Doll (SYZ act 1 miniboss)
0001B4A0                            ; ---------------------------------------------------------------------------
0001B4A0 0000                       		dc.w byte_17CD4play-Ani_TailsDoll
0001B4A2 0000                       		dc.w byte_17CD8play-Ani_TailsDoll
0001B4A4 0F00 FF00                  byte_17CD4play:	dc.b $F, 0, $FF, 0
0001B4A8 FE01 02FF FF               byte_17CD8play:	dc.b $FE, 1, 2, $FF, $FF
0001B4AE 00                         		even
0001B4AE 00                         		even
0001B4AE                            
0001B4AE                            ; ---------------------------------------------------------------------------
0001B4AE                            ; Sprite mappings - Eggman (boss levels)
0001B4AE                            ; ---------------------------------------------------------------------------
0001B4AE                            Map_Eggman:
0001B4AE                            	include "_maps\Eggman.asm"
0001B4AE                            ; ---------------------------------------------------------------------------
0001B4AE                            ; Sprite mappings - Eggman (boss levels)
0001B4AE                            ; ---------------------------------------------------------------------------
0001B4AE 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
0001B4B2 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
0001B4B6 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
0001B4BA 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
0001B4BE 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
0001B4C2 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
0001B4C6 0000                       		dc.w byte_17DC8-Map_Eggman
0001B4C8 06                         byte_17D26:	dc.b 6
0001B4C9 EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
0001B4CE EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
0001B4D3 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
0001B4D8 FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
0001B4DD 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
0001B4E2 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
0001B4E7 02                         byte_17D45:	dc.b 2
0001B4E8 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
0001B4ED EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
0001B4F2 02                         byte_17D50:	dc.b 2
0001B4F3 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
0001B4F8 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
0001B4FD 03                         byte_17D5B:	dc.b 3
0001B4FE E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
0001B503 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
0001B508 EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
0001B50D 03                         byte_17D6B:	dc.b 3
0001B50E E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
0001B513 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
0001B518 EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
0001B51D 03                         byte_17D7B:	dc.b 3
0001B51E E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
0001B523 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
0001B528 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
0001B52D 03                         byte_17D8B:	dc.b 3
0001B52E E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
0001B533 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
0001B538 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
0001B53D 04                         byte_17D9B:	dc.b 4
0001B53E E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
0001B543 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
0001B548 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
0001B54D EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
0001B552 01                         byte_17DB0:	dc.b 1
0001B553 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
0001B558 01                         byte_17DB6:	dc.b 1
0001B559 0405 0031 22               		dc.b 4,	5, 0, $31, $22
0001B55E 00                         byte_17DBC:	dc.b 0
0001B55F 02                         byte_17DBD:	dc.b 2
0001B560 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
0001B565 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
0001B56A 02                         byte_17DC8:	dc.b 2
0001B56B F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
0001B570 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
0001B576 00                         		even
0001B576 00                         		even
0001B576                            Map_SilvSon:
0001B576                            	include "_maps\Silver.asm"
0001B576                            ; --------------------------------------------------------------------------------
0001B576                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001B576                            ; --------------------------------------------------------------------------------
0001B576                            
0001B576                            SME_EcewW:	
0001B576 0000 0000                  		dc.w SME_EcewW_C-SME_EcewW, SME_EcewW_35-SME_EcewW	
0001B57A 0000 0000                  		dc.w SME_EcewW_63-SME_EcewW, SME_EcewW_69-SME_EcewW	
0001B57E 0000 0000                  		dc.w SME_EcewW_6F-SME_EcewW, SME_EcewW_75-SME_EcewW	
0001B582 08                         SME_EcewW_C:	dc.b 8	
0001B583 EC01 200A E4               		dc.b $EC, 1, $20, $A, $E4	
0001B588 EC05 200C 0C               		dc.b $EC, 5, $20, $C, $C	
0001B58D FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001B592 FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001B597 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001B59C 1420 202C 0C               		dc.b $14, $20, $20, $2C, $C	
0001B5A1 F40C 202D EC               		dc.b $F4, $C, $20, $2D, $EC	
0001B5A6 EC0C 2031 EC               		dc.b $EC, $C, $20, $31, $EC	
0001B5AB 09                         SME_EcewW_35:	dc.b 9	
0001B5AC EC01 200A E4               		dc.b $EC, 1, $20, $A, $E4	
0001B5B1 EC05 200C 0C               		dc.b $EC, 5, $20, $C, $C	
0001B5B6 FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001B5BB FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001B5C0 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001B5C5 1420 202C 0C               		dc.b $14, $20, $20, $2C, $C	
0001B5CA F40C 202D EC               		dc.b $F4, $C, $20, $2D, $EC	
0001B5CF EC0C 2031 EC               		dc.b $EC, $C, $20, $31, $EC	
0001B5D4 FC0A 2035 FC               		dc.b $FC, $A, $20, $35, $FC	
0001B5D9 01                         SME_EcewW_63:	dc.b 1	
0001B5DA F40F 203E E4               		dc.b $F4, $F, $20, $3E, $E4	
0001B5DF 01                         SME_EcewW_69:	dc.b 1	
0001B5E0 F40F 204E E4               		dc.b $F4, $F, $20, $4E, $E4	
0001B5E5 01                         SME_EcewW_6F:	dc.b 1	
0001B5E6 F40F 206C E4               		dc.b $F4, $F, $20, $6C, $E4	
0001B5EB 01                         SME_EcewW_75:	dc.b 1	
0001B5EC F40F 207C E4               		dc.b $F4, $F, $20, $7C, $E4	
0001B5F2 00                         		even
0001B5F2 00                         		even
0001B5F2                            Map_WhispKing:
0001B5F2                            	include "_maps\KingWhisp.asm"
0001B5F2                            ; --------------------------------------------------------------------------------
0001B5F2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001B5F2                            ; --------------------------------------------------------------------------------
0001B5F2                            
0001B5F2                            SME_yJy96:	
0001B5F2 0000 0000                  		dc.w SME_yJy96_4-SME_yJy96, SME_yJy96_2D-SME_yJy96	
0001B5F6 08                         SME_yJy96_4:	dc.b 8	
0001B5F7 EC01 200A E4               		dc.b $EC, 1, $20, $A, $E4	
0001B5FC EC05 200C 0C               		dc.b $EC, 5, $20, $C, $C	
0001B601 FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001B606 FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001B60B 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001B610 1420 202C 0C               		dc.b $14, $20, $20, $2C, $C	
0001B615 F40C 0000 EC               		dc.b $F4, $C, 0, 0, $EC	
0001B61A EC0C 0004 EC               		dc.b $EC, $C, 0, 4, $EC	
0001B61F 08                         SME_yJy96_2D:	dc.b 8	
0001B620 EC01 2074 E4               		dc.b $EC, 1, $20, $74, $E4	
0001B625 EC05 2076 0C               		dc.b $EC, 5, $20, $76, $C	
0001B62A FC0E 207A E4               		dc.b $FC, $E, $20, $7A, $E4	
0001B62F FC0E 2086 04               		dc.b $FC, $E, $20, $86, 4	
0001B634 140C 2092 EC               		dc.b $14, $C, $20, $92, $EC	
0001B639 1420 2096 0C               		dc.b $14, $20, $20, $96, $C	
0001B63E F40C 006C EC               		dc.b $F4, $C, 0, $6C, $EC	
0001B643 EC0C 0070 EC               		dc.b $EC, $C, 0, $70, $EC	
0001B648                            		even
0001B648                            		even
0001B648                            Map_MechaSonic:
0001B648                            	include	"_maps\mechason.asm" ;unused
0001B648                            ; --------------------------------------------------------------------------------
0001B648                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001B648                            ; --------------------------------------------------------------------------------
0001B648                            
0001B648                            SME_qq5Gt:	
0001B648 0000 0000                  		dc.w SME_qq5Gt_A-SME_qq5Gt, SME_qq5Gt_38-SME_qq5Gt	
0001B64C 0000 0000                  		dc.w SME_qq5Gt_66-SME_qq5Gt, SME_qq5Gt_99-SME_qq5Gt	
0001B650 0000                       		dc.w SME_qq5Gt_CC-SME_qq5Gt	
0001B652 09                         SME_qq5Gt_A:	dc.b 9	
0001B653 E00C 0000 F8               		dc.b $E0, $C, 0, 0, $F8	
0001B658 E80C 0004 F8               		dc.b $E8, $C, 0, 4, $F8	
0001B65D F00C 0008 F8               		dc.b $F0, $C, 0, 8, $F8	
0001B662 F80C 000C F8               		dc.b $F8, $C, 0, $C, $F8	
0001B667 000C 0010 F8               		dc.b 0, $C, 0, $10, $F8	
0001B66C 080C 0014 F8               		dc.b 8, $C, 0, $14, $F8	
0001B671 100C 0018 F8               		dc.b $10, $C, 0, $18, $F8	
0001B676 F803 001C 18               		dc.b $F8, 3, 0, $1C, $18	
0001B67B E002 0020 18               		dc.b $E0, 2, 0, $20, $18	
0001B680 09                         SME_qq5Gt_38:	dc.b 9	
0001B681 100C 0023 F8               		dc.b $10, $C, 0, $23, $F8	
0001B686 080C 0027 F8               		dc.b 8, $C, 0, $27, $F8	
0001B68B 000C 002B F8               		dc.b 0, $C, 0, $2B, $F8	
0001B690 F80C 002F F8               		dc.b $F8, $C, 0, $2F, $F8	
0001B695 F00C 0033 F8               		dc.b $F0, $C, 0, $33, $F8	
0001B69A E80C 0037 F8               		dc.b $E8, $C, 0, $37, $F8	
0001B69F E00C 003B F8               		dc.b $E0, $C, 0, $3B, $F8	
0001B6A4 F803 003F 18               		dc.b $F8, 3, 0, $3F, $18	
0001B6A9 E802 0043 18               		dc.b $E8, 2, 0, $43, $18	
0001B6AE 0A                         SME_qq5Gt_66:	dc.b $A	
0001B6AF 100C 0046 F8               		dc.b $10, $C, 0, $46, $F8	
0001B6B4 080C 004A F8               		dc.b 8, $C, 0, $4A, $F8	
0001B6B9 000C 004E F8               		dc.b 0, $C, 0, $4E, $F8	
0001B6BE F80C 0052 F8               		dc.b $F8, $C, 0, $52, $F8	
0001B6C3 F00C 0056 F8               		dc.b $F0, $C, 0, $56, $F8	
0001B6C8 E80C 005A F8               		dc.b $E8, $C, 0, $5A, $F8	
0001B6CD F803 005E 18               		dc.b $F8, 3, 0, $5E, $18	
0001B6D2 E801 0062 18               		dc.b $E8, 1, 0, $62, $18	
0001B6D7 F803 0064 20               		dc.b $F8, 3, 0, $64, $20	
0001B6DC E801 0068 20               		dc.b $E8, 1, 0, $68, $20	
0001B6E1 0A                         SME_qq5Gt_99:	dc.b $A	
0001B6E2 100C 0097 F8               		dc.b $10, $C, 0, $97, $F8	
0001B6E7 080C 009B F8               		dc.b 8, $C, 0, $9B, $F8	
0001B6EC 000C 009F F8               		dc.b 0, $C, 0, $9F, $F8	
0001B6F1 F80C 00A3 F8               		dc.b $F8, $C, 0, $A3, $F8	
0001B6F6 F00C 00A7 F8               		dc.b $F0, $C, 0, $A7, $F8	
0001B6FB E80C 00AB F8               		dc.b $E8, $C, 0, $AB, $F8	
0001B700 F803 00AF 18               		dc.b $F8, 3, 0, $AF, $18	
0001B705 E801 00B3 18               		dc.b $E8, 1, 0, $B3, $18	
0001B70A F803 00B5 20               		dc.b $F8, 3, 0, $B5, $20	
0001B70F E801 00B9 20               		dc.b $E8, 1, 0, $B9, $20	
0001B714 0A                         SME_qq5Gt_CC:	dc.b $A	
0001B715 100C 00BB F8               		dc.b $10, $C, 0, $BB, $F8	
0001B71A 080C 00BF F8               		dc.b 8, $C, 0, $BF, $F8	
0001B71F 000C 00C3 F8               		dc.b 0, $C, 0, $C3, $F8	
0001B724 F80C 00C7 F8               		dc.b $F8, $C, 0, $C7, $F8	
0001B729 F00C 00CB F8               		dc.b $F0, $C, 0, $CB, $F8	
0001B72E E80C 00CF F8               		dc.b $E8, $C, 0, $CF, $F8	
0001B733 F803 00D3 18               		dc.b $F8, 3, 0, $D3, $18	
0001B738 E801 00D7 18               		dc.b $E8, 1, 0, $D7, $18	
0001B73D F803 00D9 20               		dc.b $F8, 3, 0, $D9, $20	
0001B742 E801 00DD 20               		dc.b $E8, 1, 0, $DD, $20	
0001B748 00                         		even
0001B748 00                         		even
0001B748                            Map_DinoKing:
0001B748                            	include	"_maps\DK.asm"
0001B748                            ; --------------------------------------------------------------------------------
0001B748                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001B748                            ; --------------------------------------------------------------------------------
0001B748                            
0001B748                            SME_XMwjm:	
0001B748 0000 0000                  		dc.w SME_XMwjm_6-SME_XMwjm, SME_XMwjm_20-SME_XMwjm	
0001B74C 0000                       		dc.w SME_XMwjm_3F-SME_XMwjm	
0001B74E 05                         SME_XMwjm_6:	dc.b 5	
0001B74F F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC	
0001B754 000C 0008 EC               		dc.b 0, $C, 0, 8, $EC	
0001B759 F801 000C 0C               		dc.b $F8, 1, 0, $C, $C	
0001B75E 0808 000E F4               		dc.b 8, 8, 0, $E, $F4	
0001B763 0800 001C EC               		dc.b 8, 0, 0, $1C, $EC	
0001B768 06                         SME_XMwjm_20:	dc.b 6	
0001B769 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC	
0001B76E 000C 0008 EC               		dc.b 0, $C, 0, 8, $EC	
0001B773 F801 000C 0C               		dc.b $F8, 1, 0, $C, $C	
0001B778 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
0001B77D 0700 001B EC               		dc.b 7, 0, 0, $1B, $EC	
0001B782 0800 001B EC               		dc.b 8, 0, 0, $1B, $EC	
0001B787 04                         SME_XMwjm_3F:	dc.b 4	
0001B788 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC	
0001B78D 000C 0008 EC               		dc.b 0, $C, 0, 8, $EC	
0001B792 F801 000C 0C               		dc.b $F8, 1, 0, $C, $C	
0001B797 080C 0014 EC               		dc.b 8, $C, 0, $14, $EC	
0001B79C                            		even
0001B79C                            		even
0001B79C                            Map_MegaNewt:
0001B79C                            	include "#Bosses\#BrutalNewt\meganewt.asm"
0001B79C                            ; --------------------------------------------------------------------------------
0001B79C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001B79C                            ; --------------------------------------------------------------------------------
0001B79C                            
0001B79C                            SME_KnlwL:	
0001B79C 0000 0000                  		dc.w SME_KnlwL_6-SME_KnlwL, SME_KnlwL_16-SME_KnlwL	
0001B7A0 0000                       		dc.w SME_KnlwL_26-SME_KnlwL	
0001B7A2 03                         SME_KnlwL_6:	dc.b 3	
0001B7A3 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	
0001B7A8 F400 0008 0C               		dc.b $F4, 0, 0, 8, $C	
0001B7AD FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4	
0001B7B2 03                         SME_KnlwL_16:	dc.b 3	
0001B7B3 EC06 0015 EC               		dc.b $EC, 6, 0, $15, $EC	
0001B7B8 EC09 001B FC               		dc.b $EC, 9, 0, $1B, $FC	
0001B7BD FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC	
0001B7C2 03                         SME_KnlwL_26:	dc.b 3	
0001B7C3 EC06 002A EC               		dc.b $EC, 6, 0, $2A, $EC	
0001B7C8 EC09 001B FC               		dc.b $EC, 9, 0, $1B, $FC	
0001B7CD FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC	
0001B7D2                            		even
0001B7D2                            		even
0001B7D2                            Map_Hellgirl:
0001B7D2                            	include "#Bosses\#Hellgirl\Hellgirl.asm"
0001B7D2                            ; --------------------------------------------------------------------------------
0001B7D2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001B7D2                            ; --------------------------------------------------------------------------------
0001B7D2                            
0001B7D2                            SME_nT6Nq:	
0001B7D2 0000 0000                  		dc.w SME_nT6Nq_4-SME_nT6Nq, SME_nT6Nq_1E-SME_nT6Nq	
0001B7D6 05                         SME_nT6Nq_4:	dc.b 5	
0001B7D7 E008 0000 F8               		dc.b $E0, 8, 0, 0, $F8	
0001B7DC E808 0003 F8               		dc.b $E8, 8, 0, 3, $F8	
0001B7E1 F008 0006 F8               		dc.b $F0, 8, 0, 6, $F8	
0001B7E6 F808 0009 F8               		dc.b $F8, 8, 0, 9, $F8	
0001B7EB 0008 000C F8               		dc.b 0, 8, 0, $C, $F8	
0001B7F0 05                         SME_nT6Nq_1E:	dc.b 5	
0001B7F1 E008 000F F8               		dc.b $E0, 8, 0, $F, $F8	
0001B7F6 E808 0012 F8               		dc.b $E8, 8, 0, $12, $F8	
0001B7FB F008 0015 F8               		dc.b $F0, 8, 0, $15, $F8	
0001B800 F808 0018 F8               		dc.b $F8, 8, 0, $18, $F8	
0001B805 0008 001B F8               		dc.b 0, 8, 0, $1B, $F8	
0001B80A                            		even
0001B80A                            		even
0001B80A                            Map_TailsDoll:
0001B80A                            	include "#Bosses\#Tailsdoll\tailsdoll.asm"
0001B80A                            ; --------------------------------------------------------------------------------
0001B80A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001B80A                            ; --------------------------------------------------------------------------------
0001B80A                            
0001B80A                            SME_0IYjA:	
0001B80A 0000 0000                  		dc.w SME_0IYjA_6-SME_0IYjA, SME_0IYjA_25-SME_0IYjA	
0001B80E 0000                       		dc.w SME_0IYjA_3A-SME_0IYjA	
0001B810 06                         SME_0IYjA_6:	dc.b 6	
0001B811 E008 0000 F8               		dc.b $E0, 8, 0, 0, $F8	
0001B816 E808 0003 F8               		dc.b $E8, 8, 0, 3, $F8	
0001B81B F008 0006 F8               		dc.b $F0, 8, 0, 6, $F8	
0001B820 F808 0009 F8               		dc.b $F8, 8, 0, 9, $F8	
0001B825 0008 000C F8               		dc.b 0, 8, 0, $C, $F8	
0001B82A 0808 000F F8               		dc.b 8, 8, 0, $F, $F8	
0001B82F 04                         SME_0IYjA_25:	dc.b 4	
0001B830 E50F 0012 F8               		dc.b $E5, $F, 0, $12, $F8	
0001B835 050C 0022 F8               		dc.b 5, $C, 0, $22, $F8	
0001B83A E503 0026 18               		dc.b $E5, 3, 0, $26, $18	
0001B83F 0500 002A 18               		dc.b 5, 0, 0, $2A, $18	
0001B844 04                         SME_0IYjA_3A:	dc.b 4	
0001B845 E50F 002B F8               		dc.b $E5, $F, 0, $2B, $F8	
0001B84A 050C 003B F8               		dc.b 5, $C, 0, $3B, $F8	
0001B84F E503 003F 18               		dc.b $E5, 3, 0, $3F, $18	
0001B854 0500 0043 18               		dc.b 5, 0, 0, $43, $18	
0001B85A 00                         		even
0001B85A 00                         		even
0001B85A                            Map_Crusher:
0001B85A                            	include "#Bosses\#Crusher\Crusher.asm"
0001B85A                            ; --------------------------------------------------------------------------------
0001B85A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001B85A                            ; --------------------------------------------------------------------------------
0001B85A                            
0001B85A                            SME_wampj:	
0001B85A 0000                       		dc.w SME_wampj_2-SME_wampj	
0001B85C 04                         SME_wampj_2:	dc.b 4	
0001B85D E00F 0000 F8               		dc.b $E0, $F, 0, 0, $F8	
0001B862 E007 0010 18               		dc.b $E0, 7, 0, $10, $18	
0001B867 000D 0018 F8               		dc.b 0, $D, 0, $18, $F8	
0001B86C 0005 0020 18               		dc.b 0, 5, 0, $20, $18	
0001B872 00                         		even
0001B872 00                         		even
0001B872                            ; ---------------------------------------------------------------------------
0001B872                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001B872                            ; ---------------------------------------------------------------------------
0001B872                            Map_BossItems:
0001B872                            	include "_maps\Boss items.asm"
0001B872                            ; ---------------------------------------------------------------------------
0001B872                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001B872                            ; ---------------------------------------------------------------------------
0001B872 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
0001B876 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
0001B87A 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
0001B87E 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
0001B882 01                         byte_17DE4:	dc.b 1
0001B883 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001B888 02                         byte_17DEA:	dc.b 2
0001B889 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
0001B88E F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001B893 00                         		dc.b 0
0001B894 01                         byte_17DF6:	dc.b 1
0001B895 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
0001B89A 01                         byte_17DFC:	dc.b 1
0001B89B 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
0001B8A0 01                         byte_17E02:	dc.b 1
0001B8A1 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
0001B8A6 04                         byte_17E08:	dc.b 4
0001B8A7 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
0001B8AC F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001B8B1 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001B8B6 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001B8BB 00                         		dc.b 0
0001B8BC 02                         byte_17E1E:	dc.b 2
0001B8BD 0005 0017 00               		dc.b 0,	5, 0, $17, 0
0001B8C2 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001B8C7 00                         		dc.b 0
0001B8C8 02                         byte_17E2A:	dc.b 2
0001B8C9 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
0001B8CE 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001B8D4 00                         		even
0001B8D4 00                         		even
0001B8D4                            
0001B8D4                            ; ---------------------------------------------------------------------------
0001B8D4                            ; Object 77 - Silver Sonic mk 2 (LZ)
0001B8D4                            ; ---------------------------------------------------------------------------
0001B8D4                            
0001B8D4                            Obj77:
0001B8D4 7000                       		moveq	#0,d0
0001B8D6 1028 0024                  		move.b	$24(a0),d0
0001B8DA 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001B8DE 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001B8E2                            ; ===========================================================================
0001B8E2                            
0001B8E2                            Obj77_Index:
0001B8E2 0000                       		dc.w Obj77_Main-Obj77_Index
0001B8E4 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001B8E6                            ; ===========================================================================
0001B8E6                            
0001B8E6                            Obj77_Main:
0001B8E6 5428 0024                  		addq.b	#2,$24(a0)
0001B8EA 217C 0001 B576 0004        		move.l	#Map_SilvSon,4(a0)
0001B8F2 317C 0480 0002             		move.w	#($9000/$20),2(a0)
0001B8F8 117C 0004 0001             		move.b	#4,1(a0)
0001B8FE 117C 0020 0019             		move.b	#$20,$19(a0)
0001B904 117C 0003 0018             		move.b	#3,$18(a0)
0001B90A 3168 0008 0030             		move.w	8(a0),$30(a0)					; copy X-pos to secondary X-pos
0001B910 3168 000C 0038             		move.w	$C(a0),$38(a0)					; copy Y-pos to secondary Y-pos
0001B916 117C 0005 0020             		move.b	#5,$20(a0)						; set touch response
0001B91C 117C 000C 0021             		move.b  #var_BHits_LZ,$21(a0)
0001B922 4EB9 0000 0000                             jsr (BossStarLight_Ballhog_RobotnikHud).l
0001B928                            
0001B928                            Obj77_ShipMain:
0001B928 7000                       		moveq	#0,d0
0001B92A 1028 0025                  		move.b	$25(a0),d0
0001B92E 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001B932 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001B936 6100 0000                  		bsr.w	Obj77_ShipProcess
0001B93A 43F9 0001 B3BE             		lea	(Ani_SilvSon).l,a1
0001B940 4EB9 0000 D3EA             		jsr	(AnimateSprite).l
0001B946 1028 0022                  		move.b	$22(a0),d0
0001B94A 0200 0003                  		andi.b	#3,d0
0001B94E 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B954 8128 0001                  		or.b	d0,1(a0)
0001B958 4EF9 0001 045A             		jmp	DisplaySprite
0001B95E                            ; ===========================================================================
0001B95E                            
0001B95E                            Obj77_ShipIndex:
0001B95E 0000                       		dc.w Obj77_ShipStart-Obj77_ShipIndex			; 0
0001B960 0000                       		dc.w Obj77_MoveLeft-Obj77_ShipIndex			; 2
0001B962 0000                       		dc.w Obj77_ShipMove-Obj77_ShipIndex			; 4
0001B964 0000                       		dc.w Obj77_MoveLeftRight-Obj77_ShipIndex		; 6
0001B966 0000                       		dc.w Obj77_Parabola-Obj77_ShipIndex			; 8
0001B968                            Obj77_End_ShipIndex
0001B968 0000                       		dc.w Obj77_Explode-Obj77_ShipIndex			; $A
0001B96A 0000                       		dc.w Obj77_ShipFall-Obj77_ShipIndex			; $C
0001B96C                            ; ===========================================================================
0001B96C                            
0001B96C                            Obj77_ShipProcess:
0001B96C                            		; Move ship slightly up and down during the flight
0001B96C                            
0001B96C 0C28 000A 0025             		cmpi.b	#(Obj77_End_ShipIndex-Obj77_ShipIndex),$25(a0)	; is routine more or equals to 8?
0001B972 6400                       		bcc.s	locret_1784Au			; if yes, branch
0001B974                            
0001B974 1028 003F                  		move.b	$3F(a0),d0			; Y-amplitude
0001B978 4EB9 0000 2CC8             		jsr	(CalcSine).l
0001B97E EC40                       		asr.w	#6,d0				; d0 contains sine
0001B980 D068 0038                  		add.w	$38(a0),d0			; add secondary Y-pos to d0
0001B984 3140 000C                  		move.w	d0,$C(a0)			; and we've got Y-pos with the amplitude
0001B988 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B98E 5428 003F                  		addq.b	#2,$3F(a0)			; reduce the amplitude
0001B992                            
0001B992                            		; Touch repsonse stuff	
0001B992 4A28 0022                  		tst.b	$22(a0)					; was boss defeated?
0001B996 6B00                       		bmi.s	Obj77_ShipGone		; if yes, branch
0001B998 4A28 0020                  		tst.b	$20(a0)					; is touch response zero?
0001B99C 6600                       		bne.s	locret_1784Au			; if not, branch
0001B99E 4A28 003E                  		tst.b	$3E(a0)					; is flashes counter zero?
0001B9A2 6600                       		bne.s	Obj77_ShipFlash		; if not, branch
0001B9A4 117C 0020 003E             		move.b	#$20,$3E(a0)		; set number of	times to flash
0001B9AA 303C 00AC                  		move.w	#$AC,d0
0001B9AE 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B9B4                            
0001B9B4                            Obj77_ShipFlash:
0001B9B4 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001B9B8 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001B9BA 0828 0000 003E             		btst    #0,$3E(a0)
0001B9C0 6600                       		bne.s   loc_1783Cu
0001B9C2 303C 0000                  		move.w	#$000,d0	; move 0EEE (white) to d0
0001B9C6                            
0001B9C6                            loc_1783Cu:
0001B9C6 3280                       		move.w	d0,(a1)		; apply colour stored in d0
0001B9C8 5328 003E                  		subq.b	#1,$3E(a0)	; subtract 1 from flashes counter
0001B9CC 6600                       		bne.s	locret_1784Au	; if flashes counter is not zero, branch
0001B9CE 117C 000F 0020             		move.b	#$F,$20(a0)	; restore touch responsibility
0001B9D4                            
0001B9D4                            locret_1784Au:
0001B9D4 4E75                       		rts
0001B9D6                            ; ===========================================================================
0001B9D6                            ;loc_1784C:
0001B9D6                            Obj77_ShipGone:
0001B9D6 7064                       		moveq	#100,d0
0001B9D8 6100 0000                  		bsr.w	AddPoints	; add 1000 points
0001B9DC 117C 000A 0025             		move.b	#(Obj77_End_ShipIndex-Obj77_ShipIndex),$25(a0)	; set routine to 8 (Obj3D_Explode)
0001B9E2 317C 00B3 003C             		move.w	#179,$3C(a0)	; set timer to 179 (3 seconds)
0001B9E8 4E75                       		rts
0001B9EA                            ; ===========================================================================
0001B9EA                            
0001B9EA                            Obj77_Attack:
0001B9EA 0C28 0000 002A                             cmpi.b  #0,$2A(a0)
0001B9F0 6700                                       beq.s   locret_178A2u
0001B9F2 0C28 0001 002A                             cmpi.b  #1,$2A(a0)
0001B9F8 6700                                       beq.s   locret_178A2u
0001B9FA 0C28 0003 002A                             cmpi.b  #3,$2A(a0)
0001BA00 6700 0000                                  beq.w   locret_178A2u
0001BA04 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001BA08 0240 000F                  		andi.w	#$F,d0
0001BA0C 6600                       		bne.s	locret_178A2u
0001BA0E 4EB9 0001 08E0             		jsr	(SingleObjLoad).l
0001BA14 6600                       		bne.s	locret_178A2u
0001BA16 12BC 0020                  		move.b	#$20,(a1)	; load missile object
0001BA1A 3368 0008 0008             		move.w	8(a0),8(a1)
0001BA20 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BA26 0669 001C 000C             		addi.w	#$1C,$C(a1)
0001BA2C 337C 0400 0012                             move.w	#$400,$12(a1)
0001BA32 303C 00A5                  		move.w	#$A5,d0
0001BA36 4EF9 0000 12D0             		jmp	(PlaySound_Special).l ;	play explosion sound
0001BA3C                            
0001BA3C                            locret_178A2u:
0001BA3C 4E75                       		rts
0001BA3E                            
0001BA3E                            Obj77_ShipStart:
0001BA3E 317C 0100 0012             		move.w	#$100,$12(a0)			; move ship down
0001BA44 6100 F730                  		bsr.w	BossMove
0001BA48 0C68 0267 0038             		cmpi.w	#$267,$38(a0)			; has the ship reached $338 on Y-axis?
0001BA4E 6600                       		bne.s	Obj77_ShipStart_Locret 	; if not, branch
0001BA50 317C 0000 0012             		move.w	#0,$12(a0)				; stop ship
0001BA56 5428 0025                  		addq.b	#2,$25(a0)				; goto next routine
0001BA5A                            
0001BA5A                            Obj77_ShipStart_Locret:
0001BA5A 4E75                       		rts
0001BA5C                            ; ===========================================================================
0001BA5C                            
0001BA5C                            Obj77_MoveLeft:
0001BA5C 317C FE00 0010             		move.w	#-$200,$10(a0)			; move left
0001BA62                            		;move.w	#-$55,$12(a0)			; move slightly up
0001BA62 117C 0000 001C                             move.b  #0,$1C(a0)	; set animation
0001BA68 6100 F70C                  		bsr.w	BossMove
0001BA6C 0C68 2665 0030             		cmpi.w	#$2665,$30(a0)			; has the boss reached $2A00 on X-axis?
0001BA72 6600                       		bne.s	locret_17916uu				; if not, branch
0001BA74 217C 0000 0000 0010        		move.l	#0,$10(a0)				; stop him
0001BA7C 5428 0025                  		addq.b	#2,$25(a0)				; goto next routine
0001BA80 317C 0030 003C                        	move.w	#$30,$3C(a0)			; set timer to $77
0001BA86 117C 0000 002A                             move.b	#0,$2A(a0)
0001BA8C                            
0001BA8C                            locret_17916uu:
0001BA8C 4E75                       		rts
0001BA8E                            ; ===========================================================================
0001BA8E                            
0001BA8E                            Obj77_ShipMove:
0001BA8E 5368 003C                  		subq.w	#1,$3C(a0)					; subtract 1 from timer
0001BA92 6AF8                       		bpl.s	locret_17916uu					; if time remains, branch
0001BA94 5428 0025                  		addq.b	#2,$25(a0)
0001BA98 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001BA9E 317C 0200 0010             		move.w	#$200,$10(a0)
0001BAA4 0828 0000 0022             		btst	#0,$22(a0)
0001BAAA 6600                       		bne.s	Obj77_MoveLeftRight
0001BAAC 4468 0010                  		neg.w	$10(a0)
0001BAB0                            
0001BAB0                            Obj77_MoveLeftRight:
0001BAB0 6100 F6C4                  		bsr.w	BossMove
0001BAB4 5368 003C                  		subq.w	#1,$3C(a0)					; subtract 1 from timer
0001BAB8 6AD2                       		bpl.s	locret_17916uu					; if time remains, branch
0001BABA 5428 0025                  		addq.b	#2,$25(a0)
0001BABE 0C28 0001 002A                             cmpi.b  #1,$2A(a0)
0001BAC4 6700 0000                                  beq.w   WAKFAKK
0001BAC8 0C28 0002 002A                             cmpi.b  #2,$2A(a0)
0001BACE 6700                                       beq.s   AFKU2
0001BAD0 0C28 0003 002A                             cmpi.b  #3,$2A(a0)
0001BAD6 6700 0000                                  beq.w   Obj77_MegaFire
0001BADA 317C 0100 0012             		move.w	#$100,$12(a0)
0001BAE0 317C 0200 0010             		move.w	#$200,$10(a0)
0001BAE6 6000                                       bra.s   ContinueObj77
0001BAE8                            
0001BAE8                            AFKU2:
0001BAE8 317C 0087 0012             		move.w	#$87,$12(a0)
0001BAEE 317C 0400 0010             		move.w	#$400,$10(a0)
0001BAF4 6000                                       bra.s   ContinueObj77
0001BAF6                            
0001BAF6                            WAKFAKK:
0001BAF6 317C 021E 0012             		move.w	#$21E,$12(a0)
0001BAFC 317C 013E 0010             		move.w	#$13E,$10(a0)
0001BB02 103C 00BE                  		move.b	#$BE,d0			
0001BB06 4EB8 12D0                  		jsr	PlaySound_Special	; play rolling sound 
0001BB0A 117C 0001 001C                             move.b  #1,$1C(a0)	; set animation
0001BB10 117C 009A 0020                             move.b	#$9A,$20(a0)
0001BB16                            
0001BB16                            ContinueObj77:
0001BB16 0828 0000 0022             		btst	#0,$22(a0)					; Check the ballhog boss orientation
0001BB1C 6700                       		beq.s	@1
0001BB1E 4468 0010                  		neg.w	$10(a0)
0001BB22 317C 003F 003C             @1		move.w	#$3F,$3C(a0)
0001BB28 0868 0000 0022             		bchg	#0,$22(a0)
0001BB2E 6000 0000                                  bra.w   locret_1794Cuu
0001BB32                            
0001BB32                            Obj77_MegaFire:
0001BB32 4EB9 0001 08E0                             jsr	(SingleObjLoad).l
0001BB38 6600                       		bne.s	locret_1794Cuu
0001BB3A 12BC 0020                  		move.b	#$20,(a1)	; load missile object
0001BB3E 4EB9 0000 2CA2                             jsr   (RandomNumber).l         ; get a random number
0001BB44 0200 0001                                  andi.b   #1,d0               ; get a number equal or lower than 1 (0 until 1)
0001BB48 6600 0000                                  bne.w    flyfromright ; if it isn't 0, branch
0001BB4C 6700 0000                                  beq.w    flyfromleft ; if it is 0, branch
0001BB50                            
0001BB50                            flyfromright:
0001BB50 337C 2718 0008             		move.w	#$2718,8(a1)
0001BB56 4EB9 0000 2CA2                             jsr   (RandomNumber).l         ; get a random number
0001BB5C 0200 0001                                  andi.b   #1,d0               ; get a number equal or lower than 1 (0 until 1)
0001BB60 6600 0000                                  bne.w    HIGHERY1 ; if it isn't 0, branch
0001BB64 337C 02EA 000C             		move.w	#$2EA,$C(a1)
0001BB6A 6000                                       bra.s   SetBullSpeed
0001BB6C                            
0001BB6C                            HIGHERY1:
0001BB6C 337C 02BF 000C                             move.w	#$2BF,$C(a1)
0001BB72                            
0001BB72                            SetBullSpeed:
0001BB72 337C FC00 0010                             move.w	#-$400,$10(a1)
0001BB78 6000                                       bra.s   PlayShootSounder
0001BB7A                            
0001BB7A                            flyfromleft:
0001BB7A 337C 25D0 0008             		move.w	#$25D0,8(a1)
0001BB80 4EB9 0000 2CA2                             jsr   (RandomNumber).l         ; get a random number
0001BB86 0200 0001                                  andi.b   #1,d0               ; get a number equal or lower than 1 (0 until 1)
0001BB8A 6600                                       bne.s    HIGHERY21 ; if it isn't 0, branch
0001BB8C 337C 02EA 000C             		move.w	#$2EA,$C(a1)
0001BB92 6000                                       bra.s   SetBullSpeed2
0001BB94                            
0001BB94                            HIGHERY21:
0001BB94 337C 02BF 000C                             move.w	#$2BF,$C(a1)
0001BB9A                            
0001BB9A                            SetBullSpeed2:
0001BB9A 337C 0400 0010                             move.w	#$400,$10(a1)
0001BBA0                            
0001BBA0                            PlayShootSounder:
0001BBA0 303C 00D2                  		move.w	#$D2,d0
0001BBA4 4EF9 0000 12D0             		jmp	(PlaySound_Special).l ;	play explosion sound
0001BBAA                            
0001BBAA                            locret_1794Cuu:
0001BBAA 4E75                       		rts
0001BBAC                            ; ===========================================================================
0001BBAC                            
0001BBAC                            Obj77_Parabola:
0001BBAC 5368 003C                  		subq.w	#1,$3C(a0)				; subtract 1 from timer
0001BBB0 6AF8                       		bpl.s	locret_1794Cuu				; if time remains, branch
0001BBB2 6100 F5C2                  		bsr.w	BossMove
0001BBB6 6100 FE32                  		bsr.w	Obj77_Attack
0001BBBA 0C28 0001 002A                             cmpi.b  #1,$2A(a0)
0001BBC0 6700 0000                                  beq.w   WAKFAKUS
0001BBC4 5968 0012                  		subq.w	#4,$12(a0)				; Subtract object Y speed
0001BBC8 6AE0                       		bpl.s	locret_1794Cuu
0001BBCA 6000                                       bra.s   Obj77_Parabola_Cont
0001BBCC                            
0001BBCC                            WAKFAKUS:                
0001BBCC 5B68 0012                  		subq.w	#5,$12(a0)				; Subtract object Y speed
0001BBD0 6AD8                       		bpl.s	locret_1794Cuu
0001BBD2                            
0001BBD2                            Obj77_Parabola_Cont:
0001BBD2 0C68 0260 0038             		cmpi.w	#$260,$38(a0)
0001BBD8 66D0                       		bne.s	locret_1794Cuu
0001BBDA 5528 0025                  		subq.b	#2,$25(a0)
0001BBDE 217C 0000 0000 0010        		move.l	#0,$10(a0)
0001BBE6 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001BBEC 117C 0000 001C                             move.b  #0,$1C(a0)	; set animation
0001BBF2 117C 0005 0020             		move.b	#5,$20(a0)
0001BBF8 5228 002A                                  addq.b  #1,$2A(a0)
0001BBFC 0C28 0005 002A                             cmpi.b  #5,$2A(a0)
0001BC02 6700                                       beq.s   Obj77_ZeroVram
0001BC04 6000                                       bra.s   Obj77_ContWait
0001BC06                            
0001BC06                            Obj77_ZeroVram:
0001BC06 117C 0000 002A                             move.b	#0,$2A(a0)
0001BC0C                            
0001BC0C                            Obj77_ContWait:
0001BC0C 4E75                       		rts
0001BC0E                            ; ===========================================================================
0001BC0E                            
0001BC0E                            ;loc_1797A:
0001BC0E                            Obj77_Explode:				; XREF: Obj3D_ShipIndex
0001BC0E 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from timer
0001BC12 6B00                       		bmi.s	loc_17984uu	; if timer is over, branch
0001BC14 6000 F51E                  		bra.w	BossDefeated
0001BC18                            ; ===========================================================================
0001BC18                            
0001BC18                            loc_17984uu:
0001BC18 08E8 0000 0022             		bset	#0,$22(a0)	; set orientation to 1 (right)
0001BC1E 08A8 0007 0022             		bclr	#7,$22(a0)	; clear defeated flag
0001BC24 4268 0010                  		clr.w	$10(a0)		; clear X-velocity
0001BC28 5428 0025                  		addq.b	#2,$25(a0)
0001BC2C 317C FFDA 003C             		move.w	#-$26,$3C(a0)	; set timer to -$26
0001BC32 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001BC36 6600                       		bne.s	locret_179AAaa
0001BC38 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001BC3E                            
0001BC3E                            locret_179AAaa:
0001BC3E 4E75                       		rts
0001BC40                            ; ===========================================================================
0001BC40                            
0001BC40                            ;loc_179AC:
0001BC40                            Obj77_ShipFall:	                                          ; XREF: Obj3D_ShipIndex
0001BC40 303C 0099                  		move.w	#$99,d0
0001BC44 4EB9 0000 12CA             		jsr	(PlaySound).l	; play WIN sound
0001BC4A 4268 0012                                  clr.w	$12(a0)		; clear Y-velocity
0001BC4E 317C 0000 0014                             move.w  #$0,$14(a0)     ;clear all speeds
0001BC54 11FC 0001 F7CC                             move.b	#1,($FFFFF7CC).w	; lock	controls
0001BC5A 337C 0000 0014                             move.w	#0,$14(a1)	; stop Sonic moving
0001BC60 31FC 0008 F602                             move.w	#(Right)<<0,(SonicControl) ; make Sonic stand
0001BC66 11FC 0001 FFFE                             move.b	#1,($FFFFFFFE).w ;set win flag
0001BC6C 4EB9 0001 1D18                             jsr     GotThroughAct
0001BC72 4EF9 0001 0496                             jmp	(DeleteObject).l
0001BC78                            ; ===========================================================================
0001BC78                            ; Unused
0001BC78 5478 F72A                                  addq.w	#2,($FFFFF72A).w ; add 2 to camera's right boundary
0001BC7C 4E75                       		rts
0001BC7E                            
0001BC7E                            ; ===========================================================================
0001BC7E                            ; ---------------------------------------------------------------------------
0001BC7E                            ; Object 8E - Whisp King (SYZ)
0001BC7E                            ; ---------------------------------------------------------------------------
0001BC7E                            Obj8E:
0001BC7E 7000                       		moveq	#0,d0
0001BC80 1028 0024                  		move.b	$24(a0),d0
0001BC84 323B 0000                  		move.w	Obj8E_Index(pc,d0.w),d1
0001BC88 4EFB 1000                  		jmp	Obj8E_Index(pc,d1.w)
0001BC8C                            ; ===========================================================================
0001BC8C                            
0001BC8C                            Obj8E_Index:
0001BC8C 0000                       		dc.w Obj8E_Main-Obj8E_Index
0001BC8E 0000                       		dc.w Obj8E_ShipMain-Obj8E_Index
0001BC90                            ; ===========================================================================
0001BC90                            
0001BC90                            Obj8E_Main:
0001BC90 5428 0024                  		addq.b	#2,$24(a0)
0001BC94 217C 0001 B5F2 0004        		move.l	#Map_WhispKing,4(a0)
0001BC9C 317C 0400 0002             		move.w	#($8000/$20),2(a0)
0001BCA2 117C 0004 0001             		move.b	#4,1(a0)
0001BCA8 117C 0020 0019             		move.b	#$20,$19(a0)
0001BCAE 117C 0003 0018             		move.b	#3,$18(a0)
0001BCB4 3168 0008 0030             		move.w	8(a0),$30(a0)					; copy X-pos to secondary X-pos
0001BCBA 3168 000C 0038             		move.w	$C(a0),$38(a0)					; copy Y-pos to secondary Y-pos
0001BCC0 117C 000C 0020             		move.b	#$C,$20(a0)
0001BCC6 117C 000C 0021             		move.b  #var_BHits_LZ,$21(a0)
0001BCCC 4EB9 0000 0000                             jsr 	(BossStarLight_Ballhog_RobotnikHud).l
0001BCD2                            
0001BCD2                            Obj8E_ShipMain:
0001BCD2 7000                       		moveq	#0,d0
0001BCD4 1028 0025                  		move.b	$25(a0),d0
0001BCD8 323B 0000                  		move.w	Obj8E_ShipIndex(pc,d0.w),d1
0001BCDC 4EBB 1000                  		jsr	Obj8E_ShipIndex(pc,d1.w)
0001BCE0 6100 0000                  		bsr.w	Obj8E_ShipProcess
0001BCE4 43F9 0001 B412             		lea	(Ani_WhispKing).l,a1
0001BCEA 4EB9 0000 D3EA             		jsr	(AnimateSprite).l
0001BCF0 1028 0022                  		move.b	$22(a0),d0
0001BCF4 0200 0003                  		andi.b	#3,d0
0001BCF8 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001BCFE 8128 0001                  		or.b	d0,1(a0)
0001BD02 4EF9 0001 045A             		jmp	DisplaySprite
0001BD08                            ; ===========================================================================
0001BD08 0000                       Obj8E_ShipIndex:dc.w Obj8E_Start-Obj8E_ShipIndex	; 0
0001BD0A 0000                       		dc.w Obj8E_MoveLeft-Obj8E_ShipIndex	; 2
0001BD0C 0000                       		dc.w Obj8E_MoveRight-Obj8E_ShipIndex	; 4
0001BD0E 0000                       		dc.w Obj8E_MoveLeft2-Obj8E_ShipIndex	; 6
0001BD10 0000                       		dc.w Obj8E_MoveDaun-Obj8E_ShipIndex	; 8
0001BD12 0000                       		dc.w Obj8E_MoveRight2-Obj8E_ShipIndex	; $A
0001BD14 0000                       		dc.w Obj8E_MoveUp-Obj8E_ShipIndex	; $C
0001BD16 0000                       		dc.w Obj8E_MoveLeft3-Obj8E_ShipIndex	; $E
0001BD18 0000                       		dc.w Obj8E_MoveDiagonal-Obj8E_ShipIndex ; 10
0001BD1A 0000                       		dc.w Obj8E_MoveUp2-Obj8E_ShipIndex 	; 12
0001BD1C 0000                       		dc.w Obj8E_MoveDiagonal2-Obj8E_ShipIndex ; 14
0001BD1E 0000                       		dc.w Obj8E_MoveUp3-Obj8E_ShipIndex 	; 16
0001BD20 0000                       		dc.w Obj8E_MoveRight3-Obj8E_ShipIndex	; 18
0001BD22                            Obj8E_End_ShipIndex
0001BD22 0000                       		dc.w Obj8E_Explode-Obj8E_ShipIndex	; 1A
0001BD24 0000                       		dc.w Obj8E_ShipFall-Obj8E_ShipIndex	; 1C
0001BD26                            ; ===========================================================================
0001BD26                            
0001BD26                            ; This routine does the main ship stuff
0001BD26                            
0001BD26                            Obj8E_ShipProcess:
0001BD26                            		; Move ship slightly up and down during the flight
0001BD26                            
0001BD26 0C28 001A 0025             		cmpi.b	#(Obj8E_End_ShipIndex-Obj8E_ShipIndex),$25(a0)	; is routine more or equals to 8?
0001BD2C 6400                       		bcc.s	locret_1784A			; if yes, branch
0001BD2E                            
0001BD2E 1028 003F                  		move.b	$3F(a0),d0	; Y-amplitude
0001BD32 4EB9 0000 2CC8             		jsr	(CalcSine).l
0001BD38 EC40                       		asr.w	#6,d0		; d0 contains sine
0001BD3A D068 0038                  		add.w	$38(a0),d0	; add secondary Y-pos to d0
0001BD3E 3140 000C                  		move.w	d0,$C(a0)	; and we've got Y-pos with the amplitude
0001BD42 3168 0030 0008             		move.w	$30(a0),8(a0)
0001BD48 5428 003F                  		addq.b	#2,$3F(a0)	; reduce the amplitude
0001BD4C                            		
0001BD4C                            		; Touch repsonse stuff
0001BD4C 4A28 0022                  		tst.b	$22(a0)		; was boss defeated?
0001BD50 6B00                       		bmi.s	Obj8E_ShipGone	; if yes, branch
0001BD52 4A28 0020                  		tst.b	$20(a0)		; is touch response zero?
0001BD56 6600                       		bne.s	locret_1784A	; if not, branch
0001BD58 4A28 003E                  		tst.b	$3E(a0)		; is flashes counter zero?
0001BD5C 6600                       		bne.s	Obj8E_ShipFlash	; if not, branch
0001BD5E 117C 0040 003E             		move.b	#$40,$3E(a0)	; set number of	times to flash
0001BD64 303C 00AC                  		move.w	#$AC,d0
0001BD68 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001BD6E                            
0001BD6E                            Obj8E_ShipFlash:
0001BD6E 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001BD72 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001BD74 0828 0000 003E             		btst    #0,$3E(a0)
0001BD7A 6600                       		bne.s   loc_1783C
0001BD7C 303C 0000                  		move.w	#$000,d0	; move 0EEE (white) to d0
0001BD80                            
0001BD80                            loc_1783C:
0001BD80 3280                       		move.w	d0,(a1)		; apply colour stored in d0
0001BD82 5328 003E                  		subq.b	#1,$3E(a0)	; subtract 1 from flashes counter
0001BD86 6600                       		bne.s	locret_1784A	; if flashes counter is not zero, branch
0001BD88 117C 000F 0020             		move.b	#$F,$20(a0)	; restore touch responsibility
0001BD8E                            
0001BD8E                            locret_1784A:
0001BD8E 4E75                       		rts	
0001BD90                            ; ===========================================================================
0001BD90                            ;loc_1784C:
0001BD90                            Obj8E_ShipGone:				; XREF: Obj8E_ShipProcess
0001BD90 7064                       		moveq	#100,d0
0001BD92 6100 0000                  		bsr.w	AddPoints	; add 1000 points
0001BD96 117C 001A 0025             		move.b	#$1A,$25(a0)	; set routine to 8 (Obj8E_Explode)
0001BD9C 317C 00B3 003C             		move.w	#179,$3C(a0)	; set timer to 179 (3 seconds)
0001BDA2 4E75                       		rts
0001BDA4                            
0001BDA4                            ; ==========================================================================
0001BDA4                            
0001BDA4                            Obj8E_Start:			; XREF: Obj8E_ShipIndex
0001BDA4 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
0001BDAA 117C 001C 0033                             move.b  #$1C,$33(a0)
0001BDB0 117C 0000 001C             		move.b	#0,$1C(a0)	; set animation
0001BDB6 6100 F3BE                  		bsr.w	BossMove
0001BDBA 0C68 0335 0038             		cmpi.w	#$335,$38(a0)	; has the ship reached $335 on Y-axis?
0001BDC0 6600                       		bne.s	Obj8E_ShipStart_Locret ; if not, branch
0001BDC2 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
0001BDC8 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
0001BDCC                            
0001BDCC                            Obj8E_ShipStart_Locret:
0001BDCC 4E75                       		rts
0001BDCE                            ; ===========================================================================
0001BDCE                            
0001BDCE                            Obj8E_MoveLeft:				; XREF: Obj8E_ShipIndex
0001BDCE 317C FE00 0010             		move.w	#-$200,$10(a0)	; move left
0001BDD4 6100 F3A0                  		bsr.w	BossMove
0001BDD8 5328 0033                  		subq.b	#1,$33(a0)				; subtract 1 from timer
0001BDDC 6A00 0000                  		bpl.w	Obj8E_MoveLeftCont
0001BDE0                            				
0001BDE0                            Obj8E_DropCannonball:
0001BDE0 0C68 31D3 0030             		cmpi.w	#$31D3,$30(a0)	
0001BDE6 6700 0000                  		beq.w	loc_17916	
0001BDEA 4EB9 0001 08E0             		jsr	SingleObjLoad
0001BDF0 6600 0000                  		bne.w	Obj8E_MoveLeftCont
0001BDF4 12BC 0020                  		move.b	#$20,0(a1)	; load missile object
0001BDF8 3368 0008 0008             		move.w	8(a0),8(a1)
0001BDFE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BE04 0669 001C 000C             		addi.w	#$1C,$C(a1)
0001BE0A 3038 D008                  		move.w ($FFFFD000+8).w,d0 ; Çàãðóçèòü X ïîçèöèþ Ñîíèêà.
0001BE0E 9068 0008                  		sub.w 	$8(a0),d0 ; Âû÷åñòü ïîçèöèþ îáúåêòà èç ïîçèöèè Ñîíèêà. Òàê ìû ïîëó÷èì äèñòàíöèþ Ñîíèêà ê îáúåêòó.
0001BE12 E540                       		asl.w 	#2,d0 ; Àðèôìåòè÷åñêèé ñäâèã(2 ðàçà). Íóæíî óâåëè÷èòü çíà÷åíèå äëÿ ïîëó÷åíèÿ íîðìàëüíîé ñêîðîñòè.
0001BE14 3340 0010                                  move.w 	d0,$10(a1);
0001BE18 337C 0400 0012             		move.w 	#$400,$12(a1) ; Äîáàâèòü ðåçóëüòàò â àäðåñ ñêîðîñòè îáúåêòà.
0001BE1E 117C 0030 0033                             move.b  #$30,$33(a0)
0001BE24                            
0001BE24                            Obj8E_MoveLeftCont:
0001BE24 0C68 31D3 0030             		cmpi.w	#$31D3,$30(a0)	
0001BE2A 6600 0000                  		bne.w	loc_17916	; if not, branch
0001BE2E 0868 0000 0022                             bchg	#0,$22(a0)	; reverse direction of the ship
0001BE34 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001BE3A 317C 0000 0012             		move.w	#0,$12(a0)	;
0001BE40 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001BE44                            
0001BE44                            Obj8E_MoveRight:
0001BE44 317C 0200 0010             		move.w	#$200,$10(a0)	; move right
0001BE4A 6100 F32A                  		bsr.w	BossMove
0001BE4E 5328 0033                  		subq.b	#1,$33(a0)				; subtract 1 from timer
0001BE52 6A00 0000                  		bpl.w	Obj8E_MoveRightCont
0001BE56                            				
0001BE56                            Obj8E_DropCannonball2:
0001BE56 0C68 31D3 0030             		cmpi.w	#$31D3,$30(a0)	
0001BE5C 6700 0000                  		beq.w	loc_17916	
0001BE60 4EB9 0001 08E0             		jsr	SingleObjLoad
0001BE66 6600 0000                  		bne.w	Obj8E_MoveRightCont
0001BE6A 12BC 0020                  		move.b	#$20,0(a1)	; load missile object
0001BE6E 3368 0008 0008             		move.w	8(a0),8(a1)
0001BE74 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BE7A 0669 001C 000C             		addi.w	#$1C,$C(a1)
0001BE80                                            ;move.w #$0,$10(a1)
0001BE80 3038 D008                  		move.w ($FFFFD000+8).w,d0 ; Çàãðóçèòü X ïîçèöèþ Ñîíèêà.
0001BE84 9068 0008                  		sub.w 	$8(a0),d0 ; Âû÷åñòü ïîçèöèþ îáúåêòà èç ïîçèöèè Ñîíèêà. Òàê ìû ïîëó÷èì äèñòàíöèþ Ñîíèêà ê îáúåêòó.
0001BE88 E540                       		asl.w 	#2,d0 ; Àðèôìåòè÷åñêèé ñäâèã(2 ðàçà). Íóæíî óâåëè÷èòü çíà÷åíèå äëÿ ïîëó÷åíèÿ íîðìàëüíîé ñêîðîñòè.
0001BE8A 3340 0010                                  move.w 	d0,$10(a1);
0001BE8E 337C 0400 0012             		move.w 	#$400,$12(a1) ; Äîáàâèòü ðåçóëüòàò â àäðåñ ñêîðîñòè îáúåêòà.
0001BE94 117C 0030 0033                             move.b  #$30,$33(a0)
0001BE9A                            
0001BE9A                            Obj8E_MoveRightCont:
0001BE9A 0C68 32ED 0030             		cmpi.w	#$32ED,$30(a0)	
0001BEA0 6600 0000                  		bne.w	loc_17916	; if not, branch
0001BEA4 0868 0000 0022                             bchg	#0,$22(a0)	; reverse direction of the ship
0001BEAA 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001BEB0 317C 0000 0012             		move.w	#0,$12(a0)	;
0001BEB6 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001BEBA                            
0001BEBA                            Obj8E_MoveLeft2:				; XREF: Obj8E_ShipIndex
0001BEBA 317C FE00 0010             		move.w	#-$200,$10(a0)	; move left
0001BEC0 6100 F2B4                  		bsr.w	BossMove
0001BEC4 0C68 31D3 0030             		cmpi.w	#$31D3,$30(a0)	
0001BECA 6600 0000                  		bne.w	loc_17916	; if not, branch
0001BECE 0868 0000 0022                             bchg	#0,$22(a0)	; reverse direction of the ship
0001BED4 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001BEDA 317C 0000 0012             		move.w	#0,$12(a0)	;
0001BEE0 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001BEE4                            
0001BEE4                            Obj8E_MoveDaun:
0001BEE4 317C 0100 0012             		move.w  #$100,$12(a0)
0001BEEA 6100 F28A                  		bsr.w   BossMove
0001BEEE 0C68 03BC 0038             		cmpi.w  #$3BC,$38(a0)
0001BEF4 6600 0000                  		bne.w   loc_17916
0001BEF8 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001BEFE 317C 0000 0012             		move.w	#0,$12(a0)	;
0001BF04 4EB9 0001 08E0             		jsr 	SingleObjLoad
0001BF0A 6600                       		bne.s	Obj8E_MoveRight2
0001BF0C 12BC 0055                  		move.b	#$55,0(a1)	; load fly enemy
0001BF10 337C 32F5 0008             		move.w	#$32F5,8(a1)
0001BF16 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BF1C 137C 0002 0028             		move.b  #2,$28(a1)	; set subtype to 2
0001BF22 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001BF26                            
0001BF26                            Obj8E_MoveRight2:
0001BF26 317C 0200 0010             		move.w	#$200,$10(a0)	; move right
0001BF2C 6100 F248                  		bsr.w	BossMove
0001BF30 0C68 32ED 0030             		cmpi.w	#$32ED,$30(a0)	
0001BF36 6600 0000                  		bne.w	loc_17916	; if not, branch
0001BF3A 0868 0000 0022                             bchg	#0,$22(a0)	; reverse direction of the ship
0001BF40 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001BF46 317C 0000 0012             		move.w	#0,$12(a0)	;
0001BF4C 4EB9 0001 08E0             		jsr 	SingleObjLoad
0001BF52 66D2                       		bne.s	Obj8E_MoveRight2
0001BF54 12BC 0055                  		move.b	#$55,0(a1)	; load fly enemy
0001BF58 337C 31D0 0008             		move.w	#$31D0,8(a1)
0001BF5E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BF64 137C 0002 0028             		move.b  #2,$28(a1)	; set subtype to 2
0001BF6A 0869 0000 0022             		bchg	#0,$22(a1)
0001BF70 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001BF74                            
0001BF74                            Obj8E_MoveUp:
0001BF74 317C FF00 0012             		move.w  #-$100,$12(a0)
0001BF7A 6100 F1FA                  		bsr.w  BossMove
0001BF7E 0C68 0335 0038             		cmpi.w  #$335,$38(a0)
0001BF84 6600 0000                  		bne.w  loc_17916
0001BF88 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001BF8E 317C 0000 0012             		move.w	#0,$12(a0)	;
0001BF94 5428 0025                  		addq.b	#2,$25(a0)      ; 
0001BF98                            
0001BF98                            Obj8E_MoveLeft3:				; XREF: Obj8E_ShipIndex
0001BF98 317C FE00 0010             		move.w	#-$200,$10(a0)	; move left
0001BF9E 6100 F1D6                  		bsr.w	BossMove
0001BFA2 5328 0033                  		subq.b	#1,$33(a0)	
0001BFA6 6A00 0000                  		bpl.w	Obj8E_MoveLeft3Cont
0001BFAA                            				
0001BFAA                            Obj8E_DropCannonball4:
0001BFAA 0C68 31D3 0030             		cmpi.w	#$31D3,$30(a0)	
0001BFB0 6700 0000                  		beq.w	loc_17916	
0001BFB4 4EB9 0001 08E0             		jsr	SingleObjLoad
0001BFBA 6600 0000                  		bne.w	Obj8E_MoveLeft3Cont
0001BFBE 12BC 0020                  		move.b	#$20,0(a1)	; load missile object
0001BFC2 3368 0008 0008             		move.w	8(a0),8(a1)
0001BFC8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BFCE 0669 001C 000C             		addi.w	#$1C,$C(a1)
0001BFD4 3038 D008                  		move.w ($FFFFD000+8).w,d0 ; Çàãðóçèòü X ïîçèöèþ Ñîíèêà.
0001BFD8 9068 0008                  		sub.w 	$8(a0),d0 ; Âû÷åñòü ïîçèöèþ îáúåêòà èç ïîçèöèè Ñîíèêà. Òàê ìû ïîëó÷èì äèñòàíöèþ Ñîíèêà ê îáúåêòó.
0001BFDC E540                       		asl.w 	#2,d0 ; Àðèôìåòè÷åñêèé ñäâèã(2 ðàçà). Íóæíî óâåëè÷èòü çíà÷åíèå äëÿ ïîëó÷åíèÿ íîðìàëüíîé ñêîðîñòè.
0001BFDE 3340 0010                                  move.w 	d0,$10(a1);
0001BFE2 337C 0400 0012             		move.w 	#$400,$12(a1) ; Äîáàâèòü ðåçóëüòàò â àäðåñ ñêîðîñòè îáúåêòà.
0001BFE8 117C 0030 0033                             move.b  #$30,$33(a0)
0001BFEE                            
0001BFEE                            Obj8E_MoveLeft3Cont:
0001BFEE 0C68 31D3 0030             		cmpi.w	#$31D3,$30(a0)	
0001BFF4 6600 0000                  		bne.w	loc_17916	; if not, branch
0001BFF8 0868 0000 0022                             bchg	#0,$22(a0)	; reverse direction of the ship
0001BFFE 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001C004 317C 0000 0012             		move.w	#0,$12(a0)	;
0001C00A 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001C00E                            
0001C00E                            Obj8E_MoveDiagonal:
0001C00E 317C 0200 0010             		move.w	#$200,$10(a0)	; move right
0001C014 317C 0100 0012                             move.w  #$100,$12(a0)
0001C01A 6100 F15A                  		bsr.w	BossMove
0001C01E 0C68 03BC 0038             		cmpi.w  #$3BC,$38(a0)
0001C024 6600 0000                  		bne.w   loc_17916
0001C028 0868 0000 0022                             bchg	#0,$22(a0)	; reverse direction of the ship
0001C02E 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001C034 317C 0000 0012             		move.w	#0,$12(a0)	;
0001C03A 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001C03E                            
0001C03E                            Obj8E_MoveUp2:
0001C03E 317C FF00 0012                             move.w  #-$100,$12(a0)
0001C044 6100 F130                  		bsr.w  BossMove
0001C048 0C68 0335 0038             		cmpi.w  #$335,$38(a0)
0001C04E 6600 0000                  		bne.w  loc_17916
0001C052 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001C058 317C 0000 0012             		move.w	#0,$12(a0)	;
0001C05E 5428 0025                  		addq.b	#2,$25(a0)      ; 
0001C062                            
0001C062                            Obj8E_MoveDiagonal2:
0001C062 317C FE00 0010             		move.w	#-$200,$10(a0)	; move right
0001C068 317C 0100 0012                             move.w  #$100,$12(a0)
0001C06E 6100 F106                  		bsr.w	BossMove
0001C072 0C68 03BC 0038             		cmpi.w  #$3BC,$38(a0)
0001C078 6600 0000                  		bne.w   loc_17916
0001C07C 0868 0000 0022                             bchg	#0,$22(a0)	; reverse direction of the ship
0001C082 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001C088 317C 0000 0012             		move.w	#0,$12(a0)	;
0001C08E 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001C092                            
0001C092                            Obj8E_MoveUp3:
0001C092 317C FF00 0012                             move.w  #-$100,$12(a0)
0001C098 6100 F0DC                  		bsr.w  BossMove
0001C09C 0C68 0335 0038             		cmpi.w  #$335,$38(a0)
0001C0A2 6600 0000                  		bne.w  loc_17916
0001C0A6 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001C0AC 317C 0000 0012             		move.w	#0,$12(a0)	;
0001C0B2 5428 0025                  		addq.b	#2,$25(a0)      ; 
0001C0B6                            
0001C0B6                            Obj8E_MoveRight3:
0001C0B6 317C 0200 0010             		move.w	#$200,$10(a0)	; move right
0001C0BC 6100 F0B8                  		bsr.w	BossMove
0001C0C0 0C68 32ED 0030             		cmpi.w	#$32ED,$30(a0)	
0001C0C6 6600 0000                  		bne.w	loc_17916	; if not, branch
0001C0CA 0868 0000 0022                             bchg	#0,$22(a0)	; reverse direction of the ship
0001C0D0 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001C0D6 317C 0000 0012             		move.w	#0,$12(a0)	;
0001C0DC 117C 0002 0025             		move.b	#2,$25(a0)      ; goto next routine
0001C0E2                            
0001C0E2                            loc_17916:
0001C0E2 6000 FC42                                  bra.w  Obj8E_ShipProcess
0001C0E6                            ; ===========================================================================
0001C0E6                            
0001C0E6                            ;loc_1797A:
0001C0E6                            Obj8E_Explode:				; XREF: Obj8E_ShipIndex
0001C0E6 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from timer
0001C0EA 6B00                       		bmi.s	loc_17984	; if timer is over, branch
0001C0EC 6000 F046                  		bra.w	BossDefeated
0001C0F0                            
0001C0F0                            loc_17984:
0001C0F0 08E8 0000 0022             		bset	#0,$22(a0)	; set orientation to 1 (right)
0001C0F6 08A8 0007 0022             		bclr	#7,$22(a0)	; clear defeated flag
0001C0FC 4268 0010                  		clr.w	$10(a0)		; clear X-velocity
0001C100 5428 0025                  		addq.b	#2,$25(a0)
0001C104 317C FFDA 003C             		move.w	#-$26,$3C(a0)	; set timer to -$26
0001C10A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001C10E 6600                       		bne.s	locret_179AA
0001C110 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001C116                            
0001C116                            locret_179AA:
0001C116 4E75                       		rts	
0001C118                            ; ===========================================================================
0001C118                            
0001C118                            ;loc_179AC:
0001C118                            Obj8E_ShipFall:	                                          ; XREF: Obj8E_ShipIndex
0001C118 303C 0099                  		move.w	#$99,d0
0001C11C 4EB9 0000 12CA             		jsr	(PlaySound).l	; play WIN sound
0001C122 4268 0012                                  clr.w	$12(a0)		; clear Y-velocity
0001C126 317C 0000 0014                             move.w  #$0,$14(a0)     ;clear all speeds
0001C12C 11FC 0001 F7CC                             move.b	#1,($FFFFF7CC).w	; lock	controls
0001C132 337C 0000 0014                             move.w	#0,$14(a1)	; stop Sonic moving
0001C138 31FC 0008 F602                             move.w	#(Right)<<0,(SonicControl) ; make Sonic stand
0001C13E 11FC 0001 FFFE                             move.b	#1,($FFFFFFFE).w ;set win flag
0001C144 4EB9 0001 1D18                             jsr     GotThroughAct
0001C14A 4EF9 0001 0496                             jmp	(DeleteObject).l
0001C150                            
0001C150                            ; ---------------------------------------------------------------------------
0001C150                            ; Object 91 - Hell girl (MZ)
0001C150                            ; ---------------------------------------------------------------------------
0001C150                            
0001C150                            Obj91:
0001C150 7000                       		moveq	#0,d0
0001C152 1028 0024                  		move.b	$24(a0),d0
0001C156 323B 0000                  		move.w	Ob91_Index(pc,d0.w),d1
0001C15A 4EFB 1000                  		jmp	Ob91_Index(pc,d1.w)
0001C15E                            ; ===========================================================================
0001C15E                            
0001C15E                            Ob91_Index:
0001C15E 0000                       		dc.w Ob91_Main-Ob91_Index
0001C160 0000                       		dc.w Ob91_ShipMain-Ob91_Index
0001C162                            ; ===========================================================================
0001C162                            
0001C162                            Ob91_Main:
0001C162 5428 0024                  		addq.b	#2,$24(a0)
0001C166 217C 0001 B7D2 0004        		move.l	#Map_Hellgirl,4(a0)
0001C16E 317C 0400 0002             		move.w	#($8000/$20),2(a0)
0001C174 117C 0004 0001             		move.b	#4,1(a0)
0001C17A 117C 0020 0019             		move.b	#$20,$19(a0)
0001C180 117C 0003 0018             		move.b	#3,$18(a0)
0001C186 3168 0008 0030             		move.w	8(a0),$30(a0)					; copy X-pos to secondary X-pos
0001C18C 3168 000C 0038             		move.w	$C(a0),$38(a0)					; copy Y-pos to secondary Y-pos
0001C192 117C 0005 0020             		move.b	#5,$20(a0)						; set touch response
0001C198 117C 000A 0021             		move.b  #10,$21(a0)
0001C19E 43F9 0000 24B6                             lea (Pal_Sonic).l,a1
0001C1A4 45F8 FB20                                  lea ($FFFFFB20).w,a2
0001C1A8 7007                                       moveq #7,d0
0001C1AA 24D9                       @0              move.l (a1)+,(a2)+
0001C1AC 51C8 FFFC                                  dbf d0,@0
0001C1B0 4EB9 0000 0000                             jsr (BossStarLight_Ballhog_RobotnikHud).l
0001C1B6                            
0001C1B6                            Ob91_ShipMain:
0001C1B6 7000                       		moveq	#0,d0
0001C1B8 1028 0025                  		move.b	$25(a0),d0
0001C1BC 323B 0000                  		move.w	Ob91_ShipIndex(pc,d0.w),d1
0001C1C0 4EBB 1000                  		jsr	Ob91_ShipIndex(pc,d1.w)
0001C1C4 6100 0000                  		bsr.w	Ob91_ShipProcess
0001C1C8 43F9 0001 B494             		lea	(Ani_Hellgirl).l,a1
0001C1CE 4EB9 0000 D3EA             		jsr	(AnimateSprite).l
0001C1D4                            		;jsr	(AnimateSprite).l
0001C1D4 1028 0022                  		move.b	$22(a0),d0
0001C1D8 0200 0003                  		andi.b	#3,d0
0001C1DC 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001C1E2 8128 0001                  		or.b	d0,1(a0)
0001C1E6 4EF9 0001 045A             		jmp	DisplaySprite
0001C1EC                            ; ===========================================================================
0001C1EC                            
0001C1EC                            Ob91_ShipIndex:
0001C1EC 0000                       		dc.w Ob91_ShipStart-Ob91_ShipIndex			; 0
0001C1EE 0000                       		dc.w Ob91_MoveLeft-Ob91_ShipIndex			; 2
0001C1F0 0000                       		dc.w Ob91_ShipMove-Ob91_ShipIndex			; 4
0001C1F2 0000                       		dc.w Ob91_MoveLeftRight-Ob91_ShipIndex		; 6
0001C1F4 0000                       		dc.w Ob91_Parabola-Ob91_ShipIndex			; 8
0001C1F6                            Ob91_End_ShipIndex
0001C1F6 0000                       		dc.w Ob91_Explode-Ob91_ShipIndex			; $A
0001C1F8 0000                       		dc.w Ob91_ShipFall-Ob91_ShipIndex			; $C
0001C1FA                            ; ===========================================================================
0001C1FA                            
0001C1FA                            Ob91_ShipProcess:
0001C1FA                            		; Move ship slightly up and down during the flight
0001C1FA                            
0001C1FA 0C28 000A 0025             		cmpi.b	#(Ob91_End_ShipIndex-Ob91_ShipIndex),$25(a0)	; is routine more or equals to 8?
0001C200 6400                       		bcc.s	locret_1784ALove			; if yes, branch
0001C202                            
0001C202 1028 003F                  		move.b	$3F(a0),d0			; Y-amplitude
0001C206 4EB9 0000 2CC8             		jsr	(CalcSine).l
0001C20C EC40                       		asr.w	#6,d0				; d0 contains sine
0001C20E D068 0038                  		add.w	$38(a0),d0			; add secondary Y-pos to d0
0001C212 3140 000C                  		move.w	d0,$C(a0)			; and we've got Y-pos with the amplitude
0001C216 3168 0030 0008             		move.w	$30(a0),8(a0)
0001C21C 5428 003F                  		addq.b	#2,$3F(a0)			; reduce the amplitude
0001C220                            
0001C220                            		; Touch repsonse stuff
0001C220 4A28 0022                  		tst.b	$22(a0)					; was boss defeated?
0001C224 6B00                       		bmi.s	Ob91_ShipGone		; if yes, branch
0001C226 4A28 0020                  		tst.b	$20(a0)					; is touch response zero?
0001C22A 6600                       		bne.s	locret_1784ALove			; if not, branch
0001C22C 4A28 003E                  		tst.b	$3E(a0)					; is flashes counter zero?
0001C230 6600                       		bne.s	Ob91_ShipFlash		; if not, branch
0001C232 117C 0090 003E             		move.b	#$90,$3E(a0)		; set number of	times to flash
0001C238 303C 00AC                  		move.w	#$AC,d0
0001C23C 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001C242                            
0001C242                            Ob91_ShipFlash:
0001C242 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001C246 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001C248 4A51                       		tst.w	(a1)		; is colour in pallete black?
0001C24A 6600                       		bne.s	loc_1783CLove	; if not, branch
0001C24C 303C 0000                  		move.w	#$000,d0	; move 0EEE (white) to d0
0001C250                            
0001C250                            loc_1783CLove:
0001C250 3280                       		move.w	d0,(a1)		; apply colour stored in d0
0001C252 5328 003E                  		subq.b	#1,$3E(a0)	; subtract 1 from flashes counter
0001C256 6600                       		bne.s	locret_1784ALove	; if flashes counter is not zero, branch
0001C258 117C 0005 0020             		move.b	#5,$20(a0)	; restore touch responsibility
0001C25E                            
0001C25E                            locret_1784ALove:
0001C25E 4E75                       		rts
0001C260                            ; ===========================================================================
0001C260                            ;loc_1784C:
0001C260                            Ob91_ShipGone:
0001C260 7064                       		moveq	#100,d0
0001C262 6100 0000                  		bsr.w	AddPoints	; add 1000 points
0001C266 117C 000A 0025             		move.b	#(Ob91_End_ShipIndex-Ob91_ShipIndex),$25(a0)	; set routine to 8 (Ob91_Explode)
0001C26C 317C 00B3 003C             		move.w	#179,$3C(a0)	; set timer to 179 (3 seconds)
0001C272 4E75                       		rts
0001C274                            ; ===========================================================================
0001C274                            
0001C274                            Obj91_Attack:
0001C274 5328 0033                  		subq.b	#1,$33(a0)
0001C278 6A00                       		bpl.s	loc_PinkLove
0001C27A 117C 002D 0033             		move.b	#45,$33(a0)
0001C280 0C28 0006 0021                             cmpi.b  #6,$21(a0)
0001C286 6400 0000                                  bcc.w   loc_PinkLove ; ignore this code if boss has more than 5 hp
0001C28A 4EB9 0001 08E0             		jsr	(SingleObjLoad).l
0001C290 6600                       		bne.s	loc_PinkLove
0001C292 12BC 0020                  		move.b	#$20,(a1)	; load missile object
0001C296 3038 D008                      		move.w ($FFFFD000+8).w,d0 ;
0001C29A 3340 0008                  		move.w	d0,8(a1)
0001C29E 337C 019B 000C             		move.w	#$19B,$C(a1) 
0001C2A4 0669 001C 000C             		addi.w	#$1C,$C(a1)
0001C2AA 337C 0400 0012                             move.w	#$400,$12(a1)
0001C2B0 303C 00A5                  		move.w	#$A5,d0
0001C2B4 4EF9 0000 12D0             		jmp	(PlaySound_Special).l ;	play explosion sound
0001C2BA                            
0001C2BA                            loc_PinkLove:
0001C2BA 4E75                       		rts
0001C2BC                            
0001C2BC                            Ob91_ShipStart:
0001C2BC 117C 0000 001C             		move.b	#0,$1C(a0)
0001C2C2 317C 0100 0012             		move.w	#$100,$12(a0)			; move ship down
0001C2C8 117C 0000 002A             		move.b  #0,$2A(a0)
0001C2CE 6100 EEA6                  		bsr.w	BossMove
0001C2D2 0C68 0221 0038             		cmpi.w	#$221,$38(a0)			; has the ship reached $338 on Y-axis?
0001C2D8 6600                       		bne.s	Ob91_ShipStart_Locret 	; if not, branch
0001C2DA 317C 0000 0012             		move.w	#0,$12(a0)				; stop ship
0001C2E0 5428 0025                  		addq.b	#2,$25(a0)				; goto next routine
0001C2E4                            
0001C2E4                            Ob91_ShipStart_Locret:
0001C2E4 4E75                       		rts
0001C2E6                            ; ===========================================================================
0001C2E6                            
0001C2E6                            Ob91_MoveLeft:
0001C2E6 317C FE00 0010             		move.w	#-$200,$10(a0)			; move left
0001C2EC 6100 EE88                  		bsr.w	BossMove
0001C2F0 0C68 265C 0030             		cmpi.w	#$265C,$30(a0)			; has the boss reached $2A00 on X-axis?
0001C2F6 6600                       		bne.s	locret_17916Love				; if not, branch
0001C2F8 217C 0000 0000 0010        		move.l	#0,$10(a0)				; stop him
0001C300 5428 0025                  		addq.b	#2,$25(a0)				; goto next routine
0001C304 317C 0030 003C                        	move.w	#$30,$3C(a0)			; set timer to $77
0001C30A                            
0001C30A                            locret_17916Love:
0001C30A 4E75                       		rts
0001C30C                            ; ===========================================================================
0001C30C                            
0001C30C                            Ob91_ShipMove:
0001C30C 5368 003C                  		subq.w	#1,$3C(a0)					; subtract 1 from timer
0001C310 6AF8                       		bpl.s	locret_17916Love					; if time remains, branch
0001C312 5428 0025                  		addq.b	#2,$25(a0)
0001C316 117C 002D 0033             		move.b	#45,$33(a0)
0001C31C 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001C322 317C 0200 0010             		move.w	#$200,$10(a0)
0001C328 0828 0000 0022             		btst	#0,$22(a0)
0001C32E 6600                       		bne.s	Ob91_MoveLeftRight
0001C330 4468 0010                  		neg.w	$10(a0)
0001C334                            
0001C334                            Ob91_MoveLeftRight:
0001C334 6100 EE40                  		bsr.w	BossMove
0001C338 6100 FF3A                  		bsr.w  	Obj91_Attack
0001C33C 5368 003C                  		subq.w	#1,$3C(a0)					; subtract 1 from timer
0001C340 6A00 0000                  		bpl.w	Obj91_Kiss					; if time remains, branch
0001C344 5428 0025                  		addq.b	#2,$25(a0)
0001C348 117C 0000 001C             		move.b	#0,$1C(a0); use "kissing" animation
0001C34E 317C 0100 0012             		move.w	#$100,$12(a0)
0001C354 317C 0200 0010             		move.w	#$200,$10(a0)
0001C35A 0828 0000 0022             		btst	#0,$22(a0)					; Check the ballhog boss orientation
0001C360 6700                       		beq.s	@1
0001C362 4468 0010                  		neg.w	$10(a0)
0001C366 317C 003F 003C             @1		move.w	#$3F,$3C(a0)
0001C36C 0868 0000 0022             		bchg	#0,$22(a0)
0001C372 117C 0000 001C             		move.b	#0,$1C(a0); use "kissing" animation
0001C378 4EB9 0000 2CA2             		jsr   (RandomNumber).l         ; get a random number
0001C37E 0200 0001                                  andi.b   #1,d0               ; get a number equal or lower than 1 (0 until 1)
0001C382 6600 0000                                  bne.w    Obj91_FastHeart ; if it isn't 0, branch
0001C386 303C 00AD                  		move.w	#$AD,d0
0001C38A 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
0001C390 4EB9 0001 08E0             		jsr     SingleObjLoad
0001C396 6600 0000                  		bne.w   locret_1794CLove
0001C39A 12BC 0020                  		move.b	#$20,0(a1)	; load missile object
0001C39E 3368 0008 0008             		move.w	8(a0),8(a1)
0001C3A4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C3AA 3038 D008                      		move.w ($FFFFD000+8).w,d0 ; 
0001C3AE 9068 0008                  		sub.w 	8(a0),d0 ; 
0001C3B2 E540                       		asl.w 	#2,d0 ;
0001C3B4 3340 0010                                  move.w 	d0,$10(a1);
0001C3B8 0469 0100 0010             		sub.w   #$100,$10(a1)
0001C3BE 3038 D00C                      		move.w ($FFFFD000+$C).w,d0 ;
0001C3C2 9068 000C                  		sub.w 	$C(a0),d0 ; 
0001C3C6 E540                       		asl.w 	#2,d0 ;
0001C3C8 3340 0012                                  move.w 	d0,$12(a1);
0001C3CC 6000 0000                  		bra.w	locret_1794cLove
0001C3D0                            
0001C3D0                            Obj91_FastHeart:
0001C3D0 4EB9 0001 08E0             		jsr     SingleObjLoad
0001C3D6 6600 0000                  		bne.w   locret_1794CLove
0001C3DA 12BC 0020                  		move.b	#$20,(a1)	; load missile object
0001C3DE 3038 D008                      		move.w ($FFFFD000+8).w,d0 ;
0001C3E2 3340 0008                  		move.w	d0,8(a1)		
0001C3E6 337C 019B 000C             		move.w	#$19B,$C(a1) 
0001C3EC 0669 001C 000C             		addi.w	#$1C,$C(a1)
0001C3F2 337C 0500 0012                             move.w	#$500,$12(a1)
0001C3F8 4EB9 0001 08E0             		jsr     SingleObjLoad
0001C3FE 6600 0000                  		bne.w   locret_1794CLove
0001C402 12BC 0020                  		move.b	#$20,(a1)	; load missile object
0001C406 3038 D008                      		move.w ($FFFFD000+8).w,d0 ;
0001C40A 0640 000F                  		add.w	#15,d0
0001C40E 3340 0008                  		move.w	d0,8(a1)
0001C412 337C 019B 000C             		move.w	#$19B,$C(a1) 
0001C418 0669 001C 000C             		addi.w	#$1C,$C(a1) 
0001C41E 337C 0500 0012                             move.w	#$500,$12(a1)
0001C424 4EB9 0001 08E0             		jsr     SingleObjLoad
0001C42A 6600 0000                  		bne.w   locret_1794CLove
0001C42E 12BC 0020                  		move.b	#$20,(a1)	; load missile object
0001C432 3038 D008                      		move.w ($FFFFD000+8).w,d0 ;
0001C436 0440 000F                  		sub.w	#15,d0
0001C43A 3340 0008                  		move.w	d0,8(a1)
0001C43E 337C 019B 000C             		move.w	#$19B,$C(a1) 
0001C444 0669 001C 000C             		addi.w	#$1C,$C(a1)
0001C44A 337C 0500 0012                             move.w	#$500,$12(a1)
0001C450 6000                       		bra.s	locret_1794cLove
0001C452                            
0001C452                            Obj91_Kiss:
0001C452 117C 0001 001C             		move.b	#1,$1C(a0); use "kissing" animation
0001C458                            
0001C458                            locret_1794CLove:
0001C458 4E75                       		rts
0001C45A                            ; ===========================================================================
0001C45A                            
0001C45A                            Ob91_Parabola:
0001C45A 5368 003C                  		subq.w	#1,$3C(a0)				; subtract 1 from timer
0001C45E 6AF8                       		bpl.s	locret_1794CLove				; if time remains, branch
0001C460 6100 ED14                  		bsr.w	BossMove
0001C464 6100 FE0E                  		bsr.w  	Obj91_Attack
0001C468 5968 0012                  		subq.w	#4,$12(a0)				; Subtract object Y speed
0001C46C 6AEA                       		bpl.s	locret_1794CLove
0001C46E 0C68 0221 0038             		cmpi.w	#$221,$38(a0)
0001C474 66E2                       		bne.s	locret_1794CLove
0001C476                            
0001C476                            
0001C476 4EB9 0000 2CA2             		jsr   	(RandomNumber).l         ; get a random number
0001C47C 0200 0001                                  andi.b  #1,d0               ; get a number equal or lower than 1 (0 until 1)
0001C480 6600 0000                                  bne.w   Obj91_AtcReset ; if it isn't 0, branch
0001C484                            
0001C484 0C28 0006 0021                             cmpi.b  #6,$21(a0)
0001C48A 6D00 0000                                  blt.w   Obj91_AtcReset ; ignore this code if boss has less than 5 hp
0001C48E 4EB9 0001 08E0               		jsr     SingleObjLoad
0001C494 6600                       		bne.s   Obj91_AtcReset
0001C496 12BC 0092                  		move.b	#$92,0(a1)	; load Hell Girl's clone 
0001C49A 337C 262C 0008             		move.w	#$262C,8(a1)
0001C4A0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C4A6 0669 000F 000C             		addi.w	#$F,$C(a1)
0001C4AC 0869 0000 0022             		bchg	#0,$22(a1)
0001C4B2 4EB9 0001 08E0               		jsr     SingleObjLoad
0001C4B8 669E                       		bne.s   locret_1794CLove
0001C4BA 12BC 0092                  		move.b	#$92,0(a1)	; load Hell Girl's clone 
0001C4BE 337C 26A0 0008             		move.w	#$26A0,8(a1)
0001C4C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C4CA 0669 000F 000C             		addi.w	#$F,$C(a1)
0001C4D0                            
0001C4D0                            Obj91_AtcReset:
0001C4D0 5528 0025                  		subq.b	#2,$25(a0)
0001C4D4 217C 0000 0000 0010        		move.l	#0,$10(a0)
0001C4DC 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001C4E2 4E75                       		rts
0001C4E4                            ; ===========================================================================
0001C4E4                            
0001C4E4                            ;loc_1797A:
0001C4E4                            Ob91_Explode:				; XREF: Ob91_ShipIndex
0001C4E4 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from timer
0001C4E8 6B00                       		bmi.s	loc_17984Love	; if timer is over, branch
0001C4EA 6000 EC48                  		bra.w	BossDefeated
0001C4EE                            ; ===========================================================================
0001C4EE                            
0001C4EE                            loc_17984Love:
0001C4EE 08E8 0000 0022             		bset	#0,$22(a0)	; set orientation to 1 (right)
0001C4F4 08A8 0007 0022             		bclr	#7,$22(a0)	; clear defeated flag
0001C4FA 4268 0010                  		clr.w	$10(a0)		; clear X-velocity
0001C4FE 5428 0025                  		addq.b	#2,$25(a0)
0001C502 317C FFDA 003C             		move.w	#-$26,$3C(a0)	; set timer to -$26
0001C508 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001C50C 6600                       		bne.s	locret_179AALove
0001C50E 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001C514                            
0001C514                            locret_179AALove:
0001C514 4E75                       		rts
0001C516                            ; ===========================================================================
0001C516                            
0001C516                            ;loc_179AC:
0001C516                            Ob91_ShipFall:	                                          ; XREF: Ob91_ShipIndex
0001C516 303C 0099                                  move.w	#$99,d0
0001C51A 4EB9 0000 12CA             		jsr	(PlaySound).l	; play WIN sound
0001C520 4268 0012                                  clr.w	$12(a0)		; clear Y-velocity
0001C524 317C 0000 0014                             move.w  #$0,$14(a0)     ;clear all speeds
0001C52A 11FC 0001 F7CC                             move.b	#1,($FFFFF7CC).w	; lock	controls
0001C530 337C 0000 0014                             move.w	#0,$14(a1)	; stop Sonic moving
0001C536 31FC 0008 F602                             move.w	#(Right)<<0,(SonicControl) ; make Sonic stand
0001C53C 11FC 0001 FFFE                             move.b	#1,($FFFFFFFE).w ;set win flag
0001C542 4EB9 0001 1D18                             jsr     GotThroughAct
0001C548 4EF9 0001 0496                             jmp	(DeleteObject).l
0001C54E                            
0001C54E                            ; ===========================================================================
0001C54E                            ; ---------------------------------------------------------------------------
0001C54E                            ; sub-object 92 - Hell girl's clone
0001C54E                            ; ---------------------------------------------------------------------------
0001C54E                            
0001C54E                            Obj92:					; XREF: Obj_Index
0001C54E 7000                       		moveq	#0,d0
0001C550 1028 0024                  		move.b	$24(a0),d0
0001C554 323B 0000                  		move.w	Obj92_Index(pc,d0.w),d1
0001C558 4EBB 1000                  		jsr	Obj92_Index(pc,d1.w)
0001C55C 4EF9 0001 045A             		jmp	DisplaySprite
0001C562                            ; ===========================================================================
0001C562 0000                       Obj92_Index:	dc.w Obj92_Main-Obj92_Index
0001C564 0000                       		dc.w Obj92_Kiss-Obj92_Index
0001C566 0000                       		dc.w Obj92_Explode-Obj92_Index
0001C568                            ; ===========================================================================
0001C568                            
0001C568                            Obj92_Main:				; XREF: Obj2B_Index	
0001C568 5428 0024                  		addq.b	#2,$24(a0)
0001C56C 217C 0001 B7D2 0004        		move.l	#Map_Hellgirl,4(a0)
0001C574 317C 0400 0002             		move.w	#($8000/$20),2(a0)
0001C57A 0028 0004 0001             		ori.b	#4,1(a0)
0001C580                            		;move.b	#$9A,$20(a0)
0001C580 117C 0004 0018             		move.b	#4,$18(a0)
0001C586 117C 0010 0019             		move.b	#$10,$19(a0)
0001C58C                            		;lea	(Ani_Hellgirl).l,a1
0001C58C                            		;jsr	(AnimateSprite).l
0001C58C 117C 0020 0033             		move.b	#$20,$33(a0)
0001C592                            
0001C592                            ; ===========================================================================
0001C592                            
0001C592                            Obj92_Kiss:
0001C592 4EB9 0001 045A             		jsr	DisplaySprite
0001C598 117C 0001 001C             		move.b	#1,$1C(a0)
0001C59E 5328 0033                  		subq.b	#1,$33(a0)
0001C5A2 6A00                       		bpl.s	Obj92_Animate
0001C5A4 117C 0000 001C             		move.b	#0,$1C(a0)
0001C5AA 117C 0020 0033             		move.b	#$20,$33(a0)
0001C5B0 303C 00AD                  		move.w	#$AD,d0
0001C5B4 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
0001C5BA 4EB9 0001 08E0             		jsr	SingleObjLoad
0001C5C0 6600 0000                  		bne.w   Obj92_Animate
0001C5C4 12BC 0020                  		move.b	#$20,0(a1)	; load missile object
0001C5C8 3368 0008 0008             		move.w	8(a0),8(a1)
0001C5CE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C5D4 3038 D008                      		move.w ($FFFFD000+8).w,d0 ; 
0001C5D8 9068 0008                  		sub.w 	8(a0),d0 ; 
0001C5DC E540                       		asl.w 	#2,d0 ;
0001C5DE 3340 0010                                  move.w 	d0,$10(a1);
0001C5E2 3038 D00C                      		move.w ($FFFFD000+$C).w,d0 ;
0001C5E6 9068 000C                  		sub.w 	$C(a0),d0 ; 
0001C5EA E540                       		asl.w 	#2,d0 ;
0001C5EC 3340 0012                                  move.w 	d0,$12(a1);
0001C5F0 5428 0024                  		addq.b  #2,$24(a0);
0001C5F4                            
0001C5F4                            Obj92_Animate:
0001C5F4 43F9 0001 B494             		lea	(Ani_Hellgirl).l,a1
0001C5FA 4EB9 0000 D3EA             		jsr	AnimateSprite
0001C600 4E75                       		rts
0001C602                            
0001C602                            ; ============================================================================
0001C602                            
0001C602                            Obj92_Explode:
0001C602 5328 0033                  		subq.b	#1,$33(a0)
0001C606 6A00                       		bpl.s	locr_345arcticway
0001C608 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	(Obj3F)
0001C60C 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0001C612 4EF9 0000 B978             		jmp	Obj3F		; jump to explosion code
0001C618                            
0001C618                            locr_345arcticway:
0001C618 4E75                       		rts
0001C61A                            
0001C61A                            ; ===========================================================================
0001C61A                            ; ---------------------------------------------------------------------------
0001C61A                            ; Object 93 - Eggman with fist (FZ)
0001C61A                            ; ---------------------------------------------------------------------------
0001C61A                            
0001C61A                            Obj93:					; XREF: Obj_Index
0001C61A 7000                       		moveq	#0,d0
0001C61C 1028 0024                  		move.b	$24(a0),d0
0001C620 323B 0000                  		move.w	Obj93_Index(pc,d0.w),d1
0001C624 4EFB 1000                  		jmp	Obj93_Index(pc,d1.w)
0001C628                            ; ===========================================================================
0001C628 0000                       Obj93_Index:	dc.w Obj93_Main-Obj93_Index
0001C62A 0000                       		dc.w Obj93_ShipMain-Obj93_Index	 ; for ship object
0001C62C 0000                       		dc.w Obj93_FaceMain-Obj93_Index  ; for face object
0001C62E 0000                       		dc.w Obj93_FlameMain-Obj93_Index ; for flame object
0001C630                            
0001C630                            		; routine counter, animation:
0001C630 0200                       Obj93_ObjData:	dc.b 2,	0	; for ship
0001C632 0401                       		dc.b 4,	1	; for face
0001C634 0607                       		dc.b 6,	7	; for flame
0001C636                            ; ===========================================================================
0001C636                            
0001C636                            Obj93_Main:				; XREF: Obj93_Index
0001C636 45F9 0001 C630             		lea	(Obj93_ObjData).l,a2
0001C63C 2248                       		movea.l	a0,a1
0001C63E 7202                       		moveq	#2,d1
0001C640 6000                       		bra.s	Obj93_LoadBoss	; boss consists of 3 objects
0001C642                            ; ===========================================================================
0001C642                            
0001C642                            Obj93_Loop:
0001C642 4EB9 0001 08F6             		jsr	SingleObjLoad2
0001C648 6600                       		bne.s	Obj93_LoadShip
0001C64A                            
0001C64A                            Obj93_LoadBoss:				; XREF: Obj93_Main
0001C64A 135A 0024                  		move.b	(a2)+,$24(a1)	; set routine number
0001C64E 12BC 0093                  		move.b	#$93,0(a1)	; set obj to $3D
0001C652 3368 0008 0008             		move.w	8(a0),8(a1)	; copy X
0001C658 3368 000C 000C             		move.w	$C(a0),$C(a1)	; copy Y
0001C65E 237C 0001 B4AE 0004        		move.l	#Map_Eggman,4(a1)
0001C666 337C 0300 0002             		move.w	#($6000/$20),2(a1)
0001C66C 137C 0004 0001             		move.b	#4,1(a1)
0001C672 137C 0020 0019             		move.b	#$20,$19(a1)
0001C678 137C 0003 0018             		move.b	#3,$18(a1)
0001C67E 135A 001C                  		move.b	(a2)+,$1C(a1)	; set animation
0001C682 2348 0034                  		move.l	a0,$34(a1)	; parent addr
0001C686 51C9 FFBA                  		dbf	d1,Obj93_Loop	; repeat sequence 2 more times
0001C68A                            
0001C68A                            ;loc_17772:
0001C68A                            Obj93_LoadShip:
0001C68A 3168 0008 0030             		move.w	8(a0),$30(a0)	; copy X-pos to secondary X-pos
0001C690 3168 000C 0038             		move.w	$C(a0),$38(a0)	; copy Y-pos to secondary Y-pos
0001C696 117C 000F 0020             		move.b	#$F,$20(a0)	; set touch response
0001C69C 117C 000F 0021             		move.b  #var_BHits_FZ,$21(a0)
0001C6A2 4EB9 0000 0000                             jsr (BossStarLight_Ballhog_RobotnikHud).l
0001C6A8                            
0001C6A8                            Obj93_ShipMain:				; XREF: Obj93_Index
0001C6A8 7000                       		moveq	#0,d0
0001C6AA 1028 0025                  		move.b	$25(a0),d0
0001C6AE 323B 0000                  		move.w	Obj93_ShipIndex(pc,d0.w),d1
0001C6B2 4EBB 1000                  		jsr	Obj93_ShipIndex(pc,d1.w)
0001C6B6 43F9 0001 B36E             		lea	(Ani_Eggman).l,a1
0001C6BC 4EB9 0000 D3EA             		jsr	AnimateSprite
0001C6C2 1028 0022                  		move.b	$22(a0),d0
0001C6C6 0200 0003                  		andi.b	#3,d0
0001C6CA 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001C6D0 8128 0001                  		or.b	d0,1(a0)
0001C6D4 4EF9 0001 045A             		jmp	DisplaySprite
0001C6DA                            ; ===========================================================================
0001C6DA 0000                       Obj93_ShipIndex:dc.w Obj93_ShipStart-Obj93_ShipIndex	; 0
0001C6DC 0000                       		dc.w locyaku_17950-Obj93_ShipIndex	; 2
0001C6DE 0000                       		dc.w Obj93_Firing-Obj93_ShipIndex
0001C6E0 0000                       		dc.w Obj93_Explode-Obj93_ShipIndex	; 4
0001C6E2 0000                       		dc.w Obj93_ShipFall-Obj93_ShipIndex	; 6
0001C6E4 0000                       		dc.w Obj93_RunAway-Obj93_ShipIndex	; 8
0001C6E6                            ; ===========================================================================
0001C6E6                            
0001C6E6                            
0001C6E6                            ; This routine does the main ship stuff
0001C6E6                            
0001C6E6                            Obj93_ShipProcess:
0001C6E6                            		; Move ship slightly up and down during the flight
0001C6E6                            		;move.b	$3F(a0),d0	; Y-amplitude
0001C6E6                            		;jsr	(CalcSine).l
0001C6E6                            		;asr.w	#6,d0		; d0 contains sine
0001C6E6                            		;add.w	$38(a0),d0	; add secondary Y-pos to d0
0001C6E6 3168 0038 000C             		move.w	$38(a0),$C(a0)	; and we've got Y-pos with the amplitude
0001C6EC 3168 0030 0008             		move.w	$30(a0),8(a0)
0001C6F2 5428 003F                  		addq.b	#2,$3F(a0)	; reduce the amplitude
0001C6F6                            		
0001C6F6                            		; Touch repsonse stuff
0001C6F6 0C28 0008 0025             		cmpi.b	#8,$25(a0)	; is routine more or equals to 8?
0001C6FC 6400                       		bcc.s	locretyaku_1784A	; if yes, branch
0001C6FE 4A28 0022                  		tst.b	$22(a0)		; was boss defeated?
0001C702 6B00                       		bmi.s	Obj93_ShipGone	; if yes, branch
0001C704 4A28 0020                  		tst.b	$20(a0)		; is touch response zero?
0001C708 6600                       		bne.s	locretyaku_1784A	; if not, branch
0001C70A 4A28 003E                  		tst.b	$3E(a0)		; is flashes counter zero?
0001C70E 6600                       		bne.s	Obj93_ShipFlash	; if not, branch
0001C710 117C 001C 003E             		move.b	#$1C,$3E(a0)	; set number of	times to flash
0001C716 303C 00AC                  		move.w	#$AC,d0
0001C71A 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001C720                            
0001C720                            Obj93_ShipFlash:
0001C720 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001C724 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001C726 4A51                       		tst.w	(a1)		; is colour in pallete black?
0001C728 6600                       		bne.s	locyaku_1783C	; if not, branch
0001C72A 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
0001C72E                            
0001C72E                            locyaku_1783C:
0001C72E 3280                       		move.w	d0,(a1)		; apply colour stored in d0
0001C730 5328 003E                  		subq.b	#1,$3E(a0)	; subtract 1 from flashes counter
0001C734 6600                       		bne.s	locretyaku_1784A	; if flashes counter is not zero, branch
0001C736 117C 000F 0020             		move.b	#$F,$20(a0)	; restore touch responsibility
0001C73C                            
0001C73C                            locretyaku_1784A:
0001C73C 4E75                       		rts	
0001C73E                            ; ===========================================================================
0001C73E                            ;loc_1784C:
0001C73E                            Obj93_ShipGone:				; XREF: Obj93_ShipProcess
0001C73E 7064                       		moveq	#100,d0
0001C740 6100 0000                  		bsr.w	AddPoints	; add 1000 points
0001C744 117C 0006 0025             		move.b	#6,$25(a0)	; set routine to 8 (Obj93_Explode)
0001C74A 317C 00B3 003C             		move.w	#179,$3C(a0)	; set timer to 179 (3 seconds)
0001C750 4E75                       		rts
0001C752                            ; ===========================================================================
0001C752                            
0001C752                            ; ===========================================================================
0001C752                            
0001C752                            
0001C752                            Obj93_ShipStart:			; XREF: Obj93_ShipIndex
0001C752 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
0001C758 6100 EA1C                  		bsr.w	BossMove
0001C75C 0C68 054F 0038             		cmpi.w	#$54F,$38(a0)	; 
0001C762 6600 FF82                  		bne.w	Obj93_ShipProcess ; if not, branch
0001C766 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
0001C76C 317C 0000 0010             		move.w	#0,$10(a0)	; stop ship
0001C772 4EB9 0001 08E0             		jsr	SingleObjLoad
0001C778 6600 FF6C                  		bne.w	Obj93_ShipProcess
0001C77C 12BC 0094                  		move.b	#$94,0(a1)	 
0001C780 337C 2512 0008             		move.w	#$2512,8(a1)
0001C786 337C 0540 000C             		move.w	#$540,$C(a1)
0001C78C 2348 0034                  		move.l  a0,$34(a1)
0001C790 5428 0025                  		addq.b	#2,$25(a0)
0001C794                            
0001C794                            locyaku_17950:
0001C794                            		;move.w	#360,$33(a0)
0001C794 5428 0025                  		addq.b	#2,$25(a0)
0001C798                            		;bra.w	Obj93_ShipProcess
0001C798                            		;rts
0001C798                            
0001C798                            Obj93_Firing:
0001C798                            		;subq.w	#1,$33(a0)
0001C798                            		;bpl.w	locarcticway_1F43
0001C798                            		
0001C798                            		;jsr     SingleObjLoad
0001C798                            		;bne.w   locarcticway_1F43
0001C798                            		;move.b	#$20,(a1)	; load missile object
0001C798                                		;move.w ($FFFFD000+8).w,d0 ;
0001C798                            		;move.w	d0,8(a1)		
0001C798                            		;move.w	#$513,$C(a1) 
0001C798                                            ;move.w	#$200,$12(a1)
0001C798                            		;jsr     SingleObjLoad
0001C798                            		;bne.w   locarcticway_1F43
0001C798                            		;move.b	#$20,(a1)	; load missile object
0001C798                                		;move.w ($FFFFD000+8).w,d0 ;
0001C798                            		;sub.w	#30,d0
0001C798                            		;move.w	d0,8(a1)
0001C798                            		;move.w	#$513,$C(a1) 
0001C798                                            ;move.w	#$200,$12(a1)
0001C798                            		;jsr     SingleObjLoad
0001C798                            		;bne.w   locarcticway_1F43
0001C798                            		;move.b	#$20,(a1)	; load missile object
0001C798                                		;move.w ($FFFFD000+8).w,d0 ;
0001C798                            		;sub.w	#60,d0
0001C798                            		;move.w	d0,8(a1)
0001C798                            		;move.w	#$513,$C(a1) 
0001C798                                            ;move.w	#$200,$12(a1)
0001C798                            		;jsr     SingleObjLoad
0001C798                            		;bne.w   locarcticway_1F43
0001C798                            		;move.b	#$20,(a1)	; load missile object
0001C798                                		;move.w ($FFFFD000+8).w,d0 ;
0001C798                            		;add.w	#30,d0
0001C798                            		;move.w	d0,8(a1)
0001C798                            		;move.w	#$513,$C(a1) 
0001C798                                            ;move.w	#$200,$12(a1)
0001C798 5528 0025                  		subq.b	#2,$25(a0)
0001C79C                            
0001C79C                            ;locarcticway_1F43:
0001C79C 6000 FF48                  		bra.w	Obj93_ShipProcess
0001C7A0 4E75                       		rts
0001C7A2                            ; ===========================================================================
0001C7A2                            
0001C7A2                            Obj93_Explode:				; XREF: Obj93_ShipIndex
0001C7A2 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from timer
0001C7A6 6B00                       		bmi.s	locyaku_17984	; if timer is over, branch
0001C7A8 6000 E98A                  		bra.w	BossDefeated
0001C7AC                            
0001C7AC                            locyaku_17984:
0001C7AC                            		;bset	#0,$22(a0)	; set orientation to 1 (right)
0001C7AC 08A8 0007 0022             		bclr	#7,$22(a0)	; clear defeated flag
0001C7B2 4268 0010                  		clr.w	$10(a0)		; clear X-velocity
0001C7B6 5428 0025                  		addq.b	#2,$25(a0)
0001C7BA 317C FFDA 003C             		move.w	#-$26,$3C(a0)	; set timer to -$26
0001C7C0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001C7C4 6600                       		bne.s	locretyaku_179AA
0001C7C6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001C7CC                            
0001C7CC                            locretyaku_179AA:
0001C7CC 4E75                       		rts	
0001C7CE                            ; ===========================================================================
0001C7CE                            
0001C7CE                            ;loc_179AC:
0001C7CE                            Obj93_ShipFall:				; XREF: Obj93_ShipIndex
0001C7CE 5268 003C                  		addq.w	#1,$3C(a0)	; add 1 to timer
0001C7D2 6700                       		beq.s	@StopioFall	; if timer is zero, branch
0001C7D4 6A00                       		bpl.s	Obj93_ShipRise	; if timer is postive, branch
0001C7D6 0668 0018 0012             		addi.w	#$18,$12(a0)	; add $18 to Y-velocity to make ship fall
0001C7DC 6000                       		bra.s	locyaku_179EE
0001C7DE                            
0001C7DE                            @StopioFall:
0001C7DE 4268 0012                  		clr.w	$12(a0)		; clear Y-velocity
0001C7E2 6000                       		bra.s	locyaku_179EE
0001C7E4                            
0001C7E4                            Obj93_ShipRise:
0001C7E4 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)	; is timer's value $30?
0001C7EA 6500                       		bcs.s	@RiseoShip	; if it's less than, branch
0001C7EC 6700                       		beq.s	@StopioRise	; if it equals, branch
0001C7EE 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)	; is timer's value less than $38?
0001C7F4 6500                       		bcs.s	locyaku_179EE	; if yes, branch
0001C7F6 5428 0025                  		addq.b	#2,$25(a0)
0001C7FA 6000                       		bra.s	locyaku_179EE
0001C7FC                            
0001C7FC                            @RiseoShip:
0001C7FC 5168 0012                  		subq.w	#8,$12(a0)	; subtract 8 from Y-vel to make ship rise
0001C800 6000                       		bra.s	locyaku_179EE
0001C802                            
0001C802                            @StopioRise:
0001C802 4268 0012                  		clr.w	$12(a0)		; clear Y-velocity
0001C806                            
0001C806                            locyaku_179EE:
0001C806 6100 E96E                  		bsr.w	BossMove
0001C80A 6000 FEDA                  		bra.w	Obj93_ShipProcess
0001C80E                            ; ===========================================================================
0001C80E                            
0001C80E                            ;loc_179F6:
0001C80E                            Obj93_RunAway:				; XREF: Obj93_ShipIndex
0001C80E                            		;move.w	#$400,$10(a0)	; move ship right
0001C80E 317C 0300 0012             		move.w	#$300,$12(a0)	; move ship slightly up
0001C814 4A28 0001                  		tst.b	1(a0)		; is object out of screen?
0001C818 6A00                       		bpl.s	Obj93_ChaosQuestEnd	; if yes, branch
0001C81A 6100 E918                  		bsr.w	BossDefeated
0001C81E 6100 E956                  		bsr.w	BossMove
0001C822 6000 FEC2                  		bra.w	Obj93_ShipProcess
0001C826                            
0001C826                            Obj93_ChaosQuestEnd:
0001C826 11FC 001C F600             		move.b	#$1C,($FFFFF600).w	; set game mode to Ending sequence
0001C82C 103C 009D                                  move.b	#$9D,d0
0001C830 4EB8 12D0                  		jsr	PlaySound_Special	; play credits music
0001C834 31FC 0000 FFF4                             move.w	#0,($FFFFFFF4).w	; set credits index number to 0
0001C83A                            		;jmp	DeleteObject
0001C83A                            
0001C83A                            ; ===========================================================================
0001C83A                            ; ===========================================================================
0001C83A                            
0001C83A                            Obj93_FaceMain:				; XREF: Obj93_Index
0001C83A 7000                       		moveq	#0,d0
0001C83C 7201                       		moveq	#1,d1
0001C83E 2268 0034                  		movea.l	$34(a0),a1	; load parent obj
0001C842 1029 0025                  		move.b	$25(a1),d0	; get ship's secondary routine counter
0001C846 5900                       		subq.b	#4,d0
0001C848 6600                       		bne.s	locyaku_17A3E	; if it's more than 4, branch
0001C84A 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)	; is ship's X-position $2A00?
0001C850 6600                       		bne.s	locyaku_17A46	; if not, branch
0001C852 7204                       		moveq	#4,d1		; use laughing animation
0001C854                            
0001C854                            locyaku_17A3E:
0001C854 5D00                       		subq.b	#6,d0
0001C856 6B00                       		bmi.s	locyaku_17A46
0001C858 720A                       		moveq	#$A,d1
0001C85A 6000                       		bra.s	Obj93_FaceApply
0001C85C                            
0001C85C                            locyaku_17A46:
0001C85C 4A29 0020                  		tst.b	$20(a1)		; has the ship been hurt?
0001C860 6600                       		bne.s	locyaku_17A50	; if not, branch
0001C862 7205                       		moveq	#5,d1		; use hurting animation
0001C864 6000                       		bra.s	Obj93_FaceApply
0001C866                            
0001C866                            locyaku_17A50:
0001C866 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w ; is Sonic hurt?
0001C86C 6500                       		bcs.s	Obj93_FaceApply	 ; if not, branch
0001C86E 7204                       		moveq	#4,d1		 ; use laughing animation, haha!
0001C870                            
0001C870                            ;loc_17A5A:
0001C870                            Obj93_FaceApply:
0001C870 1141 001C                  		move.b	d1,$1C(a0)	; apply face animation
0001C874 5500                       		subq.b	#2,d0
0001C876 6600                       		bne.s	Obj93_FaceDisp
0001C878 117C 0006 001C             		move.b	#6,$1C(a0)	; correct animation
0001C87E 4A28 0001                  		tst.b	1(a0)		; is object on screen?
0001C882 6A00                       		bpl.s	Obj93_FaceDel	; if not, branch
0001C884                            
0001C884                            Obj93_FaceDisp:
0001C884 6000                       		bra.s	Obj93_Display
0001C886                            
0001C886                            Obj93_FaceDel:
0001C886 4EF9 0001 0496             		jmp	DeleteObject
0001C88C                            
0001C88C                            ; ===========================================================================
0001C88C                            ; ===========================================================================
0001C88C                            
0001C88C                            Obj93_FlameMain:			; XREF: Obj93_Index
0001C88C 117C 0007 001C             		move.b	#7,$1C(a0)
0001C892 2268 0034                  		movea.l	$34(a0),a1	; load parent obj
0001C896 0C29 000C 0025             		cmpi.b	#$C,$25(a1)	; is ship's secondary routine $C (Obj93_RunAway)?
0001C89C 6600                       		bne.s	locyaku_17A96	; if not, branch
0001C89E 117C 000B 001C             		move.b	#$B,$1C(a0)
0001C8A4 4A28 0001                  		tst.b	1(a0)		; is object on screen?
0001C8A8 6A00                       		bpl.s	Obj93_FlameDel	; if not, branch
0001C8AA 6000                       		bra.s	Obj93_FlameDisp
0001C8AC                            
0001C8AC                            locyaku_17A96:
0001C8AC 3029 0010                  		move.w	$10(a1),d0
0001C8B0 6700                       		beq.s	Obj93_FlameDisp
0001C8B2 117C 0008 001C             		move.b	#8,$1C(a0)
0001C8B8                            
0001C8B8                            Obj93_FlameDisp:
0001C8B8 6000                       		bra.s	Obj93_Display
0001C8BA                            
0001C8BA                            Obj93_FlameDel:
0001C8BA 4EF9 0001 0496             		jmp	DeleteObject
0001C8C0                            ; ===========================================================================
0001C8C0                            
0001C8C0                            Obj93_Display:				; XREF: Obj93_FaceDisp; Obj93_FlameDisp
0001C8C0 2268 0034                  		movea.l	$34(a0),a1
0001C8C4 3169 0008 0008             		move.w	8(a1),8(a0)
0001C8CA 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C8D0 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001C8D6 43F9 0001 B36E             		lea	(Ani_Eggman).l,a1
0001C8DC 4EB9 0000 D3EA             		jsr	AnimateSprite
0001C8E2 1028 0022                  		move.b	$22(a0),d0
0001C8E6 0200 0003                  		andi.b	#3,d0
0001C8EA 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001C8F0 8128 0001                  		or.b	d0,1(a0)
0001C8F4 4EF9 0001 045A             		jmp	DisplaySprite
0001C8FA                            
0001C8FA                            ; ===========================================================================
0001C8FA                            ; ---------------------------------------------------------------------------
0001C8FA                            ; Object 94 - Eggman's Fist (FZ)
0001C8FA                            ; ---------------------------------------------------------------------------
0001C8FA                            
0001C8FA                            Obj94:					; XREF: Obj_Index
0001C8FA 7000                       		moveq	#0,d0
0001C8FC 1028 0024                  		move.b	$24(a0),d0
0001C900 323B 0000                  		move.w	Obj94_Index(pc,d0.w),d1
0001C904 4EBB 1000                  		jsr	Obj94_Index(pc,d1.w)
0001C908 4EF9 0001 045A             		jmp	DisplaySprite
0001C90E                            ; ===========================================================================
0001C90E 0000                       Obj94_Index:	dc.w Obj94_Main-Obj94_Index ;0
0001C910 0000                       		dc.w Obj94_Step1SmashFloor-Obj94_Index ;2
0001C912 0000                       		dc.w Obj94_Step1GoHome-Obj94_Index ;4
0001C914 0000                       		dc.w Obj94_Step1ReduceSpd-Obj94_Index ;4
0001C916 0000                       		dc.w Obj94_Step1GoHome2-Obj94_Index ;4
0001C918 0000                       		dc.w Obj94_Step2MoveRight-Obj94_Index ;6
0001C91A 0000                       		dc.w Obj94_Step2MoveDown-Obj94_Index ;8
0001C91C 0000                       		dc.w Obj94_Step2MoveLeft-Obj94_Index ;A
0001C91E 0000                       		dc.w Obj94_Step2MoveUp-Obj94_Index ;C
0001C920 0000                       		dc.w Obj94_Step22MoveDown-Obj94_Index ;8
0001C922 0000                       		dc.w Obj94_Step22MoveRight-Obj94_Index ;6
0001C924 0000                       		dc.w Obj94_Step22MoveUp-Obj94_Index ;C
0001C926 0000                       		dc.w Obj94_Step3SmashPlayer-Obj94_Index ;10
0001C928 0000                       		dc.w Obj94_Step3MoveUp-Obj94_Index ;12
0001C92A 0000                       		dc.w Obj94_Step32SmashPlayer-Obj94_Index ;10
0001C92C 0000                       		dc.w Obj94_Step32MoveUp-Obj94_Index ;12
0001C92E 0000                       		dc.w Obj94_Step33SmashPlayer-Obj94_Index ;10
0001C930 0000                       		dc.w Obj94_Step33MoveUp-Obj94_Index ;12
0001C932 0000                       		dc.w Obj94_Step4GetReady-Obj94_Index
0001C934 0000                       		dc.w Obj94_Step4SmashFloor-Obj94_Index ;2
0001C936 0000                       		dc.w Obj94_Step4GoHome-Obj94_Index ;4
0001C938                            		;dc.w Obj94_Explode-Obj94_Index ;16
0001C938                            ; ===========================================================================
0001C938                            
0001C938                            Obj94_Main:			
0001C938 5428 0024                  		addq.b	#2,$24(a0)
0001C93C 217C 0001 B85A 0004        		move.l	#Map_Crusher,4(a0)
0001C944 317C 036C 0002             		move.w	#($6D80/$20),2(a0)
0001C94A 0028 0004 0001             		ori.b	#4,1(a0)
0001C950 117C 009A 0020             		move.b	#$9A,$20(a0)
0001C956 117C 0004 0018             		move.b	#4,$18(a0)
0001C95C 117C 0010 0019             		move.b	#$10,$19(a0)
0001C962 117C 0012 0016             		move.b	#$12,$16(a0)
0001C968 117C 0000 001C             		move.b	#0,$1C(a0)
0001C96E                            
0001C96E                            ; ===========================================================================
0001C96E                            
0001C96E                            Obj94_IsEggmanAlive:
0001C96E 2268 0034                  		movea.l $34(a0),a1
0001C972 4A29 0021                  		tst.b 	$21(a1)
0001C976 6700 0000                  		beq.w 	Obj94_Explode
0001C97A 4E75                       		rts
0001C97C                            
0001C97C                            Obj94_Shockwave:
0001C97C 4EB9 0001 08E0             		jsr     SingleObjLoad
0001C982 6600 0000                  		bne.w   Obj94_Animate
0001C986 12BC 0020                  		move.b	#$20,(a1)	; load missile object
0001C98A 3368 0008 0008             		move.w	8(a0),8(a1)		
0001C990 337C 05B9 000C             		move.w	#$5B9,$C(a1) 
0001C996 337C FD00 0010                             move.w	#-$300,$10(a1)
0001C99C 4EB9 0001 08E0             		jsr     SingleObjLoad
0001C9A2 6600 0000                  		bne.w   Obj94_Animate
0001C9A6 12BC 0020                  		move.b	#$20,(a1)	; load missile object
0001C9AA 3368 0008 0008             		move.w	8(a0),8(a1)
0001C9B0 337C 05B9 000C             		move.w	#$5B9,$C(a1) 
0001C9B6 0869 0000 0022             		bchg	#0,$22(a1)
0001C9BC 337C 0300 0010                             move.w	#$300,$10(a1)
0001C9C2 4E75                       		rts
0001C9C4                            
0001C9C4                            ; ===========================================================================
0001C9C4                            
0001C9C4                            Obj94_Step1SmashFloor:
0001C9C4 317C 0400 0012                             move.w 	#$400,$12(a0);
0001C9CA 6100 FFA2                  		bsr.w	Obj94_IsEggmanAlive
0001C9CE 4EB9 0001 0434             		jsr     SpeedToPos
0001C9D4 4EBA BAD2                  		jsr	ObjHitFloor
0001C9D8 4A41                       		tst.w	d1		; has object hit the floor
0001C9DA 6A00 0000                  		bpl.w	Obj94_Animate	; if not, branch
0001C9DE 303C 00BD                  		move.w	#$BD,d0
0001C9E2 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play stomping sound
0001C9E8 317C 0000 0012             		move.w	#0,$12(a0)	; stop fist
0001C9EE 317C 0000 0010             		move.w	#0,$10(a0)
0001C9F4 6100 FF86                  		bsr.w	Obj94_Shockwave
0001C9F8                            	
0001C9F8 5428 0024                  		addq.b	#2,$24(a0)	; goto next routine
0001C9FC                            
0001C9FC                            Obj94_Step1GoHome:
0001C9FC 303C 2472                  		move.w  #$2472,d0
0001CA00 9068 0008                  		sub.w 	$8(a0),d0
0001CA04 E540                       		asl.w 	#2,d0 
0001CA06 3140 0010                                  move.w 	d0,$10(a0)	
0001CA0A 317C FC00 0012                             move.w 	#-$400,$12(a0);
0001CA10 4EBA FF5C                  		jsr	Obj94_IsEggmanAlive
0001CA14 4EB9 0001 0434             		jsr     SpeedToPos    		
0001CA1A 0C68 0540 000C             		cmpi.w	#$540,$C(a0)	; 
0001CA20 6400 0000                  		bcc.w	Obj94_Animate ; if not, branch
0001CA24 317C 0400 0012             		move.w	#$400,$12(a0)	; rush fist
0001CA2A 317C 0300 0010             		move.w	#$300,$10(a0)	
0001CA30 5428 0024                  		addq.b	#2,$24(a0)
0001CA34                            
0001CA34                            Obj94_Step1ReduceSpd:
0001CA34 0468 0012 0012             		subi.w	#$12,$12(a0)	; 
0001CA3A 4EBA FF32                  		jsr	Obj94_IsEggmanAlive
0001CA3E 4EB9 0001 0434             		jsr	SpeedToPos
0001CA44 0C68 2562 0008             		cmpi.w	#$2562,8(a0)	
0001CA4A 6D00 0000                  		blt.w	Obj94_Animate	; if not, branch
0001CA4E 303C 2512                  		move.w  #$2512,d0
0001CA52 9068 0008                  		sub.w 	$8(a0),d0
0001CA56 E540                       		asl.w 	#2,d0 
0001CA58 3140 0010                                  move.w 	d0,$10(a0)
0001CA5C 317C 0000 0012             		move.w	#0,$12(a0)	;
0001CA62 5428 0024                  		addq.b	#2,$24(a0)      ; goto next routine
0001CA66                            
0001CA66                            Obj94_Step1GoHome2:	
0001CA66 317C FC00 0012                             move.w 	#-$400,$12(a0);
0001CA6C 4EBA FF00                  		jsr	Obj94_IsEggmanAlive
0001CA70 4EB9 0001 0434             		jsr     SpeedToPos    		
0001CA76 0C68 0540 000C             		cmpi.w	#$540,$C(a0)	; 
0001CA7C 6400 0000                  		bcc.w	Obj94_Animate ; if not, branch
0001CA80 317C 0000 0012             		move.w	#0,$12(a0)	; stop fist
0001CA86 317C 0000 0010             		move.w	#0,$10(a0)
0001CA8C 5428 0024                  		addq.b	#2,$24(a0)	
0001CA90                            ; ===========================================================================
0001CA90                            
0001CA90                            
0001CA90                            Obj94_Step2MoveRight:
0001CA90 317C 0100 0010             		move.w	#$100,$10(a0)	; 
0001CA96 4EBA FED6                  		jsr	Obj94_IsEggmanAlive
0001CA9A 4EB9 0001 0434             		jsr 	SpeedToPos
0001CAA0 0C68 2562 0008             		cmpi.w	#$2562,8(a0)	
0001CAA6 6D00 0000                  		blt.w	Obj94_Animate	; if not, branch
0001CAAA 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001CAB0 317C 0000 0012             		move.w	#0,$12(a0)	;
0001CAB6 5428 0024                  		addq.b	#2,$24(a0)      ; goto next routine
0001CABA                            
0001CABA                            Obj94_Step2MoveDown:
0001CABA 317C 0300 0012             		move.w  #$300,$12(a0)
0001CAC0 4EBA FEAC                  		jsr	Obj94_IsEggmanAlive
0001CAC4 4EB9 0001 0434             		jsr     SpeedToPos
0001CACA 4EBA B9DC                  		jsr	ObjHitFloor
0001CACE 4A41                       		tst.w	d1		; has object hit the floor
0001CAD0 6A00 0000                  		bpl.w	Obj94_Animate	; if not, branch
0001CAD4 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001CADA 317C 0000 0012             		move.w	#0,$12(a0)	;
0001CAE0 303C 00BD                  		move.w	#$BD,d0
0001CAE4 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play stomping sound
0001CAEA 5428 0024                  		addq.b	#2,$24(a0)      ; goto next routine
0001CAEE                            
0001CAEE                            Obj94_Step2MoveLeft:
0001CAEE 317C FD00 0010             		move.w	#-$300,$10(a0)	; 
0001CAF4 4EBA FE78                  		jsr	Obj94_IsEggmanAlive
0001CAF8 4EB9 0001 0434             		jsr	SpeedToPos
0001CAFE 0C68 2472 0008             		cmpi.w	#$2472,8(a0)	
0001CB04 6400 0000                  		bcc.w	Obj94_Animate	; if not, branch
0001CB08 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001CB0E 317C 0000 0012             		move.w	#0,$12(a0)	;
0001CB14 5428 0024                  		addq.b	#2,$24(a0)      ; goto next routine
0001CB18                            
0001CB18                            ObJ94_Step2MoveUp:	
0001CB18 317C FD00 0012                             move.w 	#-$300,$12(a0);
0001CB1E 4EBA FE4E                  		jsr	Obj94_IsEggmanAlive
0001CB22 4EB9 0001 0434             		jsr     SpeedToPos    		
0001CB28 0C68 0540 000C             		cmpi.w	#$540,$C(a0)	; 
0001CB2E 6400 0000                  		bcc.w	Obj94_Animate ; if not, branch
0001CB32 317C 0000 0012             		move.w	#0,$12(a0)	; stop fist
0001CB38 317C 0000 0010             		move.w	#0,$10(a0)	
0001CB3E 5428 0024                  		addq.b	#2,$24(a0)
0001CB42                            
0001CB42                            Obj94_Step22MoveDown:
0001CB42 317C 0300 0012             		move.w  #$300,$12(a0)
0001CB48 4EBA FE24                  		jsr	Obj94_IsEggmanAlive
0001CB4C 4EB9 0001 0434             		jsr     SpeedToPos
0001CB52 4EBA B954                  		jsr	ObjHitFloor
0001CB56 4A41                       		tst.w	d1		; has object hit the floor
0001CB58 6A00 0000                  		bpl.w	Obj94_Animate	; if not, branch
0001CB5C 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001CB62 317C 0000 0012             		move.w	#0,$12(a0)	;
0001CB68 303C 00BD                  		move.w	#$BD,d0
0001CB6C 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play stomping sound
0001CB72 5428 0024                  		addq.b	#2,$24(a0)      ; goto next routine
0001CB76                            
0001CB76                            Obj94_Step22MoveRight:
0001CB76 317C 0200 0010             		move.w	#$200,$10(a0)	; 
0001CB7C 4EBA FDF0                  		jsr	Obj94_IsEggmanAlive
0001CB80 4EB9 0001 0434             		jsr	SpeedToPos
0001CB86 0C68 2562 0008             		cmpi.w	#$2562,8(a0)	
0001CB8C 6D00 0000                  		blt.w	Obj94_Animate	; if not, branch
0001CB90 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001CB96 317C 0000 0012             		move.w	#0,$12(a0)	;
0001CB9C 5428 0024                  		addq.b	#2,$24(a0)      ; goto next routine
0001CBA0                            
0001CBA0                            ObJ94_Step22MoveUp:	
0001CBA0 317C FD00 0012                             move.w 	#-$300,$12(a0);
0001CBA6 4EBA FDC6                  		jsr	Obj94_IsEggmanAlive
0001CBAA 4EB9 0001 0434             		jsr     SpeedToPos    		
0001CBB0 0C68 0540 000C             		cmpi.w	#$540,$C(a0)	; 
0001CBB6 6400 0000                  		bcc.w	Obj94_Animate ; if not, branch
0001CBBA 317C 0000 0012             		move.w	#0,$12(a0)	; stop fist
0001CBC0 317C 0000 0010             		move.w	#0,$10(a0)	
0001CBC6 5428 0024                  		addq.b	#2,$24(a0)
0001CBCA                            
0001CBCA                            ; ============================================================================
0001CBCA                            Obj94_Step3SmashPlayer:
0001CBCA 3038 D008                  		move.w ($FFFFD000+8).w,d0 
0001CBCE 9068 0008                  		sub.w 	$8(a0),d0
0001CBD2 E540                       		asl.w 	#2,d0 
0001CBD4 3140 0010                                  move.w 	d0,$10(a0)
0001CBD8 317C 0300 0012                             move.w 	#$300,$12(a0)
0001CBDE 4EBA FD8E                  		jsr	Obj94_IsEggmanAlive
0001CBE2 4EB9 0001 0434             		jsr     SpeedToPos
0001CBE8 4EBA B8BE                  		jsr	ObjHitFloor
0001CBEC 4A41                       		tst.w	d1		; has object hit the floor
0001CBEE 6A00 0000                  		bpl.w	Obj94_Animate	; if not, branch
0001CBF2 303C 00BD                  		move.w	#$BD,d0
0001CBF6 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play stomping sound
0001CBFC 317C 0000 0012             		move.w	#0,$12(a0)	; stop fist
0001CC02 3038 D008                  		move.w ($FFFFD000+8).w,d0 
0001CC06 9068 0008                  		sub.w 	$8(a0),d0
0001CC0A E540                       		asl.w 	#2,d0 
0001CC0C 3140 0010                                  move.w 	d0,$10(a0)	
0001CC10 6100 FD6A                  		bsr.w	Obj94_Shockwave
0001CC14 5428 0024                  		addq.b	#2,$24(a0)	; goto next routine
0001CC18                            
0001CC18                            
0001CC18                            ObJ94_Step3MoveUp:
0001CC18 317C FD00 0012                             move.w 	#-$300,$12(a0);
0001CC1E 4EBA FD4E                  		jsr	Obj94_IsEggmanAlive
0001CC22 4EB9 0001 0434             		jsr     SpeedToPos    		
0001CC28 0C68 0540 000C             		cmpi.w	#$540,$C(a0)	; 
0001CC2E 6400 0000                  		bcc.w	Obj94_Animate ; if not, branch
0001CC32 317C 0000 0012             		move.w	#0,$12(a0)	; stop fist
0001CC38 3038 D008                  		move.w ($FFFFD000+8).w,d0 
0001CC3C 9068 0008                  		sub.w 	$8(a0),d0
0001CC40 E540                       		asl.w 	#2,d0 
0001CC42 3140 0010                                  move.w 	d0,$10(a0)	
0001CC46 5428 0024                  		addq.b	#2,$24(a0)
0001CC4A                            
0001CC4A                            
0001CC4A                            Obj94_Step32SmashPlayer:
0001CC4A 317C 0200 0012                             move.w 	#$200,$12(a0)
0001CC50 4EBA FD1C                  		jsr	Obj94_IsEggmanAlive
0001CC54 4EB9 0001 0434             		jsr     SpeedToPos
0001CC5A 4EBA B84C                  		jsr	ObjHitFloor
0001CC5E 4A41                       		tst.w	d1		; has object hit the floor
0001CC60 6A00 0000                  		bpl.w	Obj94_Animate	; if not, branch
0001CC64 303C 00BD                  		move.w	#$BD,d0
0001CC68 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play stomping sound
0001CC6E 317C 0000 0012             		move.w	#0,$12(a0)	; stop fist
0001CC74 3038 D008                  		move.w ($FFFFD000+8).w,d0 
0001CC78 9068 0008                  		sub.w 	$8(a0),d0
0001CC7C E540                       		asl.w 	#2,d0 
0001CC7E 3140 0010                                  move.w 	d0,$10(a0)
0001CC82 5428 0024                  		addq.b	#2,$24(a0)	; goto next routine
0001CC86                            
0001CC86                            
0001CC86                            ObJ94_Step32MoveUp:	
0001CC86 317C FE00 0012                             move.w 	#-$200,$12(a0);
0001CC8C 4EBA FCE0                  		jsr	Obj94_IsEggmanAlive
0001CC90 4EB9 0001 0434             		jsr     SpeedToPos    		
0001CC96 0C68 0540 000C             		cmpi.w	#$540,$C(a0)	; 
0001CC9C 6400 0000                  		bcc.w	Obj94_Animate ; if not, branch
0001CCA0 317C 0000 0012             		move.w	#0,$12(a0)	; stop fist
0001CCA6 317C 0000 0010             		move.w	#0,$10(a0)	
0001CCAC 5428 0024                  		addq.b	#2,$24(a0)
0001CCB0                            
0001CCB0                            Obj94_Step33SmashPlayer:
0001CCB0 3038 D008                  		move.w ($FFFFD000+8).w,d0 
0001CCB4 9068 0008                  		sub.w 	$8(a0),d0
0001CCB8 E540                       		asl.w 	#2,d0 
0001CCBA 3140 0010                                  move.w 	d0,$10(a0)
0001CCBE 317C 0200 0012                             move.w 	#$200,$12(a0)
0001CCC4 4EBA FCA8                  		jsr	Obj94_IsEggmanAlive
0001CCC8 4EB9 0001 0434             		jsr     SpeedToPos
0001CCCE 4EBA B7D8                  		jsr	ObjHitFloor
0001CCD2 4A41                       		tst.w	d1		; has object hit the floor
0001CCD4 6A00 0000                  		bpl.w	Obj94_Animate	; if not, branch
0001CCD8 303C 00BD                  		move.w	#$BD,d0
0001CCDC 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play stomping sound
0001CCE2 317C 0000 0012             		move.w	#0,$12(a0)	; stop fist
0001CCE8 3038 D008                  		move.w ($FFFFD000+8).w,d0 
0001CCEC 9068 0008                  		sub.w 	$8(a0),d0
0001CCF0 E540                       		asl.w 	#2,d0 
0001CCF2 3140 0010                                  move.w 	d0,$10(a0)	
0001CCF6 5428 0024                  		addq.b	#2,$24(a0)	; goto next routine
0001CCFA                            
0001CCFA                            
0001CCFA                            ObJ94_Step33MoveUp:
0001CCFA 317C FE00 0012                             move.w 	#-$200,$12(a0);
0001CD00 4EBA FC6C                  		jsr	Obj94_IsEggmanAlive
0001CD04 4EB9 0001 0434             		jsr     SpeedToPos    		
0001CD0A 0C68 0540 000C             		cmpi.w	#$540,$C(a0)	; 
0001CD10 6400 0000                  		bcc.w	Obj94_Animate ; if not, branch
0001CD14 317C 0000 0012             		move.w	#0,$12(a0)	; stop fist
0001CD1A 317C 0000 0010             		move.w	#0,$10(a0)	
0001CD20 5428 0024                  		addq.b	#2,$24(a0)
0001CD24                            ; ============================================================================
0001CD24                            
0001CD24                            Obj94_Step4GetReady:
0001CD24 117C 003C 0033                             move.b  #$3C,$33(a0)	
0001CD2A 5428 0024                  		addq.b	#2,$24(a0)
0001CD2E                            
0001CD2E                            Obj94_Step4SmashFloor:
0001CD2E 5328 0033                  		subq.b  #1,$33(a0)
0001CD32 6A00 0000                  		bpl.w	Obj94_Animate
0001CD36 317C 0000 0010                             move.w 	#0,$10(a0);
0001CD3C 317C 0400 0012                             move.w 	#$400,$12(a0);
0001CD42 6100 FC2A                  		bsr.w	Obj94_IsEggmanAlive
0001CD46 4EB9 0001 0434             		jsr     SpeedToPos
0001CD4C 4EBA B75A                  		jsr	ObjHitFloor
0001CD50 4A41                       		tst.w	d1		; has object hit the floor
0001CD52 6A00 0000                  		bpl.w	Obj94_Animate	; if not, branch
0001CD56 303C 00BD                  		move.w	#$BD,d0
0001CD5A 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play stomping sound
0001CD60 317C 0000 0012             		move.w	#0,$12(a0)	; stop fist
0001CD66 317C 0000 0010             		move.w	#0,$10(a0)
0001CD6C                            
0001CD6C 6100 FC0E                  		bsr.w	Obj94_Shockwave
0001CD70 5428 0024                  		addq.b	#2,$24(a0)	; goto next routine
0001CD74                            
0001CD74                            ObJ94_Step4GoHome:	
0001CD74 317C FC00 0012                             move.w 	#-$400,$12(a0);
0001CD7A 4EBA FBF2                  		jsr	Obj94_IsEggmanAlive
0001CD7E 4EB9 0001 0434             		jsr     SpeedToPos    		
0001CD84 0C68 0540 000C             		cmpi.w	#$540,$C(a0)	; 
0001CD8A 6400 0000                  		bcc.w	Obj94_Animate ; if not, branch
0001CD8E 317C 0000 0012             		move.w	#0,$12(a0)	; stop fist
0001CD94 317C 0000 0010             		move.w	#0,$10(a0)
0001CD9A 117C 003C 0033             		move.b	#$3C,$33(a0)	
0001CDA0 117C 0002 0024             		move.b	#2,$24(a0)	
0001CDA6                            
0001CDA6                            Obj94_Animate:
0001CDA6 43F9 0001 B494             		lea	(Ani_Hellgirl).l,a1
0001CDAC 4EB9 0000 D3EA             		jsr	AnimateSprite
0001CDB2 4E75                       		rts
0001CDB4                            
0001CDB4                            
0001CDB4                            ; ============================================================================
0001CDB4                            
0001CDB4                            Obj94_Explode:
0001CDB4 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	(Obj3F)
0001CDB8 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0001CDBE 4EF9 0000 B978             		jmp	Obj3F		; jump to explosion code
0001CDC4                            
0001CDC4                            ; ---------------------------------------------------------------------------
0001CDC4                            ; Object 95 - Silver Sonic mk 2.0 (GHZ2)
0001CDC4                            ; ---------------------------------------------------------------------------
0001CDC4                            
0001CDC4                            Obj95:
0001CDC4 7000                       		moveq	#0,d0
0001CDC6 1028 0024                  		move.b	$24(a0),d0
0001CDCA 323B 0000                  		move.w	Obj95_Index(pc,d0.w),d1
0001CDCE 4EFB 1000                  		jmp	Obj95_Index(pc,d1.w)
0001CDD2                            ; ===========================================================================
0001CDD2                            
0001CDD2                            Obj95_Index:
0001CDD2 0000                       		dc.w Obj95_Main-Obj95_Index
0001CDD4 0000                       		dc.w Obj95_ShipMain-Obj95_Index
0001CDD6                            ; ===========================================================================
0001CDD6                            
0001CDD6                            Obj95_Main:
0001CDD6 5428 0024                  		addq.b	#2,$24(a0)
0001CDDA 217C 0001 B576 0004        		move.l	#Map_SilvSon,4(a0)
0001CDE2 317C 0480 0002             		move.w	#($9000/$20),2(a0)
0001CDE8 117C 0004 0001             		move.b	#4,1(a0)
0001CDEE 117C 0020 0019             		move.b	#$20,$19(a0)
0001CDF4 117C 0003 0018             		move.b	#3,$18(a0)
0001CDFA 3168 0008 0030             		move.w	8(a0),$30(a0)					; copy X-pos to secondary X-pos
0001CE00 3168 000C 0038             		move.w	$C(a0),$38(a0)					; copy Y-pos to secondary Y-pos
0001CE06 117C 000A 0021             		move.b  #10,$21(a0)
0001CE0C 4EB9 0000 0000                             jsr (BossStarLight_Ballhog_RobotnikHud).l
0001CE12                            
0001CE12                            Obj95_ShipMain:
0001CE12 7000                       		moveq	#0,d0
0001CE14 1028 0025                  		move.b	$25(a0),d0
0001CE18 323B 0000                  		move.w	Obj95_ShipIndex(pc,d0.w),d1
0001CE1C 4EBB 1000                  		jsr	Obj95_ShipIndex(pc,d1.w)
0001CE20 6100 0000                  		bsr.w	Obj95_ShipProcess
0001CE24 43F9 0001 B3BE             		lea	(Ani_SilvSon).l,a1
0001CE2A 4EB9 0000 D3EA             		jsr	(AnimateSprite).l
0001CE30 1028 0022                  		move.b	$22(a0),d0
0001CE34 0200 0003                  		andi.b	#3,d0
0001CE38 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001CE3E 8128 0001                  		or.b	d0,1(a0)
0001CE42 4EF9 0001 045A             		jmp	DisplaySprite
0001CE48                            ; ===========================================================================
0001CE48                            
0001CE48                            Obj95_ShipIndex:
0001CE48 0000                       		dc.w Obj95_Start-Obj95_ShipIndex
0001CE4A 0000                       		dc.w Obj95_Step1SetTimer-Obj95_ShipIndex
0001CE4C 0000                       		dc.w Obj95_Step1FlyLeft-Obj95_ShipIndex	
0001CE4E 0000                       		dc.w Obj95_Step2SetTimer-Obj95_ShipIndex
0001CE50 0000                       		dc.w Obj95_Step2DashRight-Obj95_ShipIndex
0001CE52 0000                       		dc.w Obj95_Step3SetTimer-Obj95_ShipIndex
0001CE54 0000                       		dc.w Obj95_Step3Jump-Obj95_ShipIndex
0001CE56 0000                       		dc.w Obj95_Step3HomingImpetum-Obj95_ShipIndex	
0001CE58 0000                       		dc.w Obj95_Step3DashLeft-Obj95_ShipIndex
0001CE5A 0000                       		dc.w Obj95_Step4SetTimer-Obj95_ShipIndex
0001CE5C 0000                       		dc.w Obj95_Step4Jump-Obj95_ShipIndex
0001CE5E 0000                       		dc.w Obj95_Step4HomingImpetum-Obj95_ShipIndex	
0001CE60 0000                       		dc.w Obj95_Step4DashRight-Obj95_ShipIndex
0001CE62 0000                       		dc.w Obj95_Step5SetTimer-Obj95_ShipIndex
0001CE64 0000                       		dc.w Obj95_Step5FlyUp-Obj95_ShipIndex
0001CE66 0000                       		dc.w Obj95_Step5HomingImpetum-Obj95_ShipIndex	
0001CE68 0000                       		dc.w Obj95_Step5DashRight-Obj95_ShipIndex						
0001CE6A                            Obj95_End_ShipIndex
0001CE6A 0000                       		dc.w Obj95_Explode-Obj95_ShipIndex
0001CE6C 0000                       		dc.w Obj95_ShipFall-Obj95_ShipIndex	; $C			
0001CE6E                            ; ===========================================================================
0001CE6E                            
0001CE6E                            Obj95_ShipProcess:
0001CE6E                            		; Move ship slightly up and down during the flight
0001CE6E                            
0001CE6E 0C28 0022 0025             		cmpi.b	#(Obj95_End_ShipIndex-Obj95_ShipIndex),$25(a0)	; is routine more or equals to 8?
0001CE74 6400                       		bcc.s	locret_1784ASilver			; if yes, branch
0001CE76                            
0001CE76 1028 003F                  		move.b	$3F(a0),d0			; Y-amplitude
0001CE7A 4EB9 0000 2CC8             		jsr	(CalcSine).l
0001CE80 EC40                       		asr.w	#6,d0				; d0 contains sine
0001CE82 D068 0038                  		add.w	$38(a0),d0			; add secondary Y-pos to d0
0001CE86 3140 000C                  		move.w	d0,$C(a0)			; and we've got Y-pos with the amplitude
0001CE8A 3168 0030 0008             		move.w	$30(a0),8(a0)
0001CE90 5428 003F                  		addq.b	#2,$3F(a0)			; reduce the amplitude
0001CE94                            
0001CE94                            		; Touch repsonse stuff
0001CE94 4A28 0022                  		tst.b	$22(a0)					; was boss defeated?
0001CE98 6B00                       		bmi.s	Obj95_ShipGone		; if yes, branch
0001CE9A 4A28 0020                  		tst.b	$20(a0)					; is touch response zero?
0001CE9E 6600                       		bne.s	locret_1784ASilver			; if not, branch
0001CEA0 4A28 003E                  		tst.b	$3E(a0)					; is flashes counter zero?
0001CEA4 6600                       		bne.s	Obj95_ShipFlash		; if not, branch
0001CEA6 117C 003C 003E             		move.b	#$3C,$3E(a0)		; set number of	times to flash
0001CEAC 303C 00AC                  		move.w	#$AC,d0
0001CEB0 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001CEB6                            
0001CEB6                            Obj95_ShipFlash:
0001CEB6 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001CEBA 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001CEBC 4A51                       		tst.w	(a1)		; is colour in pallete black?
0001CEBE 6600                       		bne.s	loc_1783CSilver	; if not, branch
0001CEC0 303C 0000                  		move.w	#$000,d0	; move 0EEE (white) to d0
0001CEC4                            
0001CEC4                            loc_1783CSilver:
0001CEC4 3280                       		move.w	d0,(a1)		; apply colour stored in d0
0001CEC6 5328 003E                  		subq.b	#1,$3E(a0)	; subtract 1 from flashes counter
0001CECA 6600                       		bne.s	locret_1784ASilver	; if flashes counter is not zero, branch
0001CECC 117C 0005 0020             		move.b	#5,$20(a0)	; restore touch responsibility
0001CED2                            
0001CED2                            locret_1784ASilver:
0001CED2 4E75                       		rts
0001CED4                            ; ===========================================================================
0001CED4                            ;loc_1784C:
0001CED4                            Obj95_ShipGone:
0001CED4 7064                       		moveq	#100,d0
0001CED6 6100 0000                  		bsr.w	AddPoints	; add 1000 points
0001CEDA 117C 0022 0025             		move.b	#(Obj95_End_ShipIndex-Obj95_ShipIndex),$25(a0)	; set routine to 8 (Obj95_Explode)
0001CEE0 317C 00B3 003C             		move.w	#179,$3C(a0)	; set timer to 179 (3 seconds)
0001CEE6 4E75                       		rts
0001CEE8                            ; ===========================================================================
0001CEE8                            
0001CEE8                            Obj95_Start:
0001CEE8 117C 0000 001C             		move.b	#0,$1C(a0)
0001CEEE 317C 0100 0012             		move.w	#$100,$12(a0)			; move ship down
0001CEF4 117C 0000 002A             		move.b  #0,$2A(a0)
0001CEFA 6100 E27A                  		bsr.w	BossMove
0001CEFE 0C68 029B 0038             		cmpi.w	#$29B,$38(a0)			; has the ship reached $338 on Y-axis?
0001CF04 6600                       		bne.s	Obj95_ShipStart_Locret 	; if not, branch
0001CF06 317C 0000 0012             		move.w	#0,$12(a0)				; stop ship
0001CF0C 117C 0005 0020             		move.b	#5,$20(a0)						; set touch response
0001CF12 5428 0025                  		addq.b	#2,$25(a0)				; goto next routine
0001CF16                            
0001CF16                            Obj95_ShipStart_Locret:
0001CF16 4E75                       		rts
0001CF18                            
0001CF18                            ; ===========================================================================
0001CF18                            
0001CF18                            Obj95_Step1SetTimer:
0001CF18 117C 001C 0033             		move.b	#$1C,$33(a0)
0001CF1E 5428 0025                  		addq.b	#2,$25(a0)
0001CF22                            
0001CF22                            Obj95_Step1FlyLeft:
0001CF22 5328 0033                  		subq.b	#1,$33(a0)
0001CF26 6A00 0000                  		bpl.w	Obj95_Step1Rts
0001CF2A 117C 0000 0033             		move.b	#0,$33(a0)
0001CF30 317C FE00 0010             		move.w	#-$200,$10(a0)	; move left
0001CF36 6100 E23E                  		bsr.w	BossMove
0001CF3A 0C68 3DD0 0030             		cmpi.w	#$3DD0,$30(a0)	
0001CF40 6400 0000                  		bcc.w	Obj95_Step1Rts	; if not, branch
0001CF44 0868 0000 0022                             bchg	#0,$22(a0)	; reverse direction of the ship
0001CF4A 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001CF50 317C 0000 0012             		move.w	#0,$12(a0)	;
0001CF56 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001CF5A                            
0001CF5A                            Obj95_Step1Rts:
0001CF5A 4E75                       		rts		
0001CF5C                            ; ===========================================================================
0001CF5C                            
0001CF5C                            Obj95_Step2SetTimer:
0001CF5C 103C 00BE                  		move.b	#$BE,d0			
0001CF60 4EB8 12D0                  		jsr	PlaySound_Special
0001CF64 117C 009A 0020                             move.b	#$9A,$20(a0)
0001CF6A 117C 0001 001C             		move.b	#1,$1C(a0)
0001CF70 117C 001C 0033             		move.b	#$1C,$33(a0)
0001CF76 5428 0025                  		addq.b	#2,$25(a0)
0001CF7A                            
0001CF7A                            Obj95_Step2DashRight:
0001CF7A 5328 0033                  		subq.b	#1,$33(a0)
0001CF7E 6A00 0000                  		bpl.w	Obj95_Step2Rts
0001CF82 117C 0000 0033             		move.b	#0,$33(a0)
0001CF88 317C 0200 0010             		move.w	#$200,$10(a0)	; move left
0001CF8E 6100 E1E6                  		bsr.w	BossMove
0001CF92 0C68 3EF0 0030             		cmpi.w	#$3EF0,$30(a0)	
0001CF98 6D00 0000                  		blt.w	Obj95_Step2Rts	; if not, branch
0001CF9C 0868 0000 0022                             bchg	#0,$22(a0)	; reverse direction of the ship
0001CFA2 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001CFA8 317C 0000 0012             		move.w	#0,$12(a0)	;
0001CFAE 117C 0000 001C             		move.b	#0,$1C(a0)
0001CFB4 117C 0005 0020                             move.b	#5,$20(a0)
0001CFBA 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001CFBE                            
0001CFBE                            Obj95_Step2Rts:
0001CFBE 4E75                       		rts		
0001CFC0                            ; ===========================================================================
0001CFC0                            
0001CFC0                            Obj95_Step3SetTimer:
0001CFC0 103C 00BE                  		move.b	#$BE,d0			
0001CFC4 4EB8 12D0                  		jsr	PlaySound_Special
0001CFC8 117C 001C 0033             		move.b	#$1C,$33(a0)
0001CFCE 5428 0025                  		addq.b	#2,$25(a0)
0001CFD2                            
0001CFD2                            Obj95_Step3Jump:
0001CFD2 5328 0033                  		subq.b	#1,$33(a0)
0001CFD6 6A00 0000                  		bpl.w	Obj95_Step3JumpRts
0001CFDA 117C 0000 0033             		move.b	#0,$33(a0)
0001CFE0 317C FE00 0012             		move.w	#-$200,$12(a0)	; move up
0001CFE6 317C FE10 0010             		move.w	#-$1F0,$10(a0)	;
0001CFEC 6100 E188                  		bsr.w	BossMove
0001CFF0 0C68 024B 0038             		cmpi.w	#$24B,$38(a0)	
0001CFF6 6600 0000                  		bne.w	Obj95_Step3JumpRts	; if not, branch
0001CFFA 3038 D008                  		move.w ($FFFFD000+8).w,d0 
0001CFFE 9068 0008                  		sub.w 	$8(a0),d0 
0001D002 E540                       		asl.w 	#2,d0 
0001D004 3140 0010                                  move.w 	d0,$10(a0)
0001D008 317C 0000 0012             		move.w	#0,$12(a0)	;
0001D00E 303C 00D1                                  move.w  #$D1,d0                           ; spin sound ($E0 in s2) 
0001D012 4EB9 0000 12D0                             jsr     (PlaySound_Special).l
0001D018 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001D01C                            
0001D01C                            Obj95_Step3JumpRts:
0001D01C 4E75                       		rts
0001D01E                            
0001D01E                            Obj95_Step3HomingImpetum:
0001D01E 117C 0001 001C             		move.b	#1,$1C(a0)
0001D024 117C 009A 0020                             move.b	#$9A,$20(a0)
0001D02A 317C 0200 0012             		move.w	#$200,$12(a0)	
0001D030 6100 E144                  		bsr.w	BossMove
0001D034 0C68 029B 0038             		cmpi.w	#$29B,$38(a0)	
0001D03A 6600 0000                  		bne.w	Obj95_Step3Rts	; if not, branch
0001D03E 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001D044 317C 0000 0012             		move.w	#0,$12(a0)	;
0001D04A 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001D04E                            
0001D04E                            Obj95_Step3DashLeft:
0001D04E 317C FE00 0010             		move.w	#-$200,$10(a0)	
0001D054 6100 E120                  		bsr.w	BossMove
0001D058 0C68 3DD0 0030             		cmpi.w	#$3DD0,$30(a0)	
0001D05E 6400 0000                  		bcc.w	Obj95_Step3Rts	; if not, branch
0001D062 0868 0000 0022                             bchg	#0,$22(a0)	; reverse direction of the ship
0001D068 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001D06E 317C 0000 0012             		move.w	#0,$12(a0)	;
0001D074 117C 0000 001C             		move.b	#0,$1C(a0)
0001D07A 117C 0005 0020                             move.b	#5,$20(a0)
0001D080 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001D084                            
0001D084                            Obj95_Step3Rts:
0001D084 4E75                       		rts		
0001D086                            ; ===========================================================================
0001D086                            
0001D086                            
0001D086                            Obj95_Step4SetTimer:
0001D086 103C 00BE                  		move.b	#$BE,d0			
0001D08A 4EB8 12D0                  		jsr	PlaySound_Special
0001D08E 117C 001C 0033             		move.b	#$1C,$33(a0)
0001D094 5428 0025                  		addq.b	#2,$25(a0)
0001D098                            
0001D098                            Obj95_Step4Jump:
0001D098 5328 0033                  		subq.b	#1,$33(a0)
0001D09C 6A00 0000                  		bpl.w	Obj95_Step4JumpRts
0001D0A0 117C 0000 0033             		move.b	#0,$33(a0)
0001D0A6 317C FE00 0012             		move.w	#-$200,$12(a0)	; move up
0001D0AC 317C 01F0 0010             		move.w	#$1F0,$10(a0)	;
0001D0B2 6100 E0C2                  		bsr.w	BossMove
0001D0B6 0C68 024B 0038             		cmpi.w	#$24B,$38(a0)	
0001D0BC 6600 0000                  		bne.w	Obj95_Step4JumpRts	; if not, branch
0001D0C0 3038 D008                  		move.w ($FFFFD000+8).w,d0 
0001D0C4 9068 0008                  		sub.w 	$8(a0),d0 
0001D0C8 E540                       		asl.w 	#2,d0 
0001D0CA 3140 0010                                  move.w 	d0,$10(a0)
0001D0CE 317C 0000 0012             		move.w	#0,$12(a0)	;
0001D0D4 303C 00D1                                  move.w  #$D1,d0                           ; spin sound ($E0 in s2) 
0001D0D8 4EB9 0000 12D0                             jsr     (PlaySound_Special).l
0001D0DE 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001D0E2                            
0001D0E2                            Obj95_Step4JumpRts:
0001D0E2 4E75                       		rts
0001D0E4                            
0001D0E4                            Obj95_Step4HomingImpetum:
0001D0E4 117C 0001 001C             		move.b	#1,$1C(a0)
0001D0EA 117C 009A 0020                             move.b	#$9A,$20(a0)
0001D0F0 317C 0200 0012             		move.w	#$200,$12(a0)	
0001D0F6 6100 E07E                  		bsr.w	BossMove
0001D0FA 0C68 029B 0038             		cmpi.w	#$29B,$38(a0)	
0001D100 6600 0000                  		bne.w	Obj95_Step4Rts	; if not, branch
0001D104 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001D10A 317C 0000 0012             		move.w	#0,$12(a0)	;
0001D110 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001D114                            
0001D114                            Obj95_Step4DashRight:
0001D114 317C 0200 0010             		move.w	#$200,$10(a0)	
0001D11A 6100 E05A                  		bsr.w	BossMove
0001D11E 0C68 3EF0 0030             		cmpi.w	#$3EF0,$30(a0)	
0001D124                            		;bne.w	Obj95_Step4Rts	; if not, branch
0001D124 6D00 0000                  		blt.w	Obj95_Step4Rts	; if not, branch
0001D128 0868 0000 0022                             bchg	#0,$22(a0)	; reverse direction of the ship
0001D12E 117C 0000 001C             		move.b	#0,$1C(a0)
0001D134 117C 0005 0020                             move.b	#5,$20(a0)
0001D13A 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001D140 317C 0000 0012             		move.w	#0,$12(a0)	;
0001D146 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001D14A                            
0001D14A                            Obj95_Step4Rts:
0001D14A 4E75                       		rts		
0001D14C                            ; ===========================================================================
0001D14C                            
0001D14C                            Obj95_Step5SetTimer:
0001D14C 103C 00BE                  		move.b	#$BE,d0			
0001D150 4EB8 12D0                  		jsr	PlaySound_Special
0001D154 117C 001C 0033             		move.b	#$1C,$33(a0)
0001D15A 5428 0025                  		addq.b	#2,$25(a0)
0001D15E                            
0001D15E                            Obj95_Step5FlyUp:
0001D15E 5328 0033                  		subq.b	#1,$33(a0)
0001D162 6A00 0000                  		bpl.w	Obj95_Step5FURts
0001D166 117C 0000 0033             		move.b	#0,$33(a0)
0001D16C 317C FC00 0012             		move.w	#-$400,$12(a0)	; move up
0001D172 6100 E002                  		bsr.w	BossMove
0001D176 0C68 01EB 0038             		cmpi.w	#$1EB,$38(a0)	
0001D17C 6600 0000                  		bne.w	Obj95_Step5FURts	; if not, branch
0001D180 117C 0001 001C             		move.b	#1,$1C(a0)
0001D186 117C 009A 0020                             move.b	#$9A,$20(a0)
0001D18C 103C 00BE                  		move.b	#$BE,d0			
0001D190 4EB8 12D0                  		jsr	PlaySound_Special
0001D194 3038 D008                  		move.w ($FFFFD000+8).w,d0 ;
0001D198 0C40 3ED0                  		cmpi.w	#$3ED0,d0	
0001D19C 6D00                       		blt.s	Obj95_CorrectCoordinate	
0001D19E 317C 3ED0 0030             		move.w	#$3ED0,$30(a0)
0001D1A4 6000                       		bra.s	Obj95_BranchNext
0001D1A6                            
0001D1A6                            Obj95_CorrectCoordinate:
0001D1A6 3178 D008 0030             		move.w	($FFFFD000+8).w,$30(a0)
0001D1AC                            
0001D1AC                            Obj95_BranchNext:
0001D1AC 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001D1B0                            
0001D1B0                            Obj95_Step5FURts:
0001D1B0 4E75                       		rts
0001D1B2                            
0001D1B2                            Obj95_Step5HomingImpetum:
0001D1B2 317C 0400 0012             		move.w	#$400,$12(a0)	
0001D1B8 6100 DFBC                  		bsr.w	BossMove
0001D1BC 0C68 029B 0038             		cmpi.w	#$29B,$38(a0)	
0001D1C2 6600 0000                  		bne.w	Obj95_Step5Rts	; if not, branch
0001D1C6 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001D1CC 317C 0000 0012             		move.w	#0,$12(a0)	;
0001D1D2 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001D1D6                            
0001D1D6                            Obj95_Step5DashRight:
0001D1D6 317C 0300 0010             		move.w	#$300,$10(a0)	
0001D1DC 6100 DF98                  		bsr.w	BossMove
0001D1E0 0C68 3EF0 0030             		cmpi.w	#$3EF0,$30(a0)	
0001D1E6                            		;bne.w	Obj95_Step4Rts	; if not, branch
0001D1E6 6D00 FF62                  		blt.w	Obj95_Step4Rts	; if not, branch
0001D1EA 103C 00BE                  		move.b	#$BE,d0			
0001D1EE 4EB8 12D0                  		jsr	PlaySound_Special
0001D1F2 117C 0000 001C             		move.b	#0,$1C(a0)
0001D1F8 117C 0005 0020                             move.b	#5,$20(a0)
0001D1FE 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001D204 317C 0000 0012             		move.w	#0,$12(a0)	;
0001D20A 117C 0002 0025             		move.b	#2,$25(a0)      ; goto next routine
0001D210                            
0001D210                            Obj95_Step5Rts:
0001D210 4E75                       		rts		
0001D212                            
0001D212                            ; ===========================================================================
0001D212                            
0001D212                            
0001D212                            Obj95_Explode:	
0001D212                            		;move.w	#-$200,$12(a0)	; move up
0001D212                            		;tst.b	1(a0)		; is object out of screen?
0001D212                            		;bpl.s	Obj95_ShipFall	; if yes, branch
0001D212                            		;bsr.w	BossDefeated
0001D212                            		;bsr.w	BossMove
0001D212                            		;rts
0001D212                            		;bra.w	Obj95_ShipProcess
0001D212                            			
0001D212 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from timer
0001D216 6B00                       		bmi.s	loc_17984armsei	; if timer is over, branch
0001D218 6000 DF1A                  		bra.w	BossDefeated
0001D21C                            
0001D21C                            loc_17984armsei:
0001D21C 08E8 0000 0022             		bset	#0,$22(a0)	; set orientation to 1 (right)
0001D222 08A8 0007 0022             		bclr	#7,$22(a0)	; clear defeated flag
0001D228 4268 0010                  		clr.w	$10(a0)		; clear X-velocity
0001D22C 5428 0025                  		addq.b	#2,$25(a0)
0001D230 317C FFDA 003C             		move.w	#-$26,$3C(a0)	; set timer to -$26
0001D236 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001D23A 6600                       		bne.s	locret_179AAarmsei
0001D23C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001D242                            
0001D242                            locret_179AAarmsei:
0001D242 4E75                       		rts
0001D244                            	
0001D244                            ; ===========================================================================
0001D244                            
0001D244                            ;loc_179AC:
0001D244                            Obj95_ShipFall:	                                          ; XREF: Obj8E_ShipIndex
0001D244 303C 0099                  		move.w	#$99,d0
0001D248 4EB9 0000 12CA             		jsr	(PlaySound).l	; play WIN sound
0001D24E 4268 0012                                  clr.w	$12(a0)		; clear Y-velocity
0001D252 317C 0000 0014                             move.w  #$0,$14(a0)     ;clear all speeds
0001D258 11FC 0001 F7CC                             move.b	#1,($FFFFF7CC).w	; lock	controls
0001D25E 337C 0000 0014                             move.w	#0,$14(a1)	; stop Sonic moving
0001D264 31FC 0008 F602                             move.w	#(Right)<<0,(SonicControl) ; make Sonic stand
0001D26A 11FC 0001 FFFE                             move.b	#1,($FFFFFFFE).w ;set win flag
0001D270 4EB9 0001 1D18                             jsr     GotThroughAct
0001D276 4EF9 0001 0496                             jmp	(DeleteObject).l
0001D27C                            
0001D27C                            ; ---------------------------------------------------------------------------
0001D27C                            ; Object 65 - Spiked Wheel enemy (SYZ)
0001D27C                            ; ---------------------------------------------------------------------------
0001D27C                            
0001D27C                            Obj65:					; XREF: Obj_Index
0001D27C 7000                       		moveq	#0,d0
0001D27E 1028 0024                  		move.b	$24(a0),d0
0001D282 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
0001D286 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
0001D28A                            ; ===========================================================================
0001D28A                            
0001D28A 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
0001D28C 0000                       		dc.w Obj65_Action-Obj65_Index
0001D28E                            ; ===========================================================================
0001D28E                            
0001D28E                            Obj65_Main:				; XREF: Obj65_Index
0001D28E 217C 0000 0000 0004        		move.l	#Map_Obj65,4(a0)
0001D296 0C38 0005 FE10                             cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
0001D29C 6700                                       beq.s   Obj65_SBZTiles
0001D29E 317C 0396 0002             		move.w	#($72C0/$20),2(a0)
0001D2A4 6000                       		bra.s	Obj65_SetOtherStuff
0001D2A6                            
0001D2A6                            Obj65_SBZTiles:
0001D2A6 317C 0400 0002             		move.w	#($8000/$20),2(a0)
0001D2AC                            		
0001D2AC                            Obj65_SetOtherStuff:
0001D2AC 117C 0004 0001             		move.b	#4,1(a0)
0001D2B2 117C 0004 0018             		move.b	#4,$18(a0)
0001D2B8 117C 0014 0019             		move.b	#$14,$19(a0)
0001D2BE                            		;move.b	#8,$16(a0)
0001D2BE 117C 0008 0017             		move.b	#8,$17(a0)
0001D2C4 117C 009A 0020             		move.b	#$9A,$20(a0)
0001D2CA 4EB9 0001 0408             		jsr	ObjectFall
0001D2D0 6100 B1D6                  		bsr.w	ObjHitFloor
0001D2D4 4A41                       		tst.w	d1		; is object above the ground?
0001D2D6 6A00                       		bpl.s	locret_F89Estump	; if yes, branch
0001D2D8 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001D2DC 317C 0000 0012             		move.w	#0,$12(a0)
0001D2E2 5428 0024                  		addq.b	#2,$24(a0)
0001D2E6 0868 0000 0022             		bchg	#0,$22(a0)	; change object's orientation
0001D2EC                            
0001D2EC                            locret_F89Estump:
0001D2EC 4E75                       		rts	
0001D2EE                            ; ===========================================================================
0001D2EE                            
0001D2EE                            Obj65_Action:				; XREF: Obj65_Index
0001D2EE 7000                       		moveq	#0,d0
0001D2F0 1028 0025                  		move.b	$25(a0),d0
0001D2F4 323B 0000                  		move.w	Obj65_Index2(pc,d0.w),d1
0001D2F8 4EBB 1000                  		jsr	Obj65_Index2(pc,d1.w)
0001D2FC 43F9 0000 0000             		lea	(Ani_Obj65a).l,a1
0001D302 4EB9 0000 D3EA             		jsr	AnimateSprite
0001D308                            		;bra.w	MarkObjGone
0001D308 4EF9 0001 2770             		jmp	MarkObjGone
0001D30E                            ; ===========================================================================
0001D30E 0000                       Obj65_Index2:	dc.w Obj65_Move-Obj65_Index2
0001D310 0000                       		dc.w Obj65_FixToFloor-Obj65_Index2
0001D312                            ; ===========================================================================
0001D312                            
0001D312                            Obj65_Move:				; XREF: Obj65_Index2
0001D312 5428 0025                  		addq.b	#2,$25(a0)
0001D316 317C FE00 0010             		move.w	#-$200,$10(a0)	; move object slightly up
0001D31C 117C 0001 001C             		move.b	#1,$1C(a0)
0001D322 0868 0000 0022             		bchg	#0,$22(a0)	; change object's orientation
0001D328 6600                       		bne.s	locret_F8E2stump	; if orientation is left, branch
0001D32A 4468 0010                  		neg.w	$10(a0)		; change direction
0001D32E                            
0001D32E                            locret_F8E2stump:
0001D32E 4E75                       		rts	
0001D330                            ; ===========================================================================
0001D330                            
0001D330                            Obj65_FixToFloor:			; XREF: Obj65_Index2
0001D330 4EB9 0001 0434             		jsr	SpeedToPos
0001D336 6100 B170                  		bsr.w	ObjHitFloor
0001D33A 0C41 FFF8                  		cmpi.w	#-8,d1
0001D33E 6D00                       		blt.s	Obj65_Switchback
0001D340 0C41 000C                  		cmpi.w	#$C,d1
0001D344 6C00                       		bge.s	Obj65_Switchback
0001D346 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0001D34A 4EB9 0001 28A0             		jsr	Obj50_ChkWall
0001D350 6600                       		bne.s	Obj65_Switchback
0001D352 4E75                       		rts	
0001D354                            ; ===========================================================================
0001D354                            
0001D354                            Obj65_Switchback:				; XREF: Obj65_FixToFloor
0001D354 5528 0025                  		subq.b	#2,$25(a0)
0001D358 4E75                       		rts	
0001D35A                            ; ===========================================================================
0001D35A                            Ani_Obj65a:
0001D35A                            	include "_anim\Obj65a.asm"
0001D35A                            ; ---------------------------------------------------------------------------
0001D35A                            ; Animation script - Spiked Wheel enemy
0001D35A                            ; ---------------------------------------------------------------------------
0001D35A 0000                       		dc.w byte_F920Stump-Ani_obj65a
0001D35C 0000                       		dc.w byte_F924Stump-Ani_obj65a
0001D35E 0700 FF00                  byte_F920Stump:	dc.b 7,	0, $FF,	0
0001D362 0300 0100 0100 0103 0505+  byte_F924Stump:	dc.b 3,	0, 1, 0, 1, 0, 1, 3, 5, 5, 4, 2, 0, 1, $FF
0001D372 00                         		even
0001D372 00                         		even
0001D372                            
0001D372                            ; ---------------------------------------------------------------------------
0001D372                            ; Sprite mappings - Mr. Stumpy enemy (SYZ)
0001D372                            ; ---------------------------------------------------------------------------
0001D372                            Map_Obj65:
0001D372                            	include "_maps\Obj65a.asm"
0001D372                            ; --------------------------------------------------------------------------------
0001D372                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001D372                            ; --------------------------------------------------------------------------------
0001D372                            
0001D372                            SME_zs2UW:	
0001D372 0000 0000                  		dc.w SME_zs2UW_C-SME_zs2UW, SME_zs2UW_12-SME_zs2UW	
0001D376 0000 0000                  		dc.w SME_zs2UW_18-SME_zs2UW, SME_zs2UW_1E-SME_zs2UW	
0001D37A 0000 0000                  		dc.w SME_zs2UW_24-SME_zs2UW, SME_zs2UW_2A-SME_zs2UW	
0001D37E 01                         SME_zs2UW_C:	dc.b 1	
0001D37F E00F 0000 F8               		dc.b $E0, $F, 0, 0, $F8	
0001D384 01                         SME_zs2UW_12:	dc.b 1	
0001D385 E00F 0010 F8               		dc.b $E0, $F, 0, $10, $F8	
0001D38A 01                         SME_zs2UW_18:	dc.b 1	
0001D38B DE0F 0000 F8               		dc.b $DE, $F, 0, 0, $F8	
0001D390 01                         SME_zs2UW_1E:	dc.b 1	
0001D391 DC0F 0010 F8               		dc.b $DC, $F, 0, $10, $F8	
0001D396 01                         SME_zs2UW_24:	dc.b 1	
0001D397 DA0F 0000 F8               		dc.b $DA, $F, 0, 0, $F8	
0001D39C 01                         SME_zs2UW_2A:	dc.b 1	
0001D39D DA0F 0010 F8               		dc.b $DA, $F, 0, $10, $F8	
0001D3A2                            		even
0001D3A2                            		even
0001D3A2                            
0001D3A2                            ; ---------------------------------------------------------------------------
0001D3A2                            ; Object 96 - Tails Doll
0001D3A2                            ; ---------------------------------------------------------------------------
0001D3A2                            
0001D3A2                            Obj96:
0001D3A2 7000                       		moveq	#0,d0
0001D3A4 1028 0024                  		move.b	$24(a0),d0
0001D3A8 323B 0000                  		move.w	Obj96_Index(pc,d0.w),d1
0001D3AC 4EFB 1000                  		jmp	Obj96_Index(pc,d1.w)
0001D3B0                            ; ===========================================================================
0001D3B0                            
0001D3B0                            Obj96_Index:
0001D3B0 0000                       		dc.w Obj96_Main-Obj96_Index
0001D3B2 0000                       		dc.w Obj96_ShipMain-Obj96_Index
0001D3B4                            ; ===========================================================================
0001D3B4                            
0001D3B4                            Obj96_Main:
0001D3B4 5428 0024                  		addq.b	#2,$24(a0)
0001D3B8 217C 0001 B80A 0004        		move.l	#Map_Tailsdoll,4(a0)
0001D3C0 317C 0480 0002             		move.w	#($9000/$20),2(a0)
0001D3C6 117C 0004 0001             		move.b	#4,1(a0)
0001D3CC 117C 0020 0019             		move.b	#$20,$19(a0)
0001D3D2 117C 0003 0018             		move.b	#3,$18(a0)
0001D3D8 117C 0005 0020             		move.b	#5,$20(a0)						; set touch response
0001D3DE 3168 0008 0030             		move.w	8(a0),$30(a0)					; copy X-pos to secondary X-pos
0001D3E4 3168 000C 0038             		move.w	$C(a0),$38(a0)					; copy Y-pos to secondary Y-pos
0001D3EA 117C 000A 0021             		move.b  #10,$21(a0)
0001D3F0 4EB9 0000 0000                             jsr (BossStarLight_Ballhog_RobotnikHud).l
0001D3F6                            
0001D3F6                            Obj96_ShipMain:
0001D3F6 7000                       		moveq	#0,d0
0001D3F8 1028 0025                  		move.b	$25(a0),d0
0001D3FC 323B 0000                  		move.w	Obj96_ShipIndex(pc,d0.w),d1
0001D400 4EBB 1000                  		jsr	Obj96_ShipIndex(pc,d1.w)
0001D404 6100 0000                  		bsr.w	Obj96_ShipProcess
0001D408 43F9 0001 B4A0             		lea	(Ani_Tailsdoll).l,a1
0001D40E 4EB9 0000 D3EA             		jsr	(AnimateSprite).l
0001D414 1028 0022                  		move.b	$22(a0),d0
0001D418 0200 0003                  		andi.b	#3,d0
0001D41C 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001D422 8128 0001                  		or.b	d0,1(a0)
0001D426 4EF9 0001 045A             		jmp	DisplaySprite
0001D42C                            ; ===========================================================================
0001D42C                            
0001D42C                            Obj96_ShipIndex:
0001D42C 0000                       		dc.w Obj96_MoveLeft-Obj96_ShipIndex ; 0	
0001D42E 0000                       		dc.w Obj96_CheckFloor-Obj96_ShipIndex ; 4
0001D430 0000                       		dc.w Obj96_MoveLeft2-Obj96_ShipIndex ; 6
0001D432 0000                       		dc.w Obj96_MoveRight-Obj96_ShipIndex ; 8
0001D434 0000                       		dc.w Obj96_Whirling-Obj96_ShipIndex
0001D436 0000                       		dc.w Obj96_CheckFloor2-Obj96_ShipIndex	
0001D438 0000                       		dc.w Obj96_MoveRight2-Obj96_ShipIndex	
0001D43A 0000                       		dc.w Obj96_Return-Obj96_ShipIndex
0001D43C 0000                       		dc.w Obj96_FlyUp-Obj96_ShipIndex
0001D43E 0000                       		dc.w Obj96_SkvodelaDown-Obj96_ShipIndex	
0001D440 0000                       		dc.w Obj96_SkvodelaUp-Obj96_ShipIndex
0001D442 0000                       		dc.w Obj96_SkvodelaLeft-Obj96_ShipIndex
0001D444 0000                       		dc.w Obj96_SkvodelaRight-Obj96_ShipIndex		
0001D446                            Obj96_End_ShipIndex
0001D446 0000                       		dc.w Obj96_Explode-Obj96_ShipIndex
0001D448 0000                       		dc.w Obj96_ShipFall-Obj96_ShipIndex	; $C			
0001D44A                            ; ===========================================================================
0001D44A                            
0001D44A                            Obj96_ShipProcess:
0001D44A                            		; Move ship slightly up and down during the flight
0001D44A                            
0001D44A 0C28 001A 0025             		cmpi.b	#(Obj96_End_ShipIndex-Obj96_ShipIndex),$25(a0)	; is routine more or equals to 8?
0001D450 6400                       		bcc.s	locret_1784Aplay			; if yes, branch
0001D452                            
0001D452 1028 003F                  		move.b	$3F(a0),d0			; Y-amplitude
0001D456 4EB9 0000 2CC8             		jsr	(CalcSine).l
0001D45C EC40                       		asr.w	#6,d0				; d0 contains sine
0001D45E D068 0038                  		add.w	$38(a0),d0			; add secondary Y-pos to d0
0001D462 3140 000C                  		move.w	d0,$C(a0)			; and we've got Y-pos with the amplitude
0001D466 3168 0030 0008             		move.w	$30(a0),8(a0)
0001D46C 5428 003F                  		addq.b	#2,$3F(a0)			; reduce the amplitude
0001D470                            
0001D470                            		; Touch repsonse stuff
0001D470 4A28 0022                  		tst.b	$22(a0)					; was boss defeated?
0001D474 6B00                       		bmi.s	Obj96_ShipGone		; if yes, branch
0001D476 4A28 0020                  		tst.b	$20(a0)					; is touch response zero?
0001D47A 6600                       		bne.s	locret_1784Aplay			; if not, branch
0001D47C 4A28 003E                  		tst.b	$3E(a0)					; is flashes counter zero?
0001D480 6600                       		bne.s	Obj96_ShipFlash		; if not, branch
0001D482 117C 003C 003E             		move.b	#$3C,$3E(a0)		; set number of	times to flash
0001D488 303C 00AC                  		move.w	#$AC,d0
0001D48C 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001D492                            
0001D492                            Obj96_ShipFlash:
0001D492 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001D496 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001D498 4A51                       		tst.w	(a1)		; is colour in pallete black?
0001D49A 6600                       		bne.s	loc_1783Cplay	; if not, branch
0001D49C 303C 0000                  		move.w	#$000,d0	; move 0EEE (white) to d0
0001D4A0                            
0001D4A0                            loc_1783Cplay:
0001D4A0 3280                       		move.w	d0,(a1)		; apply colour stored in d0
0001D4A2 5328 003E                  		subq.b	#1,$3E(a0)	; subtract 1 from flashes counter
0001D4A6 6600                       		bne.s	locret_1784Aplay	; if flashes counter is not zero, branch
0001D4A8 117C 0005 0020             		move.b	#5,$20(a0)	; restore touch responsibility
0001D4AE                            
0001D4AE                            locret_1784Aplay:
0001D4AE 4E75                       		rts
0001D4B0                            ; ===========================================================================
0001D4B0                            ;loc_1784C:
0001D4B0                            Obj96_ShipGone:
0001D4B0 7064                       		moveq	#100,d0
0001D4B2 6100 0000                  		bsr.w	AddPoints	; add 1000 points
0001D4B6 117C 001A 0025             		move.b	#(Obj96_End_ShipIndex-Obj96_ShipIndex),$25(a0)	; set routine to 8 (Obj96_Explode)
0001D4BC 317C 00B3 003C             		move.w	#179,$3C(a0)	; set timer to 179 (3 seconds)
0001D4C2 4E75                       		rts
0001D4C4                            ; ===========================================================================
0001D4C4                            
0001D4C4                            Obj96_MoveLeft:
0001D4C4 117C 0000 001C             		move.b	#0,$1C(a0)
0001D4CA 317C FE00 0010             		move.w	#-$200,$10(a0)			
0001D4D0 317C 0000 0012             		move.w	#0,$12(a0)
0001D4D6 6100 DC9E                  		bsr.w	BossMove
0001D4DA 0C68 2FCD 0030             		cmpi.w	#$2FCD,$30(a0)			; has the ship reached $338 on Y-axis?
0001D4E0 6400 0000                  		bcc.w	loc_letsplay 	; if not, branch
0001D4E4 0868 0000 0022                             bchg	#0,$22(a0)
0001D4EA 117C 0001 001C             		move.b	#1,$1C(a0)
0001D4F0 117C 009A 0020                             move.b	#$9A,$20(a0)
0001D4F6 303C 00A2                  		move.w	#$A2,d0			; JD sound (A2)
0001D4FA 4EB9 0000 12D0             		jsr	(PlaySound_Special).l   ; play jump dash sound
0001D500 3038 D008                  		move.w ($FFFFD000+8).w,d0 
0001D504 9068 0008                  		sub.w 	$8(a0),d0 
0001D508 E540                       		asl.w 	#2,d0 
0001D50A 3140 0010                                  move.w 	d0,$10(a0)
0001D50E 5428 0025                  		addq.b	#2,$25(a0)				; goto next routine
0001D512                            
0001D512                            Obj96_CheckFloor:
0001D512 317C 0200 0012             		move.w	#$200,$12(a0)
0001D518 6100 DC5C                  		bsr.w	BossMove
0001D51C 0C68 01C7 0038              		cmpi.w	#$1C7,$38(a0)	
0001D522 6D00 0000                  		blt.w	loc_letsplay
0001D526 303C 30F0                  		move.w  #$30F0,d0 
0001D52A 9068 0008                  		sub.w 	$8(a0),d0 
0001D52E E540                       		asl.w 	#2,d0 
0001D530 3140 0010                                  move.w 	d0,$10(a0)
0001D534 5428 0025                  		addq.b	#2,$25(a0)
0001D538                            
0001D538                            Obj96_MoveLeft2:
0001D538 317C FE00 0012             		move.w	#-$200,$12(a0)
0001D53E 6100 DC36                  		bsr.w	BossMove
0001D542 0C68 0150 0038             		cmpi.w	#$150,$38(a0)			; 
0001D548 6400 0000                  		bcc.w	loc_letsplay 	; if not, branch
0001D54C 117C 0000 001C             		move.b	#0,$1C(a0)
0001D552 117C 0005 0020             		move.b	#5,$20(a0)
0001D558 0868 0000 0022                             bchg	#0,$22(a0)			
0001D55E 317C 0000 0012             		move.w	#0,$12(a0)
0001D564 5428 0025                  		addq.b	#2,$25(a0)
0001D568                            
0001D568                            Obj96_MoveRight:
0001D568 317C FE00 0010             		move.w	#-$200,$10(a0)
0001D56E 6100 DC06                  		bsr.w	BossMove
0001D572 0C68 2FCD 0030             		cmpi.w	#$2FCD,$30(a0)			;
0001D578 6400 0000                  		bcc.w	loc_letsplay 	; if not, branch
0001D57C 0868 0000 0022                             bchg	#0,$22(a0)			
0001D582 317C 0000 0012             		move.w	#0,$12(a0)
0001D588 5428 0025                  		addq.b	#2,$25(a0)
0001D58C                            
0001D58C                            Obj96_Whirling:
0001D58C 317C 0200 0010             		move.w	#$200,$10(a0)
0001D592 6100 DBE2                  		bsr.w	BossMove
0001D596 0C68 30F0 0030             		cmpi.w	#$30F0,$30(a0)			;
0001D59C 6D00 0000                  		blt.w	loc_letsplay 	; if not, branch
0001D5A0 0868 0000 0022                             bchg	#0,$22(a0)
0001D5A6 117C 0001 001C             		move.b	#1,$1C(a0)
0001D5AC 117C 009A 0020                             move.b	#$9A,$20(a0)
0001D5B2 303C 00A2                  		move.w	#$A2,d0			; JD sound (A2)
0001D5B6 4EB9 0000 12D0             		jsr	(PlaySound_Special).l   ; play jump dash sound
0001D5BC 3038 D008                  		move.w ($FFFFD000+8).w,d0 
0001D5C0 9068 0008                  		sub.w 	$8(a0),d0 
0001D5C4 E540                       		asl.w 	#2,d0 
0001D5C6 3140 0010                                  move.w 	d0,$10(a0)
0001D5CA 5428 0025                  		addq.b	#2,$25(a0)				; goto next routine
0001D5CE                            
0001D5CE                            Obj96_CheckFloor2:
0001D5CE 317C 0200 0012             		move.w	#$200,$12(a0)
0001D5D4 6100 DBA0                  		bsr.w	BossMove
0001D5D8 0C68 01C7 0038              		cmpi.w	#$1C7,$38(a0)	
0001D5DE 6D00 0000                  		blt.w	loc_letsplay
0001D5E2 303C 2FCD                  		move.w  #$2FCD,d0 
0001D5E6 9068 0008                  		sub.w 	$8(a0),d0 
0001D5EA E540                       		asl.w 	#2,d0 
0001D5EC 3140 0010                                  move.w 	d0,$10(a0)
0001D5F0 5428 0025                  		addq.b	#2,$25(a0)
0001D5F4                            
0001D5F4                            Obj96_MoveRight2:
0001D5F4 317C FE00 0012             		move.w	#-$200,$12(a0)
0001D5FA 6100 DB7A                  		bsr.w	BossMove
0001D5FE 0C68 0150 0038             		cmpi.w	#$150,$38(a0)			; 
0001D604 6400 0000                  		bcc.w	loc_letsplay 	; if not, branch
0001D608 117C 0000 001C             		move.b	#0,$1C(a0)
0001D60E 117C 0005 0020             		move.b	#5,$20(a0)			
0001D614 317C 0000 0012             		move.w	#0,$12(a0)
0001D61A 5428 0025                  		addq.b	#2,$25(a0)
0001D61E                            
0001D61E                            Obj96_Return:
0001D61E 317C FF38 0010             		move.w	#-200,$10(a0)
0001D624 6100 DB50                  		bsr.w	BossMove
0001D628 0C68 2FCD 0030             		cmpi.w	#$2FCD,$30(a0)			;
0001D62E 6400 0000                  		bcc.w	loc_letsplay 	; if not, branch
0001D632                                            ;bchg	#0,$22(a0)
0001D632 117C 0001 001C             		move.b	#1,$1C(a0)
0001D638 117C 009A 0020                             move.b	#$9A,$20(a0)
0001D63E 303C 00A2                  		move.w	#$A2,d0			; JD sound (A2)
0001D642 4EB9 0000 12D0             		jsr	(PlaySound_Special).l   ; play jump dash sound
0001D648 5428 0025                  		addq.b	#2,$25(a0)
0001D64C                            
0001D64C                            Obj96_FlyUp:
0001D64C 317C 0000 0010             		move.w	#0,$10(a0)
0001D652 317C FE00 0012             		move.w	#-$200,$12(a0)
0001D658 6100 DB1C                  		bsr.w	BossMove
0001D65C 0C68 0110 0038             		cmpi.w	#$110,$38(a0)			; 
0001D662 6400 0000                  		bcc.w	loc_letsplay 	; if not, branch
0001D666 3178 D008 0030             		move.w	($FFFFD000+8).w,$30(a0)
0001D66C 5428 0025                  		addq.b	#2,$25(a0)
0001D670                            
0001D670                            Obj96_SkvodelaDown:
0001D670 317C 0300 0012             		move.w	#$300,$12(a0)
0001D676 6100 DAFE                  		bsr.w	BossMove
0001D67A 0C68 0205 0038             		cmpi.w	#$205,$38(a0)			; 
0001D680 6D00 0000                  		blt.w	loc_letsplay 	; if not, branch
0001D684 3178 D008 0030             		move.w	($FFFFD000+8).w,$30(a0)
0001D68A 303C 00A2                  		move.w	#$A2,d0			; JD sound (A2)
0001D68E 4EB9 0000 12D0             		jsr	(PlaySound_Special).l   ; play jump dash sound
0001D694 5428 0025                  		addq.b	#2,$25(a0)
0001D698                            
0001D698                            Obj96_SkvodelaUp:
0001D698 317C FD00 0012             		move.w	#-$300,$12(a0)
0001D69E 6100 DAD6                  		bsr.w	BossMove
0001D6A2 0C68 0120 0038             		cmpi.w	#$120,$38(a0)			; 
0001D6A8 6400 0000                  		bcc.w	loc_letsplay 	; if not, branch
0001D6AC 317C 3100 0030             		move.w	#$3100,$30(a0)
0001D6B2 3178 D00C 0038             		move.w	($FFFFD000+$C).w,$38(a0)
0001D6B8 303C 00A2                  		move.w	#$A2,d0			; JD sound (A2)
0001D6BC 4EB9 0000 12D0             		jsr	(PlaySound_Special).l   ; play jump dash sound
0001D6C2 5428 0025                  		addq.b	#2,$25(a0)
0001D6C6                            
0001D6C6                            Obj96_SkvodelaLeft:
0001D6C6 317C 0000 0012             		move.w	#0,$12(a0)
0001D6CC 317C FD00 0010             		move.w	#-$300,$10(a0)
0001D6D2 6100 DAA2                  		bsr.w	BossMove
0001D6D6 0C68 2FA0 0030             		cmpi.w	#$2FA0,$30(a0)			; 
0001D6DC 6400 0000                  		bcc.w	loc_letsplay 	; if not, branch
0001D6E0 3178 D00C 0038             		move.w	($FFFFD000+$C).w,$38(a0)
0001D6E6 303C 00A2                  		move.w	#$A2,d0			; JD sound (A2)
0001D6EA 4EB9 0000 12D0             		jsr	(PlaySound_Special).l   ; play jump dash sound
0001D6F0 5428 0025                  		addq.b	#2,$25(a0)
0001D6F4                            
0001D6F4                            Obj96_SkvodelaRight:
0001D6F4 317C 0300 0010             		move.w	#$300,$10(a0)
0001D6FA 6100 DA7A                  		bsr.w	BossMove
0001D6FE 0C68 312D 0030             		cmpi.w	#$312D,$30(a0)			; 
0001D704 6D00 0000                  		blt.w	loc_letsplay 	; if not, branch
0001D708 117C 0000 001C             		move.b	#0,$1C(a0)
0001D70E 117C 0005 0020             		move.b	#5,$20(a0)
0001D714 317C 312D 0030                             move.w	#$312D,$30(a0)	; X-position
0001D71A 317C 0150 0038             		move.w	#$150,$38(a0)	; Y-position
0001D720 117C 0000 0025             		move.b	#0,$25(a0)
0001D726                            
0001D726                            loc_letsplay:
0001D726 4E75                       		rts
0001D728                            
0001D728                            ; ===========================================================================
0001D728                            
0001D728                            Obj96_Explode:	
0001D728 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from timer
0001D72C 6B00                       		bmi.s	loc_17984play	; if timer is over, branch
0001D72E 6000 DA04                  		bra.w	BossDefeated
0001D732                            
0001D732                            loc_17984play:
0001D732 08E8 0000 0022             		bset	#0,$22(a0)	; set orientation to 1 (right)
0001D738 08A8 0007 0022             		bclr	#7,$22(a0)	; clear defeated flag
0001D73E 4268 0010                  		clr.w	$10(a0)		; clear X-velocity
0001D742 5428 0025                  		addq.b	#2,$25(a0)
0001D746 317C FFDA 003C             		move.w	#-$26,$3C(a0)	; set timer to -$26
0001D74C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001D750 6600                       		bne.s	locret_179AAplay
0001D752 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001D758                            
0001D758                            locret_179AAplay:
0001D758 4E75                       		rts
0001D75A                            	
0001D75A                            ; ===========================================================================
0001D75A                            
0001D75A                            ;loc_179AC:
0001D75A                            Obj96_ShipFall:	                                          ; XREF: Obj8E_ShipIndex
0001D75A 303C 0099                  		move.w	#$99,d0
0001D75E 4EB9 0000 12CA             		jsr	(PlaySound).l	; play WIN sound
0001D764 4268 0012                                  clr.w	$12(a0)		; clear Y-velocity
0001D768 317C 0000 0014                             move.w  #$0,$14(a0)     ;clear all speeds
0001D76E 11FC 0001 F7CC                             move.b	#1,($FFFFF7CC).w	; lock	controls
0001D774 337C 0000 0014                             move.w	#0,$14(a1)	; stop Sonic moving
0001D77A 31FC 0008 F602                             move.w	#(Right)<<0,(SonicControl) ; make Sonic stand
0001D780 11FC 0001 FFFE                             move.b	#1,($FFFFFFFE).w ;set win flag
0001D786 4EB9 0001 1D18                             jsr     GotThroughAct
0001D78C 4EF9 0001 0496                             jmp	(DeleteObject).l
0001D792                            
0001D792                            
0001D792                             ; ===========================================================================
0001D792                            ;		2 - ERRORS
0001D792                            ;		4 - WARNINGS
0001D792                            ; ===========================================================================
0001D792                            
0001D792                            ; ---------------------------------------------------------------------------
0001D792                            ; Object 90 - Brutal Newtron (SLZ)
0001D792                            ; ---------------------------------------------------------------------------
0001D792                            
0001D792                            Obj90:
0001D792 7000                       		moveq	#0,d0
0001D794 1028 0024                  		move.b	$24(a0),d0
0001D798 323B 0000                  		move.w	Obj90_Index(pc,d0.w),d1
0001D79C 4EFB 1000                  		jmp	Obj90_Index(pc,d1.w)
0001D7A0                            ; ===========================================================================
0001D7A0                            
0001D7A0                            Obj90_Index:
0001D7A0 0000                       		dc.w Obj90_Main-Obj90_Index
0001D7A2 0000                       		dc.w Obj90_ShipMain-Obj90_Index
0001D7A4                            ; ===========================================================================
0001D7A4                            
0001D7A4                            Obj90_Main:
0001D7A4 5428 0024                  		addq.b	#2,$24(a0)
0001D7A8 217C 0001 B79C 0004        		move.l	#Map_MegaNewt,4(a0)
0001D7B0 317C 0480 0002             		move.w	#($9000/$20),2(a0)
0001D7B6 117C 0004 0001             		move.b	#4,1(a0)
0001D7BC 117C 0020 0019             		move.b	#$20,$19(a0)
0001D7C2 117C 0003 0018             		move.b	#3,$18(a0)
0001D7C8 3168 0008 0030             		move.w	8(a0),$30(a0)					; copy X-pos to secondary X-pos
0001D7CE 3168 000C 0038             		move.w	$C(a0),$38(a0)					; copy Y-pos to secondary Y-pos
0001D7D4 117C 0005 0020             		move.b	#5,$20(a0)						; set touch response
0001D7DA 117C 000C 0021             		move.b  #var_BHits_LZ,$21(a0)
0001D7E0 4EB9 0000 0000                             jsr 	(BossStarLight_Ballhog_RobotnikHud).l
0001D7E6                            
0001D7E6                            Obj90_ShipMain:
0001D7E6 7000                       		moveq	#0,d0
0001D7E8 1028 0025                  		move.b	$25(a0),d0
0001D7EC 323B 0000                  		move.w	Obj90_ShipIndex(pc,d0.w),d1
0001D7F0 4EBB 1000                  		jsr	Obj90_ShipIndex(pc,d1.w)
0001D7F4 6100 0000                  		bsr.w	Obj90_ShipProcess
0001D7F8 43F9 0001 B47A             		lea	(Ani_MegaNewt).l,a1
0001D7FE 4EB9 0000 D3EA             		jsr	(AnimateSprite).l
0001D804 1028 0022                  		move.b	$22(a0),d0
0001D808 0200 0003                  		andi.b	#3,d0
0001D80C 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001D812 8128 0001                  		or.b	d0,1(a0)
0001D816 4EF9 0001 045A             		jmp	(DisplaySprite).l
0001D81C                            ; ===========================================================================
0001D81C                            
0001D81C                            Obj90_ShipIndex:
0001D81C 0000                       		dc.w Obj90_Start-Obj90_ShipIndex			; 0
0001D81E 0000                       		dc.w Obj90_Disappear-Obj90_ShipIndex		; 2
0001D820 0000                       		dc.w Obj90_Appear-Obj90_ShipIndex		; 4
0001D822 0000                       		dc.w Obj90_Shoot-Obj90_ShipIndex			; 6
0001D824 0000                       		dc.w Obj90_Explode-Obj90_ShipIndex		; 8
0001D826 0000                       		dc.w Obj90_ShipFall-Obj90_ShipIndex		; $A
0001D828                            ; ===========================================================================
0001D828                            
0001D828                            Obj90_ShipProcess:
0001D828 1028 003F                  		move.b	$3F(a0),d0				; Y-amplitude
0001D82C 5400                       		addq.b	#2,d0					; reduce the amplitude
0001D82E 1140 003F                  		move.b	d0,$3F(a0)
0001D832 4EB9 0000 2CC8             		jsr	(CalcSine).l
0001D838 EC40                       		asr.w	#6,d0					; d0 contains sine
0001D83A D068 0038                  		add.w	$38(a0),d0				; add secondary Y-pos to d0
0001D83E 3140 000C                  		move.w	d0,$C(a0)				; and we've got Y-pos with the amplitude
0001D842 3168 0030 0008             		move.w	$30(a0),8(a0)
0001D848                            
0001D848                            		; Touch repsonse stuff
0001D848 0C28 0008 0025             		cmpi.b	#8,$25(a0)				; is routine more or equals to 8?
0001D84E 6400                       		bcc.s	locret_1784ANew			; if yes, branch
0001D850 4A28 0022                  		tst.b	$22(a0)						; was boss defeated?
0001D854 6B00                       		bmi.s	Obj90_ShipGone			; if yes, branch
0001D856 4A28 0020                  		tst.b	$20(a0)						; is touch response zero?
0001D85A 6600                       		bne.s	locret_1784ANew			; if not, branch
0001D85C 4A28 003E                  		tst.b	$3E(a0)						; is flashes counter zero?
0001D860 6600                       		bne.s	Obj90_ShipFlash			; if not, branch
0001D862 117C 0040 003E             		move.b	#$40,$3E(a0)			; set number of times to flash
0001D868 303C 00AC                  		move.w	#$AC,d0
0001D86C 4EB9 0000 12D0             		jsr	(PlaySound_Special).l 			; play boss damage sound
0001D872                            
0001D872                            Obj90_ShipFlash:
0001D872 43F8 FB22                  		lea	($FFFFFB22).w,a1				; load 2nd pallet, 2nd entry
0001D876 7000                       		moveq	#0,d0					; move 0 (black) to d0
0001D878 4A51                       		tst.w	(a1)						; is colour in pallete black?
0001D87A 6600                       		bne.s	loc_1783CNew			; if not, branch
0001D87C 303C 0000                  		move.w	#$000,d0				; move 0EEE (white) to d0
0001D880                            
0001D880                            loc_1783CNew:
0001D880 3280                       		move.w	d0,(a1)					; apply colour stored in d0
0001D882 5328 003E                  		subq.b	#1,$3E(a0)				; subtract 1 from flashes counter
0001D886 6600                       		bne.s	locret_1784ANew			; if flashes counter is not zero, branch
0001D888 117C 0005 0020             		move.b	#5,$20(a0)				; restore touch responsibility.	; Blad: "$F" was fixed.
0001D88E                            
0001D88E                            locret_1784ANew:
0001D88E 4E75                       		rts
0001D890                            ; ===========================================================================
0001D890                            
0001D890                            Obj90_ShipGone:
0001D890 7064                       		moveq	#100,d0
0001D892 6100 0000                  		bsr.w	AddPoints				; add 1000 points
0001D896 117C 0008 0025             		move.b	#8,$25(a0)				; set routine to 8 (Obj90_Explode)
0001D89C 317C 00B3 003C             		move.w	#179,$3C(a0)				; set timer to 179 (3 seconds)
0001D8A2 4E75                       		rts
0001D8A4                            ; ===========================================================================
0001D8A4                            
0001D8A4                            Obj90_Start:
0001D8A4 6100 D8D0                  		bsr.w	BossMove
0001D8A8 317C 0100 0012             		move.w	#$100,$12(a0)			; move ship down
0001D8AE 117C 0001 001C             		move.b  #1,$1C(a0)				; set anim
0001D8B4 0C68 03D4 0038             		cmpi.w	#$3D4,$38(a0)
0001D8BA 6600                       		bne.s	loc_17916New			; if not, branch
0001D8BC 317C 0000 0012             		move.w	#0,$12(a0)				; stop ship
0001D8C2 117C 0030 0033                             move.b  #$30,$33(a0)
0001D8C8 5428 0025                  		addq.b	#2,$25(a0)				; goto next routine
0001D8CC                            
0001D8CC                            Obj90_Disappear:
0001D8CC 117C 0003 001C             		move.b 	#3,$1C(a0)				; set anim
0001D8D2 5328 0033                                  subq.b  #1,$33(a0)
0001D8D6 6A00                       		bpl.s	loc_17916New
0001D8D8 5428 0025                  		addq.b	#2,$25(a0)				; goto next routine
0001D8DC                            
0001D8DC                            loc_17916New:
0001D8DC                            
0001D8DC                            
0001D8DC                            ; ***WARNING***
0001D8DC                            ;	bra.w	Obj90_ShipProcess			; Blad: This code is already in the cycle. It does not need to be loaded again.
0001D8DC                            
0001D8DC                            
0001D8DC 4E75                       		rts
0001D8DE                            ; ===========================================================================
0001D8DE                            
0001D8DE                            Obj90_Appear:
0001D8DE 0868 0000 0022                        	bchg    #0,$22(a0)
0001D8E4 6100 D890                  		bsr.w	BossMove
0001D8E8 5428 0025                  		addq.b  #2,$25(a0)
0001D8EC 117C 0078 0033             		move.b	#120,$33(a0)
0001D8F2 4EB9 0000 2CA2             		jsr	(RandomNumber).l        		; get a random number
0001D8F8 0240 000C                  		andi.w	#%1100,d0
0001D8FC 43FB 0000                  		lea	Obj90_DataXY(pc,d0.w),a1
0001D900 3159 0030                  		move.w	(a1)+,$30(a0)
0001D904 3159 0038                  		move.w	(a1)+,$38(a0)
0001D908 4E75                       		rts
0001D90A                            ; ===========================================================================
0001D90A                            
0001D90A                            Obj90_DataXY:
0001D90A 31C5                       		dc.w $31C5	; X	; 0
0001D90C 03C9                       		dc.w $3C9	; Y
0001D90E 3200                       		dc.w $3200	; X	; 4
0001D910 03F5                       		dc.w $3F5	; Y
0001D912 32A1                       		dc.w $32A1	; X	; 8
0001D914 03B6                       		dc.w $3B6	; Y
0001D916 32B0                       		dc.w $32B0	; X	; C
0001D918 0400                       		dc.w $400	; Y
0001D91A 31CB                       		dc.w $31CB	; X	; 10
0001D91C 03B0                       		dc.w $3B0	; Y
0001D91E                            ; ===========================================================================
0001D91E                            
0001D91E                            ; ***WARNING***	; Blad: Unused shitty code.
0001D91E                            ;		cmpi.b   #1,d0
0001D91E                            ;		beq.w	Obj90_1XY
0001D91E                            ;		cmpi.b   #2,d0
0001D91E                            ;		beq.w	Obj90_2XY
0001D91E                            ;		cmpi.b   #3,d0
0001D91E                            ;		beq.w	Obj90_3XY
0001D91E                            ;		cmpi.b   #4,d0
0001D91E                            ;		beq.w	Obj90_4XY
0001D91E                            ;		move.w  #$3213,$30(a0)
0001D91E                            ;		move.w  #$404,$38(a0)
0001D91E                            ;		addq.b  #2,$25(a0)
0001D91E                            ;		rts
0001D91E                            ;
0001D91E                            ;Obj90_1XY:
0001D91E                            ;		move.w  #$327A,$30(a0)
0001D91E                            ;		move.w  #$447,$38(a0)
0001D91E                            ;		addq.b  #2,$25(a0)
0001D91E                            ;		rts
0001D91E                            ;
0001D91E                            ;Obj90_2XY:
0001D91E                            ;		move.w  #$32A1,$30(a0)
0001D91E                            ;		move.w  #$431,$38(a0)
0001D91E                            ;		addq.b  #2,$25(a0)
0001D91E                            ;		rts
0001D91E                            ;
0001D91E                            ;Obj90_3XY:
0001D91E                            ;		move.w  #$32F3,$30(a0)
0001D91E                            ;		move.w  #$3BD,$38(a0)
0001D91E                            ;		addq.b  #2,$25(a0)
0001D91E                            ;		rts
0001D91E                            ;
0001D91E                            ;Obj90_4XY:
0001D91E                            ;		move.w  #$31C9,$30(a0)
0001D91E                            ;		move.w  #$3BD,$38(a0)
0001D91E                            ;		addq.b  #2,$25(a0)
0001D91E                            ;		rts
0001D91E                            ; ===========================================================================
0001D91E                            
0001D91E                            ;loc_17954:
0001D91E                            Obj90_Shoot:
0001D91E 5328 0033                  		subq.b  #1,$33(a0)
0001D922 6A00 0000                  		bpl.w	loc_17976New
0001D926                            
0001D926                            ***ERROR***
0001D926                            
0001D926 0C28 0007 0021                             cmpi.b	#7,$21(a0)
0001D92C 6400 0000                  		bcc.w	Obj90_ArtObstrel
0001D930 4EB9 0001 08F6             		jsr	SingleObjLoad2			
0001D936 6600 0000                  		bne.w	loc_17976New
0001D93A 12BC 0020                  		move.b	#$20,0(a1)				; load missile object
0001D93E 337C 32F6 0008             		move.w	#$32F6,8(a1)
0001D944 3038 D00C                      		move.w ($FFFFD000+$C).w,d0
0001D948 3340 000C                  		move.w	d0,$C(a1)
0001D94C 337C FE00 0010             		move.w	#-$200,$10(a1)
0001D952 4EB9 0001 08F6             		jsr	SingleObjLoad2			
0001D958 6600 0000                  		bne.w	loc_17976New
0001D95C 12BC 0020                  		move.b	#$20,0(a1)				; load missile object
0001D960 337C 31C9 0008             		move.w	#$31C9,8(a1)
0001D966 3038 D00C                      		move.w ($FFFFD000+$C).w,d0
0001D96A 3340 000C                  		move.w	d0,$C(a1)
0001D96E 337C 0200 0010             		move.w	#$200,$10(a1)
0001D974 117C 0002 0025             		move.b  #2,$25(a0)
0001D97A 6000 0000                  		bra.w	loc_17976New
0001D97E                            
0001D97E                            Obj90_ArtObstrel:
0001D97E 4EB9 0001 08F6             		jsr	SingleObjLoad2			; Blad: This code was missing! What the fuck?
0001D984 6600 0000                  		bne.w	loc_17976New
0001D988 12BC 0020                  		move.b	#$20,0(a1)				; load missile object
0001D98C 337C 32F6 0008             		move.w	#$32F6,8(a1)
0001D992 337C 03BD 000C             		move.w  #$3BD,$C(a1)
0001D998 3038 D008                  		move.w ($FFFFD000+8).w,d0 
0001D99C 0440 32F6                  		sub.w 	#$32F6,d0 
0001D9A0 E540                       		asl.w 	#2,d0 
0001D9A2 3340 0010                                  move.w 	d0,$10(a1);
0001D9A6 3038 D00C                  		move.w ($FFFFD000+$C).w,d0 
0001D9AA 0440 03BD                  		sub.w 	#$3BD,d0 
0001D9AE E540                       		asl.w 	#2,d0 
0001D9B0 3340 0012                                  move.w 	d0,$12(a1);
0001D9B4 4EB9 0001 08F6             		jsr	SingleObjLoad2			; Blad: This code was missing! What the fuck?
0001D9BA 6600 0000                  		bne.w	loc_17976New
0001D9BE 12BC 0020                  		move.b	#$20,0(a1)				; load missile object
0001D9C2 337C 31C9 0008             		move.w	#$31C9,8(a1)
0001D9C8 337C 03BD 000C             		move.w  #$3BD,$C(a1)
0001D9CE 3038 D008                  		move.w ($FFFFD000+8).w,d0
0001D9D2 0440 31C9                  		sub.w 	#$31C9,d0 
0001D9D6 E540                       		asl.w 	#2,d0
0001D9D8 3340 0010                                  move.w 	d0,$10(a1)
0001D9DC                            		
0001D9DC 3038 D00C                  		move.w ($FFFFD000+$C).w,d0 
0001D9E0 0440 03BD                  		sub.w 	#$3BD,d0 
0001D9E4 E540                       		asl.w 	#2,d0 
0001D9E6 3340 0012                                  move.w 	d0,$12(a1); 
0001D9EA 117C 0002 0025             		move.b  #2,$25(a0)
0001D9F0                            
0001D9F0                            loc_17976New:
0001D9F0                            ; ***WARNING***
0001D9F0                            ;	bra.w	Obj90_ShipProcess			; Blad: This code is already in the cycle. It does not need to be loaded again.
0001D9F0                            
0001D9F0                            
0001D9F0 4E75                       		rts
0001D9F2                            ; ===========================================================================
0001D9F2                            
0001D9F2                            Obj90_Explode:
0001D9F2 5368 003C                  		subq.w	#1,$3C(a0)			; subtract 1 from timer
0001D9F6 6B00                       		bmi.s	loc_17984New		; if timer is over, branch
0001D9F8 6000 D73A                  		bra.w	BossDefeated
0001D9FC                            ; ===========================================================================
0001D9FC                            
0001D9FC                            loc_17984New:
0001D9FC 08E8 0000 0022             		bset	#0,$22(a0)				; set orientation to 1 (right)
0001DA02 08A8 0007 0022             		bclr	#7,$22(a0)				; clear defeated flag
0001DA08 4268 0010                  		clr.w	$10(a0)				; clear X-velocity
0001DA0C 5428 0025                  		addq.b	#2,$25(a0)
0001DA10 317C FFDA 003C             		move.w	#-$26,$3C(a0)		; set timer to -$26
0001DA16 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001DA1A 6600                       		bne.s	locret_179AANew
0001DA1C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001DA22                            
0001DA22                            locret_179AANew:
0001DA22 4E75                       		rts
0001DA24                            ; ===========================================================================
0001DA24                            
0001DA24                            Obj90_ShipFall:
0001DA24 303C 0099                  		move.w	#$99,d0
0001DA28 4EB9 0000 12CA             		jsr	(PlaySound).l						; play WIN sound
0001DA2E 4268 0012                  		clr.w	$12(a0)						; clear Y-velocity
0001DA32                            
0001DA32                            
0001DA32                            ; ***WARNING***
0001DA32 317C 0000 0014             		move.w	#0,$14(a0)    					; clear all speeds ; Blad: Is this the acceleration cleanup code? Not sure what this is used....
0001DA38                            
0001DA38                            
0001DA38 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w				; lock controls
0001DA3E                            
0001DA3E                            
0001DA3E                            ; ***ERROR***
0001DA3E                            ;	move.w	#0,$14(A1)	; stop Sonic moving ; Blad: What the hell is that? A1 address has not been set!
0001DA3E                            
0001DA3E                            
0001DA3E 31FC 0008 F602             		move.w	#(Right)<<0,(SonicControl) 	; make Sonic stand
0001DA44 11FC 0001 FFFE             		move.b	#1,($FFFFFFFE).w 			; set win flag
0001DA4A 4EB9 0001 1D18             		jsr	(GotThroughAct).l
0001DA50 4EF9 0001 0496             		jmp	(DeleteObject).l
0001DA56                            
0001DA56                            
0001DA56                            ; ---------------------------------------------------------------------------
0001DA56                            ; Object 8F - Brutal Dino (SLZ)
0001DA56                            ; ---------------------------------------------------------------------------
0001DA56                            
0001DA56                            Obj8F:
0001DA56 7000                       		moveq	#0,d0
0001DA58 1028 0024                  		move.b	$24(a0),d0
0001DA5C 323B 0000                  		move.w	Obj8F_Index(pc,d0.w),d1
0001DA60 4EFB 1000                  		jmp	Obj8F_Index(pc,d1.w)
0001DA64                            ; ===========================================================================
0001DA64                            
0001DA64                            Obj8F_Index:
0001DA64 0000                       		dc.w Obj8F_Main-Obj8F_Index
0001DA66 0000                       		dc.w Obj8F_ShipMain-Obj8F_Index
0001DA68                            ; ===========================================================================
0001DA68                            
0001DA68                            Obj8F_Main:
0001DA68 5428 0024                  		addq.b	#2,$24(a0)
0001DA6C 217C 0001 B748 0004        		move.l	#Map_DinoKing,4(a0)
0001DA74 317C 0480 0002             		move.w	#($9000/$20),2(a0)
0001DA7A 117C 0004 0001             		move.b	#4,1(a0)
0001DA80 117C 0020 0019             		move.b	#$20,$19(a0)
0001DA86 117C 0003 0018             		move.b	#3,$18(a0)
0001DA8C 3168 0008 0030             		move.w	8(a0),$30(a0)					; copy X-pos to secondary X-pos
0001DA92 3168 000C 0038             		move.w	$C(a0),$38(a0)					; copy Y-pos to secondary Y-pos
0001DA98 117C 0005 0020             		move.b	#5,$20(a0)						; set touch response
0001DA9E 117C 000C 0021             		move.b  #var_BHits_LZ,$21(a0)
0001DAA4 4EB9 0000 0000                             jsr 	(BossStarLight_Ballhog_RobotnikHud).l
0001DAAA                            
0001DAAA                            Obj8F_ShipMain:
0001DAAA 7000                       		moveq	#0,d0
0001DAAC 1028 0025                  		move.b	$25(a0),d0
0001DAB0 323B 0000                  		move.w	Obj8F_ShipIndex(pc,d0.w),d1
0001DAB4 4EBB 1000                  		jsr	Obj8F_ShipIndex(pc,d1.w)
0001DAB8 6100 0000                  		bsr.w	Obj8F_ShipProcess
0001DABC 43F9 0001 B42C             		lea	(Ani_DinoKing).l,a1
0001DAC2 4EB9 0000 D3EA             		jsr	(AnimateSprite).l
0001DAC8 1028 0022                  		move.b	$22(a0),d0
0001DACC 0200 0003                  		andi.b	#3,d0
0001DAD0 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001DAD6 8128 0001                  		or.b	d0,1(a0)
0001DADA 4EF9 0001 045A             		jmp	DisplaySprite
0001DAE0                            ; ===========================================================================
0001DAE0 0000                       Obj8F_ShipIndex:dc.w Obj8F_ShipStart-Obj8F_ShipIndex	; 0
0001DAE2 0000                       		dc.w Obj8F_MoveLeft-Obj8F_ShipIndex	; 2
0001DAE4 0000                       		dc.w Obj8F_MegaFire-Obj8F_ShipIndex	; 4
0001DAE6 0000                       		dc.w Obj8F_FirstJump-Obj8F_ShipIndex
0001DAE8 0000                       		dc.w Obj8F_FirstDown-Obj8F_ShipIndex
0001DAEA 0000                       		dc.w Obj8F_MoveRight-Obj8F_ShipIndex	; 6
0001DAEC 0000                       		dc.w Obj8F_MegaFire2-Obj8F_ShipIndex	; 8
0001DAEE 0000                       		dc.w Obj8F_Jump-Obj8F_ShipIndex
0001DAF0 0000                       		dc.w Obj8F_JumpDown-Obj8F_ShipIndex
0001DAF2 0000                       		dc.w Obj8F_MoveLeft3-Obj8F_ShipIndex
0001DAF4 0000                       		dc.w Obj8F_MoveRight3-Obj8F_ShipIndex
0001DAF6                            Obj8F_End_ShipIndex
0001DAF6 0000                       		dc.w Obj8F_Explode-Obj8F_ShipIndex	; $8
0001DAF8 0000                       		dc.w Obj8F_ShipFall-Obj8F_ShipIndex	; 
0001DAFA                            ; ===========================================================================
0001DAFA                            
0001DAFA                            ; This routine does the main ship stuff
0001DAFA                            
0001DAFA                            Obj8F_ShipProcess:
0001DAFA                            		; Move ship slightly up and down during the flight
0001DAFA                            
0001DAFA 0C28 0016 0025             		cmpi.b	#(Obj8F_End_ShipIndex-Obj8F_ShipIndex),$25(a0)	; is routine more or equals to 8?
0001DB00 6400                       		bcc.s	locreturf_1784A			; if yes, branch
0001DB02                            
0001DB02                            		;move.b	$3F(a0),d0	; Y-amplitude
0001DB02                            		;jsr	(CalcSine).l
0001DB02                            		;asr.w	#6,d0		; d0 contains sine
0001DB02                            		;add.w	$38(a0),d0	; add secondary Y-pos to d0
0001DB02                            		;move.w	d0,$C(a0)	; and we've got Y-pos with the amplitude
0001DB02 3168 0038 000C                             move.w	$38(a0),$C(a0)	; and we've got Y-pos with the amplitude
0001DB08 3168 0030 0008             		move.w	$30(a0),8(a0)
0001DB0E 5428 003F                  		addq.b	#2,$3F(a0)	; reduce the amplitude
0001DB12                            		
0001DB12                            		; Touch repsonse stuff
0001DB12 4A28 0022                  		tst.b	$22(a0)		; was boss defeated?
0001DB16 6B00                       		bmi.s	Obj8F_ShipGone	; if yes, branch
0001DB18 4A28 0020                  		tst.b	$20(a0)		; is touch response zero?
0001DB1C 6600                       		bne.s	locreturf_1784A	; if not, branch
0001DB1E 4A28 003E                  		tst.b	$3E(a0)		; is flashes counter zero?
0001DB22 6600                       		bne.s	Obj8F_ShipFlash	; if not, branch
0001DB24 117C 0040 003E             		move.b	#$40,$3E(a0)	; set number of	times to flash
0001DB2A 303C 00AC                  		move.w	#$AC,d0
0001DB2E 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001DB34                            
0001DB34                            Obj8F_ShipFlash:
0001DB34 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001DB38 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001DB3A 0828 0000 003E             		btst    #0,$3E(a0)
0001DB40 6600                       		bne.s   locurf_1783C
0001DB42 303C 0000                  		move.w	#$000,d0	; move 0EEE (white) to d0
0001DB46                            
0001DB46                            locurf_1783C:
0001DB46 3280                       		move.w	d0,(a1)		; apply colour stored in d0
0001DB48 5328 003E                  		subq.b	#1,$3E(a0)	; subtract 1 from flashes counter
0001DB4C 6600                       		bne.s	locreturf_1784A	; if flashes counter is not zero, branch
0001DB4E 117C 0008 0020             		move.b	#8,$20(a0)	; restore touch responsibility
0001DB54                            
0001DB54                            locreturf_1784A:
0001DB54 4E75                       		rts	
0001DB56                            ; ===========================================================================
0001DB56                            ;loc_1784C:
0001DB56                            Obj8F_ShipGone:				; XREF: Obj8F_ShipProcess
0001DB56 7064                       		moveq	#100,d0
0001DB58 6100 0000                  		bsr.w	AddPoints	; add 1000 points
0001DB5C 117C 0016 0025             		move.b	#$16,$25(a0)	; set routine to 8 (Obj8F_Explode)
0001DB62 317C 00B3 003C             		move.w	#179,$3C(a0)	; set timer to 179 (3 seconds)
0001DB68 4E75                       		rts
0001DB6A                            
0001DB6A                            ; ==========================================================================
0001DB6A                            Obj8F_Attack:
0001DB6A 5328 003C                  		subq.b	#1,$3C(a0)
0001DB6E 6A00                       		bpl.s	loc_sunkenshit
0001DB70 117C 003C 003C             		move.b	#60,$3C(a0)
0001DB76 4EB9 0001 08E0             		jsr	(SingleObjLoad).l
0001DB7C 6600                       		bne.s	loc_sunkenshit
0001DB7E 303C 00A5                  		move.w	#$A5,d0
0001DB82 4EF9 0000 12D0             		jmp	(PlaySound_Special).l ;	play explosion sound
0001DB88 12BC 0020                  		move.b	#$20,0(a1)	; load missile object
0001DB8C 3368 0008 0008             		move.w	8(a0),8(a1)
0001DB92 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DB98 3038 D00C                      		move.w ($FFFFD000+$C).w,d0 ; Çàãðóçèòü X ïîçèöèþ Ñîíèêà.
0001DB9C 9068 000C                  		sub.w 	$C(a0),d0 ; Âû÷åñòü ïîçèöèþ îáúåêòà èç ïîçèöèè Ñîíèêà. Òàê ìû ïîëó÷èì äèñòàíöèþ Ñîíèêà ê îáúåêòó.
0001DBA0 E540                       		asl.w 	#2,d0 ; Àðèôìåòè÷åñêèé ñäâèã(2 ðàçà). Íóæíî óâåëè÷èòü çíà÷åíèå äëÿ ïîëó÷åíèÿ íîðìàëüíîé ñêîðîñòè.
0001DBA2 3340 0012                                  move.w 	d0,$12(a1);
0001DBA6 337C FD00 0010                             move.w	#-$300,$10(a1)	; move splats to the left
0001DBAC 0828 0000 0022                             btst	#0,$22(a0)	; is splats facing right?
0001DBB2 6700                                       beq.s	loc_sunkenshit	; if yes, branch
0001DBB4 4469 0010                  		neg.w	$10(a1)		; move splats to the right
0001DBB8                            
0001DBB8                            loc_sunkenshit:
0001DBB8 4E75                       		rts
0001DBBA                            
0001DBBA                            Obj8F_ShipStart:			; XREF: Obj8F_ShipIndex
0001DBBA 317C 0200 0012             		move.w	#$200,$12(a0)	; move ship down
0001DBC0 117C 0001 001C             		move.b	#1,$1C(a0)	; set animation
0001DBC6 6100 D5AE                  		bsr.w	BossMove
0001DBCA 0C68 04D0 0038             		cmpi.w	#$4D0,$38(a0)	; has the ship reached $325 on Y-axis?
0001DBD0 6600                       		bne.s	Obj8F_ShipStart_Locret ; if not, branch
0001DBD2 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
0001DBD8 303C 00BD                  		move.w	#$BD,d0
0001DBDC 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play stomping sound
0001DBE2 117C 0050 0033                             move.b  #80,$33(a0)
0001DBE8 117C 0050 003C             		move.b	#80,$3C(a0)
0001DBEE 117C 0000 001C             		move.b	#0,$1C(a0)	; set animation
0001DBF4 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
0001DBF8                            
0001DBF8                            Obj8F_ShipStart_Locret:
0001DBF8 4E75                       		rts
0001DBFA                            ; ===========================================================================
0001DBFA                            
0001DBFA                            Obj8F_MoveLeft:				; XREF: Obj8F_ShipIndex
0001DBFA 317C FE00 0010             		move.w	#-$200,$10(a0)	; move left
0001DC00 6100 D574                  		bsr.w	BossMove
0001DC04                            
0001DC04                            Obj8F_Fire:
0001DC04 5328 0033                                  subq.b  #1,$33(a0)
0001DC08 6A00                                       bpl.s   Obj8F_MoveLeft2
0001DC0A 4EB9 0001 08E0                             jsr	SingleObjLoad
0001DC10 6600                       		bne.s   Obj8F_MoveLeft2
0001DC12 12BC 0020                  		move.b	#$20,0(a1)	; load missile object
0001DC16 3368 0008 0008             		move.w	8(a0),8(a1)
0001DC1C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DC22 4EB9 0000 2CA2                             jsr   (RandomNumber).l         ; get a random number
0001DC28 0200 0001                                  andi.b   #1,d0               ; get a number equal or lower than 2 (0 until 2)
0001DC2C 0C00 0001                  		cmpi.b   #1,d0
0001DC30 6700                       		beq.s    Obj8F_FireAdd
0001DC32                            		;cmpi.b   #2,d0
0001DC32                            		;beq.s    Obj8F_FireToPlayer
0001DC32 337C FC00 0010             		move.w	#-$400,$10(a1)	; move left
0001DC38 6000                                       bra.s   Obj8F_FireTimer
0001DC3A                            
0001DC3A                            Obj8F_FireAdd:
0001DC3A 337C FD00 0010             		move.w	#-$300,$10(a1)	; move left
0001DC40 3038 D00C                      		move.w ($FFFFD000+$C).w,d0 ; Çàãðóçèòü X ïîçèöèþ Ñîíèêà.
0001DC44 9068 000C                  		sub.w 	$C(a0),d0 ; Âû÷åñòü ïîçèöèþ îáúåêòà èç ïîçèöèè Ñîíèêà. Òàê ìû ïîëó÷èì äèñòàíöèþ Ñîíèêà ê îáúåêòó.
0001DC48 E540                       		asl.w 	#2,d0 ; Àðèôìåòè÷åñêèé ñäâèã(2 ðàçà). Íóæíî óâåëè÷èòü çíà÷åíèå äëÿ ïîëó÷åíèÿ íîðìàëüíîé ñêîðîñòè.
0001DC4A 3340 0012                                  move.w 	d0,$12(a1);
0001DC4E 6000                                       bra.s   Obj8F_FireTimer
0001DC50                            
0001DC50                            Obj8F_FireToPlayer:
0001DC50 3038 D008                      		move.w ($FFFFD000+8).w,d0 ; Çàãðóçèòü X ïîçèöèþ Ñîíèêà.
0001DC54 9068 0008                  		sub.w 	8(a0),d0 ; Âû÷åñòü ïîçèöèþ îáúåêòà èç ïîçèöèè Ñîíèêà. Òàê ìû ïîëó÷èì äèñòàíöèþ Ñîíèêà ê îáúåêòó.
0001DC58 E540                       		asl.w 	#2,d0 ; Àðèôìåòè÷åñêèé ñäâèã(2 ðàçà). Íóæíî óâåëè÷èòü çíà÷åíèå äëÿ ïîëó÷åíèÿ íîðìàëüíîé ñêîðîñòè.
0001DC5A 3340 0010                                  move.w 	d0,$10(a1);
0001DC5E 0469 0150 0010             		sub.w   #$150,$10(a1)
0001DC64 3038 D00C                      		move.w ($FFFFD000+$C).w,d0 ; Çàãðóçèòü X ïîçèöèþ Ñîíèêà.
0001DC68 9068 000C                  		sub.w 	$C(a0),d0 ; Âû÷åñòü ïîçèöèþ îáúåêòà èç ïîçèöèè Ñîíèêà. Òàê ìû ïîëó÷èì äèñòàíöèþ Ñîíèêà ê îáúåêòó.
0001DC6C E540                       		asl.w 	#2,d0 ; Àðèôìåòè÷åñêèé ñäâèã(2 ðàçà). Íóæíî óâåëè÷èòü çíà÷åíèå äëÿ ïîëó÷åíèÿ íîðìàëüíîé ñêîðîñòè.
0001DC6E 3340 0012                                  move.w 	d0,$12(a1);
0001DC72                            
0001DC72                            Obj8F_FireTimer:
0001DC72 303C 00AE                  		move.w	#$AE,d0
0001DC76 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play lava ball sound
0001DC7C 1168 003C 0033                             move.b  $3C(a0),$33(a0)
0001DC82                            
0001DC82                            Obj8F_MoveLeft2:
0001DC82 0C68 3680 0030             		cmpi.w	#$3680,$30(a0)	
0001DC88 6400 0000                  		bcc.w	locurf_17916	; if not, branch
0001DC8C 0868 0000 0022                             bchg	#0,$22(a0)	; reverse direction of the ship
0001DC92 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001DC98 317C 0000 0012             		move.w	#0,$12(a0)	;
0001DC9E 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001DCA2                            
0001DCA2                            Obj8F_MegaFire:
0001DCA2 4EB9 0000 2CA2             		jsr   (RandomNumber).l         ; get a random number
0001DCA8 0200 0001                                  andi.b   #1,d0               ; get a number equal or lower than 1 (0 until 1)
0001DCAC 6600 0000                                  bne.w    Obj8F_MegaFireEnd ; if it isn't 0, branch
0001DCB0 4EB9 0001 08E0             		jsr	SingleObjLoad
0001DCB6 6600                       		bne.s   Obj8F_MegaFireEnd
0001DCB8 12BC 0020                  		move.b	#$20,0(a1)	; load missile object
0001DCBC 3368 0008 0008             		move.w	8(a0),8(a1)
0001DCC2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DCC8 337C 0400 0010             		move.w	#$400,$10(a1)	; move left
0001DCCE 4EB9 0001 08E0             		jsr	SingleObjLoad
0001DCD4 6600                       		bne.s   Obj8F_MegaFireEnd
0001DCD6 12BC 0020                  		move.b	#$20,0(a1)	; load missile object
0001DCDA 3368 0008 0008             		move.w	8(a0),8(a1)
0001DCE0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DCE6 337C FE00 0012             		move.w	#-$200,$12(a1)
0001DCEC 337C 0300 0010             		move.w	#$300,$10(a1)	; move left
0001DCF2                            
0001DCF2                            Obj8F_MegaFireEnd:
0001DCF2 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001DCF6                            		
0001DCF6                            Obj8F_FirstJump:
0001DCF6 317C FD00 0012             		move.w	#-$300,$12(a0)	; move up
0001DCFC 317C 0200 0010             		move.w	#$200,$10(a0)	;
0001DD02 117C 0002 001C             		move.b	#2,$1C(a0)
0001DD08 6100 D46C                  		bsr.w	BossMove
0001DD0C 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001DD10                            
0001DD10                            Obj8F_FirstDown:
0001DD10 0668 0018 0012             		addi.w	#$18,$12(a0)	
0001DD16 6100 D45E                  		bsr.w	BossMove
0001DD1A 5328 0033                  		subq.b  #1,$33(a0)
0001DD1E 6A00 0000                                  bpl.w   loc_sunksh
0001DD22 4EB9 0001 08E0                             jsr	SingleObjLoad
0001DD28 6600 0000                  		bne.w   loc_sunksh
0001DD2C 12BC 0020                  		move.b	#$20,0(a1)	; load missile object
0001DD30 3368 0008 0008             		move.w	8(a0),8(a1)
0001DD36 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DD3C 0869 0000 0022             		bchg	#0,$22(a1)	; change object's orientation
0001DD42 337C 0400 0010             		move.w	#$400,$10(a1)	; move left
0001DD48 303C 00AE                  		move.w	#$AE,d0
0001DD4C 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play lava ball sound
0001DD52 1168 003C 0033                             move.b  $3C(a0),$33(a0)
0001DD58                            
0001DD58                            loc_sunksh:
0001DD58 0C68 04D0 0038             		cmpi.w	#$4D0,$38(a0)	; has the ship reached $325 on Y-axis?
0001DD5E 6D00 0000                  		blt.w	locurf_17916 ; if not, branch
0001DD62 117C 0000 001C             		move.b	#0,$1C(a0)
0001DD68 317C 0000 0012             		move.w	#0,$12(a0)
0001DD6E 303C 00BD                  		move.w	#$BD,d0
0001DD72 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play stomping sound	;
0001DD78 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001DD7C                            
0001DD7C                            Obj8F_MoveRight:
0001DD7C 117C 0000 001C             		move.b	#0,$1C(a0)
0001DD82 317C 0200 0010             		move.w	#$200,$10(a0)	; move right
0001DD88 6100 D3EC                  		bsr.w	BossMove
0001DD8C                            
0001DD8C                            Obj8F_Fire2:
0001DD8C 5328 0033                                  subq.b  #1,$33(a0)
0001DD90 6A00 0000                                  bpl.w   Obj8F_MoveRight2
0001DD94 4EB9 0001 08E0                             jsr	SingleObjLoad
0001DD9A 6600                       		bne.s   Obj8F_MoveRight2
0001DD9C 12BC 0020                  		move.b	#$20,0(a1)	; load missile object
0001DDA0 3368 0008 0008             		move.w	8(a0),8(a1)
0001DDA6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DDAC 0869 0000 0022             		bchg	#0,$22(a1)	; change object's orientation
0001DDB2 4EB9 0000 2CA2                             jsr   (RandomNumber).l         ; get a random number
0001DDB8 0200 0001                                  andi.b   #1,d0               ; get a number equal or lower than 2 (0 until 2)
0001DDBC 0C00 0001                  		cmpi.b   #1,d0
0001DDC0 6700                       		beq.s    Obj8F_Fire2Add
0001DDC2                            		;cmpi.b   #2,d0
0001DDC2                            		;beq.s    Obj8F_Fire2ToPlayer
0001DDC2 337C 0400 0010             		move.w	#$400,$10(a1)	; move left
0001DDC8 6000                                       bra.s   Obj8F_Fire2Timer
0001DDCA                            
0001DDCA                            Obj8F_Fire2Add:
0001DDCA 337C 0300 0010             		move.w	#$300,$10(a1)	; move left
0001DDD0 3038 D00C                      		move.w ($FFFFD000+$C).w,d0 ; Çàãðóçèòü X ïîçèöèþ Ñîíèêà.
0001DDD4 9068 000C                  		sub.w 	$C(a0),d0 ; Âû÷åñòü ïîçèöèþ îáúåêòà èç ïîçèöèè Ñîíèêà. Òàê ìû ïîëó÷èì äèñòàíöèþ Ñîíèêà ê îáúåêòó.
0001DDD8 E540                       		asl.w 	#2,d0 ; Àðèôìåòè÷åñêèé ñäâèã(2 ðàçà). Íóæíî óâåëè÷èòü çíà÷åíèå äëÿ ïîëó÷åíèÿ íîðìàëüíîé ñêîðîñòè.
0001DDDA 3340 0012                                  move.w 	d0,$12(a1);
0001DDDE 6000                                       bra.s   Obj8F_Fire2Timer
0001DDE0                            
0001DDE0                            Obj8F_Fire2ToPlayer:
0001DDE0 3038 D008                      		move.w ($FFFFD000+8).w,d0 ; Çàãðóçèòü X ïîçèöèþ Ñîíèêà.
0001DDE4 9068 0008                  		sub.w 	8(a0),d0 ; Âû÷åñòü ïîçèöèþ îáúåêòà èç ïîçèöèè Ñîíèêà. Òàê ìû ïîëó÷èì äèñòàíöèþ Ñîíèêà ê îáúåêòó.
0001DDE8 E540                       		asl.w 	#2,d0 ; Àðèôìåòè÷åñêèé ñäâèã(2 ðàçà). Íóæíî óâåëè÷èòü çíà÷åíèå äëÿ ïîëó÷åíèÿ íîðìàëüíîé ñêîðîñòè.
0001DDEA 3340 0010                                  move.w 	d0,$10(a1);
0001DDEE 0669 0150 0010             		add.w   #$150,$10(a1)
0001DDF4 3038 D00C                      		move.w ($FFFFD000+$C).w,d0 ; Çàãðóçèòü X ïîçèöèþ Ñîíèêà.
0001DDF8 9068 000C                  		sub.w 	$C(a0),d0 ; Âû÷åñòü ïîçèöèþ îáúåêòà èç ïîçèöèè Ñîíèêà. Òàê ìû ïîëó÷èì äèñòàíöèþ Ñîíèêà ê îáúåêòó.
0001DDFC E540                       		asl.w 	#2,d0 ; Àðèôìåòè÷åñêèé ñäâèã(2 ðàçà). Íóæíî óâåëè÷èòü çíà÷åíèå äëÿ ïîëó÷åíèÿ íîðìàëüíîé ñêîðîñòè.
0001DDFE 3340 0012                                  move.w 	d0,$12(a1);
0001DE02                            
0001DE02                            Obj8F_Fire2Timer:
0001DE02 303C 00AE                  		move.w	#$AE,d0
0001DE06 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play lava ball sound
0001DE0C 1168 003C 0033                             move.b  $3C(a0),$33(a0)
0001DE12                            
0001DE12                            Obj8F_MoveRight2:
0001DE12 0C68 3790 0030             		cmpi.w	#$3790,$30(a0)	
0001DE18 6D00 0000                  		blt.w	locurf_17916	; if not, branch
0001DE1C 0868 0000 0022                             bchg	#0,$22(a0)	; reverse direction of the ship
0001DE22 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001DE28 317C 0000 0012             		move.w	#0,$12(a0)	;
0001DE2E 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001DE32                            
0001DE32                            Obj8F_MegaFire2:
0001DE32 4EB9 0000 2CA2             		jsr   (RandomNumber).l         ; get a random number
0001DE38 0200 0001                                  andi.b   #1,d0               ; get a number equal or lower than 1 (0 until 1)
0001DE3C 6600 0000                                  bne.w    Obj8F_MegaFire2End ; if it isn't 0, branch
0001DE40 4EB9 0001 08E0             		jsr	SingleObjLoad
0001DE46 6600                       		bne.s   Obj8F_MegaFire2End
0001DE48 12BC 0020                  		move.b	#$20,0(a1)	; load missile object
0001DE4C 3368 0008 0008             		move.w	8(a0),8(a1)
0001DE52 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DE58 337C FC00 0010             		move.w	#-$400,$10(a1)	; move left
0001DE5E 4EB9 0001 08E0             		jsr	SingleObjLoad
0001DE64 6600                       		bne.s   Obj8F_MegaFire2End
0001DE66 12BC 0020                  		move.b	#$20,0(a1)	; load missile object
0001DE6A 3368 0008 0008             		move.w	8(a0),8(a1)
0001DE70 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DE76 337C FE00 0012             		move.w	#-$200,$12(a1)
0001DE7C 337C FD00 0010             		move.w	#-$300,$10(a1)	; move left
0001DE82                            
0001DE82                            Obj8F_MegaFire2End:
0001DE82 117C 0000 001C             		move.b	#0,$1C(a0)
0001DE88 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001DE8C                            
0001DE8C                            ; ===========================================================================
0001DE8C                            
0001DE8C                            Obj8F_Jump:
0001DE8C 317C FD00 0012             		move.w	#-$300,$12(a0)	; move up
0001DE92 317C FE00 0010             		move.w	#-$200,$10(a0)	;
0001DE98 117C 0002 001C             		move.b	#2,$1C(a0)
0001DE9E 6100 D2D6                  		bsr.w	BossMove
0001DEA2 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001DEA6                            
0001DEA6                            Obj8F_JumpDown:
0001DEA6 0668 0018 0012             		addi.w	#$18,$12(a0)	
0001DEAC 6100 D2C8                  		bsr.w	BossMove
0001DEB0 5328 0033                  		subq.b  #1,$33(a0)
0001DEB4 6A00 0000                                  bpl.w   loc_sunksh3
0001DEB8 4EB9 0001 08E0                             jsr	SingleObjLoad
0001DEBE 6600 0000                  		bne.w   loc_sunksh3
0001DEC2 12BC 0020                  		move.b	#$20,0(a1)	; load missile object
0001DEC6 3368 0008 0008             		move.w	8(a0),8(a1)
0001DECC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DED2 337C FC00 0010             		move.w	#-$400,$10(a1)	; move left
0001DED8 303C 00AE                  		move.w	#$AE,d0
0001DEDC 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play lava ball sound
0001DEE2 1168 003C 0033                             move.b  $3C(a0),$33(a0)
0001DEE8                            
0001DEE8                            loc_sunksh3:
0001DEE8 0C68 04D0 0038             		cmpi.w	#$4D0,$38(a0)	; has the ship reached $325 on Y-axis?
0001DEEE 6D00 0000                  		blt.w	locurf_17916 ; if not, branch
0001DEF2 117C 0000 001C             		move.b	#0,$1C(a0)
0001DEF8 317C 0000 0012             		move.w	#0,$12(a0)
0001DEFE 303C 00BD                  		move.w	#$BD,d0
0001DF02 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play stomping sound	;
0001DF08 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001DF0C                            
0001DF0C                            Obj8F_MoveLeft3:
0001DF0C 317C FE00 0010             		move.w	#-$200,$10(a0)	
0001DF12 6100 D262                  		bsr.w	BossMove
0001DF16 5328 0033                  		subq.b  #1,$33(a0)
0001DF1A 6A00 0000                                  bpl.w   loc_sunksh2
0001DF1E 4EB9 0001 08E0                             jsr	SingleObjLoad
0001DF24 6600 0000                  		bne.w   loc_sunksh2
0001DF28 12BC 0020                  		move.b	#$20,0(a1)	; load missile object
0001DF2C 3368 0008 0008             		move.w	8(a0),8(a1)
0001DF32 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DF38 337C FC00 0010             		move.w	#-$400,$10(a1)	; move left
0001DF3E 303C 00AE                  		move.w	#$AE,d0
0001DF42 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play lava ball sound
0001DF48 1168 003C 0033                             move.b  $3C(a0),$33(a0)
0001DF4E                            
0001DF4E                            loc_sunksh2:
0001DF4E 0C68 3680 0030             		cmpi.w	#$3680,$30(a0)	
0001DF54 6400 0000                  		bcc.w	locurf_17916	; if not, branch
0001DF58 0868 0000 0022                             bchg	#0,$22(a0)	; reverse direction of the ship
0001DF5E 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001DF64 317C 0000 0012             		move.w	#0,$12(a0)	;
0001DF6A 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001DF6E                            
0001DF6E                            Obj8F_MoveRight3:
0001DF6E 317C 0200 0010             		move.w	#$200,$10(a0)	
0001DF74 6100 D200                  		bsr.w	BossMove
0001DF78                            
0001DF78                            Obj8F_Fire4:
0001DF78 5328 0033                                  subq.b  #1,$33(a0)
0001DF7C 6A00 0000                                  bpl.w   Obj8F_MoveRight32
0001DF80 4EB9 0001 08E0                             jsr	SingleObjLoad
0001DF86 6600                       		bne.s   Obj8F_MoveRight32
0001DF88 12BC 0020                  		move.b	#$20,0(a1)	; load missile object
0001DF8C 3368 0008 0008             		move.w	8(a0),8(a1)
0001DF92 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DF98 0869 0000 0022             		bchg	#0,$22(a1)	; change object's orientation
0001DF9E 4EB9 0000 2CA2                             jsr   (RandomNumber).l         ; get a random number
0001DFA4 0200 0001                                  andi.b   #1,d0               ; get a number equal or lower than 2 (0 until 2)
0001DFA8 0C00 0001                  		cmpi.b   #1,d0
0001DFAC 6700                       		beq.s    Obj8F_Fire4Add
0001DFAE 337C 0400 0010             		move.w	#$400,$10(a1)	; move left
0001DFB4 6000                                       bra.s   Obj8F_Fire4Timer
0001DFB6                            
0001DFB6                            Obj8F_Fire4Add:
0001DFB6 337C 0300 0010             		move.w	#$300,$10(a1)	; move left
0001DFBC 3038 D00C                      		move.w ($FFFFD000+$C).w,d0 ; Çàãðóçèòü X ïîçèöèþ Ñîíèêà.
0001DFC0 9068 000C                  		sub.w 	$C(a0),d0 ; Âû÷åñòü ïîçèöèþ îáúåêòà èç ïîçèöèè Ñîíèêà. Òàê ìû ïîëó÷èì äèñòàíöèþ Ñîíèêà ê îáúåêòó.
0001DFC4 E540                       		asl.w 	#2,d0 ; Àðèôìåòè÷åñêèé ñäâèã(2 ðàçà). Íóæíî óâåëè÷èòü çíà÷åíèå äëÿ ïîëó÷åíèÿ íîðìàëüíîé ñêîðîñòè.
0001DFC6 3340 0012                                  move.w 	d0,$12(a1);
0001DFCA                            
0001DFCA                            Obj8F_Fire4Timer:
0001DFCA 303C 00AE                  		move.w	#$AE,d0
0001DFCE 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play lava ball sound
0001DFD4 1168 003C 0033                             move.b  $3C(a0),$33(a0)
0001DFDA                            
0001DFDA                            Obj8F_MoveRight32:
0001DFDA 0C68 3790 0030             		cmpi.w	#$3790,$30(a0)	
0001DFE0 6D00 0000                  		blt.w	locurf_17916	; if not, branch
0001DFE4 0868 0000 0022                             bchg	#0,$22(a0)	; reverse direction of the ship
0001DFEA 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001DFF0 317C 0000 0012             		move.w	#0,$12(a0)	;
0001DFF6 117C 0002 0025             		move.b	#2,$25(a0)      ; goto next routine
0001DFFC                            
0001DFFC                            locurf_17916:
0001DFFC 6000 FAFC                                  bra.w  Obj8F_ShipProcess
0001E000                            ; ===========================================================================
0001E000                            
0001E000                            ;loc_1797A:
0001E000                            Obj8F_Explode:				; XREF: Obj8F_ShipIndex
0001E000 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from timer
0001E004 6B00                       		bmi.s	locurf_17984	; if timer is over, branch
0001E006 6000 D12C                  		bra.w	BossDefeated
0001E00A                            
0001E00A                            locurf_17984:
0001E00A 08E8 0000 0022             		bset	#0,$22(a0)	; set orientation to 1 (right)
0001E010 08A8 0007 0022             		bclr	#7,$22(a0)	; clear defeated flag
0001E016 4268 0010                  		clr.w	$10(a0)		; clear X-velocity
0001E01A 5428 0025                  		addq.b	#2,$25(a0)
0001E01E 317C FFDA 003C             		move.w	#-$26,$3C(a0)	; set timer to -$26
0001E024 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001E028 6600                       		bne.s	locreturf_179AA
0001E02A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001E030                            
0001E030                            locreturf_179AA:
0001E030 4E75                       		rts	
0001E032                            ; ===========================================================================
0001E032                            
0001E032                            ;loc_179AC:
0001E032                            Obj8F_ShipFall:	                                          ; XREF: Obj8F_ShipIndex
0001E032 303C 0099                  		move.w	#$99,d0
0001E036 4EB9 0000 12CA             		jsr	(PlaySound).l	; play WIN sound
0001E03C 4268 0012                                  clr.w	$12(a0)		; clear Y-velocity
0001E040 317C 0000 0014                             move.w  #$0,$14(a0)     ;clear all speeds
0001E046 11FC 0001 F7CC                             move.b	#1,($FFFFF7CC).w	; lock	controls
0001E04C 337C 0000 0014                             move.w	#0,$14(a1)	; stop Sonic moving
0001E052 31FC 0008 F602                             move.w	#(Right)<<0,(SonicControl) ; make Sonic stand
0001E058 11FC 0001 FFFE                             move.b	#1,($FFFFFFFE).w ;set win flag
0001E05E 4EB9 0001 1D18                             jsr     GotThroughAct
0001E064 4EF9 0001 0496                             jmp	(DeleteObject).l
0001E06A                            	
0001E06A                            ; ===========================================================================
0001E06A                            ; ---------------------------------------------------------------------------
0001E06A                            ; Object 73 - Eggrobo (MZ)
0001E06A                            ; ---------------------------------------------------------------------------
0001E06A                            
0001E06A                            Obj73:					; XREF: Obj_Index
0001E06A 7000                       		moveq	#0,d0
0001E06C 1028 0024                  		move.b	$24(a0),d0
0001E070 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001E074 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001E078                            ; ===========================================================================
0001E078 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001E07A 0000                       		dc.w Obj73_ShipMain-Obj73_Index	 ; for ship object
0001E07C 0000                       		dc.w Obj73_FaceMain-Obj73_Index  ; for face object
0001E07E 0000                       		dc.w Obj73_FlameMain-Obj73_Index ; for flame object
0001E080                            
0001E080                            		; routine counter, animation:
0001E080                            Obj73_ObjData:
0001E080 0200                       		dc.b 2,	0
0001E082 0401                       		dc.b 4,	1
0001E084 0607                       		dc.b 6,	7
0001E086                            ; ===========================================================================
0001E086                            
0001E086                            Obj73_Main:				; XREF: Obj3D_Index
0001E086 45F9 0001 E080             		lea	(Obj73_ObjData).l,a2
0001E08C 2248                       		movea.l	a0,a1
0001E08E 7202                       		moveq	#2,d1
0001E090 6000                       		bra.s	Obj73_LoadBoss	; boss consists of 3 objects
0001E092                            ; ===========================================================================
0001E092                            
0001E092                            Obj73_Loop:
0001E092 4EB9 0001 08F6             		jsr	SingleObjLoad2
0001E098 6600                       		bne.s	Obj73_LoadShip
0001E09A                            
0001E09A                            Obj73_LoadBoss:				; XREF: Obj3D_Main
0001E09A 135A 0024                  		move.b	(a2)+,$24(a1)	; set routine number
0001E09E 12BC 0073                  		move.b	#$73,0(a1)	; set obj to $3D
0001E0A2 3368 0008 0008             		move.w	8(a0),8(a1)	; copy X
0001E0A8 3368 000C 000C             		move.w	$C(a0),$C(a1)	; copy Y
0001E0AE 237C 0001 B4AE 0004        		move.l	#Map_Eggman,4(a1)
0001E0B6 337C 0400 0002             		move.w	#$400,2(a1)
0001E0BC 137C 0004 0001             		move.b	#4,1(a1)
0001E0C2 137C 0020 0019             		move.b	#$20,$19(a1)
0001E0C8 137C 0003 0018             		move.b	#3,$18(a1)
0001E0CE 135A 001C                  		move.b	(a2)+,$1C(a1)	; set animation
0001E0D2 2348 0034                  		move.l	a0,$34(a1)	; parent addr
0001E0D6 51C9 FFBA                  		dbf	d1,Obj73_Loop	; repeat sequence 2 more times
0001E0DA                            
0001E0DA                            ;loc_17772:
0001E0DA                            Obj73_LoadShip:
0001E0DA 3168 0008 0030             		move.w	8(a0),$30(a0)	; copy X-pos to secondary X-pos
0001E0E0 3168 000C 0038             		move.w	$C(a0),$38(a0)	; copy Y-pos to secondary Y-pos
0001E0E6 117C 000F 0020             		move.b	#$F,$20(a0)	; set touch response
0001E0EC 117C 000C 0021             		move.b  #var_BHits_MZ,$21(a0)
0001E0F2 4EB9 0000 0000                             jsr (BossStarLight_Ballhog_RobotnikHud).l
0001E0F8                            
0001E0F8                            Obj73_ShipMain:				; XREF: Obj3D_Index
0001E0F8 7000                       		moveq	#0,d0
0001E0FA 1028 0025                  		move.b	$25(a0),d0
0001E0FE 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001E102 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001E106 43F9 0001 B36E             		lea	(Ani_Eggman).l,a1
0001E10C 4EB9 0000 D3EA             		jsr	AnimateSprite
0001E112 1028 0022                  		move.b	$22(a0),d0
0001E116 0200 0003                  		andi.b	#3,d0
0001E11A 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001E120 8128 0001                  		or.b	d0,1(a0)
0001E124 4EF9 0001 045A             		jmp	DisplaySprite
0001E12A                            ; ===========================================================================
0001E12A 0000                       Obj73_ShipIndex:dc.w Obj73_ShipStart-Obj73_ShipIndex	; 0
0001E12C 0000                       		dc.w Obj73_MakeBall-Obj73_ShipIndex	; 2
0001E12E 0000                       		dc.w Obj73_ShipMove-Obj73_ShipIndex	; 4
0001E130 0000                       		dc.w Obj73_ShipMove2-Obj73_ShipIndex	; 6
0001E132 0000                       		dc.w Obj73_Explode-Obj73_ShipIndex	; 8
0001E134 0000                       		dc.w Obj73_ShipFall-Obj73_ShipIndex	; $A
0001E136 0000                       		dc.w Obj73_RunAway-Obj73_ShipIndex	; $C
0001E138                            ; ===========================================================================
0001E138                            
0001E138                            Obj73_ShipStart:			; XREF: Obj3D_ShipIndex
0001E138 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
0001E13E 6100 D036                  		bsr.w	BossMove
0001E142 0C68 0262 0038             		cmpi.w	#$262,$38(a0)	; has the ship reached $338 on Y-axis?
0001E148 6600                       		bne.s	Obj73_ShipProcess ; if not, branch
0001E14A 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
0001E150                            
0001E150 4EB9 0001 08E0                             jsr	SingleObjLoad
0001E156 6600 0000                  		bne.w	Obj73_ShipProcess
0001E15A 0669 0018 000C             		addi.w	#$18,$C(a1)
0001E160 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001E164 3368 0008 0008             		move.w	8(a0),8(a1)
0001E16A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001E170 0669 001C 000C             		addi.w	#$1C,$C(a1)
0001E176 303C 00A5                  		move.w	#$A5,d0
0001E17A 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play explosion sound
0001E180 137C 0001 0028             		move.b	#1,$28(a1)
0001E186                            
0001E186 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
0001E18A                            
0001E18A                            
0001E18A                            ; This routine does the main ship stuff
0001E18A                            
0001E18A                            Obj73_ShipProcess:
0001E18A                            		; Move ship slightly up and down during the flight
0001E18A 1028 003F                  		move.b	$3F(a0),d0	; Y-amplitude
0001E18E 4EB9 0000 2CC8             		jsr	(CalcSine).l
0001E194 EC40                       		asr.w	#6,d0		; d0 contains sine
0001E196 D068 0038                  		add.w	$38(a0),d0	; add secondary Y-pos to d0
0001E19A 3140 000C                  		move.w	d0,$C(a0)	; and we've got Y-pos with the amplitude
0001E19E 3168 0030 0008             		move.w	$30(a0),8(a0)
0001E1A4 5428 003F                  		addq.b	#2,$3F(a0)	; reduce the amplitude
0001E1A8                            
0001E1A8                            		; Touch repsonse stuff
0001E1A8 0C28 0008 0025             		cmpi.b	#8,$25(a0)	; is routine more or equals to 8?
0001E1AE 6400                       		bcc.s	locret_192561os	; if yes, branch
0001E1B0 4A28 0022                  		tst.b	$22(a0)		; was boss defeated?
0001E1B4 6B00                       		bmi.s	Obj73_ShipGone	; if yes, branch
0001E1B6 4A28 0020                  		tst.b	$20(a0)		; is touch response zero?
0001E1BA 6600                       		bne.s	locret_192561os	; if not, branch
0001E1BC 4A28 003E                  		tst.b	$3E(a0)		; is flashes counter zero?
0001E1C0 6600                       		bne.s	Obj73_ShipFlash	; if not, branch
0001E1C2 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times to flash
0001E1C8 303C 00AC                  		move.w	#$AC,d0
0001E1CC 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001E1D2                            
0001E1D2                            Obj73_ShipFlash:
0001E1D2 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001E1D6 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001E1D8 4A51                       		tst.w	(a1)		; is colour in pallete black?
0001E1DA 6600                       		bne.s	loc_192481os	; if not, branch
0001E1DC 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
0001E1E0                            
0001E1E0                            loc_192481os:
0001E1E0 3280                       		move.w	d0,(a1)		; apply colour stored in d0
0001E1E2 5328 003E                  		subq.b	#1,$3E(a0)	; subtract 1 from flashes counter
0001E1E6 6600                       		bne.s	locret_192561os	; if flashes counter is not zero, branch
0001E1E8 117C 000F 0020             		move.b	#$F,$20(a0)	; restore touch responsibility
0001E1EE                            
0001E1EE                            locret_192561os:
0001E1EE 4E75                       		rts
0001E1F0                            ; ===========================================================================
0001E1F0                            ;loc_1784C:
0001E1F0                            Obj73_ShipGone:				; XREF: Obj3D_ShipProcess
0001E1F0 7064                       		moveq	#100,d0
0001E1F2 6100 0000                  		bsr.w	AddPoints	; add 1000 points
0001E1F6 117C 0008 0025             		move.b	#8,$25(a0)	; set routine to 8 (Obj3D_Explode)
0001E1FC 317C 00B3 003C             		move.w	#179,$3C(a0)	; set timer to 179 (3 seconds)
0001E202 4E75                       		rts
0001E204                            
0001E204                            ; ===========================================================================
0001E204                            
0001E204                            Obj73_MakeBall:				; XREF: Obj3D_ShipIndex
0001E204 317C FE00 0010             		move.w	#-$200,$10(a0)	; move left
0001E20A 317C FFC0 0012             		move.w	#-$40,$12(a0)	; move slightly up
0001E210 6100 CF64                  		bsr.w	BossMove
0001E214 0C68 1890 0030             		cmpi.w	#$1890,$30(a0)	; has the boss reached $2A00 on X-axis?
0001E21A 6600                       		bne.s	loc_Obj73Fucking	; if not, branch
0001E21C                            		;move.w	#0,$10(a0)	; stop him
0001E21C 317C 0000 0012             		move.w	#0,$12(a0)	;
0001E222                            
0001E222 4EB9 0001 08E0                             jsr	SingleObjLoad
0001E228 6600 0000                  		bne.w	Obj73_JmpNext
0001E22C 0669 0018 000C             		addi.w	#$18,$C(a1)
0001E232 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001E236 3368 0008 0008             		move.w	8(a0),8(a1)
0001E23C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001E242 0669 001C 000C             		addi.w	#$1C,$C(a1)
0001E248 303C 00A5                  		move.w	#$A5,d0
0001E24C 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play explosion sound
0001E252 137C 0001 0028             		move.b	#1,$28(a1)
0001E258                            
0001E258                            Obj73_JmpNext:
0001E258 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001E25C 2348 0034                  		move.l	a0,$34(a1)
0001E260                                       	;move.w	#$30,$3C(a0)	; set timer 
0001E260                            
0001E260                            loc_Obj73Fucking:
0001E260 6000 0000                  		bra.w	ObjE5_ShipProcess
0001E264                            ; ===========================================================================
0001E264                            
0001E264                            Obj73_ShipMove:				; XREF: Obj3D_ShipIndex
0001E264 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from timer
0001E268 6A00                       		bpl.s	Obj73_Reverse	; if time remains, branch
0001E26A 5428 0025                  		addq.b	#2,$25(a0)
0001E26E 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001E274 317C 0400 0010             		move.w	#$400,$10(a0)	; move the ship	sideways
0001E27A 0C68 1890 0030             		cmpi.w	#$1890,$30(a0)	; has the boss reached $2A00 on X-axis?
0001E280 6600                       		bne.s	Obj73_Reverse	; if not, branch
0001E282 317C 01C0 0010                             move.w	#$1C0,$10(a0)
0001E288 117C 00B5 0033                        	move.b	#$B5,$33(a0)	; set timer 
0001E28E                            
0001E28E                            Obj73_Reverse:
0001E28E 0828 0000 0022             		btst	#0,$22(a0)	; is ship facing right?
0001E294 6600                       		bne.s	loc_17000000950os	; if yes, branch
0001E296 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
0001E29A                            
0001E29A                            loc_17000000950os:
0001E29A 6000 FEEE                  		bra.w	Obj73_ShipProcess
0001E29E                            ; ===========================================================================
0001E29E                            
0001E29E                            ;loc_17954:
0001E29E                            Obj73_ShipMove2:			; XREF: Obj3D_ShipIndex
0001E29E 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from timer
0001E2A2 6B00 0000                  		bmi.w	loc_17000000960os	; if timer is over, branch
0001E2A6                            
0001E2A6 5328 0033                                  subq.b	#1,$33(a0)	; subtract 1 from timer
0001E2AA 6B00                                       bmi.s	Obj73_PolniVpered
0001E2AC 4EB9 0001 08E0                             jsr	SingleObjLoad
0001E2B2 6600                       		bne.s	Obj73_PolniVpered
0001E2B4 0669 0018 000C             		addi.w	#$18,$C(a1)
0001E2BA 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001E2BE 3368 0008 0008             		move.w	8(a0),8(a1)
0001E2C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001E2CA 0669 001C 000C             		addi.w	#$1C,$C(a1)
0001E2D0 303C 00A5                  		move.w	#$A5,d0
0001E2D4 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play explosion sound
0001E2DA 137C 0001 0028             		move.b	#1,$28(a1)
0001E2E0 117C 00D0 0033                             move.b  #$D0,$33(a0)
0001E2E6                            
0001E2E6                            Obj73_PolniVpered:
0001E2E6 6100 CE8E                  		bsr.w	BossMove
0001E2EA 6000 0000                                  bra.w	loc_17976os
0001E2EE                            
0001E2EE                            loc_17000000960os:
0001E2EE 0868 0000 0022             		bchg	#0,$22(a0)	; reverse direction of the ship 
0001E2F4 0C28 0008 0021                             cmpi.b  #8,$21(a0)
0001E2FA 6D00                                       blt.s   Obj73_PolniVpered2 ; ignore this code if boss has more than 10 hp
0001E2FC 317C 003F 003C             		move.w	#$3F,$3C(a0)	; set timer to $3F
0001E302                            
0001E302                            Obj73_PolniVpered2:
0001E302 5528 0025                  		subq.b	#2,$25(a0)	; switch to "Obj3D_ShipMove" routine
0001E306 317C 0000 0010             		move.w	#0,$10(a0)	; stop the ship
0001E30C                            
0001E30C                            loc_17976os:
0001E30C 6000 FE7C                  		bra.w	Obj73_ShipProcess
0001E310                            ; ===========================================================================
0001E310                            
0001E310                            ;loc_1797A:
0001E310                            Obj73_Explode:				; XREF: Obj3D_ShipIndex
0001E310 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from timer
0001E314 6B00                       		bmi.s	loc_17984os	; if timer is over, branch
0001E316 6000 CE1C                  		bra.w	BossDefeated
0001E31A                            
0001E31A                            loc_17984os:
0001E31A 08E8 0000 0022             		bset	#0,$22(a0)	; set orientation to 1 (right)
0001E320 08A8 0007 0022             		bclr	#7,$22(a0)	; clear defeated flag
0001E326 4268 0010                  		clr.w	$10(a0)		; clear X-velocity
0001E32A 5428 0025                  		addq.b	#2,$25(a0)
0001E32E 317C FFDA 003C             		move.w	#-$26,$3C(a0)	; set timer to -$26
0001E334 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001E338 6600                       		bne.s	locret_179AAos
0001E33A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001E340                            
0001E340                            locret_179AAos:
0001E340 4E75                       		rts
0001E342                            ; ===========================================================================
0001E342                            
0001E342                            ;loc_179AC:
0001E342                            Obj73_ShipFall:				; XREF: Obj3D_ShipIndex
0001E342 5268 003C                  		addq.w	#1,$3C(a0)	; add 1 to timer
0001E346 6700                       		beq.s	@StoppeFall	; if timer is zero, branch
0001E348 6A00                       		bpl.s	Obj73_ShipRise	; if timer is postive, branch
0001E34A 0668 0018 0012             		addi.w	#$18,$12(a0)	; add $18 to Y-velocity to make ship fall
0001E350 6000                       		bra.s	loc_179EEos
0001E352                            
0001E352                            @StoppeFall:
0001E352 4268 0012                  		clr.w	$12(a0)		; clear Y-velocity
0001E356 6000                       		bra.s	loc_179EEos
0001E358                            
0001E358                            Obj73_ShipRise:
0001E358 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)	; is timer's value $30?
0001E35E 6500                       		bcs.s	@RissenShip	; if it's less than, branch
0001E360 6700                       		beq.s	@StoppeRise	; if it equals, branch
0001E362 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)	; is timer's value less than $38?
0001E368 6500                       		bcs.s	loc_179EEos	; if yes, branch
0001E36A 5428 0025                  		addq.b	#2,$25(a0)
0001E36E 6000                       		bra.s	loc_179EEos
0001E370                            
0001E370                            @RissenShip:
0001E370 5168 0012                  		subq.w	#8,$12(a0)	; subtract 8 from Y-vel to make ship rise
0001E374 6000                       		bra.s	loc_179EEos
0001E376                            
0001E376                            @StoppeRise:
0001E376 4268 0012                  		clr.w	$12(a0)		; clear Y-velocity
0001E37A 303C 008F                  		move.w	#$8F,d0
0001E37E 4EB9 0000 12CA             		jsr	(PlaySound).l	; play SYZ music
0001E384 317C 0000 0014                             move.w  #$0,$14(a0)     ;clear all speeds
0001E38A 11FC 0001 F7CC                             move.b	#1,($FFFFF7CC).w	; lock	controls
0001E390 337C 0000 0014                             move.w	#0,$14(a1)	; stop Sonic moving
0001E396 31FC 0008 F602                             move.w	#(Right)<<0,(SonicControl) ; make Sonic stand
0001E39C 11FC 0001 FFFE                             move.b	#1,($FFFFFFFE).w ;set win flag
0001E3A2 4EB9 0001 1D18                             jsr     GotThroughAct
0001E3A8                            
0001E3A8                            loc_179EEos:
0001E3A8 6100 CDCC                  		bsr.w	BossMove
0001E3AC 6000 FDDC                  		bra.w	Obj73_ShipProcess
0001E3B0                            ; ===========================================================================
0001E3B0                            
0001E3B0                            ;loc_179F6:
0001E3B0                            Obj73_RunAway:				; XREF: Obj3D_ShipIndex
0001E3B0 317C 0400 0010             		move.w	#$400,$10(a0)	; move ship right
0001E3B6 317C FFC0 0012             		move.w	#-$40,$12(a0)	; move ship slightly up
0001E3BC 0C78 1890 F72A             		cmpi.w	#$1890,($FFFFF72A).w
0001E3C2 6700                       		beq.s	loc_17A10os
0001E3C4                            		;addq.w	#2,($FFFFF72A).w ; add 2 to camera's right boundary
0001E3C4 6000                       		bra.s	loc_17A16os
0001E3C6                            
0001E3C6                            loc_17A10os:
0001E3C6 4A28 0001                  		tst.b	1(a0)		; is object out of screen?
0001E3CA 6A00                       		bpl.s	Obj73_ShipDel	; if yes, branch
0001E3CC                            
0001E3CC                            loc_17A16os:
0001E3CC 6100 CDA8                  		bsr.w	BossMove
0001E3D0 6000 FDB8                  		bra.w	Obj73_ShipProcess
0001E3D4                            
0001E3D4                            Obj73_ShipDel:
0001E3D4 4EF9 0001 0496             		jmp	DeleteObject
0001E3DA                            
0001E3DA                            ; ===========================================================================
0001E3DA                            ; ===========================================================================
0001E3DA                            
0001E3DA                            Obj73_FaceMain:				; XREF: Obj3D_Index
0001E3DA 7000                       		moveq	#0,d0
0001E3DC 7201                       		moveq	#1,d1
0001E3DE 2268 0034                  		movea.l	$34(a0),a1	; load parent obj
0001E3E2 1029 0025                  		move.b	$25(a1),d0	; get ship's secondary routine counter
0001E3E6 5900                       		subq.b	#4,d0
0001E3E8 6600                       		bne.s	loc_17A3Eos	; if it's more than 4, branch
0001E3EA 0C69 2CA0 0030             		cmpi.w	#$2CA0,$30(a1)	; is ship's X-position $2A00?
0001E3F0 6600                       		bne.s	loc_17A46os	; if not, branch
0001E3F2 7204                       		moveq	#4,d1		; use laughing animation
0001E3F4                            
0001E3F4                            loc_17A3Eos:
0001E3F4 5D00                       		subq.b	#6,d0
0001E3F6 6B00                       		bmi.s	loc_17A46os
0001E3F8 720A                       		moveq	#$A,d1
0001E3FA 6000                       		bra.s	Obj73_FaceApply
0001E3FC                            
0001E3FC                            loc_17A46os:
0001E3FC 4A29 0020                  		tst.b	$20(a1)		; has the ship been hurt?
0001E400 6600                       		bne.s	loc_17A50os	; if not, branch
0001E402 7205                       		moveq	#5,d1		; use hurting animation
0001E404 6000                       		bra.s	Obj73_FaceApply
0001E406                            
0001E406                            loc_17A50os:
0001E406 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w ; is Sonic hurt?
0001E40C 6500                       		bcs.s	Obj73_FaceApply	 ; if not, branch
0001E40E 7204                       		moveq	#4,d1		 ; use laughing animation, haha!
0001E410                            
0001E410                            ;loc_17A5A:
0001E410                            Obj73_FaceApply:
0001E410 1141 001C                  		move.b	d1,$1C(a0)	; apply face animation
0001E414 5500                       		subq.b	#2,d0
0001E416 6600                       		bne.s	Obj73_FaceDisp
0001E418 117C 0006 001C             		move.b	#6,$1C(a0)	; correct animation
0001E41E 4A28 0001                  		tst.b	1(a0)		; is object on screen?
0001E422 6A00                       		bpl.s	Obj73_FaceDel	; if not, branch
0001E424                            
0001E424                            Obj73_FaceDisp:
0001E424 6000                       		bra.s	Obj73_Display
0001E426                            
0001E426                            Obj73_FaceDel:
0001E426 4EF9 0001 0496             		jmp	DeleteObject
0001E42C                            
0001E42C                            ; ===========================================================================
0001E42C                            ; ===========================================================================
0001E42C                            
0001E42C                            Obj73_FlameMain:			; XREF: Obj3D_Index
0001E42C 117C 0007 001C             		move.b	#7,$1C(a0)
0001E432 2268 0034                  		movea.l	$34(a0),a1	; load parent obj
0001E436 0C29 000C 0025             		cmpi.b	#$C,$25(a1)	; is ship's secondary routine $C (Obj3D_RunAway)?
0001E43C 6600                       		bne.s	loc_17A96os	; if not, branch
0001E43E 117C 000B 001C             		move.b	#$B,$1C(a0)
0001E444 4A28 0001                  		tst.b	1(a0)		; is object on screen?
0001E448 6A00                       		bpl.s	Obj73_FlameDel	; if not, branch
0001E44A 6000                       		bra.s	Obj73_FlameDisp
0001E44C                            
0001E44C                            loc_17A96os:
0001E44C 3029 0010                  		move.w	$10(a1),d0
0001E450 6700                       		beq.s	Obj73_FlameDisp
0001E452 117C 0008 001C             		move.b	#8,$1C(a0)
0001E458                            
0001E458                            Obj73_FlameDisp:
0001E458 6000                       		bra.s	Obj73_Display
0001E45A                            
0001E45A                            Obj73_FlameDel:
0001E45A 4EF9 0001 0496             		jmp	DeleteObject
0001E460                            ; ===========================================================================
0001E460                            
0001E460                            Obj73_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
0001E460 2268 0034                  		movea.l	$34(a0),a1
0001E464 3169 0008 0008             		move.w	8(a1),8(a0)
0001E46A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001E470 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001E476 43F9 0001 B36E             		lea	(Ani_Eggman).l,a1
0001E47C 4EB9 0000 D3EA             		jsr	AnimateSprite
0001E482 1028 0022                  		move.b	$22(a0),d0
0001E486 0200 0003                  		andi.b	#3,d0
0001E48A 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001E490 8128 0001                  		or.b	d0,1(a0)
0001E494 4EF9 0001 045A             		jmp	DisplaySprite
0001E49A                            ; ---------------------------------------------------------------------------
0001E49A                            ; Object 74 - lava that	Eggman drops (MZ)
0001E49A                            ; ---------------------------------------------------------------------------
0001E49A                            
0001E49A                            Obj74:					; XREF: Obj_Index
0001E49A 7000                       		moveq	#0,d0
0001E49C 1028 0024                  		move.b	$24(a0),d0
0001E4A0 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001E4A4 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001E4A8 4EF9 0001 045A             		jmp	DisplaySprite
0001E4AE                            ; ===========================================================================
0001E4AE 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001E4B0 0000                       		dc.w Obj74_Action-Obj74_Index
0001E4B2 0000                       		dc.w loc_18886-Obj74_Index
0001E4B4 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001E4B6                            ; ===========================================================================
0001E4B6                            
0001E4B6                            Obj74_Main:				; XREF: Obj74_Index
0001E4B6 117C 0008 0016             		move.b	#8,$16(a0)
0001E4BC 117C 0008 0017             		move.b	#8,$17(a0)
0001E4C2 217C 0000 E166 0004        		move.l	#Map_obj14,4(a0)
0001E4CA 317C 0345 0002             		move.w	#$345,2(a0)
0001E4D0 117C 0004 0001             		move.b	#4,1(a0)
0001E4D6 117C 0005 0018             		move.b	#5,$18(a0)
0001E4DC 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001E4E2 117C 0008 0019             		move.b	#8,$19(a0)
0001E4E8 5428 0024                  		addq.b	#2,$24(a0)
0001E4EC 4A28 0028                  		tst.b	$28(a0)
0001E4F0 6600                       		bne.s	loc_1870A
0001E4F2 117C 008B 0020             		move.b	#$8B,$20(a0)
0001E4F8 5428 0024                  		addq.b	#2,$24(a0)
0001E4FC 6000 0000                  		bra.w	loc_18886
0001E500                            ; ===========================================================================
0001E500                            
0001E500                            loc_1870A:
0001E500                            		;move.b	#$1E,$29(a0)
0001E500                                            ;move.b	#1,$29(a0)
0001E500 303C 00AE                  		move.w	#$AE,d0
0001E504 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play lava sound
0001E50A                            
0001E50A                            Obj74_Action:				; XREF: Obj74_Index
0001E50A 7000                       		moveq	#0,d0
0001E50C 1028 0025                  		move.b	$25(a0),d0
0001E510 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001E514 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001E518 4EB9 0001 0434             		jsr	SpeedToPos
0001E51E 43F9 0001 133E             		lea	(Ani_obj14).l,a1
0001E524 4EB9 0000 D3EA             		jsr	AnimateSprite
0001E52A 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001E530 6200                       		bhi.s	Obj74_Delete
0001E532 4E75                       		rts	
0001E534                            ; ===========================================================================
0001E534                            
0001E534                            Obj74_Delete:
0001E534 4EF9 0001 0496             		jmp	DeleteObject
0001E53A                            ; ===========================================================================
0001E53A 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001E53C 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001E53E 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001E540 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001E542                            ; ===========================================================================
0001E542                            
0001E542                            Obj74_Drop:				; XREF: Obj74_Index2
0001E542 08E8 0001 0022             		bset	#1,$22(a0)
0001E548 5328 0029                  		subq.b	#1,$29(a0)
0001E54C 6A00                       		bpl.s	locret_18780
0001E54E 117C 008B 0020             		move.b	#$8B,$20(a0)
0001E554 4228 0028                  		clr.b	$28(a0)
0001E558 0668 0018 0012             		addi.w	#$18,$12(a0)
0001E55E 08A8 0001 0022             		bclr	#1,$22(a0)
0001E564 6100 9F42                  		bsr.w	ObjHitFloor
0001E568 4A41                       		tst.w	d1
0001E56A 6A00                       		bpl.s	locret_18780
0001E56C 5428 0025                  		addq.b	#2,$25(a0)
0001E570                            
0001E570                            locret_18780:
0001E570 4E75                       		rts	
0001E572                            ; ===========================================================================
0001E572                            
0001E572                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001E572 5568 000C                  		subq.w	#2,$C(a0)
0001E576 08E8 0007 0002             		bset	#7,2(a0)
0001E57C                            		;move.w	#$A0,$10(a0)
0001E57C 317C 0300 0010                             move.w	#$300,$10(a0)
0001E582 4268 0012                  		clr.w	$12(a0)
0001E586 3168 0008 0030             		move.w	8(a0),$30(a0)
0001E58C 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001E592                            		;move.b	#3,$29(a0)
0001E592 117C 0001 0029                             move.b	#1,$29(a0)
0001E598 4EB9 0001 08F6             		jsr	SingleObjLoad2
0001E59E 6600                       		bne.s	loc_187CA
0001E5A0 47D1                       		lea	(a1),a3
0001E5A2 45D0                       		lea	(a0),a2
0001E5A4 7003                       		moveq	#3,d0
0001E5A6                            
0001E5A6                            Obj74_Loop:
0001E5A6 26DA                       		move.l	(a2)+,(a3)+
0001E5A8 26DA                       		move.l	(a2)+,(a3)+
0001E5AA 26DA                       		move.l	(a2)+,(a3)+
0001E5AC 26DA                       		move.l	(a2)+,(a3)+
0001E5AE 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001E5B2                            
0001E5B2 4469 0010                  		neg.w	$10(a1)
0001E5B6 5429 0025                  		addq.b	#2,$25(a1)
0001E5BA                            
0001E5BA                            loc_187CA:
0001E5BA 5428 0025                  		addq.b	#2,$25(a0)
0001E5BE 4E75                       		rts	
0001E5C0                            
0001E5C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E5C0                            
0001E5C0                            
0001E5C0                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001E5C0 4EB9 0001 08F6             		jsr	SingleObjLoad2
0001E5C6 6600                       		bne.s	locret_187EE
0001E5C8 3368 0008 0008             		move.w	8(a0),8(a1)
0001E5CE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001E5D4 12BC 0074                  		move.b	#$74,(a1)
0001E5D8                            		;move.w	#$67,$28(a1)
0001E5D8 337C 0009 0028                             move.w	#9,$28(a1)
0001E5DE                            
0001E5DE                            locret_187EE:
0001E5DE 4E75                       		rts	
0001E5E0                            ; End of function Obj74_Duplicate2
0001E5E0                            
0001E5E0                            ; ===========================================================================
0001E5E0                            
0001E5E0                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001E5E0 6100 9EC6                  		bsr.w	ObjHitFloor
0001E5E4 4A41                       		tst.w	d1
0001E5E6 6A00                       		bpl.s	loc_18826
0001E5E8 3028 0008                  		move.w	8(a0),d0
0001E5EC 0C40 1940                  		cmpi.w	#$1940,d0
0001E5F0 6E00                       		bgt.s	loc_1882C
0001E5F2 3228 0030                  		move.w	$30(a0),d1
0001E5F6 B240                       		cmp.w	d0,d1
0001E5F8 6700                       		beq.s	loc_1881E
0001E5FA 0240 0010                  		andi.w	#$10,d0
0001E5FE 0241 0010                  		andi.w	#$10,d1
0001E602 B240                       		cmp.w	d0,d1
0001E604 6700                       		beq.s	loc_1881E
0001E606 61B8                       		bsr.s	Obj74_Duplicate2
0001E608 3168 0008 0032             		move.w	8(a0),$32(a0)
0001E60E                            
0001E60E                            loc_1881E:
0001E60E 3168 0008 0030             		move.w	8(a0),$30(a0)
0001E614 4E75                       		rts	
0001E616                            ; ===========================================================================
0001E616                            
0001E616                            loc_18826:
0001E616 5428 0025                  		addq.b	#2,$25(a0)
0001E61A 4E75                       		rts	
0001E61C                            ; ===========================================================================
0001E61C                            
0001E61C                            loc_1882C:
0001E61C 5428 0024                  		addq.b	#2,$24(a0)
0001E620 4E75                       		rts	
0001E622                            ; ===========================================================================
0001E622                            
0001E622                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001E622 08A8 0001 0022             		bclr	#1,$22(a0)
0001E628 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001E62E 3028 0008                  		move.w	8(a0),d0
0001E632 9068 0032                  		sub.w	$32(a0),d0
0001E636 6A00                       		bpl.s	loc_1884A
0001E638 4440                       		neg.w	d0
0001E63A                            
0001E63A                            loc_1884A:
0001E63A 0C40 0012                  		cmpi.w	#$12,d0
0001E63E 6600                       		bne.s	loc_18856
0001E640 08A8 0007 0002             		bclr	#7,2(a0)
0001E646                            
0001E646                            loc_18856:
0001E646 6100 9E60                  		bsr.w	ObjHitFloor
0001E64A 4A41                       		tst.w	d1
0001E64C 6A00                       		bpl.s	locret_1887E
0001E64E 5328 0029                  		subq.b	#1,$29(a0)
0001E652 6700                       		beq.s	Obj74_Delete2
0001E654 4268 0012                  		clr.w	$12(a0)
0001E658 3168 0032 0008             		move.w	$32(a0),8(a0)
0001E65E 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001E664 08E8 0007 0002             		bset	#7,2(a0)
0001E66A 5528 0025                  		subq.b	#2,$25(a0)
0001E66E                            
0001E66E                            locret_1887E:
0001E66E 4E75                       		rts	
0001E670                            ; ===========================================================================
0001E670                            
0001E670                            Obj74_Delete2:
0001E670 4EF9 0001 0496             		jmp	DeleteObject
0001E676                            ; ===========================================================================
0001E676                            
0001E676                            loc_18886:				; XREF: Obj74_Index
0001E676 08E8 0007 0002             		bset	#7,2(a0)
0001E67C 5328 0029                  		subq.b	#1,$29(a0)
0001E680 6600                       		bne.s	Obj74_Animate
0001E682 117C 0001 001C             		move.b	#1,$1C(a0)
0001E688 5968 000C                  		subq.w	#4,$C(a0)
0001E68C 4228 0020                  		clr.b	$20(a0)
0001E690                            
0001E690                            Obj74_Animate:
0001E690 43F9 0001 133E             		lea	(Ani_obj14).l,a1
0001E696 4EF9 0000 D3EA             		jmp	AnimateSprite
0001E69C                            ; ===========================================================================
0001E69C                            
0001E69C                            Obj74_Delete3:				; XREF: Obj74_Index
0001E69C 4EF9 0001 0496             		jmp	DeleteObject
0001E6A2                            ; ===========================================================================
0001E6A2                            
0001E6A2                            Obj7A_Delete:
0001E6A2 4EF9 0001 0496             		jmp	DeleteObject
0001E6A8                            ; ===========================================================================
0001E6A8                            
0001E6A8                            ; ===========================================================================
0001E6A8                            ; ---------------------------------------------------------------------------
0001E6A8                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001E6A8                            ; ---------------------------------------------------------------------------
0001E6A8                            
0001E6A8                            Obj7B:					; XREF: Obj_Index
0001E6A8 7000                       		moveq	#0,d0
0001E6AA 1028 0024                  		move.b	$24(a0),d0
0001E6AE 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001E6B2 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001E6B6 3028 0030                  		move.w	$30(a0),d0
0001E6BA 0240 FF80                  		andi.w	#$FF80,d0
0001E6BE 3238 F700                  		move.w	($FFFFF700).w,d1
0001E6C2 0441 0080                  		subi.w	#$80,d1
0001E6C6 0241 FF80                  		andi.w	#$FF80,d1
0001E6CA 9041                       		sub.w	d1,d0
0001E6CC 6B00 FFD4                  		bmi.w	Obj7A_Delete
0001E6D0 0C40 0280                  		cmpi.w	#$280,d0
0001E6D4 6200 FFCC                  		bhi.w	Obj7A_Delete
0001E6D8 4EF9 0001 045A             		jmp	DisplaySprite
0001E6DE                            ; ===========================================================================
0001E6DE 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001E6E0 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001E6E2 0000                       		dc.w loc_18DC6-Obj7B_Index
0001E6E4 0000                       		dc.w loc_18EAA-Obj7B_Index
0001E6E6 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001E6E8 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001E6EA                            ; ===========================================================================
0001E6EA                            
0001E6EA                            Obj7B_Main:				; XREF: Obj7B_Index
0001E6EA 217C 0001 4B10 0004        		move.l	#Map_obj5Ea,4(a0)
0001E6F2 317C 0518 0002             		move.w	#$518,2(a0)
0001E6F8 117C 0001 001A             		move.b	#1,$1A(a0)
0001E6FE 0028 0004 0001             		ori.b	#4,1(a0)
0001E704 117C 0004 0018             		move.b	#4,$18(a0)
0001E70A 117C 008B 0020             		move.b	#$8B,$20(a0)
0001E710 117C 000C 0019             		move.b	#$C,$19(a0)
0001E716 2268 003C                  		movea.l	$3C(a0),a1
0001E71A 3169 0008 0030             		move.w	8(a1),$30(a0)
0001E720 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001E726 08E8 0000 0022             		bset	#0,$22(a0)
0001E72C 3028 0008                  		move.w	8(a0),d0
0001E730 B069 0008                  		cmp.w	8(a1),d0
0001E734 6E00                       		bgt.s	loc_18D68
0001E736 08A8 0000 0022             		bclr	#0,$22(a0)
0001E73C 117C 0002 003A             		move.b	#2,$3A(a0)
0001E742                            
0001E742                            loc_18D68:
0001E742 5428 0024                  		addq.b	#2,$24(a0)
0001E746                            
0001E746                            Obj7B_Fall:				; XREF: Obj7B_Index
0001E746 4EB9 0001 0408             		jsr	ObjectFall
0001E74C                                            ;move.w	#$20,$28(a0)
0001E74C 6100 9D5A                                  bsr.w	ObjHitFloor
0001E750 4A41                       		tst.w	d1		; has it hit the floor?
0001E752 6700 0000                  		beq.w   Obj7B_Explode
0001E756 45F9 0000 0000             		lea	(word_19018).l,a2
0001E75C 7000                       		moveq	#0,d0
0001E75E 1029 001A                  		move.b	$1A(a1),d0
0001E762 3228 0008                  		move.w	8(a0),d1
0001E766 9268 0030                  		sub.w	$30(a0),d1
0001E76A 6400                       		bcc.s	loc_18D8E
0001E76C 5440                       		addq.w	#2,d0
0001E76E                            
0001E76E                            loc_18D8E:
0001E76E D040                       		add.w	d0,d0
0001E770 3228 0034                  		move.w	$34(a0),d1
0001E774 D272 0000                  		add.w	(a2,d0.w),d1
0001E778 B268 000C                  		cmp.w	$C(a0),d1
0001E77C 6E00                       		bgt.s	locret_18DC4
0001E77E 2268 003C                  		movea.l	$3C(a0),a1
0001E782 7202                       		moveq	#2,d1
0001E784 0828 0000 0022             		btst	#0,$22(a0)
0001E78A 6700                       		beq.s	loc_18DAE
0001E78C 7200                       		moveq	#0,d1
0001E78E                            
0001E78E                            loc_18DAE:
0001E78E 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001E794 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001E79A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001E7A0                            		;bra.w	loc_18FA2
0001E7A0 6000 0000                                  bra.w   Obj7B_Explode
0001E7A4                            ; ===========================================================================
0001E7A4                            
0001E7A4                            locret_18DC4:
0001E7A4 4E75                       		rts	
0001E7A6                            ; ===========================================================================
0001E7A6                            
0001E7A6                            loc_18DC6:				; XREF: Obj7B_Index
0001E7A6 2268 003C                  		movea.l	$3C(a0),a1
0001E7AA 7000                       		moveq	#0,d0
0001E7AC 1028 003A                  		move.b	$3A(a0),d0
0001E7B0 9029 003A                  		sub.b	$3A(a1),d0
0001E7B4 6700                       		beq.s	loc_18E2A
0001E7B6 6400                       		bcc.s	loc_18DDA
0001E7B8 4400                       		neg.b	d0
0001E7BA                            
0001E7BA                            loc_18DDA:
0001E7BA 323C F7E8                  		move.w	#-$818,d1
0001E7BE 343C FEEC                  		move.w	#-$114,d2
0001E7C2 0C00 0001                  		cmpi.b	#1,d0
0001E7C6 6700                       		beq.s	loc_18E00
0001E7C8 323C F6A0                  		move.w	#-$960,d1
0001E7CC 343C FF0C                  		move.w	#-$F4,d2
0001E7D0 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001E7D6 6D00                       		blt.s	loc_18E00
0001E7D8 323C F5E0                  		move.w	#-$A20,d1
0001E7DC 343C FF80                  		move.w	#-$80,d2
0001E7E0                            
0001E7E0                            loc_18E00:
0001E7E0 3141 0012                  		move.w	d1,$12(a0)
0001E7E4 3142 0010                  		move.w	d2,$10(a0)
0001E7E8 3028 0008                  		move.w	8(a0),d0
0001E7EC 9068 0030                  		sub.w	$30(a0),d0
0001E7F0 6400                       		bcc.s	loc_18E16
0001E7F2 4468 0010                  		neg.w	$10(a0)
0001E7F6                            
0001E7F6                            loc_18E16:
0001E7F6 117C 0001 001A             		move.b	#1,$1A(a0)
0001E7FC 317C 0020 0028             		move.w	#$20,$28(a0)
0001E802 5428 0024                  		addq.b	#2,$24(a0)
0001E806 6000 0000                  		bra.w	loc_18EAA
0001E80A                            ; ===========================================================================
0001E80A                            
0001E80A                            loc_18E2A:				; XREF: loc_18DC6
0001E80A 45F9 0000 0000             		lea	(word_19018).l,a2
0001E810 7000                       		moveq	#0,d0
0001E812 1029 001A                  		move.b	$1A(a1),d0
0001E816 343C 0028                  		move.w	#$28,d2
0001E81A 3228 0008                  		move.w	8(a0),d1
0001E81E 9268 0030                  		sub.w	$30(a0),d1
0001E822 6400                       		bcc.s	loc_18E48
0001E824 4442                       		neg.w	d2
0001E826 5440                       		addq.w	#2,d0
0001E828                            
0001E828                            loc_18E48:
0001E828 D040                       		add.w	d0,d0
0001E82A 3228 0034                  		move.w	$34(a0),d1
0001E82E D272 0000                  		add.w	(a2,d0.w),d1
0001E832 3141 000C                  		move.w	d1,$C(a0)
0001E836 D468 0030                  		add.w	$30(a0),d2
0001E83A 3142 0008                  		move.w	d2,8(a0)
0001E83E 4268 000E                  		clr.w	$E(a0)
0001E842 4268 000A                  		clr.w	$A(a0)
0001E846 5368 0028                  		subq.w	#1,$28(a0)
0001E84A 6600                       		bne.s	loc_18E7A
0001E84C 317C 0020 0028             		move.w	#$20,$28(a0)
0001E852 117C 0008 0024             		move.b	#8,$24(a0)
0001E858 4E75                       		rts	
0001E85A                            ; ===========================================================================
0001E85A                            
0001E85A                            loc_18E7A:
0001E85A 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001E860 6600                       		bne.s	loc_18E88
0001E862 117C 0005 001F             		move.b	#5,$1F(a0)
0001E868                            
0001E868                            loc_18E88:
0001E868 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001E86E 6600                       		bne.s	loc_18E96
0001E870 117C 0002 001F             		move.b	#2,$1F(a0)
0001E876                            
0001E876                            loc_18E96:
0001E876 5328 001E                  		subq.b	#1,$1E(a0)
0001E87A 6E00                       		bgt.s	locret_18EA8
0001E87C 0868 0000 001A             		bchg	#0,$1A(a0)
0001E882 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001E888                            
0001E888                            locret_18EA8:
0001E888 4E75                       		rts	
0001E88A                            ; ===========================================================================
0001E88A                            
0001E88A                            loc_18EAA:				; XREF: Obj7B_Index
0001E88A 43F8 D040                  		lea	($FFFFD040).w,a1
0001E88E 707A                       		moveq	#$7A,d0
0001E890 7240                       		moveq	#$40,d1
0001E892 743E                       		moveq	#$3E,d2
0001E894                            
0001E894                            loc_18EB4:
0001E894 B011                       		cmp.b	(a1),d0
0001E896 6700                       		beq.s	loc_18EC0
0001E898 D2C1                       		adda.w	d1,a1
0001E89A 51CA FFF8                  		dbf	d2,loc_18EB4
0001E89E                            
0001E89E 6000                       		bra.s	loc_18F38
0001E8A0                            ; ===========================================================================
0001E8A0                            
0001E8A0                            loc_18EC0:
0001E8A0 3029 0008                  		move.w	8(a1),d0
0001E8A4 3229 000C                  		move.w	$C(a1),d1
0001E8A8 3428 0008                  		move.w	8(a0),d2
0001E8AC 3628 000C                  		move.w	$C(a0),d3
0001E8B0 45FA 0000                  		lea	byte_19022(pc),a2
0001E8B4 47FA 0000                  		lea	byte_19026(pc),a3
0001E8B8 181A                       		move.b	(a2)+,d4
0001E8BA 4884                       		ext.w	d4
0001E8BC D044                       		add.w	d4,d0
0001E8BE 181B                       		move.b	(a3)+,d4
0001E8C0 4884                       		ext.w	d4
0001E8C2 D444                       		add.w	d4,d2
0001E8C4 B440                       		cmp.w	d0,d2
0001E8C6 6500                       		bcs.s	loc_18F38
0001E8C8 181A                       		move.b	(a2)+,d4
0001E8CA 4884                       		ext.w	d4
0001E8CC D044                       		add.w	d4,d0
0001E8CE 181B                       		move.b	(a3)+,d4
0001E8D0 4884                       		ext.w	d4
0001E8D2 D444                       		add.w	d4,d2
0001E8D4 B042                       		cmp.w	d2,d0
0001E8D6 6500                       		bcs.s	loc_18F38
0001E8D8 181A                       		move.b	(a2)+,d4
0001E8DA 4884                       		ext.w	d4
0001E8DC D244                       		add.w	d4,d1
0001E8DE 181B                       		move.b	(a3)+,d4
0001E8E0 4884                       		ext.w	d4
0001E8E2 D644                       		add.w	d4,d3
0001E8E4 B641                       		cmp.w	d1,d3
0001E8E6 6500                       		bcs.s	loc_18F38
0001E8E8 181A                       		move.b	(a2)+,d4
0001E8EA 4884                       		ext.w	d4
0001E8EC D244                       		add.w	d4,d1
0001E8EE 181B                       		move.b	(a3)+,d4
0001E8F0 4884                       		ext.w	d4
0001E8F2 D644                       		add.w	d4,d3
0001E8F4 B243                       		cmp.w	d3,d1
0001E8F6 6500                       		bcs.s	loc_18F38
0001E8F8 5428 0024                  		addq.b	#2,$24(a0)
0001E8FC 4268 0028                  		clr.w	$28(a0)
0001E900 4229 0020                  		clr.b	$20(a1)
0001E904 5329 0021                  		subq.b	#1,$21(a1)
0001E908 6600                       		bne.s	loc_18F38
0001E90A 08E9 0007 0022             		bset	#7,$22(a1)
0001E910 4268 0010                  		clr.w	$10(a0)
0001E914 4268 0012                  		clr.w	$12(a0)
0001E918                            
0001E918                            loc_18F38:
0001E918 4A68 0012                  		tst.w	$12(a0)
0001E91C 6A00                       		bpl.s	loc_18F5C
0001E91E 4EB9 0001 0408             		jsr	ObjectFall
0001E924 3028 0034                  		move.w	$34(a0),d0
0001E928 0440 002F                  		subi.w	#$2F,d0
0001E92C B068 000C                  		cmp.w	$C(a0),d0
0001E930 6E00                       		bgt.s	loc_18F58
0001E932 4EB9 0001 0408             		jsr	ObjectFall
0001E938                            
0001E938                            loc_18F58:
0001E938 6000 FF20                  		bra.w	loc_18E7A
0001E93C                            ; ===========================================================================
0001E93C                            
0001E93C                            loc_18F5C:
0001E93C 4EB9 0001 0408             		jsr	ObjectFall
0001E942 2268 003C                  		movea.l	$3C(a0),a1
0001E946 45F9 0000 0000             		lea	(word_19018).l,a2
0001E94C 7000                       		moveq	#0,d0
0001E94E 1029 001A                  		move.b	$1A(a1),d0
0001E952 3228 0008                  		move.w	8(a0),d1
0001E956 9268 0030                  		sub.w	$30(a0),d1
0001E95A 6400                       		bcc.s	loc_18F7E
0001E95C 5440                       		addq.w	#2,d0
0001E95E                            
0001E95E                            loc_18F7E:
0001E95E D040                       		add.w	d0,d0
0001E960 3228 0034                  		move.w	$34(a0),d1
0001E964 D272 0000                  		add.w	(a2,d0.w),d1
0001E968 B268 000C                  		cmp.w	$C(a0),d1
0001E96C 6ECA                       		bgt.s	loc_18F58
0001E96E 2268 003C                  		movea.l	$3C(a0),a1
0001E972 7202                       		moveq	#2,d1
0001E974 4A68 0010                  		tst.w	$10(a0)
0001E978 6B00                       		bmi.s	loc_18F9C
0001E97A 7200                       		moveq	#0,d1
0001E97C                            
0001E97C                            loc_18F9C:
0001E97C 317C 0000 0028             		move.w	#0,$28(a0)
0001E982                            
0001E982                            loc_18FA2:
0001E982 1341 003A                  		move.b	d1,$3A(a1)
0001E986 1141 003A                  		move.b	d1,$3A(a0)
0001E98A B229 001A                  		cmp.b	$1A(a1),d1
0001E98E 6700                       		beq.s	loc_19008
0001E990 08A9 0003 0022             		bclr	#3,$22(a1)
0001E996 6700                       		beq.s	loc_19008
0001E998 4229 0025                  		clr.b	$25(a1)
0001E99C 137C 0002 0024             		move.b	#2,$24(a1)
0001E9A2 45F8 D000                  		lea	($FFFFD000).w,a2
0001E9A6 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001E9AC 446A 0012                  		neg.w	$12(a2)
0001E9B0 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001E9B6 6600                       		bne.s	loc_18FDC
0001E9B8 E0EA 0012                  		asr	$12(a2)
0001E9BC                            
0001E9BC                            loc_18FDC:
0001E9BC 08EA 0001 0022             		bset	#1,$22(a2)
0001E9C2 08AA 0003 0022             		bclr	#3,$22(a2)
0001E9C8 422A 003C                  		clr.b	$3C(a2)
0001E9CC 2F08                       		move.l	a0,-(sp)
0001E9CE 41D2                       		lea	(a2),a0
0001E9D0 4EB9 0001 6788             		jsr	Obj01_ChkRoll
0001E9D6 205F                       		movea.l	(sp)+,a0
0001E9D8 157C 0002 0024             		move.b	#2,$24(a2)
0001E9DE 303C 00CC                  		move.w	#$CC,d0
0001E9E2 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001E9E8                            
0001E9E8                            loc_19008:
0001E9E8 4268 0010                  		clr.w	$10(a0)
0001E9EC 4268 0012                  		clr.w	$12(a0)
0001E9F0 5428 0024                  		addq.b	#2,$24(a0)
0001E9F4 6000 FE64                  		bra.w	loc_18E7A
0001E9F8                            ; ===========================================================================
0001E9F8 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001EA02                            		even
0001EA02 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001EA06                            		even
0001EA06 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001EA0A                            		even
0001EA0A                            ; ===========================================================================
0001EA0A                            
0001EA0A                            Obj7B_Explode:				; XREF: Obj7B_Index
0001EA0A 10BC 003F                  		move.b	#$3F,(a0)
0001EA0E 4228 0024                  		clr.b	$24(a0)
0001EA12 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001EA18 6100 0000                  		bsr.w	Obj7B_MakeFrag
0001EA1C 4E75                       		rts	
0001EA1E                            ; ===========================================================================
0001EA1E                            
0001EA1E                            Obj7B_MakeFrag:
0001EA1E 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001EA24 7203                       		moveq	#3,d1
0001EA26 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001EA2A                            
0001EA2A                            Obj7B_Loop:
0001EA2A 4EB9 0001 08E0             		jsr	SingleObjLoad
0001EA30 6600                       		bne.s	loc_1909A
0001EA32 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001EA36 137C 000A 0024             		move.b	#$A,$24(a1)
0001EA3C 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001EA44 137C 0003 0018             		move.b	#3,$18(a1)
0001EA4A 337C 0518 0002             		move.w	#$518,2(a1)
0001EA50 3368 0008 0008             		move.w	8(a0),8(a1)
0001EA56 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001EA5C 335A 0010                  		move.w	(a2)+,$10(a1)
0001EA60 335A 0012                  		move.w	(a2)+,$12(a1)
0001EA64 137C 0098 0020             		move.b	#$98,$20(a1)
0001EA6A 0029 0004 0001             		ori.b	#4,1(a1)
0001EA70 08E9 0007 0001             		bset	#7,1(a1)
0001EA76 137C 000C 0019             		move.b	#$C,$19(a1)
0001EA7C                            
0001EA7C                            loc_1909A:
0001EA7C 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001EA80                            
0001EA80 4E75                       		rts	
0001EA82                            ; ===========================================================================
0001EA82 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001EA86 FF60 FDC0                  		dc.w $FF60, $FDC0
0001EA8A 0100 FCC0                  		dc.w $100, $FCC0
0001EA8E 00A0 FDC0                  		dc.w $A0, $FDC0
0001EA92                            ; ===========================================================================
0001EA92                            
0001EA92                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001EA92 4EB9 0001 0434             		jsr	SpeedToPos
0001EA98 3168 0008 0030             		move.w	8(a0),$30(a0)
0001EA9E 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001EAA4 0668 0018 0012             		addi.w	#$18,$12(a0)
0001EAAA 7004                       		moveq	#4,d0
0001EAAC C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001EAB0 E448                       		lsr.w	#2,d0
0001EAB2 1140 001A                  		move.b	d0,$1A(a0)
0001EAB6 4A28 0001                  		tst.b	1(a0)
0001EABA 6A00 FBE6                  		bpl.w	Obj7A_Delete
0001EABE 4E75                       		rts	
0001EAC0                            ; ===========================================================================
0001EAC0                            ; ---------------------------------------------------------------------------
0001EAC0                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001EAC0                            ; ---------------------------------------------------------------------------
0001EAC0                            Map_obj7B:
0001EAC0                            	include "_maps\obj7B.asm"
0001EAC0                            ; ---------------------------------------------------------------------------
0001EAC0                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001EAC0                            ; ---------------------------------------------------------------------------
0001EAC0 0000                       		dc.w byte_190E2-Map_obj7B
0001EAC2 0000                       		dc.w byte_190E8-Map_obj7B
0001EAC4 01                         byte_190E2:	dc.b 1
0001EAC5 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001EACA 01                         byte_190E8:	dc.b 1
0001EACB FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001EAD0                            		even
0001EAD0                            		even
0001EAD0                            
0001EAD0                            ; ===========================================================================
0001EAD0                            ; ---------------------------------------------------------------------------
0001EAD0                            ; Object 75 - Eggrobo (SYZ)
0001EAD0                            ; ---------------------------------------------------------------------------
0001EAD0                            
0001EAD0                            Obj75:					; XREF: Obj_Index
0001EAD0 7000                       		moveq	#0,d0
0001EAD2 1028 0024                  		move.b	$24(a0),d0
0001EAD6 323B 0000                  		move.w	ObjE5_Index(pc,d0.w),d1
0001EADA 4EFB 1000                  		jmp	ObjE5_Index(pc,d1.w)
0001EADE                            ; ===========================================================================
0001EADE 0000                       ObjE5_Index:	dc.w ObjE5_Main-ObjE5_Index
0001EAE0 0000                       		dc.w ObjE5_ShipMain-ObjE5_Index	 ; for ship object
0001EAE2 0000                       		dc.w ObjE5_FaceMain-ObjE5_Index  ; for face object
0001EAE4 0000                       		dc.w ObjE5_FlameMain-ObjE5_Index ; for flame object
0001EAE6                            
0001EAE6                            		; routine counter, animation:
0001EAE6                            ObjE5_ObjData:
0001EAE6 0200                       		dc.b 2,	0
0001EAE8 0401                       		dc.b 4,	1
0001EAEA 0607                       		dc.b 6,	7
0001EAEC                            ; ===========================================================================
0001EAEC                            
0001EAEC                            ObjE5_Main:				; XREF: Obj3D_Index
0001EAEC 45F9 0001 EAE6             		lea	(ObjE5_ObjData).l,a2
0001EAF2 2248                       		movea.l	a0,a1
0001EAF4 7202                       		moveq	#2,d1
0001EAF6 6000                       		bra.s	ObjE5_LoadBoss	; boss consists of 3 objects
0001EAF8                            ; ===========================================================================
0001EAF8                            
0001EAF8                            ObjE5_Loop:
0001EAF8 4EB9 0001 08F6             		jsr	SingleObjLoad2
0001EAFE 6600                       		bne.s	ObjE5_LoadShip
0001EB00                            
0001EB00                            ObjE5_LoadBoss:				; XREF: Obj3D_Main
0001EB00 135A 0024                  		move.b	(a2)+,$24(a1)	; set routine number
0001EB04 12BC 0075                  		move.b	#$75,0(a1)	; set obj to $3D
0001EB08 3368 0008 0008             		move.w	8(a0),8(a1)	; copy X
0001EB0E 3368 000C 000C             		move.w	$C(a0),$C(a1)	; copy Y
0001EB14 237C 0001 B4AE 0004        		move.l	#Map_Eggman,4(a1)
0001EB1C 337C 0400 0002             		move.w	#$400,2(a1)
0001EB22 137C 0004 0001             		move.b	#4,1(a1)
0001EB28 137C 0020 0019             		move.b	#$20,$19(a1)
0001EB2E 137C 0003 0018             		move.b	#3,$18(a1)
0001EB34 135A 001C                  		move.b	(a2)+,$1C(a1)	; set animation
0001EB38 2348 0034                  		move.l	a0,$34(a1)	; parent addr
0001EB3C 51C9 FFBA                  		dbf	d1,ObjE5_Loop	; repeat sequence 2 more times
0001EB40                            
0001EB40                            ;loc_17772:
0001EB40                            ObjE5_LoadShip:
0001EB40 3168 0008 0030             		move.w	8(a0),$30(a0)	; copy X-pos to secondary X-pos
0001EB46 3168 000C 0038             		move.w	$C(a0),$38(a0)	; copy Y-pos to secondary Y-pos
0001EB4C 117C 000F 0020             		move.b	#$F,$20(a0)	; set touch response
0001EB52 117C 0014 0021             		move.b  #var_BHits_SYZ,$21(a0)
0001EB58 4EB9 0000 0000                             jsr (BossStarLight_Ballhog_RobotnikHud).l
0001EB5E                            
0001EB5E                            ObjE5_ShipMain:				; XREF: Obj3D_Index
0001EB5E 7000                       		moveq	#0,d0
0001EB60 1028 0025                  		move.b	$25(a0),d0
0001EB64 323B 0000                  		move.w	ObjE5_ShipIndex(pc,d0.w),d1
0001EB68 4EBB 1000                  		jsr	ObjE5_ShipIndex(pc,d1.w)
0001EB6C 43F9 0001 B36E             		lea	(Ani_Eggman).l,a1
0001EB72 4EB9 0000 D3EA             		jsr	AnimateSprite
0001EB78 1028 0022                  		move.b	$22(a0),d0
0001EB7C 0200 0003                  		andi.b	#3,d0
0001EB80 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001EB86 8128 0001                  		or.b	d0,1(a0)
0001EB8A 4EF9 0001 045A             		jmp	DisplaySprite
0001EB90                            ; ===========================================================================
0001EB90 0000                       ObjE5_ShipIndex:dc.w ObjE5_ShipStart-ObjE5_ShipIndex	; 0
0001EB92 0000                       		dc.w ObjE5_MakeBall-ObjE5_ShipIndex	; 2
0001EB94 0000                       		dc.w ObjE5_ShipMove-ObjE5_ShipIndex	; 4
0001EB96 0000                       		dc.w ObjE5_ShipMove2-ObjE5_ShipIndex	; 6
0001EB98 0000                       		dc.w ObjE5_Explode-ObjE5_ShipIndex	; 8
0001EB9A 0000                       		dc.w ObjE5_ShipFall-ObjE5_ShipIndex	; $A
0001EB9C 0000                       		dc.w ObjE5_RunAway-ObjE5_ShipIndex	; $C
0001EB9E                            ; ===========================================================================
0001EB9E                            
0001EB9E                            ObjE5_ShipStart:			; XREF: Obj3D_ShipIndex
0001EB9E 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
0001EBA4 6100 C5D0                  		bsr.w	BossMove
0001EBA8 0C68 0500 0038             		cmpi.w	#$500,$38(a0)	; has the ship reached $338 on Y-axis?
0001EBAE 6600                       		bne.s	ObjE5_ShipProcess ; if not, branch
0001EBB0 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
0001EBB6 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
0001EBBA                            
0001EBBA                            
0001EBBA                            ; This routine does the main ship stuff
0001EBBA                            
0001EBBA                            ObjE5_ShipProcess:
0001EBBA                            		; Move ship slightly up and down during the flight
0001EBBA 1028 003F                  		move.b	$3F(a0),d0	; Y-amplitude
0001EBBE 4EB9 0000 2CC8             		jsr	(CalcSine).l
0001EBC4 EC40                       		asr.w	#6,d0		; d0 contains sine
0001EBC6 D068 0038                  		add.w	$38(a0),d0	; add secondary Y-pos to d0
0001EBCA 3140 000C                  		move.w	d0,$C(a0)	; and we've got Y-pos with the amplitude
0001EBCE 3168 0030 0008             		move.w	$30(a0),8(a0)
0001EBD4 5428 003F                  		addq.b	#2,$3F(a0)	; reduce the amplitude
0001EBD8                            
0001EBD8                            		; Touch repsonse stuff
0001EBD8 0C28 0008 0025             		cmpi.b	#8,$25(a0)	; is routine more or equals to 8?
0001EBDE 6400                       		bcc.s	locret_192561	; if yes, branch
0001EBE0 4A28 0022                  		tst.b	$22(a0)		; was boss defeated?
0001EBE4 6B00                       		bmi.s	ObjE5_ShipGone	; if yes, branch
0001EBE6 4A28 0020                  		tst.b	$20(a0)		; is touch response zero?
0001EBEA 6600                       		bne.s	locret_192561	; if not, branch
0001EBEC 4A28 003E                  		tst.b	$3E(a0)		; is flashes counter zero?
0001EBF0 6600                       		bne.s	ObjE5_ShipFlash	; if not, branch
0001EBF2 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times to flash
0001EBF8 303C 00AC                  		move.w	#$AC,d0
0001EBFC 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001EC02                            
0001EC02                            ObjE5_ShipFlash:
0001EC02 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001EC06 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001EC08 4A51                       		tst.w	(a1)		; is colour in pallete black?
0001EC0A 6600                       		bne.s	loc_192481	; if not, branch
0001EC0C 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
0001EC10                            
0001EC10                            loc_192481:
0001EC10 3280                       		move.w	d0,(a1)		; apply colour stored in d0
0001EC12 5328 003E                  		subq.b	#1,$3E(a0)	; subtract 1 from flashes counter
0001EC16 6600                       		bne.s	locret_192561	; if flashes counter is not zero, branch
0001EC18 117C 000F 0020             		move.b	#$F,$20(a0)	; restore touch responsibility
0001EC1E                            
0001EC1E                            locret_192561:
0001EC1E 4E75                       		rts
0001EC20                            ; ===========================================================================
0001EC20                            ;loc_1784C:
0001EC20                            ObjE5_ShipGone:				; XREF: Obj3D_ShipProcess
0001EC20 7064                       		moveq	#100,d0
0001EC22 6100 0000                  		bsr.w	AddPoints	; add 1000 points
0001EC26 117C 0008 0025             		move.b	#8,$25(a0)	; set routine to 8 (Obj3D_Explode)
0001EC2C 317C 00B3 003C             		move.w	#179,$3C(a0)	; set timer to 179 (3 seconds)
0001EC32 4E75                       		rts
0001EC34                            
0001EC34                            ; ===========================================================================
0001EC34                            
0001EC34                            ObjE5_MakeBall:				; XREF: Obj3D_ShipIndex
0001EC34 317C FE00 0010             		move.w	#-$200,$10(a0)	; move left
0001EC3A 317C FFC0 0012             		move.w	#-$40,$12(a0)	; move slightly up
0001EC40 6100 C534                  		bsr.w	BossMove
0001EC44 0C68 2CA0 0030             		cmpi.w	#$2CA0,$30(a0)	; has the boss reached $2A00 on X-axis?
0001EC4A 6600                       		bne.s	loc_Obj75Fucking	; if not, branch
0001EC4C 317C 0000 0010             		move.w	#0,$10(a0)	; stop him
0001EC52 317C 0000 0012             		move.w	#0,$12(a0)	;
0001EC58 5428 0025                  		addq.b	#2,$25(a0)      ; goto next routine
0001EC5C 2348 0034                  		move.l	a0,$34(a1)
0001EC60 317C 0030 003C                        	move.w	#$30,$3C(a0)	; set timer 
0001EC66                            
0001EC66                            loc_Obj75Fucking:
0001EC66 6000 FF52                  		bra.w	ObjE5_ShipProcess
0001EC6A                            ; ===========================================================================
0001EC6A                            
0001EC6A                            ObjE5_ShipMove:				; XREF: Obj3D_ShipIndex
0001EC6A 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from timer
0001EC6E 6A00                       		bpl.s	ObjE5_Reverse	; if time remains, branch
0001EC70 5428 0025                  		addq.b	#2,$25(a0)
0001EC74 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001EC7A 317C 0400 0010             		move.w	#$400,$10(a0)	; move the ship	sideways
0001EC80 0C68 2CA0 0030             		cmpi.w	#$2CA0,$30(a0)	; has the boss reached $2A00 on X-axis?
0001EC86 6600                       		bne.s	ObjE5_Reverse	; if not, branch
0001EC88 317C 0200 0010                             move.w	#$200,$10(a0)
0001EC8E 117C 0030 0033                        	move.b	#$30,$33(a0)	; set timer 
0001EC94                            
0001EC94                            ObjE5_Reverse:
0001EC94 0828 0000 0022             		btst	#0,$22(a0)	; is ship facing right?
0001EC9A 6600                       		bne.s	loc_17000000950	; if yes, branch
0001EC9C 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
0001ECA0                            
0001ECA0                            loc_17000000950:
0001ECA0 6000 FF18                  		bra.w	ObjE5_ShipProcess
0001ECA4                            ; ===========================================================================
0001ECA4                            
0001ECA4                            ;loc_17954:
0001ECA4                            ObjE5_ShipMove2:			; XREF: Obj3D_ShipIndex
0001ECA4 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from timer
0001ECA8 6B00 0000                  		bmi.w	loc_17000000960	; if timer is over, branch
0001ECAC                            		;bra.w	ObjE5_SecondScheme2
0001ECAC                            
0001ECAC                            ;ObjE5_SecondScheme:
0001ECAC                             ;               cmpi.b  #10,$21(a0)
0001ECAC                              ;              bcc.w   ObjE5_PolniVpered ; ignore this code if boss has more than 10 hp
0001ECAC                               ;             subq.b	#1,$33(a0)	; subtract 1 from timer
0001ECAC                            	;	bpl.w	ObjE5_PolniVpered	; if time remains, branch
0001ECAC                                    ;        move.b  #$30,$33(a0)
0001ECAC                                    ;        jsr	SingleObjLoad
0001ECAC                            	;	bne.s	ObjE5_SecondScheme2
0001ECAC                            	;	move.b	#$76,0(a1)	; load missile object
0001ECAC                            	;	move.w	8(a0),8(a1)
0001ECAC                            	;	move.w	$C(a0),$C(a1)
0001ECAC                            	;	addi.w	#$1C,$C(a1)
0001ECAC                            	;	move.w	#$A5,d0
0001ECAC                            	;	jsr	(PlaySound_Special).l ;	play explosion sound
0001ECAC                                     ;       move.w	#-$400,$12(a1)
0001ECAC                                      ;      move.w	#0,$10(a1)
0001ECAC                            
0001ECAC                            ObjE5_SecondScheme2:
0001ECAC 0C28 000A 0021                             cmpi.b  #10,$21(a0)
0001ECB2 6400 0000                                  bcc.w   ObjE5_PolniVpered ; ignore this code if boss has more than 10 hp
0001ECB6 5328 0033                                  subq.b	#1,$33(a0)	; subtract 1 from timer
0001ECBA 6A00 0000                  		bpl.w	ObjE5_PolniVpered	; if time remains, branch
0001ECBE 117C 0030 0033                             move.b  #$30,$33(a0)
0001ECC4 4EB9 0001 08E0             		jsr	SingleObjLoad
0001ECCA 6600                       		bne.s	Obje5_SecondScheme3
0001ECCC 12BC 0076                  		move.b	#$76,0(a1)	; load missile object
0001ECD0 3368 0008 0008             		move.w	8(a0),8(a1)
0001ECD6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001ECDC 0669 001C 000C             		addi.w	#$1C,$C(a1)
0001ECE2 337C FEB0 0010             		move.w	#-$150,$10(a1)	
0001ECE8 337C 0300 0012                             move.w	#$300,$12(a1)
0001ECEE                            
0001ECEE                            ObjE5_SecondScheme3:
0001ECEE 4EB9 0001 08E0             		jsr	SingleObjLoad
0001ECF4 6600                       		bne.s	ObjE5_PolniVpered
0001ECF6 12BC 0076                  		move.b	#$76,0(a1)	; load missile object
0001ECFA 3368 0008 0008             		move.w	8(a0),8(a1)
0001ED00 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001ED06 0669 001C 000C             		addi.w	#$1C,$C(a1)
0001ED0C 337C 0150 0010             		move.w	#$150,$10(a1)	
0001ED12 337C 0300 0012                             move.w	#$300,$12(a1)
0001ED18                            
0001ED18                            ObjE5_PolniVpered:
0001ED18 6100 C45C                  		bsr.w	BossMove
0001ED1C 6000 0000                                  bra.w	loc_17976
0001ED20                            
0001ED20                            loc_17000000960:
0001ED20 0868 0000 0022             		bchg	#0,$22(a0)	; reverse direction of the ship
0001ED26 317C 003F 003C             		move.w	#$3F,$3C(a0)	; set timer to $3F
0001ED2C 5528 0025                  		subq.b	#2,$25(a0)	; switch to "Obj3D_ShipMove" routine
0001ED30 317C 0000 0010             		move.w	#0,$10(a0)	; stop the ship
0001ED36                            
0001ED36                            ObjE5_FireMissile:
0001ED36 0C28 000A 0021                             cmpi.b    #10,$21(a0)
0001ED3C 6D00 0000                                  blt.w     loc_17976
0001ED40 4EB9 0001 08E0             		jsr	SingleObjLoad
0001ED46 6600                       		bne.s	ObjE5_Missile2
0001ED48 12BC 0076                  		move.b	#$76,0(a1)	; load missile object
0001ED4C 3368 0008 0008             		move.w	8(a0),8(a1)
0001ED52 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001ED58 303C 00A5                  		move.w	#$A5,d0
0001ED5C 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play explosion sound
0001ED62 337C FEB0 0010             		move.w	#-$150,$10(a1)	; cannonball flies to the left
0001ED68 337C 0400 0012                             move.w	#$400,$12(a1)
0001ED6E 0828 0000 0022                             btst	#0,$22(a0)	; is Ball Hog facing right?
0001ED74 6700 0000                  		beq.w	ObjE5_Missile2	; if not, branch
0001ED78 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0001ED7C                            
0001ED7C                            ObjE5_Missile2:
0001ED7C 4EB9 0001 08E0             		jsr	SingleObjLoad
0001ED82 6600 0000                  		bne.w	loc_17976
0001ED86 12BC 0076                  		move.b	#$76,0(a1)	; load missile object
0001ED8A 3368 0008 0008             		move.w	8(a0),8(a1)
0001ED90 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001ED96 337C FD00 0010                             move.w	#-$300,$10(a1)
0001ED9C 337C 0300 0012                             move.w	#$300,$12(a1)
0001EDA2 0828 0000 0022                             btst	#0,$22(a0)	; is Ball Hog facing right?
0001EDA8 6700 0000                  		beq.w	loc_17976	; if not, branch
0001EDAC 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0001EDB0 6000                                       bra.s   loc_17976
0001EDB2                            
0001EDB2                            ObjE5_Missile3:
0001EDB2 4EB9 0001 08E0             		jsr	SingleObjLoad
0001EDB8 6600 0000                  		bne.w	loc_17976
0001EDBC 12BC 0076                  		move.b	#$76,0(a1)	; load missile object
0001EDC0 3368 0008 0008             		move.w	8(a0),8(a1)
0001EDC6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001EDCC 337C FFFF 0010             		move.w	#-1,$10(a1)	; cannonball flies to the right
0001EDD2 337C 0350 0012                             move.w	#$350,$12(a1)
0001EDD8 0828 0000 0022                             btst	#0,$22(a0)	; is Ball Hog facing right?
0001EDDE 6700 0000                  		beq.w	loc_17976	; if not, branch
0001EDE2 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0001EDE6 6000                                       bra.s   loc_17976
0001EDE8                            
0001EDE8                            ObjE5_ExtraMissile:
0001EDE8 4EB9 0001 08E0                             jsr	SingleObjLoad
0001EDEE 6600                       		bne.s	loc_17976
0001EDF0 12BC 0076                  		move.b	#$76,0(a1)	; load missile object
0001EDF4 3368 0008 0008             		move.w	8(a0),8(a1)
0001EDFA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001EE00 0669 001C 000C             		addi.w	#$1C,$C(a1)
0001EE06 303C 00A5                  		move.w	#$A5,d0
0001EE0A 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play explosion sound
0001EE10 337C 0400 0012                             move.w	#$400,$12(a1)
0001EE16                            
0001EE16                            loc_17976:
0001EE16 6000 FDA2                  		bra.w	ObjE5_ShipProcess
0001EE1A                            ; ===========================================================================
0001EE1A                            
0001EE1A                            ;loc_1797A:
0001EE1A                            ObjE5_Explode:				; XREF: Obj3D_ShipIndex
0001EE1A 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from timer
0001EE1E 6B00                       		bmi.s	loc_17984bantnei	; if timer is over, branch
0001EE20 6000 C312                  		bra.w	BossDefeated
0001EE24                            
0001EE24                            loc_17984bantnei:
0001EE24 08E8 0000 0022             		bset	#0,$22(a0)	; set orientation to 1 (right)
0001EE2A 08A8 0007 0022             		bclr	#7,$22(a0)	; clear defeated flag
0001EE30 4268 0010                  		clr.w	$10(a0)		; clear X-velocity
0001EE34 5428 0025                  		addq.b	#2,$25(a0)
0001EE38 317C FFDA 003C             		move.w	#-$26,$3C(a0)	; set timer to -$26
0001EE3E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001EE42 6600                       		bne.s	locret_179AAkumancei
0001EE44 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001EE4A                            
0001EE4A                            locret_179AAkumancei:
0001EE4A 4E75                       		rts
0001EE4C                            ; ===========================================================================
0001EE4C                            
0001EE4C                            ;loc_179AC:
0001EE4C                            ObjE5_ShipFall:				; XREF: Obj3D_ShipIndex
0001EE4C 5268 003C                  		addq.w	#1,$3C(a0)	; add 1 to timer
0001EE50 6700                       		beq.s	@StopFall	; if timer is zero, branch
0001EE52 6A00                       		bpl.s	ObjE5_ShipRise	; if timer is postive, branch
0001EE54 0668 0018 0012             		addi.w	#$18,$12(a0)	; add $18 to Y-velocity to make ship fall
0001EE5A 6000                       		bra.s	loc_179EE
0001EE5C                            
0001EE5C                            @StopFall:
0001EE5C 4268 0012                  		clr.w	$12(a0)		; clear Y-velocity
0001EE60 6000                       		bra.s	loc_179EE
0001EE62                            
0001EE62                            ObjE5_ShipRise:
0001EE62 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)	; is timer's value $30?
0001EE68 6500                       		bcs.s	@RiseShip	; if it's less than, branch
0001EE6A 6700                       		beq.s	@StopRise	; if it equals, branch
0001EE6C 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)	; is timer's value less than $38?
0001EE72 6500                       		bcs.s	loc_179EE	; if yes, branch
0001EE74 5428 0025                  		addq.b	#2,$25(a0)
0001EE78 6000                       		bra.s	loc_179EE
0001EE7A                            
0001EE7A                            @RiseShip:
0001EE7A 5168 0012                  		subq.w	#8,$12(a0)	; subtract 8 from Y-vel to make ship rise
0001EE7E 6000                       		bra.s	loc_179EE
0001EE80                            
0001EE80                            @StopRise:
0001EE80 4268 0012                  		clr.w	$12(a0)		; clear Y-velocity
0001EE84 303C 008F                  		move.w	#$8F,d0
0001EE88 4EB9 0000 12CA             		jsr	(PlaySound).l	; play SYZ music
0001EE8E 317C 0000 0014                             move.w  #$0,$14(a0)     ;clear all speeds
0001EE94 11FC 0001 F7CC                             move.b	#1,($FFFFF7CC).w	; lock	controls
0001EE9A 337C 0000 0014                             move.w	#0,$14(a1)	; stop Sonic moving
0001EEA0 31FC 0008 F602                             move.w	#(Right)<<0,(SonicControl) ; make Sonic stand
0001EEA6 11FC 0001 FFFE                             move.b	#1,($FFFFFFFE).w ;set win flag
0001EEAC 4EB9 0001 1D18                             jsr     GotThroughAct
0001EEB2                            
0001EEB2                            loc_179EE:
0001EEB2 6100 C2C2                  		bsr.w	BossMove
0001EEB6 6000 FD02                  		bra.w	ObjE5_ShipProcess
0001EEBA                            ; ===========================================================================
0001EEBA                            
0001EEBA                            ;loc_179F6:
0001EEBA                            ObjE5_RunAway:				; XREF: Obj3D_ShipIndex
0001EEBA 317C 0400 0010             		move.w	#$400,$10(a0)	; move ship right
0001EEC0 317C FFC0 0012             		move.w	#-$40,$12(a0)	; move ship slightly up
0001EEC6 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
0001EECC 6700                       		beq.s	loc_17A10
0001EECE                            		;addq.w	#2,($FFFFF72A).w ; add 2 to camera's right boundary
0001EECE 6000                       		bra.s	loc_17A16
0001EED0                            
0001EED0                            loc_17A10:
0001EED0 4A28 0001                  		tst.b	1(a0)		; is object out of screen?
0001EED4 6A00                       		bpl.s	ObjE5_ShipDel	; if yes, branch
0001EED6                            
0001EED6                            loc_17A16:
0001EED6 6100 C29E                  		bsr.w	BossMove
0001EEDA 6000 FCDE                  		bra.w	ObjE5_ShipProcess
0001EEDE                            
0001EEDE                            ObjE5_ShipDel:
0001EEDE 4EF9 0001 0496             		jmp	DeleteObject
0001EEE4                            
0001EEE4                            ; ===========================================================================
0001EEE4                            ; ===========================================================================
0001EEE4                            
0001EEE4                            ObjE5_FaceMain:				; XREF: Obj3D_Index
0001EEE4 7000                       		moveq	#0,d0
0001EEE6 7201                       		moveq	#1,d1
0001EEE8 2268 0034                  		movea.l	$34(a0),a1	; load parent obj
0001EEEC 1029 0025                  		move.b	$25(a1),d0	; get ship's secondary routine counter
0001EEF0 5900                       		subq.b	#4,d0
0001EEF2 6600                       		bne.s	loc_17A3E	; if it's more than 4, branch
0001EEF4 0C69 2CA0 0030             		cmpi.w	#$2CA0,$30(a1)	; is ship's X-position $2A00?
0001EEFA 6600                       		bne.s	loc_17A46	; if not, branch
0001EEFC 7204                       		moveq	#4,d1		; use laughing animation
0001EEFE                            
0001EEFE                            loc_17A3E:
0001EEFE 5D00                       		subq.b	#6,d0
0001EF00 6B00                       		bmi.s	loc_17A46
0001EF02 720A                       		moveq	#$A,d1
0001EF04 6000                       		bra.s	ObjE5_FaceApply
0001EF06                            
0001EF06                            loc_17A46:
0001EF06 4A29 0020                  		tst.b	$20(a1)		; has the ship been hurt?
0001EF0A 6600                       		bne.s	loc_17A50	; if not, branch
0001EF0C 7205                       		moveq	#5,d1		; use hurting animation
0001EF0E 6000                       		bra.s	ObjE5_FaceApply
0001EF10                            
0001EF10                            loc_17A50:
0001EF10 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w ; is Sonic hurt?
0001EF16 6500                       		bcs.s	ObjE5_FaceApply	 ; if not, branch
0001EF18 7204                       		moveq	#4,d1		 ; use laughing animation, haha!
0001EF1A                            
0001EF1A                            ;loc_17A5A:
0001EF1A                            ObjE5_FaceApply:
0001EF1A 1141 001C                  		move.b	d1,$1C(a0)	; apply face animation
0001EF1E 5500                       		subq.b	#2,d0
0001EF20 6600                       		bne.s	ObjE5_FaceDisp
0001EF22 117C 0006 001C             		move.b	#6,$1C(a0)	; correct animation
0001EF28 4A28 0001                  		tst.b	1(a0)		; is object on screen?
0001EF2C 6A00                       		bpl.s	ObjE5_FaceDel	; if not, branch
0001EF2E                            
0001EF2E                            ObjE5_FaceDisp:
0001EF2E 6000                       		bra.s	ObjE5_Display
0001EF30                            
0001EF30                            ObjE5_FaceDel:
0001EF30 4EF9 0001 0496             		jmp	DeleteObject
0001EF36                            
0001EF36                            ; ===========================================================================
0001EF36                            ; ===========================================================================
0001EF36                            
0001EF36                            ObjE5_FlameMain:			; XREF: Obj3D_Index
0001EF36 117C 0007 001C             		move.b	#7,$1C(a0)
0001EF3C 2268 0034                  		movea.l	$34(a0),a1	; load parent obj
0001EF40 0C29 000C 0025             		cmpi.b	#$C,$25(a1)	; is ship's secondary routine $C (Obj3D_RunAway)?
0001EF46 6600                       		bne.s	loc_17A96	; if not, branch
0001EF48 117C 000B 001C             		move.b	#$B,$1C(a0)
0001EF4E 4A28 0001                  		tst.b	1(a0)		; is object on screen?
0001EF52 6A00                       		bpl.s	ObjE5_FlameDel	; if not, branch
0001EF54 6000                       		bra.s	ObjE5_FlameDisp
0001EF56                            
0001EF56                            loc_17A96:
0001EF56 3029 0010                  		move.w	$10(a1),d0
0001EF5A 6700                       		beq.s	ObjE5_FlameDisp
0001EF5C 117C 0008 001C             		move.b	#8,$1C(a0)
0001EF62                            
0001EF62                            ObjE5_FlameDisp:
0001EF62 6000                       		bra.s	ObjE5_Display
0001EF64                            
0001EF64                            ObjE5_FlameDel:
0001EF64 4EF9 0001 0496             		jmp	DeleteObject
0001EF6A                            ; ===========================================================================
0001EF6A                            
0001EF6A                            ObjE5_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
0001EF6A 2268 0034                  		movea.l	$34(a0),a1
0001EF6E 3169 0008 0008             		move.w	8(a1),8(a0)
0001EF74 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001EF7A 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001EF80 43F9 0001 B36E             		lea	(Ani_Eggman).l,a1
0001EF86 4EB9 0000 D3EA             		jsr	AnimateSprite
0001EF8C 1028 0022                  		move.b	$22(a0),d0
0001EF90 0200 0003                  		andi.b	#3,d0
0001EF94 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001EF9A 8128 0001                  		or.b	d0,1(a0)
0001EF9E 4EF9 0001 045A             		jmp	DisplaySprite
0001EFA4                            ; ===========================================================================
0001EFA4                            ; ===========================================================================
0001EFA4                            ; ---------------------------------------------------------------------------
0001EFA4                            ; Object 76 - missile used by SYZ boss
0001EFA4                            ; ---------------------------------------------------------------------------
0001EFA4                            
0001EFA4                            Obj76:					; XREF: Obj_Index
0001EFA4 7000                       		moveq	#0,d0
0001EFA6 1028 0024                  		move.b	$24(a0),d0
0001EFAA 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001EFAE 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001EFB2                            ; ===========================================================================
0001EFB2 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001EFB4 0000                       		dc.w Obj76_OtherStuff-Obj76_Index
0001EFB6                            ; ===========================================================================
0001EFB6                            
0001EFB6                            Obj76_Main:				; XREF: Obj20_Index
0001EFB6 5428 0024                  		addq.b	#2,$24(a0)
0001EFBA 117C 0009 0016             		move.b	#9,$16(a0)
0001EFC0 217C 0000 0000 0004        		move.l	#Map_obj76,4(a0)
0001EFC8 317C 4000 0002                             move.w  #$4000,2(a0)
0001EFCE 117C 0004 0001             		move.b	#4,1(a0)
0001EFD4 117C 0003 0018             		move.b	#3,$18(a0)
0001EFDA 117C 0087 0020             		move.b	#$87,$20(a0)
0001EFE0 117C 0008 0019             		move.b	#8,$19(a0)
0001EFE6 117C 0004 001A                             move.b	#4,$1A(a0)
0001EFEC 6000                                       bra.s   Obj76_Display
0001EFEE                            
0001EFEE                            Obj76_OtherStuff:				; XREF: Obj20_Index
0001EFEE 117C 0000 001C             		move.b  #0,$1C(a0)
0001EFF4 4A28 0001                                  tst.b	1(a0)
0001EFF8 6A00 0000                  		bpl.w	Obj76_Delete
0001EFFC                            		;bsr.w	loc_0o0
0001EFFC 4EB9 0001 0434                             jsr     SpeedToPos
0001F002 6100 94A4                  		bsr.w	ObjHitFloor
0001F006 4A41                       		tst.w	d1		; has object hit the floor
0001F008 6A00                       		bpl.s	Obj76_Display	; if not, branch
0001F00A 0C68 0000 0010             		cmpi.w	#0,$10(a0)
0001F010 6700                       		beq.s	Obj76_FuckingExplode
0001F012 6D00                       		blt.s 	Obj76_SetMinusSpeed
0001F014 317C 0400 0010             		move.w	#$400,$10(a0)
0001F01A 6000                       		bra.s	Obj76_StopFalling
0001F01C                            
0001F01C                            Obj76_SetMinusSpeed:
0001F01C 317C FC00 0010             		move.w	#-$400,$10(a0)
0001F022                            
0001F022                            Obj76_StopFalling:
0001F022 117C 0000 0012             		move.b	#0,$12(a0)
0001F028 6000 0000                  		bra.w	Obj76_Display
0001F02C                            
0001F02C                            Obj76_FuckingExplode:
0001F02C 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	(Obj3F)
0001F030 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0001F036 4EF9 0000 B978             		jmp	Obj3F		; jump to explosion code
0001F03C                            ; ===========================================================================
0001F03C                            
0001F03C                            Obj76_Display:
0001F03C 4EB9 0001 045A                             jsr     DisplaySprite
0001F042 43F9 0000 0000             		lea	(Ani_obj76).l,a1
0001F048 4EB9 0000 D3EA             		jsr	AnimateSprite
0001F04E 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001F052 0640 00E0                  		addi.w	#$E0,d0
0001F056 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0001F05A 6500 0000                  		bcs.w	Obj76_Delete	; if yes, branch
0001F05E 4E75                       		rts
0001F060                            
0001F060                            Obj76_Delete:
0001F060 4EF9 0001 0496             		jmp     DeleteObject
0001F066                            ; ---------------------------------------------------------------------------
0001F066                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001F066                            ; ---------------------------------------------------------------------------
0001F066                            Map_obj76:
0001F066                            	include "_maps\obj76.asm"
0001F066                            ; ---------------------------------------------------------------------------
0001F066                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001F066                            ; ---------------------------------------------------------------------------
0001F066 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001F06A 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001F06E 0000                       		dc.w byte_19826-Map_obj76
0001F070 02                         byte_19808:	dc.b 2
0001F071 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001F076 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001F07B 00                         		dc.b 0
0001F07C 01                         byte_19814:	dc.b 1
0001F07D F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001F082 01                         byte_1981A:	dc.b 1
0001F083 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001F088 01                         byte_19820:	dc.b 1
0001F089 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001F08E 01                         byte_19826:	dc.b 1
0001F08F F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001F094                            		even
0001F094                            		even
0001F094                            Ani_obj76:
0001F094                            	include "_anim\obj76.asm"
0001F094                            ; ---------------------------------------------------------------------------
0001F094                            ; Animation script - Missile used by SYZ boss
0001F094                            ; ---------------------------------------------------------------------------
0001F094 0000                       		dc.w byte_17CD4Brevno-Ani_Obj76
0001F096 0203 04FF 00               byte_17CD4Brevno:	dc.b 2, 3, 4, $FF, 0
0001F09C 00                         		even
0001F09C 00                         		even
0001F09C                            
0001F09C                            ; ===========================================================================
0001F09C                            
0001F09C                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001F09C 4EF9 0001 0496             		jmp	DeleteObject
0001F0A2                            ; ===========================================================================
0001F0A2                            ; ---------------------------------------------------------------------------
0001F0A2                            ; Object 82 - Eggman (SBZ2)
0001F0A2                            ; ---------------------------------------------------------------------------
0001F0A2                            
0001F0A2                            Obj82:					; XREF: Obj_Index
0001F0A2 7000                       		moveq	#0,d0
0001F0A4 1028 0024                  		move.b	$24(a0),d0
0001F0A8 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001F0AC 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001F0B0                            ; ===========================================================================
0001F0B0 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001F0B2 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001F0B4 0000                       		dc.w Obj82_Switch-Obj82_Index
0001F0B6                            
0001F0B6 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001F0B9 0400 03                    		dc.b 4,	0, 3
0001F0BC                            ; ===========================================================================
0001F0BC                            
0001F0BC                            Obj82_Main:				; XREF: Obj82_Index
0001F0BC 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001F0C0 317C 2160 0008             		move.w	#$2160,8(a0)
0001F0C6 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001F0CC 117C 000F 0020             		move.b	#$F,$20(a0)
0001F0D2 117C 0010 0021             		move.b	#$10,$21(a0)
0001F0D8 08A8 0000 0022             		bclr	#0,$22(a0)
0001F0DE 4228 0025                  		clr.b	$25(a0)
0001F0E2 115A 0024                  		move.b	(a2)+,$24(a0)
0001F0E6 115A 001C                  		move.b	(a2)+,$1C(a0)
0001F0EA 115A 0018                  		move.b	(a2)+,$18(a0)
0001F0EE 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001F0F6 317C 0400 0002             		move.w	#$400,2(a0)
0001F0FC 117C 0004 0001             		move.b	#4,1(a0)
0001F102 08E8 0007 0001             		bset	#7,1(a0)
0001F108 117C 0020 0019             		move.b	#$20,$19(a0)
0001F10E 4EB9 0001 08F6             		jsr	SingleObjLoad2
0001F114 6600                       		bne.s	Obj82_Eggman
0001F116 2348 0034                  		move.l	a0,$34(a1)
0001F11A 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001F11E 337C 2130 0008             		move.w	#$2130,8(a1)
0001F124 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001F12A 4228 0025                  		clr.b	$25(a0)
0001F12E 135A 0024                  		move.b	(a2)+,$24(a1)
0001F132 135A 001C                  		move.b	(a2)+,$1C(a1)
0001F136 135A 0018                  		move.b	(a2)+,$18(a1)
0001F13A 237C 0000 EC96 0004        		move.l	#Map_obj32,4(a1)
0001F142 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001F148 137C 0004 0001             		move.b	#4,1(a1)
0001F14E 08E9 0007 0001             		bset	#7,1(a1)
0001F154 137C 0010 0019             		move.b	#$10,$19(a1)
0001F15A 137C 0000 001A             		move.b	#0,$1A(a1)
0001F160                            
0001F160                            Obj82_Eggman:				; XREF: Obj82_Index
0001F160 7000                       		moveq	#0,d0
0001F162 1028 0025                  		move.b	$25(a0),d0
0001F166 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001F16A 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001F16E 43FA 0000                  		lea	Ani_obj82(pc),a1
0001F172 4EB9 0000 D3EA             		jsr	AnimateSprite
0001F178 4EF9 0001 045A             		jmp	DisplaySprite
0001F17E                            ; ===========================================================================
0001F17E 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001F180 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001F182 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001F184 0000                       		dc.w loc_19934-Obj82_EggIndex
0001F186                            ; ===========================================================================
0001F186                            
0001F186                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001F186 3028 0008                  		move.w	8(a0),d0
0001F18A 9078 D008                  		sub.w	($FFFFD008).w,d0
0001F18E 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001F192 6400                       		bcc.s	loc_19934	; if not, branch
0001F194 5428 0025                  		addq.b	#2,$25(a0)
0001F198 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001F19E 117C 0001 001C             		move.b	#1,$1C(a0)
0001F1A4                            
0001F1A4                            loc_19934:				; XREF: Obj82_EggIndex
0001F1A4 4EF9 0001 0434             		jmp	SpeedToPos
0001F1AA                            ; ===========================================================================
0001F1AA                            
0001F1AA                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001F1AA 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001F1AE 6600                       		bne.s	loc_19954	; if time remains, branch
0001F1B0 5428 0025                  		addq.b	#2,$25(a0)
0001F1B4 117C 0002 001C             		move.b	#2,$1C(a0)
0001F1BA 5868 000C                  		addq.w	#4,$C(a0)
0001F1BE 317C 000F 003C             		move.w	#15,$3C(a0)
0001F1C4                            
0001F1C4                            loc_19954:
0001F1C4 60DE                       		bra.s	loc_19934
0001F1C6                            ; ===========================================================================
0001F1C6                            
0001F1C6                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001F1C6 5368 003C                  		subq.w	#1,$3C(a0)
0001F1CA 6E00                       		bgt.s	loc_199D0
0001F1CC 6600                       		bne.s	loc_1996A
0001F1CE 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001F1D4 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001F1DA                            
0001F1DA                            loc_1996A:
0001F1DA 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001F1E0 6E00                       		bgt.s	loc_19976
0001F1E2 4268 0010                  		clr.w	$10(a0)
0001F1E6                            
0001F1E6                            loc_19976:
0001F1E6 0668 0024 0012             		addi.w	#$24,$12(a0)
0001F1EC 4A68 0012                  		tst.w	$12(a0)
0001F1F0 6B00                       		bmi.s	Obj82_FindBlocks
0001F1F2 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001F1F8 6500                       		bcs.s	Obj82_FindBlocks
0001F1FA 317C 5357 0028             		move.w	#$5357,$28(a0)
0001F200 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001F206 6500                       		bcs.s	Obj82_FindBlocks
0001F208 317C 059B 000C             		move.w	#$59B,$C(a0)
0001F20E 4268 0012                  		clr.w	$12(a0)
0001F212                            
0001F212                            Obj82_FindBlocks:
0001F212 3028 0010                  		move.w	$10(a0),d0
0001F216 8068 0012                  		or.w	$12(a0),d0
0001F21A 6600                       		bne.s	loc_199D0
0001F21C 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001F220 703E                       		moveq	#$3E,d0
0001F222 7240                       		moveq	#$40,d1
0001F224                            
0001F224                            Obj82_FindLoop:	
0001F224 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001F226 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001F22A 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001F22E                            
0001F22E 6600                       		bne.s	loc_199D0
0001F230 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001F236 5428 0025                  		addq.b	#2,$25(a0)
0001F23A 117C 0001 001C             		move.b	#1,$1C(a0)
0001F240                            
0001F240                            loc_199D0:
0001F240 6000 FF62                  		bra.w	loc_19934
0001F244                            ; ===========================================================================
0001F244                            
0001F244                            Obj82_Switch:				; XREF: Obj82_Index
0001F244 7000                       		moveq	#0,d0
0001F246 1028 0025                  		move.b	$25(a0),d0
0001F24A 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001F24E 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001F252                            ; ===========================================================================
0001F252 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001F254 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001F256                            ; ===========================================================================
0001F256                            
0001F256                            loc_199E6:				; XREF: Obj82_SwIndex
0001F256 2268 0034                  		movea.l	$34(a0),a1
0001F25A 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001F260 6600                       		bne.s	Obj82_SwDisplay
0001F262 117C 0001 001A             		move.b	#1,$1A(a0)
0001F268 5428 0025                  		addq.b	#2,$25(a0)
0001F26C                            
0001F26C                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001F26C 4EF9 0001 045A             		jmp	DisplaySprite
0001F272                            ; ===========================================================================
0001F272                            Ani_obj82:
0001F272                            	include "_anim\obj82.asm"
0001F272                            ; ---------------------------------------------------------------------------
0001F272                            ; Animation script - Eggman (SBZ2)
0001F272                            ; ---------------------------------------------------------------------------
0001F272 0000                       		dc.w byte_19A10-Ani_obj82
0001F274 0000                       		dc.w byte_19A14-Ani_obj82
0001F276 0000                       		dc.w byte_19A18-Ani_obj82
0001F278 0000                       		dc.w byte_19A20-Ani_obj82
0001F27A 0000                       		dc.w byte_19A24-Ani_obj82
0001F27C 0000                       		dc.w byte_19A2A-Ani_obj82
0001F27E 0000                       		dc.w byte_19A30-Ani_obj82
0001F280 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001F284 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001F288 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001F290 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001F294 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001F29A 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001F2A0 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001F2A4                            		even
0001F2A4                            		even
0001F2A4                            
0001F2A4                            ; ---------------------------------------------------------------------------
0001F2A4                            ; Sprite mappings - Eggman (SBZ2)
0001F2A4                            ; ---------------------------------------------------------------------------
0001F2A4                            Map_obj82:
0001F2A4                            	include "_maps\obj82.asm"
0001F2A4                            ; ---------------------------------------------------------------------------
0001F2A4                            ; Sprite mappings - Eggman (SBZ2)
0001F2A4                            ; ---------------------------------------------------------------------------
0001F2A4 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0001F2A8 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
0001F2AC 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
0001F2B0 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001F2B4 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0001F2B8 0000                       		dc.w byte_19B4F-Map_obj82
0001F2BA 03                         byte_19A4A:	dc.b 3
0001F2BB FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001F2C0 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001F2C5 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001F2CA 04                         byte_19A5A:	dc.b 4
0001F2CB E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001F2D0 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001F2D5 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001F2DA FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001F2DF 00                         		dc.b 0
0001F2E0 04                         byte_19A70:	dc.b 4
0001F2E1 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001F2E6 E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001F2EB 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001F2F0 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001F2F5 00                         		dc.b 0
0001F2F6 04                         byte_19A86:	dc.b 4
0001F2F7 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001F2FC F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001F301 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001F306 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001F30B 00                         		dc.b 0
0001F30C 04                         byte_19A9C:	dc.b 4
0001F30D F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001F312 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001F317 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001F31C E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001F321 00                         		dc.b 0
0001F322 04                         byte_19AB2:	dc.b 4
0001F323 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001F328 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001F32D E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001F332 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001F337 00                         		dc.b 0
0001F338 07                         byte_19AC8:	dc.b 7
0001F339 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001F33E E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001F343 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001F348 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001F34D F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001F352 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001F357 F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001F35C 05                         byte_19AEC:	dc.b 5
0001F35D F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001F362 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001F367 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001F36C 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001F371 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001F376 06                         byte_19B06:	dc.b 6
0001F377 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001F37C EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001F381 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001F386 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001F38B 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001F390 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001F395 00                         		dc.b 0
0001F396 08                         byte_19B26:	dc.b 8
0001F397 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001F39C E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001F3A1 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001F3A6 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001F3AB E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001F3B0 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001F3B5 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001F3BA 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001F3BF 03                         byte_19B4F:	dc.b 3
0001F3C0 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
0001F3C5 F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001F3CA EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001F3D0 00                         		even
0001F3D0 00                         		even
0001F3D0                            
0001F3D0                            ; ===========================================================================
0001F3D0                            ; ---------------------------------------------------------------------------
0001F3D0                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001F3D0                            ; ---------------------------------------------------------------------------
0001F3D0                            
0001F3D0                            Obj83:					; XREF: Obj_Index
0001F3D0 7000                       		moveq	#0,d0
0001F3D2 1028 0024                  		move.b	$24(a0),d0
0001F3D6 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001F3DA 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001F3DE                            ; ===========================================================================
0001F3DE 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001F3E0 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001F3E2 0000                       		dc.w loc_19C36-Obj83_Index
0001F3E4 0000                       		dc.w loc_19C62-Obj83_Index
0001F3E6 0000                       		dc.w loc_19C72-Obj83_Index
0001F3E8 0000                       		dc.w loc_19C80-Obj83_Index
0001F3EA                            ; ===========================================================================
0001F3EA                            
0001F3EA                            Obj83_Main:				; XREF: Obj83_Index
0001F3EA 317C 2080 0008             		move.w	#$2080,8(a0)
0001F3F0 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001F3F6 117C 0080 0019             		move.b	#$80,$19(a0)
0001F3FC 117C 0010 0016             		move.b	#$10,$16(a0)
0001F402 117C 0004 0001             		move.b	#4,1(a0)
0001F408 08E8 0007 0001             		bset	#7,1(a0)
0001F40E 7800                       		moveq	#0,d4
0001F410 3A3C 2010                  		move.w	#$2010,d5
0001F414 7C07                       		moveq	#7,d6
0001F416 45E8 0030                  		lea	$30(a0),a2
0001F41A                            
0001F41A                            Obj83_MakeBlock:
0001F41A 4EB9 0001 08E0             		jsr	SingleObjLoad
0001F420 6600                       		bne.s	Obj83_ExitMake
0001F422 34C9                       		move.w	a1,(a2)+
0001F424 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001F428 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001F430 337C 4518 0002             		move.w	#$4518,2(a1)
0001F436 137C 0004 0001             		move.b	#4,1(a1)
0001F43C 137C 0010 0019             		move.b	#$10,$19(a1)
0001F442 137C 0010 0016             		move.b	#$10,$16(a1)
0001F448 137C 0003 0018             		move.b	#3,$18(a1)
0001F44E 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001F452 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001F458 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001F45C 137C 0008 0024             		move.b	#8,$24(a1)
0001F462 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001F466                            
0001F466                            Obj83_ExitMake:
0001F466 5428 0024                  		addq.b	#2,$24(a0)
0001F46A 4E75                       		rts	
0001F46C                            ; ===========================================================================
0001F46C                            
0001F46C                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001F46C 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001F472 6600                       		bne.s	Obj83_Solid	; if not, branch
0001F474 4228 001A                  		clr.b	$1A(a0)
0001F478 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001F47C                            
0001F47C                            Obj83_Solid:
0001F47C 7000                       		moveq	#0,d0
0001F47E 1028 001A                  		move.b	$1A(a0),d0
0001F482 4400                       		neg.b	d0
0001F484 4880                       		ext.w	d0
0001F486 5040                       		addq.w	#8,d0
0001F488 E940                       		asl.w	#4,d0
0001F48A 383C 2100                  		move.w	#$2100,d4
0001F48E 9840                       		sub.w	d0,d4
0001F490 1140 0019                  		move.b	d0,$19(a0)
0001F494 3144 0008                  		move.w	d4,8(a0)
0001F498 720B                       		moveq	#$B,d1
0001F49A D240                       		add.w	d0,d1
0001F49C 7410                       		moveq	#$10,d2
0001F49E 7611                       		moveq	#$11,d3
0001F4A0 4EF9 0001 2A50             		jmp	SolidObject
0001F4A6                            ; ===========================================================================
0001F4A6                            
0001F4A6                            loc_19C36:				; XREF: Obj83_Index
0001F4A6 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001F4AC 6400                       		bcc.s	Obj83_Solid2
0001F4AE 70FF                       		moveq	#-1,d0
0001F4B0 1028 001A                  		move.b	$1A(a0),d0
0001F4B4 4880                       		ext.w	d0
0001F4B6 D040                       		add.w	d0,d0
0001F4B8 3030 0030                  		move.w	$30(a0,d0.w),d0
0001F4BC 2240                       		movea.l	d0,a1
0001F4BE 337C 474F 0028             		move.w	#$474F,$28(a1)
0001F4C4 5228 001A                  		addq.b	#1,$1A(a0)
0001F4C8 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001F4CE 6700                       		beq.s	loc_19C62
0001F4D0                            
0001F4D0                            Obj83_Solid2:
0001F4D0 60AA                       		bra.s	Obj83_Solid
0001F4D2                            ; ===========================================================================
0001F4D2                            
0001F4D2                            loc_19C62:				; XREF: Obj83_Index
0001F4D2 08A8 0003 0022             		bclr	#3,$22(a0)
0001F4D8 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001F4DE 6000 FBBC                  		bra.w	loc_1982C
0001F4E2                            ; ===========================================================================
0001F4E2                            
0001F4E2                            loc_19C72:				; XREF: Obj83_Index
0001F4E2 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001F4E8 6700                       		beq.s	Obj83_Break	; if yes, branch
0001F4EA 4EF9 0001 045A             		jmp	DisplaySprite
0001F4F0                            ; ===========================================================================
0001F4F0                            
0001F4F0                            loc_19C80:				; XREF: Obj83_Index
0001F4F0 4A28 0001                  		tst.b	1(a0)
0001F4F4 6A00 FBA6                  		bpl.w	loc_1982C
0001F4F8 4EB9 0001 0408             		jsr	ObjectFall
0001F4FE 4EF9 0001 045A             		jmp	DisplaySprite
0001F504                            ; ===========================================================================
0001F504                            
0001F504                            Obj83_Break:				; XREF: loc_19C72
0001F504 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001F508 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001F50C 7801                       		moveq	#1,d4
0001F50E 7203                       		moveq	#3,d1
0001F510 7438                       		moveq	#$38,d2
0001F512 5428 0024                  		addq.b	#2,$24(a0)
0001F516 117C 0008 0019             		move.b	#8,$19(a0)
0001F51C 117C 0008 0016             		move.b	#8,$16(a0)
0001F522 43D0                       		lea	(a0),a1
0001F524 6000                       		bra.s	Obj83_MakeFrag
0001F526                            ; ===========================================================================
0001F526                            
0001F526                            Obj83_LoopFrag:
0001F526 4EB9 0001 08F6             		jsr	SingleObjLoad2
0001F52C 6600                       		bne.s	Obj83_BreakSnd
0001F52E                            
0001F52E                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001F52E 45D0                       		lea	(a0),a2
0001F530 47D1                       		lea	(a1),a3
0001F532 7603                       		moveq	#3,d3
0001F534                            
0001F534                            loc_19CC4:
0001F534 26DA                       		move.l	(a2)+,(a3)+
0001F536 26DA                       		move.l	(a2)+,(a3)+
0001F538 26DA                       		move.l	(a2)+,(a3)+
0001F53A 26DA                       		move.l	(a2)+,(a3)+
0001F53C 51CB FFF6                  		dbf	d3,loc_19CC4
0001F540                            
0001F540 335C 0012                  		move.w	(a4)+,$12(a1)
0001F544 361D                       		move.w	(a5)+,d3
0001F546 D769 0008                  		add.w	d3,8(a1)
0001F54A 361D                       		move.w	(a5)+,d3
0001F54C D769 000C                  		add.w	d3,$C(a1)
0001F550 1344 001A                  		move.b	d4,$1A(a1)
0001F554 5244                       		addq.w	#1,d4
0001F556 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001F55A                            
0001F55A                            Obj83_BreakSnd:
0001F55A 303C 00CB                  		move.w	#$CB,d0
0001F55E 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play smashing sound
0001F564 4EF9 0001 045A             		jmp	DisplaySprite
0001F56A                            ; ===========================================================================
0001F56A 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001F56E 0120 00C0                  		dc.w $120, $C0
0001F572 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001F576 0010 0000                  		dc.w $10, 0
0001F57A 0000 0010                  		dc.w 0,	$10
0001F57E 0010 0010                  		dc.w $10, $10
0001F582                            ; ---------------------------------------------------------------------------
0001F582                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001F582                            ; ---------------------------------------------------------------------------
0001F582                            Map_obj83:
0001F582                            	include "_maps\obj83.asm"
0001F582                            ; ---------------------------------------------------------------------------
0001F582                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001F582                            ; ---------------------------------------------------------------------------
0001F582 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001F586 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001F58A 0000                       		dc.w byte_19D46-Map_obj83
0001F58C 01                         byte_19D1C:	dc.b 1
0001F58D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001F592 02                         byte_19D22:	dc.b 2
0001F593 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001F598 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001F59D 00                         		dc.b 0
0001F59E 02                         byte_19D2E:	dc.b 2
0001F59F F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001F5A4 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001F5A9 00                         		dc.b 0
0001F5AA 02                         byte_19D3A:	dc.b 2
0001F5AB F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001F5B0 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001F5B5 00                         		dc.b 0
0001F5B6 02                         byte_19D46:	dc.b 2
0001F5B7 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001F5BC F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001F5C2 00                         		even
0001F5C2 00                         		even
0001F5C2                            
0001F5C2                            ; ===========================================================================
0001F5C2                            ; ---------------------------------------------------------------------------
0001F5C2                            ; Object 85 - Eggman (FZ)
0001F5C2                            ; ---------------------------------------------------------------------------
0001F5C2                            
0001F5C2                            Obj85_Delete:
0001F5C2 4EF9 0001 0496             		jmp	DeleteObject
0001F5C8                            ; ===========================================================================
0001F5C8                            
0001F5C8                            Obj85:					; XREF: Obj_Index
0001F5C8 7000                       		moveq	#0,d0
0001F5CA 1028 0024                  		move.b	$24(a0),d0
0001F5CE 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001F5D2 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001F5D6                            ; ===========================================================================
0001F5D6 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001F5D8 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001F5DA 0000                       		dc.w loc_1A38E-Obj85_Index
0001F5DC 0000                       		dc.w loc_1A346-Obj85_Index
0001F5DE 0000                       		dc.w loc_1A2C6-Obj85_Index
0001F5E0 0000                       		dc.w loc_1A3AC-Obj85_Index
0001F5E2 0000                       		dc.w loc_1A264-Obj85_Index
0001F5E4                            
0001F5E4 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001F5EA 0001 F2A4                  		dc.l Map_obj82		; mappings pointer
0001F5EE 25B0 0590 0300             		dc.w $25B0, $590, $300
0001F5F4 0000 0000                  		dc.l Map_obj84
0001F5F8 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001F5FE 0000 0000                  		dc.l Map_FZBoss
0001F602 26E0 0596 0470             		dc.w $26E0, $596, $470
0001F608 0001 F2A4                  		dc.l Map_obj82
0001F60C 26E0 0596 0400             		dc.w $26E0, $596, $400
0001F612 0001 B4AE                  		dc.l Map_Eggman
0001F616 26E0 0596 0400             		dc.w $26E0, $596, $400
0001F61C 0001 B4AE                  		dc.l Map_Eggman
0001F620                            
0001F620 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001F625 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001F62A 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001F62F 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001F634 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001F639 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001F63E                            ; ===========================================================================
0001F63E                            
0001F63E                            Obj85_Main:				; XREF: Obj85_Index
0001F63E 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001F642 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001F646 2248                       		movea.l	a0,a1
0001F648 7205                       		moveq	#5,d1
0001F64A 6000                       		bra.s	Obj85_LoadBoss
0001F64C                            ; ===========================================================================
0001F64C                            
0001F64C                            Obj85_Loop:
0001F64C 4EB9 0001 08F6             		jsr	SingleObjLoad2
0001F652 6600                       		bne.s	loc_19E20
0001F654                            
0001F654                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001F654 12BC 0085                  		move.b	#$85,(a1)
0001F658 335A 0008                  		move.w	(a2)+,8(a1)
0001F65C 335A 000C                  		move.w	(a2)+,$C(a1)
0001F660 335A 0002                  		move.w	(a2)+,2(a1)
0001F664 235A 0004                  		move.l	(a2)+,4(a1)
0001F668 135B 0024                  		move.b	(a3)+,$24(a1)
0001F66C 135B 001C                  		move.b	(a3)+,$1C(a1)
0001F670 135B 0018                  		move.b	(a3)+,$18(a1)
0001F674 135B 0017                  		move.b	(a3)+,$17(a1)
0001F678 135B 0016                  		move.b	(a3)+,$16(a1)
0001F67C 137C 0004 0001             		move.b	#4,1(a1)
0001F682 08E8 0007 0001             		bset	#7,1(a0)
0001F688 2348 0034                  		move.l	a0,$34(a1)
0001F68C 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001F690                            
0001F690                            loc_19E20:
0001F690 45E8 0036                  		lea	$36(a0),a2
0001F694 4EB9 0001 08E0             		jsr	SingleObjLoad
0001F69A 6600                       		bne.s	loc_19E5A
0001F69C 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001F6A0 3489                       		move.w	a1,(a2)
0001F6A2 2348 0034                  		move.l	a0,$34(a1)
0001F6A6 45E8 0038                  		lea	$38(a0),a2
0001F6AA 7400                       		moveq	#0,d2
0001F6AC 7203                       		moveq	#3,d1
0001F6AE                            
0001F6AE                            loc_19E3E:
0001F6AE 4EB9 0001 08F6             		jsr	SingleObjLoad2
0001F6B4 6600                       		bne.s	loc_19E5A
0001F6B6 34C9                       		move.w	a1,(a2)+
0001F6B8 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001F6BC 2348 0034                  		move.l	a0,$34(a1)
0001F6C0 1342 0028                  		move.b	d2,$28(a1)
0001F6C4 5442                       		addq.w	#2,d2
0001F6C6 51C9 FFE6                  		dbf	d1,loc_19E3E
0001F6CA                            
0001F6CA                            loc_19E5A:
0001F6CA 317C 0000 0034             		move.w	#0,$34(a0)
0001F6D0 117C 000F 0021             		move.b	#var_BHits_FZ,$21(a0)
0001F6D6 4EB9 0000 0000                             jsr (BossStarLight_Ballhog_RobotnikHud).l
0001F6DC 317C FFFF 0030             		move.w	#-1,$30(a0)
0001F6E2                            
0001F6E2                            Obj85_Eggman:				; XREF: Obj85_Index
0001F6E2 7000                       		moveq	#0,d0
0001F6E4 1028 0034                  		move.b	$34(a0),d0
0001F6E8 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001F6EC 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001F6F0 4EF9 0001 045A             		jmp	DisplaySprite
0001F6F6                            ; ===========================================================================
0001F6F6 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001F6FA 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001F6FE 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001F702 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001F706                            ; ===========================================================================
0001F706                            
0001F706                            loc_19E90:				; XREF: off_19E80
0001F706 4AB8 F680                  		tst.l	($FFFFF680).w
0001F70A 6600                       		bne.s	loc_19EA2
0001F70C 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001F712 6500                       		bcs.s	loc_19EA2
0001F714 5428 0034                  		addq.b	#2,$34(a0)
0001F718                            
0001F718                            loc_19EA2:
0001F718 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001F71C 4E75                       		rts	
0001F71E                            ; ===========================================================================
0001F71E                            
0001F71E                            loc_19EA8:				; XREF: off_19E80
0001F71E 4A68 0030                  		tst.w	$30(a0)
0001F722 6A00                       		bpl.s	loc_19F10
0001F724 4268 0030                  		clr.w	$30(a0)
0001F728 4EB9 0000 2CA2             		jsr	(RandomNumber).l
0001F72E 0240 000C                  		andi.w	#$C,d0
0001F732 3200                       		move.w	d0,d1
0001F734 5441                       		addq.w	#2,d1
0001F736 4A80                       		tst.l	d0
0001F738 6A00                       		bpl.s	loc_19EC6
0001F73A C141                       		exg	d1,d0
0001F73C                            
0001F73C                            loc_19EC6:
0001F73C 43FA 0000                  		lea	word_19FD6(pc),a1
0001F740 3031 0000                  		move.w	(a1,d0.w),d0
0001F744 3231 1000                  		move.w	(a1,d1.w),d1
0001F748 3140 0030                  		move.w	d0,$30(a0)
0001F74C 74FF                       		moveq	#-1,d2
0001F74E 3430 0038                  		move.w	$38(a0,d0.w),d2
0001F752 2242                       		movea.l	d2,a1
0001F754 137C 00FF 0029             		move.b	#-1,$29(a1)
0001F75A 337C FFFF 0030             		move.w	#-1,$30(a1)
0001F760 3430 1038                  		move.w	$38(a0,d1.w),d2
0001F764 2242                       		movea.l	d2,a1
0001F766 137C 0001 0029             		move.b	#1,$29(a1)
0001F76C 337C 0000 0030             		move.w	#0,$30(a1)
0001F772 317C 0001 0032             		move.w	#1,$32(a0)
0001F778 4228 0035                  		clr.b	$35(a0)
0001F77C 303C 00B7                  		move.w	#$B7,d0
0001F780 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001F786                            
0001F786                            loc_19F10:
0001F786 4A68 0032                  		tst.w	$32(a0)
0001F78A 6B00 0000                  		bmi.w	loc_19FA6
0001F78E 08A8 0000 0022             		bclr	#0,$22(a0)
0001F794 3038 D008                  		move.w	($FFFFD008).w,d0
0001F798 9068 0008                  		sub.w	8(a0),d0
0001F79C 6500                       		bcs.s	loc_19F2E
0001F79E 08E8 0000 0022             		bset	#0,$22(a0)
0001F7A4                            
0001F7A4                            loc_19F2E:
0001F7A4 323C 002B                  		move.w	#$2B,d1
0001F7A8 343C 0014                  		move.w	#$14,d2
0001F7AC 363C 0014                  		move.w	#$14,d3
0001F7B0 3828 0008                  		move.w	8(a0),d4
0001F7B4 4EB9 0001 2A50             		jsr	SolidObject
0001F7BA 4A44                       		tst.w	d4
0001F7BC 6E00                       		bgt.s	loc_19F50
0001F7BE                            
0001F7BE                            loc_19F48:
0001F7BE 4A28 0035                  		tst.b	$35(a0)
0001F7C2 6600                       		bne.s	loc_19F88
0001F7C4 6000                       		bra.s	loc_19F96
0001F7C6                            ; ===========================================================================
0001F7C6                            
0001F7C6                            loc_19F50:
0001F7C6 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001F7CA 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001F7D0 66EC                       		bne.s	loc_19F48
0001F7D2 303C 0300                  		move.w	#$300,d0
0001F7D6 0828 0000 0022             		btst	#0,$22(a0)
0001F7DC 6600                       		bne.s	loc_19F6A
0001F7DE 4440                       		neg.w	d0
0001F7E0                            
0001F7E0                            loc_19F6A:
0001F7E0 31C0 D010                  		move.w	d0,($FFFFD010).w
0001F7E4 4A28 0035                  		tst.b	$35(a0)
0001F7E8 6600                       		bne.s	loc_19F88
0001F7EA 5328 0021                  		subq.b	#1,$21(a0)
0001F7EE 117C 0064 0035             		move.b	#$64,$35(a0)
0001F7F4 303C 00AC                  		move.w	#$AC,d0
0001F7F8 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001F7FE                            
0001F7FE                            loc_19F88:
0001F7FE 5328 0035                  		subq.b	#1,$35(a0)
0001F802 6700                       		beq.s	loc_19F96
0001F804 117C 0003 001C             		move.b	#3,$1C(a0)
0001F80A 6000                       		bra.s	loc_19F9C
0001F80C                            ; ===========================================================================
0001F80C                            
0001F80C                            loc_19F96:
0001F80C 117C 0001 001C             		move.b	#1,$1C(a0)
0001F812                            
0001F812                            loc_19F9C:
0001F812 43FA FA5E                  		lea	Ani_obj82(pc),a1
0001F816 4EF9 0000 D3EA             		jmp	AnimateSprite
0001F81C                            ; ===========================================================================
0001F81C                            
0001F81C                            loc_19FA6:
0001F81C 4A28 0021                  		tst.b	$21(a0)
0001F820 6700                       		beq.s	loc_19FBC
0001F822 5428 0034                  		addq.b	#2,$34(a0)
0001F826 317C FFFF 0030             		move.w	#-1,$30(a0)
0001F82C 4268 0032                  		clr.w	$32(a0)
0001F830 4E75                       		rts	
0001F832                            ; ===========================================================================
0001F832                            
0001F832                            loc_19FBC:
0001F832 117C 0006 0034             		move.b	#6,$34(a0)
0001F838 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001F83E 317C 053C 000C             		move.w	#$53C,$C(a0)
0001F844 117C 0014 0016             		move.b	#$14,$16(a0)
0001F84A 4E75                       		rts	
0001F84C                            ; ===========================================================================
0001F84C 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001F85C                            ; ===========================================================================
0001F85C                            
0001F85C                            loc_19FE6:				; XREF: off_19E80
0001F85C 70FF                       		moveq	#-1,d0
0001F85E 3028 0036                  		move.w	$36(a0),d0
0001F862 2240                       		movea.l	d0,a1
0001F864 4A68 0030                  		tst.w	$30(a0)
0001F868 6A00                       		bpl.s	loc_1A000
0001F86A 4268 0030                  		clr.w	$30(a0)
0001F86E 137C 00FF 0029             		move.b	#-1,$29(a1)
0001F874 6100                       		bsr.s	loc_1A020
0001F876                            
0001F876                            loc_1A000:
0001F876 700F                       		moveq	#$F,d0
0001F878 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001F87C 6600                       		bne.s	loc_1A00A
0001F87E 6100                       		bsr.s	loc_1A020
0001F880                            
0001F880                            loc_1A00A:
0001F880 4A68 0032                  		tst.w	$32(a0)
0001F884 6700                       		beq.s	locret_1A01E
0001F886 5528 0034                  		subq.b	#2,$34(a0)
0001F88A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001F890 4268 0032                  		clr.w	$32(a0)
0001F894                            
0001F894                            locret_1A01E:
0001F894 4E75                       		rts	
0001F896                            ; ===========================================================================
0001F896                            
0001F896                            loc_1A020:
0001F896 303C 00B1                  		move.w	#$B1,d0
0001F89A 4EF9 0000 12D0             		jmp	(PlaySound_Special).l ;	play electricity sound
0001F8A0                            ; ===========================================================================
0001F8A0                            
0001F8A0                            loc_1A02A:				; XREF: off_19E80
0001F8A0 117C 0030 0017             		move.b	#$30,$17(a0)
0001F8A6 08E8 0000 0022             		bset	#0,$22(a0)
0001F8AC 4EB9 0001 0434             		jsr	SpeedToPos
0001F8B2 117C 0006 001A             		move.b	#6,$1A(a0)
0001F8B8 0668 0010 0012             		addi.w	#$10,$12(a0)
0001F8BE 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001F8C4 6500                       		bcs.s	loc_1A070
0001F8C6 317C 059C 000C             		move.w	#$59C,$C(a0)
0001F8CC 5428 0034                  		addq.b	#2,$34(a0)
0001F8D0 117C 0020 0017             		move.b	#$20,$17(a0)
0001F8D6 317C 0100 0010             		move.w	#$100,$10(a0)
0001F8DC 317C FF00 0012             		move.w	#-$100,$12(a0)
0001F8E2 5438 F742                  		addq.b	#2,($FFFFF742).w
0001F8E6                            
0001F8E6                            loc_1A070:
0001F8E6 6000 0000                  		bra.w	loc_1A166
0001F8EA                            ; ===========================================================================
0001F8EA                            
0001F8EA                            loc_1A074:				; XREF: off_19E80
0001F8EA 08E8 0000 0022             		bset	#0,$22(a0)
0001F8F0 117C 0004 001C             		move.b	#4,$1C(a0)
0001F8F6 4EB9 0001 0434             		jsr	SpeedToPos
0001F8FC 0668 0010 0012             		addi.w	#$10,$12(a0)
0001F902 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001F908 6500                       		bcs.s	loc_1A09A
0001F90A 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001F910                            
0001F910                            loc_1A09A:
0001F910 317C 0400 0010             		move.w	#$400,$10(a0)
0001F916 3028 0008                  		move.w	8(a0),d0
0001F91A 9078 D008                  		sub.w	($FFFFD008).w,d0
0001F91E 6A00                       		bpl.s	loc_1A0B4
0001F920 317C 0500 0010             		move.w	#$500,$10(a0)
0001F926 6000 0000                  		bra.w	loc_1A0F2
0001F92A                            ; ===========================================================================
0001F92A                            
0001F92A                            loc_1A0B4:
0001F92A 0440 0070                  		subi.w	#$70,d0
0001F92E 6500                       		bcs.s	loc_1A0F2
0001F930 0468 0100 0010             		subi.w	#$100,$10(a0)
0001F936 5140                       		subq.w	#8,d0
0001F938 6500                       		bcs.s	loc_1A0F2
0001F93A 0468 0100 0010             		subi.w	#$100,$10(a0)
0001F940 5140                       		subq.w	#8,d0
0001F942 6500                       		bcs.s	loc_1A0F2
0001F944 0468 0080 0010             		subi.w	#$80,$10(a0)
0001F94A 5140                       		subq.w	#8,d0
0001F94C 6500                       		bcs.s	loc_1A0F2
0001F94E 0468 0080 0010             		subi.w	#$80,$10(a0)
0001F954 5140                       		subq.w	#8,d0
0001F956 6500                       		bcs.s	loc_1A0F2
0001F958 0468 0080 0010             		subi.w	#$80,$10(a0)
0001F95E 0440 0038                  		subi.w	#$38,d0
0001F962 6500                       		bcs.s	loc_1A0F2
0001F964 4268 0010                  		clr.w	$10(a0)
0001F968                            
0001F968                            loc_1A0F2:
0001F968 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001F96E 6500                       		bcs.s	loc_1A110
0001F970 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001F976 317C 0240 0010             		move.w	#$240,$10(a0)
0001F97C 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001F982 5428 0034                  		addq.b	#2,$34(a0)
0001F986                            
0001F986                            loc_1A110:
0001F986 6000                       		bra.s	loc_1A15C
0001F988                            ; ===========================================================================
0001F988                            
0001F988                            loc_1A112:				; XREF: off_19E80
0001F988 4EB9 0001 0434             		jsr	SpeedToPos
0001F98E 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001F994 6500                       		bcs.s	loc_1A124
0001F996 4268 0010                  		clr.w	$10(a0)
0001F99A                            
0001F99A                            loc_1A124:
0001F99A 0668 0034 0012             		addi.w	#$34,$12(a0)
0001F9A0 4A68 0012                  		tst.w	$12(a0)
0001F9A4 6B00                       		bmi.s	loc_1A142
0001F9A6 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001F9AC 6500                       		bcs.s	loc_1A142
0001F9AE 317C 0592 000C             		move.w	#$592,$C(a0)
0001F9B4 4268 0012                  		clr.w	$12(a0)
0001F9B8                            
0001F9B8                            loc_1A142:
0001F9B8 3028 0010                  		move.w	$10(a0),d0
0001F9BC 8068 0012                  		or.w	$12(a0),d0
0001F9C0 6600                       		bne.s	loc_1A15C
0001F9C2 5428 0034                  		addq.b	#2,$34(a0)
0001F9C6 317C FE80 0012             		move.w	#-$180,$12(a0)
0001F9CC 117C 0001 0021             		move.b	#1,$21(a0)
0001F9D2                            
0001F9D2                            loc_1A15C:
0001F9D2 43FA F89E                  		lea	Ani_obj82(pc),a1
0001F9D6 4EB9 0000 D3EA             		jsr	AnimateSprite
0001F9DC                            
0001F9DC                            loc_1A166:
0001F9DC 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001F9E2 6C00                       		bge.s	loc_1A172
0001F9E4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001F9E8                            
0001F9E8                            loc_1A172:
0001F9E8 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001F9EE 6C00                       		bge.s	locret_1A190
0001F9F0 323C 001B                  		move.w	#$1B,d1
0001F9F4 343C 0070                  		move.w	#$70,d2
0001F9F8 363C 0071                  		move.w	#$71,d3
0001F9FC 3828 0008                  		move.w	8(a0),d4
0001FA00 4EF9 0001 2A50             		jmp	SolidObject
0001FA06                            ; ===========================================================================
0001FA06                            
0001FA06                            locret_1A190:
0001FA06 4E75                       		rts	
0001FA08                            ; ===========================================================================
0001FA08                            
0001FA08                            loc_1A192:				; XREF: off_19E80
0001FA08 217C 0001 B4AE 0004        		move.l	#Map_Eggman,4(a0)
0001FA10 317C 0400 0002             		move.w	#$400,2(a0)
0001FA16 117C 0000 001C             		move.b	#0,$1C(a0)
0001FA1C 08E8 0000 0022             		bset	#0,$22(a0)
0001FA22 4EB9 0001 0434             		jsr	SpeedToPos
0001FA28 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001FA2E 6400                       		bcc.s	loc_1A1D0
0001FA30 317C 0180 0010             		move.w	#$180,$10(a0)
0001FA36 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001FA3C 117C 000F 0020             		move.b	#$F,$20(a0)
0001FA42 5428 0034                  		addq.b	#2,$34(a0)
0001FA46                            
0001FA46                            loc_1A1D0:
0001FA46 6000 FF8A                  		bra.w	loc_1A15C
0001FA4A                            ; ===========================================================================
0001FA4A                            
0001FA4A                            loc_1A1D4:				; XREF: off_19E80
0001FA4A 08E8 0000 0022             		bset	#0,$22(a0)
0001FA50 4EB9 0001 0434             		jsr	SpeedToPos
0001FA56 4A68 0030                  		tst.w	$30(a0)
0001FA5A 6600                       		bne.s	loc_1A1FC
0001FA5C 4A28 0020                  		tst.b	$20(a0)
0001FA60 6600                       		bne.s	loc_1A216
0001FA62 317C 001E 0030             		move.w	#$1E,$30(a0)
0001FA68 303C 00AC                  		move.w	#$AC,d0
0001FA6C 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001FA72                            
0001FA72                            loc_1A1FC:
0001FA72 5368 0030                  		subq.w	#1,$30(a0)
0001FA76 6600                       		bne.s	loc_1A216
0001FA78 4A28 0022                  		tst.b	$22(a0)
0001FA7C 6A00                       		bpl.s	loc_1A210
0001FA7E 317C 0060 0012             		move.w	#$60,$12(a0)
0001FA84 6000                       		bra.s	loc_1A216
0001FA86                            ; ===========================================================================
0001FA86                            
0001FA86                            loc_1A210:
0001FA86 117C 000F 0020             		move.b	#$F,$20(a0)
0001FA8C                            
0001FA8C                            loc_1A216:
0001FA8C 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w	; is Sonic's X-axis more than $2790?
0001FA92 6D00                       		blt.s	loc_1A23A		; if not, branch
0001FA94 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w	; lock controls
0001FA9A 31FC 0000 F602             		move.w	#0,(SonicControl)	; clear joypad input
0001FAA0 4278 D014                  		clr.w	($FFFFD014).w		; clear Sonic's inertia
0001FAA4 4A68 0012                  		tst.w	$12(a0)			; is sonic's Y speed positive?
0001FAA8 6A00                       		bpl.s	loc_1A248		; if yes, branch
0001FAAA 31FC 0100 F602             		move.w	#(Up)<<8,(SonicControl)	; hold Up button
0001FAB0                            
0001FAB0                            loc_1A23A:
0001FAB0 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w	; is Sonic's X-axis more than $27E0?
0001FAB6 6D00                       		blt.s	loc_1A248		; if not, branch
0001FAB8 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w	; set Sonic's X-axis to $27E0
0001FABE                            
0001FABE                            ; Vladikcomper:	Some code was changed to fit level order.
0001FABE                            
0001FABE                            loc_1A248:
0001FABE 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001FAC4 6500                       		bcs.s	loc_1A260
0001FAC6 4A28 0001                  		tst.b	1(a0)
0001FACA 6B00                       		bmi.s	loc_1A260
0001FACC 11FC 001C F600             		move.b	#$1C,($FFFFF600).w	; set game mode to Ending sequence
0001FAD2 103C 009D                                  move.b	#$9D,d0
0001FAD6 4EB8 12D0                  		jsr	PlaySound_Special	; play credits music
0001FADA 31FC 0000 FFF4                             move.w	#0,($FFFFFFF4).w	; set credits index number to 0
0001FAE0                            		;lea	LevelOrder,a2		; load level order array
0001FAE0                            		;move.w	$2C(a2),d0
0001FAE0                            		;beq.s	@RemoveObject
0001FAE0                            		;move.w	d0,($FFFFFE10).w
0001FAE0                            		;move.w	#1,($FFFFFE02).w 	; set restart level flag
0001FAE0                                            ;move.b	#$C,($FFFFF600).w	; set game mode to level
0001FAE0                            
0001FAE0                            @RemoveObject:	
0001FAE0 6000 FAE0                  		bra.w	Obj85_Delete
0001FAE4                            ; ===========================================================================
0001FAE4                            
0001FAE4                            loc_1A260:
0001FAE4 6000 FEEC                  		bra.w	loc_1A15C
0001FAE8                            ; ===========================================================================
0001FAE8                            
0001FAE8                            loc_1A264:				; XREF: Obj85_Index
0001FAE8 2268 0034                  		movea.l	$34(a0),a1
0001FAEC 1011                       		move.b	(a1),d0
0001FAEE B010                       		cmp.b	(a0),d0
0001FAF0 6600 FAD0                  		bne.w	Obj85_Delete
0001FAF4 117C 0007 001C             		move.b	#7,$1C(a0)
0001FAFA 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001FB00 6C00                       		bge.s	loc_1A280
0001FB02 6000                       		bra.s	loc_1A2A6
0001FB04                            ; ===========================================================================
0001FB04                            
0001FB04                            loc_1A280:
0001FB04 4A69 0010                  		tst.w	$10(a1)
0001FB08 6700                       		beq.s	loc_1A28C
0001FB0A 117C 000B 001C             		move.b	#$B,$1C(a0)
0001FB10                            
0001FB10                            loc_1A28C:
0001FB10 43FA B85C                  		lea	Ani_Eggman(pc),a1
0001FB14 4EB9 0000 D3EA             		jsr	AnimateSprite
0001FB1A                            
0001FB1A                            loc_1A296:
0001FB1A 2268 0034                  		movea.l	$34(a0),a1
0001FB1E 3169 0008 0008             		move.w	8(a1),8(a0)
0001FB24 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001FB2A                            
0001FB2A                            loc_1A2A6:
0001FB2A 2268 0034                  		movea.l	$34(a0),a1
0001FB2E 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001FB34 7003                       		moveq	#3,d0
0001FB36 C028 0022                  		and.b	$22(a0),d0
0001FB3A 0228 00FC 0001             		andi.b	#-4,1(a0)
0001FB40 8128 0001                  		or.b	d0,1(a0)
0001FB44 4EF9 0001 045A             		jmp	DisplaySprite
0001FB4A                            ; ===========================================================================
0001FB4A                            
0001FB4A                            loc_1A2C6:				; XREF: Obj85_Index
0001FB4A 2268 0034                  		movea.l	$34(a0),a1
0001FB4E 1011                       		move.b	(a1),d0
0001FB50 B010                       		cmp.b	(a0),d0
0001FB52 6600 FA6E                  		bne.w	Obj85_Delete
0001FB56 0CA9 0001 B4AE 0004        		cmpi.l	#Map_Eggman,4(a1)
0001FB5E 6700                       		beq.s	loc_1A2E4
0001FB60 117C 000A 001A             		move.b	#$A,$1A(a0)
0001FB66 60C2                       		bra.s	loc_1A2A6
0001FB68                            ; ===========================================================================
0001FB68                            
0001FB68                            loc_1A2E4:
0001FB68 117C 0001 001C             		move.b	#1,$1C(a0)
0001FB6E 4A29 0021                  		tst.b	$21(a1)
0001FB72 6F00                       		ble.s	loc_1A312
0001FB74 117C 0006 001C             		move.b	#6,$1C(a0)
0001FB7A 217C 0001 B4AE 0004        		move.l	#Map_Eggman,4(a0)
0001FB82 317C 0400 0002             		move.w	#$400,2(a0)
0001FB88 43FA B7E4                  		lea	Ani_Eggman(pc),a1
0001FB8C 4EB9 0000 D3EA             		jsr	AnimateSprite
0001FB92 6000 FF86                  		bra.w	loc_1A296
0001FB96                            ; ===========================================================================
0001FB96                            
0001FB96                            loc_1A312:
0001FB96 4A28 0001                  		tst.b	1(a0)
0001FB9A 6A00 FA26                  		bpl.w	Obj85_Delete
0001FB9E 6100 B594                  		bsr.w	BossDefeated
0001FBA2 117C 0002 0018             		move.b	#2,$18(a0)
0001FBA8 117C 0000 001C             		move.b	#0,$1C(a0)
0001FBAE 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001FBB6 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001FBBC 43FA 0000                  		lea	Ani_obj85(pc),a1
0001FBC0 4EB9 0000 D3EA             		jsr	AnimateSprite
0001FBC6 6000 FF52                  		bra.w	loc_1A296
0001FBCA                            ; ===========================================================================
0001FBCA                            
0001FBCA                            loc_1A346:				; XREF: Obj85_Index
0001FBCA 08E8 0000 0022             		bset	#0,$22(a0)
0001FBD0 2268 0034                  		movea.l	$34(a0),a1
0001FBD4 0CA9 0001 B4AE 0004        		cmpi.l	#Map_Eggman,4(a1)
0001FBDC 6700                       		beq.s	loc_1A35E
0001FBDE 6000 FF4A                  		bra.w	loc_1A2A6
0001FBE2                            ; ===========================================================================
0001FBE2                            
0001FBE2                            loc_1A35E:
0001FBE2 3169 0008 0008             		move.w	8(a1),8(a0)
0001FBE8 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001FBEE 4A28 001E                  		tst.b	$1E(a0)
0001FBF2 6600                       		bne.s	loc_1A376
0001FBF4 117C 0014 001E             		move.b	#$14,$1E(a0)
0001FBFA                            
0001FBFA                            loc_1A376:
0001FBFA 5328 001E                  		subq.b	#1,$1E(a0)
0001FBFE 6E00                       		bgt.s	loc_1A38A
0001FC00 5228 001A                  		addq.b	#1,$1A(a0)
0001FC04 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001FC0A 6E00 F9B6                  		bgt.w	Obj85_Delete
0001FC0E                            
0001FC0E                            loc_1A38A:
0001FC0E 6000 FF0A                  		bra.w	loc_1A296
0001FC12                            ; ===========================================================================
0001FC12                            
0001FC12                            loc_1A38E:				; XREF: Obj85_Index
0001FC12 117C 000B 001A             		move.b	#$B,$1A(a0)
0001FC18 3038 D008                  		move.w	($FFFFD008).w,d0
0001FC1C 9068 0008                  		sub.w	8(a0),d0
0001FC20 6500                       		bcs.s	loc_1A3A6
0001FC22 4A28 0001                  		tst.b	1(a0)
0001FC26 6A00 F99A                  		bpl.w	Obj85_Delete
0001FC2A                            
0001FC2A                            loc_1A3A6:
0001FC2A 4EF9 0001 045A             		jmp	DisplaySprite
0001FC30                            ; ===========================================================================
0001FC30                            
0001FC30                            loc_1A3AC:				; XREF: Obj85_Index
0001FC30 117C 0000 001A             		move.b	#0,$1A(a0)
0001FC36 08E8 0000 0022             		bset	#0,$22(a0)
0001FC3C 2268 0034                  		movea.l	$34(a0),a1
0001FC40 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001FC46 6600                       		bne.s	loc_1A3D0
0001FC48 0CA9 0001 B4AE 0004        		cmpi.l	#Map_Eggman,4(a1)
0001FC50 6700 F970                  		beq.w	Obj85_Delete
0001FC54                            
0001FC54                            loc_1A3D0:
0001FC54 6000 FED4                  		bra.w	loc_1A2A6
0001FC58                            ; ===========================================================================
0001FC58                            Ani_obj85:
0001FC58                            	include "_anim\obj85.asm"
0001FC58                            ; ---------------------------------------------------------------------------
0001FC58                            ; Animation script - Eggman (FZ)
0001FC58                            ; ---------------------------------------------------------------------------
0001FC58 0000                       		dc.w byte_1A3D6-Ani_obj85
0001FC5A 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001FC5E                            		even
0001FC5E                            		even
0001FC5E                            
0001FC5E                            Map_Eggman2:
0001FC5E                            	include "_maps\Eggman2.asm"
0001FC5E                            ; ---------------------------------------------------------------------------
0001FC5E                            ; Sprite mappings - Eggman (FZ)
0001FC5E                            ; ---------------------------------------------------------------------------
0001FC5E 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001FC60 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001FC62 06                         byte_1A3DE:	dc.b 6
0001FC63 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001FC68 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001FC6D EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001FC72 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001FC77 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001FC7C 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001FC81 06                         byte_1A3FD:	dc.b 6
0001FC82 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001FC87 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001FC8C EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001FC91 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001FC96 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001FC9B 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001FCA0                            		even
0001FCA0                            		even
0001FCA0                            
0001FCA0                            Map_FZBoss:
0001FCA0                            	include "_maps\FZ boss.asm"
0001FCA0                            ; ---------------------------------------------------------------------------
0001FCA0                            ; Sprite mappings - boss (FZ)
0001FCA0                            ; ---------------------------------------------------------------------------
0001FCA0 0000                       		dc.w byte_1A422-Map_FZBoss
0001FCA2 0000                       		dc.w byte_1A42D-Map_FZBoss
0001FCA4 0000                       		dc.w byte_1A43D-Map_FZBoss
0001FCA6 02                         byte_1A422:	dc.b 2
0001FCA7 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001FCAC 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001FCB1 03                         byte_1A42D:	dc.b 3
0001FCB2 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001FCB7 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001FCBC 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001FCC1 02                         byte_1A43D:	dc.b 2
0001FCC2 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001FCC7 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001FCCC                            		even
0001FCCC                            		even
0001FCCC                            
0001FCCC                            ; ===========================================================================
0001FCCC                            
0001FCCC                            Obj84_Delete:
0001FCCC 4EF9 0001 0496             		jmp	DeleteObject
0001FCD2                            ; ===========================================================================
0001FCD2                            ; ---------------------------------------------------------------------------
0001FCD2                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001FCD2                            ; ---------------------------------------------------------------------------
0001FCD2                            
0001FCD2                            Obj84:					; XREF: Obj_Index
0001FCD2 7000                       		moveq	#0,d0
0001FCD4 1028 0024                  		move.b	$24(a0),d0
0001FCD8 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001FCDC 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001FCE0                            ; ===========================================================================
0001FCE0 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001FCE2 0000                       		dc.w loc_1A4CE-Obj84_Index
0001FCE4 0000                       		dc.w loc_1A57E-Obj84_Index
0001FCE6                            
0001FCE6 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001FCEA 2550 0620                  		dc.w $2550, $620
0001FCEE 2490 04C0                  		dc.w $2490, $4C0
0001FCF2 2510 04C0                  		dc.w $2510, $4C0
0001FCF6                            ; ===========================================================================
0001FCF6                            
0001FCF6                            Obj84_Main:				; XREF: Obj84_Index
0001FCF6 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001FCFA 7000                       		moveq	#0,d0
0001FCFC 1028 0028                  		move.b	$28(a0),d0
0001FD00 D040                       		add.w	d0,d0
0001FD02 D2C0                       		adda.w	d0,a1
0001FD04 117C 0004 0001             		move.b	#4,1(a0)
0001FD0A 08E8 0007 0001             		bset	#7,1(a0)
0001FD10 08E8 0004 0001             		bset	#4,1(a0)
0001FD16 317C 0300 0002             		move.w	#$300,2(a0)
0001FD1C 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001FD24 3159 0008                  		move.w	(a1)+,8(a0)
0001FD28 3151 000C                  		move.w	(a1),$C(a0)
0001FD2C 3159 0038                  		move.w	(a1)+,$38(a0)
0001FD30 117C 0020 0016             		move.b	#$20,$16(a0)
0001FD36 117C 0060 0017             		move.b	#$60,$17(a0)
0001FD3C 117C 0020 0019             		move.b	#$20,$19(a0)
0001FD42 117C 0060 0016             		move.b	#$60,$16(a0)
0001FD48 117C 0003 0018             		move.b	#3,$18(a0)
0001FD4E 5428 0024                  		addq.b	#2,$24(a0)
0001FD52                            
0001FD52                            loc_1A4CE:				; XREF: Obj84_Index
0001FD52 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001FD58 6F00                       		ble.s	loc_1A4DC
0001FD5A 08E8 0001 0001             		bset	#1,1(a0)
0001FD60                            
0001FD60                            loc_1A4DC:
0001FD60 42A8 003C                  		clr.l	$3C(a0)
0001FD64 4A28 0029                  		tst.b	$29(a0)
0001FD68 6700                       		beq.s	loc_1A4EA
0001FD6A 5428 0024                  		addq.b	#2,$24(a0)
0001FD6E                            
0001FD6E                            loc_1A4EA:
0001FD6E 2028 003C                  		move.l	$3C(a0),d0
0001FD72 2228 0038                  		move.l	$38(a0),d1
0001FD76 D280                       		add.l	d0,d1
0001FD78 4841                       		swap	d1
0001FD7A 3141 000C                  		move.w	d1,$C(a0)
0001FD7E 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001FD84 6600                       		bne.s	loc_1A524
0001FD86 4A68 0030                  		tst.w	$30(a0)
0001FD8A 6A00                       		bpl.s	loc_1A524
0001FD8C 70F6                       		moveq	#-$A,d0
0001FD8E 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001FD94 6F00                       		ble.s	loc_1A514
0001FD96 700E                       		moveq	#$E,d0
0001FD98                            
0001FD98                            loc_1A514:
0001FD98 D240                       		add.w	d0,d1
0001FD9A 2268 0034                  		movea.l	$34(a0),a1
0001FD9E 3341 000C                  		move.w	d1,$C(a1)
0001FDA2 3368 0008 0008             		move.w	8(a0),8(a1)
0001FDA8                            
0001FDA8                            loc_1A524:
0001FDA8 323C 002B                  		move.w	#$2B,d1
0001FDAC 343C 0060                  		move.w	#$60,d2
0001FDB0 363C 0061                  		move.w	#$61,d3
0001FDB4 3828 0008                  		move.w	8(a0),d4
0001FDB8 4EB9 0001 2A50             		jsr	SolidObject
0001FDBE 7000                       		moveq	#0,d0
0001FDC0 3228 003C                  		move.w	$3C(a0),d1
0001FDC4 6A00                       		bpl.s	loc_1A550
0001FDC6 4441                       		neg.w	d1
0001FDC8 5141                       		subq.w	#8,d1
0001FDCA 6500                       		bcs.s	loc_1A55C
0001FDCC 5200                       		addq.b	#1,d0
0001FDCE E841                       		asr.w	#4,d1
0001FDD0 D041                       		add.w	d1,d0
0001FDD2 6000                       		bra.s	loc_1A55C
0001FDD4                            ; ===========================================================================
0001FDD4                            
0001FDD4                            loc_1A550:
0001FDD4 0441 0027                  		subi.w	#$27,d1
0001FDD8 6500                       		bcs.s	loc_1A55C
0001FDDA 5200                       		addq.b	#1,d0
0001FDDC E841                       		asr.w	#4,d1
0001FDDE D041                       		add.w	d1,d0
0001FDE0                            
0001FDE0                            loc_1A55C:
0001FDE0 1140 001A                  		move.b	d0,$1A(a0)
0001FDE4 3038 D008                  		move.w	($FFFFD008).w,d0
0001FDE8 9068 0008                  		sub.w	8(a0),d0
0001FDEC 6B00                       		bmi.s	loc_1A578
0001FDEE 0440 0140                  		subi.w	#$140,d0
0001FDF2 6B00                       		bmi.s	loc_1A578
0001FDF4 4A28 0001                  		tst.b	1(a0)
0001FDF8 6A00 FED2                  		bpl.w	Obj84_Delete
0001FDFC                            
0001FDFC                            loc_1A578:
0001FDFC 4EF9 0001 045A             		jmp	DisplaySprite
0001FE02                            ; ===========================================================================
0001FE02                            
0001FE02                            loc_1A57E:				; XREF: Obj84_Index
0001FE02 7000                       		moveq	#0,d0
0001FE04 1028 0028                  		move.b	$28(a0),d0
0001FE08 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001FE0C 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001FE10 6000 FF5C                  		bra.w	loc_1A4EA
0001FE14                            ; ===========================================================================
0001FE14 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001FE16 0000                       		dc.w loc_1A598-off_1A590
0001FE18 0000                       		dc.w loc_1A604-off_1A590
0001FE1A 0000                       		dc.w loc_1A604-off_1A590
0001FE1C                            ; ===========================================================================
0001FE1C                            
0001FE1C                            loc_1A598:				; XREF: off_1A590
0001FE1C 4A28 0029                  		tst.b	$29(a0)
0001FE20 6600                       		bne.s	loc_1A5D4
0001FE22 2268 0034                  		movea.l	$34(a0),a1
0001FE26 4A29 0021                  		tst.b	$21(a1)
0001FE2A 6600                       		bne.s	loc_1A5B4
0001FE2C 6100 B306                  		bsr.w	BossDefeated
0001FE30 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001FE38                            
0001FE38                            loc_1A5B4:
0001FE38 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001FE40 6400                       		bcc.s	locret_1A602
0001FE42 42A8 003C                  		clr.l	$3C(a0)
0001FE46 2268 0034                  		movea.l	$34(a0),a1
0001FE4A 5369 0032                  		subq.w	#1,$32(a1)
0001FE4E 4269 0030                  		clr.w	$30(a1)
0001FE52 5528 0024                  		subq.b	#2,$24(a0)
0001FE56 4E75                       		rts	
0001FE58                            ; ===========================================================================
0001FE58                            
0001FE58                            loc_1A5D4:
0001FE58 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001FE5E 6C00                       		bge.s	loc_1A5E4
0001FE60 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001FE68                            
0001FE68                            loc_1A5E4:
0001FE68 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001FE70 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001FE76 6E00                       		bgt.s	locret_1A602
0001FE78 4268 003E                  		clr.w	$3E(a0)
0001FE7C 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001FE82 4228 0029                  		clr.b	$29(a0)
0001FE86                            
0001FE86                            locret_1A602:
0001FE86 4E75                       		rts	
0001FE88                            ; ===========================================================================
0001FE88                            
0001FE88                            loc_1A604:				; XREF: off_1A590
0001FE88 08E8 0001 0001             		bset	#1,1(a0)
0001FE8E 4A28 0029                  		tst.b	$29(a0)
0001FE92 6600                       		bne.s	loc_1A646
0001FE94 2268 0034                  		movea.l	$34(a0),a1
0001FE98 4A29 0021                  		tst.b	$21(a1)
0001FE9C 6600                       		bne.s	loc_1A626
0001FE9E 6100 B294                  		bsr.w	BossDefeated
0001FEA2 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001FEAA                            
0001FEAA                            loc_1A626:
0001FEAA 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001FEB2 6400                       		bcc.s	locret_1A674
0001FEB4 42A8 003C                  		clr.l	$3C(a0)
0001FEB8 2268 0034                  		movea.l	$34(a0),a1
0001FEBC 5369 0032                  		subq.w	#1,$32(a1)
0001FEC0 4269 0030                  		clr.w	$30(a1)
0001FEC4 5528 0024                  		subq.b	#2,$24(a0)
0001FEC8 4E75                       		rts	
0001FECA                            ; ===========================================================================
0001FECA                            
0001FECA                            loc_1A646:
0001FECA 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001FED0 6D00                       		blt.s	loc_1A656
0001FED2 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001FEDA                            
0001FEDA                            loc_1A656:
0001FEDA 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001FEE2 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001FEE8 6D00                       		blt.s	locret_1A674
0001FEEA 4268 003E                  		clr.w	$3E(a0)
0001FEEE 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001FEF4 4228 0029                  		clr.b	$29(a0)
0001FEF8                            
0001FEF8                            locret_1A674:
0001FEF8 4E75                       		rts	
0001FEFA                            ; ===========================================================================
0001FEFA                            ; ---------------------------------------------------------------------------
0001FEFA                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001FEFA                            ; ---------------------------------------------------------------------------
0001FEFA                            Map_obj84:
0001FEFA                            	include "_maps\obj84.asm"
0001FEFA                            ; ---------------------------------------------------------------------------
0001FEFA                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001FEFA                            ; ---------------------------------------------------------------------------
0001FEFA 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001FEFE 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001FF02 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001FF06 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001FF0A 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001FF0E 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001FF12 06                         byte_1A68E:	dc.b 6
0001FF13 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001FF18 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001FF1D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001FF22 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001FF27 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001FF2C B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001FF31 08                         byte_1A6AD:	dc.b 8
0001FF32 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001FF37 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001FF3C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001FF41 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001FF46 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001FF4B B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001FF50 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001FF55 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001FF5A 0A                         byte_1A6D6:	dc.b $A
0001FF5B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001FF60 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001FF65 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001FF6A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001FF6F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001FF74 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001FF79 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001FF7E D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001FF83 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001FF88 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001FF8D 0C                         byte_1A709:	dc.b $C
0001FF8E A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001FF93 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001FF98 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001FF9D B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001FFA2 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001FFA7 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001FFAC D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001FFB1 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001FFB6 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001FFBB F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001FFC0 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001FFC5 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001FFCA 0D                         byte_1A746:	dc.b $D
0001FFCB A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001FFD0 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001FFD5 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001FFDA B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001FFDF B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001FFE4 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001FFE9 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001FFEE D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001FFF3 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001FFF8 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001FFFD 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
00020002 180F 4840 00               		dc.b $18, $F, $48, $40,	0
00020007 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0002000C 0E                         byte_1A788:	dc.b $E
0002000D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
00020012 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
00020017 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0002001C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
00020021 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
00020026 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0002002B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
00020030 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
00020035 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0002003A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0002003F 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
00020044 180F 4840 00               		dc.b $18, $F, $48, $40,	0
00020049 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0002004E 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
00020053 02                         byte_1A7CF:	dc.b 2
00020054 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
00020059 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0002005E                            		even
0002005E                            		even
0002005E                            
0002005E                            ; ===========================================================================
0002005E                            ; ---------------------------------------------------------------------------
0002005E                            ; Object 86 - energy balls (FZ)
0002005E                            ; ---------------------------------------------------------------------------
0002005E                            
0002005E                            Obj86:					; XREF: Obj_Index
0002005E 7000                       		moveq	#0,d0
00020060 1028 0024                  		move.b	$24(a0),d0
00020064 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
00020068 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0002006C                            ; ===========================================================================
0002006C 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0002006E 0000                       		dc.w Obj86_Generator-Obj86_Index
00020070 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
00020072 0000                       		dc.w loc_1A962-Obj86_Index
00020074 0000                       		dc.w loc_1A982-Obj86_Index
00020076                            ; ===========================================================================
00020076                            
00020076                            Obj86_Main:				; XREF: Obj86_Index
00020076 317C 2588 0008             		move.w	#$2588,8(a0)
0002007C 317C 053C 000C             		move.w	#$53C,$C(a0)
00020082 317C 0300 0002             		move.w	#$300,2(a0)
00020088 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
00020090 117C 0000 001C             		move.b	#0,$1C(a0)
00020096 117C 0003 0018             		move.b	#3,$18(a0)
0002009C 117C 0008 0017             		move.b	#8,$17(a0)
000200A2 117C 0008 0016             		move.b	#8,$16(a0)
000200A8 117C 0004 0001             		move.b	#4,1(a0)
000200AE 08E8 0007 0001             		bset	#7,1(a0)
000200B4 5428 0024                  		addq.b	#2,$24(a0)
000200B8                            
000200B8                            Obj86_Generator:			; XREF: Obj86_Index
000200B8 2268 0034                  		movea.l	$34(a0),a1
000200BC 0C29 0006 0034             		cmpi.b	#6,$34(a1)
000200C2 6600                       		bne.s	loc_1A850
000200C4 10BC 003F                  		move.b	#$3F,(a0)
000200C8 117C 0000 0024             		move.b	#0,$24(a0)
000200CE 4EF9 0001 045A             		jmp	DisplaySprite
000200D4                            ; ===========================================================================
000200D4                            
000200D4                            loc_1A850:
000200D4 117C 0000 001C             		move.b	#0,$1C(a0)
000200DA 4A28 0029                  		tst.b	$29(a0)
000200DE 6700                       		beq.s	loc_1A86C
000200E0 5428 0024                  		addq.b	#2,$24(a0)
000200E4 117C 0001 001C             		move.b	#1,$1C(a0)
000200EA 117C 003E 0028             		move.b	#$3E,$28(a0)
000200F0                            
000200F0                            loc_1A86C:
000200F0 323C 0013                  		move.w	#$13,d1
000200F4 343C 0008                  		move.w	#8,d2
000200F8 363C 0011                  		move.w	#$11,d3
000200FC 3828 0008                  		move.w	8(a0),d4
00020100 4EB9 0001 2A50             		jsr	SolidObject
00020106 3038 D008                  		move.w	($FFFFD008).w,d0
0002010A 9068 0008                  		sub.w	8(a0),d0
0002010E 6B00                       		bmi.s	loc_1A89A
00020110 0440 0140                  		subi.w	#$140,d0
00020114 6B00                       		bmi.s	loc_1A89A
00020116 4A28 0001                  		tst.b	1(a0)
0002011A 6A00 FBB0                  		bpl.w	Obj84_Delete
0002011E                            
0002011E                            loc_1A89A:
0002011E 43FA 0000                  		lea	Ani_obj86(pc),a1
00020122 4EB9 0000 D3EA             		jsr	AnimateSprite
00020128 4EF9 0001 045A             		jmp	DisplaySprite
0002012E                            ; ===========================================================================
0002012E                            
0002012E                            Obj86_MakeBalls:			; XREF: Obj86_Index
0002012E 4A28 0029                  		tst.b	$29(a0)
00020132 6700 0000                  		beq.w	loc_1A954
00020136 4228 0029                  		clr.b	$29(a0)
0002013A D068 0030                  		add.w	$30(a0),d0
0002013E 0240 001E                  		andi.w	#$1E,d0
00020142 D4C0                       		adda.w	d0,a2
00020144 5868 0030                  		addq.w	#4,$30(a0)
00020148 4268 0032                  		clr.w	$32(a0)
0002014C 7403                       		moveq	#3,d2
0002014E                            
0002014E                            Obj86_Loop:
0002014E 4EB9 0001 08F6             		jsr	SingleObjLoad2
00020154 6600 0000                  		bne.w	loc_1A954
00020158 12BC 0086                  		move.b	#$86,(a1)
0002015C 3368 0008 0008             		move.w	8(a0),8(a1)
00020162 337C 053C 000C             		move.w	#$53C,$C(a1)
00020168 137C 0008 0024             		move.b	#8,$24(a1)
0002016E 337C 2300 0002             		move.w	#$2300,2(a1)
00020174 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0002017C 137C 000C 0016             		move.b	#$C,$16(a1)
00020182 137C 000C 0017             		move.b	#$C,$17(a1)
00020188 137C 0000 0020             		move.b	#0,$20(a1)
0002018E 137C 0003 0018             		move.b	#3,$18(a1)
00020194 337C 003E 0028             		move.w	#$3E,$28(a1)
0002019A 137C 0004 0001             		move.b	#4,1(a1)
000201A0 08E9 0007 0001             		bset	#7,1(a1)
000201A6 2348 0034                  		move.l	a0,$34(a1)
000201AA 4EB9 0000 2CA2             		jsr	(RandomNumber).l
000201B0 3228 0032                  		move.w	$32(a0),d1
000201B4 C3FC FFB1                  		muls.w	#-$4F,d1
000201B8 0641 2578                  		addi.w	#$2578,d1
000201BC 0240 001F                  		andi.w	#$1F,d0
000201C0 0440 0010                  		subi.w	#$10,d0
000201C4 D041                       		add.w	d1,d0
000201C6 3340 0030                  		move.w	d0,$30(a1)
000201CA 5268 0032                  		addq.w	#1,$32(a0)
000201CE 3168 0032 0038             		move.w	$32(a0),$38(a0)
000201D4 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
000201D8                            
000201D8                            loc_1A954:
000201D8 4A68 0032                  		tst.w	$32(a0)
000201DC 6600                       		bne.s	loc_1A95E
000201DE 5428 0024                  		addq.b	#2,$24(a0)
000201E2                            
000201E2                            loc_1A95E:
000201E2 6000 FF0C                  		bra.w	loc_1A86C
000201E6                            ; ===========================================================================
000201E6                            
000201E6                            loc_1A962:				; XREF: Obj86_Index
000201E6 117C 0002 001C             		move.b	#2,$1C(a0)
000201EC 4A68 0038                  		tst.w	$38(a0)
000201F0 6600                       		bne.s	loc_1A97E
000201F2 117C 0002 0024             		move.b	#2,$24(a0)
000201F8 2268 0034                  		movea.l	$34(a0),a1
000201FC 337C FFFF 0032             		move.w	#-1,$32(a1)
00020202                            
00020202                            loc_1A97E:
00020202 6000 FEEC                  		bra.w	loc_1A86C
00020206                            ; ===========================================================================
00020206                            
00020206                            loc_1A982:				; XREF: Obj86_Index
00020206 7000                       		moveq	#0,d0
00020208 1028 0025                  		move.b	$25(a0),d0
0002020C 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
00020210 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
00020214 43FA 0000                  		lea	Ani_obj86a(pc),a1
00020218 4EB9 0000 D3EA             		jsr	AnimateSprite
0002021E 4EF9 0001 045A             		jmp	DisplaySprite
00020224                            ; ===========================================================================
00020224 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
00020226 0000                       		dc.w loc_1A9C0-Obj86_Index2
00020228 0000                       		dc.w loc_1AA1E-Obj86_Index2
0002022A                            ; ===========================================================================
0002022A                            
0002022A                            loc_1A9A6:				; XREF: Obj86_Index2
0002022A 3028 0030                  		move.w	$30(a0),d0
0002022E 9068 0008                  		sub.w	8(a0),d0
00020232 E940                       		asl.w	#4,d0
00020234 3140 0010                  		move.w	d0,$10(a0)
00020238 317C 0020 0028             		move.w	#$20,$28(a0)
0002023E 5428 0025                  		addq.b	#2,$25(a0)
00020242 4E75                       		rts
00020244                            ; ===========================================================================
00020244                            
00020244                            loc_1A9C0:				; XREF: Obj86_Index2
00020244 4A68 0010                  		tst.w	$10(a0)
00020248 6700                       		beq.s	loc_1A9E6
0002024A 4EB9 0001 0434             		jsr	SpeedToPos
00020250 3028 0008                  		move.w	8(a0),d0
00020254 9068 0030                  		sub.w	$30(a0),d0
00020258 6400                       		bcc.s	loc_1A9E6
0002025A 4268 0010                  		clr.w	$10(a0)
0002025E D168 0008                  		add.w	d0,8(a0)
00020262 2268 0034                  		movea.l	$34(a0),a1
00020266 5369 0032                  		subq.w	#1,$32(a1)
0002026A                            
0002026A                            loc_1A9E6:
0002026A 117C 0000 001C             		move.b	#0,$1C(a0)
00020270 5368 0028                  		subq.w	#1,$28(a0)
00020274 6600                       		bne.s	locret_1AA1C
00020276 5428 0025                  		addq.b	#2,$25(a0)
0002027A 117C 0001 001C             		move.b	#1,$1C(a0)
00020280 117C 009A 0020             		move.b	#$9A,$20(a0)
00020286 317C 00B4 0028             		move.w	#$B4,$28(a0)
0002028C 7000                       		moveq	#0,d0
0002028E 3038 D008                  		move.w	($FFFFD008).w,d0
00020292 9068 0008                  		sub.w	8(a0),d0
00020296 3140 0010                  		move.w	d0,$10(a0)
0002029A                            		;move.w	#$140,$12(a0)
0002029A 317C 0160 0012                              move.w	#$160,$12(a0)
000202A0                            
000202A0                            locret_1AA1C:
000202A0 4E75                       		rts
000202A2                            ; ===========================================================================
000202A2                            
000202A2                            loc_1AA1E:				; XREF: Obj86_Index2
000202A2 4EB9 0001 0434             		jsr	SpeedToPos
000202A8 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
000202AE 6400                       		bcc.s	loc_1AA34
000202B0 5368 0028                  		subq.w	#1,$28(a0)
000202B4 6700                       		beq.s	loc_1AA34
000202B6 4E75                       		rts
000202B8                            ; ===========================================================================
000202B8                            
000202B8                            loc_1AA34:
000202B8 2268 0034                  		movea.l	$34(a0),a1
000202BC 5369 0038                  		subq.w	#1,$38(a1)
000202C0 6000 FA0A                  		bra.w	Obj84_Delete
000202C4                            ; ===========================================================================
000202C4                            Ani_obj86:
000202C4                            	include "_anim\obj86.asm"
000202C4                            ; ---------------------------------------------------------------------------
000202C4                            ; Animation script - energy ball launcher (FZ)
000202C4                            ; ---------------------------------------------------------------------------
000202C4 0000                       		dc.w byte_1AA46-Ani_obj86
000202C6 0000                       		dc.w byte_1AA4A-Ani_obj86
000202C8 0000                       		dc.w byte_1AA50-Ani_obj86
000202CA 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
000202CE 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
000202D4 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
000202DA                            		even
000202DA                            		even
000202DA                            
000202DA                            ; ---------------------------------------------------------------------------
000202DA                            ; Sprite mappings - energy ball	launcher (FZ)
000202DA                            ; ---------------------------------------------------------------------------
000202DA                            Map_obj86:
000202DA                            	include "_maps\obj86.asm"
000202DA                            ; ---------------------------------------------------------------------------
000202DA                            ; Sprite mappings - energy ball	launcher (FZ)
000202DA                            ; ---------------------------------------------------------------------------
000202DA 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
000202DE 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
000202E2 01                         byte_1AA5E:	dc.b 1
000202E3 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
000202E8 01                         byte_1AA64:	dc.b 1
000202E9 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
000202EE 01                         byte_1AA6A:	dc.b 1
000202EF F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
000202F4 01                         byte_1AA70:	dc.b 1
000202F5 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
000202FA                            		even
000202FA                            		even
000202FA                            
000202FA                            Ani_obj86a:
000202FA                            	include "_anim\obj86a.asm"
000202FA                            ; ---------------------------------------------------------------------------
000202FA                            ; Animation script - energy balls (FZ)
000202FA                            ; ---------------------------------------------------------------------------
000202FA 0000                       		dc.w byte_1AA7A-Ani_obj86a
000202FC 0000                       		dc.w byte_1AA9C-Ani_obj86a
000202FE 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0002030D 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0002031C 0A05 FF00                  		dc.b $A, 5, $FF, 0
00020320 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0002032A                            		even
0002032A                            		even
0002032A                            
0002032A                            ; ---------------------------------------------------------------------------
0002032A                            ; Sprite mappings - energy balls (FZ)
0002032A                            ; ---------------------------------------------------------------------------
0002032A                            Map_obj86a:
0002032A                            	include "_maps\obj86a.asm"
0002032A                            ; ---------------------------------------------------------------------------
0002032A                            ; Sprite mappings - energy balls (FZ)
0002032A                            ; ---------------------------------------------------------------------------
0002032A 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0002032E 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
00020332 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
00020336 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0002033A 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0002033E 0000                       		dc.w byte_1AB20-Map_obj86a
00020340 02                         byte_1AABC:	dc.b 2
00020341 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
00020346 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0002034B 02                         byte_1AAC7:	dc.b 2
0002034C F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
00020351 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
00020356 02                         byte_1AAD2:	dc.b 2
00020357 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0002035C 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
00020361 02                         byte_1AADD:	dc.b 2
00020362 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
00020367 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0002036C 02                         byte_1AAE8:	dc.b 2
0002036D F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
00020372 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
00020377 02                         byte_1AAF3:	dc.b 2
00020378 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0002037D F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
00020382 01                         byte_1AAFE:	dc.b 1
00020383 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
00020388 01                         byte_1AB04:	dc.b 1
00020389 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0002038E 02                         byte_1AB0A:	dc.b 2
0002038F F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
00020394 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
00020399 02                         byte_1AB15:	dc.b 2
0002039A F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0002039F F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
000203A4 00                         byte_1AB20:	dc.b 0
000203A6 00                         		even
000203A6 00                         		even
000203A6                            
000203A6                            ; ===========================================================================
000203A6                            ; ---------------------------------------------------------------------------
000203A6                            ; Object 3E - prison capsule
000203A6                            ; ---------------------------------------------------------------------------
000203A6                            
000203A6                            Obj3E:					; XREF: Obj_Index
000203A6 7000                       		moveq	#0,d0
000203A8 1028 0024                  		move.b	$24(a0),d0
000203AC 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
000203B0 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
000203B4 3028 0008                  		move.w	8(a0),d0
000203B8 0240 FF80                  		andi.w	#$FF80,d0
000203BC 3238 F700                  		move.w	($FFFFF700).w,d1
000203C0 0441 0080                  		subi.w	#$80,d1
000203C4 0241 FF80                  		andi.w	#$FF80,d1
000203C8 9041                       		sub.w	d1,d0
000203CA 0C40 0280                  		cmpi.w	#$280,d0
000203CE 6200                       		bhi.s	Obj3E_Delete
000203D0 4EF9 0001 045A             		jmp	DisplaySprite
000203D6                            ; ===========================================================================
000203D6                            
000203D6                            Obj3E_Delete:
000203D6 4EF9 0001 0496             		jmp	DeleteObject
000203DC                            ; ===========================================================================
000203DC 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
000203DE 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
000203E0 0000                       		dc.w Obj3E_Switched-Obj3E_Index
000203E2 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
000203E4 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
000203E6 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
000203E8 0000                       		dc.w Obj3E_Animals-Obj3E_Index
000203EA 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
000203EC                            
000203EC 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
000203F0 040C 0501                  		dc.b 4,	$C, 5, 1
000203F4 0610 0403                  		dc.b 6,	$10, 4,	3
000203F8 0810 0305                  		dc.b 8,	$10, 3,	5
000203FC                            ; ===========================================================================
000203FC                            
000203FC                            Obj3E_Main:				; XREF: Obj3E_Index
000203FC 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
00020404 317C 049D 0002             		move.w	#$49D,2(a0)
0002040A 117C 0004 0001             		move.b	#4,1(a0)
00020410 3168 000C 0030             		move.w	$C(a0),$30(a0)
00020416 7000                       		moveq	#0,d0
00020418 1028 0028                  		move.b	$28(a0),d0
0002041C E548                       		lsl.w	#2,d0
0002041E 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
00020422 1159 0024                  		move.b	(a1)+,$24(a0)
00020426 1159 0019                  		move.b	(a1)+,$19(a0)
0002042A 1159 0018                  		move.b	(a1)+,$18(a0)
0002042E 1159 001A                  		move.b	(a1)+,$1A(a0)
00020432 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
00020436 6600                       		bne.s	Obj3E_Not02	; if not, branch
00020438 117C 0006 0020             		move.b	#6,$20(a0)
0002043E 117C 0008 0021             		move.b	#8,$21(a0)
00020444                            
00020444                            Obj3E_Not02:
00020444 4E75                       		rts	
00020446                            ; ===========================================================================
00020446                            
00020446                            Obj3E_BodyMain:				; XREF: Obj3E_Index
00020446 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0002044C 6700                       		beq.s	Obj3E_ChkOpened
0002044E 323C 002B                  		move.w	#$2B,d1
00020452 343C 0018                  		move.w	#$18,d2
00020456 363C 0018                  		move.w	#$18,d3
0002045A 3828 0008                  		move.w	8(a0),d4
0002045E 4EF9 0001 2A50             		jmp	SolidObject
00020464                            ; ===========================================================================
00020464                            
00020464                            Obj3E_ChkOpened:
00020464 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
00020468 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0002046A 4228 0025                  		clr.b	$25(a0)
0002046E 08B8 0003 D022             		bclr	#3,($FFFFD022).w
00020474 08F8 0001 D022             		bset	#1,($FFFFD022).w
0002047A                            
0002047A                            Obj3E_DoOpen:
0002047A 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
00020480 4E75                       		rts	
00020482                            ; ===========================================================================
00020482                            
00020482                            Obj3E_Switched:				; XREF: Obj3E_Index
00020482 323C 0017                  		move.w	#$17,d1
00020486 343C 0008                  		move.w	#8,d2
0002048A 363C 0008                  		move.w	#8,d3
0002048E 3828 0008                  		move.w	8(a0),d4
00020492 4EB9 0001 2A50             		jsr	SolidObject
00020498 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0002049E 4EB9 0000 D3EA             		jsr	AnimateSprite
000204A4 3168 0030 000C             		move.w	$30(a0),$C(a0)
000204AA 4A28 0025                  		tst.b	$25(a0)
000204AE 6700                       		beq.s	locret_1AC60
000204B0 5068 000C                  		addq.w	#8,$C(a0)
000204B4 117C 000A 0024             		move.b	#$A,$24(a0)
000204BA 317C 003C 001E             		move.w	#$3C,$1E(a0)
000204C0 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000204C4 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
000204C8                            		;move.b	#1,($FFFFF7CC).w ; lock	controls
000204C8                            		;move.w	#(Right)<<8,(SonicControl) ; make Sonic run to the right
000204C8 4228 0025                  		clr.b	$25(a0)
000204CC 08B8 0003 D022             		bclr	#3,($FFFFD022).w
000204D2 08F8 0001 D022             		bset	#1,($FFFFD022).w
000204D8                            
000204D8                            locret_1AC60:
000204D8 4E75                       		rts	
000204DA                            ; ===========================================================================
000204DA                            
000204DA                            Obj3E_Explosion:			; XREF: Obj3E_Index
000204DA 7007                       		moveq	#7,d0
000204DC C038 FE0F                  		and.b	($FFFFFE0F).w,d0
000204E0 6600                       		bne.s	loc_1ACA0
000204E2 4EB9 0001 08E0             		jsr	SingleObjLoad
000204E8 6600                       		bne.s	loc_1ACA0
000204EA 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
000204EE 3368 0008 0008             		move.w	8(a0),8(a1)
000204F4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000204FA 4EB9 0000 2CA2             		jsr	(RandomNumber).l
00020500 7200                       		moveq	#0,d1
00020502 1200                       		move.b	d0,d1
00020504 E409                       		lsr.b	#2,d1
00020506 0441 0020                  		subi.w	#$20,d1
0002050A D369 0008                  		add.w	d1,8(a1)
0002050E E048                       		lsr.w	#8,d0
00020510 E608                       		lsr.b	#3,d0
00020512 D169 000C                  		add.w	d0,$C(a1)
00020516                            
00020516                            loc_1ACA0:
00020516 5368 001E                  		subq.w	#1,$1E(a0)
0002051A 6700                       		beq.s	Obj3E_MakeAnimal
0002051C 4E75                       		rts	
0002051E                            ; ===========================================================================
0002051E                            
0002051E                            Obj3E_MakeAnimal:
0002051E 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
00020524 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0002052A 117C 0006 001A             		move.b	#6,$1A(a0)
00020530 317C 0096 001E             		move.w	#$96,$1E(a0)
00020536 0668 0020 000C             		addi.w	#$20,$C(a0)
0002053C 7C07                       		moveq	#7,d6
0002053E 3A3C 009A                  		move.w	#$9A,d5
00020542 78E4                       		moveq	#-$1C,d4
00020544                            
00020544                            Obj3E_Loop:
00020544 4EB9 0001 08E0             		jsr	SingleObjLoad
0002054A 6600                       		bne.s	locret_1ACF8
0002054C 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00020550 3368 0008 0008             		move.w	8(a0),8(a1)
00020556 3368 000C 000C             		move.w	$C(a0),$C(a1)
0002055C D969 0008                  		add.w	d4,8(a1)
00020560 5E44                       		addq.w	#7,d4
00020562 3345 0036                  		move.w	d5,$36(a1)
00020566 5145                       		subq.w	#8,d5
00020568 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0002056C                            
0002056C                            locret_1ACF8:
0002056C 4E75                       		rts	
0002056E                            ; ===========================================================================
0002056E                            
0002056E                            Obj3E_Animals:				; XREF: Obj3E_Index
0002056E 7007                       		moveq	#7,d0
00020570 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
00020574 6600                       		bne.s	loc_1AD38
00020576 4EB9 0001 08E0             		jsr	SingleObjLoad
0002057C 6600                       		bne.s	loc_1AD38
0002057E 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00020582 3368 0008 0008             		move.w	8(a0),8(a1)
00020588 3368 000C 000C             		move.w	$C(a0),$C(a1)
0002058E 4EB9 0000 2CA2             		jsr	(RandomNumber).l
00020594 0240 001F                  		andi.w	#$1F,d0
00020598 5D40                       		subq.w	#6,d0
0002059A 4A41                       		tst.w	d1
0002059C 6A00                       		bpl.s	loc_1AD2E
0002059E 4440                       		neg.w	d0
000205A0                            
000205A0                            loc_1AD2E:
000205A0 D169 0008                  		add.w	d0,8(a1)
000205A4 337C 000C 0036             		move.w	#$C,$36(a1)
000205AA                            
000205AA                            loc_1AD38:
000205AA 5368 001E                  		subq.w	#1,$1E(a0)
000205AE 6600                       		bne.s	locret_1AD48
000205B0 5428 0024                  		addq.b	#2,$24(a0)
000205B4 317C 00B4 001E             		move.w	#180,$1E(a0)
000205BA                            
000205BA                            locret_1AD48:
000205BA 4E75                       		rts	
000205BC                            ; ===========================================================================
000205BC                            
000205BC                            Obj3E_EndAct:				; XREF: Obj3E_Index
000205BC 703E                       		moveq	#$3E,d0
000205BE 7228                       		moveq	#$28,d1
000205C0 7440                       		moveq	#$40,d2
000205C2 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
000205C6                            
000205C6                            Obj3E_FindObj28:
000205C6 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
000205C8 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
000205CA D2C2                       		adda.w	d2,a1		; next object RAM
000205CC 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
000205D0 317C 0000 0014                             move.w  #$0,$14(a0)     ;clear all speeds
000205D6 11FC 0001 F7CC                             move.b	#1,($FFFFF7CC).w	; lock	controls
000205DC 337C 0000 0014                             move.w	#0,$14(a1)	; stop Sonic moving
000205E2 11FC 0001 F7CC                             move.b	#1,($FFFFF7CC).w	; lock	controls
000205E8 31FC 0008 F602             		move.w	#(Right)<<0,(SonicControl) ; make Sonic stand
000205EE 11FC 0001 FFFE                             move.b	#1,($FFFFFFFE).w     ; set win flag
000205F4                            
000205F4 4EB9 0001 1D18             		jsr	GotThroughAct
000205FA 4EF9 0001 0496             		jmp	DeleteObject
00020600                            ; ===========================================================================
00020600                            
00020600                            Obj3E_Obj28Found:
00020600 4E75                       		rts	
00020602                            ; ===========================================================================
00020602                            Ani_obj3E:
00020602                            	include "_anim\obj3E.asm"
00020602                            ; ---------------------------------------------------------------------------
00020602                            ; Animation script - prison capsule
00020602                            ; ---------------------------------------------------------------------------
00020602 0000                       		dc.w byte_1AD70-Ani_obj3E
00020604 0000                       		dc.w byte_1AD70-Ani_obj3E
00020606 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0002060A                            		even
0002060A                            		even
0002060A                            
0002060A                            ; ---------------------------------------------------------------------------
0002060A                            ; Sprite mappings - prison capsule
0002060A                            ; ---------------------------------------------------------------------------
0002060A                            Map_obj3E:
0002060A                            	include "_maps\obj3E.asm"
0002060A                            ; ---------------------------------------------------------------------------
0002060A                            ; Sprite mappings - prison capsule
0002060A                            ; ---------------------------------------------------------------------------
0002060A 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0002060E 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
00020612 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
00020616 0000                       		dc.w byte_1ADE2-Map_obj3E
00020618 07                         byte_1AD82:	dc.b 7
00020619 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0002061E E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
00020623 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
00020628 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0002062D F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
00020632 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
00020637 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0002063C 01                         byte_1ADA6:	dc.b 1
0002063D F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
00020642 06                         byte_1ADAC:	dc.b 6
00020643 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
00020648 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0002064D 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
00020652 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
00020657 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0002065C 100D 2034 00               		dc.b $10, $D, $20, $34,	0
00020661 01                         byte_1ADCB:	dc.b 1
00020662 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
00020667 02                         byte_1ADD1:	dc.b 2
00020668 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0002066D 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
00020672 01                         byte_1ADDC:	dc.b 1
00020673 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
00020678 00                         byte_1ADE2:	dc.b 0
0002067A 00                         		even
0002067A 00                         		even
0002067A                            
0002067A                            ; ---------------------------------------------------------------------------
0002067A                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0002067A                            ; ---------------------------------------------------------------------------
0002067A                            
0002067A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002067A                            
0002067A                            
0002067A                            TouchResponse:				; XREF: Obj01
0002067A 4E71                       		nop	
0002067C 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
00020680 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
00020684 5142                       		subq.w	#8,d2
00020686 7A00                       		moveq	#0,d5
00020688 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0002068C 5705                       		subq.b	#3,d5
0002068E 9645                       		sub.w	d5,d3
00020690 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
00020696 6600                       		bne.s	Touch_NoDuck	; if not, branch
00020698 0643 000C                  		addi.w	#$C,d3
0002069C 7A0A                       		moveq	#$A,d5
0002069E                            
0002069E                            Touch_NoDuck:
0002069E 383C 0010                  		move.w	#$10,d4
000206A2 DA45                       		add.w	d5,d5
000206A4 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
000206A8 3C3C 005F                  		move.w	#$5F,d6
000206AC                            
000206AC                            Touch_Loop:
000206AC 4A29 0001                  		tst.b	1(a1)		; is object on screen?
000206B0 6A00                       		bpl.s	Touch_NextObj	; if not, branch
000206B2 1029 0020                  		move.b	$20(a1),d0	; load touch response number
000206B6 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
000206B8                            
000206B8                            Touch_NextObj:
000206B8 43E9 0040                  		lea	$40(a1),a1	; next object RAM
000206BC 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
000206C0                            
000206C0 7000                       		moveq	#0,d0
000206C2 4E75                       		rts	
000206C4                            ; ===========================================================================
000206C4 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
000206C6 0C14                       		dc.b   $C, $14
000206C8 140C                       		dc.b  $14,  $C
000206CA 0410                       		dc.b	4, $10
000206CC 0C12                       		dc.b   $C, $12
000206CE 1010                       		dc.b  $10, $10
000206D0 0606                       		dc.b	6,   6
000206D2 180C                       		dc.b  $18,  $C
000206D4 0C10                       		dc.b   $C, $10
000206D6 100C                       		dc.b  $10,  $C
000206D8 0808                       		dc.b	8,   8
000206DA 1410                       		dc.b  $14, $10
000206DC 1408                       		dc.b  $14,   8
000206DE 0E0E                       		dc.b   $E,  $E
000206E0 1818                       		dc.b  $18, $18
000206E2 2810                       		dc.b  $28, $10
000206E4 1018                       		dc.b  $10, $18
000206E6 0810                       		dc.b	8, $10
000206E8 2070                       		dc.b  $20, $70
000206EA 4020                       		dc.b  $40, $20
000206EC 8020                       		dc.b  $80, $20
000206EE 2020                       		dc.b  $20, $20
000206F0 0808                       		dc.b	8,   8
000206F2 0404                       		dc.b	4,   4
000206F4 2008                       		dc.b  $20,   8
000206F6 0C0C                       		dc.b   $C,  $C
000206F8 0804                       		dc.b	8,   4
000206FA 1804                       		dc.b  $18,   4
000206FC 2804                       		dc.b  $28,   4
000206FE 0408                       		dc.b	4,   8
00020700 0418                       		dc.b	4, $18
00020702 0428                       		dc.b	4, $28
00020704 0420                       		dc.b	4, $20
00020706 1818                       		dc.b  $18, $18
00020708 0C18                       		dc.b   $C, $18
0002070A 4808                       		dc.b  $48,   8
0002070C                            ; ===========================================================================
0002070C                            
0002070C                            Touch_Height:				; XREF: TouchResponse
0002070C 0240 003F                  		andi.w	#$3F,d0
00020710 D040                       		add.w	d0,d0
00020712 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
00020716 7200                       		moveq	#0,d1
00020718 121A                       		move.b	(a2)+,d1
0002071A 3029 0008                  		move.w	8(a1),d0
0002071E 9041                       		sub.w	d1,d0
00020720 9042                       		sub.w	d2,d0
00020722 6400                       		bcc.s	loc_1AE98
00020724 D241                       		add.w	d1,d1
00020726 D041                       		add.w	d1,d0
00020728 6500                       		bcs.s	Touch_Width
0002072A 6000 FF8C                  		bra.w	Touch_NextObj
0002072E                            ; ===========================================================================
0002072E                            
0002072E                            loc_1AE98:
0002072E B044                       		cmp.w	d4,d0
00020730 6200 FF86                  		bhi.w	Touch_NextObj
00020734                            
00020734                            Touch_Width:
00020734 7200                       		moveq	#0,d1
00020736 121A                       		move.b	(a2)+,d1
00020738 3029 000C                  		move.w	$C(a1),d0
0002073C 9041                       		sub.w	d1,d0
0002073E 9043                       		sub.w	d3,d0
00020740 6400                       		bcc.s	loc_1AEB6
00020742 D241                       		add.w	d1,d1
00020744 D240                       		add.w	d0,d1
00020746 6500                       		bcs.s	Touch_ChkValue
00020748 6000 FF6E                  		bra.w	Touch_NextObj
0002074C                            ; ===========================================================================
0002074C                            
0002074C                            loc_1AEB6:
0002074C B045                       		cmp.w	d5,d0
0002074E 6200 FF68                  		bhi.w	Touch_NextObj
00020752                            
00020752                            Touch_ChkValue:
00020752 1229 0020                  		move.b	$20(a1),d1	; load touch response number
00020756 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0002075A 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0002075E 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
00020762 6700 0000                  		beq.w	Touch_Special	; if yes, branch
00020766 4A01                       		tst.b	d1		; is touch response $80-$BF ?
00020768 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0002076C                            
0002076C                            ; touch	response is $40-$7F
0002076C                            
0002076C 1029 0020                  		move.b	$20(a1),d0
00020770 0200 003F                  		andi.b	#$3F,d0
00020774 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
00020778 6700                       		beq.s	Touch_Monitor	; if yes, branch
0002077A 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
00020780 6400 0000                  		bcc.w	locret_1AEF2
00020784 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
00020788                            
00020788                            locret_1AEF2:
00020788 4E75                       		rts	
0002078A                            ; ===========================================================================
0002078A                            
0002078A                            Touch_Monitor:
0002078A 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0002078E 6A00                       		bpl.s	loc_1AF1E	; if not, branch
00020790 3028 000C                  		move.w	$C(a0),d0
00020794 0440 0010                  		subi.w	#$10,d0
00020798 B069 000C                  		cmp.w	$C(a1),d0
0002079C 6500                       		bcs.s	locret_1AF2E
0002079E 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
000207A2 337C FE80 0012             		move.w	#-$180,$12(a1)
000207A8 4A29 0025                  		tst.b	$25(a1)
000207AC 6600                       		bne.s	locret_1AF2E
000207AE 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
000207B2 4E75                       		rts	
000207B4                            ; ===========================================================================
000207B4                            
000207B4                            loc_1AF1E:
000207B4 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
000207BA 6600                       		bne.s	locret_1AF2E
000207BC 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
000207C0 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
000207C4                            
000207C4                            locret_1AF2E:
000207C4 4E75                       		rts	
000207C6                            ; ===========================================================================
000207C6                            
000207C6                            Touch_Enemy:				; XREF: Touch_ChkValue
000207C6 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
000207CA 6600                       		bne.s	loc_1AF40	; if yes, branch
000207CC 0C28 001F 001C             		cmpi.b	#$1F,$1C(a0)	; is Sonic Spin Dashing?
000207D2 6700 0000                  		beq.w	loc_1AF40	; if yes, branch
000207D6                                         ;   cmpi.w	#$302,($FFFFFE10).w ; is level SLZ3?
000207D6                            		;bne.s   Touch_EnemyEspioAnim	
000207D6 4A38 F7AA                                  tst.b   ($FFFFF7AA).w
000207DA 6700                                       beq.s   Touch_EnemyEspioAnim
000207DC 6000                                       bra.s   Touch_EnemySonicAnim
000207DE                            ;==========================================================
000207DE                            
000207DE                            Touch_EnemyEspioAnim:
000207DE 0C28 0025 001C                             cmpi.b	#$25,$1C(a0)	; is character whirling (Espio only special)?
000207E4 6700 0000                  		beq.w	loc_1AF40	; if yes, branch
000207E8                            
000207E8                            Touch_EnemySonicAnim:
000207E8 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
000207EE 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
000207F2                            
000207F2                            loc_1AF40:
000207F2 4A29 0021                  		tst.b	$21(a1)		; test hit counter
000207F6 6700                       		beq.s	Touch_KillEnemy	; if hit counter is zero, branch
000207F8 4468 0010                  		neg.w	$10(a0)		; negate Sonic's speeds
000207FC 4468 0012                  		neg.w	$12(a0)		;
00020800 E0E8 0010                  		asr	$10(a0)
00020804 E0E8 0012                  		asr	$12(a0)
00020808 137C 0000 0020             		move.b	#0,$20(a1)	; clear touch response byte
0002080E 5329 0021                  		subq.b	#1,$21(a1)	; decrease hit counter
00020812 6600                       		bne.s	locret_1AF68	; if hits remain, branch
00020814 08E9 0007 0022             		bset	#7,$22(a1)	; set boss defeated flag
0002081A                            
0002081A                            locret_1AF68:
0002081A 4E75                       		rts	
0002081C                            ; ===========================================================================
0002081C                            
0002081C                            Touch_KillEnemy:
0002081C 08E9 0007 0022             		bset	#7,$22(a1)
00020822 7000                       		moveq	#0,d0
00020824 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
00020828 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0002082C 0C40 0006                  		cmpi.w	#6,d0
00020830 6500                       		bcs.s	loc_1AF82
00020832 7006                       		moveq	#6,d0
00020834                            
00020834                            loc_1AF82:
00020834 3340 003E                  		move.w	d0,$3E(a1)
00020838 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0002083C 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
00020842 6500                       		bcs.s	loc_1AF9C	; if not, branch
00020844 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
00020848 337C 000A 003E             		move.w	#$A,$3E(a1)
0002084E                            
0002084E                            loc_1AF9C:
0002084E 6100 0000                  		bsr.w	AddPoints
00020852 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
00020856 137C 0000 0024             		move.b	#0,$24(a1)
0002085C 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving up-wards?
00020860 6B00                       		bmi.s	loc_1AFC2	; if yes, branch
00020862 3028 000C                  		move.w	$C(a0),d0
00020866 B069 000C                  		cmp.w	$C(a1),d0
0002086A 6400                       		bcc.s	loc_1AFCA
0002086C 4468 0012                  		neg.w	$12(a0)
00020870 4E75                       		rts	
00020872                            ; ===========================================================================
00020872                            
00020872                            loc_1AFC2:
00020872 0668 0100 0012             		addi.w	#$100,$12(a0)	; make Sonic bounce up
00020878 4E75                       		rts
0002087A                            ; ===========================================================================
0002087A                            
0002087A                            loc_1AFCA:
0002087A 0468 0100 0012             		subi.w	#$100,$12(a0)	; make Sonic bounce down
00020880 4E75                       		rts	
00020882                            ; ===========================================================================
00020882 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0002088A                            ; ===========================================================================
0002088A                            
0002088A                            loc_1AFDA:				; XREF: Touch_CatKiller
0002088A 08E9 0007 0022             		bset	#7,$22(a1)
00020890                            
00020890                            Touch_ChkHurt:				; XREF: Touch_ChkValue
00020890 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
00020894 6700                       		beq.s	Touch_Hurt	; if not, branch
00020896                            
00020896                            loc_1AFE6:				; XREF: Touch_Hurt
00020896 70FF                       		moveq	#-1,d0
00020898 4E75                       		rts	
0002089A                            ; ===========================================================================
0002089A                            
0002089A                            Touch_Hurt:				; XREF: Touch_ChkHurt
0002089A 4E71                       		nop	
0002089C 4A68 0030                  		tst.w	$30(a0)
000208A0 66F4                       		bne.s	loc_1AFE6
000208A2 2449                       		movea.l	a1,a2
000208A4                            
000208A4                            ; End of function TouchResponse
000208A4                            ; continue straight to HurtSonic
000208A4                            
000208A4                            ; ---------------------------------------------------------------------------
000208A4                            ; Hurting Sonic	subroutine
000208A4                            ; ---------------------------------------------------------------------------
000208A4                            
000208A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000208A4                            
000208A4                            
000208A4                            HurtSonic:
000208A4 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
000208A8 6600                       		bne.s	Hurt_Shield	; if yes, branch
000208AA 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
000208AE 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
000208B2 4EB9 0001 08E0             		jsr	SingleObjLoad
000208B8 6600                       		bne.s	Hurt_Shield
000208BA 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
000208BE 3368 0008 0008             		move.w	8(a0),8(a1)
000208C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000208CA                            
000208CA                            Hurt_Shield:
000208CA 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
000208D0 117C 0004 0024             		move.b	#4,$24(a0)
000208D6 4EB9 0001 6D18             		jsr	Sonic_ResetOnFloor
000208DC 08E8 0001 0022             		bset	#1,$22(a0)
000208E2 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
000208E8 317C FE00 0010             		move.w	#-$200,$10(a0)
000208EE 0828 0006 0022             		btst	#6,$22(a0)
000208F4 6700                       		beq.s	Hurt_Reverse
000208F6 317C FE00 0012             		move.w	#-$200,$12(a0)
000208FC 317C FF00 0010             		move.w	#-$100,$10(a0)
00020902                            
00020902                            Hurt_Reverse:
00020902 3028 0008                  		move.w	8(a0),d0
00020906 B06A 0008                  		cmp.w	8(a2),d0
0002090A 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0002090C 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
00020910                            
00020910                            Hurt_ChkSpikes:
00020910 117C 0000 0039             		move.b	#0,$39(a0)	; clear Spin Dash flag
00020916 317C 0000 0014                             move.w	#0,$14(a0)
0002091C 117C 001A 001C             		move.b	#$1A,$1C(a0)
00020922 317C 0078 0030             		move.w	#$78,$30(a0)
00020928 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0002092C 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
00020930 6600                       		bne.s	Hurt_Sound	; if not, branch
00020932 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
00020936 6600                       		bne.s	Hurt_Sound	; if not, branch
00020938 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0002093C                            
0002093C                            Hurt_Sound:
0002093C 4EB9 0000 12D0             		jsr	(PlaySound_Special).l
00020942 70FF                       		moveq	#-1,d0
00020944 4E75                       		rts	
00020946                            ; ===========================================================================
00020946                            
00020946                            Hurt_NoRings:
00020946 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0002094A 6600 FF7E                  		bne.w	Hurt_Shield	; if yes, branch
0002094E                            ; End of function HurtSonic
0002094E                            
0002094E                            ; ---------------------------------------------------------------------------
0002094E                            ; Subroutine to	kill Sonic
0002094E                            ; ---------------------------------------------------------------------------
0002094E                            
0002094E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002094E                            
0002094E                            
0002094E                            KillSonic:
0002094E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
00020952 6600                       		bne.s	Kill_NoDeath	; if yes, branch
00020954                                            ;move.w	#0,($FFFFFE20).w ; clear rings
00020954 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0002095A 117C 0006 0024             		move.b	#6,$24(a0)
00020960 4EB9 0001 6D18             		jsr	Sonic_ResetOnFloor
00020966 08E8 0001 0022             		bset	#1,$22(a0)
0002096C 317C F900 0012             		move.w	#-$700,$12(a0)
00020972 317C 0000 0010             		move.w	#0,$10(a0)
00020978 317C 0000 0014             		move.w	#0,$14(a0)
0002097E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00020984 117C 0018 001C             		move.b	#$18,$1C(a0)
0002098A 08E8 0007 0002             		bset	#7,2(a0)
00020990 11FC 0001 FF8E                             move.b  #1,($FFFFFF8E)
00020996 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0002099A 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0002099E 6600                       		bne.s	Kill_Sound
000209A0 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
000209A4                            
000209A4                            Kill_Sound:
000209A4 4EB9 0000 12D0             		jsr	(PlaySound_Special).l
000209AA                            
000209AA                            Kill_NoDeath:
000209AA 70FF                       		moveq	#-1,d0
000209AC 4E75                       		rts	
000209AE                            ; End of function KillSonic
000209AE                            
000209AE                            
000209AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000209AE                            
000209AE                            
000209AE                            Touch_Special:				; XREF: Touch_ChkValue
000209AE 1229 0020                  		move.b	$20(a1),d1
000209B2 0201 003F                  		andi.b	#$3F,d1
000209B6 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
000209BA 6700                       		beq.s	Touch_CatKiller	; if yes, branch
000209BC 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
000209C0 6700                       		beq.s	Touch_Yadrin	; if yes, branch
000209C2 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
000209C6 6700                       		beq.s	Touch_D7orE1	; if yes, branch
000209C8 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
000209CC 6700                       		beq.s	Touch_D7orE1	; if yes, branch
000209CE 4E75                       		rts	
000209D0                            ; ===========================================================================
000209D0                            
000209D0                            Touch_CatKiller:			; XREF: Touch_Special
000209D0 6000 FEB8                  		bra.w	loc_1AFDA
000209D4                            ; ===========================================================================
000209D4                            
000209D4                            Touch_Yadrin:				; XREF: Touch_Special
000209D4 9A40                       		sub.w	d0,d5
000209D6 0C45 0008                  		cmpi.w	#8,d5
000209DA 6400                       		bcc.s	loc_1B144
000209DC 3029 0008                  		move.w	8(a1),d0
000209E0 5940                       		subq.w	#4,d0
000209E2 0829 0000 0022             		btst	#0,$22(a1)
000209E8 6700                       		beq.s	loc_1B130
000209EA 0440 0010                  		subi.w	#$10,d0
000209EE                            
000209EE                            loc_1B130:
000209EE 9042                       		sub.w	d2,d0
000209F0 6400                       		bcc.s	loc_1B13C
000209F2 0640 0018                  		addi.w	#$18,d0
000209F6 6500                       		bcs.s	loc_1B140
000209F8 6000                       		bra.s	loc_1B144
000209FA                            ; ===========================================================================
000209FA                            
000209FA                            loc_1B13C:
000209FA B044                       		cmp.w	d4,d0
000209FC 6200                       		bhi.s	loc_1B144
000209FE                            
000209FE                            loc_1B140:
000209FE                            		;bra.w	Touch_ChkHurt
000209FE 4EF9 0001 1A02                             jmp   Obj47_Hit
00020A04                            ; ===========================================================================
00020A04                            
00020A04                            loc_1B144:
00020A04 6000 FDC0                  		bra.w	Touch_Enemy
00020A08                            ; ===========================================================================
00020A08                            
00020A08                            Touch_D7orE1:				; XREF: Touch_Special
00020A08 5229 0021                  		addq.b	#1,$21(a1)
00020A0C 4E75                       		rts	
00020A0E                            ; End of function Touch_Special
00020A0E                            
00020A0E                            
00020A0E                                            include "#Bosses\GHZ1\Boss.asm"
00020A0E                            ; ===========================================================================
00020A0E                            ; Boss for GHZ.
00020A0E                            ; By TheBlad768 (2016).
00020A0E                            ; ===========================================================================
00020A0E                            
00020A0E                            ; Ïåðåõîäû
00020A0E =00000010                  BossGreenHill_End_First_Index		= $10
00020A0E =00000012                  BossGreenHill_End_Second_Index	= $12
00020A0E =00000014                  BossGreenHill_End_Third_Index	= $14
00020A0E                            ; ---------------------------------------------------------------------------
00020A0E                            
00020A0E                            ; Îáîçíà÷åíèÿ
00020A0E =0000000C                  VGHZHits						= 12		; Âñåãî óäàðîâ.
00020A0E                            ; ---------------------------------------------------------------------------
00020A0E                            
00020A0E                            ; Ïåðåìåííûå
00020A0E =00000001                  obRender:		equ 1
00020A0E =00000002                  obGfx:			equ 2
00020A0E =00000004                  obMap:			equ 4
00020A0E =00000008                  obX:			equ 8
00020A0E =0000000C                  obY:				equ $C
00020A0E =00000010                  obVelX:			equ $10
00020A0E =00000012                  obVelY:			equ $12
00020A0E =00000016                  obHeight:		equ $16
00020A0E =00000017                  obWidth:		equ $17
00020A0E =00000018                  obPriority:		equ $18
00020A0E =00000019                  obActWid:		equ $19
00020A0E =0000001A                  obFrame:		equ $1A
00020A0E =0000001C                  obAnim:			equ $1C
00020A0E =00000020                  obColType:		equ $20
00020A0E =00000021                  obColProp:		equ $21
00020A0E =00000022                  obStatus:		equ $22
00020A0E =00000024                  obRoutine:		equ $24
00020A0E =00000025                  ob2ndRout:		equ $25
00020A0E =00000026                  obAngle:			equ $26
00020A0E                            
00020A0E                            ; =============== S U B R O U T I N E =======================================
00020A0E                            
00020A0E                            BossGreenHill:
00020A0E 7000                       		moveq	#0,d0
00020A10 1028 0024                  		move.b	$24(a0),d0
00020A14 323B 0000                  		move.w	BossGreenHill_Index(pc,d0.w),d1
00020A18 4EFB 1000                  		jmp	BossGreenHill_Index(pc,d1.w)
00020A1C                            ; ---------------------------------------------------------------------------
00020A1C                            
00020A1C                            BossGreenHill_Index:
00020A1C 0000 0000                  		dc.w BossGreenHill_Main-BossGreenHill_Index, BossGreenHill_ShipMain-BossGreenHill_Index
00020A20 0000 0000                  		dc.w BossGreenHill_FaceMain-BossGreenHill_Index, BossGreenHill_FlameMain-BossGreenHill_Index
00020A24                            ; ---------------------------------------------------------------------------
00020A24                            
00020A24                            BossGreenHill_ObjData:
00020A24 0200                       		dc.b 2, 0
00020A26 0401                       		dc.b 4, 1
00020A28 0607                       		dc.b 6, 7
00020A2A                            Load_BossGreenHill_Saw_GHZ:
00020A2A 0000 0000                  		dc.l Map_Saw_GHZ
00020A2E 24A0                       		dc.w $24A0
00020A30 05                         		dc.b 5
00020A31 20                         		dc.b $20
00020A32 20                         		dc.b $20
00020A33 20                         		dc.b $20
00020A34 01                         		dc.b 1
00020A35 81                         		dc.b $81
00020A36                            Load_PLC_BossGreenHill_Saw:
00020A36 0000                       		dc.w 0
00020A38 0000 0000                  		dc.l ArtNem_Saw
00020A3C 9400                       		dc.w $9400
00020A3E                            ; ---------------------------------------------------------------------------
00020A3E                            
00020A3E                            BossGreenHill_Main:
00020A3E 3038 F700                  		move.w	($FFFFF700).w,d0
00020A42 0640 02A0                  		addi.w	#$2A0,d0
00020A46 3140 0008                  		move.w	d0,obX(a0)
00020A4A 3038 F704                  		move.w	($FFFFF704).w,d0
00020A4E 0640 0020                  		addi.w	#$20,d0
00020A52 3140 000C                  		move.w	d0,obY(a0)
00020A56 3168 0008 0030             		move.w	obX(a0),$30(a0)
00020A5C 3168 000C 0038             		move.w	obY(a0),$38(a0)
00020A62 117C 000F 0020             		move.b	#$F,obColType(a0)
00020A68 117C 000C 0021             		move.b	#VGHZHits,obColProp(a0)
00020A6E 4EB9 0000 0000                             jsr (BossStarLight_Ballhog_RobotnikHud).l
00020A74 43F9 0000 0000                             lea (Pal_Saw_GHZ).l,a1
00020A7A 45F8 FB20                                  lea ($FFFFFB20).w,a2
00020A7E 7007                                       moveq #7,d0
00020A80 24D9                       @0              move.l (a1)+,(a2)+
00020A82 51C8 FFFC                                  dbf d0,@0
00020A86 43F9 0002 0A36             		lea	(Load_PLC_BossGreenHill_Saw).l,a1
00020A8C 45F8 F680                  		lea	($FFFFF680).w,a2
00020A90 4A92                       @1		tst.l	(a2)
00020A92 6700                       		beq.s	@2
00020A94 5C4A                       		addq.w	#6,a2
00020A96 60F8                       		bra.s	@1
00020A98 3019                       @2		move.w	(a1)+,d0
00020A9A 6B00                       		bmi.s	@4
00020A9C 24D9                       @3		move.l	(a1)+,(a2)+
00020A9E 34D9                       		move.w	(a1)+,(a2)+
00020AA0 51C8 FFFA                  		dbf	d0,@3
00020AA4 4EB9 0001 08F6             @4		jsr	(SingleObjLoad2).l
00020AAA 6600                       		bne.s	@5
00020AAC 12BC 008D                  		move.b	#$8D,(a1)
00020AB0 3368 0008 0008             		move.w	8(a0),8(a1)
00020AB6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00020ABC 0669 001A 000C             		addi.w	#$1A,$C(a1)
00020AC2 0629 001A 0038             		addi.b	#$1A,$38(a1)
00020AC8 337C 0300 003C             		move.w	#$300,$3C(a1)
00020ACE 2348 0034                  		move.l	a0,$34(a1)
00020AD2 45F9 0002 0A24             @5		lea	(BossGreenHill_ObjData).l,a2
00020AD8 2248                       		movea.l	a0,a1
00020ADA 7202                       		moveq	#2,d1
00020ADC 6000                       		bra.s	@7
00020ADE 4EB9 0001 08F6             @6		jsr	(SingleObjLoad2).l
00020AE4 6600                       		bne.s	BossGreenHill_ShipMain
00020AE6 12BC 003D                  		move.b	#$3D,(a1)
00020AEA 3368 0008 0008             		move.w	obX(a0),obX(a1)
00020AF0 3368 000C 000C             		move.w	obY(a0),obY(a1)
00020AF6 08A8 0000 0022             @7		bclr	#0,obStatus(a0)
00020AFC 4229 0025                  		clr.b ob2ndRout(a1)
00020B00 135A 0024                  		move.b	(a2)+,obRoutine(a1)
00020B04 135A 001C                  		move.b	(a2)+,obAnim(a1)
00020B08 237C 0001 B4AE 0004        		move.l	#Map_Eggman,obMap(a1)
00020B10 337C 0400 0002             		move.w	#$400,obGfx(a1)
00020B16 137C 0004 0001             		move.b	#4,obRender(a1)
00020B1C 137C 0020 0019             		move.b	#$20,obActWid(a1)
00020B22 137C 0003 0018             		move.b	#3,obPriority(a1)
00020B28 2348 0034                  		move.l	a0,$34(a1)
00020B2C 51C9 FFB0                  		dbf	d1,@6
00020B30                            
00020B30                            ; =============== S U B R O U T I N E =======================================
00020B30                            
00020B30                            BossGreenHill_ShipMain:
00020B30 7000                       		moveq	#0,d0
00020B32 1028 0025                  		move.b	ob2ndRout(a0),d0
00020B36 303B 0000                  		move.w	BossGreenHill_ShipIndex(pc,d0.w),d0
00020B3A 4EBB 0000                  		jsr	BossGreenHill_ShipIndex(pc,d0.w)
00020B3E 6100 0000                  		bsr.w	BossGreenHill_Hurt
00020B42 4EB9 0001 B176             		jsr	(BossMove).l
00020B48                            
00020B48                            Swing_UpAndDown_S1:
00020B48 1028 003F                  		move.b	$3F(a0),d0
00020B4C 5428 003F                  		addq.b	#2,$3F(a0)
00020B50 4EB9 0000 2CC8             		jsr	(CalcSine).l
00020B56 EC40                       		asr.w	#6,d0
00020B58 D068 0038                  		add.w	$38(a0),d0
00020B5C 3140 000C                  		move.w	d0,obY(a0)
00020B60 3168 0030 0008             		move.w	$30(a0),obX(a0)
00020B66                            
00020B66                            BossGreenHill_ShipMainCont:
00020B66 43F9 0001 B36E             		lea	(Ani_Eggman).l,a1
00020B6C 4EB9 0000 D3EA             		jsr	(AnimateSprite).l
00020B72 7003                       		moveq	#3,d0
00020B74 C028 0022                  		and.b	obStatus(a0),d0
00020B78 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00020B7E 8128 0001                  		or.b	d0,obRender(a0)
00020B82 4EF9 0001 045A             		jmp	(DisplaySprite).l
00020B88                            ; ---------------------------------------------------------------------------
00020B88                            
00020B88                            BossGreenHill_ShipIndex:
00020B88 0000 0000                  		dc.w BossGreenHill_Start-BossGreenHill_ShipIndex, BossGreenHill_Creating_Saw-BossGreenHill_ShipIndex
00020B8C 0000 0000                  		dc.w BossGreenHill_Start_Move-BossGreenHill_ShipIndex, BossGreenHill_Move-BossGreenHill_ShipIndex
00020B90 0000 0000                  		dc.w BossGreenHill_Wait-BossGreenHill_ShipIndex, BossGreenHill_Find_Saw-BossGreenHill_ShipIndex
00020B94 0000 0000                  		dc.w BossGreenHill_Find_Saw_Down-BossGreenHill_ShipIndex, BossGreenHill_Find_Saw_Up-BossGreenHill_ShipIndex
00020B98 0000 0000                  		dc.w BossGreenHill_End_First-BossGreenHill_ShipIndex, BossGreenHill_End_Second-BossGreenHill_ShipIndex
00020B9C 0000                       		dc.w BossGreenHill_End_Third-BossGreenHill_ShipIndex
00020B9E                            ; ---------------------------------------------------------------------------
00020B9E                            
00020B9E                            BossGreenHill_Start:
00020B9E 3038 F700                  		move.w	($FFFFF700).w,d0
00020BA2 317C FF00 0010             		move.w	#-$100,$10(a0)
00020BA8 0640 00A0                  		addi.w	#$A0,d0
00020BAC B068 0008                  		cmp.w	8(a0),d0
00020BB0 6500                       		bcs.s	@1
00020BB2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00020BB6 317C 0060 003C             		move.w	#$60,$3C(a0)
00020BBC 4268 0010                  		clr.w $10(a0)
00020BC0 4E75                       @1		rts
00020BC2                            ; ---------------------------------------------------------------------------
00020BC2                            
00020BC2                            BossGreenHill_Creating_Saw:
00020BC2 5368 003C                  		subq.w	#1,$3C(a0)
00020BC6 6A00                       		bpl.s	@1
00020BC8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00020BCC 317C FF00 0010             		move.w	#-$100,obVelX(a0)
00020BD2 0828 0000 0022             		btst	#0,obStatus(a0)
00020BD8 6700                       		beq.s	@1
00020BDA 4468 0010                  		neg.w	obVelX(a0)
00020BDE 4E75                       @1		rts
00020BE0                            ; ---------------------------------------------------------------------------
00020BE0                            
00020BE0                            BossGreenHill_Start_Move:
00020BE0 43F8 D000                  		lea	($FFFFD000).w,a1
00020BE4 7000                       		moveq	#0,d0
00020BE6 7200                       		moveq	#0,d1
00020BE8 3428 0008                  		move.w	obX(a0),d2
00020BEC 9469 0008                  		sub.w	obX(a1),d2
00020BF0 6A00                       		bpl.s	@1
00020BF2 4442                       		neg.w	d2
00020BF4 5440                       		addq.w	#2,d0
00020BF6 7200                       @1		moveq	#0,d1
00020BF8 3628 000C                  		move.w	obY(a0),d3
00020BFC 9669 000C                  		sub.w	obY(a1),d3
00020C00 6A00                       		bpl.s	@2
00020C02 4443                       		neg.w	d3
00020C04 5441                       		addq.w	#2,d1
00020C06 0642 0010                  @2		addi.w	#$10,d2
00020C0A 0C42 0060                  		cmpi.w	#$60,d2
00020C0E 6500                       		bcs.s	@4
00020C10 323C 0100                  		move.w	#$100,d1
00020C14 4A40                       		tst.w	d0
00020C16 6600                       		bne.s	@3
00020C18 4441                       		neg.w	d1
00020C1A 3141 0010                  @3		move.w	d1,obVelX(a0)
00020C1E 08A8 0000 0022             @4		bclr	#0,obStatus(a0)
00020C24 4A68 0010                  		tst.w	obVelX(a0)
00020C28 6B00                       		bmi.s	@5
00020C2A 08E8 0000 0022             		bset	#0,obStatus(a0)
00020C30 4E75                       @5		rts
00020C32                            ; ---------------------------------------------------------------------------
00020C32                            
00020C32                            BossGreenHill_Move:
00020C32 3038 F700                  		move.w	($FFFFF700).w,d0
00020C36 317C FE00 0010             		move.w	#-$200,obVelX(a0)
00020C3C 0828 0000 0022             		btst	#0,obStatus(a0)
00020C42 6700                       		beq.s	@1
00020C44 4468 0010                  		neg.w	obVelX(a0)
00020C48 0640 01A0                  		addi.w	#$1A0,d0
00020C4C B068 0008                  		cmp.w	obX(a0),d0
00020C50 6C00                       		bge.s	@3
00020C52 6000                       		bra.s	@2
00020C54                            ; ---------------------------------------------------------------------------
00020C54 0440 0060                  @1		subi.w	#$60,d0
00020C58 B068 0008                  		cmp.w	obX(a0),d0
00020C5C 6F00                       		ble.s		@3
00020C5E 5428 0025                  @2		addq.b	#2,ob2ndRout(a0)
00020C62 0868 0000 0022             		bchg	#0,obStatus(a0)
00020C68 4268 0010                  		clr.w	$10(a0)
00020C6C 4E75                       @3 		rts
00020C6E                            ; ---------------------------------------------------------------------------
00020C6E                            
00020C6E                            BossGreenHill_Wait:
00020C6E 2268 0034                  		movea.l	$34(a0),a1
00020C72 0C29 000E 0024             		cmpi.b	#$E,obRoutine(a1)
00020C78 6500                       		bcs.s	@1
00020C7A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00020C7E 4E75                       @1		rts
00020C80                            ; ---------------------------------------------------------------------------
00020C80                            
00020C80                            BossGreenHill_Find_Saw:
00020C80 2268 0034                  		movea.l	$34(a0),a1
00020C84 7000                       		moveq	#0,d0
00020C86 7200                       		moveq	#0,d1
00020C88 3428 0008                  		move.w	obX(a0),d2
00020C8C 9469 0008                  		sub.w	obX(a1),d2
00020C90 6A00                       		bpl.s	@1
00020C92 4442                       		neg.w	d2
00020C94 5440                       		addq.w	#2,d0
00020C96 7200                       @1		moveq	#0,d1
00020C98 3628 000C                  		move.w	obY(a0),d3
00020C9C 9669 000C                  		sub.w	obY(a1),d3
00020CA0 6A00                       		bpl.s	@2
00020CA2 4443                       		neg.w	d3
00020CA4 5441                       		addq.w	#2,d1
00020CA6 323C 0100                  @2		move.w	#$100,d1
00020CAA 4A42                       		tst.w	d2
00020CAC 6700                       		beq.s	@4
00020CAE 4A40                       		tst.w	d0
00020CB0 6600                       		bne.s	@3
00020CB2 4441                       		neg.w	d1
00020CB4 3141 0010                  @3		move.w	d1,$10(a0)
00020CB8 4E75                       		rts
00020CBA                            ; ---------------------------------------------------------------------------
00020CBA 5428 0025                  @4		addq.b	#2,ob2ndRout(a0)
00020CBE 317C 0040 003C             		move.w	#$40,$3C(a0)
00020CC4 4268 0010                  		clr.w	$10(a0)
00020CC8 4E75                       		rts
00020CCA                            ; ---------------------------------------------------------------------------
00020CCA                            
00020CCA                            BossGreenHill_Find_Saw_Down:
00020CCA 3038 F704                  		move.w	($FFFFF704).w,d0
00020CCE 317C 0100 0012             		move.w	#$100,obVelY(a0)
00020CD4 4A68 003C                  		tst.w $3C(a0)
00020CD8 6A00                       		bpl.s	@1
00020CDA 4468 0012                  		neg.w	obVelY(a0)
00020CDE 0640 0020                  		addi.w	#$20,d0
00020CE2 B068 000C                  		cmp.w	obY(a0),d0
00020CE6 6F00                       		ble.s		@3
00020CE8 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
00020CEE 317C 0060 003C             		move.w	#$60,$3C(a0)
00020CF4 6000                       		bra.s	@2
00020CF6                            ; ---------------------------------------------------------------------------
00020CF6 0640 0098                  @1		addi.w	#$98,d0
00020CFA B068 000C                  		cmp.w	obY(a0),d0
00020CFE 6C00                       		bge.s	@3
00020D00 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00020D04 4268 0012                  @2		clr.w	obVelY(a0)
00020D08 4E75                       @3		rts
00020D0A                            ; ---------------------------------------------------------------------------
00020D0A                            
00020D0A                            BossGreenHill_Find_Saw_Up:
00020D0A 5368 003C                  		subq.w	#1,$3C(a0)
00020D0E 6A00                       		bpl.s	@1
00020D10 2268 0034                  		movea.l	$34(a0),a1
00020D14 137C 0002 0024             		move.b	#2,obRoutine(a1)
00020D1A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00020D1E 337C 0300 003C             		move.w	#$300,$3C(a1)
00020D24 4E75                       @1		rts
00020D26                            
00020D26                            ; =============== S U B R O U T I N E =======================================
00020D26                            
00020D26                            BossGreenHill_Hurt:
00020D26 0C28 0010 0025             		cmpi.b	#BossGreenHill_End_First_Index,ob2ndRout(a0)
00020D2C 6400                       		bcc.s	BossGreenHill_Locret
00020D2E 4A28 0020                  		tst.b obColType(a0)
00020D32 6600                       		bne.s	BossGreenHill_Locret
00020D34 4A28 0021                  		tst.b obColProp(a0)
00020D38 6700                       		beq.s	BossGreenHill_ShipGone
00020D3A 4A28 003E                  		tst.b	$3E(a0)
00020D3E 6600                       		bne.s	BossGreenHill_ShipFlash
00020D40 117C 0040 003E             		move.b	#$40,$3E(a0)
00020D46 70AC                       		moveq	#$FFFFFFAC,d0
00020D48 4EB9 0000 12D0             		jsr	(PlaySound_Special).l
00020D4E                            
00020D4E                            BossGreenHill_ShipFlash:
00020D4E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00020D52 7000                       		moveq	#0,d0
00020D54 4A51                       		tst.w	(a1)
00020D56 6600                       		bne.s	@2
00020D58 303C 0EEE                  		move.w	#$EEE,d0
00020D5C 3280                       @2		move.w	d0,(a1)
00020D5E 5328 003E                  		subq.b	#1,$3E(a0)
00020D62 6600                       		bne.s	BossGreenHill_Locret
00020D64 117C 000F 0020             		move.b	#$F,obColType(a0)
00020D6A                            
00020D6A                            BossGreenHill_Locret:
00020D6A 4E75                       		rts
00020D6C                            ; ---------------------------------------------------------------------------
00020D6C                            
00020D6C                            BossGreenHill_ShipGone:
00020D6C 117C 0010 0025             		move.b	#BossGreenHill_End_First_Index,$25(a0)
00020D72 117C 0078 003C             		move.b	#$78,$3C(a0)
00020D78 4268 0010                  		clr.w	obVelX(a0)
00020D7C 4268 0012                  		clr.w	obVelY(a0)
00020D80 7064                       		moveq	#100,d0
00020D82 4EF9 0000 0000             		jmp	(AddPoints).l
00020D88                            
00020D88                            ; =============== S U B R O U T I N E =======================================
00020D88                            
00020D88                            BossGreenHill_End_First:
00020D88 5328 003C                  		subq.b	#1,$3C(a0)
00020D8C 6B00                       		bmi.s	@1
00020D8E 4EF9 0001 B134             		jmp	(BossDefeated).l
00020D94                            ; ---------------------------------------------------------------------------
00020D94 5428 0025                  @1		addq.b	#2,ob2ndRout(a0)
00020D98 4268 0012                  		clr.w	obVelY(a0)
00020D9C 08E8 0000 0022             		bset	#0,obStatus(a0)
00020DA2 08A8 0007 0022             		bclr	#7,obStatus(a0)
00020DA8 4268 0010                  		clr.w	obVelX(a0)
00020DAC 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00020DB2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00020DB6 6600                       		bne.s	@2
00020DB8 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00020DBE 4E75                       @2		rts
00020DC0                            
00020DC0                            ; =============== S U B R O U T I N E =======================================
00020DC0                            
00020DC0                            BossGreenHill_End_Second:
00020DC0 5228 003C                  		addq.b	#1,$3C(a0)
00020DC4 6700                       		beq.s	@1
00020DC6 6A00                       		bpl.s	@2
00020DC8 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00020DCE 4E75                       		rts
00020DD0                            ; ---------------------------------------------------------------------------
00020DD0 4268 0012                  @1		clr.w	obVelY(a0)
00020DD4 4E75                       		rts
00020DD6                            ; ---------------------------------------------------------------------------
00020DD6 0C28 0020 003C             @2		cmpi.b	#$20,$3C(a0)
00020DDC 6500                       		bcs.s	@3
00020DDE 6700                       		beq.s	@4
00020DE0 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00020DE6 6500                       		bcs.s	@5
00020DE8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00020DEC 4E75                       		rts
00020DEE                            ; ---------------------------------------------------------------------------
00020DEE 5168 0012                  @3		subq.w	#8,obVelY(a0)
00020DF2 4E75                       		rts
00020DF4                            ; ---------------------------------------------------------------------------
00020DF4 4268 0012                  @4		clr.w	obVelY(a0)
00020DF8 4E75                       @5		rts
00020DFA                            
00020DFA                            ; =============== S U B R O U T I N E =======================================
00020DFA                            
00020DFA                            BossGreenHill_End_Third:
00020DFA 317C 0400 0010             		move.w	#$400,$10(a0)
00020E00 317C FFC0 0012             		move.w	#-$40,$12(a0)
00020E06 4A28 0001                  		tst.b obRender(a0)
00020E0A 6B00                       		bmi.s	@1
00020E0C 4EB9 0001 1D18             		jsr	(GotThroughAct).l
00020E12 4E75                       @1		rts
00020E14                            
00020E14                            ; =============== S U B R O U T I N E =======================================
00020E14                            
00020E14                            BossGreenHill_FaceMain:
00020E14 7000                       		moveq	#0,d0
00020E16 7201                       		moveq	#1,d1
00020E18 2268 0034                  		movea.l	$34(a0),a1
00020E1C 1029 0025                  		move.b	$25(a1),d0
00020E20 0C00 0012                  		cmpi.b	#BossGreenHill_End_Second_Index,d0
00020E24 6600                       		bne.s	@1
00020E26 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00020E2C 6600                       		bne.s	@1
00020E2E 7204                       		moveq	#4,d1
00020E30 0C00 0010                  @1		cmpi.b	#BossGreenHill_End_First_Index,d0
00020E34 6B00                       		bmi.s	@2
00020E36 720A                       		moveq	#$A,d1
00020E38 6000                       		bra.s	BossGreenHill_FaceApply
00020E3A                            ; ---------------------------------------------------------------------------
00020E3A 4A29 0020                  @2		tst.b	$20(a1)
00020E3E 6600                       		bne.s	@3
00020E40 7205                       		moveq	#5,d1
00020E42 6000                       		bra.s	BossGreenHill_FaceApply
00020E44                            ; ---------------------------------------------------------------------------
00020E44 4A69 0010                  @3		tst.w	$10(a1)
00020E48 6700                       		beq.s	@4
00020E4A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00020E50 6500                       		bcs.s	BossGreenHill_FaceApply
00020E52 7204                       @4		moveq	#4,d1
00020E54                            
00020E54                            BossGreenHill_FaceApply:
00020E54 1141 001C                  		move.b	d1,$1C(a0)
00020E58 0C00 0014                  		cmpi.b	#BossGreenHill_End_Third_Index,d0
00020E5C 6600                       		bne.s	BossGreenHill_FaceDisp
00020E5E 117C 0006 001C             		move.b	#6,$1C(a0)
00020E64 4A28 0001                  		tst.b 1(a0)
00020E68 6A00                       		bpl.s	BossGreenHill_Del
00020E6A                            
00020E6A                            BossGreenHill_FaceDisp:
00020E6A 6000                       		bra.s	BossGreenHill_Display
00020E6C                            ; ---------------------------------------------------------------------------
00020E6C                            
00020E6C                            BossGreenHill_FlameMain:
00020E6C 117C 0007 001C             		move.b	#7,$1C(a0)
00020E72 2268 0034                  		movea.l	$34(a0),a1
00020E76 0C29 0014 0025             		cmpi.b	#BossGreenHill_End_Third_Index,$25(a1)
00020E7C 6600                       		bne.s	@1
00020E7E 117C 000B 001C             		move.b	#$B,$1C(a0)
00020E84 4A28 0001                  		tst.b 1(a0)
00020E88 6A00                       		bpl.s	BossGreenHill_Del
00020E8A 6000                       		bra.s	BossGreenHill_FlameDisp
00020E8C                            ; ---------------------------------------------------------------------------
00020E8C 0C29 000C 0025             @1		cmpi.b	#$C,$25(a1)
00020E92 6400                       		bcc.s	BossGreenHill_FlameDisp
00020E94 3029 0010                  		move.w	$10(a1),d0
00020E98 6700                       		beq.s	BossGreenHill_FlameDisp
00020E9A 117C 0008 001C             		move.b	#8,$1C(a0)
00020EA0                            
00020EA0                            BossGreenHill_FlameDisp:
00020EA0 6000                       		bra.s	BossGreenHill_Display
00020EA2                            ; ---------------------------------------------------------------------------
00020EA2                            
00020EA2                            BossGreenHill_Del:
00020EA2 4EF9 0001 0496             		jmp	(DeleteObject).l
00020EA8                            ; ---------------------------------------------------------------------------
00020EA8                            
00020EA8                            BossGreenHill_Display:
00020EA8 2268 0034                  		movea.l	$34(a0),a1
00020EAC 3169 0008 0008             		move.w	obX(a1),obX(a0)
00020EB2 3169 000C 000C             		move.w	obY(a1),obY(a0)
00020EB8 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
00020EBE 43F9 0001 B36E             		lea	(Ani_Eggman).l,a1
00020EC4 4EB9 0000 D3EA             		jsr	(AnimateSprite).l
00020ECA 1028 0022                  		move.b	obStatus(a0),d0
00020ECE 0200 0003                  		andi.b	#3,d0
00020ED2 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00020ED8 8128 0001                  		or.b	d0,obRender(a0)
00020EDC 4EF9 0001 045A             		jmp	(DisplaySprite).l
00020EE2                            
00020EE2                            ; =============== S U B R O U T I N E =======================================
00020EE2                            
00020EE2                            BossGreenHill_Saw:
00020EE2 7000                       		moveq	#0,d0
00020EE4 1028 0024                  		move.b	obRoutine(a0),d0
00020EE8 323B 0000                  		move.w	Obj_BossBall_Index(pc,d0.w),d1
00020EEC 4EBB 1000                  		jsr	Obj_BossBall_Index(pc,d1.w)
00020EF0 4EB9 0001 0434             		jsr	(SpeedToPos).l
00020EF6 6100 0000                  		bsr.w	Check_Delete_BossBall
00020EFA 43F9 0000 0000             		lea	(Anim_Saw_GHZ).l,a1
00020F00 4EB9 0000 D3EA             		jsr	(AnimateSprite).l
00020F06 4EF9 0001 045A             		jmp	(DisplaySprite).l
00020F0C                            ; ---------------------------------------------------------------------------
00020F0C                            
00020F0C                            Obj_BossBall_Index:
00020F0C 0000 0000                  		dc.w Obj8D_BossBall_Main-Obj_BossBall_Index, Obj8D_BossBall_Wait-Obj_BossBall_Index
00020F10 0000 0000                  		dc.w Obj8D_BossBall_Refresh-Obj_BossBall_Index, Obj8D_BossBall_Circular-Obj_BossBall_Index
00020F14 0000 0000                  		dc.w Obj8D_BossBall_Fall-Obj_BossBall_Index, Obj8D_BossBall_Move-Obj_BossBall_Index
00020F18 0000 0000                  		dc.w Obj8D_BossBall_Stop-Obj_BossBall_Index, Obj8D_BossBall_Stop_Wait-Obj_BossBall_Index
00020F1C                            ; ---------------------------------------------------------------------------
00020F1C                            
00020F1C                            Obj8D_BossBall_Main:
00020F1C 5428 0024                  		addq.b	#2,obRoutine(a0)
00020F20 43F9 0002 0A2A             		lea	(Load_BossGreenHill_Saw_GHZ).l,a1
00020F26 2159 0004                  		move.l	(a1)+,obMap(a0)
00020F2A 3159 0002                  		move.w	(a1)+,obGfx(a0)
00020F2E 1159 0018                  		move.b	(a1)+,obPriority(a0)
00020F32 1159 0017                  		move.b	(a1)+,obWidth(a0)
00020F36 1159 0016                  		move.b	(a1)+,obHeight(a0)
00020F3A 1159 0019                  		move.b	(a1)+,obActWid(a0)
00020F3E 1159 001A                  		move.b	(a1)+,obFrame(a0)
00020F42 1159 0020                  		move.b	(a1)+,obColType(a0)
00020F46 08E8 0002 0001             		bset	#2,obRender(a0)
00020F4C 4E75                       		rts 
00020F4E                            ; ---------------------------------------------------------------------------
00020F4E                            
00020F4E                            Obj8D_BossBall_Wait:
00020F4E 5428 0024                  		addq.b	#2,obRoutine(a0)
00020F52 117C 0000 001C             		move.b	#0,$1C(a0)
00020F58                            
00020F58                            Obj8D_BossBall_Refresh:
00020F58 2268 0034                  		movea.l	$34(a0),a1
00020F5C 0C29 0002 0025             		cmpi.b	#2,ob2ndRout(a1)
00020F62 6600                       		bne.s	@1
00020F64 5428 0024                  		addq.b	#2,obRoutine(a0)
00020F68 3029 0008                  @1		move.w	obX(a1),d0
00020F6C 1228 0030                  		move.b	$30(a0),d1
00020F70 4881                       		ext.w	d1
00020F72 D041                       		add.w	d1,d0
00020F74 3140 0008                  		move.w	d0,obX(a0)
00020F78 3029 000C                  		move.w	obY(a1),d0
00020F7C 1228 0038                  		move.b	$38(a0),d1
00020F80 4881                       		ext.w	d1
00020F82 D041                       		add.w	d1,d0
00020F84 3140 000C                  		move.w	d0,obY(a0)
00020F88 4E75                       		rts
00020F8A                            ; ---------------------------------------------------------------------------
00020F8A                            
00020F8A                            Obj8D_BossBall_Circular:
00020F8A 3028 003E                  		move.w	$3E(a0),d0
00020F8E 5140                       		subq.w	#8,d0
00020F90 3140 003E                  		move.w	d0,$3E(a0)
00020F94 D168 0026                  		add.w	d0,$26(a0)
00020F98 0C40 F5B0                  		cmpi.w	#-$A50,d0
00020F9C 6600                       		bne.s	@1
00020F9E 5428 0024                  		addq.b	#2,obRoutine(a0)
00020FA2 317C 0400 0012             		move.w	#$400,$12(a0)
00020FA8 7403                       @1		moveq	#3,d2
00020FAA 1028 0026                  		move.b	obAngle(a0),d0
00020FAE 4EB9 0000 2CC8             		jsr	(CalcSine).l
00020FB4 4840                       		swap	d0
00020FB6 4240                       		clr.w	d0
00020FB8 4841                       		swap	d1
00020FBA 4241                       		clr.w	d1
00020FBC E4A0                       		asr.l	d2,d0
00020FBE E4A1                       		asr.l	d2,d1
00020FC0 2268 0034                  		movea.l	$34(a0),a1
00020FC4 2429 0008                  		move.l	obX(a1),d2
00020FC8 2629 000C                  		move.l	obY(a1),d3
00020FCC D480                       		add.l	d0,d2
00020FCE D681                       		add.l	d1,d3
00020FD0 2142 0008                  		move.l	d2,obX(a0)
00020FD4 2143 000C                  		move.l	d3,obY(a0)
00020FD8 4E75                       		rts
00020FDA                            ; ---------------------------------------------------------------------------
00020FDA                            
00020FDA                            Obj8D_BossBall_Fall:
00020FDA 4EB9 0001 0408             		jsr	(ObjectFall).l
00020FE0 303C 03C0                  		move.w	#$3C0,d0
00020FE4 B068 000C                  		cmp.w	obY(a0),d0
00020FE8 6200                       		bhi.s	@4
00020FEA 3140 000C                  		move.w	d0,obY(a0)
00020FEE 2268 0034                  		movea.l	$34(a0),a1
00020FF2 7000                       		moveq	#0,d0
00020FF4 3140 0012                  		move.w	d0,obVelY(a0)
00020FF8 3140 0026                  		move.w	d0,$26(a0)
00020FFC 3140 003E                  		move.w	d0,$3E(a0)
00021000 317C 0200 003C             		move.w	#$200,$3C(a0)
00021006 5428 0024                  		addq.b	#2,obRoutine(a0)
0002100A 5429 0025                  		addq.b	#2,ob2ndRout(a1)
0002100E 2348 0034                  		move.l	a0,$34(a1)
00021012 43F8 D000                  		lea	($FFFFD000).w,a1
00021016 7000                       		moveq	#0,d0
00021018 7200                       		moveq	#0,d1
0002101A 3428 0008                  		move.w	obX(a0),d2
0002101E 9469 0008                  		sub.w	obX(a1),d2
00021022 6A00                       		bpl.s	@1
00021024 4442                       		neg.w	d2
00021026 5440                       		addq.w	#2,d0
00021028 7200                       @1		moveq	#0,d1
0002102A 3628 000C                  		move.w	obY(a0),d3
0002102E 9669 000C                  		sub.w	obY(a1),d3
00021032 6A00                       		bpl.s	@2
00021034 4443                       		neg.w	d3
00021036 5441                       		addq.w	#2,d1
00021038 08A8 0000 0022             @2		bclr	#0,obStatus(a0)
0002103E 4A40                       		tst.w	d0
00021040 6700                       		beq.s	@3
00021042 08E8 0000 0022             		bset	#0,obStatus(a0)
00021048 70BD                       @3		moveq	#$FFFFFFBD,d0
0002104A 4EB9 0000 12D0             		jsr	(PlaySound_Special).l
00021050 4E75                       @4		rts
00021052                            ; ---------------------------------------------------------------------------
00021052                            
00021052                            Obj8D_BossBall_Move:
00021052 43F8 D000                  		lea	($FFFFD000).w,a1
00021056 7000                       		moveq	#0,d0
00021058 7200                       		moveq	#0,d1
0002105A 3428 0008                  		move.w	obX(a0),d2
0002105E 9469 0008                  		sub.w	obX(a1),d2
00021062 6A00                       		bpl.s	@1
00021064 4442                       		neg.w	d2
00021066 5440                       		addq.w	#2,d0
00021068 7200                       @1		moveq	#0,d1
0002106A 3628 000C                  		move.w	obY(a0),d3
0002106E 9669 000C                  		sub.w	obY(a1),d3
00021072 6A00                       		bpl.s	@2
00021074 4443                       		neg.w	d3
00021076 5441                       		addq.w	#2,d1
00021078 5368 003C                  @2		subq.w	#1,$3C(a0)
0002107C 6A00                       		bpl.s	@3
0002107E 4A00                       		tst.b d0
00021080 6B00                       		bmi.s	@3
00021082 5428 0024                  		addq.b	#2,obRoutine(a0)
00021086 303C 0400                  @3		move.w	#$400,d0
0002108A 7210                       		moveq	#$10,d1
0002108C 3400                       		move.w	d0,d2
0002108E 4442                       		neg.w	d2
00021090 3629 0008                  		move.w	obX(a1),d3
00021094 1828 0030                  		move.b	$30(a0),d4
00021098 4884                       		ext.w	d4
0002109A D644                       		add.w	d4,d3
0002109C B668 0008                  		cmp.w	obX(a0),d3
000210A0 6400                       		bcc.s	@4
000210A2 4441                       		neg.w	d1
000210A4 3628 0010                  @4		move.w	obVelX(a0),d3
000210A8 D641                       		add.w	d1,d3
000210AA B642                       		cmp.w	d2,d3
000210AC 6D00                       		blt.s		@5
000210AE B640                       		cmp.w	d0,d3
000210B0 6E00                       		bgt.s	@5
000210B2 3143 0010                  		move.w	d3,obVelX(a0)
000210B6 08A8 0000 0022             @5		bclr	#0,obStatus(a0)
000210BC 4A68 0010                  		tst.w	obVelX(a0)
000210C0 6B00                       		bmi.s	@6
000210C2 08E8 0000 0022             		bset	#0,obStatus(a0)
000210C8 4E75                       @6		rts
000210CA                            ; ---------------------------------------------------------------------------
000210CA                            
000210CA                            Obj8D_BossBall_Stop:
000210CA 5428 0024                  		addq.b	#2,obRoutine(a0)
000210CE 317C 0000 0010             		move.w	#0,$10(a0)
000210D4 117C 0001 001C             		move.b	#1,$1C(a0)
000210DA                            
000210DA                            Obj8D_BossBall_Stop_Wait:
000210DA 4E75                       		rts
000210DC                            ; ---------------------------------------------------------------------------
000210DC                            
000210DC                            Check_Delete_BossBall:
000210DC 2268 0034                  		movea.l	$34(a0),a1
000210E0 0C29 0010 0025             		cmpi.b	#$10,ob2ndRout(a1)
000210E6 6500                       		bcs.s	@1
000210E8 4EB9 0001 EA0A             		jsr	(Obj7B_Explode).l
000210EE 4E75                       @1		rts
000210F0                            
000210F0                            ; =============== S U B R O U T I N E =======================================
000210F0                            
000210F0                            ; Resources
000210F0                            Anim_Saw_GHZ:	incbin "#Bosses/GHZ1/Object Data/Anim - Saw.bin"
000210FC                            	even
000210FC                            Map_Saw_GHZ:	incbin "#Bosses/GHZ1/Object Data/Map - Saw.bin"
0002118E 00                         	even
0002118E                            ArtNem_Saw:	incbin "#Bosses/GHZ1/Nemesis Art/Saw.bin"
0002138C 00                         	even
0002138C                            Pal_Saw_GHZ:    incbin "#Bosses/GHZ1/Palettes/1.bin" 
000213AC                                    even
000213AC                                    even
000213AC                                            include "#Bosses\SLZ\Boss.asm"
000213AC                            ; ===========================================================================
000213AC                            ; Boss for SLZ.
000213AC                            ; Brutal Ballhog
000213AC                            ; Version 1.9
000213AC                            ; By TheBlad768 (2017).
000213AC                            ; ===========================================================================
000213AC                            
000213AC                            ; Object variables
000213AC =0000007A                  obSlot_BossStarLight		= $7A					; Set current object slot in object pointers
000213AC =00002410                  obVRAM_BossStarLight	= (1<<13+($8200/$20))	; Set VRAM address
000213AC =00008680                  obVRAM_RobotnikHud	= (1<<15+($D000/$20))	; Set VRAM address with priority
000213AC =0000000F                  objHits_BossStarLight		= 15						; Set number of hits
000213AC                            
000213AC                            ; Universal object variables
000213AC =00000001                  obRender:		equ 1	; .b
000213AC =00000002                  obGfx:			equ 2	; .w
000213AC =00000004                  obMap:			equ 4	; .l
000213AC =00000008                  obX:			equ 8	; .w.l
000213AC =0000000A                  obScreenY:		equ $A	; .w
000213AC =0000000C                  obY:				equ $C	; .w.l
000213AC =00000010                  obVelX:			equ $10	; .w
000213AC =00000012                  obVelY:			equ $12	; .w
000213AC =00000016                  obHeight:		equ $16	; .b
000213AC =00000017                  obWidth:		equ $17	; .b
000213AC =00000018                  obPriority:		equ $18	; .b
000213AC =00000019                  obActWid:		equ $19	; .b
000213AC =0000001A                  obFrame:		equ $1A	; .b
000213AC =0000001C                  obAnim:			equ $1C	; .b
000213AC =00000020                  obColType:		equ $20	; .b
000213AC =00000021                  obColProp:		equ $21	; .b
000213AC =00000022                  obStatus:		equ $22	; .b
000213AC =00000024                  obRoutine:		equ $24	; .b
000213AC =00000025                  ob2ndRout:		equ $25	; .b
000213AC =00000026                  obAngle:			equ $26	; .b.w
000213AC =00000028                  obSubtype:		equ $28	; .b.w
000213AC                            
000213AC                            ; Dynamic object variables
000213AC                            ;obNull			equ $2A	; .w
000213AC                            ;obNull			equ $2C	; .w
000213AC                            ;obNull			equ $2E	; .w
000213AC                            ;obNull			equ $30	; .w
000213AC                            ;obNull			equ $32	; .w
000213AC =00000034                  obParent: 		equ $34	; .w
000213AC                            ;obNull			equ $36	; .w
000213AC                            ;obNull			equ $38	; .w
000213AC                            ;obNull			equ $3A	; .b
000213AC =0000003B                  obDefeated:		equ $3B	; .b
000213AC =0000003C                  obTimer:			equ $3C	; .w
000213AC =0000003E                  obCount: 		equ $3E	; .b
000213AC =0000003F                  obFlash:			equ $3F	; .b
000213AC                            
000213AC                            ; RAM
000213AC =FFFFD000                  v_player:			equ $FFFFD000	; Main character
000213AC =FFFFF700                  v_screenposx:	equ $FFFFF700	; Screen position X
000213AC =FFFFF704                  v_screenposy:		equ $FFFFF704	; Screen position Y
000213AC =FFFFF7A7                  v_bossstatus:		equ $FFFFF7A7	; Status of boss and prison capsule
000213AC =FFFFFE04                  v_framecount:	equ $FFFFFE04	; Frame counter
000213AC =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; Vertical interrupt counter
000213AC =FFFFFE1E                  f_timecount:		equ $FFFFFE1E	; Time counter update flag
000213AC                            
000213AC                            ; Macros
000213AC                            offsetEntry macro ptr
000213AC                            	dc.\0 ptr-*
000213AC                                endm
000213AC                            
000213AC                            ; ---------------------------------------------------------------------------
000213AC                            ; Object ballhog SLZ boss.
000213AC                            ; ---------------------------------------------------------------------------
000213AC                            
000213AC                            ; =============== S U B R O U T I N E =======================================
000213AC                            
000213AC                            BossStarLight:
000213AC 43FA 0000                  		lea	BossStarLight_Index(pc),a1
000213B0 6000 0000                  		bra.w	ObjectsRoutine
000213B4                            ; ---------------------------------------------------------------------------
000213B4                            
000213B4                            BossStarLight_Index:
000213B4 0000                       		offsetEntry.w BossStarLight_Ballhog							; 0
000213B6                            BossStarLight_AttackBall_Index
000213B6 0000                       		offsetEntry.w BossStarLight_AttackBall						; 2
000213B8                            BossStarLight_EggmanLives_Index
000213B8 0000                       		offsetEntry.w Robotnik_HudLives							; 4
000213BA                            ; ---------------------------------------------------------------------------
000213BA                            
000213BA                            BossStarLight_Ballhog:
000213BA 6100 0000                  		bsr.w	BossStarLight_MoveSprite2
000213BE 43FA 0000                  		lea	BossStarLight_Ballhog_ShipIndex(pc),a1
000213C2 6100 0000                  		bsr.w	ChildObjectsRoutine
000213C6 6100 0000                  		bsr.w	BossStarLight_Ballhog_Hurt
000213CA 6000 0000                  		bra.w	BossStarLight_DisplaySprite
000213CE                            ; ---------------------------------------------------------------------------
000213CE                            
000213CE                            BossStarLight_Ballhog_ShipIndex:
000213CE 0000                       		offsetEntry.w BossStarLight_Ballhog_Init						; 0
000213D0                            BossStarLight_Ballhog_Move_ShipIndex
000213D0 0000                       		offsetEntry.w BossStarLight_Ballhog_MoveDown				; 2
000213D2 0000                       		offsetEntry.w BossStarLight_Ballhog_Wait					; 4
000213D4 0000                       		offsetEntry.w BossStarLight_Ballhog_SetMove					; 6
000213D6 0000                       		offsetEntry.w BossStarLight_Ballhog_MoveOffScreen			; 8
000213D8 0000                       		offsetEntry.w BossStarLight_Ballhog_MoveOnScreen			; A
000213DA 0000                       		offsetEntry.w BossStarLight_Ballhog_AttackWait				; C
000213DC 0000                       		offsetEntry.w BossStarLight_Ballhog_AttackLeftRight			; E
000213DE 0000                       		offsetEntry.w BossStarLight_Ballhog_AttackLeftRightOffScreen	; 10
000213E0 0000                       		offsetEntry.w BossStarLight_Ballhog_MoveOnScreen			; 12
000213E2 0000                       		offsetEntry.w BossStarLight_Ballhog_AttackWait				; 14
000213E4 0000                       		offsetEntry.w BossStarLight_Ballhog_AttackLeftRight			; 16
000213E6 0000                       		offsetEntry.w BossStarLight_Ballhog_MoveUp					; 18
000213E8 0000                       		offsetEntry.w BossStarLight_Ballhog_MoveCircularDown		; 1A
000213EA 0000                       		offsetEntry.w BossStarLight_Ballhog_MoveCircular				; 1C
000213EC 0000                       		offsetEntry.w BossStarLight_Ballhog_MoveCircularDown		; 1E
000213EE 0000                       		offsetEntry.w BossStarLight_Ballhog_AttackStorm				; 20
000213F0 0000                       		offsetEntry.w BossStarLight_Ballhog_WaitAttackStorm			; 22
000213F2 0000                       		offsetEntry.w BossStarLight_Ballhog_MoveUpOffScreen			; 24
000213F4 0000                       		offsetEntry.w BossStarLight_Ballhog_WaitRandomAttackStorm	; 26
000213F6                            BossStarLight_Ballhog_BossDefeated_ShipIndex
000213F6 0000                       		offsetEntry.w BossStarLight_Ballhog_BossDefeated				; 28
000213F8 0000                       		offsetEntry.w BossStarLight_Ballhog_BossRemove				; 2A
000213FA                            ; ---------------------------------------------------------------------------
000213FA                            
000213FA                            BossStarLight_Ballhog_Init:
000213FA 43FA 0000                  		lea	ObjDat3_BossStarLight_BallHog(pc),a1					; Load current object attributes
000213FE 6100 0000                  		bsr.w	LoadObjects_Data									; Set current object attributes
00021402 117C 000F 0021             		move.b	#(objHits_BossStarLight),obColProp(a0)				; Set number of hits
00021408                            
00021408                            BossStarLight_Ballhog_RobotnikHud:
00021408 45FA 0000                  		lea	ChildObjDat_RobotnikHud(pc),a2
0002140C 6000 0000                  		bra.w	Create_ChildObject
00021410                            ; ---------------------------------------------------------------------------
00021410                            
00021410                            BossStarLight_Ballhog_MoveDown:
00021410 317C 0100 0012             		move.w	#$100,obVelY(a0)									; Set object Y speed
00021416 3038 F704                  		move.w	(v_screenposy).w,d0								; Copy camera Ypos into d0
0002141A 0640 0020                  		addi.w	#$20,d0
0002141E B068 000C                  		cmp.w	obY(a0),d0
00021422 6400                       		bhs.s	BossStarLight_Ballhog_MoveDown_Locret
00021424 5428 0025                  		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
00021428 317C 0060 003C             		move.w	#$60,obTimer(a0)								; Set timer
0002142E 4268 0012                  		clr.w	obVelY(a0)										; Clean object Y speed
00021432                            
00021432                            BossStarLight_Ballhog_MoveDown_Locret:
00021432 4E75                       		rts
00021434                            ; ---------------------------------------------------------------------------
00021434                            
00021434                            BossStarLight_Ballhog_Wait:
00021434 6100 0000                  		bsr.w	BossStarLight_SwingUpAndDown
00021438 6100 0000                  		bsr.w	Find_SonicObject
0002143C 6100 0000                  		bsr.w	Change_FlipX
00021440 5368 003C                  		subq.w	#1,obTimer(a0)									; Timer was ended?
00021444 66EC                       		bne.s	BossStarLight_Ballhog_MoveDown_Locret			; If not, branch
00021446 5428 0025                  		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
0002144A                            
0002144A                            BossStarLight_Ballhog_SetMove:
0002144A 317C 0100 0010             		move.w	#$100,obVelX(a0)									; Set object X speed
00021450 0828 0000 0001             		btst	#0,obRender(a0)										; Check the ballhog boss orientation
00021456 6600                       		bne.s	@1
00021458 4468 0010                  		neg.w	obVelX(a0)										; Negative object X speed
0002145C 5428 0025                  @1		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
00021460 6100 0000                  		bsr.w	Change_FlipXWithVelocity
00021464                            
00021464                            BossStarLight_Ballhog_MoveOffScreen:
00021464 6100 0000                  		bsr.w	BossStarLight_SwingUpAndDown
00021468 4A28 0001                  		tst.b obRender(a0)										; Object ballhog boss visible on the screen?
0002146C 6BC4                       		bmi.s	BossStarLight_Ballhog_MoveDown_Locret			; If yes, branch
0002146E 5428 0025                  		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
00021472 4268 0010                  		clr.w	obVelX(a0)										; Clean object X speed
00021476 3038 F704                  		move.w	(v_screenposy).w,d0								; Copy camera Ypos into d0
0002147A 0640 0090                  		addi.w	#$90,d0
0002147E 3140 000C                  		move.w	d0,obY(a0)
00021482 0868 0000 0001             		bchg	#0,obRender(a0)									; Change the ballhog boss orientation
00021488                            
00021488                            BossStarLight_Ballhog_MoveOnScreen:
00021488 317C FF00 0010             		move.w	#-$100,obVelX(a0)								; Set object X speed
0002148E 3038 F700                  		move.w	(v_screenposx).w,d0								; Copy camera Xpos into d0
00021492 0828 0000 0001             		btst	#0,obRender(a0)										; Check the ballhog boss orientation
00021498 6700                       		beq.s	@0
0002149A 4468 0010                  		neg.w	obVelX(a0)										; Negative object X speed
0002149E 0640 0020                  		addi.w	#$20,d0
000214A2 B068 0008                  		cmp.w	obX(a0),d0
000214A6 6C00                       		bge.s	@2
000214A8 6000                       		bra.s	@1
000214AA 0640 0120                  @0		addi.w	#$120,d0
000214AE B068 0008                  		cmp.w	obX(a0),d0
000214B2 6F00                       		ble.s		@2
000214B4 5428 0025                  @1		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
000214B8 4268 0010                  		clr.w	obVelX(a0)										; Clean object X speed
000214BC 317C 0020 003C             		move.w	#$20,obTimer(a0)								; Set timer
000214C2 6000 0000                  @2		bra.w	BossStarLight_SwingUpAndDown
000214C6                            ; ---------------------------------------------------------------------------
000214C6                            
000214C6                            BossStarLight_Ballhog_AttackWait:
000214C6 6100 0000                  		bsr.w	BossStarLight_SwingUpAndDown
000214CA 5368 003C                  		subq.w	#1,obTimer(a0)									; Timer was ended?
000214CE 6600                       		bne.s	BossStarLight_Ballhog_AttackLeftRight_Locret		; If not, branch
000214D0 5428 0025                  		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
000214D4 317C 0140 003C             		move.w	#$40*5,obTimer(a0)								; Set timer
000214DA                            
000214DA                            BossStarLight_Ballhog_AttackLeftRight:
000214DA 6100 0000                  		bsr.w	BossStarLight_SwingUpAndDown
000214DE 3038 FE04                  		move.w	(v_framecount).w,d0
000214E2 0240 001F                  		andi.w	#$1F,d0
000214E6 6600                       		bne.s	@1
000214E8 45FA 0000                  		lea	ChildObjDat_AttackBall(pc),a2
000214EC 6100 0000                  		bsr.w	Create_ChildObject
000214F0 6600                       		bne.s	@1
000214F2 1028 003E                  		move.b	obCount(a0),d0
000214F6 0A00 0000                  		eori.b #(BossStarLight_AttackBall2_ShipIndex-BossStarLight_AttackBall_ShipIndex),d0
000214FA 1140 003E                  		move.b	d0,obCount(a0)
000214FE 1340 0025                  		move.b	d0,ob2ndRout(a1)
00021502 5368 003C                  @1		subq.w	#1,obTimer(a0)									; Timer was ended?
00021506 6600                       		bne.s	BossStarLight_Ballhog_AttackLeftRight_Locret		; If not, branch
00021508 5428 0025                  		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
0002150C                            
0002150C                            BossStarLight_Ballhog_AttackLeftRight_Locret:
0002150C 4E75                       		rts
0002150E                            ; ---------------------------------------------------------------------------
0002150E                            
0002150E                            BossStarLight_Ballhog_AttackLeftRightOffScreen:
0002150E 6100 0000                  		bsr.w	BossStarLight_SwingUpAndDown
00021512 317C 0100 0010             		move.w	#$100,obVelX(a0)									; Set object X speed
00021518 0828 0000 0001             		btst	#0,obRender(a0)										; Check the ballhog boss orientation
0002151E 6700                       		beq.s	@1
00021520 4468 0010                  		neg.w	obVelX(a0)										; Negative object X speed
00021524 4A28 0001                  @1		tst.b obRender(a0)										; Object ballhog boss visible on the screen?
00021528 6B00                       		bmi.s	@3												; If yes, branch
0002152A 5428 0025                  		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
0002152E 3038 F700                  		move.w	(v_screenposx).w,d0								; Copy camera Xpos into d0
00021532 0828 0000 0001             		btst	#0,obRender(a0)										; Check the ballhog boss orientation
00021538 6700                       		beq.s	@2
0002153A 0640 0140                  		addi.w	#$140,d0
0002153E 3140 0008                  @2		move.w	d0,obX(a0)
00021542 0868 0000 0001             		bchg	#0,obRender(a0)									; Change the ballhog boss orientation
00021548 4E75                       @3		rts
0002154A                            ; ---------------------------------------------------------------------------
0002154A                            
0002154A                            BossStarLight_Ballhog_MoveUp:
0002154A 317C FE00 0012             		move.w	#-$200,obVelY(a0)								; Set object Y speed
00021550 3038 F704                  		move.w	(v_screenposy).w,d0								; Copy camera Ypos into d0
00021554 0640 0020                  		addi.w	#$20,d0
00021558 B068 000C                  		cmp.w	obY(a0),d0
0002155C 65AE                       		blo.s		BossStarLight_Ballhog_AttackLeftRight_Locret
0002155E                            
0002155E                            BossStarLight_Ballhog_MoveCircular:
0002155E 5428 0025                  		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
00021562 317C 0100 0012             		move.w	#$100,obVelY(a0)									; Set object Y speed
00021568 317C 0200 0010             		move.w	#$200,obVelX(a0)								; Set object X speed
0002156E 0828 0000 0001             		btst	#0,obRender(a0)										; Check the ballhog boss orientation
00021574 6600                       		bne.s	@1
00021576 4468 0010                  		neg.w	obVelX(a0)										; Negative object X speed
0002157A 70D2                       @1		moveq	#$FFFFFFD2,d0
0002157C 6100 0000                  		bsr.w	BossStarLight_PlaySound_Special					; Play sound
00021580 45FA 0000                  		lea	ChildObjDat_AttackFourBall(pc),a2
00021584 6000 0000                  		bra.w	Create_ChildObject2
00021588                            ; ---------------------------------------------------------------------------
00021588                            
00021588                            BossStarLight_Ballhog_MoveCircularDown:
00021588 5968 0012                  		subq.w	#4,obVelY(a0)									; Subtract object Y speed
0002158C 6A00                       		bpl.s	BossStarLight_Ballhog_WaitRandomAttackStorm
0002158E 3038 F704                  		move.w	(v_screenposy).w,d0								; Copy camera Ypos into d0
00021592 0640 0020                  		addi.w	#$20,d0
00021596 B068 000C                  		cmp.w	obY(a0),d0
0002159A 6500                       		blo.s		BossStarLight_Ballhog_WaitRandomAttackStorm
0002159C 5428 0025                  		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
000215A0 4268 0012                  		clr.w obVelY(a0)											; Clean object Y speed
000215A4 0868 0000 0001             		bchg	#0,obRender(a0)									; Change the ballhog boss orientation
000215AA                            
000215AA                            BossStarLight_Ballhog_WaitRandomAttackStorm:
000215AA 4E75                       		rts
000215AC                            ; ---------------------------------------------------------------------------
000215AC                            
000215AC                            BossStarLight_Ballhog_AttackStorm:
000215AC 317C FF00 0010             		move.w	#-$100,obVelX(a0)								; Set object X speed
000215B2 3038 F700                  		move.w	(v_screenposx).w,d0								; Copy camera Xpos into d0
000215B6 0828 0000 0001             		btst	#0,obRender(a0)										; Check the ballhog boss orientation
000215BC 6700                       		beq.s	@0
000215BE 4468 0010                  		neg.w	obVelX(a0)										; Negative object X speed
000215C2 0640 00A0                  		addi.w	#$A0,d0
000215C6 B068 0008                  		cmp.w	obX(a0),d0
000215CA 6C00                       		bge.s	@2
000215CC 6000                       		bra.s	@1
000215CE 0640 00A0                  @0		addi.w	#$A0,d0
000215D2 B068 0008                  		cmp.w	obX(a0),d0
000215D6 6F00                       		ble.s		@2
000215D8 5428 0025                  @1		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
000215DC 4268 0010                  		clr.w obVelX(a0)											; Clean object X speed
000215E0 317C 0280 003C             		move.w	#$280,obTimer(a0)								; Set timer
000215E6 6000 0000                  @2		bra.w	BossStarLight_SwingUpAndDown
000215EA                            ; ---------------------------------------------------------------------------
000215EA                            
000215EA                            BossStarLight_Ballhog_WaitAttackStorm:
000215EA 6100 0000                  		bsr.w	BossStarLight_SwingUpAndDown
000215EE 3038 FE04                  		move.w	(v_framecount).w,d0
000215F2 0240 005F                  		andi.w	#$5F,d0
000215F6 6600                       		bne.s	@1
000215F8 45FA 0000                  		lea	ChildObjDat_AttackJumpBall(pc),a2
000215FC 6100 0000                  		bsr.w	Create_ChildObject
00021600 0868 0000 0001             		bchg	#0,obRender(a0)									; Change the ballhog boss orientation
00021606 5368 003C                  @1		subq.w	#1,obTimer(a0)									; Timer was ended?
0002160A 669E                       		bne.s	BossStarLight_Ballhog_WaitRandomAttackStorm		; If not, branch
0002160C 5428 0025                  		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
00021610                            
00021610                            BossStarLight_Ballhog_MoveUpOffScreen:
00021610 317C FF00 0012             		move.w	#-$100,obVelY(a0)								; Set object Y speed
00021616 3038 F704                  		move.w	(v_screenposy).w,d0								; Copy camera Ypos into d0
0002161A 0440 0080                  		subi.w	#$80,d0
0002161E B068 000C                  		cmp.w	obY(a0),d0
00021622 6586                       		blo.s		BossStarLight_Ballhog_WaitRandomAttackStorm
00021624 5428 0025                  		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
00021628 4268 0012                  		clr.w	obVelY(a0)										; Clean object Y speed
0002162C 45FA 0000                  		lea	ChildObjDat_RandomAttackBall(pc),a2
00021630 6000 0000                  		bra.w	Create_ChildObject2_Special
00021634                            
00021634                            ; =============== S U B R O U T I N E =======================================
00021634                            
00021634                            BossStarLight_Ballhog_Hurt:
00021634 4A28 003B                  		tst.b obDefeated(a0)										; Boss was defeated?
00021638 6600                       		bne.s	BossStarLight_Ballhog_Locret						; If yes, branch
0002163A 4A28 0020                  		tst.b obColType(a0)										; If collision is on, don't do anything
0002163E 6600                       		bne.s	BossStarLight_Ballhog_Locret
00021640 4A28 0021                  		tst.b obColProp(a0)
00021644 6700                       		beq.s	BossStarLight_Ballhog_ShipGone
00021646 4A28 003F                  		tst.b	obFlash(a0)
0002164A 6600                       		bne.s	BossStarLight_Ballhog_ShipFlash
0002164C 117C 0060 003F             		move.b	#$60,obFlash(a0)									; Set number of times for ship to flash
00021652 70AC                       		moveq	#$FFFFFFAC,d0
00021654 6100 0000                  		bsr.w	BossStarLight_PlaySound_Special					; Play hit sound
00021658                            
00021658                            BossStarLight_Ballhog_ShipFlash:
00021658 7000                       		moveq	#0,d0											; Clear d0
0002165A 0828 0000 003F             		btst	#0,obFlash(a0)
00021660 6600                       		bne.s	@1
00021662 5C40                       		addq.w	#3*2,d0
00021664 43FA 0000                  @1		lea	LoadBossStarLight_Ballhog_PalRAM(pc),a1
00021668 45FB 0000                  		lea	LoadBossStarLight_Ballhog_PalCycle(pc,d0.w),a2
0002166C                            	rept 3
0002166C                            		movea.w	(a1)+,a3
0002166C                            		move.w	(a2)+,(a3)+
0002166C 3659 36DA 3659 36DA 3659+  	endr
00021678 5328 003F                  		subq.b	#1,obFlash(a0)
0002167C 6600                       		bne.s	BossStarLight_Ballhog_Locret
0002167E 117C 0005 0020             		move.b	#5,obColType(a0)
00021684                            
00021684                            BossStarLight_Ballhog_Locret:
00021684 4E75                       		rts
00021686                            ; ---------------------------------------------------------------------------
00021686                            
00021686                            LoadBossStarLight_Ballhog_PalRAM:
00021686 FB2E                       		dc.w $FB2E
00021688 FB30                       		dc.w $FB30
0002168A FB32                       		dc.w $FB32
0002168C                            LoadBossStarLight_Ballhog_PalCycle:
0002168C 0ECC                       		dc.w $ECC
0002168E 0CAA                       		dc.w $CAA
00021690 0866                       		dc.w $866
00021692 000E                       		dc.w $E
00021694 000C                       		dc.w $C
00021696 000A                       		dc.w $A
00021698                            ; ---------------------------------------------------------------------------
00021698                            
00021698                            BossStarLight_Ballhog_ShipGone:
00021698 117C 0028 0025             		move.b	#(BossStarLight_Ballhog_BossDefeated_ShipIndex-BossStarLight_Ballhog_ShipIndex),ob2ndRout(a0)
0002169E 317C 00B4 003C             		move.w	#3*60,obTimer(a0)								; Set timer to 3 seconds
000216A4 42A8 0010                  		clr.l obVelX(a0)											; Clean object XY speed
000216A8 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w								; Set boss status
000216AE 50E8 003B                  		st	obDefeated(a0)										; Set defeated flag
000216B2 4238 FE1E                  		clr.b (f_timecount).w										; Stop game timer
000216B6 7064                       		moveq	#100,d0
000216B8 6000 0000                  		bra.w	BossStarLight_AddPoints							; Add 1000 points
000216BC                            ; ---------------------------------------------------------------------------
000216BC                            
000216BC                            BossStarLight_Ballhog_BossDefeated:
000216BC 6100 0000                  		bsr.w	BossStarLight_BossDefeated						; Make explode
000216C0 5368 003C                  		subq.w	#1,obTimer(a0)									; Timer was ended?
000216C4 66BE                       		bne.s	BossStarLight_Ballhog_Locret						; If not, branch
000216C6 5428 0025                  		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
000216CA                            
000216CA                            BossStarLight_Ballhog_BossRemove:
000216CA 6100 0000                  		bsr.w	BossStarLight_GotThroughAct
000216CE 6000 0000                  		bra.w	BossStarLight_DeleteObject
000216D2                            
000216D2                            ; ---------------------------------------------------------------------------
000216D2                            ; Object ballhog boss hurt ball.
000216D2                            ; ---------------------------------------------------------------------------
000216D2                            
000216D2                            ; Dynamic object variables
000216D2 =00000030                  obRXpos:		equ $30	; .w
000216D2                            
000216D2                            ; =============== S U B R O U T I N E =======================================
000216D2                            
000216D2                            BossStarLight_AttackBall:
000216D2 3468 0034                  		movea.w	obParent(a0),a2									; Load parent RAM address
000216D6 43FA 0000                  		lea	BossStarLight_AttackBall_ShipIndex(pc),a1
000216DA 6100 0000                  		bsr.w	ChildObjectsRoutine
000216DE 6000 0000                  		bra.w	BossStarLight_DisplaySprite
000216E2                            ; ---------------------------------------------------------------------------
000216E2                            
000216E2                            BossStarLight_AttackBall_ShipIndex:
000216E2 0000                       		offsetEntry.w BossStarLight_AttackBall_Main					; 0
000216E4 0000                       		offsetEntry.w BossStarLight_AttackBall_SetXYSpeed			; 2
000216E6 0000                       		offsetEntry.w BossStarLight_AttackBall_Fall					; 4
000216E8 0000                       		offsetEntry.w BossStarLight_AttackBall_Destroy				; 6
000216EA                            BossStarLight_AttackBall2_ShipIndex
000216EA 0000                       		offsetEntry.w BossStarLight_AttackBall_Main					; 8
000216EC 0000                       		offsetEntry.w BossStarLight_AttackBall_SetXSpeed			; A
000216EE 0000                       		offsetEntry.w BossStarLight_AttackBall_CheckDestroy			; C
000216F0                            BossStarLight_AttackBall3_ShipIndex
000216F0 0000                       		offsetEntry.w BossStarLight_AttackBall_Main					; E
000216F2 0000                       		offsetEntry.w BossStarLight_AttackBall_SetYPos				; 10
000216F4 0000                       		offsetEntry.w BossStarLight_AttackBall_SetTimer				; 12
000216F6 0000                       		offsetEntry.w BossStarLight_AttackBall_WaitTimer			; 14
000216F8 0000                       		offsetEntry.w BossStarLight_AttackBall_Fall					; 16
000216FA 0000                       		offsetEntry.w BossStarLight_AttackBall_CheckReturnDestroy	; 18
000216FC                            BossStarLight_AttackBall4_ShipIndex
000216FC 0000                       		offsetEntry.w BossStarLight_AttackBall_Main					; 1A
000216FE 0000                       		offsetEntry.w BossStarLight_AttackBall_SetXAttributesSpeed	; 1C
00021700 0000                       		offsetEntry.w BossStarLight_AttackBall_Fall					; 1E
00021702 0000                       		offsetEntry.w BossStarLight_AttackBall_Destroy				; 20
00021704                            BossStarLight_AttackBall5_ShipIndex
00021704 0000                       		offsetEntry.w BossStarLight_AttackBall_Main					; 22
00021706 0000                       		offsetEntry.w BossStarLight_AttackBall_SetXYMove			; 24
00021708 0000                       		offsetEntry.w BossStarLight_AttackBall_CheckScreen			; 26
0002170A                            BossStarLight_AttackBall5_Fall_ShipIndex
0002170A 0000                       		offsetEntry.w BossStarLight_AttackBall_Fall					; 28
0002170C 0000                       		offsetEntry.w BossStarLight_AttackBall_Jump					; 2A
0002170E                            BossStarLight_AttackBall5_Destroy_ShipIndex
0002170E 0000                       		offsetEntry.w BossStarLight_AttackBall_Destroy				; 2C
00021710                            ; ---------------------------------------------------------------------------
00021710                            
00021710                            BossStarLight_AttackBall_Main:
00021710 302A 000C                  		move.w	obY(a2),d0
00021714 0640 000C                  		addi.w	#$C,d0
00021718 3140 000C                  		move.w	d0,obY(a0)
0002171C 700C                       		moveq	#$C,d0
0002171E 082A 0000 0001             		btst	#0,obRender(a2)										; Check the ballhog boss orientation
00021724 6600                       		bne.s	@1
00021726 70FC                       		moveq	#-4,d0
00021728 D168 0008                  @1		add.w	d0,obX(a0)
0002172C 157C 0001 001A             		move.b	#1,obFrame(a2)									; Change object ballhog boss frame
00021732 43FA 0000                  		lea	ObjDat3_BossStarLight_AttackBall(pc),a1				; Load current object attributes
00021736 6000 0000                  		bra.w	LoadObjects_ExtraData							; Set current object attributes
0002173A                            ; ---------------------------------------------------------------------------
0002173A                            
0002173A                            BossStarLight_AttackBall_SetXYMove:
0002173A 317C FD00 0012             		move.w	#-$300,obVelY(a0)								; Set object Y speed
00021740 317C 0400 0010             		move.w	#$400,obVelX(a0)								; Set object X speed
00021746 082A 0000 0001             		btst	#0,obRender(a2)										; Check the ballhog boss orientation
0002174C 6600                       		bne.s	@1
0002174E 4468 0010                  		neg.w	obVelX(a0)										; Negative object X speed
00021752 5428 0025                  @1		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
00021756 70D3                       		moveq	#$FFFFFFD3,d0
00021758 6000 0000                  		bra.w	BossStarLight_PlaySound_Special					; Play sound
0002175C                            ; ---------------------------------------------------------------------------
0002175C                            
0002175C                            BossStarLight_AttackBall_CheckScreen:
0002175C 3038 F700                  		move.w	(v_screenposx).w,d0								; Copy camera Xpos into d0
00021760 4A68 0010                  		tst.w obVelX(a0)											; Check object the orientation of movement
00021764 6A00                       		bpl.s	@0
00021766 5040                       		addq.w	#8,d0
00021768 B068 0008                  		cmp.w	obX(a0),d0
0002176C 6F00                       		ble.s		@3
0002176E 6000                       		bra.s	@1
00021770 0640 0140                  @0		addi.w	#$140,d0
00021774 B068 0008                  		cmp.w	obX(a0),d0
00021778 6C00                       		bge.s	@3
0002177A 5428 0025                  @1		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
0002177E 303C 0200                  		move.w	#$200,d0
00021782 4A68 0010                  		tst.w obVelX(a0)											; Check object the orientation of movement
00021786 6B00                       		bmi.s	@2
00021788 4440                       		neg.w	d0												; Negative d0
0002178A 3140 0010                  @2		move.w	d0,obVelX(a0)									; Set object X speed
0002178E 6000 0000                  @3		bra.w	BossStarLight_MoveSprite
00021792                            ; ---------------------------------------------------------------------------
00021792                            
00021792                            BossStarLight_AttackBall_Jump:
00021792 317C FC00 0012             		move.w	#-$400,obVelY(a0)								; Set object Y speed
00021798 7028                       		moveq	#(BossStarLight_AttackBall5_Fall_ShipIndex-BossStarLight_AttackBall_ShipIndex),d0
0002179A 4A28 0001                  		tst.b obRender(a0)										; Object ball visible on the screen?
0002179E 6B00                       		bmi.s	@1												; If yes, branch
000217A0 702C                       		moveq	#(BossStarLight_AttackBall5_Destroy_ShipIndex-BossStarLight_AttackBall_ShipIndex),d0
000217A2 1140 0025                  @1		move.b	d0,ob2ndRout(a0)									; Jump to routine
000217A6 4E75                       		rts
000217A8                            ; ---------------------------------------------------------------------------
000217A8                            
000217A8                            BossStarLight_AttackBall_SetXAttributesSpeed:
000217A8 1028 0028                  		move.b	obSubtype(a0),d0
000217AC E140                       		asl.w	#8,d0											; Arithmetic shift
000217AE 082A 0000 0001             		btst	#0,obRender(a2)										; Check the ballhog boss orientation
000217B4 6600                       		bne.s	@1
000217B6 4440                       		neg.w	d0												; Negative d0
000217B8 3140 0010                  @1		move.w	d0,obVelX(a0)									; Set object X speed
000217BC 317C FE00 0012             		move.w	#-$200,obVelY(a0)								; Set object Y speed
000217C2 5428 0025                  		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
000217C6 4E75                       		rts
000217C8                            ; ---------------------------------------------------------------------------
000217C8                            
000217C8                            BossStarLight_AttackBall_SetYPos:
000217C8 3038 F700                  		move.w	(v_screenposx).w,d0								; Copy camera Xpos into d0
000217CC D068 0030                  		add.w	obRXpos(a0),d0
000217D0 3140 0008                  		move.w	d0,obX(a0)										; Set Xpos
000217D4 3038 F704                  		move.w	(v_screenposy).w,d0								; Copy camera Ypos into d0
000217D8 0440 0020                  		subi.w	#$20,d0
000217DC 3140 000C                  		move.w	d0,obY(a0)										; Set Ypos
000217E0 5428 0025                  		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
000217E4                            
000217E4                            BossStarLight_AttackBall_SetTimer:
000217E4 7000                       		moveq	#0,d0											; Clear d0
000217E6 1028 0028                  		move.b	obSubtype(a0),d0
000217EA E948                       		lsl.w	#4,d0												; Logical shift
000217EC 3140 003C                  		move.w	d0,obTimer(a0)									; Set timer
000217F0 5428 0025                  		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
000217F4                            
000217F4                            BossStarLight_AttackBall_WaitTimer:
000217F4 5368 003C                  		subq.w	#1,obTimer(a0)									; Timer was ended?
000217F8 6A00                       		bpl.s	BossStarLight_AttackBall_WaitTimer_Locret			; If not, branch
000217FA 5428 0025                  		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
000217FE                            
000217FE                            BossStarLight_AttackBall_WaitTimer_Locret:
000217FE 4E75                       		rts
00021800                            ; ---------------------------------------------------------------------------
00021800                            
00021800                            BossStarLight_AttackBall_SetXSpeed:
00021800 317C 0600 0010             		move.w	#$600,obVelX(a0)								; Set object X speed
00021806 082A 0000 0001             		btst	#0,obRender(a2)										; Check the ballhog boss orientation
0002180C 6600                       		bne.s	@1
0002180E 4468 0010                  		neg.w	obVelX(a0)										; Negative object X speed
00021812 5428 0025                  @1		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
00021816 70D3                       		moveq	#$FFFFFFD3,d0
00021818 6000 0000                  		bra.w	BossStarLight_PlaySound_Special					; Play sound
0002181C                            ; ---------------------------------------------------------------------------
0002181C                            
0002181C                            BossStarLight_AttackBall_SetXYSpeed:
0002181C 317C FA00 0012             		move.w	#-$600,obVelY(a0)								; Set object Y speed
00021822 6100 0000                  		bsr.w	BossStarLight_RandomNumber
00021826 0240 01FF                  		andi.w	#$1FF,d0
0002182A 0640 0040                  		addi.w	#$40,d0
0002182E 3140 0010                  		move.w	d0,obVelX(a0)									; Set object X speed
00021832 082A 0000 0001             		btst	#0,obRender(a2)										; Check the ballhog boss orientation
00021838 6600                       		bne.s	@1
0002183A 4468 0010                  		neg.w	obVelX(a0)										; Negative object X speed
0002183E 5428 0025                  @1		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
00021842 70D3                       		moveq	#$FFFFFFD3,d0
00021844 6100 0000                  		bsr.w	BossStarLight_PlaySound_Special					; Play sound
00021848                            
00021848                            BossStarLight_AttackBall_Fall:
00021848 6100 0000                  		bsr.w	BossStarLight_MoveSprite
0002184C 4A68 0012                  		tst.w obVelY(a0)
00021850 6B00                       		bmi.s	BossStarLight_AttackBall_Anim
00021852 3F0A                       		move.w	a2,-(sp)											; Save a2 to stack
00021854 6100 0000                  		bsr.w	BossStarLight_ObjHitFloor
00021858 345F                       		movea.w	(sp)+,a2											; Load a2 from stack
0002185A 4A41                       		tst.w	d1
0002185C 6A00                       		bpl.s	BossStarLight_AttackBall_Anim
0002185E D368 000C                  		add.w	d1,obY(a0)
00021862 5428 0025                  		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
00021866 157C 0000 001A             		move.b	#0,obFrame(a2)									; Change object ballhog boss frame
0002186C                            
0002186C                            BossStarLight_AttackBall_Anim:
0002186C 7002                       		moveq	#2,d0											; Use frame #2
0002186E 0838 0000 FE0F             		btst	#0,(v_vbla_count+3).w								; Check vertical interrupt counter
00021874 6700                       		beq.s	@1
00021876 7003                       		moveq	#3,d0											; Use frame #3
00021878 1140 001A                  @1		move.b	d0,obFrame(a0)									; Set current frame
0002187C                            
0002187C                            BossStarLight_AttackBall_Locret:
0002187C 4E75                       		rts
0002187E                            ; ---------------------------------------------------------------------------
0002187E                            
0002187E                            BossStarLight_AttackBall_CheckReturnDestroy:
0002187E 1028 0028                  		move.b	obSubtype(a0),d0
00021882 0C00 001E                  		cmpi.b	#(16-1)*2,d0
00021886 6600                       		bne.s	@1
00021888 157C 0002 0025             		move.b	#(BossStarLight_Ballhog_Move_ShipIndex-BossStarLight_Ballhog_ShipIndex),ob2ndRout(a2)
0002188E 6000                       @1		bra.s	BossStarLight_AttackBall_Destroy
00021890                            ; ---------------------------------------------------------------------------
00021890                            
00021890                            BossStarLight_AttackBall_CheckDestroy:
00021890 61DA                       		bsr.s	BossStarLight_AttackBall_Anim						; Object ball animation
00021892 6100 0000                  		bsr.w	BossStarLight_MoveSprite2
00021896 4A28 0001                  		tst.b obRender(a0)										; Object ball visible on the screen?
0002189A 6BE0                       		bmi.s	BossStarLight_AttackBall_Locret					; If yes, branch
0002189C                            
0002189C                            BossStarLight_AttackBall_Destroy:
0002189C 10BC 003F                  		move.b	#$3F,(a0)										; Replace object the ball with Obj3F (red explosion)
000218A0 117C 0000 0024             		move.b	#0,obRoutine(a0)									; Clean object routine
000218A6 4E75                       		rts
000218A8                            
000218A8                            ; ---------------------------------------------------------------------------
000218A8                            ; Object robotnik hud lives.
000218A8                            ; ---------------------------------------------------------------------------
000218A8                            
000218A8                            ; Dynamic object variables
000218A8 =0000002A                  obVRAM:		equ $2A	; .l
000218A8 =0000002E                  obPointer:		equ $2E	; .l
000218A8                            
000218A8                            ; =============== S U B R O U T I N E =======================================
000218A8                            
000218A8                            Robotnik_HudLives:
000218A8 3468 0034                  		movea.w	obParent(a0),a2									; Load parent RAM address
000218AC 43FA 0000                  		lea	Robotnik_HudLives_ShipIndex(pc),a1
000218B0 6000 0000                  		bra.w	ChildObjectsRoutine
000218B4                            ; ---------------------------------------------------------------------------
000218B4                            
000218B4                            Robotnik_HudLives_ShipIndex:
000218B4 0000                       		offsetEntry.w Robotnik_HudLives_Init						; 0
000218B6 0000                       		offsetEntry.w Robotnik_HudLives_CheckPLC					; 2
000218B8 0000                       		offsetEntry.w Robotnik_HudLives_MoveDown					; 4
000218BA 0000                       		offsetEntry.w Robotnik_HudLives_AddHits					; 6
000218BC 0000                       		offsetEntry.w Robotnik_HudLives_MoveUp					; 8
000218BE 0000                       		offsetEntry.w Robotnik_HudLives_MoveRemove				; A
000218C0                            ; ---------------------------------------------------------------------------
000218C0                            
000218C0                            Robotnik_HudLives_Init:
000218C0 5428 0025                  		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
000218C4 217C 0000 0000 0004        		move.l	#Map_RobotnikHud,obMap(a0)						; Load object mapping
000218CC 317C 8680 0002             		move.w	#(obVRAM_RobotnikHud),obGfx(a0)				; Current VRAM address
000218D2 317C 0170 0008             		move.w	#$170,obX(a0)									; Set Xpos
000218D8 317C 0028 000A             		move.w	#$28,obScreenY(a0)								; Set Ypos
000218E6 217C 0000 0000 002E        		move.l	#Art_LivesNums,obPointer(a0)						; Load uncompressed HUD art
000218EE                            
000218EE                            Robotnik_HudLives_CheckPLC:
000218EE 4AB8 F680                  		tst.l	($FFFFF680).w										; PLC has been loaded?
000218F2 6600                       		bne.s	Robotnik_HudLives_MoveDisplay					; If not, branch
000218F4 5428 0025                  		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
000218F8                            
000218F8                            Robotnik_HudLives_MoveDown:
000218F8 5268 000A                  		addq.w	#1,obScreenY(a0)									; Downward movement
000218FC 0C68 0048 000A             		cmpi.w	#$48,obScreenY(a0)								; Ypos is the same?
00021902 6600                       		bne.s	Robotnik_HudLives_MoveDisplay					; If not, branch
00021904 5428 0025                  		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
00021908                            
00021908                            Robotnik_HudLives_AddHits:
00021908 102A 0021                  		move.b	obColProp(a2),d0									; Copy current object hits into d0
0002190C 5328 003C                  		subq.b	#1,obTimer(a0)									; Timer was ended?
00021910 6A00                       		bpl.s	Robotnik_HudLives_AddHitsCheck					; If not, branch
00021912 5228 0021                  		addq.b	#1,obColProp(a0)									; Add hits in HUD object
00021916 117C 0003 003C             		move.b	#3,obTimer(a0)									; Set timer
0002191C 70CD                       		moveq	#$FFFFFFCD,d0
0002191E 6100 0000                  		bsr.w	BossStarLight_PlaySound_Special					; Play sound
00021922                            
00021922                            Robotnik_HudLives_AddHitsCheck:
00021922 B028 0021                  		cmp.b	obColProp(a0),d0									; Number of hits is the same?
00021926 6600                       		bne.s	Robotnik_HudLives_MoveDisplay					; If not, branch
00021928 5428 0025                  		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
0002192C 70C5                       		moveq	#$FFFFFFC5,d0
0002192E 6100 0000                  		bsr.w	BossStarLight_PlaySound_Special					; Play sound
00021932                            
00021932                            Robotnik_HudLives_MoveUp:
00021932 116A 0021 0021             		move.b	obColProp(a2),obColProp(a0)
00021938 4A38 F7A7                  		tst.b (v_bossstatus).w										; Boss status is empty?
0002193C 6700                       		beq.s	Robotnik_HudLives_MoveDisplay					; If yes, branch
0002193E 5368 000A                  		subq.w	#1,obScreenY(a0)									; Upward movement
00021942 0C68 0028 000A             		cmpi.w	#$28,obScreenY(a0)								; Ypos is the same?
00021948 6600                       		bne.s	Robotnik_HudLives_MoveDisplay					; If not, branch
0002194A 5428 0025                  		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
0002194E                            
0002194E                            Robotnik_HudLives_MoveDisplay:
0002194E 46FC 2700                  		move	#$2700,sr										; Disable interrupts
00021952 6100                       		bsr.s	Robotnik_HudLives_DynamicVRAM
00021954 46FC 2300                  		move	#$2300,sr										; Enable interrupts
00021958 6000 0000                  		bra.w	BossStarLight_DisplaySprite
0002195C                            ; ---------------------------------------------------------------------------
0002195C                            
0002195C                            Robotnik_HudLives_MoveRemove:
0002195C 6000 0000                  		bra.w	BossStarLight_DeleteObject
00021960                            ; ---------------------------------------------------------------------------
00021960                            
00021960                            Robotnik_HudLives_DynamicVRAM:
00021960 4DF9 00C0 0000             		lea	($C00000).l,a6
00021966 7200                       		moveq	#0,d1											; Clear d1
00021968 7C00                       		moveq	#0,d6											; Clear d6
0002196A 1228 0021                  		move.b	obColProp(a0),d1 									; Load number of hits
0002196E 2028 002A                  		move.l	obVRAM(a0),d0									; Load VRAM address
00021972 43FA 0000                  		lea	ObData_HudLives_10(pc),a1
00021976 0C01 0064                  		cmpi.b	#100,d1											; Number 100 or more?
0002197A 6500                       		bcs.s	Robotnik_HudLives_LoadData						; If not, branch
0002197C 43FA 0000                  		lea	ObData_HudLives_100(pc),a1
00021980                            
00021980                            Robotnik_HudLives_LoadData:
00021980 1159 001A                  		move.b	(a1)+,obFrame(a0)								; Set current frame
00021984 1C19                       		move.b	(a1)+,d6											; Set time repeats
00021986 2459                       		move.l	(a1)+,a2											; Load address size numbers '00/000'
00021988                            
00021988                            Robotnik_HudLives_LoadArt:
00021988 7800                       		moveq	#0,d4											; Clear d4
0002198A 2268 002E                  		movea.l	obPointer(a0),a1									; Load address of uncompressed HUD art
0002198E                            
0002198E                            Robotnik_HudLives_Loop:
0002198E 7400                       		moveq	#0,d2											; Clear d2
00021990 2D40 0004                  		move.l	d0,4(a6)											; Store VPD address
00021994 261A                       		move.l	(a2)+,d3
00021996                            
00021996                            Robotnik_HudLives_FindDigit:
00021996 9283                       		sub.l	d3,d1
00021998 6500                       		bcs.s	Robotnik_HudLives_LivesWrite
0002199A 5242                       		addq.w	#1,d2											; Add 1 to digit
0002199C 60F8                       		bra.s	Robotnik_HudLives_FindDigit
0002199E                            ; ---------------------------------------------------------------------------
0002199E                            
0002199E                            Robotnik_HudLives_LivesWrite:
0002199E D283                       		add.l	d3,d1
000219A0 4A42                       		tst.w	d2												; Is digit zero?
000219A2 6700                       		beq.s	Robotnik_HudLives_CheckZero						; If yes, branch
000219A4 383C 0001                  		move.w	#1,d4
000219A8                            
000219A8                            Robotnik_HudLives_CheckZero:
000219A8 4A44                       		tst.w	d4												; This digit is not used?
000219AA 6700                       		beq.s	Robotnik_HudLives_ClrLives						; If yes, branch
000219AC                            
000219AC                            Robotnik_HudLives_GetTile:
000219AC EB4A                       		lsl.w	#5,d2												; Logical shift
000219AE 47F1 2000                  		lea	(a1,d2.w),a3											; Get tile to load
000219B2                            	rept 8														; Tile size 8x8
000219B2                            		move.l	(a3)+,(a6)										; Copy tile 8x1 to VRAM
000219B2 2C9B 2C9B 2C9B 2C9B 2C9B+  	endr
000219C2                            
000219C2                            Robotnik_HudLives_LivesNext:
000219C2 0680 0040 0000             		addi.l	#$400000,d0
000219C8 51CE FFC4                  		dbf	d6,Robotnik_HudLives_Loop
000219CC 4E75                       		rts
000219CE                            ; ---------------------------------------------------------------------------
000219CE                            
000219CE                            Robotnik_HudLives_ClrLives:
000219CE 4A46                       		tst.w	d6
000219D0 67DA                       		beq.s	Robotnik_HudLives_GetTile
000219D2 7A07                       		moveq	#8-1,d5
000219D4                            
000219D4                            Robotnik_HudLives_WriteTile:
000219D4 2CBC 0000 0000             		move.l	#0,(a6)											; Fill VRAM with #0
000219DA 51CD FFF8                  		dbf	d5,Robotnik_HudLives_WriteTile						; Repeat 8 more times
000219DE 60E2                       		bra.s	Robotnik_HudLives_LivesNext
000219E0                            
000219E0                            ; =============== S U B R O U T I N E =======================================
000219E0                            
000219E0                            LoadObjects_Data:
000219E0 2159 0004                  		move.l	(a1)+,obMap(a0)									; Mappings location
000219E4 3159 0002                  		move.w	(a1)+,obGfx(a0)									; VRAM offset
000219E8                            
000219E8                            LoadObjects_ExtraData:
000219E8 1159 0018                  		move.b	(a1)+,obPriority(a0)								; Priority
000219EC 1159 0017                  		move.b	(a1)+,obWidth(a0)								; Width
000219F0 1159 0016                  		move.b	(a1)+,obHeight(a0)								; Height
000219F4 1159 0019                  		move.b	(a1)+,obActWid(a0)								; Action width
000219F8 1159 001A                  		move.b	(a1)+,obFrame(a0)								; Mappings frame
000219FC 1159 0020                  		move.b	(a1)+,obColType(a0)								; Collision Number
00021A00 08E8 0002 0001             		bset	#2,obRender(a0)										; Object uses world coordinates
00021A06 5428 0025                  		addq.b	#2,ob2ndRout(a0)									; Jump to next routine
00021A0A 4E75                       		rts
00021A0C                            ; ---------------------------------------------------------------------------
00021A0C                            
00021A0C                            ObjectsRoutine:
00021A0C 7000                       		moveq	#0,d0											; Clear d0
00021A0E 1028 0024                  		move.b	obRoutine(a0),d0
00021A12 D2F1 0000                  		adda.w	(a1,d0.w),a1
00021A16 4EF1 0000                  		jmp	(a1,d0.w)
00021A1A                            ; ---------------------------------------------------------------------------
00021A1A                            
00021A1A                            ChildObjectsRoutine:
00021A1A 7000                       		moveq	#0,d0											; Clear d0
00021A1C 1028 0025                  		move.b	ob2ndRout(a0),d0
00021A20 D2F1 0000                  		adda.w	(a1,d0.w),a1
00021A24 4EF1 0000                  		jmp	(a1,d0.w)
00021A28                            ; ---------------------------------------------------------------------------
00021A28                            
00021A28                            Create_ChildObject:
00021A28 7400                       		moveq	#0,d2											; Clear d2
00021A2A 3C1A                       		move.w	(a2)+,d6											; Creates x number of the object at the parent's position
00021A2C 6100 0000                  @1		bsr.w	BossStarLight_SingleObjLoad2
00021A30 6600                       		bne.s	@2
00021A32 3348 0034                  		move.w	a0,obParent(a1)									; Parent RAM address into another parent RAM address
00021A36 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00021A3C 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)								; Mappings and VRAM offset copied from parent object
00021A42 129A                       		move.b	(a2)+,(a1)										; Object address
00021A44 1342 0028                  		move.b	d2,obSubtype(a1)
00021A48 3368 0008 0008             		move.w	obX(a0),obX(a1)									; Copy object Xpos into another object Xpos
00021A4E 3368 000C 000C             		move.w	obY(a0),obY(a1)									; Copy object Ypos into another object Ypos
00021A54 135A 0024                  		move.b	(a2)+,obRoutine(a1)
00021A58 135A 0025                  		move.b	(a2)+,ob2ndRout(a1)
00021A5C 5442                       		addq.w	#2,d2
00021A5E 51CE FFCC                  		dbf	d6,@1
00021A62 7000                       		moveq	#0,d0											; Clear d0
00021A64 4E75                       @2		rts
00021A66                            ; ---------------------------------------------------------------------------
00021A66                            
00021A66                            Create_ChildObject2:
00021A66 7400                       		moveq	#0,d2											; Clear d2
00021A68 3C1A                       		move.w	(a2)+,d6											; Creates x number of the same object at the parent's position
00021A6A 361A                       		move.w	(a2)+,d3
00021A6C 6100 0000                  @1		bsr.w	BossStarLight_SingleObjLoad2
00021A70 6600                       		bne.s	@2
00021A72 3348 0034                  		move.w	a0,obParent(a1)									; Parent RAM address into another parent RAM address
00021A76 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00021A7C 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)								; Mappings and VRAM offset copied from parent object
00021A82 1292                       		move.b	(a2),(a1)											; Object address
00021A84 1342 0028                  		move.b	d2,obSubtype(a1)
00021A88 3368 0008 0008             		move.w	obX(a0),obX(a1)									; Copy object Xpos into another object Xpos
00021A8E 3368 000C 000C             		move.w	obY(a0),obY(a1)									; Copy object Ypos into another object Ypos
00021A94 3343 0024                  		move.w	d3,obRoutine(a1)
00021A98 5442                       		addq.w	#2,d2
00021A9A 51CE FFD0                  		dbf	d6,@1
00021A9E 7000                       		moveq	#0,d0											; Clear d0
00021AA0 4E75                       @2		rts
00021AA2                            ; ---------------------------------------------------------------------------
00021AA2                            
00021AA2                            Create_ChildObject2_Special:
00021AA2 7400                       		moveq	#0,d2											; Clear d2
00021AA4 3C1A                       		move.w	(a2)+,d6											; Creates x number of the same object at the parent's position
00021AA6 361A                       		move.w	(a2)+,d3
00021AA8 6100 0000                  @1		bsr.w	BossStarLight_SingleObjLoad2
00021AAC 6600                       		bne.s	@2
00021AAE 3348 0034                  		move.w	a0,obParent(a1)									; Parent RAM address into another parent RAM address
00021AB2 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00021AB8 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)								; Mappings and VRAM offset copied from parent object
00021ABE 1292                       		move.b	(a2),(a1)											; Object address
00021AC0 1342 0028                  		move.b	d2,obSubtype(a1)
00021AC4 3368 0008 0008             		move.w	obX(a0),obX(a1)									; Copy object Xpos into another object Xpos
00021ACA 3368 000C 000C             		move.w	obY(a0),obY(a1)									; Copy object Ypos into another object Ypos
00021AD0 3343 0024                  		move.w	d3,obRoutine(a1)
00021AD4 6100 0000                  		bsr.w	BossStarLight_RandomNumber
00021AD8 0240 00FF                  		andi.w	#$FF,d0
00021ADC 0640 0010                  		addi.w	#$10,d0
00021AE0 3340 0030                  		move.w	d0,obRXpos(a1)
00021AE4 5442                       		addq.w	#2,d2
00021AE6 51CE FFC0                  		dbf	d6,@1
00021AEA 7000                       		moveq	#0,d0											; Clear d0
00021AEC 4E75                       @2		rts
00021AEE                            ; ---------------------------------------------------------------------------
00021AEE                            
00021AEE                            Find_SonicObject:
00021AEE 43F8 D000                  		lea	(v_player).w,a1										; Load Sonic object RAM
00021AF2                            
00021AF2                            Find_OtherObject:
00021AF2 7000                       		moveq	#0,d0											; d0 = 0 if object is left of calling object, 2 if right of it
00021AF4 3428 0008                  		move.w	obX(a0),d2										; Current object Xpos to d2
00021AF8 9469 0008                  		sub.w	obX(a1),d2										; Subtract Sonic Xpos from object Xpos
00021AFC 6A00                       		bpl.s	@1
00021AFE 4442                       		neg.w	d2												; Negative d3
00021B00 5440                       		addq.w	#2,d0
00021B02 7200                       @1		moveq	#0,d1											; d1 = 0 if object is above calling object, 2 if below it
00021B04 3628 000C                  		move.w	obY(a0),d3										; Current object Ypos to d3
00021B08 9669 000C                  		sub.w	obY(a1),d3										; Subtract Sonic Ypos from object Ypos
00021B0C 6A00                       		bpl.s	@2
00021B0E 4443                       		neg.w	d3												; Negative d3
00021B10 5441                       		addq.w	#2,d1
00021B12 4E75                       @2		rts
00021B14                            ; ---------------------------------------------------------------------------
00021B14                            
00021B14                            Change_FlipX:
00021B14 08A8 0000 0001             		bclr	#0,obRender(a0)										; Change the orientation
00021B1A 4A40                       		tst.w	d0												; Check object the orientation
00021B1C 6700                       		beq.s	@1
00021B1E 08E8 0000 0001             		bset	#0,obRender(a0)										; Change the orientation
00021B24 4E75                       @1		rts
00021B26                            ; ---------------------------------------------------------------------------
00021B26                            
00021B26                            Change_FlipXWithVelocity:
00021B26 08A8 0000 0001             		bclr	#0,obRender(a0)										; Change the orientation
00021B2C 4A68 0010                  		tst.w obVelX(a0)											; Check object the orientation of movement
00021B30 6B00                       		bmi.s	@1
00021B32 08E8 0000 0001             		bset	#0,obRender(a0)										; Change the orientation
00021B38 4E75                       @1		rts
00021B3A                            ; ---------------------------------------------------------------------------
00021B3A                            
00021B3A                            BossStarLight_MoveSprite:
00021B3A 6100                       		bsr.s	BossStarLight_MoveSprite2
00021B3C 0668 0038 0012             		addi.w	#$38,obVelY(a0)									; Increase vertical speed (apply gravity)
00021B42 4E75                       		rts
00021B44                            ; ---------------------------------------------------------------------------
00021B44                            
00021B44                            BossStarLight_MoveSprite2:
00021B44 3028 0010                  		move.w	obVelX(a0),d0									; Load horizontal speed
00021B48 48C0                       		ext.l	d0													; Extend a sign
00021B4A E180                       		asl.l	#8,d0												; Shift velocity to line up with the middle 16 bits of the 32-bit position
00021B4C D1A8 0008                  		add.l	d0,obX(a0)										; Add to x-axis position
00021B50 3028 0012                  		move.w	obVelY(a0),d0									; Load vertical speed
00021B54 48C0                       		ext.l	d0													; Extend a sign
00021B56 E180                       		asl.l	#8,d0												; Shift velocity to line up with the middle 16 bits of the 32-bit position
00021B58 D1A8 000C                  		add.l	d0,obY(a0)										; Add to y-axis position
00021B5C 4E75                       		rts
00021B5E                            ; ---------------------------------------------------------------------------
00021B5E                            
00021B5E                            BossStarLight_SwingUpAndDown:
00021B5E 7000                       		moveq	#0,d0											; Clear d0
00021B60 1028 0026                  		move.b	obAngle(a0),d0									; Copy object Angle into d0
00021B64 5400                       		addq.b	#2,d0
00021B66 1140 0026                  		move.b	d0,obAngle(a0)									; Set current object Angle
00021B6A 6100                       		bsr.s	BossStarLight_CalcSine							; Calculates the sine and cosine
00021B6C E440                       		asr.w	#2,d0											; Arithmetic shift
00021B6E 3140 0012                  		move.w	d0,obVelY(a0)									; Set object Y speed
00021B72 4E75                       		rts
00021B74                            
00021B74                            ; =============== S U B R O U T I N E =======================================
00021B74                            
00021B74                            BossStarLight_DisplaySprite:
00021B74 4EF9 0001 045A             		jmp	(DisplaySprite).l
00021B7A                            ; ---------------------------------------------------------------------------
00021B7A                            
00021B7A                            BossStarLight_DeleteObject:
00021B7A 4EF9 0001 0496             		jmp	(DeleteObject).l
00021B80                            ; ---------------------------------------------------------------------------
00021B80                            
00021B80                            BossStarLight_SingleObjLoad2:
00021B80 4EF9 0001 08F6             		jmp	(SingleObjLoad2).l
00021B86                            ; ---------------------------------------------------------------------------
00021B86                            
00021B86                            BossStarLight_RandomNumber:
00021B86 4EF9 0000 2CA2             		jmp	(RandomNumber).l
00021B8C                            ; ---------------------------------------------------------------------------
00021B8C                            
00021B8C                            BossStarLight_CalcSine:
00021B8C 4EF9 0000 2CC8             		jmp	(CalcSine).l
00021B92                            ; ---------------------------------------------------------------------------
00021B92                            
00021B92                            BossStarLight_ObjHitFloor:
00021B92 4EF9 0001 84A8             		jmp	(ObjHitFloor).l
00021B98                            ; ---------------------------------------------------------------------------
00021B98                            
00021B98                            BossStarLight_PlaySound_Special:
00021B98 4EF9 0000 12D0             		jmp	(PlaySound_Special).l
00021B9E                            ; ---------------------------------------------------------------------------
00021B9E                            
00021B9E                            BossStarLight_BossDefeated:
00021B9E 4EF9 0001 B134             		jmp	(BossDefeated).l
00021BA4                            ; ---------------------------------------------------------------------------
00021BA4                            
00021BA4                            BossStarLight_AddPoints:
00021BA4 4EF9 0000 0000             		jmp	(AddPoints).l
00021BAA                            ; ---------------------------------------------------------------------------
00021BAA                            
00021BAA                            BossStarLight_GotThroughAct:
00021BAA 4EF9 0001 1D18             		jmp	(GotThroughAct).l
00021BB0                            
00021BB0                            ; =============== S U B R O U T I N E =======================================
00021BB0                            
00021BB0                            ObjDat3_BossStarLight_BallHog:
00021BB0 0000 0000                  		dc.l Map_BallhogBoss										; Mapping
00021BB4 2410                       		dc.w (obVRAM_BossStarLight)								; VRAM
00021BB6 04                         		dc.b 4													; Priority
00021BB7 13                         		dc.b 19													; Width (38/2)
00021BB8 08                         		dc.b 8													; Height (16/2)
00021BB9 0C                         		dc.b 12													; Action width (24/2)
00021BBA 00                         		dc.b 0													; Frame
00021BBB 05                         		dc.b 5													; Collision
00021BBC                            ObjDat3_BossStarLight_AttackBall:
00021BBC 03                         		dc.b 3													; Priority
00021BBD 07                         		dc.b 7													; Width (14/2)
00021BBE 05                         		dc.b 5													; Height (10/2)
00021BBF 08                         		dc.b 8													; Action width (16/2)
00021BC0 02                         		dc.b 2													; Frame
00021BC1 87                         		dc.b $87													; Collision
00021BC2                            ObData_HudLives_10:
00021BC2 00                         		dc.b 0													; Frame
00021BC3 01                         		dc.b 2-1													; Time repeats
00021BC4 0000 0000                  		dc.l Hud_10												; Load size numbers '00'
00021BC8                            ObData_HudLives_100:
00021BC8 01                         		dc.b 1													; Frame
00021BC9 02                         		dc.b 3-1													; Time repeats
00021BCA 0000 0000                  		dc.l Hud_100												; Load size numbers '000'
00021BCE                            ChildObjDat_RobotnikHud:
00021BCE 0000                       		dc.w 1-1
00021BD0 7A                         		dc.b (obSlot_BossStarLight)
00021BD1 0400 00                    		dc.b (BossStarLight_EggmanLives_Index-BossStarLight_Index),0,0
00021BD4                            ChildObjDat_AttackBall:
00021BD4 0000                       		dc.w 1-1
00021BD6 7A                         		dc.b (obSlot_BossStarLight)
00021BD7 0200 00                    		dc.b (BossStarLight_AttackBall_Index-BossStarLight_Index),0,0
00021BDA                            ChildObjDat_AttackJumpBall:
00021BDA 0000                       		dc.w 1-1
00021BDC 7A                         		dc.b (obSlot_BossStarLight)
00021BDD 0222 00                    		dc.b (BossStarLight_AttackBall_Index-BossStarLight_Index),(BossStarLight_AttackBall5_ShipIndex-BossStarLight_AttackBall_ShipIndex),0
00021BE0                            ChildObjDat_RandomAttackBall:
00021BE0 000F                       		dc.w 16-1
00021BE2 020E                       		dc.b (BossStarLight_AttackBall_Index-BossStarLight_Index),(BossStarLight_AttackBall3_ShipIndex-BossStarLight_AttackBall_ShipIndex)
00021BE4 7A00                       		dc.b (obSlot_BossStarLight),0
00021BE6                            ChildObjDat_AttackFourBall:
00021BE6 0003                       		dc.w 4-1
00021BE8 021A                       		dc.b (BossStarLight_AttackBall_Index-BossStarLight_Index),(BossStarLight_AttackBall4_ShipIndex-BossStarLight_AttackBall_ShipIndex)
00021BEA 7A00                       		dc.b (obSlot_BossStarLight),0
00021BEC                            
00021BEC                            ; =============== S U B R O U T I N E =======================================
00021BEC                            
00021BEC                            Map_BallhogBoss:			incbin "#Bosses/SLZ/Object Data/Map - Ballhog Boss.bin"
00021C16                            	even
00021C16                            Map_RobotnikHud:		incbin "#Bosses/SLZ/Object Data/Map - Robotnik Hud.bin"
00021C30                            	even
00021C30                            ArtNem_BallhogBoss:		incbin "#Bosses/SLZ/Nemesis Art/Ballhog Boss.bin"
00021F28                            	even
00021F28                            ArtNem_RobotnikHud:	incbin "#Bosses/SLZ/Nemesis Art/Robotnik Hud.bin"
00021F94                            	even
00021F94                            Pal_BallhogBoss:			incbin "#Bosses/SLZ/Palettes/1.bin"
00021FB4                            	even
00021FB4                            	even
00021FB4                            
00021FB4                            ; ---------------------------------------------------------------------------
00021FB4                            ; Subroutine to	show the special stage layout
00021FB4                            ; ---------------------------------------------------------------------------
00021FB4                            
00021FB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00021FB4                            
00021FB4                            
00021FB4                            SS_ShowLayout:				; XREF: SpecialStage
00021FB4 6100 0000                  		bsr.w	SS_AniWallsRings
00021FB8 6100 0000                  		bsr.w	SS_AniItems
00021FBC 3F05                       		move.w	d5,-(sp)
00021FBE 43F8 8000                  		lea	($FFFF8000).w,a1
00021FC2 1038 F780                  		move.b	($FFFFF780).w,d0
00021FC6 0200 00FC                  		andi.b	#$FC,d0
00021FCA 4EB9 0000 2CC8             		jsr	(CalcSine).l
00021FD0 3800                       		move.w	d0,d4
00021FD2 3A01                       		move.w	d1,d5
00021FD4 C9FC 0018                  		muls.w	#$18,d4
00021FD8 CBFC 0018                  		muls.w	#$18,d5
00021FDC 7400                       		moveq	#0,d2
00021FDE 3438 F700                  		move.w	($FFFFF700).w,d2
00021FE2 84FC 0018                  		divu.w	#$18,d2
00021FE6 4842                       		swap	d2
00021FE8 4442                       		neg.w	d2
00021FEA 0642 FF4C                  		addi.w	#-$B4,d2
00021FEE 7600                       		moveq	#0,d3
00021FF0 3638 F704                  		move.w	($FFFFF704).w,d3
00021FF4 86FC 0018                  		divu.w	#$18,d3
00021FF8 4843                       		swap	d3
00021FFA 4443                       		neg.w	d3
00021FFC 0643 FF4C                  		addi.w	#-$B4,d3
00022000 3E3C 000F                  		move.w	#$F,d7
00022004                            
00022004                            loc_1B19E:
00022004 48A7 E000                  		movem.w	d0-d2,-(sp)
00022008 48A7 C000                  		movem.w	d0-d1,-(sp)
0002200C 4440                       		neg.w	d0
0002200E C3C2                       		muls.w	d2,d1
00022010 C1C3                       		muls.w	d3,d0
00022012 2C00                       		move.l	d0,d6
00022014 DC81                       		add.l	d1,d6
00022016 4C9F 0003                  		movem.w	(sp)+,d0-d1
0002201A C1C2                       		muls.w	d2,d0
0002201C C3C3                       		muls.w	d3,d1
0002201E D280                       		add.l	d0,d1
00022020 2406                       		move.l	d6,d2
00022022 3C3C 000F                  		move.w	#$F,d6
00022026                            
00022026                            loc_1B1C0:
00022026 2002                       		move.l	d2,d0
00022028 E080                       		asr.l	#8,d0
0002202A 32C0                       		move.w	d0,(a1)+
0002202C 2001                       		move.l	d1,d0
0002202E E080                       		asr.l	#8,d0
00022030 32C0                       		move.w	d0,(a1)+
00022032 D485                       		add.l	d5,d2
00022034 D284                       		add.l	d4,d1
00022036 51CE FFEE                  		dbf	d6,loc_1B1C0
0002203A                            
0002203A 4C9F 0007                  		movem.w	(sp)+,d0-d2
0002203E 0643 0018                  		addi.w	#$18,d3
00022042 51CF FFC0                  		dbf	d7,loc_1B19E
00022046                            
00022046 3A1F                       		move.w	(sp)+,d5
00022048 41F9 00FF 0000             		lea	($FF0000).l,a0
0002204E 7000                       		moveq	#0,d0
00022050 3038 F704                  		move.w	($FFFFF704).w,d0
00022054 80FC 0018                  		divu.w	#$18,d0
00022058 C0FC 0080                  		mulu.w	#$80,d0
0002205C D1C0                       		adda.l	d0,a0
0002205E 7000                       		moveq	#0,d0
00022060 3038 F700                  		move.w	($FFFFF700).w,d0
00022064 80FC 0018                  		divu.w	#$18,d0
00022068 D0C0                       		adda.w	d0,a0
0002206A 49F8 8000                  		lea	($FFFF8000).w,a4
0002206E 3E3C 000F                  		move.w	#$F,d7
00022072                            
00022072                            loc_1B20C:
00022072 3C3C 000F                  		move.w	#$F,d6
00022076                            
00022076                            loc_1B210:
00022076 7000                       		moveq	#0,d0
00022078 1018                       		move.b	(a0)+,d0
0002207A 6700                       		beq.s	loc_1B268
0002207C 0C00 004E                  		cmpi.b	#$4E,d0
00022080 6200                       		bhi.s	loc_1B268
00022082 3614                       		move.w	(a4),d3
00022084 0643 0120                  		addi.w	#$120,d3
00022088 0C43 0070                  		cmpi.w	#$70,d3
0002208C 6500                       		bcs.s	loc_1B268
0002208E 0C43 01D0                  		cmpi.w	#$1D0,d3
00022092 6400                       		bcc.s	loc_1B268
00022094 342C 0002                  		move.w	2(a4),d2
00022098 0642 00F0                  		addi.w	#$F0,d2
0002209C 0C42 0070                  		cmpi.w	#$70,d2
000220A0 6500                       		bcs.s	loc_1B268
000220A2 0C42 0170                  		cmpi.w	#$170,d2
000220A6 6400                       		bcc.s	loc_1B268
000220A8 4BF9 00FF 4000             		lea	($FF4000).l,a5
000220AE E748                       		lsl.w	#3,d0
000220B0 4BF5 0000                  		lea	(a5,d0.w),a5
000220B4 225D                       		movea.l	(a5)+,a1
000220B6 321D                       		move.w	(a5)+,d1
000220B8 D241                       		add.w	d1,d1
000220BA D2F1 1000                  		adda.w	(a1,d1.w),a1
000220BE 365D                       		movea.w	(a5)+,a3
000220C0 7200                       		moveq	#0,d1
000220C2 1219                       		move.b	(a1)+,d1
000220C4 5301                       		subq.b	#1,d1
000220C6 6B00                       		bmi.s	loc_1B268
000220C8 4EB9 0001 05B8             		jsr	sub_D762
000220CE                            
000220CE                            loc_1B268:
000220CE 584C                       		addq.w	#4,a4
000220D0 51CE FFA4                  		dbf	d6,loc_1B210
000220D4                            
000220D4 41E8 0070                  		lea	$70(a0),a0
000220D8 51CF FF98                  		dbf	d7,loc_1B20C
000220DC                            
000220DC 11C5 F62C                  		move.b	d5,($FFFFF62C).w
000220E0 0C05 0050                  		cmpi.b	#$50,d5
000220E4 6700                       		beq.s	loc_1B288
000220E6 24BC 0000 0000             		move.l	#0,(a2)
000220EC 4E75                       		rts	
000220EE                            ; ===========================================================================
000220EE                            
000220EE                            loc_1B288:
000220EE 157C 0000 FFFB             		move.b	#0,-5(a2)
000220F4 4E75                       		rts	
000220F6                            ; End of function SS_ShowLayout
000220F6                            
000220F6                            ; ---------------------------------------------------------------------------
000220F6                            ; Subroutine to	animate	walls and rings	in the special stage
000220F6                            ; ---------------------------------------------------------------------------
000220F6                            
000220F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000220F6                            
000220F6                            
000220F6                            SS_AniWallsRings:			; XREF: SS_ShowLayout
000220F6 43F9 00FF 400C             		lea	($FF400C).l,a1
000220FC 7000                       		moveq	#0,d0
000220FE 1038 F780                  		move.b	($FFFFF780).w,d0
00022102 E408                       		lsr.b	#2,d0
00022104 0240 000F                  		andi.w	#$F,d0
00022108 7223                       		moveq	#$23,d1
0002210A                            
0002210A                            loc_1B2A4:
0002210A 3280                       		move.w	d0,(a1)
0002210C 5049                       		addq.w	#8,a1
0002210E 51C9 FFFA                  		dbf	d1,loc_1B2A4
00022112                            
00022112 43F9 00FF 4005             		lea	($FF4005).l,a1
00022118 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0002211C 6A00                       		bpl.s	loc_1B2C8
0002211E 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00022124 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00022128 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0002212E                            
0002212E                            loc_1B2C8:
0002212E 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
00022134 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00022138 6A00                       		bpl.s	loc_1B2E4
0002213A 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00022140 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00022144 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0002214A                            
0002214A                            loc_1B2E4:
0002214A 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0002214E 1340 0138                  		move.b	d0,$138(a1)
00022152 1340 0160                  		move.b	d0,$160(a1)
00022156 1340 0148                  		move.b	d0,$148(a1)
0002215A 1340 0150                  		move.b	d0,$150(a1)
0002215E 1340 01D8                  		move.b	d0,$1D8(a1)
00022162 1340 01E0                  		move.b	d0,$1E0(a1)
00022166 1340 01E8                  		move.b	d0,$1E8(a1)
0002216A 1340 01F0                  		move.b	d0,$1F0(a1)
0002216E 1340 01F8                  		move.b	d0,$1F8(a1)
00022172 1340 0200                  		move.b	d0,$200(a1)
00022176 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0002217A 6A00                       		bpl.s	loc_1B326
0002217C 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
00022182 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
00022186 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0002218C                            
0002218C                            loc_1B326:
0002218C 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
00022190 1340 0168                  		move.b	d0,$168(a1)
00022194 1340 0170                  		move.b	d0,$170(a1)
00022198 1340 0178                  		move.b	d0,$178(a1)
0002219C 1340 0180                  		move.b	d0,$180(a1)
000221A0 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
000221A4 6A00                       		bpl.s	loc_1B350
000221A6 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
000221AC 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
000221B0 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
000221B6                            
000221B6                            loc_1B350:
000221B6 43F9 00FF 4016             		lea	($FF4016).l,a1
000221BC 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
000221C2 7000                       		moveq	#0,d0
000221C4 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
000221C8 D040                       		add.w	d0,d0
000221CA 41F0 0000                  		lea	(a0,d0.w),a0
000221CE 3290                       		move.w	(a0),(a1)
000221D0 3368 0002 0008             		move.w	2(a0),8(a1)
000221D6 3368 0004 0010             		move.w	4(a0),$10(a1)
000221DC 3368 0006 0018             		move.w	6(a0),$18(a1)
000221E2 3368 0008 0020             		move.w	8(a0),$20(a1)
000221E8 3368 000A 0028             		move.w	$A(a0),$28(a1)
000221EE 3368 000C 0030             		move.w	$C(a0),$30(a1)
000221F4 3368 000E 0038             		move.w	$E(a0),$38(a1)
000221FA D0FC 0020                  		adda.w	#$20,a0
000221FE D2FC 0048                  		adda.w	#$48,a1
00022202 3290                       		move.w	(a0),(a1)
00022204 3368 0002 0008             		move.w	2(a0),8(a1)
0002220A 3368 0004 0010             		move.w	4(a0),$10(a1)
00022210 3368 0006 0018             		move.w	6(a0),$18(a1)
00022216 3368 0008 0020             		move.w	8(a0),$20(a1)
0002221C 3368 000A 0028             		move.w	$A(a0),$28(a1)
00022222 3368 000C 0030             		move.w	$C(a0),$30(a1)
00022228 3368 000E 0038             		move.w	$E(a0),$38(a1)
0002222E D0FC 0020                  		adda.w	#$20,a0
00022232 D2FC 0048                  		adda.w	#$48,a1
00022236 3290                       		move.w	(a0),(a1)
00022238 3368 0002 0008             		move.w	2(a0),8(a1)
0002223E 3368 0004 0010             		move.w	4(a0),$10(a1)
00022244 3368 0006 0018             		move.w	6(a0),$18(a1)
0002224A 3368 0008 0020             		move.w	8(a0),$20(a1)
00022250 3368 000A 0028             		move.w	$A(a0),$28(a1)
00022256 3368 000C 0030             		move.w	$C(a0),$30(a1)
0002225C 3368 000E 0038             		move.w	$E(a0),$38(a1)
00022262 D0FC 0020                  		adda.w	#$20,a0
00022266 D2FC 0048                  		adda.w	#$48,a1
0002226A 3290                       		move.w	(a0),(a1)
0002226C 3368 0002 0008             		move.w	2(a0),8(a1)
00022272 3368 0004 0010             		move.w	4(a0),$10(a1)
00022278 3368 0006 0018             		move.w	6(a0),$18(a1)
0002227E 3368 0008 0020             		move.w	8(a0),$20(a1)
00022284 3368 000A 0028             		move.w	$A(a0),$28(a1)
0002228A 3368 000C 0030             		move.w	$C(a0),$30(a1)
00022290 3368 000E 0038             		move.w	$E(a0),$38(a1)
00022296 D0FC 0020                  		adda.w	#$20,a0
0002229A D2FC 0048                  		adda.w	#$48,a1
0002229E 4E75                       		rts	
000222A0                            ; End of function SS_AniWallsRings
000222A0                            
000222A0                            ; ===========================================================================
000222A0 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
000222B0 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
000222C0 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
000222D0 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
000222E0 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
000222F0 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
00022300 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
00022310 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
00022320                            ; ---------------------------------------------------------------------------
00022320                            ; Subroutine to	remove items when you collect them in the special stage
00022320                            ; ---------------------------------------------------------------------------
00022320                            
00022320                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00022320                            
00022320                            
00022320                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
00022320 45F9 00FF 4400             		lea	($FF4400).l,a2
00022326 303C 001F                  		move.w	#$1F,d0
0002232A                            
0002232A                            loc_1B4C4:
0002232A 4A12                       		tst.b	(a2)
0002232C 6700                       		beq.s	locret_1B4CE
0002232E 504A                       		addq.w	#8,a2
00022330 51C8 FFF8                  		dbf	d0,loc_1B4C4
00022334                            
00022334                            locret_1B4CE:
00022334 4E75                       		rts	
00022336                            ; End of function SS_RemoveCollectedItem
00022336                            
00022336                            ; ---------------------------------------------------------------------------
00022336                            ; Subroutine to	animate	special	stage items when you touch them
00022336                            ; ---------------------------------------------------------------------------
00022336                            
00022336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00022336                            
00022336                            
00022336                            SS_AniItems:				; XREF: SS_ShowLayout
00022336 41F9 00FF 4400             		lea	($FF4400).l,a0
0002233C 3E3C 001F                  		move.w	#$1F,d7
00022340                            
00022340                            loc_1B4DA:
00022340 7000                       		moveq	#0,d0
00022342 1010                       		move.b	(a0),d0
00022344 6700                       		beq.s	loc_1B4E8
00022346 E548                       		lsl.w	#2,d0
00022348 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0002234C 4E91                       		jsr	(a1)
0002234E                            
0002234E                            loc_1B4E8:
0002234E 5048                       		addq.w	#8,a0
00022350                            
00022350                            loc_1B4EA:
00022350 51CF FFEE                  		dbf	d7,loc_1B4DA
00022354                            
00022354 4E75                       		rts	
00022356                            ; End of function SS_AniItems
00022356                            
00022356                            ; ===========================================================================
00022356 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0002235A 0000 0000                  		dc.l SS_AniBumper
0002235E 0000 0000                  		dc.l SS_Ani1Up
00022362 0000 0000                  		dc.l SS_AniReverse
00022366 0000 0000                  		dc.l SS_AniEmeraldSparks
0002236A 0000 0000                  		dc.l SS_AniGlassBlock
0002236E                            ; ===========================================================================
0002236E                            
0002236E                            SS_AniRingSparks:			; XREF: SS_AniIndex
0002236E 5328 0002                  		subq.b	#1,2(a0)
00022372 6A00                       		bpl.s	locret_1B530
00022374 117C 0005 0002             		move.b	#5,2(a0)
0002237A 7000                       		moveq	#0,d0
0002237C 1028 0003                  		move.b	3(a0),d0
00022380 5228 0003                  		addq.b	#1,3(a0)
00022384 2268 0004                  		movea.l	4(a0),a1
00022388 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0002238C 1280                       		move.b	d0,(a1)
0002238E 6600                       		bne.s	locret_1B530
00022390 4290                       		clr.l	(a0)
00022392 42A8 0004                  		clr.l	4(a0)
00022396                            
00022396                            locret_1B530:
00022396 4E75                       		rts	
00022398                            ; ===========================================================================
00022398 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0002239E                            ; ===========================================================================
0002239E                            
0002239E                            SS_AniBumper:				; XREF: SS_AniIndex
0002239E 5328 0002                  		subq.b	#1,2(a0)
000223A2 6A00                       		bpl.s	locret_1B566
000223A4 117C 0007 0002             		move.b	#7,2(a0)
000223AA 7000                       		moveq	#0,d0
000223AC 1028 0003                  		move.b	3(a0),d0
000223B0 5228 0003                  		addq.b	#1,3(a0)
000223B4 2268 0004                  		movea.l	4(a0),a1
000223B8 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
000223BC 6600                       		bne.s	loc_1B564
000223BE 4290                       		clr.l	(a0)
000223C0 42A8 0004                  		clr.l	4(a0)
000223C4 12BC 0025                  		move.b	#$25,(a1)
000223C8 4E75                       		rts	
000223CA                            ; ===========================================================================
000223CA                            
000223CA                            loc_1B564:
000223CA 1280                       		move.b	d0,(a1)
000223CC                            
000223CC                            locret_1B566:
000223CC 4E75                       		rts	
000223CE                            ; ===========================================================================
000223CE 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
000223D4                            ; ===========================================================================
000223D4                            
000223D4                            SS_Ani1Up:				; XREF: SS_AniIndex
000223D4 5328 0002                  		subq.b	#1,2(a0)
000223D8 6A00                       		bpl.s	locret_1B596
000223DA 117C 0005 0002             		move.b	#5,2(a0)
000223E0 7000                       		moveq	#0,d0
000223E2 1028 0003                  		move.b	3(a0),d0
000223E6 5228 0003                  		addq.b	#1,3(a0)
000223EA 2268 0004                  		movea.l	4(a0),a1
000223EE 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
000223F2 1280                       		move.b	d0,(a1)
000223F4 6600                       		bne.s	locret_1B596
000223F6 4290                       		clr.l	(a0)
000223F8 42A8 0004                  		clr.l	4(a0)
000223FC                            
000223FC                            locret_1B596:
000223FC 4E75                       		rts	
000223FE                            ; ===========================================================================
000223FE 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
00022404                            ; ===========================================================================
00022404                            
00022404                            SS_AniReverse:				; XREF: SS_AniIndex
00022404 5328 0002                  		subq.b	#1,2(a0)
00022408 6A00                       		bpl.s	locret_1B5CC
0002240A 117C 0007 0002             		move.b	#7,2(a0)
00022410 7000                       		moveq	#0,d0
00022412 1028 0003                  		move.b	3(a0),d0
00022416 5228 0003                  		addq.b	#1,3(a0)
0002241A 2268 0004                  		movea.l	4(a0),a1
0002241E 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
00022422 6600                       		bne.s	loc_1B5CA
00022424 4290                       		clr.l	(a0)
00022426 42A8 0004                  		clr.l	4(a0)
0002242A 12BC 002B                  		move.b	#$2B,(a1)
0002242E 4E75                       		rts	
00022430                            ; ===========================================================================
00022430                            
00022430                            loc_1B5CA:
00022430 1280                       		move.b	d0,(a1)
00022432                            
00022432                            locret_1B5CC:
00022432 4E75                       		rts	
00022434                            ; ===========================================================================
00022434 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0002243A                            ; ===========================================================================
0002243A                            
0002243A                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0002243A 5328 0002                  		subq.b	#1,2(a0)
0002243E 6A00                       		bpl.s	locret_1B60C
00022440 117C 0005 0002             		move.b	#5,2(a0)
00022446 7000                       		moveq	#0,d0
00022448 1028 0003                  		move.b	3(a0),d0
0002244C 5228 0003                  		addq.b	#1,3(a0)
00022450 2268 0004                  		movea.l	4(a0),a1
00022454 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
00022458 1280                       		move.b	d0,(a1)
0002245A 6600                       		bne.s	locret_1B60C
0002245C 4290                       		clr.l	(a0)
0002245E 42A8 0004                  		clr.l	4(a0)
00022462 11FC 0004 D024             		move.b	#4,($FFFFD024).w
00022468 303C 00A8                  		move.w	#$A8,d0
0002246C 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
00022472                            
00022472                            locret_1B60C:
00022472 4E75                       		rts	
00022474                            ; ===========================================================================
00022474 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0002247A                            ; ===========================================================================
0002247A                            
0002247A                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0002247A 5328 0002                  		subq.b	#1,2(a0)
0002247E 6A00                       		bpl.s	locret_1B640
00022480 117C 0001 0002             		move.b	#1,2(a0)
00022486 7000                       		moveq	#0,d0
00022488 1028 0003                  		move.b	3(a0),d0
0002248C 5228 0003                  		addq.b	#1,3(a0)
00022490 2268 0004                  		movea.l	4(a0),a1
00022494 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
00022498 1280                       		move.b	d0,(a1)
0002249A 6600                       		bne.s	locret_1B640
0002249C 12A8 0004                  		move.b	4(a0),(a1)
000224A0 4290                       		clr.l	(a0)
000224A2 42A8 0004                  		clr.l	4(a0)
000224A6                            
000224A6                            locret_1B640:
000224A6 4E75                       		rts	
000224A8                            ; ===========================================================================
000224A8 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
000224B2                            ; ---------------------------------------------------------------------------
000224B2                            ; Special stage	layout pointers
000224B2                            ; ---------------------------------------------------------------------------
000224B2                            SS_LayoutIndex:
000224B2                            	include "_inc\Special stage layout pointers.asm"
000224B2                            ; ---------------------------------------------------------------------------
000224B2                            ; Special stage	layout pointers
000224B2                            ; ---------------------------------------------------------------------------
000224B2 0000 0000                  	dc.l SS_1
000224B6 0000 0000                  	dc.l SS_2
000224BA 0000 0000                  	dc.l SS_3
000224BE 0000 0000                  	dc.l SS_4
000224C2 0000 0000                  	dc.l SS_5
000224C6 0000 0000                  	dc.l SS_6
000224CA                            	even
000224CA                            	even
000224CA                            
000224CA                            ; ---------------------------------------------------------------------------
000224CA                            ; Special stage	start locations
000224CA                            ; ---------------------------------------------------------------------------
000224CA                            SS_StartLoc:	incbin	misc\sloc_ss.bin
000224E2                            		even
000224E2                            
000224E2                            ; ---------------------------------------------------------------------------
000224E2                            ; Subroutine to	load special stage layout
000224E2                            ; ---------------------------------------------------------------------------
000224E2                            
000224E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000224E2                            
000224E2                            
000224E2                            SS_Load:				; XREF: SpecialStage
000224E2 7000                       		moveq	#0,d0
000224E4 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
000224E8 5238 FE16                  		addq.b	#1,($FFFFFE16).w
000224EC 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
000224F2 6500                       		bcs.s	SS_ChkEmldNum
000224F4 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
000224FA                            
000224FA                            SS_ChkEmldNum:
000224FA 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
00022500 6700                       		beq.s	SS_LoadData	; if yes, branch
00022502 7200                       		moveq	#0,d1
00022504 1238 FE57                  		move.b	($FFFFFE57).w,d1
00022508 5301                       		subq.b	#1,d1
0002250A 6500                       		bcs.s	SS_LoadData
0002250C 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
00022510                            
00022510                            SS_ChkEmldLoop:	
00022510 B033 1000                  		cmp.b	(a3,d1.w),d0
00022514 6600                       		bne.s	SS_ChkEmldRepeat
00022516 60CA                       		bra.s	SS_Load
00022518                            ; ===========================================================================
00022518                            
00022518                            SS_ChkEmldRepeat:
00022518 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0002251C                            
0002251C                            SS_LoadData:
0002251C E548                       		lsl.w	#2,d0
0002251E 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
00022522 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
00022526 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0002252A 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0002252E 43F9 00FF 4000             		lea	($FF4000).l,a1
00022534 303C 0000                  		move.w	#0,d0
00022538 4EB9 0000 16DC             		jsr	(EniDec).l
0002253E 43F9 00FF 0000             		lea	($FF0000).l,a1
00022544 303C 0FFF                  		move.w	#$FFF,d0
00022548                            
00022548                            SS_ClrRAM3:
00022548 4299                       		clr.l	(a1)+
0002254A 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0002254E                            
0002254E 43F9 00FF 1020             		lea	($FF1020).l,a1
00022554 41F9 00FF 4000             		lea	($FF4000).l,a0
0002255A 723F                       		moveq	#$3F,d1
0002255C                            
0002255C                            loc_1B6F6:
0002255C 743F                       		moveq	#$3F,d2
0002255E                            
0002255E                            loc_1B6F8:
0002255E 12D8                       		move.b	(a0)+,(a1)+
00022560 51CA FFFC                  		dbf	d2,loc_1B6F8
00022564                            
00022564 43E9 0040                  		lea	$40(a1),a1
00022568 51C9 FFF2                  		dbf	d1,loc_1B6F6
0002256C                            
0002256C 43F9 00FF 4008             		lea	($FF4008).l,a1
00022572 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
00022578 724D                       		moveq	#$4D,d1
0002257A                            
0002257A                            loc_1B714:
0002257A 22D8                       		move.l	(a0)+,(a1)+
0002257C 32FC 0000                  		move.w	#0,(a1)+
00022580 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
00022586 32D8                       		move.w	(a0)+,(a1)+
00022588 51C9 FFF0                  		dbf	d1,loc_1B714
0002258C                            
0002258C 43F9 00FF 4400             		lea	($FF4400).l,a1
00022592 323C 003F                  		move.w	#$3F,d1
00022596                            
00022596                            loc_1B730:
00022596                            
00022596 4299                       		clr.l	(a1)+
00022598 51C9 FFFC                  		dbf	d1,loc_1B730
0002259C                            
0002259C 4E75                       		rts	
0002259E                            ; End of function SS_Load
0002259E                            
0002259E                            ; ===========================================================================
0002259E                            ; ---------------------------------------------------------------------------
0002259E                            ; Special stage	mappings and VRAM pointers
0002259E                            ; ---------------------------------------------------------------------------
0002259E                            SS_MapIndex:
0002259E                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0002259E                            ; ---------------------------------------------------------------------------
0002259E                            ; Special stage	mappings and VRAM pointers
0002259E                            ; ---------------------------------------------------------------------------
0002259E 0000 0000                  	dc.l Map_SSWalls	; address of mappings
000225A2 0142                       	dc.w $142		; VRAM setting
000225A4 0000 0000                  	dc.l Map_SSWalls
000225A8 0142                       	dc.w $142
000225AA 0000 0000                  	dc.l Map_SSWalls
000225AE 0142                       	dc.w $142
000225B0 0000 0000                  	dc.l Map_SSWalls
000225B4 0142                       	dc.w $142
000225B6 0000 0000                  	dc.l Map_SSWalls
000225BA 0142                       	dc.w $142
000225BC 0000 0000                  	dc.l Map_SSWalls
000225C0 0142                       	dc.w $142
000225C2 0000 0000                  	dc.l Map_SSWalls
000225C6 0142                       	dc.w $142
000225C8 0000 0000                  	dc.l Map_SSWalls
000225CC 0142                       	dc.w $142
000225CE 0000 0000                  	dc.l Map_SSWalls
000225D2 0142                       	dc.w $142
000225D4 0000 0000                  	dc.l Map_SSWalls
000225D8 2142                       	dc.w $2142
000225DA 0000 0000                  	dc.l Map_SSWalls
000225DE 2142                       	dc.w $2142
000225E0 0000 0000                  	dc.l Map_SSWalls
000225E4 2142                       	dc.w $2142
000225E6 0000 0000                  	dc.l Map_SSWalls
000225EA 2142                       	dc.w $2142
000225EC 0000 0000                  	dc.l Map_SSWalls
000225F0 2142                       	dc.w $2142
000225F2 0000 0000                  	dc.l Map_SSWalls
000225F6 2142                       	dc.w $2142
000225F8 0000 0000                  	dc.l Map_SSWalls
000225FC 2142                       	dc.w $2142
000225FE 0000 0000                  	dc.l Map_SSWalls
00022602 2142                       	dc.w $2142
00022604 0000 0000                  	dc.l Map_SSWalls
00022608 2142                       	dc.w $2142
0002260A 0000 0000                  	dc.l Map_SSWalls
0002260E 4142                       	dc.w $4142
00022610 0000 0000                  	dc.l Map_SSWalls
00022614 4142                       	dc.w $4142
00022616 0000 0000                  	dc.l Map_SSWalls
0002261A 4142                       	dc.w $4142
0002261C 0000 0000                  	dc.l Map_SSWalls
00022620 4142                       	dc.w $4142
00022622 0000 0000                  	dc.l Map_SSWalls
00022626 4142                       	dc.w $4142
00022628 0000 0000                  	dc.l Map_SSWalls
0002262C 4142                       	dc.w $4142
0002262E 0000 0000                  	dc.l Map_SSWalls
00022632 4142                       	dc.w $4142
00022634 0000 0000                  	dc.l Map_SSWalls
00022638 4142                       	dc.w $4142
0002263A 0000 0000                  	dc.l Map_SSWalls
0002263E 4142                       	dc.w $4142
00022640 0000 0000                  	dc.l Map_SSWalls
00022644 6142                       	dc.w $6142
00022646 0000 0000                  	dc.l Map_SSWalls
0002264A 6142                       	dc.w $6142
0002264C 0000 0000                  	dc.l Map_SSWalls
00022650 6142                       	dc.w $6142
00022652 0000 0000                  	dc.l Map_SSWalls
00022656 6142                       	dc.w $6142
00022658 0000 0000                  	dc.l Map_SSWalls
0002265C 6142                       	dc.w $6142
0002265E 0000 0000                  	dc.l Map_SSWalls
00022662 6142                       	dc.w $6142
00022664 0000 0000                  	dc.l Map_SSWalls
00022668 6142                       	dc.w $6142
0002266A 0000 0000                  	dc.l Map_SSWalls
0002266E 6142                       	dc.w $6142
00022670 0000 0000                  	dc.l Map_SSWalls
00022674 6142                       	dc.w $6142
00022676 0001 1AEC                  	dc.l Map_obj47
0002267A 023B                       	dc.w $23B
0002267C 0000 0000                  	dc.l Map_SS_R
00022680 0570                       	dc.w $570
00022682 0000 0000                  	dc.l Map_SS_R
00022686 0251                       	dc.w $251
00022688 0000 0000                  	dc.l Map_SS_R
0002268C 0370                       	dc.w $370
0002268E 0000 0000                  	dc.l Map_SS_Up
00022692 0263                       	dc.w $263
00022694 0000 0000                  	dc.l Map_SS_Down
00022698 0263                       	dc.w $263
0002269A 0000 0000                  	dc.l Map_SS_R
0002269E 22F0                       	dc.w $22F0
000226A0 0000 0000                  	dc.l Map_SS_Glass
000226A4 0470                       	dc.w $470
000226A6 0000 0000                  	dc.l Map_SS_Glass
000226AA 05F0                       	dc.w $5F0
000226AC 0000 0000                  	dc.l Map_SS_Glass
000226B0 65F0                       	dc.w $65F0
000226B2 0000 0000                  	dc.l Map_SS_Glass
000226B6 25F0                       	dc.w $25F0
000226B8 0000 0000                  	dc.l Map_SS_Glass
000226BC 45F0                       	dc.w $45F0
000226BE 0000 0000                  	dc.l Map_SS_R
000226C2 02F0                       	dc.w $2F0
000226C4 0101 1AEC                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
000226C8 023B                       	dc.w $23B
000226CA 0201 1AEC                  	dc.l Map_obj47+$2000000
000226CE 023B                       	dc.w $23B
000226D0 0000 0000                  	dc.l Map_SS_R
000226D4 0797                       	dc.w $797
000226D6 0000 0000                  	dc.l Map_SS_R
000226DA 07A0                       	dc.w $7A0
000226DC 0000 0000                  	dc.l Map_SS_R
000226E0 07A9                       	dc.w $7A9
000226E2 0000 0000                  	dc.l Map_SS_R
000226E6 0797                       	dc.w $797
000226E8 0000 0000                  	dc.l Map_SS_R
000226EC 07A0                       	dc.w $7A0
000226EE 0000 0000                  	dc.l Map_SS_R
000226F2 07A9                       	dc.w $7A9
000226F4 0000 CBDC                  	dc.l Map_obj25
000226F8 27B2                       	dc.w $27B2
000226FA 0000 0000                  	dc.l Map_SS_Chaos3
000226FE 0770                       	dc.w $770
00022700 0000 0000                  	dc.l Map_SS_Chaos3
00022704 2770                       	dc.w $2770
00022706 0000 0000                  	dc.l Map_SS_Chaos3
0002270A 4770                       	dc.w $4770
0002270C 0000 0000                  	dc.l Map_SS_Chaos3
00022710 6770                       	dc.w $6770
00022712 0000 0000                  	dc.l Map_SS_Chaos1
00022716 0770                       	dc.w $770
00022718 0000 0000                  	dc.l Map_SS_Chaos2
0002271C 0770                       	dc.w $770
0002271E 0000 0000                  	dc.l Map_SS_R
00022722 04F0                       	dc.w $4F0
00022724 0400 CBDC                  	dc.l Map_obj25+$4000000
00022728 27B2                       	dc.w $27B2
0002272A 0500 CBDC                  	dc.l Map_obj25+$5000000
0002272E 27B2                       	dc.w $27B2
00022730 0600 CBDC                  	dc.l Map_obj25+$6000000
00022734 27B2                       	dc.w $27B2
00022736 0700 CBDC                  	dc.l Map_obj25+$7000000
0002273A 27B2                       	dc.w $27B2
0002273C 0000 0000                  	dc.l Map_SS_Glass
00022740 23F0                       	dc.w $23F0
00022742 0000 0000                  	dc.l Map_SS_Glass+$1000000
00022746 23F0                       	dc.w $23F0
00022748 0000 0000                  	dc.l Map_SS_Glass+$2000000
0002274C 23F0                       	dc.w $23F0
0002274E 0000 0000                  	dc.l Map_SS_Glass+$3000000
00022752 23F0                       	dc.w $23F0
00022754 0000 0000                  	dc.l Map_SS_R+$2000000
00022758 04F0                       	dc.w $4F0
0002275A 0000 0000                  	dc.l Map_SS_Glass
0002275E 05F0                       	dc.w $5F0
00022760 0000 0000                  	dc.l Map_SS_Glass
00022764 65F0                       	dc.w $65F0
00022766 0000 0000                  	dc.l Map_SS_Glass
0002276A 25F0                       	dc.w $25F0
0002276C 0000 0000                  	dc.l Map_SS_Glass
00022770 45F0                       	dc.w $45F0
00022770 45F0                       	dc.w $45F0
00022772                            
00022772                            ; ---------------------------------------------------------------------------
00022772                            ; Sprite mappings - special stage "R" block
00022772                            ; ---------------------------------------------------------------------------
00022772                            Map_SS_R:
00022772                            	include "_maps\SSRblock.asm"
00022772                            ; ---------------------------------------------------------------------------
00022772                            ; Sprite mappings - special stage "R" block
00022772                            ; ---------------------------------------------------------------------------
00022772 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
00022776 0000                       		dc.w byte_1B91E-Map_SS_R
00022778 01                         byte_1B912:	dc.b 1
00022779 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002277E 01                         byte_1B918:	dc.b 1
0002277F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00022784 00                         byte_1B91E:	dc.b 0
00022786 00                         		even
00022786 00                         		even
00022786                            
00022786                            ; ---------------------------------------------------------------------------
00022786                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
00022786                            ; ---------------------------------------------------------------------------
00022786                            Map_SS_Glass:
00022786                            	include "_maps\SSglassblock.asm"
00022786                            ; ---------------------------------------------------------------------------
00022786                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
00022786                            ; ---------------------------------------------------------------------------
00022786 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0002278A 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0002278E 01                         byte_1B928:	dc.b 1
0002278F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00022794 01                         byte_1B92E:	dc.b 1
00022795 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0002279A 01                         byte_1B934:	dc.b 1
0002279B F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
000227A0 01                         byte_1B93A:	dc.b 1
000227A1 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
000227A6                            		even
000227A6                            		even
000227A6                            
000227A6                            ; ---------------------------------------------------------------------------
000227A6                            ; Sprite mappings - special stage "UP" block
000227A6                            ; ---------------------------------------------------------------------------
000227A6                            Map_SS_Up:
000227A6                            	include "_maps\SSUPblock.asm"
000227A6                            ; ---------------------------------------------------------------------------
000227A6                            ; Sprite mappings - special stage "UP" block
000227A6                            ; ---------------------------------------------------------------------------
000227A6 0000                       		dc.w byte_1B944-Map_SS_Up
000227A8 0000                       		dc.w byte_1B94A-Map_SS_Up
000227AA 01                         byte_1B944:	dc.b 1
000227AB F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000227B0 01                         byte_1B94A:	dc.b 1
000227B1 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000227B6                            		even
000227B6                            		even
000227B6                            
000227B6                            ; ---------------------------------------------------------------------------
000227B6                            ; Sprite mappings - special stage "DOWN" block
000227B6                            ; ---------------------------------------------------------------------------
000227B6                            Map_SS_Down:
000227B6                            	include "_maps\SSDOWNblock.asm"
000227B6                            ; ---------------------------------------------------------------------------
000227B6                            ; Sprite mappings - special stage "DOWN" block
000227B6                            ; ---------------------------------------------------------------------------
000227B6 0000                       		dc.w byte_1B954-Map_SS_Down
000227B8 0000                       		dc.w byte_1B95A-Map_SS_Down
000227BA 01                         byte_1B954:	dc.b 1
000227BB F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000227C0 01                         byte_1B95A:	dc.b 1
000227C1 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000227C6                            		even
000227C6                            		even
000227C6                            
000227C6                            ; ---------------------------------------------------------------------------
000227C6                            ; Sprite mappings - special stage chaos	emeralds
000227C6                            ; ---------------------------------------------------------------------------
000227C6 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
000227C8 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
000227CA 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
000227CC 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
000227CE 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
000227D0 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
000227D2 01                         byte_1B96C:	dc.b 1
000227D3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000227D8 01                         byte_1B972:	dc.b 1
000227D9 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
000227DE 01                         byte_1B978:	dc.b 1
000227DF F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000227E4 01                         byte_1B97E:	dc.b 1
000227E5 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000227EA                            		even
000227EA                            ; ===========================================================================
000227EA                            ; ---------------------------------------------------------------------------
000227EA                            ; Object 09 - Sonic (special stage)
000227EA                            ; ---------------------------------------------------------------------------
000227EA                            
000227EA                            Obj09:					; XREF: Obj_Index
000227EA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000227EE 6700                       		beq.s	Obj09_Normal	; if not, branch
000227F0 6100 0000                  		bsr.w	SS_FixCamera
000227F4 6000 0000                  		bra.w	DebugMode
000227F8                            ; ===========================================================================
000227F8                            
000227F8                            Obj09_Normal:
000227F8 7000                       		moveq	#0,d0
000227FA 1028 0024                  		move.b	$24(a0),d0
000227FE 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
00022802 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
00022806                            ; ===========================================================================
00022806 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
00022808 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0002280A 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0002280C 0000                       		dc.w Obj09_Exit2-Obj09_Index
0002280E                            ; ===========================================================================
0002280E                            
0002280E                            Obj09_Main:				; XREF: Obj09_Index
0002280E 5428 0024                  		addq.b	#2,$24(a0)
00022812 117C 000E 0016             		move.b	#$E,$16(a0)
00022818 117C 0007 0017             		move.b	#7,$17(a0)
0002281E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00022826 317C 0780 0002             		move.w	#$780,2(a0)
0002282C 117C 0004 0001             		move.b	#4,1(a0)
00022832 117C 0000 0018             		move.b	#0,$18(a0)
00022838 117C 0002 001C             		move.b	#2,$1C(a0)
0002283E 08E8 0002 0022             		bset	#2,$22(a0)
00022844 08E8 0001 0022             		bset	#1,$22(a0)
0002284A                            
0002284A                            Obj09_ChkDebug:				; XREF: Obj09_Index
0002284A 4A78 FFFA                  		tst.w	($FFFFFFFA).w		; is debug mode	cheat enabled?
0002284E 6700                       		beq.s	Obj09_NoDebug		; if not, branch
00022850 0838 0005 F605             		btst	#iB,(Joypad|Press)	; is button B pressed?
00022856 6700                       		beq.s	Obj09_NoDebug		; if not, branch
00022858 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w	; change Sonic into a ring
0002285E                            
0002285E                            Obj09_NoDebug:
0002285E 117C 0000 0030             		move.b	#0,$30(a0)
00022864 7000                       		moveq	#0,d0
00022866 1028 0022                  		move.b	$22(a0),d0
0002286A 0240 0002                  		andi.w	#2,d0
0002286E 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
00022872 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
00022876 4EB9 0001 7288             		jsr	LoadSonicDynPLC
0002287C 4EF9 0001 045A             		jmp	DisplaySprite
00022882                            ; ===========================================================================
00022882 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
00022884 0000                       		dc.w Obj09_InAir-Obj09_Modes
00022886                            ; ===========================================================================
00022886                            
00022886                            Obj09_OnWall:				; XREF: Obj09_Modes
00022886 6100 0000                  		bsr.w	Obj09_Jump
0002288A 6100 0000                  		bsr.w	Obj09_Move
0002288E 6100 0000                  		bsr.w	Obj09_Fall
00022892 6000                       		bra.s	Obj09_Display
00022894                            ; ===========================================================================
00022894                            
00022894                            Obj09_InAir:				; XREF: Obj09_Modes
00022894 6100 0000                  		bsr.w	nullsub_2
00022898 6100 0000                  		bsr.w	Obj09_Move
0002289C 6100 0000                  		bsr.w	Obj09_Fall
000228A0                            
000228A0                            Obj09_Display:				; XREF: Obj09_OnWall
000228A0 6100 0000                  		bsr.w	Obj09_ChkItems
000228A4 6100 0000                  		bsr.w	Obj09_ChkItems2
000228A8 4EB9 0001 0434             		jsr	SpeedToPos
000228AE 6100 0000                  		bsr.w	SS_FixCamera
000228B2 3038 F780                  		move.w	($FFFFF780).w,d0
000228B6 D078 F782                  		add.w	($FFFFF782).w,d0
000228BA 31C0 F780                  		move.w	d0,($FFFFF780).w
000228BE 4EB9 0001 6F3A             		jsr	Sonic_Animate
000228C4 4E75                       		rts	
000228C6                            
000228C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000228C6                            
000228C6                            
000228C6                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
000228C6 0838 0002 F602             		btst	#iLeft,(SonicControl|Held)	; is left being pressed?
000228CC 6700                       		beq.s	Obj09_ChkRight			; if not, branch
000228CE 6100 0000                  		bsr.w	Obj09_MoveLeft
000228D2                            
000228D2                            Obj09_ChkRight:
000228D2 0838 0003 F602             		btst	#iRight,(SonicControl|Held) 	; is right being pressed?
000228D8 6700                       		beq.s	loc_1BA78			; if not, branch
000228DA 6100 0000                  		bsr.w	Obj09_MoveRight
000228DE                            
000228DE                            loc_1BA78:
000228DE 1038 F602                  		move.b	(SonicControl|Held),d0	; load held buttons bitfield
000228E2 0200 000C                  		andi.b	#Right+Left,d0		; look for Left/Right buttons
000228E6 6600                       		bne.s	loc_1BAA8		; if left/right is held, branch
000228E8 3028 0014                  		move.w	$14(a0),d0
000228EC 6700                       		beq.s	loc_1BAA8
000228EE 6B00                       		bmi.s	loc_1BA9A
000228F0 0440 000C                  		subi.w	#$C,d0
000228F4 6400                       		bcc.s	loc_1BA94
000228F6 303C 0000                  		move.w	#0,d0
000228FA                            
000228FA                            loc_1BA94:
000228FA 3140 0014                  		move.w	d0,$14(a0)
000228FE 6000                       		bra.s	loc_1BAA8
00022900                            ; ===========================================================================
00022900                            
00022900                            loc_1BA9A:
00022900 0640 000C                  		addi.w	#$C,d0
00022904 6400                       		bcc.s	loc_1BAA4
00022906 303C 0000                  		move.w	#0,d0
0002290A                            
0002290A                            loc_1BAA4:
0002290A 3140 0014                  		move.w	d0,$14(a0)
0002290E                            
0002290E                            loc_1BAA8:
0002290E 1038 F780                  		move.b	($FFFFF780).w,d0
00022912 0600 0020                  		addi.b	#$20,d0
00022916 0200 00C0                  		andi.b	#$C0,d0
0002291A 4400                       		neg.b	d0
0002291C 4EB9 0000 2CC8             		jsr	(CalcSine).l
00022922 C3E8 0014                  		muls.w	$14(a0),d1
00022926 D3A8 0008                  		add.l	d1,8(a0)
0002292A C1E8 0014                  		muls.w	$14(a0),d0
0002292E D1A8 000C                  		add.l	d0,$C(a0)
00022932 48E7 C000                  		movem.l	d0-d1,-(sp)
00022936 2428 000C                  		move.l	$C(a0),d2
0002293A 2628 0008                  		move.l	8(a0),d3
0002293E 6100 0000                  		bsr.w	sub_1BCE8
00022942 6700                       		beq.s	loc_1BAF2
00022944 4CDF 0003                  		movem.l	(sp)+,d0-d1
00022948 93A8 0008                  		sub.l	d1,8(a0)
0002294C 91A8 000C                  		sub.l	d0,$C(a0)
00022950 317C 0000 0014             		move.w	#0,$14(a0)
00022956 4E75                       		rts	
00022958                            ; ===========================================================================
00022958                            
00022958                            loc_1BAF2:
00022958 4CDF 0003                  		movem.l	(sp)+,d0-d1
0002295C 4E75                       		rts	
0002295E                            ; End of function Obj09_Move
0002295E                            
0002295E                            
0002295E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002295E                            
0002295E                            
0002295E                            Obj09_MoveLeft:				; XREF: Obj09_Move
0002295E 08E8 0000 0022             		bset	#0,$22(a0)
00022964 3028 0014                  		move.w	$14(a0),d0
00022968 6700                       		beq.s	loc_1BB06
0002296A 6A00                       		bpl.s	loc_1BB1A
0002296C                            
0002296C                            loc_1BB06:
0002296C 0440 000C                  		subi.w	#$C,d0
00022970 0C40 F800                  		cmpi.w	#-$800,d0
00022974 6E00                       		bgt.s	loc_1BB14
00022976 303C F800                  		move.w	#-$800,d0
0002297A                            
0002297A                            loc_1BB14:
0002297A 3140 0014                  		move.w	d0,$14(a0)
0002297E 4E75                       		rts	
00022980                            ; ===========================================================================
00022980                            
00022980                            loc_1BB1A:
00022980 0440 0040                  		subi.w	#$40,d0
00022984 6400                       		bcc.s	loc_1BB22
00022986 4E71                       		nop	
00022988                            
00022988                            loc_1BB22:
00022988 3140 0014                  		move.w	d0,$14(a0)
0002298C 4E75                       		rts	
0002298E                            ; End of function Obj09_MoveLeft
0002298E                            
0002298E                            
0002298E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002298E                            
0002298E                            
0002298E                            Obj09_MoveRight:			; XREF: Obj09_Move
0002298E 08A8 0000 0022             		bclr	#0,$22(a0)
00022994 3028 0014                  		move.w	$14(a0),d0
00022998 6B00                       		bmi.s	loc_1BB48
0002299A 0640 000C                  		addi.w	#$C,d0
0002299E 0C40 0800                  		cmpi.w	#$800,d0
000229A2 6D00                       		blt.s	loc_1BB42
000229A4 303C 0800                  		move.w	#$800,d0
000229A8                            
000229A8                            loc_1BB42:
000229A8 3140 0014                  		move.w	d0,$14(a0)
000229AC 6000                       		bra.s	locret_1BB54
000229AE                            ; ===========================================================================
000229AE                            
000229AE                            loc_1BB48:
000229AE 0640 0040                  		addi.w	#$40,d0
000229B2 6400                       		bcc.s	loc_1BB50
000229B4 4E71                       		nop	
000229B6                            
000229B6                            loc_1BB50:
000229B6 3140 0014                  		move.w	d0,$14(a0)
000229BA                            
000229BA                            locret_1BB54:
000229BA 4E75                       		rts	
000229BC                            ; End of function Obj09_MoveRight
000229BC                            
000229BC                            
000229BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000229BC                            
000229BC                            
000229BC                            Obj09_Jump:				; XREF: Obj09_OnWall
000229BC 1038 F603 0200 0070        		tpress	A+B+C,(SonicControl)	; A, B or C pressed?
000229C4 6700                       		beq.s	Obj09_NoJump		; if not, branch
000229C6 1038 F780                  		move.b	($FFFFF780).w,d0
000229CA 0200 00FC                  		andi.b	#$FC,d0
000229CE 4400                       		neg.b	d0
000229D0 0400 0040                  		subi.b	#$40,d0
000229D4 4EB9 0000 2CC8             		jsr	(CalcSine).l
000229DA C3FC 0680                  		muls.w	#$680,d1
000229DE E081                       		asr.l	#8,d1
000229E0 3141 0010                  		move.w	d1,$10(a0)
000229E4 C1FC 0680                  		muls.w	#$680,d0
000229E8 E080                       		asr.l	#8,d0
000229EA 3140 0012                  		move.w	d0,$12(a0)
000229EE 08E8 0001 0022             		bset	#1,$22(a0)
000229F4 303C 00A0                  		move.w	#$A0,d0
000229F8 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play jumping sound
000229FE                            
000229FE                            Obj09_NoJump:
000229FE 4E75                       		rts	
00022A00                            ; End of function Obj09_Jump
00022A00                            
00022A00                            
00022A00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00022A00                            
00022A00                            
00022A00                            nullsub_2:				; XREF: Obj09_InAir
00022A00 4E75                       		rts	
00022A02                            ; End of function nullsub_2
00022A02                            
00022A02                            ; ===========================================================================
00022A02                            ; ---------------------------------------------------------------------------
00022A02                            ; Unused subroutine to limit Sonic's jump height
00022A02                            ; Comment a "rts" above to fix jump height bug
00022A02                            ; ---------------------------------------------------------------------------
00022A02 323C FC00                  		move.w	#-$400,d1		; speed limit
00022A06 B268 0012                  		cmp.w	$12(a0),d1		; is Sonic's speed more than the limit?
00022A0A 6F00                       		ble.s	locret_1BBB4		; if not, branch
00022A0C 1038 F602 0200 0070        		theld	A+B+C,(SonicControl)	; A, B or C held?
00022A14 6600                       		bne.s	locret_1BBB4		; if yes, branch
00022A16 3141 0012                  		move.w	d1,$12(a0)		; limit the speed
00022A1A                            
00022A1A                            locret_1BBB4:
00022A1A 4E75                       		rts	
00022A1C                            ; ---------------------------------------------------------------------------
00022A1C                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
00022A1C                            ; ---------------------------------------------------------------------------
00022A1C                            
00022A1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00022A1C                            
00022A1C                            
00022A1C                            SS_FixCamera:				; XREF: Obj09
00022A1C 3428 000C                  		move.w	$C(a0),d2
00022A20 3628 0008                  		move.w	8(a0),d3
00022A24 3038 F700                  		move.w	($FFFFF700).w,d0
00022A28 0443 00A0                  		subi.w	#$A0,d3
00022A2C 6500                       		bcs.s	loc_1BBCE
00022A2E 9043                       		sub.w	d3,d0
00022A30 9178 F700                  		sub.w	d0,($FFFFF700).w
00022A34                            
00022A34                            loc_1BBCE:
00022A34 3038 F704                  		move.w	($FFFFF704).w,d0
00022A38 0442 0070                  		subi.w	#$70,d2
00022A3C 6500                       		bcs.s	locret_1BBDE
00022A3E 9042                       		sub.w	d2,d0
00022A40 9178 F704                  		sub.w	d0,($FFFFF704).w
00022A44                            
00022A44                            locret_1BBDE:
00022A44 4E75                       		rts	
00022A46                            ; End of function SS_FixCamera
00022A46                            
00022A46                            ; ===========================================================================
00022A46                            
00022A46                            Obj09_ExitStage:			; XREF: Obj09_Index
00022A46 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
00022A4C 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
00022A52 6600                       		bne.s	loc_1BBF4
00022A54 11FC 000C F600             		move.b	#$C,($FFFFF600).w
00022A5A                            
00022A5A                            loc_1BBF4:
00022A5A 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
00022A60 6D00                       		blt.s	loc_1BC12
00022A62 31FC 0000 F782             		move.w	#0,($FFFFF782).w
00022A68 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
00022A6E 5428 0024                  		addq.b	#2,$24(a0)
00022A72 317C 003C 0038             		move.w	#$3C,$38(a0)
00022A78                            
00022A78                            loc_1BC12:
00022A78 3038 F780                  		move.w	($FFFFF780).w,d0
00022A7C D078 F782                  		add.w	($FFFFF782).w,d0
00022A80 31C0 F780                  		move.w	d0,($FFFFF780).w
00022A84 4EB9 0001 6F3A             		jsr	Sonic_Animate
00022A8A 4EB9 0001 7288             		jsr	LoadSonicDynPLC
00022A90 6100 FF8A                  		bsr.w	SS_FixCamera
00022A94 4EF9 0001 045A             		jmp	DisplaySprite
00022A9A                            ; ===========================================================================
00022A9A                            
00022A9A                            Obj09_Exit2:				; XREF: Obj09_Index
00022A9A 5368 0038                  		subq.w	#1,$38(a0)
00022A9E 6600                       		bne.s	loc_1BC40
00022AA0 11FC 000C F600             		move.b	#$C,($FFFFF600).w
00022AA6                            
00022AA6                            loc_1BC40:
00022AA6 4EB9 0001 6F3A             		jsr	Sonic_Animate
00022AAC 4EB9 0001 7288             		jsr	LoadSonicDynPLC
00022AB2 6100 FF68                  		bsr.w	SS_FixCamera
00022AB6 4EF9 0001 045A             		jmp	DisplaySprite
00022ABC                            
00022ABC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00022ABC                            
00022ABC                            
00022ABC                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
00022ABC 2428 000C                  		move.l	$C(a0),d2
00022AC0 2628 0008                  		move.l	8(a0),d3
00022AC4 1038 F780                  		move.b	($FFFFF780).w,d0
00022AC8 0200 00FC                  		andi.b	#$FC,d0
00022ACC 4EB9 0000 2CC8             		jsr	(CalcSine).l
00022AD2 3828 0010                  		move.w	$10(a0),d4
00022AD6 48C4                       		ext.l	d4
00022AD8 E184                       		asl.l	#8,d4
00022ADA C1FC 002A                  		muls.w	#$2A,d0
00022ADE D084                       		add.l	d4,d0
00022AE0 3828 0012                  		move.w	$12(a0),d4
00022AE4 48C4                       		ext.l	d4
00022AE6 E184                       		asl.l	#8,d4
00022AE8 C3FC 002A                  		muls.w	#$2A,d1
00022AEC D284                       		add.l	d4,d1
00022AEE D680                       		add.l	d0,d3
00022AF0 6100 0000                  		bsr.w	sub_1BCE8
00022AF4 6700                       		beq.s	loc_1BCB0
00022AF6 9680                       		sub.l	d0,d3
00022AF8 7000                       		moveq	#0,d0
00022AFA 3140 0010                  		move.w	d0,$10(a0)
00022AFE 08A8 0001 0022             		bclr	#1,$22(a0)
00022B04 D481                       		add.l	d1,d2
00022B06 6100 0000                  		bsr.w	sub_1BCE8
00022B0A 6700                       		beq.s	loc_1BCC6
00022B0C 9481                       		sub.l	d1,d2
00022B0E 7200                       		moveq	#0,d1
00022B10 3141 0012                  		move.w	d1,$12(a0)
00022B14 4E75                       		rts	
00022B16                            ; ===========================================================================
00022B16                            
00022B16                            loc_1BCB0:
00022B16 D481                       		add.l	d1,d2
00022B18 6100 0000                  		bsr.w	sub_1BCE8
00022B1C 6700                       		beq.s	loc_1BCD4
00022B1E 9481                       		sub.l	d1,d2
00022B20 7200                       		moveq	#0,d1
00022B22 3141 0012                  		move.w	d1,$12(a0)
00022B26 08A8 0001 0022             		bclr	#1,$22(a0)
00022B2C                            
00022B2C                            loc_1BCC6:
00022B2C E080                       		asr.l	#8,d0
00022B2E E081                       		asr.l	#8,d1
00022B30 3140 0010                  		move.w	d0,$10(a0)
00022B34 3141 0012                  		move.w	d1,$12(a0)
00022B38 4E75                       		rts	
00022B3A                            ; ===========================================================================
00022B3A                            
00022B3A                            loc_1BCD4:
00022B3A E080                       		asr.l	#8,d0
00022B3C E081                       		asr.l	#8,d1
00022B3E 3140 0010                  		move.w	d0,$10(a0)
00022B42 3141 0012                  		move.w	d1,$12(a0)
00022B46 08E8 0001 0022             		bset	#1,$22(a0)
00022B4C 4E75                       		rts	
00022B4E                            ; End of function Obj09_Fall
00022B4E                            
00022B4E                            
00022B4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00022B4E                            
00022B4E                            
00022B4E                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
00022B4E 43F9 00FF 0000             		lea	($FF0000).l,a1
00022B54 7800                       		moveq	#0,d4
00022B56 4842                       		swap	d2
00022B58 3802                       		move.w	d2,d4
00022B5A 4842                       		swap	d2
00022B5C 0644 0044                  		addi.w	#$44,d4
00022B60 88FC 0018                  		divu.w	#$18,d4
00022B64 C8FC 0080                  		mulu.w	#$80,d4
00022B68 D3C4                       		adda.l	d4,a1
00022B6A 7800                       		moveq	#0,d4
00022B6C 4843                       		swap	d3
00022B6E 3803                       		move.w	d3,d4
00022B70 4843                       		swap	d3
00022B72 0644 0014                  		addi.w	#$14,d4
00022B76 88FC 0018                  		divu.w	#$18,d4
00022B7A D2C4                       		adda.w	d4,a1
00022B7C 7A00                       		moveq	#0,d5
00022B7E 1819                       		move.b	(a1)+,d4
00022B80 6100                       		bsr.s	sub_1BD30
00022B82 1819                       		move.b	(a1)+,d4
00022B84 6100                       		bsr.s	sub_1BD30
00022B86 D2FC 007E                  		adda.w	#$7E,a1
00022B8A 1819                       		move.b	(a1)+,d4
00022B8C 6100                       		bsr.s	sub_1BD30
00022B8E 1819                       		move.b	(a1)+,d4
00022B90 6100                       		bsr.s	sub_1BD30
00022B92 4A05                       		tst.b	d5
00022B94 4E75                       		rts	
00022B96                            ; End of function sub_1BCE8
00022B96                            
00022B96                            
00022B96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00022B96                            
00022B96                            
00022B96                            sub_1BD30:				; XREF: sub_1BCE8
00022B96 6700                       		beq.s	locret_1BD44
00022B98 0C04 0028                  		cmpi.b	#$28,d4
00022B9C 6700                       		beq.s	locret_1BD44
00022B9E 0C04 003A                  		cmpi.b	#$3A,d4
00022BA2 6500                       		bcs.s	loc_1BD46
00022BA4 0C04 004B                  		cmpi.b	#$4B,d4
00022BA8 6400                       		bcc.s	loc_1BD46
00022BAA                            
00022BAA                            locret_1BD44:
00022BAA 4E75                       		rts	
00022BAC                            ; ===========================================================================
00022BAC                            
00022BAC                            loc_1BD46:
00022BAC 1144 0030                  		move.b	d4,$30(a0)
00022BB0 2149 0032                  		move.l	a1,$32(a0)
00022BB4 7AFF                       		moveq	#-1,d5
00022BB6 4E75                       		rts	
00022BB8                            ; End of function sub_1BD30
00022BB8                            
00022BB8                            
00022BB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00022BB8                            
00022BB8                            
00022BB8                            Obj09_ChkItems:				; XREF: Obj09_Display
00022BB8 43F9 00FF 0000             		lea	($FF0000).l,a1
00022BBE 7800                       		moveq	#0,d4
00022BC0 3828 000C                  		move.w	$C(a0),d4
00022BC4 0644 0050                  		addi.w	#$50,d4
00022BC8 88FC 0018                  		divu.w	#$18,d4
00022BCC C8FC 0080                  		mulu.w	#$80,d4
00022BD0 D3C4                       		adda.l	d4,a1
00022BD2 7800                       		moveq	#0,d4
00022BD4 3828 0008                  		move.w	8(a0),d4
00022BD8 0644 0020                  		addi.w	#$20,d4
00022BDC 88FC 0018                  		divu.w	#$18,d4
00022BE0 D2C4                       		adda.w	d4,a1
00022BE2 1811                       		move.b	(a1),d4
00022BE4 6600                       		bne.s	Obj09_ChkCont
00022BE6 4A28 003A                  		tst.b	$3A(a0)
00022BEA 6600 0000                  		bne.w	Obj09_MakeGhostSolid
00022BEE 7800                       		moveq	#0,d4
00022BF0 4E75                       		rts	
00022BF2                            ; ===========================================================================
00022BF2                            
00022BF2                            Obj09_ChkCont:
00022BF2 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
00022BF6 6600                       		bne.s	Obj09_Chk1Up
00022BF8 6100 F726                  		bsr.w	SS_RemoveCollectedItem
00022BFC 6600                       		bne.s	Obj09_GetCont
00022BFE 14BC 0001                  		move.b	#1,(a2)
00022C02 2549 0004                  		move.l	a1,4(a2)
00022C06                            
00022C06                            Obj09_GetCont:
00022C06 4EB9 0000 C8B4             		jsr	CollectRing
00022C0C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
00022C12 6500                       		bcs.s	Obj09_NoCont
00022C14 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
00022C1A 6600                       		bne.s	Obj09_NoCont
00022C1C 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
00022C20 303C 00BF                  		move.w	#$BF,d0
00022C24 4EB9 0000 12CA             		jsr	(PlaySound).l	; play extra continue sound
00022C2A                            
00022C2A                            Obj09_NoCont:
00022C2A 7800                       		moveq	#0,d4
00022C2C 4E75                       		rts	
00022C2E                            ; ===========================================================================
00022C2E                            
00022C2E                            Obj09_Chk1Up:
00022C2E 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
00022C32 6600                       		bne.s	Obj09_ChkEmer
00022C34 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
00022C38 6600                       		bne.s	Obj09_Get1Up
00022C3A 14BC 0003                  		move.b	#3,(a2)
00022C3E 2549 0004                  		move.l	a1,4(a2)
00022C42                            
00022C42                            Obj09_Get1Up:
00022C42 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
00022C46 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
00022C4A 303C 009F                  		move.w	#$9F,d0
00022C4E 4EB9 0000 12CA             		jsr	(PlaySound).l	; play extra life music
00022C54 7800                       		moveq	#0,d4
00022C56 4E75                       		rts	
00022C58                            ; ===========================================================================
00022C58                            
00022C58                            Obj09_ChkEmer:
00022C58 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
00022C5C 6500                       		bcs.s	Obj09_ChkGhost
00022C5E 0C04 0040                  		cmpi.b	#$40,d4
00022C62 6200                       		bhi.s	Obj09_ChkGhost
00022C64 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
00022C68 6600                       		bne.s	Obj09_GetEmer
00022C6A 14BC 0005                  		move.b	#5,(a2)
00022C6E 2549 0004                  		move.l	a1,4(a2)
00022C72                            
00022C72                            Obj09_GetEmer:
00022C72 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
00022C78 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
00022C7A 0404 003B                  		subi.b	#$3B,d4
00022C7E 7000                       		moveq	#0,d0
00022C80 1038 FE57                  		move.b	($FFFFFE57).w,d0
00022C84 45F8 FE58                  		lea	($FFFFFE58).w,a2
00022C88 1584 0000                  		move.b	d4,(a2,d0.w)
00022C8C 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
00022C90                            
00022C90                            Obj09_NoEmer:
00022C90 303C 0096                  		move.w	#$96,d0
00022C94 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play emerald music
00022C9A 7800                       		moveq	#0,d4
00022C9C 4E75                       		rts	
00022C9E                            ; ===========================================================================
00022C9E                            
00022C9E                            Obj09_ChkGhost:
00022C9E 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
00022CA2 6600                       		bne.s	Obj09_ChkGhostTag
00022CA4 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
00022CAA                            
00022CAA                            Obj09_ChkGhostTag:
00022CAA 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
00022CAE 6600                       		bne.s	Obj09_NoGhost
00022CB0 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
00022CB6 6600                       		bne.s	Obj09_NoGhost	; if not, branch
00022CB8 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
00022CBE                            
00022CBE                            Obj09_NoGhost:
00022CBE 78FF                       		moveq	#-1,d4
00022CC0 4E75                       		rts	
00022CC2                            ; ===========================================================================
00022CC2                            
00022CC2                            Obj09_MakeGhostSolid:
00022CC2 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
00022CC8 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
00022CCA 43F9 00FF 1020             		lea	($FF1020).l,a1
00022CD0 723F                       		moveq	#$3F,d1
00022CD2                            
00022CD2                            Obj09_GhostLoop2:
00022CD2 743F                       		moveq	#$3F,d2
00022CD4                            
00022CD4                            Obj09_GhostLoop:
00022CD4 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
00022CD8 6600                       		bne.s	Obj09_NoReplace	; if not, branch
00022CDA 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
00022CDE                            
00022CDE                            Obj09_NoReplace:
00022CDE 5249                       		addq.w	#1,a1
00022CE0 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
00022CE4 43E9 0040                  		lea	$40(a1),a1
00022CE8 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
00022CEC                            
00022CEC                            Obj09_GhostNotSolid:
00022CEC 4228 003A                  		clr.b	$3A(a0)
00022CF0 7800                       		moveq	#0,d4
00022CF2 4E75                       		rts	
00022CF4                            ; End of function Obj09_ChkItems
00022CF4                            
00022CF4                            
00022CF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00022CF4                            
00022CF4                            
00022CF4                            Obj09_ChkItems2:			; XREF: Obj09_Display
00022CF4 1028 0030                  		move.b	$30(a0),d0
00022CF8 6600                       		bne.s	Obj09_ChkBumper
00022CFA 5328 0036                  		subq.b	#1,$36(a0)
00022CFE 6A00                       		bpl.s	loc_1BEA0
00022D00 117C 0000 0036             		move.b	#0,$36(a0)
00022D06                            
00022D06                            loc_1BEA0:
00022D06 5328 0037                  		subq.b	#1,$37(a0)
00022D0A 6A00                       		bpl.s	locret_1BEAC
00022D0C 117C 0000 0037             		move.b	#0,$37(a0)
00022D12                            
00022D12                            locret_1BEAC:
00022D12 4E75                       		rts	
00022D14                            ; ===========================================================================
00022D14                            
00022D14                            Obj09_ChkBumper:
00022D14 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
00022D18 6600                       		bne.s	Obj09_GOAL
00022D1A 2228 0032                  		move.l	$32(a0),d1
00022D1E 0481 00FF 0001             		subi.l	#$FF0001,d1
00022D24 3401                       		move.w	d1,d2
00022D26 0241 007F                  		andi.w	#$7F,d1
00022D2A C2FC 0018                  		mulu.w	#$18,d1
00022D2E 0441 0014                  		subi.w	#$14,d1
00022D32 EE4A                       		lsr.w	#7,d2
00022D34 0242 007F                  		andi.w	#$7F,d2
00022D38 C4FC 0018                  		mulu.w	#$18,d2
00022D3C 0442 0044                  		subi.w	#$44,d2
00022D40 9268 0008                  		sub.w	8(a0),d1
00022D44 9468 000C                  		sub.w	$C(a0),d2
00022D48 4EB9 0000 2F96             		jsr	(CalcAngle).l
00022D4E 4EB9 0000 2CC8             		jsr	(CalcSine).l
00022D54 C3FC F900                  		muls.w	#-$700,d1
00022D58 E081                       		asr.l	#8,d1
00022D5A 3141 0010                  		move.w	d1,$10(a0)
00022D5E C1FC F900                  		muls.w	#-$700,d0
00022D62 E080                       		asr.l	#8,d0
00022D64 3140 0012                  		move.w	d0,$12(a0)
00022D68 08E8 0001 0022             		bset	#1,$22(a0)
00022D6E 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
00022D72 6600                       		bne.s	Obj09_BumpSnd
00022D74 14BC 0002                  		move.b	#2,(a2)
00022D78 2028 0032                  		move.l	$32(a0),d0
00022D7C 5380                       		subq.l	#1,d0
00022D7E 2540 0004                  		move.l	d0,4(a2)
00022D82                            
00022D82                            Obj09_BumpSnd:
00022D82 303C 00B4                  		move.w	#$B4,d0
00022D86 4EF9 0000 12D0             		jmp	(PlaySound_Special).l ;	play bumper sound
00022D8C                            ; ===========================================================================
00022D8C                            
00022D8C                            Obj09_GOAL:
00022D8C 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
00022D90 6600                       		bne.s	Obj09_UPblock
00022D92 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
00022D96 303C 00A8                  		move.w	#$A8,d0		; change item
00022D9A 4EB9 0000 12D0             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
00022DA0 4E75                       		rts	
00022DA2                            ; ===========================================================================
00022DA2                            
00022DA2                            Obj09_UPblock:
00022DA2 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
00022DA6 6600                       		bne.s	Obj09_DOWNblock
00022DA8 4A28 0036                  		tst.b	$36(a0)
00022DAC 6600 0000                  		bne.w	Obj09_NoGlass
00022DB0 117C 001E 0036             		move.b	#$1E,$36(a0)
00022DB6 0838 0006 F783             		btst	#6,($FFFFF783).w
00022DBC 6700                       		beq.s	Obj09_UPsnd
00022DBE E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
00022DC2 2268 0032                  		movea.l	$32(a0),a1
00022DC6 5389                       		subq.l	#1,a1
00022DC8 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
00022DCC                            
00022DCC                            Obj09_UPsnd:
00022DCC 303C 00A9                  		move.w	#$A9,d0
00022DD0 4EF9 0000 12D0             		jmp	(PlaySound_Special).l ;	play up/down sound
00022DD6                            ; ===========================================================================
00022DD6                            
00022DD6                            Obj09_DOWNblock:
00022DD6 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
00022DDA 6600                       		bne.s	Obj09_Rblock
00022DDC 4A28 0036                  		tst.b	$36(a0)
00022DE0 6600 0000                  		bne.w	Obj09_NoGlass
00022DE4 117C 001E 0036             		move.b	#$1E,$36(a0)
00022DEA 0838 0006 F783             		btst	#6,($FFFFF783).w
00022DF0 6600                       		bne.s	Obj09_DOWNsnd
00022DF2 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
00022DF6 2268 0032                  		movea.l	$32(a0),a1
00022DFA 5389                       		subq.l	#1,a1
00022DFC 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
00022E00                            
00022E00                            Obj09_DOWNsnd:
00022E00 303C 00A9                  		move.w	#$A9,d0
00022E04 4EF9 0000 12D0             		jmp	(PlaySound_Special).l ;	play up/down sound
00022E0A                            ; ===========================================================================
00022E0A                            
00022E0A                            Obj09_Rblock:
00022E0A 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
00022E0E 6600                       		bne.s	Obj09_ChkGlass
00022E10 4A28 0037                  		tst.b	$37(a0)
00022E14 6600 0000                  		bne.w	Obj09_NoGlass
00022E18 117C 001E 0037             		move.b	#$1E,$37(a0)
00022E1E 6100 F500                  		bsr.w	SS_RemoveCollectedItem
00022E22 6600                       		bne.s	Obj09_RevStage
00022E24 14BC 0004                  		move.b	#4,(a2)
00022E28 2028 0032                  		move.l	$32(a0),d0
00022E2C 5380                       		subq.l	#1,d0
00022E2E 2540 0004                  		move.l	d0,4(a2)
00022E32                            
00022E32                            Obj09_RevStage:
00022E32 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
00022E36 303C 00A9                  		move.w	#$A9,d0
00022E3A 4EF9 0000 12D0             		jmp	(PlaySound_Special).l ;	play sound
00022E40                            ; ===========================================================================
00022E40                            
00022E40                            Obj09_ChkGlass:
00022E40 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
00022E44 6700                       		beq.s	Obj09_Glass	; if yes, branch
00022E46 0C00 002E                  		cmpi.b	#$2E,d0
00022E4A 6700                       		beq.s	Obj09_Glass
00022E4C 0C00 002F                  		cmpi.b	#$2F,d0
00022E50 6700                       		beq.s	Obj09_Glass
00022E52 0C00 0030                  		cmpi.b	#$30,d0
00022E56 6600                       		bne.s	Obj09_NoGlass	; if not, branch
00022E58                            
00022E58                            Obj09_Glass:
00022E58 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
00022E5C 6600                       		bne.s	Obj09_GlassSnd
00022E5E 14BC 0006                  		move.b	#6,(a2)
00022E62 2268 0032                  		movea.l	$32(a0),a1
00022E66 5389                       		subq.l	#1,a1
00022E68 2549 0004                  		move.l	a1,4(a2)
00022E6C 1011                       		move.b	(a1),d0
00022E6E 5200                       		addq.b	#1,d0		; change glass type when touched
00022E70 0C00 0030                  		cmpi.b	#$30,d0
00022E74 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
00022E76 4200                       		clr.b	d0		; remove the glass block when it's destroyed
00022E78                            
00022E78                            Obj09_GlassUpdate:
00022E78 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
00022E7C                            
00022E7C                            Obj09_GlassSnd:
00022E7C 303C 00BA                  		move.w	#$BA,d0
00022E80 4EF9 0000 12D0             		jmp	(PlaySound_Special).l ;	play glass block sound
00022E86                            ; ===========================================================================
00022E86                            
00022E86                            Obj09_NoGlass:
00022E86 4E75                       		rts	
00022E88                            ; End of function Obj09_ChkItems2
00022E88                            
00022E88                            ; ===========================================================================
00022E88                            ; ---------------------------------------------------------------------------
00022E88                            ; Object 10 - blank
00022E88                            ; ---------------------------------------------------------------------------
00022E88                            
00022E88                            Obj10:					; XREF: Obj_Index
00022E88 4E75                       		rts	
00022E8A                            ; ---------------------------------------------------------------------------
00022E8A                            ; Subroutine to	animate	level graphics
00022E8A                            ; ---------------------------------------------------------------------------
00022E8A                            
00022E8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00022E8A                            
00022E8A                            
00022E8A                            AniArt_Load:				; XREF: Demo_Time; loc_F54
00022E8A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00022E8E 6600                       		bne.s	AniArt_Pause	; if yes, branch
00022E90 4DF9 00C0 0000             		lea	($C00000).l,a6
00022E96 6100 0000                  		bsr.w	AniArt_GiantRing
00022E9A 7000                       		moveq	#0,d0
00022E9C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00022EA0 D040                       		add.w	d0,d0
00022EA2 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
00022EA6 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
00022EAA                            ; ===========================================================================
00022EAA                            
00022EAA                            AniArt_Pause:
00022EAA 4E75                       		rts	
00022EAC                            ; End of function AniArt_Load
00022EAC                            
00022EAC                            ; ===========================================================================
00022EAC 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
00022EB0 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
00022EB4 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
00022EB8 0000                       		dc.w AniArt_Ending-AniArt_Index
00022EBA                            ; ===========================================================================
00022EBA                            ; ---------------------------------------------------------------------------
00022EBA                            ; Animated pattern routine - Green Hill
00022EBA                            ; ---------------------------------------------------------------------------
00022EBA                            
00022EBA                            AniArt_GHZ:				; XREF: AniArt_Index
00022EBA 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
00022EBE 6A00                       		bpl.s	loc_1C08A
00022EC0 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
00022EC6 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
00022ECC 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
00022ED0 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
00022ED4 0240 0001                  		andi.w	#1,d0
00022ED8 6700                       		beq.s	loc_1C078
00022EDA 43E9 0100                  		lea	$100(a1),a1	; load next frame
00022EDE                            
00022EDE                            loc_1C078:
00022EDE 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
00022EE8 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
00022EEC 6000 0000                  		bra.w	LoadTiles
00022EF0                            ; ===========================================================================
00022EF0                            
00022EF0                            loc_1C08A:
00022EF0 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
00022EF4 6A00                       		bpl.s	loc_1C0C0
00022EF6 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
00022EFC 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
00022F02 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
00022F06 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
00022F0A 0240 0001                  		andi.w	#1,d0
00022F0E 6700                       		beq.s	loc_1C0AE
00022F10 43E9 0200                  		lea	$200(a1),a1
00022F14                            
00022F14                            loc_1C0AE:
00022F14 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
00022F1E 323C 000F                  		move.w	#$F,d1
00022F22 6000 0000                  		bra.w	LoadTiles
00022F26                            ; ===========================================================================
00022F26                            
00022F26                            loc_1C0C0:
00022F26 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
00022F2A 6A00                       		bpl.s	locret_1C10C
00022F2C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
00022F32 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
00022F36 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
00022F3A 0240 0003                  		andi.w	#3,d0
00022F3E 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
00022F42 0800 0000                  		btst	#0,d0
00022F46 6600                       		bne.s	loc_1C0E8
00022F48 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
00022F4E                            
00022F4E                            loc_1C0E8:
00022F4E EF48                       		lsl.w	#7,d0
00022F50 3200                       		move.w	d0,d1
00022F52 D040                       		add.w	d0,d0
00022F54 D041                       		add.w	d1,d0
00022F56 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
00022F60 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
00022F66 43F1 0000                  		lea	(a1,d0.w),a1
00022F6A 323C 000B                  		move.w	#$B,d1
00022F6E 6100 0000                  		bsr.w	LoadTiles
00022F72                            
00022F72                            locret_1C10C:
00022F72 4E75                       		rts	
00022F74                            ; ===========================================================================
00022F74 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
00022F78                            ; ===========================================================================
00022F78                            ; ---------------------------------------------------------------------------
00022F78                            ; Animated pattern routine - Marble
00022F78                            ; ---------------------------------------------------------------------------
00022F78                            
00022F78                            AniArt_MZ:				; XREF: AniArt_Index
00022F78 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
00022F7C 6A00                       		bpl.s	loc_1C150
00022F7E 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
00022F84 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
00022F8A 7000                       		moveq	#0,d0
00022F8C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
00022F90 5200                       		addq.b	#1,d0
00022F92 0C00 0003                  		cmpi.b	#3,d0
00022F96 6600                       		bne.s	loc_1C134
00022F98 7000                       		moveq	#0,d0
00022F9A                            
00022F9A                            loc_1C134:
00022F9A 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
00022F9E C0FC 0100                  		mulu.w	#$100,d0
00022FA2 D2C0                       		adda.w	d0,a1
00022FA4 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
00022FAE 323C 0007                  		move.w	#7,d1
00022FB2 6100 0000                  		bsr.w	LoadTiles
00022FB6                            
00022FB6                            loc_1C150:
00022FB6 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
00022FBA 6A00                       		bpl.s	loc_1C1AE
00022FBC 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
00022FC2 7000                       		moveq	#0,d0
00022FC4 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
00022FC8 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
00022FCE EE58                       		ror.w	#7,d0
00022FD0 D8C0                       		adda.w	d0,a4
00022FD2 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
00022FDC 7600                       		moveq	#0,d3
00022FDE 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
00022FE2 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
00022FE6 1638 FE68                  		move.b	($FFFFFE68).w,d3
00022FEA 343C 0003                  		move.w	#3,d2
00022FEE                            
00022FEE                            loc_1C188:
00022FEE 3003                       		move.w	d3,d0
00022FF0 D040                       		add.w	d0,d0
00022FF2 0240 001E                  		andi.w	#$1E,d0
00022FF6 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
00022FFC 3033 0000                  		move.w	(a3,d0.w),d0
00023000 47F3 0000                  		lea	(a3,d0.w),a3
00023004 224C                       		movea.l	a4,a1
00023006 323C 001F                  		move.w	#$1F,d1
0002300A 4E93                       		jsr	(a3)
0002300C 5843                       		addq.w	#4,d3
0002300E 51CA FFDE                  		dbf	d2,loc_1C188
00023012 4E75                       		rts	
00023014                            ; ===========================================================================
00023014                            
00023014                            loc_1C1AE:
00023014 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
00023018 6A00 0000                  		bpl.w	locret_1C1EA
0002301C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
00023022 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
00023028 7000                       		moveq	#0,d0
0002302A 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0002302E 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
00023032 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
00023038 C0FC 00C0                  		mulu.w	#$C0,d0
0002303C D2C0                       		adda.w	d0,a1
0002303E 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
00023048 323C 0005                  		move.w	#5,d1
0002304C 6000 0000                  		bra.w	LoadTiles
00023050                            ; ===========================================================================
00023050                            
00023050                            locret_1C1EA:
00023050 4E75                       		rts	
00023052                            ; ===========================================================================
00023052                            ; ---------------------------------------------------------------------------
00023052                            ; Animated pattern routine - Scrap Brain
00023052                            ; ---------------------------------------------------------------------------
00023052                            
00023052                            AniArt_SBZ:				; XREF: AniArt_Index
00023052 4A38 F7B4                  		tst.b	($FFFFF7B4).w
00023056 6700                       		beq.s	loc_1C1F8
00023058 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0002305C 6000                       		bra.s	loc_1C250
0002305E                            ; ===========================================================================
0002305E                            
0002305E                            loc_1C1F8:
0002305E 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
00023062 6A00                       		bpl.s	loc_1C250
00023064 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0002306A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
00023070 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0002307A 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0002307E 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
00023082 0240 0007                  		andi.w	#7,d0
00023086 6700                       		beq.s	loc_1C234
00023088 5340                       		subq.w	#1,d0
0002308A C0FC 0180                  		mulu.w	#$180,d0
0002308E 43F1 0000                  		lea	(a1,d0.w),a1
00023092 323C 000B                  		move.w	#$B,d1
00023096 6000 0000                  		bra.w	LoadTiles
0002309A                            ; ===========================================================================
0002309A                            
0002309A                            loc_1C234:
0002309A 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
000230A0                            
000230A0                            loc_1C23A:
000230A0 323C 0005                  		move.w	#5,d1
000230A4 6100 0000                  		bsr.w	LoadTiles
000230A8 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
000230AE 323C 0005                  		move.w	#5,d1
000230B2 6000 0000                  		bra.w	LoadTiles
000230B6                            ; ===========================================================================
000230B6                            
000230B6                            loc_1C250:
000230B6 4A38 F7B5                  		tst.b	($FFFFF7B5).w
000230BA 6700                       		beq.s	loc_1C25C
000230BC 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
000230C0 6000                       		bra.s	locret_1C2A0
000230C2                            ; ===========================================================================
000230C2                            
000230C2                            loc_1C25C:
000230C2 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
000230C6 6A00                       		bpl.s	locret_1C2A0
000230C8 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
000230CE 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
000230D4 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
000230DE 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
000230E2 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
000230E6 0240 0007                  		andi.w	#7,d0
000230EA 6700                       		beq.s	loc_1C298
000230EC 5340                       		subq.w	#1,d0
000230EE C0FC 0180                  		mulu.w	#$180,d0
000230F2 43F1 0000                  		lea	(a1,d0.w),a1
000230F6 323C 000B                  		move.w	#$B,d1
000230FA 6000 0000                  		bra.w	LoadTiles
000230FE                            ; ===========================================================================
000230FE                            
000230FE                            loc_1C298:
000230FE 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
00023104 609A                       		bra.s	loc_1C23A
00023106                            ; ===========================================================================
00023106                            
00023106                            locret_1C2A0:
00023106 4E75                       		rts	
00023108                            ; ===========================================================================
00023108                            ; ---------------------------------------------------------------------------
00023108                            ; Animated pattern routine - ending sequence
00023108                            ; ---------------------------------------------------------------------------
00023108                            
00023108                            AniArt_Ending:				; XREF: AniArt_Index
00023108 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0002310C 6A00                       		bpl.s	loc_1C2F4
0002310E 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
00023114 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0002311A 45F8 9400                  		lea	($FFFF9400).w,a2
0002311E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
00023122 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
00023126 0240 0001                  		andi.w	#1,d0
0002312A 6700                       		beq.s	loc_1C2CE
0002312C 43E9 0200                  		lea	$200(a1),a1
00023130 45EA 0200                  		lea	$200(a2),a2
00023134                            
00023134                            loc_1C2CE:
00023134 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0002313E 323C 000F                  		move.w	#$F,d1
00023142 6100 0000                  		bsr.w	LoadTiles
00023146 224A                       		movea.l	a2,a1
00023148 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
00023152 323C 000F                  		move.w	#$F,d1
00023156 6000 0000                  		bra.w	LoadTiles
0002315A                            ; ===========================================================================
0002315A                            
0002315A                            loc_1C2F4:
0002315A 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0002315E 6A00                       		bpl.s	loc_1C33C
00023160 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
00023166 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0002316A 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0002316E 0240 0007                  		andi.w	#7,d0
00023172 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
00023176 EF48                       		lsl.w	#7,d0
00023178 3200                       		move.w	d0,d1
0002317A D040                       		add.w	d0,d0
0002317C D041                       		add.w	d1,d0
0002317E 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
00023188 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0002318E 43F1 0000                  		lea	(a1,d0.w),a1
00023192 323C 000B                  		move.w	#$B,d1
00023196 6000 0000                  		bra.w	LoadTiles
0002319A                            ; ===========================================================================
0002319A 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
000231A2                            ; ===========================================================================
000231A2                            
000231A2                            loc_1C33C:
000231A2 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
000231A6 6A00                       		bpl.s	loc_1C37A
000231A8 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
000231AE 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
000231B2 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
000231B6 0240 0003                  		andi.w	#3,d0
000231BA 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
000231BE E148                       		lsl.w	#8,d0
000231C0 D040                       		add.w	d0,d0
000231C2 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
000231CC 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
000231D0 43F1 0000                  		lea	(a1,d0.w),a1
000231D4 323C 000F                  		move.w	#$F,d1
000231D8 6000 0000                  		bra.w	LoadTiles
000231DC                            ; ===========================================================================
000231DC 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
000231E0                            ; ===========================================================================
000231E0                            
000231E0                            loc_1C37A:
000231E0 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
000231E4 6A00                       		bpl.s	locret_1C3B4
000231E6 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
000231EC 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
000231F0 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
000231F4 0240 0003                  		andi.w	#3,d0
000231F8 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
000231FC E148                       		lsl.w	#8,d0
000231FE D040                       		add.w	d0,d0
00023200 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0002320A 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0002320E 43F1 0000                  		lea	(a1,d0.w),a1
00023212 323C 000F                  		move.w	#$F,d1
00023216 6000 0000                  		bra.w	LoadTiles
0002321A                            ; ===========================================================================
0002321A                            
0002321A                            locret_1C3B4:
0002321A 4E75                       		rts	
0002321C                            ; ===========================================================================
0002321C                            
0002321C                            AniArt_none:				; XREF: AniArt_Index
0002321C 4E75                       		rts	
0002321E                            
0002321E                            ; ---------------------------------------------------------------------------
0002321E                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0002321E                            ; ---------------------------------------------------------------------------
0002321E                            
0002321E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002321E                            
0002321E                            
0002321E                            LoadTiles:
0002321E 2C99                       		move.l	(a1)+,(a6)
00023220 2C99                       		move.l	(a1)+,(a6)
00023222 2C99                       		move.l	(a1)+,(a6)
00023224 2C99                       		move.l	(a1)+,(a6)
00023226 2C99                       		move.l	(a1)+,(a6)
00023228 2C99                       		move.l	(a1)+,(a6)
0002322A 2C99                       		move.l	(a1)+,(a6)
0002322C 2C99                       		move.l	(a1)+,(a6)
0002322E 51C9 FFEE                  		dbf	d1,LoadTiles
00023232 4E75                       		rts	
00023234                            ; End of function LoadTiles
00023234                            
00023234                            ; ===========================================================================
00023234                            ; ---------------------------------------------------------------------------
00023234                            ; Animated pattern routine - more Marble Zone
00023234                            ; ---------------------------------------------------------------------------
00023234 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
00023238 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0002323C 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
00023240 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
00023244 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
00023248 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0002324C 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
00023250 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
00023254                            ; ===========================================================================
00023254                            
00023254                            loc_1C3EE:				; XREF: AniArt_MZextra
00023254 2C91                       		move.l	(a1),(a6)
00023256 43E9 0010                  		lea	$10(a1),a1
0002325A 51C9 FFF8                  		dbf	d1,loc_1C3EE
0002325E 4E75                       		rts	
00023260                            ; ===========================================================================
00023260                            
00023260                            loc_1C3FA:				; XREF: AniArt_MZextra
00023260 2029 0002                  		move.l	2(a1),d0
00023264 1029 0001                  		move.b	1(a1),d0
00023268 E098                       		ror.l	#8,d0
0002326A 2C80                       		move.l	d0,(a6)
0002326C 43E9 0010                  		lea	$10(a1),a1
00023270 51C9 FFEE                  		dbf	d1,loc_1C3FA
00023274 4E75                       		rts	
00023276                            ; ===========================================================================
00023276                            
00023276                            loc_1C410:				; XREF: AniArt_MZextra
00023276 2CA9 0002                  		move.l	2(a1),(a6)
0002327A 43E9 0010                  		lea	$10(a1),a1
0002327E 51C9 FFF6                  		dbf	d1,loc_1C410
00023282 4E75                       		rts	
00023284                            ; ===========================================================================
00023284                            
00023284                            loc_1C41E:				; XREF: AniArt_MZextra
00023284 2029 0004                  		move.l	4(a1),d0
00023288 1029 0003                  		move.b	3(a1),d0
0002328C E098                       		ror.l	#8,d0
0002328E 2C80                       		move.l	d0,(a6)
00023290 43E9 0010                  		lea	$10(a1),a1
00023294 51C9 FFEE                  		dbf	d1,loc_1C41E
00023298 4E75                       		rts	
0002329A                            ; ===========================================================================
0002329A                            
0002329A                            loc_1C434:				; XREF: AniArt_MZextra
0002329A 2CA9 0004                  		move.l	4(a1),(a6)
0002329E 43E9 0010                  		lea	$10(a1),a1
000232A2 51C9 FFF6                  		dbf	d1,loc_1C434
000232A6 4E75                       		rts	
000232A8                            ; ===========================================================================
000232A8                            
000232A8                            loc_1C442:				; XREF: AniArt_MZextra
000232A8 2029 0006                  		move.l	6(a1),d0
000232AC 1029 0005                  		move.b	5(a1),d0
000232B0 E098                       		ror.l	#8,d0
000232B2 2C80                       		move.l	d0,(a6)
000232B4 43E9 0010                  		lea	$10(a1),a1
000232B8 51C9 FFEE                  		dbf	d1,loc_1C442
000232BC 4E75                       		rts	
000232BE                            ; ===========================================================================
000232BE                            
000232BE                            loc_1C458:				; XREF: AniArt_MZextra
000232BE 2CA9 0006                  		move.l	6(a1),(a6)
000232C2 43E9 0010                  		lea	$10(a1),a1
000232C6 51C9 FFF6                  		dbf	d1,loc_1C458
000232CA 4E75                       		rts	
000232CC                            ; ===========================================================================
000232CC                            
000232CC                            loc_1C466:				; XREF: AniArt_MZextra
000232CC 2029 0008                  		move.l	8(a1),d0
000232D0 1029 0007                  		move.b	7(a1),d0
000232D4 E098                       		ror.l	#8,d0
000232D6 2C80                       		move.l	d0,(a6)
000232D8 43E9 0010                  		lea	$10(a1),a1
000232DC 51C9 FFEE                  		dbf	d1,loc_1C466
000232E0 4E75                       		rts	
000232E2                            ; ===========================================================================
000232E2                            
000232E2                            loc_1C47C:				; XREF: AniArt_MZextra
000232E2 2CA9 0008                  		move.l	8(a1),(a6)
000232E6 43E9 0010                  		lea	$10(a1),a1
000232EA 51C9 FFF6                  		dbf	d1,loc_1C47C
000232EE 4E75                       		rts	
000232F0                            ; ===========================================================================
000232F0                            
000232F0                            loc_1C48A:				; XREF: AniArt_MZextra
000232F0 2029 000A                  		move.l	$A(a1),d0
000232F4 1029 0009                  		move.b	9(a1),d0
000232F8 E098                       		ror.l	#8,d0
000232FA 2C80                       		move.l	d0,(a6)
000232FC 43E9 0010                  		lea	$10(a1),a1
00023300 51C9 FFEE                  		dbf	d1,loc_1C48A
00023304 4E75                       		rts	
00023306                            ; ===========================================================================
00023306                            
00023306                            loc_1C4A0:				; XREF: AniArt_MZextra
00023306 2CA9 000A                  		move.l	$A(a1),(a6)
0002330A 43E9 0010                  		lea	$10(a1),a1
0002330E 51C9 FFF6                  		dbf	d1,loc_1C4A0
00023312 4E75                       		rts	
00023314                            ; ===========================================================================
00023314                            
00023314                            loc_1C4AE:				; XREF: AniArt_MZextra
00023314 2029 000C                  		move.l	$C(a1),d0
00023318 1029 000B                  		move.b	$B(a1),d0
0002331C E098                       		ror.l	#8,d0
0002331E 2C80                       		move.l	d0,(a6)
00023320 43E9 0010                  		lea	$10(a1),a1
00023324 51C9 FFEE                  		dbf	d1,loc_1C4AE
00023328 4E75                       		rts	
0002332A                            ; ===========================================================================
0002332A                            
0002332A                            loc_1C4C4:				; XREF: AniArt_MZextra
0002332A 2CA9 000C                  		move.l	$C(a1),(a6)
0002332E 43E9 0010                  		lea	$10(a1),a1
00023332 51C9 FFF6                  		dbf	d1,loc_1C4C4
00023336 4E75                       		rts	
00023338                            ; ===========================================================================
00023338                            
00023338                            loc_1C4D2:				; XREF: AniArt_MZextra
00023338 2029 000C                  		move.l	$C(a1),d0
0002333C E198                       		rol.l	#8,d0
0002333E 1011                       		move.b	0(a1),d0
00023340 2C80                       		move.l	d0,(a6)
00023342 43E9 0010                  		lea	$10(a1),a1
00023346 51C9 FFF0                  		dbf	d1,loc_1C4D2
0002334A 4E75                       		rts	
0002334C                            ; ===========================================================================
0002334C                            
0002334C                            loc_1C4E8:				; XREF: AniArt_MZextra
0002334C 3CA9 000E                  		move.w	$E(a1),(a6)
00023350 3C91                       		move.w	0(a1),(a6)
00023352 43E9 0010                  		lea	$10(a1),a1
00023356 51C9 FFF4                  		dbf	d1,loc_1C4E8
0002335A 4E75                       		rts	
0002335C                            ; ===========================================================================
0002335C                            
0002335C                            loc_1C4FA:				; XREF: AniArt_MZextra
0002335C 2011                       		move.l	0(a1),d0
0002335E 1029 000F                  		move.b	$F(a1),d0
00023362 E098                       		ror.l	#8,d0
00023364 2C80                       		move.l	d0,(a6)
00023366 43E9 0010                  		lea	$10(a1),a1
0002336A 51C9 FFF0                  		dbf	d1,loc_1C4FA
0002336E 4E75                       		rts	
00023370                            
00023370                            ; ---------------------------------------------------------------------------
00023370                            ; Animated pattern routine - giant ring
00023370                            ; ---------------------------------------------------------------------------
00023370                            
00023370                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00023370                            
00023370                            
00023370                            AniArt_GiantRing:			; XREF: AniArt_Load
00023370 4A78 F7BE                  		tst.w	($FFFFF7BE).w
00023374 6600                       		bne.s	loc_1C518
00023376 4E75                       		rts	
00023378                            ; ===========================================================================
00023378                            
00023378                            loc_1C518:
00023378 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0002337E 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
00023384 7000                       		moveq	#0,d0
00023386 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0002338A 43F1 0000                  		lea	(a1,d0.w),a1
0002338E 0640 8000                  		addi.w	#$8000,d0
00023392 E588                       		lsl.l	#2,d0
00023394 E448                       		lsr.w	#2,d0
00023396 0040 4000                  		ori.w	#$4000,d0
0002339A 4840                       		swap	d0
0002339C 2D40 0004                  		move.l	d0,4(a6)
000233A0 323C 000D                  		move.w	#$D,d1
000233A4 6000 FE78                  		bra.w	LoadTiles
000233A8                            ; End of function AniArt_GiantRing
000233A8                            
000233A8                            ; ===========================================================================
000233A8                            ; ---------------------------------------------------------------------------
000233A8                            ; Object 21 - SCORE, TIME, RINGS
000233A8                            ; ---------------------------------------------------------------------------
000233A8                            
000233A8                            Obj21:					; XREF: Obj_Index
000233A8 7000                       		moveq	#0,d0
000233AA 1028 0024                  		move.b	$24(a0),d0
000233AE 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
000233B2 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
000233B6                            ; ===========================================================================
000233B6 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
000233B8 0000                       		dc.w Obj21_Flash-Obj21_Index
000233BA                            ; ===========================================================================
000233BA                            
000233BA                            Obj21_Main:				; XREF: Obj21_Main
000233BA 5428 0024                  		addq.b	#2,$24(a0)
000233BE 317C 0090 0008             		move.w	#$90,8(a0)  ; loading coordinates on x-axis
000233C4 317C 0108 000A             		move.w	#$108,$A(a0); on y-axis
000233CA 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
000233D2 317C 06CA 0002             		move.w	#$6CA,2(a0)
000233D8 117C 0000 0001             		move.b	#0,1(a0) ; in theory, this is hud's words loading command
000233DE 117C 0000 0018             		move.b	#0,$18(a0)
000233E4                            
000233E4                            Obj21_Flash:				; XREF: Obj21_Main
000233E4 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
000233E8 6700                       		beq.s	Obj21_Flash2	; if not, branch
000233EA 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
000233EE 4EF9 0001 045A             		jmp	DisplaySprite
000233F4                            ; ===========================================================================
000233F4                            
000233F4                            Obj21_Flash2:
000233F4 7000                       		moveq	#0,d0
000233F6 0838 0003 FE05             		btst	#3,($FFFFFE05).w
000233FC 6600                       		bne.s	Obj21_Display
000233FE 5240                       		addq.w	#1,d0		; make ring counter flash red
00023400 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
00023406 6600                       		bne.s	Obj21_Display	; if not, branch
00023408 5440                       		addq.w	#2,d0		; make time counter flash red
0002340A                            
0002340A                            Obj21_Display:
0002340A 1140 001A                  		move.b	d0,$1A(a0)
0002340E 4EF9 0001 045A             		jmp	DisplaySprite
00023414                            ; ===========================================================================
00023414                            ; ---------------------------------------------------------------------------
00023414                            ; Sprite mappings - SCORE, TIME, RINGS
00023414                            ; ---------------------------------------------------------------------------
00023414                            Map_obj21:
00023414                            	include "_maps\obj21.asm"
00023414                            ; --------------------------------------------------------------------------------
00023414                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00023414                            ; --------------------------------------------------------------------------------
00023414                            
00023414                            SME_c5exH:	
00023414 0000 0000                  		dc.w SME_c5exH_16-SME_c5exH, SME_c5exH_4E-SME_c5exH	
00023418 0000 0000                  		dc.w SME_c5exH_81-SME_c5exH, SME_c5exH_AF-SME_c5exH	
0002341C 0000 0000                  		dc.w SME_c5exH_DD-SME_c5exH, SME_c5exH_106-SME_c5exH	
00023420 0000 0000                  		dc.w SME_c5exH_12F-SME_c5exH, SME_c5exH_158-SME_c5exH	
00023424 0000 0000                  		dc.w SME_c5exH_181-SME_c5exH, SME_c5exH_1BE-SME_c5exH	
00023428 0000                       		dc.w SME_c5exH_1FB-SME_c5exH	
0002342A 0B                         SME_c5exH_16:	dc.b $B	
0002342B 800D 8000 00               		dc.b $80, $D, $80, 0, 0	
00023430 800D 8018 20               		dc.b $80, $D, $80, $18, $20	
00023435 800D A020 40               		dc.b $80, $D, $A0, $20, $40	
0002343A 900D 8010 00               		dc.b $90, $D, $80, $10, 0	
0002343F 900D A028 28               		dc.b $90, $D, $A0, $28, $28	
00023444 9005 A0E4 50               		dc.b $90, 5, $A0, $E4, $50	
00023449 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0	
0002344E A009 A030 30               		dc.b $A0, 9, $A0, $30, $30	
00023453 4005 810A 00               		dc.b $40, 5, $81, $A, 0	
00023458 400D A10E 10               		dc.b $40, $D, $A1, $E, $10	
0002345D 9001 A02A 4A               		dc.b $90, 1, $A0, $2A, $4A	
00023462 0A                         SME_c5exH_4E:	dc.b $A	
00023463 800D 8000 00               		dc.b $80, $D, $80, 0, 0	
00023468 800D 8018 20               		dc.b $80, $D, $80, $18, $20	
0002346D 800D A020 40               		dc.b $80, $D, $A0, $20, $40	
00023472 900D 8010 00               		dc.b $90, $D, $80, $10, 0	
00023477 900D A028 28               		dc.b $90, $D, $A0, $28, $28	
0002347C 9005 A0E4 50               		dc.b $90, 5, $A0, $E4, $50	
00023481 A009 A030 30               		dc.b $A0, 9, $A0, $30, $30	
00023486 4005 810A 00               		dc.b $40, 5, $81, $A, 0	
0002348B 400D A10E 10               		dc.b $40, $D, $A1, $E, $10	
00023490 9001 A02A 4A               		dc.b $90, 1, $A0, $2A, $4A	
00023495 09                         SME_c5exH_81:	dc.b 9	
00023496 800D 8000 00               		dc.b $80, $D, $80, 0, 0	
0002349B 800D 8018 20               		dc.b $80, $D, $80, $18, $20	
000234A0 800D A020 40               		dc.b $80, $D, $A0, $20, $40	
000234A5 900D A028 28               		dc.b $90, $D, $A0, $28, $28	
000234AA 9005 A0E4 50               		dc.b $90, 5, $A0, $E4, $50	
000234AF A00D 8008 00               		dc.b $A0, $D, $80, 8, 0	
000234B4 A009 A030 30               		dc.b $A0, 9, $A0, $30, $30	
000234B9 4005 810A 00               		dc.b $40, 5, $81, $A, 0	
000234BE 400D A10E 10               		dc.b $40, $D, $A1, $E, $10	
000234C3 09                         SME_c5exH_AF:	dc.b 9	
000234C4 800D 8000 00               		dc.b $80, $D, $80, 0, 0	
000234C9 800D E018 20               		dc.b $80, $D, $E0, $18, $20	
000234CE 800D 8020 40               		dc.b $80, $D, $80, $20, $40	
000234D3 900D 8028 28               		dc.b $90, $D, $80, $28, $28	
000234D8 9005 80E4 50               		dc.b $90, 5, $80, $E4, $50	
000234DD A009 8030 30               		dc.b $A0, 9, $80, $30, $30	
000234E2 4005 E10A 00               		dc.b $40, 5, $E1, $A, 0	
000234E7 400D 810E 10               		dc.b $40, $D, $81, $E, $10	
000234EC 9001 802A 4A               		dc.b $90, 1, $80, $2A, $4A	
000234F1 08                         SME_c5exH_DD:	dc.b 8	
000234F2 8001 8022 00               		dc.b $80, 1, $80, $22, 0	
000234F7 8001 802A 08               		dc.b $80, 1, $80, $2A, 8	
000234FC 800D 8028 18               		dc.b $80, $D, $80, $28, $18	
00023501 8001 802A 38               		dc.b $80, 1, $80, $2A, $38	
00023506 8005 80E4 40               		dc.b $80, 5, $80, $E4, $40	
0002350B 9001 8020 00               		dc.b $90, 1, $80, $20, 0	
00023510 9001 802A 08               		dc.b $90, 1, $80, $2A, 8	
00023515 9009 8030 18               		dc.b $90, 9, $80, $30, $18	
0002351A 08                         SME_c5exH_106:	dc.b 8	
0002351B 8001 8022 00               		dc.b $80, 1, $80, $22, 0	
00023520 8001 802A 08               		dc.b $80, 1, $80, $2A, 8	
00023525 800D 8028 18               		dc.b $80, $D, $80, $28, $18	
0002352A 8001 802A 38               		dc.b $80, 1, $80, $2A, $38	
0002352F 8005 80E4 40               		dc.b $80, 5, $80, $E4, $40	
00023534 9001 A020 00               		dc.b $90, 1, $A0, $20, 0	
00023539 9001 A02A 08               		dc.b $90, 1, $A0, $2A, 8	
0002353E 9009 8030 18               		dc.b $90, 9, $80, $30, $18	
00023543 08                         SME_c5exH_12F:	dc.b 8	
00023544 8001 A022 00               		dc.b $80, 1, $A0, $22, 0	
00023549 8001 A02A 08               		dc.b $80, 1, $A0, $2A, 8	
0002354E 800D 8028 18               		dc.b $80, $D, $80, $28, $18	
00023553 8001 802A 38               		dc.b $80, 1, $80, $2A, $38	
00023558 8005 80E4 40               		dc.b $80, 5, $80, $E4, $40	
0002355D 9001 8020 00               		dc.b $90, 1, $80, $20, 0	
00023562 9001 802A 08               		dc.b $90, 1, $80, $2A, 8	
00023567 9009 8030 18               		dc.b $90, 9, $80, $30, $18	
0002356C 08                         SME_c5exH_158:	dc.b 8	
0002356D 8001 A022 00               		dc.b $80, 1, $A0, $22, 0	
00023572 8001 A02A 08               		dc.b $80, 1, $A0, $2A, 8	
00023577 800D 8028 18               		dc.b $80, $D, $80, $28, $18	
0002357C 8001 802A 38               		dc.b $80, 1, $80, $2A, $38	
00023581 8005 80E4 40               		dc.b $80, 5, $80, $E4, $40	
00023586 9001 A020 00               		dc.b $90, 1, $A0, $20, 0	
0002358B 9001 A02A 08               		dc.b $90, 1, $A0, $2A, 8	
00023590 9009 8030 18               		dc.b $90, 9, $80, $30, $18	
00023595 0C                         SME_c5exH_181:	dc.b $C	
00023596 8001 8022 00               		dc.b $80, 1, $80, $22, 0	
0002359B 8001 802A 08               		dc.b $80, 1, $80, $2A, 8	
000235A0 800D 8028 18               		dc.b $80, $D, $80, $28, $18	
000235A5 8001 802A 38               		dc.b $80, 1, $80, $2A, $38	
000235AA 8005 80E4 40               		dc.b $80, 5, $80, $E4, $40	
000235AF 9001 8020 00               		dc.b $90, 1, $80, $20, 0	
000235B4 9001 802A 08               		dc.b $90, 1, $80, $2A, 8	
000235B9 9009 8030 18               		dc.b $90, 9, $80, $30, $18	
000235BE 480D C000 00               		dc.b $48, $D, $C0, 0, 0	
000235C3 480D C008 20               		dc.b $48, $D, $C0, 8, $20	
000235C8 480D C010 40               		dc.b $48, $D, $C0, $10, $40	
000235CD 480D C018 60               		dc.b $48, $D, $C0, $18, $60	
000235D2 0C                         SME_c5exH_1BE:	dc.b $C	
000235D3 8001 8022 00               		dc.b $80, 1, $80, $22, 0	
000235D8 8001 802A 08               		dc.b $80, 1, $80, $2A, 8	
000235DD 800D 8028 18               		dc.b $80, $D, $80, $28, $18	
000235E2 8001 802A 38               		dc.b $80, 1, $80, $2A, $38	
000235E7 8005 80E4 40               		dc.b $80, 5, $80, $E4, $40	
000235EC 9001 A020 00               		dc.b $90, 1, $A0, $20, 0	
000235F1 9001 A02A 08               		dc.b $90, 1, $A0, $2A, 8	
000235F6 9009 8030 18               		dc.b $90, 9, $80, $30, $18	
000235FB 480D C000 00               		dc.b $48, $D, $C0, 0, 0	
00023600 480D C008 20               		dc.b $48, $D, $C0, 8, $20	
00023605 480D C010 40               		dc.b $48, $D, $C0, $10, $40	
0002360A 480D C018 60               		dc.b $48, $D, $C0, $18, $60	
0002360F 0C                         SME_c5exH_1FB:	dc.b $C	
00023610 8001 A022 00               		dc.b $80, 1, $A0, $22, 0	
00023615 8001 A02A 08               		dc.b $80, 1, $A0, $2A, 8	
0002361A 800D 8028 18               		dc.b $80, $D, $80, $28, $18	
0002361F 8001 802A 38               		dc.b $80, 1, $80, $2A, $38	
00023624 8005 80E4 40               		dc.b $80, 5, $80, $E4, $40	
00023629 9001 8020 00               		dc.b $90, 1, $80, $20, 0	
0002362E 9001 802A 08               		dc.b $90, 1, $80, $2A, 8	
00023633 9009 8030 18               		dc.b $90, 9, $80, $30, $18	
00023638 480D C000 00               		dc.b $48, $D, $C0, 0, 0	
0002363D 480D C008 20               		dc.b $48, $D, $C0, 8, $20	
00023642 480D C010 40               		dc.b $48, $D, $C0, $10, $40	
00023647 480D C018 60               		dc.b $48, $D, $C0, $18, $60	
0002364C                            		even
0002364C                            		even
0002364C                            
0002364C                            ; ---------------------------------------------------------------------------
0002364C                            ; Add points subroutine
0002364C                            ; ---------------------------------------------------------------------------
0002364C                            
0002364C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002364C                            
0002364C                            
0002364C                            AddPoints:
0002364C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
00023652 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
00023656 47F8 FE26                  		lea	($FFFFFE26).w,a3
0002365A D193                       		add.l	d0,(a3)		; add d0*10 to the score
0002365C 223C 000F 423F             		move.l	#999999,d1
00023662 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
00023664 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
00023668 2681                       		move.l	d1,(a3)		; reset	score to #999999
0002366A 2481                       		move.l	d1,(a2)
0002366C                            
0002366C                            loc_1C6AC:
0002366C 2013                       		move.l	(a3),d0
0002366E B092                       		cmp.l	(a2),d0
00023670 6500 0000                  		bcs.w	locret_1C6B6
00023674 2480                       		move.l	d0,(a2)
00023676                            
00023676                            locret_1C6B6:
00023676 4E75                       		rts	
00023678                            ; End of function AddPoints
00023678                            
00023678                            ; ---------------------------------------------------------------------------
00023678                            ; Subroutine to	update the HUD
00023678                            ; ---------------------------------------------------------------------------
00023678                            
00023678                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00023678                            
00023678                            
00023678                            HudUpdate: 
00023678 4A78 FFFA                    tst.w ($FFFFFFFA).w ; is debug mode on? 
0002367C 6600 0000                    bne.w HudDebug ; if yes, branch 
00023680 4A38 FE1F                    tst.b ($FFFFFE1F).w ; does the score need updating? 
00023684 6700                         beq.s Hud_ChkRings ; if not, branch 
00023686 4238 FE1F                    clr.b ($FFFFFE1F).w 
0002368A 203C 5C80 0003               move.l #$5C800003,d0 ; set VRAM address 
00023690 2238 FE26                    move.l ($FFFFFE26).w,d1 ; load score 
00023694 4EB9 0000 0000               jsr Hud_Score 
0002369A                            
0002369A                            Hud_ChkRings: 
0002369A 4A38 FE1D                    tst.b ($FFFFFE1D).w ; does the ring counter need updating? 
0002369E 6700                         beq.s Hud_ChkTime ; if not, branch 
000236A0 6A00                         bpl.s loc_1C6E4 
000236A2 4EB9 0000 0000               jsr Hud_LoadZero 
000236A8                            
000236A8                            loc_1C6E4: 
000236A8 4238 FE1D                    clr.b ($FFFFFE1D).w 
000236AC 203C 5F40 0003               move.l #$5F400003,d0 ; set VRAM address 
000236B2 7200                         moveq #0,d1 
000236B4 3238 FE20                    move.w ($FFFFFE20).w,d1 ; load number of rings 
000236B8 4EB9 0000 0000               jsr Hud_Rings 
000236BE                            
000236BE                            Hud_ChkTime: 
000236BE 4A38 FE1E                    tst.b ($FFFFFE1E).w ; does the time need updating? 
000236C2 6700                         beq.s Hud_ChkLives ; if not, branch 
000236C4 4A78 F63A                    tst.w ($FFFFF63A).w ; is the game paused? 
000236C8 6600                         bne.s Hud_ChkLives ; if yes, branch 
000236CA 43F8 FE22                    lea ($FFFFFE22).w,a1 
000236CE 0C99 0009 3B3B               cmpi.l #$93B3B,(a1)+ ; is the time 9.59? 
000236D4 6700 0000                    beq.w TimeOver ; if yes, branch 
000236D8 5221                         addq.b #1,-(a1) 
000236DA 4EB9 0000 0000               jsr Hud_CentSec  
000236E0 0C11 003C                    cmpi.b #60,(a1) 
000236E4 6500                         bcs.s Hud_ChkLives 
000236E6 12BC 0000                    move.b #0,(a1) 
000236EA 5221                         addq.b #1,-(a1) 
000236EC 0C11 003C                    cmpi.b #60,(a1) 
000236F0 6500                         bcs.s loc_1C734 
000236F2 12BC 0000                    move.b #0,(a1) 
000236F6 5221                         addq.b #1,-(a1) 
000236F8 0C11 0009                    cmpi.b #9,(a1) 
000236FC 6500                         bcs.s loc_1C734 
000236FE 12BC 0009                    move.b #9,(a1) 
00023702                            
00023702                            loc_1C734: 
00023702 203C 5E40 0003               move.l #$5E400003,d0 
00023708 7200                         moveq #0,d1 
0002370A 1238 FE23                    move.b ($FFFFFE23).w,d1 ; load minutes 
0002370E 4EB9 0000 0000               jsr Hud_Mins 
00023714 203C 5EC0 0003               move.l #$5EC00003,d0 
0002371A 7200                         moveq #0,d1 
0002371C 1238 FE24                    move.b ($FFFFFE24).w,d1 ; load seconds 
00023720 4EB9 0000 0000               jsr Hud_Secs 
00023726                            
00023726                            Hud_ChkLives: 
00023726 4A38 FE1C                    tst.b ($FFFFFE1C).w ; does the lives counter need updating? 
0002372A 6700                         beq.s Hud_ChkBonus ; if not, branch 
0002372C 4238 FE1C                    clr.b ($FFFFFE1C).w 
00023730 4EB9 0000 0000               jsr Hud_Lives 
00023736                            
00023736                            Hud_ChkBonus: 
00023736 4A38 F7D6                    tst.b ($FFFFF7D6).w ; do time/ring bonus counters need updating? 
0002373A 6700                         beq.s Hud_End ; if not, branch 
0002373C 4238 F7D6                    clr.b ($FFFFF7D6).w 
00023740 23FC 6E00 0002 00C0 0004     move.l #$6E000002,($C00004).l 
0002374A 7200                         moveq #0,d1 
0002374C 3238 F7D2                    move.w ($FFFFF7D2).w,d1 ; load time bonus 
00023750 4EB9 0000 0000               jsr Hud_TimeRingBonus 
00023756 7200                         moveq #0,d1 
00023758 3238 F7D4                    move.w ($FFFFF7D4).w,d1 ; load ring bonus 
0002375C 4EB9 0000 0000               jsr Hud_TimeRingBonus 
00023762                            
00023762                            Hud_End: 
00023762 4E75                         rts  
00023764                            ; =========================================================================== 
00023764                            
00023764                            TimeOver: ; XREF: Hud_ChkTime 
00023764 4238 FE1E                    clr.b ($FFFFFE1E).w 
00023768 41F8 D000                    lea ($FFFFD000).w,a0 
0002376C 2448                         movea.l a0,a2 
0002376E 4EBA D1DE                    jsr KillSonic 
00023772 11FC 0001 FE1A               move.b #1,($FFFFFE1A).w 
00023778 4E75                         rts  
0002377A                            ; =========================================================================== 
0002377A                            
0002377A                            HudDebug: ; XREF: HudUpdate 
0002377A 4EB9 0000 0000               jsr HudDb_XY 
00023780 4A38 FE1D                    tst.b ($FFFFFE1D).w ; does the ring counter need updating? 
00023784 6700                         beq.s HudDb_ObjCount ; if not, branch 
00023786 6A00                         bpl.s HudDb_Rings 
00023788 4EB9 0000 0000               jsr Hud_LoadZero 
0002378E                            
0002378E                            HudDb_Rings: 
0002378E 4238 FE1D                    clr.b ($FFFFFE1D).w 
00023792                            
00023792 203C 5F40 0003               move.l #$5F400003,d0 ; set VRAM address 
00023798 7200                         moveq #0,d1 
0002379A 3238 FE20                    move.w ($FFFFFE20).w,d1 ; load number of rings 
0002379E 4EB9 0000 0000               jsr Hud_Rings 
000237A4                            
000237A4                            HudDb_ObjCount: 
000237A4 203C 5EC0 0003               move.l #$5EC00003,d0 ; set VRAM address 
000237AA 7200                         moveq #0,d1 
000237AC 1238 F62C                    move.b ($FFFFF62C).w,d1 ; load "number of objects" counter 
000237B0 4EB9 0000 0000               jsr Hud_Secs 
000237B6 4A38 FE1C                    tst.b ($FFFFFE1C).w ; does the lives counter need updating? 
000237BA 6700                         beq.s HudDb_ChkBonus ; if not, branch 
000237BC 4238 FE1C                    clr.b ($FFFFFE1C).w 
000237C0 4EB9 0000 0000               jsr Hud_Lives 
000237C6                            
000237C6                            HudDb_ChkBonus: 
000237C6 4A38 F7D6                    tst.b ($FFFFF7D6).w ; does the ring/time bonus counter need updating? 
000237CA 6700                         beq.s HudDb_End ; if not, branch 
000237CC 4238 F7D6                    clr.b ($FFFFF7D6).w 
000237D0 23FC 6E00 0002 00C0 0004     move.l #$6E000002,($C00004).l ; set VRAM address 
000237DA 7200                         moveq #0,d1 
000237DC 3238 F7D2                    move.w ($FFFFF7D2).w,d1 ; load time bonus 
000237E0 4EB9 0000 0000               jsr Hud_TimeRingBonus 
000237E6 7200                         moveq #0,d1 
000237E8 3238 F7D4                    move.w ($FFFFF7D4).w,d1 ; load ring bonus 
000237EC 4EB9 0000 0000               jsr Hud_TimeRingBonus 
000237F2                            
000237F2                            HudDb_End: 
000237F2 4E75                         rts  
000237F4                               
000237F4                            Hud_CentSec: 
000237F4 2F09                         move.l a1,-(sp) 
000237F6 7000                         moveq #0,d0 
000237F8 7200                         moveq #0,d1 
000237FA 1238 FE25                    move.b ($FFFFFE25).w,d1  
000237FE 1001                         move.b d1,d0  
00023800 80FC 0003                    divu.w #3,d0  
00023804 C0FC 0002                    mulu.w #2,d0  
00023808 D200                         add.b d0,d1  
0002380A 5341                         sub.w #1,d1  
0002380C 6A00                         bpl.s Hud_CentSec_Minutes 
0002380E 323C 0000                    move.w #0,d1  
00023812                            Hud_CentSec_Minutes: 
00023812 0C41 0064                    cmp.w #100,d1 ; are there 100 centiseconds counted? 
00023816 6500 0000                    blo.w Hud_CentSec_Hundreds  
0002381A 323C 0063                    move.w #99,d1 ; set the centiseconds to 99 
0002381E                            Hud_CentSec_Hundreds: 
0002381E 0C38 0003 FE25               cmp.b #3,($FFFFFE25).w 
00023824 6600                         bne.s Hud_CentSec_Mili 
00023826 323C 0005                    move.w #5,d1 
0002382A                            Hud_CentSec_Mili: 
0002382A 203C 75C0 0003               move.l #$75C00003,d0 
00023830 4EB9 0000 0000               jsr Hud_Secs 
00023836 225F                         move.l (sp)+,a1 
00023838 4E75                         rts  
0002383A                               
0002383A                            ; End of function HudUpdate 	
0002383A                            ; End of function HudUpdate
0002383A                            
0002383A                            ; ---------------------------------------------------------------------------
0002383A                            ; Subroutine to	load "0" on the	HUD
0002383A                            ; ---------------------------------------------------------------------------
0002383A                            
0002383A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002383A                            
0002383A                            
0002383A                            Hud_LoadZero:				; XREF: HudUpdate
00023844 45FA 0000                  		lea	Hud_TilesZero(pc),a2
00023848 343C 0002                  		move.w	#2,d2
0002384C 6000                       		bra.s	HUD_LoadBase
0002384E                            ; End of function Hud_LoadZero
0002384E                            
0002384E                            ; ---------------------------------------------------------------------------
0002384E                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0002384E                            ; ---------------------------------------------------------------------------
0002384E                            
0002384E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002384E                            
0002384E                            
0002384E                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0002384E 4DF9 00C0 0000             		lea	($C00000).l,a6
00023854 6100 0000                  		bsr.w	Hud_Lives
00023862 45FA 0000                  		lea	Hud_TilesBase(pc),a2
00023866 343C 000E                  		move.w	#$E,d2
0002386A                            
0002386A                            ;loc_1C83E:
0002386A                            HUD_LoadBase:				; XREF: Hud_LoadZero
0002386A 43FA 0000                  		lea	Art_Hud(pc),a1	; load uncompressed HUD art
0002386E                            
0002386E                            HUD_LoadTiles:
0002386E 323C 000F                  		move.w	#$F,d1
00023872 101A                       		move.b	(a2)+,d0	; get the index of tile to load
00023874 6B00                       		bmi.s	HUD_EmptyTile	; if it's negative (e.g. $FF), branch
00023876 4880                       		ext.w	d0
00023878 EB48                       		lsl.w	#5,d0
0002387A 47F1 0000                  		lea	(a1,d0.w),a3	; get tile to load
0002387E                            
0002387E                            @WriteTile:
0002387E 2C9B                       		move.l	(a3)+,(a6)	; write tile to VRAM
00023880 51C9 FFFC                  		dbf	d1,@WriteTile	; repeat $F more times
00023884                            
00023884                            HUD_NextTile:
00023884 51CA FFE8                  		dbf	d2,HUD_LoadTiles ; repeat $E more times
00023888                            
00023888 4E75                       		rts
0002388A                            ; ===========================================================================
0002388A                            
0002388A                            HUD_EmptyTile:
0002388A 2CBC 0000 0000             		move.l	#0,(a6)			; fill VRAM with #0
00023890 51C9 FFF8                  		dbf	d1,HUD_EmptyTile	; repeat $F more times
00023894                            
00023894 60EE                       		bra.s	HUD_NextTile
00023896                            ; End of function Hud_Base
00023896                            
00023896                            ; ===========================================================================
00023896 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
000238A2 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
000238A6                            ; ---------------------------------------------------------------------------
000238A6                            ; Subroutine to	load debug mode	numbers	patterns
000238A6                            ; ---------------------------------------------------------------------------
000238A6                            
000238A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000238A6                            
000238A6                            
000238A6                            HudDb_XY:				; XREF: HudDebug
000238B0 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
000238B4 4841                       		swap	d1
000238B6 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
000238BA 6100                       		bsr.s	HudDb_XY2
000238BC 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
000238C0 4841                       		swap	d1
000238C2 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
000238C6                            ; End of function HudDb_XY
000238C6                            
000238C6                            
000238C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000238C6                            
000238C6                            
000238C6                            HudDb_XY2:
000238C6 7C07                       		moveq	#7,d6
000238C8 43F9 0000 05C4             		lea	(Art_Text).l,a1	; load uncompresset text patterns
000238CE                            
000238CE                            HudDb_XYLoop:
000238CE E959                       		rol.w	#4,d1
000238D0 3401                       		move.w	d1,d2
000238D2 0242 000F                  		andi.w	#$F,d2		; get low 4 bits representing digit
000238D6 0C42 000A                  		cmpi.w	#$A,d2		; is digit more or equals to $A?
000238DA 6500                       		bcs.s	@WriteTile	; if not, branch
000238DC 5E42                       		addq.w	#7,d2		; add 7 to tile index
000238DE                            
000238DE                            @WriteTile:
000238DE EB4A                       		lsl.w	#5,d2		; multiply tile index by $20
000238E0 47F1 2000                  		lea	(a1,d2.w),a3	; get tile to load
000238E4 2C9B                       		move.l	(a3)+,(a6)
000238E6 2C9B                       		move.l	(a3)+,(a6)
000238E8 2C9B                       		move.l	(a3)+,(a6)
000238EA 2C9B                       		move.l	(a3)+,(a6)
000238EC 2C9B                       		move.l	(a3)+,(a6)
000238EE 2C9B                       		move.l	(a3)+,(a6)
000238F0 2C9B                       		move.l	(a3)+,(a6)
000238F2 2C9B                       		move.l	(a3)+,(a6)
000238F4 4841                       		swap	d1
000238F6 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
000238FA                            
000238FA 4E75                       		rts	
000238FC                            ; End of function HudDb_XY2
000238FC                            
000238FC                            ; ---------------------------------------------------------------------------
000238FC                            ; Subroutine to	load rings numbers patterns
000238FC                            ; ---------------------------------------------------------------------------
000238FC                            
000238FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000238FC                            
000238FC                            
000238FC                            Hud_Rings:				; XREF: HudUpdate
000238FC 45F9 0000 0000             		lea	(Hud_100).l,a2
00023902 7C02                       		moveq	#2,d6
00023904 6000                       		bra.s	Hud_LoadArt
00023906                            ; End of function Hud_Rings
00023906                            
00023906                            ; ---------------------------------------------------------------------------
00023906                            ; Subroutine to	load score numbers patterns
00023906                            ; ---------------------------------------------------------------------------
00023906                            
00023906                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00023906                            
00023906                            
00023906                            Hud_Score:				; XREF: HudUpdate
00023906 45F9 0000 0000             		lea	(Hud_100000).l,a2
0002390C 7C05                       		moveq	#5,d6
0002390E                            
0002390E                            Hud_LoadArt:
0002390E 7800                       		moveq	#0,d4
00023910 43FA 0000                  		lea	Art_Hud(pc),a1
00023914                            
00023914                            Hud_ScoreLoop:
00023914 7400                       		moveq	#0,d2
00023916 261A                       		move.l	(a2)+,d3
00023918                            
00023918                            @FindDigit:
00023918 9283                       		sub.l	d3,d1
0002391A 6500                       		bcs.s	Hud_ScoreWrite
0002391C 5242                       		addq.w	#1,d2		; add 1 to digit
0002391E 60F8                       		bra.s	@FindDigit
00023920                            ; ===========================================================================
00023920                            
00023920                            Hud_ScoreWrite:
00023920 D283                       		add.l	d3,d1
00023922 4A42                       		tst.w	d2		; is digit zero?
00023924 6700                       		beq.s	@WriteTile	; if yes, branch
00023926 383C 0001                  		move.w	#1,d4
0002392A                            
0002392A                            @WriteTile:
0002392A 4A44                       		tst.w	d4
0002392C 6700                       		beq.s	@NextTile
0002392E ED4A                       		lsl.w	#6,d2
00023930 2D40 0004                  		move.l	d0,4(a6)	; store VPD address
00023934 47F1 2000                  		lea	(a1,d2.w),a3	; get tile to load
00023938 2C9B                       		move.l	(a3)+,(a6)
0002393A 2C9B                       		move.l	(a3)+,(a6)
0002393C 2C9B                       		move.l	(a3)+,(a6)
0002393E 2C9B                       		move.l	(a3)+,(a6)
00023940 2C9B                       		move.l	(a3)+,(a6)
00023942 2C9B                       		move.l	(a3)+,(a6)
00023944 2C9B                       		move.l	(a3)+,(a6)
00023946 2C9B                       		move.l	(a3)+,(a6)
00023948 2C9B                       		move.l	(a3)+,(a6)
0002394A 2C9B                       		move.l	(a3)+,(a6)
0002394C 2C9B                       		move.l	(a3)+,(a6)
0002394E 2C9B                       		move.l	(a3)+,(a6)
00023950 2C9B                       		move.l	(a3)+,(a6)
00023952 2C9B                       		move.l	(a3)+,(a6)
00023954 2C9B                       		move.l	(a3)+,(a6)
00023956 2C9B                       		move.l	(a3)+,(a6)
00023958                            
00023958                            @NextTile:
00023958 0680 0040 0000             		addi.l	#$400000,d0
0002395E 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
00023962                            
00023962 4E75                       		rts	
00023964                            ; End of function Hud_Score
00023964                            
00023964                            ; ---------------------------------------------------------------------------
00023964                            ; Subroutine to	load countdown numbers on the continue screen
00023964                            ; ---------------------------------------------------------------------------
00023964                            
00023964                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00023964                            
00023964                            
00023964                            ContScrCounter:				; XREF: ContinueScreen
0002396E 4DF9 00C0 0000             		lea	($C00000).l,a6
00023974 45F9 0000 0000             		lea	(Hud_10).l,a2
0002397A 7C01                       		moveq	#1,d6
0002397C 7800                       		moveq	#0,d4
0002397E 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
00023982                            
00023982                            ContScr_Loop:
00023982 7400                       		moveq	#0,d2
00023984 261A                       		move.l	(a2)+,d3
00023986                            
00023986                            loc_1C95A:
00023986 9283                       		sub.l	d3,d1
00023988 6500                       		bcs.s	loc_1C962
0002398A 5242                       		addq.w	#1,d2
0002398C 60F8                       		bra.s	loc_1C95A
0002398E                            ; ===========================================================================
0002398E                            
0002398E                            loc_1C962:
0002398E D283                       		add.l	d3,d1
00023990 ED4A                       		lsl.w	#6,d2
00023992 47F1 2000                  		lea	(a1,d2.w),a3
00023996 2C9B                       		move.l	(a3)+,(a6)
00023998 2C9B                       		move.l	(a3)+,(a6)
0002399A 2C9B                       		move.l	(a3)+,(a6)
0002399C 2C9B                       		move.l	(a3)+,(a6)
0002399E 2C9B                       		move.l	(a3)+,(a6)
000239A0 2C9B                       		move.l	(a3)+,(a6)
000239A2 2C9B                       		move.l	(a3)+,(a6)
000239A4 2C9B                       		move.l	(a3)+,(a6)
000239A6 2C9B                       		move.l	(a3)+,(a6)
000239A8 2C9B                       		move.l	(a3)+,(a6)
000239AA 2C9B                       		move.l	(a3)+,(a6)
000239AC 2C9B                       		move.l	(a3)+,(a6)
000239AE 2C9B                       		move.l	(a3)+,(a6)
000239B0 2C9B                       		move.l	(a3)+,(a6)
000239B2 2C9B                       		move.l	(a3)+,(a6)
000239B4 2C9B                       		move.l	(a3)+,(a6)
000239B6 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
000239BA                            
000239BA 4E75                       		rts	
000239BC                            ; End of function ContScrCounter
000239BC                            
000239BC                            ; ===========================================================================
000239BC                            ; ---------------------------------------------------------------------------
000239BC                            ; HUD counter sizes
000239BC                            ; ---------------------------------------------------------------------------
000239BC 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
000239C0 0000 2710                  Hud_10000:	dc.l 10000
000239C4 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
000239C8 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
000239CC 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
000239D0 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
000239D4                            
000239D4                            ; ---------------------------------------------------------------------------
000239D4                            ; Subroutine to	load time numbers patterns
000239D4                            ; ---------------------------------------------------------------------------
000239D4                            
000239D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000239D4                            
000239D4                            
000239D4                            Hud_Mins:				; XREF: Hud_ChkTime
000239D4 45F9 0002 39D0             		lea	(Hud_1).l,a2
000239DA 7C00                       		moveq	#0,d6
000239DC 6000                       		bra.s	loc_1C9BA
000239DE                            ; End of function Hud_Mins
000239DE                            
000239DE                            
000239DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000239DE                            
000239DE                            
000239DE                            Hud_Secs:				; XREF: Hud_ChkTime
000239DE 45F9 0002 39CC             		lea	(Hud_10).l,a2
000239E4 7C01                       		moveq	#1,d6
000239E6                            
000239E6                            loc_1C9BA:
000239E6 7800                       		moveq	#0,d4
000239E8 43FA 0000                  		lea	Art_Hud(pc),a1	; load uncompressed HUD art
000239EC                            
000239EC                            Hud_TimeLoop:
000239EC 7400                       		moveq	#0,d2
000239EE 261A                       		move.l	(a2)+,d3
000239F0                            
000239F0                            @FindDigit:
000239F0 9283                       		sub.l	d3,d1
000239F2 6500                       		bcs.s	HUD_TimeWrite
000239F4 5242                       		addq.w	#1,d2		; add 1 to digit
000239F6 60F8                       		bra.s	@FindDigit
000239F8                            ; ===========================================================================
000239F8                            
000239F8                            HUD_TimeWrite:
000239F8 D283                       		add.l	d3,d1
000239FA 4A42                       		tst.w	d2		; is digit zero?
000239FC 6700                       		beq.s	@WriteTile	; if yes, branch
000239FE 383C 0001                  		move.w	#1,d4
00023A02                            
00023A02                            @WriteTile:
00023A02 ED4A                       		lsl.w	#6,d2
00023A04 2D40 0004                  		move.l	d0,4(a6)
00023A08 47F1 2000                  		lea	(a1,d2.w),a3	; get tile to load
00023A0C 2C9B                       		move.l	(a3)+,(a6)
00023A0E 2C9B                       		move.l	(a3)+,(a6)
00023A10 2C9B                       		move.l	(a3)+,(a6)
00023A12 2C9B                       		move.l	(a3)+,(a6)
00023A14 2C9B                       		move.l	(a3)+,(a6)
00023A16 2C9B                       		move.l	(a3)+,(a6)
00023A18 2C9B                       		move.l	(a3)+,(a6)
00023A1A 2C9B                       		move.l	(a3)+,(a6)
00023A1C 2C9B                       		move.l	(a3)+,(a6)
00023A1E 2C9B                       		move.l	(a3)+,(a6)
00023A20 2C9B                       		move.l	(a3)+,(a6)
00023A22 2C9B                       		move.l	(a3)+,(a6)
00023A24 2C9B                       		move.l	(a3)+,(a6)
00023A26 2C9B                       		move.l	(a3)+,(a6)
00023A28 2C9B                       		move.l	(a3)+,(a6)
00023A2A 2C9B                       		move.l	(a3)+,(a6)
00023A2C 0680 0040 0000             		addi.l	#$400000,d0
00023A32 51CE FFB8                  		dbf	d6,Hud_TimeLoop
00023A36                            
00023A36 4E75                       		rts	
00023A38                            ; End of function Hud_Secs
00023A38                            
00023A38                            ; ---------------------------------------------------------------------------
00023A38                            ; Subroutine to	load time/ring bonus numbers patterns
00023A38                            ; ---------------------------------------------------------------------------
00023A38                            
00023A38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00023A38                            
00023A38                            
00023A38                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
00023A38 45F9 0002 39C4             		lea	(Hud_1000).l,a2
00023A3E 7C03                       		moveq	#3,d6
00023A40 7800                       		moveq	#0,d4
00023A42 43FA 0000                  		lea	Art_Hud(pc),a1
00023A46                            
00023A46                            Hud_BonusLoop:
00023A46 7400                       		moveq	#0,d2
00023A48 261A                       		move.l	(a2)+,d3
00023A4A                            
00023A4A                            @FindDigit:
00023A4A 9283                       		sub.l	d3,d1
00023A4C 6500                       		bcs.s	Hud_BonusWrite
00023A4E 5242                       		addq.w	#1,d2		; add 1 to digit
00023A50 60F8                       		bra.s	@FindDigit
00023A52                            ; ===========================================================================
00023A52                            
00023A52                            Hud_BonusWrite:
00023A52 D283                       		add.l	d3,d1
00023A54 4A42                       		tst.w	d2		; is digit zero?
00023A56 6700                       		beq.s	@WriteTile	; if yes, branch
00023A58 383C 0001                  		move.w	#1,d4
00023A5C                            
00023A5C                            @WriteTile:
00023A5C 4A44                       		tst.w	d4
00023A5E 6700                       		beq.s	Hud_ClrBonus
00023A60 ED4A                       		lsl.w	#6,d2
00023A62 47F1 2000                  		lea	(a1,d2.w),a3	; get tile to load
00023A66 2C9B                       		move.l	(a3)+,(a6)
00023A68 2C9B                       		move.l	(a3)+,(a6)
00023A6A 2C9B                       		move.l	(a3)+,(a6)
00023A6C 2C9B                       		move.l	(a3)+,(a6)
00023A6E 2C9B                       		move.l	(a3)+,(a6)
00023A70 2C9B                       		move.l	(a3)+,(a6)
00023A72 2C9B                       		move.l	(a3)+,(a6)
00023A74 2C9B                       		move.l	(a3)+,(a6)
00023A76 2C9B                       		move.l	(a3)+,(a6)
00023A78 2C9B                       		move.l	(a3)+,(a6)
00023A7A 2C9B                       		move.l	(a3)+,(a6)
00023A7C 2C9B                       		move.l	(a3)+,(a6)
00023A7E 2C9B                       		move.l	(a3)+,(a6)
00023A80 2C9B                       		move.l	(a3)+,(a6)
00023A82 2C9B                       		move.l	(a3)+,(a6)
00023A84 2C9B                       		move.l	(a3)+,(a6)
00023A86                            
00023A86                            Hud_BonusNext:
00023A86 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
00023A8A                            
00023A8A 4E75                       		rts	
00023A8C                            ; ===========================================================================
00023A8C                            
00023A8C                            Hud_ClrBonus:
00023A8C 7A0F                       		moveq	#$F,d5
00023A8E                            
00023A8E                            @WriteTile:
00023A8E 2CBC 0000 0000             		move.l	#0,(a6)		; fill VRAM with #0
00023A94 51CD FFF8                  		dbf	d5,@WriteTile	; repeat $F more times
00023A98                            
00023A98 60EC                       		bra.s	Hud_BonusNext
00023A9A                            ; End of function Hud_TimeRingBonus
00023A9A                            
00023A9A                            ; ---------------------------------------------------------------------------
00023A9A                            ; Subroutine to	load uncompressed lives	counter	patterns
00023A9A                            ; ---------------------------------------------------------------------------
00023A9A                            
00023A9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00023A9A                            
00023A9A                            
00023A9A                            Hud_Lives:				; XREF: Hud_ChkLives
00023AA0 7200                       		moveq	#0,d1
00023AA2 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
00023AA6 45F9 0002 39CC             		lea	(Hud_10).l,a2
00023AAC 7C01                       		moveq	#1,d6
00023AAE 7800                       		moveq	#0,d4
00023AB0 43FA 0000                  		lea	Art_LivesNums(pc),a1
00023AB4                            
00023AB4                            Hud_LivesLoop:
00023AB4 2D40 0004                  		move.l	d0,4(a6)
00023AB8 7400                       		moveq	#0,d2
00023ABA 261A                       		move.l	(a2)+,d3
00023ABC                            
00023ABC                            @FindDigit:
00023ABC 9283                       		sub.l	d3,d1
00023ABE 6500                       		bcs.s	Hud_LivesWrite
00023AC0 5242                       		addq.w	#1,d2		; add 1 to digit
00023AC2 60F8                       		bra.s	@FindDigit
00023AC4                            ; ===========================================================================
00023AC4                            
00023AC4                            Hud_LivesWrite:
00023AC4 D283                       		add.l	d3,d1
00023AC6 4A42                       		tst.w	d2		; is digit zero?
00023AC8 6700                       		beq.s	loc_1CAA2	; if yes, branch
00023ACA 383C 0001                  		move.w	#1,d4
00023ACE                            
00023ACE                            loc_1CAA2:
00023ACE 4A44                       		tst.w	d4
00023AD0 6700                       		beq.s	Hud_ClrLives
00023AD2                            
00023AD2                            loc_1CAA6:
00023AD2 EB4A                       		lsl.w	#5,d2
00023AD4 47F1 2000                  		lea	(a1,d2.w),a3
00023AD8 2C9B                       		move.l	(a3)+,(a6)
00023ADA 2C9B                       		move.l	(a3)+,(a6)
00023ADC 2C9B                       		move.l	(a3)+,(a6)
00023ADE 2C9B                       		move.l	(a3)+,(a6)
00023AE0 2C9B                       		move.l	(a3)+,(a6)
00023AE2 2C9B                       		move.l	(a3)+,(a6)
00023AE4 2C9B                       		move.l	(a3)+,(a6)
00023AE6 2C9B                       		move.l	(a3)+,(a6)
00023AE8                            
00023AE8                            Hud_LivesNext:
00023AE8 0680 0040 0000             		addi.l	#$400000,d0
00023AEE 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
00023AF2                            
00023AF2 4E75                       		rts	
00023AF4                            ; ===========================================================================
00023AF4                            
00023AF4                            Hud_ClrLives:
00023AF4 4A46                       		tst.w	d6
00023AF6 67DA                       		beq.s	loc_1CAA6
00023AF8 7A07                       		moveq	#7,d5
00023AFA                            
00023AFA                            @WriteTile:
00023AFA 2CBC 0000 0000             		move.l	#0,(a6)		; fill VRAM with #0
00023B00 51CD FFF8                  		dbf	d5,@WriteTile	; repeat 7 more times
00023B04                            
00023B04 60E2                       		bra.s	Hud_LivesNext
00023B06                            ; End of function Hud_Lives
00023B06                            
00023B06                            ; ===========================================================================
00023B06                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD (Sonic's)
00023E06                            		even
00023E06                            Art_Hudm:	incbin	artunc\HUDm.bin		; 8x16 pixel numbers on HUD (Mighty's)
00024106                            		even
00024106                            Art_Hudmet:	incbin	artunc\HUDmet.bin
00024406                            		even
00024406                            Art_Hudtik:	incbin	artunc\HUDtik.bin	
00024706                            		even
00024706                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
00024846                            		even
00024846                            ; ===========================================================================
00024846                            ; ---------------------------------------------------------------------------
00024846                            ; When debug mode is currently in use
00024846                            ; ---------------------------------------------------------------------------
00024846                            
00024846                            DebugMode:				; XREF: Obj01; Obj09
00024846 7000                       		moveq	#0,d0
00024848 1038 FE08                  		move.b	($FFFFFE08).w,d0
0002484C 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
00024850 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
00024854                            ; ===========================================================================
00024854 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
00024856 0000                       		dc.w Debug_Skip-Debug_Index
00024858                            ; ===========================================================================
00024858                            
00024858                            Debug_Main:				; XREF: Debug_Index
00024858 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0002485C 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
00024862 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
00024868 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0002486E 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00024874 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0002487A 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00024880 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00024886 117C 0000 001A             		move.b	#0,$1A(a0)
0002488C 117C 0000 001C             		move.b	#0,$1C(a0)
00024892                            
00024892 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w	; is	game mode = $10	(special stage)?
00024898 6600                       		bne.s	Debug_Zone		; if not, branch
0002489A 31FC 0000 F782             		move.w	#0,($FFFFF782).w	; stop	special	stage rotating
000248A0 31FC 0000 F780             		move.w	#0,($FFFFF780).w	; make	special	stage "upright"
000248A6 7006                       		moveq	#6,d0			; use 6th debug	item list
000248A8 6000                       		bra.s	Debug_UseList
000248AA                            ; ===========================================================================
000248AA                            
000248AA                            Debug_Zone:
000248AA 7000                       		moveq	#0,d0
000248AC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000248B0                            
000248B0                            Debug_UseList:
000248B0 45F9 0000 0000             		lea	(DebugList).l,a2
000248B6 D040                       		add.w	d0,d0
000248B8 D4F2 0000                  		adda.w	(a2,d0.w),a2
000248BC 3C1A                       		move.w	(a2)+,d6
000248BE BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
000248C2 6200                       		bhi.s	loc_1CF9E
000248C4 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
000248CA                            
000248CA                            loc_1CF9E:
000248CA 6100 0000                  		bsr.w	Debug_ShowItem
000248CE 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
000248D4 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
000248DA                            
000248DA                            Debug_Skip:				; XREF: Debug_Index
000248DA 7006                       		moveq	#6,d0
000248DC 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000248E2 6700                       		beq.s	loc_1CFBE
000248E4 7000                       		moveq	#0,d0
000248E6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000248EA                            
000248EA                            loc_1CFBE:
000248EA 45F9 0000 0000             		lea	(DebugList).l,a2
000248F0 D040                       		add.w	d0,d0
000248F2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000248F6 3C1A                       		move.w	(a2)+,d6
000248F8 6100 0000                  		bsr.w	Debug_Control
000248FC 4EF9 0001 045A             		jmp	DisplaySprite
00024902                            
00024902                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00024902                            
00024902                            
00024902                            Debug_Control:
00024902 7800                       		moveq	#0,d4
00024904 323C 0001                  		move.w	#1,d1
00024908 1838 F605                  		move.b	(Joypad|Press).w,d4
0002490C 0244 000F                  		andi.w	#Up+Down+Left+Right,d4	; is up/down/left/right	pressed?
00024910 6600                       		bne.s	loc_1D018		; if yes, branch
00024912 1038 F604                  		move.b	(Joypad|Held),d0
00024916 0240 000F                  		andi.w	#Up+Down+Left+Right,d0	; is up/down/left/right	held?
0002491A 6600                       		bne.s	loc_1D000		; if yes, branch
0002491C 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
00024922 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
00024928 6000 0000                  		bra.w	Debug_BackItem
0002492C                            ; ===========================================================================
0002492C                            
0002492C                            loc_1D000:
0002492C 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
00024930 6600                       		bne.s	loc_1D01C
00024932 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
00024938 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0002493C 6600                       		bne.s	loc_1D018
0002493E 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
00024944                            
00024944                            loc_1D018:
00024944 1838 F604                  		move.b	(Joypad|Held),d4
00024948                            
00024948                            loc_1D01C:
00024948 7200                       		moveq	#0,d1
0002494A 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0002494E 5241                       		addq.w	#1,d1
00024950 4841                       		swap	d1
00024952 E881                       		asr.l	#4,d1
00024954 2428 000C                  		move.l	$C(a0),d2
00024958 2628 0008                  		move.l	8(a0),d3
0002495C 0804 0000                  		btst	#iUp,d4		; is up	being pressed?
00024960 6700                       		beq.s	loc_1D03C	; if not, branch
00024962 9481                       		sub.l	d1,d2
00024964 6400                       		bcc.s	loc_1D03C
00024966 7400                       		moveq	#0,d2
00024968                            
00024968                            loc_1D03C:
00024968 0804 0001                  		btst	#iDown,d4	; is down being	pressed?
0002496C 6700                       		beq.s	loc_1D052	; if not, branch
0002496E D481                       		add.l	d1,d2
00024970 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
00024976 6500                       		bcs.s	loc_1D052
00024978 243C 07FF 0000             		move.l	#$7FF0000,d2
0002497E                            
0002497E                            loc_1D052:
0002497E 0804 0002                  		btst	#iLeft,d4	; is Left being pressed?
00024982 6700                       		beq.s	loc_1D05E	; if not, branch
00024984 9681                       		sub.l	d1,d3
00024986 6400                       		bcc.s	loc_1D05E
00024988 7600                       		moveq	#0,d3
0002498A                            
0002498A                            loc_1D05E:
0002498A 0804 0003                  		btst	#iRight,d4	; is Right being pressed?
0002498E 6700                       		beq.s	loc_1D066	; if not, branch
00024990 D681                       		add.l	d1,d3
00024992                            
00024992                            loc_1D066:
00024992 2142 000C                  		move.l	d2,$C(a0)
00024996 2143 0008                  		move.l	d3,8(a0)
0002499A                            
0002499A                            Debug_BackItem:
0002499A 0838 0006 F604             		btst	#iA,(Joypad|Held)	; is button A pressed?
000249A0 6700                       		beq.s	Debug_MakeItem		; if not, branch
000249A2 0838 0004 F605             		btst	#iC,(Joypad|Press)	; is button C pressed?
000249A8 6700                       		beq.s	Debug_NextItem		; if not, branch
000249AA 5338 FE06                  		subq.b	#1,($FFFFFE06).w 	; go back 1 item
000249AE 6400                       		bcc.s	Debug_NoLoop
000249B0 DD38 FE06                  		add.b	d6,($FFFFFE06).w
000249B4 6000                       		bra.s	Debug_NoLoop
000249B6                            ; ===========================================================================
000249B6                            
000249B6                            Debug_NextItem:
000249B6 0838 0006 F605             		btst	#iA,(Joypad|Press)	; is button A pressed?
000249BC 6700                       		beq.s	Debug_MakeItem		; if not, branch
000249BE 5238 FE06                  		addq.b	#1,($FFFFFE06).w 	; go forwards 1 item
000249C2 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
000249C6 6200                       		bhi.s	Debug_NoLoop
000249C8 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w	; loop back to first item
000249CE                            
000249CE                            Debug_NoLoop:
000249CE 6000 0000                  		bra.w	Debug_ShowItem
000249D2                            ; ===========================================================================
000249D2                            
000249D2                            Debug_MakeItem:
000249D2 0838 0005 F605             		btst	#iB,(Joypad|Press)	; is button B pressed?
000249D8 6700                       		beq.s	Debug_Exit		; if not, branch
000249DA 4EB9 0001 08E0             		jsr	SingleObjLoad
000249E0 6600                       		bne.s	Debug_Exit
000249E2 3368 0008 0008             		move.w	8(a0),8(a1)
000249E8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000249EE 12A8 0004                  		move.b	4(a0),0(a1)		; create object
000249F2 1368 0001 0001             		move.b	1(a0),1(a1)
000249F8 1368 0001 0022             		move.b	1(a0),$22(a1)
000249FE 0229 007F 0022             		andi.b	#$7F,$22(a1)
00024A04 7000                       		moveq	#0,d0
00024A06 1038 FE06                  		move.b	($FFFFFE06).w,d0
00024A0A E748                       		lsl.w	#3,d0
00024A0C 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
00024A12 4E75                       		rts	
00024A14                            ; ===========================================================================
00024A14                            
00024A14                            Debug_Exit:
00024A14 0838 0004 F605             		btst	#iC,(Joypad|Press)	; is button C pressed?
00024A1A 6700                       		beq.s	Debug_DoNothing		; if not, branch
00024A1C 7000                       		moveq	#0,d0
00024A1E 31C0 FE08                  		move.w	d0,($FFFFFE08).w	; deactivate debug mode
00024A22 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
00024A2A 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
00024A30 11C0 D01C                  		move.b	d0,($FFFFD01C).w
00024A34 3140 000A                  		move.w	d0,$A(a0)
00024A38 3140 000E                  		move.w	d0,$E(a0)
00024A3C 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
00024A42 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
00024A48                            
00024A48 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w	; are you in the special stage?
00024A4E 6600                       		bne.s	Debug_DoNothing		; if not, branch
00024A50 4278 F780                  		clr.w	($FFFFF780).w
00024A54 31FC 0040 F782             		move.w	#$40,($FFFFF782).w	; set new level rotation speed
00024A5A 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
00024A62 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
00024A68 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
00024A6E 08F8 0002 D022             		bset	#2,($FFFFD022).w
00024A74 08F8 0001 D022             		bset	#1,($FFFFD022).w
00024A7A                            
00024A7A                            Debug_DoNothing:
00024A7A 4E75                       		rts	
00024A7C                            ; End of function Debug_Control
00024A7C                            
00024A7C                            
00024A7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00024A7C                            
00024A7C                            
00024A7C                            Debug_ShowItem:				; XREF: Debug_Main
00024A7C 7000                       		moveq	#0,d0
00024A7E 1038 FE06                  		move.b	($FFFFFE06).w,d0
00024A82 E748                       		lsl.w	#3,d0
00024A84 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
00024A8A 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
00024A90 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
00024A96 4E75                       		rts	
00024A98                            ; End of function Debug_ShowItem
00024A98                            
00024A98                            ; ===========================================================================
00024A98                            ; ---------------------------------------------------------------------------
00024A98                            ; Debug	list pointers
00024A98                            ; ---------------------------------------------------------------------------
00024A98                            DebugList:
00024A98                            	include "_inc\Debug list pointers.asm"
00024A98                            ; ---------------------------------------------------------------------------
00024A98                            ; Debug	list pointers
00024A98                            ; ---------------------------------------------------------------------------
00024A98 0000                       	dc.w Debug_GHZ-DebugList
00024A9A 0000                       	dc.w Debug_LZ-DebugList
00024A9C 0000                       	dc.w Debug_MZ-DebugList
00024A9E 0000                       	dc.w Debug_SLZ-DebugList
00024AA0 0000                       	dc.w Debug_SYZ-DebugList
00024AA2 0000                       	dc.w Debug_SBZ-DebugList
00024AA4 0000                       	dc.w Debug_Ending-DebugList
00024AA4 0000                       	dc.w Debug_Ending-DebugList
00024AA6                            
00024AA6                            ; ---------------------------------------------------------------------------
00024AA6                            ; Debug	list - Green Hill
00024AA6                            ; ---------------------------------------------------------------------------
00024AA6                            Debug_GHZ:
00024AA6                            	include "_inc\Debug list - GHZ.asm"
00024AA6                            ; ---------------------------------------------------------------------------
00024AA6                            ; Debug	list - Green Hill
00024AA6                            ; ---------------------------------------------------------------------------
00024AA6 0010                       	dc.w $10			; number of items in list
00024AA8 2500 CBDC                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
00024AAC 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
00024AB0 2600 D27A                  	dc.l Map_obj26+$26000000
00024AB4 0000 0680                  	dc.b 0,	0, 6, $80
00024AB8 1F00 C372                  	dc.l Map_obj1F+$1F000000
00024ABC 0000 0400                  	dc.b 0,	0, 4, 0
00024AC0 2200 C676                  	dc.l Map_obj22+$22000000
00024AC4 0000 0444                  	dc.b 0,	0, 4, $44
00024AC8 2B00 D998                  	dc.l Map_obj2B+$2B000000
00024ACC 0000 047B                  	dc.b 0,	0, 4, $7B
00024AD0 3600 FE22                  	dc.l Map_obj36+$36000000
00024AD4 0000 051B                  	dc.b 0,	0, 5, $1B
00024AD8 1800 AC3A                  	dc.l Map_obj18+$18000000
00024ADC 0000 4000                  	dc.b 0,	0, $40,	0
00024AE0 3B00 FF48                  	dc.l Map_obj3B+$3B000000
00024AE4 0000 63D0                  	dc.b 0,	0, $63,	$D0
00024AE8 4001 282A                  	dc.l Map_obj40+$40000000
00024AEC 0000 04F0                  	dc.b 0,	0, 4, $F0
00024AF0 4101 0B8A                  	dc.l Map_obj41+$41000000
00024AF4 0000 0523                  	dc.b 0,	0, 5, $23
00024AF8 4201 0DB0                  	dc.l Map_obj42+$42000000
00024AFC 0000 249B                  	dc.b 0,	0, $24,	$9B
00024B00 4401 10BE                  	dc.l Map_obj44+$44000000
00024B04 0000 434C                  	dc.b 0,	0, $43,	$4C
00024B08 1900 ACA8                  	dc.l Map_obj48+$19000000
00024B0C 0000 43AA                  	dc.b 0,	0, $43,	$AA
00024B10 7901 A770                  	dc.l Map_obj79+$79000000
00024B14 0100 07A0                  	dc.b 1,	0, 7, $A0
00024B18 4B00 CC1C                  	dc.l Map_obj4B+$4B000000
00024B1C 0000 2400                  	dc.b 0,	0, $24,	0
00024B20 7D01 A8C0                  	dc.l Map_obj7D+$7D000000
00024B24 0101 84B6                  	dc.b 1,	1, $84,	$B6
00024B28                            	even
00024B28                            	even
00024B28                            
00024B28                            ; ---------------------------------------------------------------------------
00024B28                            ; Debug	list - Labyrinth
00024B28                            ; ---------------------------------------------------------------------------
00024B28                            Debug_LZ:
00024B28                            	include "_inc\Debug list - LZ.asm"
00024B28                            ; ---------------------------------------------------------------------------
00024B28                            ; Debug	list - Labyrinth
00024B28                            ; ---------------------------------------------------------------------------
00024B28 0019                       	dc.w $19
00024B2A 2500 CBDC                  	dc.l Map_obj25+$25000000
00024B2E 0000 27B2                  	dc.b 0,	0, $27,	$B2
00024B32 2600 D27A                  	dc.l Map_obj26+$26000000
00024B36 0000 0680                  	dc.b 0,	0, 6, $80
00024B3A 4101 0B8A                  	dc.l Map_obj41+$41000000
00024B3E 0000 0523                  	dc.b 0,	0, 5, $23
00024B42 2C00 DAEC                  	dc.l Map_obj2C+$2C000000
00024B46 0800 2486                  	dc.b 8,	0, $24,	$86
00024B4A 2D00 DC3A                  	dc.l Map_obj2D+$2D000000
00024B4E 0002 84A6                  	dc.b 0,	2, $84,	$A6
00024B52 1601 50C8                  	dc.l Map_obj16+$16000000
00024B56 0000 03CC                  	dc.b 0,	0, 3, $CC
00024B5A 1601 50C8                  	dc.l Map_obj16+$16000000
00024B5E 0203 03CC                  	dc.b 2,	3, 3, $CC
00024B62 3300 F0D6                  	dc.l Map_obj33+$33000000
00024B66 0000 43DE                  	dc.b 0,	0, $43,	$DE
00024B6A 3200 EC96                  	dc.l Map_obj32+$32000000
00024B6E 0000 0513                  	dc.b 0,	0, 5, $13
00024B72 3600 FE22                  	dc.l Map_obj36+$36000000
00024B76 0000 051B                  	dc.b 0,	0, 5, $1B
00024B7A 5201 3124                  	dc.l Map_obj52a+$52000000
00024B7E 0400 43BC                  	dc.b 4,	0, $43,	$BC
00024B82 6101 52F0                  	dc.l Map_obj61+$61000000
00024B86 0100 43E6                  	dc.b 1,	0, $43,	$E6
00024B8A 6101 52F0                  	dc.l Map_obj61+$61000000
00024B8E 1301 43E6                  	dc.b $13, 1, $43, $E6
00024B92 6101 52F0                  	dc.l Map_obj61+$61000000
00024B96 0500 43E6                  	dc.b 5,	0, $43,	$E6
00024B9A 6201 5454                  	dc.l Map_obj62+$62000000
00024B9E 0000 443E                  	dc.b 0,	0, $44,	$3E
00024BA2 6101 52F0                  	dc.l Map_obj61+$61000000
00024BA6 2702 43E6                  	dc.b $27, 2, $43, $E6
00024BAA 6101 52F0                  	dc.l Map_obj61+$61000000
00024BAE 3003 43E6                  	dc.b $30, 3, $43, $E6
00024BB2 6301 57B6                  	dc.l Map_obj63+$63000000
00024BB6 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
00024BBA 6001 5012                  	dc.l Map_obj60+$60000000
00024BBE 0000 0467                  	dc.b 0,	0, 4, $67
00024BC2 6401 5B06                  	dc.l Map_obj64+$64000000
00024BC6 8413 8348                  	dc.b $84, $13, $83, $48
00024BCA 6501 D372                  	dc.l Map_obj65+$65000000
00024BCE 0202 C259                  	dc.b 2,	2, $C2,	$59
00024BD2 6501 D372                  	dc.l Map_obj65+$65000000
00024BD6 0909 C259                  	dc.b 9,	9, $C2,	$59
00024BDA 0B01 4452                  	dc.l Map_obj0B+$B000000
00024BDE 0000 43DE                  	dc.b 0,	0, $43,	$DE
00024BE2 0C01 4522                  	dc.l Map_obj0C+$C000000
00024BE6 0200 4328                  	dc.b 2,	0, $43,	$28
00024BEA 7901 A770                  	dc.l Map_obj79+$79000000
00024BEE 0100 07A0                  	dc.b 1,	0, 7, $A0
00024BF2                            	even
00024BF2                            	even
00024BF2                            
00024BF2                            ; ---------------------------------------------------------------------------
00024BF2                            ; Debug	list - Marble
00024BF2                            ; ---------------------------------------------------------------------------
00024BF2                            Debug_MZ:
00024BF2                            	include "_inc\Debug list - MZ.asm"
00024BF2                            ; ---------------------------------------------------------------------------
00024BF2                            ; Debug	list - Marble
00024BF2                            ; ---------------------------------------------------------------------------
00024BF2 0012                       	dc.w $12
00024BF4 2500 CBDC                  	dc.l Map_obj25+$25000000
00024BF8 0000 27B2                  	dc.b 0,	0, $27,	$B2
00024BFC 2600 D27A                  	dc.l Map_obj26+$26000000
00024C00 0000 0680                  	dc.b 0,	0, 6, $80
00024C04 2200 C676                  	dc.l Map_obj22+$22000000
00024C08 0000 0444                  	dc.b 0,	0, 4, $44
00024C0C 3600 FE22                  	dc.l Map_obj36+$36000000
00024C10 0000 051B                  	dc.b 0,	0, 5, $1B
00024C14 4101 0B8A                  	dc.l Map_obj41+$41000000
00024C18 0000 0523                  	dc.b 0,	0, 5, $23
00024C1C 1300 E166                  	dc.l Map_obj14+$13000000
00024C20 0000 0345                  	dc.b 0,	0, 3, $45
00024C24 4601 177E                  	dc.l Map_obj46+$46000000
00024C28 0000 4000                  	dc.b 0,	0, $40,	0
00024C2C 4C01 22EE                  	dc.l Map_obj4C+$4C000000
00024C30 0000 63A8                  	dc.b 0,	0, $63,	$A8
00024C34 4E01 25D2                  	dc.l Map_obj4E+$4E000000
00024C38 0000 63A8                  	dc.b 0,	0, $63,	$A8
00024C3C 3300 F0D6                  	dc.l Map_obj33+$33000000
00024C40 0000 42B8                  	dc.b 0,	0, $42,	$B8
00024C44 5001 29CC                  	dc.l Map_obj50+$50000000
00024C48 0000 247B                  	dc.b 0,	0, $24,	$7B
00024C4C 5101 2E58                  	dc.l Map_obj51+$51000000
00024C50 0000 42B8                  	dc.b 0,	0, $42,	$B8
00024C54 5201 30CE                  	dc.l Map_obj52+$52000000
00024C58 0000 02B8                  	dc.b 0,	0, 2, $B8
00024C5C 5300 B240                  	dc.l Map_obj53+$53000000
00024C60 0000 62B8                  	dc.b 0,	0, $62,	$B8
00024C64 5401 22B4                  	dc.l Map_obj54+$54000000
00024C68 0000 8680                  	dc.b 0,	0, $86,	$80
00024C6C 5501 3302                  	dc.l Map_obj55+$55000000
00024C70 0000 04B8                  	dc.b 0,	0, 4, $B8
00024C74 7801 A3EA                  	dc.l Map_obj78+$78000000
00024C78 0000 24FF                  	dc.b 0,	0, $24,	$FF
00024C7C 7901 A770                  	dc.l Map_obj79+$79000000
00024C80 0100 07A0                  	dc.b 1,	0, 7, $A0
00024C84                            	even
00024C84                            	even
00024C84                            
00024C84                            ; ---------------------------------------------------------------------------
00024C84                            ; Debug	list - Star Light
00024C84                            ; ---------------------------------------------------------------------------
00024C84                            Debug_SLZ:
00024C84                            	include "_inc\Debug list - SLZ.asm"
00024C84                            ; ---------------------------------------------------------------------------
00024C84                            ; Debug	list - Star Light
00024C84                            ; ---------------------------------------------------------------------------
00024C84 000F                       	dc.w $F
00024C86 2500 CBDC                  	dc.l Map_obj25+$25000000
00024C8A 0000 27B2                  	dc.b 0,	0, $27,	$B2
00024C8E 2600 D27A                  	dc.l Map_obj26+$26000000
00024C92 0000 0680                  	dc.b 0,	0, 6, $80
00024C96 5901 3E7A                  	dc.l Map_obj59+$59000000
00024C9A 0000 4000                  	dc.b 0,	0, $40,	0
00024C9E 5300 B240                  	dc.l Map_obj53+$53000000
00024CA2 0002 44E0                  	dc.b 0,	2, $44,	$E0
00024CA6 1800 AC98                  	dc.l Map_obj18b+$18000000
00024CAA 0000 4000                  	dc.b 0,	0, $40,	0
00024CAE 5A01 3FB4                  	dc.l Map_obj5A+$5A000000
00024CB2 0000 4000                  	dc.b 0,	0, $40,	0
00024CB6 5B01 416C                  	dc.l Map_obj5B+$5B000000
00024CBA 0000 4000                  	dc.b 0,	0, $40,	0
00024CBE 5D01 473C                  	dc.l Map_obj5D+$5D000000
00024CC2 0000 43A0                  	dc.b 0,	0, $43,	$A0
00024CC6 5E01 4ACE                  	dc.l Map_obj5E+$5E000000
00024CCA 0000 0374                  	dc.b 0,	0, 3, $74
00024CCE 4101 0B8A                  	dc.l Map_obj41+$41000000
00024CD2 0000 0523                  	dc.b 0,	0, 5, $23
00024CD6 1300 E166                  	dc.l Map_obj14+$13000000
00024CDA 0000 0480                  	dc.b 0,	0, 4, $80
00024CDE 1C00 B350                  	dc.l Map_obj1C+$1C000000
00024CE2 0000 44D8                  	dc.b 0,	0, $44,	$D8
00024CE6 5F01 4D4C                  	dc.l Map_obj5F+$5F000000
00024CEA 0000 0400                  	dc.b 0,	0, 4, 0
00024CEE 6001 5012                  	dc.l Map_obj60+$60000000
00024CF2 0000 2429                  	dc.b 0,	0, $24,	$29
00024CF6 7901 A770                  	dc.l Map_obj79+$79000000
00024CFA 0100 07A0                  	dc.b 1,	0, 7, $A0
00024CFE                            	even
00024CFE                            	even
00024CFE                            
00024CFE                            ; ---------------------------------------------------------------------------
00024CFE                            ; Debug	list - Spring Yard
00024CFE                            ; ---------------------------------------------------------------------------
00024CFE                            Debug_SYZ:
00024CFE                            	include "_inc\Debug list - SYZ.asm"
00024CFE                            ; ---------------------------------------------------------------------------
00024CFE                            ; Debug	list - Spring Yard
00024CFE                            ; ---------------------------------------------------------------------------
00024CFE 000F                       	dc.w $F
00024D00 2500 CBDC                  	dc.l Map_obj25+$25000000
00024D04 0000 27B2                  	dc.b 0,	0, $27,	$B2
00024D08 2600 D27A                  	dc.l Map_obj26+$26000000
00024D0C 0000 0680                  	dc.b 0,	0, 6, $80
00024D10 3600 FE22                  	dc.l Map_obj36+$36000000
00024D14 0000 051B                  	dc.b 0,	0, 5, $1B
00024D18 4101 0B8A                  	dc.l Map_obj41+$41000000
00024D1C 0000 0523                  	dc.b 0,	0, 5, $23
00024D20 4301 1010                  	dc.l Map_obj43+$43000000
00024D24 0000 04B8                  	dc.b 0,	0, 4, $B8
00024D28 1201 1884                  	dc.l Map_obj12+$12000000
00024D2C 0000 0000                  	dc.b 0,	0, 0, 0
00024D30 4701 1AEC                  	dc.l Map_obj47+$47000000
00024D34 0000 0380                  	dc.b 0,	0, 3, $80
00024D38 1F00 C372                  	dc.l Map_obj1F+$1F000000
00024D3C 0000 0400                  	dc.b 0,	0, 4, 0
00024D40 2200 C676                  	dc.l Map_obj22+$22000000
00024D44 0000 0444                  	dc.b 0,	0, 4, $44
00024D48 5001 29CC                  	dc.l Map_obj50+$50000000
00024D4C 0000 247B                  	dc.b 0,	0, $24,	$7B
00024D50 1800 AC86                  	dc.l Map_obj18a+$18000000
00024D54 0000 4000                  	dc.b 0,	0, $40,	0
00024D58 5601 383A                  	dc.l Map_obj56+$56000000
00024D5C 0000 4000                  	dc.b 0,	0, $40,	0
00024D60 3200 EC96                  	dc.l Map_obj32+$32000000
00024D64 0000 0513                  	dc.b 0,	0, 5, $13
00024D68 7801 A3EA                  	dc.l Map_obj78+$78000000
00024D6C 0000 24FF                  	dc.b 0,	0, $24,	$FF
00024D70 7901 A770                  	dc.l Map_obj79+$79000000
00024D74 0100 07A0                  	dc.b 1,	0, 7, $A0
00024D78                            	even
00024D78                            	even
00024D78                            
00024D78                            ; ---------------------------------------------------------------------------
00024D78                            ; Debug	list - Scrap Brain
00024D78                            ; ---------------------------------------------------------------------------
00024D78                            Debug_SBZ:
00024D78                            	include "_inc\Debug list - SBZ.asm"
00024D78                            ; ---------------------------------------------------------------------------
00024D78                            ; Debug	list - Scrap Brain
00024D78                            ; ---------------------------------------------------------------------------
00024D78 001D                       	dc.w $1D
00024D7A 2500 CBDC                  	dc.l Map_obj25+$25000000
00024D7E 0000 27B2                  	dc.b 0,	0, $27,	$B2
00024D82 2600 D27A                  	dc.l Map_obj26+$26000000
00024D86 0000 0680                  	dc.b 0,	0, 6, $80
00024D8A 5F01 4D4C                  	dc.l Map_obj5F+$5F000000
00024D8E 0000 0400                  	dc.b 0,	0, 4, 0
00024D92 6001 5012                  	dc.l Map_obj60+$60000000
00024D96 0000 0429                  	dc.b 0,	0, 4, $29
00024D9A 7801 A3EA                  	dc.l Map_obj78+$78000000
00024D9E 0000 22B0                  	dc.b 0,	0, $22,	$B0
00024DA2 1501 3BD6                  	dc.l Map_obj15b+$15000000
00024DA6 0702 4391                  	dc.b 7,	2, $43,	$91
00024DAA 6701 8D0E                  	dc.l Map_obj67+$67000000
00024DAE E000 C344                  	dc.b $E0, 0, $C3, $44
00024DB2 5201 30CE                  	dc.l Map_obj52+$52000000
00024DB6 2802 22C0                  	dc.b $28, 2, $22, $C0
00024DBA 3200 EC96                  	dc.l Map_obj32+$32000000
00024DBE 0000 0513                  	dc.b 0,	0, 5, $13
00024DC2 6901 8F68                  	dc.l Map_obj69+$69000000
00024DC6 0300 4492                  	dc.b 3,	0, $44,	$92
00024DCA 6901 8FC2                  	dc.l Map_obj69a+$69000000
00024DCE 8300 04DF                  	dc.b $83, 0, 4,	$DF
00024DD2 6A01 9220                  	dc.l Map_obj6A+$6A000000
00024DD6 0200 43B5                  	dc.b 2,	0, $43,	$B5
00024DDA 5300 B240                  	dc.l Map_obj53+$53000000
00024DDE 0000 43F5                  	dc.b 0,	0, $43,	$F5
00024DE2 5201 30CE                  	dc.l Map_obj52+$52000000
00024DE6 3903 4460                  	dc.b $39, 3, $44, $60
00024DEA 6B01 95F0                  	dc.l Map_obj6B+$6B000000
00024DEE 0000 22C0                  	dc.b 0,	0, $22,	$C0
00024DF2 2A00 B4E6                  	dc.l Map_obj2A+$2A000000
00024DF6 0000 42E8                  	dc.b 0,	0, $42,	$E8
00024DFA 6B01 95F0                  	dc.l Map_obj6B+$6B000000
00024DFE 1301 22C0                  	dc.b $13, 1, $22, $C0
00024E02 6A01 9220                  	dc.l Map_obj6A+$6A000000
00024E06 0100 43B5                  	dc.b 1,	0, $43,	$B5
00024E0A 6B01 95F0                  	dc.l Map_obj6B+$6B000000
00024E0E 2401 22C0                  	dc.b $24, 1, $22, $C0
00024E12 6A01 9220                  	dc.l Map_obj6A+$6A000000
00024E16 0402 43B5                  	dc.b 4,	2, $43,	$B5
00024E1A 6B01 95F0                  	dc.l Map_obj6B+$6B000000
00024E1E 3401 22C0                  	dc.b $34, 1, $22, $C0
00024E22 6C01 97B2                  	dc.l Map_obj6C+$6C000000
00024E26 0000 44C3                  	dc.b 0,	0, $44,	$C3
00024E2A 6D01 146E                  	dc.l Map_obj6D+$6D000000
00024E2E 6400 83D9                  	dc.b $64, 0, $83, $D9
00024E32 6D01 146E                  	dc.l Map_obj6D+$6D000000
00024E36 640B 83D9                  	dc.b $64, $B, $83, $D9
00024E3A 6E01 9868                  	dc.l Map_obj6E+$6E000000
00024E3E 0400 047E                  	dc.b 4,	0, 4, $7E
00024E42 7001 9CAE                  	dc.l Map_obj70+$70000000
00024E46 0000 42F0                  	dc.b 0,	0, $42,	$F0
00024E4A 7101 45E2                  	dc.l Map_obj71+$71000000
00024E4E 1100 8680                  	dc.b $11, 0, $86, $80
00024E52 1E00 B9D6                  	dc.l Map_obj1E+$1E000000
00024E56 0400 2302                  	dc.b 4,	0, $23,	2
00024E5A 7901 A770                  	dc.l Map_obj79+$79000000
00024E5E 0100 07A0                  	dc.b 1,	0, 7, $A0
00024E62                            	even
00024E62                            	even
00024E62                            
00024E62                            ; ---------------------------------------------------------------------------
00024E62                            ; Debug	list - ending sequence / special stage
00024E62                            ; ---------------------------------------------------------------------------
00024E62                            Debug_Ending:
00024E62                            	include "_inc\Debug list - Ending and SS.asm"
00024E62                            ; ---------------------------------------------------------------------------
00024E62                            ; Debug	list - ending sequence / special stage
00024E62                            ; ---------------------------------------------------------------------------
00024E62 000D                       	dc.w $D
00024E64 2500 CBDC                  	dc.l Map_obj25+$25000000
00024E68 0000 27B2                  	dc.b 0,	0, $27,	$B2
00024E6C 4701 1AEC                  	dc.l Map_obj47+$47000000
00024E70 0000 0380                  	dc.b 0,	0, 3, $80
00024E74 2800 C0DE                  	dc.l Map_obj28a+$28000000
00024E78 0A00 05A0                  	dc.b $A, 0, 5, $A0
00024E7C 2800 C0DE                  	dc.l Map_obj28a+$28000000
00024E80 0B00 05A0                  	dc.b $B, 0, 5, $A0
00024E84 2800 C0DE                  	dc.l Map_obj28a+$28000000
00024E88 0C00 05A0                  	dc.b $C, 0, 5, $A0
00024E8C 2800 C0C6                  	dc.l Map_obj28+$28000000
00024E90 0D00 0553                  	dc.b $D, 0, 5, $53
00024E94 2800 C0C6                  	dc.l Map_obj28+$28000000
00024E98 0E00 0553                  	dc.b $E, 0, 5, $53
00024E9C 2800 C0C6                  	dc.l Map_obj28+$28000000
00024EA0 0F00 0573                  	dc.b $F, 0, 5, $73
00024EA4 2800 C0C6                  	dc.l Map_obj28+$28000000
00024EA8 1000 0573                  	dc.b $10, 0, 5,	$73
00024EAC 2800 C0DE                  	dc.l Map_obj28a+$28000000
00024EB0 1100 0585                  	dc.b $11, 0, 5,	$85
00024EB4 2800 C0F6                  	dc.l Map_obj28b+$28000000
00024EB8 1200 0593                  	dc.b $12, 0, 5,	$93
00024EBC 2800 C0DE                  	dc.l Map_obj28a+$28000000
00024EC0 1300 0565                  	dc.b $13, 0, 5,	$65
00024EC4 2800 C0F6                  	dc.l Map_obj28b+$28000000
00024EC8 1400 05B3                  	dc.b $14, 0, 5,	$B3
00024ECC                            	even
00024ECC                            	even
00024ECC                            
00024ECC                            ; ---------------------------------------------------------------------------
00024ECC                            ; Main level load blocks
00024ECC                            ; ---------------------------------------------------------------------------
00024ECC                            MainLoadBlocks:
00024ECC                            	include "_inc\Main level load blocks.asm"
00024ECC                            ; ---------------------------------------------------------------------------
00024ECC                            ; Main level load blocks
00024ECC                            ;
00024ECC                            ; ===FORMAT===
00024ECC                            ; level	patterns + (1st	PLC num	* 10^6)
00024ECC                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
00024ECC                            ; 256x256 mappings
00024ECC                            ; blank, music (unused), pal index (unused), pal index
00024ECC                            ; ---------------------------------------------------------------------------
00024ECC 0000 0000                  	dc.l Nem_GHZ+$4000000  ;changed from Nem_GHZ_2nd
00024ED0 0000 0000                  	dc.l Blk16_GHZ+$5000000
00024ED4 0000 0000                  	dc.l Blk256_GHZ
00024ED8 0081 0404                  	dc.b 0,	$81, 4,	4
00024EDC 0000 0000                  	dc.l Nem_LZ+$6000000
00024EE0 0000 0000                  	dc.l Blk16_LZ+$7000000
00024EE4 0000 0000                  	dc.l Blk256_LZ
00024EE8 0082 0505                  	dc.b 0,	$82, 5,	5
00024EEC 0000 0000                  	dc.l Nem_MZ+$8000000
00024EF0 0000 0000                  	dc.l Blk16_MZ+$9000000
00024EF4 0000 0000                  	dc.l Blk256_MZ
00024EF8 0083 0606                  	dc.b 0,	$83, 6,	6
00024EFC 0000 0000                  	dc.l Nem_SLZ+$A000000
00024F00 0000 0000                  	dc.l Blk16_SLZ+$B000000
00024F04 0000 0000                  	dc.l Blk256_SLZ
00024F08 0084 0707                  	dc.b 0,	$84, 7,	7
00024F0C 0000 0000                  	dc.l Nem_SYZ+$C000000
00024F10 0000 0000                  	dc.l Blk16_SYZ+$D000000
00024F14 0000 0000                  	dc.l Blk256_SYZ
00024F18 0085 0808                  	dc.b 0,	$85, 8,	8
00024F1C 0000 0000                  	dc.l Nem_SBZ+$E000000
00024F20 0000 0000                  	dc.l Blk16_SBZ+$F000000
00024F24 0000 0000                  	dc.l Blk256_SBZ
00024F28 0086 0909                  	dc.b 0,	$86, 9,	9
00024F2C 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
00024F30 0000 0000                  	dc.l Blk16_GHZ
00024F34 0000 0000                  	dc.l Blk256_GHZ
00024F38 0086 1313                  	dc.b 0,	$86, $13, $13
00024F3C                            	even
00024F3C                            	even
00024F3C                            
00024F3C                            ; ---------------------------------------------------------------------------
00024F3C                            ; Pattern load cues
00024F3C                            ; ---------------------------------------------------------------------------
00024F3C                            ArtLoadCues:
00024F3C                            	include "_inc\Pattern load cues.asm"
00024F3C                            ; ---------------------------------------------------------------------------
00024F3C                            ; Pattern load cues - index
00024F3C                            ; ---------------------------------------------------------------------------
00024F3C 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues             ;0-1
00024F40 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues       ;2-3
00024F44 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues               ;4-5
00024F48 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues                 ;6-7
00024F4C 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues                 ;8-9
00024F50 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues               ;10-11
00024F54 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues               ;12-13
00024F58 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues               ;14-15               
00024F5C 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues         ;16-17
00024F60 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues          ;18-19
00024F64 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues    ;20-21
00024F68 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues    ;22-23
00024F6C 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues  ;24-25
00024F70 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues ;26-27
00024F74 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues        ;28-29
00024F78 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues      ;30-31
00024F7C 0000                               dc.w MightyPLC_Signpost-ArtLoadCues ;32
00024F7E 0000                               dc.w MetalPLC_Signpost-ArtLoadCues ;33
00024F80 0000                               dc.w TikalPLC_Signpost-ArtLoadCues ;34
00024F82 0000                               dc.w MightyPLC_HUD-ArtLoadCues ;35
00024F84 0000                               dc.w MetalPLC_HUD-ArtLoadCues ;36
00024F86 0000                               dc.w TikalPLC_HUD-ArtLoadCues ;37
00024F88 0000                               dc.w SonicPLC_HUD-ArtLoadCues
00024F8A 0000                               dc.w ShadowPLC_Signpost-ArtLoadCues ;39
00024F8C 0000                               dc.w EspioPLC_Signpost-ArtLoadCues ;40
00024F8E 0000                               dc.w PLC_EggroboBoss-ArtLoadCues ;41
00024F90 0000                               dc.w PLC_BallHog-ArtLoadCues ;42
00024F92 0000                               dc.w PLC_SilverSonicBoss-ArtLoadCues ;43
00024F94 0000                               dc.w PLC_WhispKingBoss-ArtLoadCues ;44
00024F96 0000                       	dc.w PLC_DinoKingBoss-ArtLoadCues ;45
00024F98 0000                       	dc.w PLC_BrutalNewtronBoss-ArtLoadCues ;46
00024F9A 0000                       	dc.w PLC_HellgirlBoss-ArtLoadCues ;47
00024F9C 0000                       	dc.w PLC_CrusherBoss-ArtLoadCues ;48
00024F9E 0000                       	dc.w PLC_TailsDollBoss-ArtLoadCues ;49
00024FA0                            ; ---------------------------------------------------------------------------
00024FA0                            ; Pattern load cues - standard block 1
00024FA0                            ; ---------------------------------------------------------------------------
00024FA0 0004                       PLC_Main:	dc.w 4
00024FA2 0000 0000                  		dc.l Nem_Lamp		; lamppost
00024FA6 D800                       		dc.w $D800
00024FA8 0000 0000                                  dc.l Nem_Hud		; HUD
00024FAC D940                       		dc.w $D940
00024FAE 0000 0000                  		dc.l Nem_Lives		; lives	counter
00024FB2 FA80                       		dc.w $FA80
00024FB4 0000 0000                  		dc.l Nem_Ring		; rings
00024FB8 F640                       		dc.w $F640
00024FBA 0000 0000                  		dc.l Nem_Points		; points from enemy
00024FBE F2E0                       		dc.w $F2E0
00024FC0                            ; ---------------------------------------------------------------------------
00024FC0                            ; Pattern load cues - HUD (Sonic's)
00024FC0                            ; ---------------------------------------------------------------------------
00024FC0                            SonicPLC_HUD:
00024FC0 0000 0000                                  dc.l Nem_Hud		; HUD
00024FC4 D940                       		dc.w $D940
00024FC6                            ; ---------------------------------------------------------------------------
00024FC6                            ; Pattern load cues - HUD (Mighty's)
00024FC6                            ; ---------------------------------------------------------------------------
00024FC6                            MightyPLC_HUD:
00024FC6 0000 0000                                  dc.l Nem_Hudm		; HUD
00024FCA D940                       		dc.w $D940
00024FCC                            ; ---------------------------------------------------------------------------
00024FCC                            ; Pattern load cues - HUD (Matal's)
00024FCC                            ; ---------------------------------------------------------------------------
00024FCC                            MetalPLC_HUD:
00024FCC 0000 0000                                  dc.l Nem_Hudmet		; HUD
00024FD0 D940                       		dc.w $D940
00024FD2                            ; ---------------------------------------------------------------------------
00024FD2                            ; Pattern load cues - HUD (Tikal's)
00024FD2                            ; ---------------------------------------------------------------------------
00024FD2                            TikalPLC_HUD:
00024FD2 0000 0000                                  dc.l Nem_Hudtik		; HUD
00024FD6 D940                       		dc.w $D940
00024FD8                            ; ---------------------------------------------------------------------------
00024FD8                            ; Pattern load cues - standard block 2
00024FD8                            ; ---------------------------------------------------------------------------
00024FD8 0002                       PLC_Main2:	dc.w 2
00024FDA 0000 0000                  		dc.l Nem_Monitors	; monitors
00024FDE D000                       		dc.w $D000
00024FE0 0000 0000                  		dc.l Nem_Shield		; shield
00024FE4 A820                       		dc.w $A820
00024FE6 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
00024FEA AB80                       		dc.w $AB80
00024FEC                            ; ---------------------------------------------------------------------------
00024FEC                            ; Pattern load cues - explosion
00024FEC                            ; ---------------------------------------------------------------------------
00024FEC 0000                       PLC_Explode:	dc.w 0
00024FEE 0000 0000                  		dc.l Nem_Explode	; explosion
00024FF2 B400                       		dc.w $B400
00024FF4                            ; ---------------------------------------------------------------------------
00024FF4                            ; Pattern load cues - game/time	over
00024FF4                            ; ---------------------------------------------------------------------------
00024FF4 0000                       PLC_GameOver:	dc.w 0
00024FF6 0000 0000                  		dc.l Nem_GameOver	; game/time over
00024FFA ABC0                       		dc.w $ABC0
00024FFC                            ; ---------------------------------------------------------------------------
00024FFC                            ; Pattern load cues - Green Hill
00024FFC                            ; ---------------------------------------------------------------------------
00024FFC 000A                       PLC_GHZ:	dc.w $A
00024FFE 0000 0000                  		dc.l Nem_GHZ		; GHZ main patterns
00025002 0000                       		dc.w 0
00025004 0000 0000                  		dc.l Nem_Stalk		; flower stalk
00025008 6B00                       		dc.w $6B00
0002500A 0000 0000                  		dc.l Nem_PplRock	; purple rock
0002500E 7A00                       		dc.w $7A00
00025010 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
00025014 8000                       		dc.w $8000
00025016 0000 0000                  		dc.l Nem_BuzzGHZ	; some alternative art of buzz bomber enemy
0002501A 8880                       		dc.w $8880
0002501C 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
00025020 8F60                       		dc.w $8F60
00025022 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
00025026 9360                       		dc.w $9360
00025028 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0002502C 9E00                       		dc.w $9E00
0002502E 0000 0000                  		dc.l Nem_Spikes		; spikes
00025032 A360                       		dc.w $A360
00025034 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
00025038 A460                       		dc.w $A460
0002503A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0002503E A660                       		dc.w $A660
00025040 0005                       PLC_GHZ2:	dc.w 5
00025042 0000 0000                  		dc.l Nem_Swing		; swinging platform
00025046 7000                       		dc.w $7000
00025048 0000 0000                  		dc.l Nem_Bridge		; bridge
0002504C 71C0                       		dc.w $71C0
0002504E 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
00025052 7300                       		dc.w $7300
00025054 0000 0000                  		dc.l Nem_Ball		; giant	ball
00025058 7540                       		dc.w $7540
0002505A 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0002505E A1E0                       		dc.w $A1E0
00025060 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
00025064 6980                       		dc.w $6980
00025066                            ; ---------------------------------------------------------------------------
00025066                            ; Pattern load cues - Labyrinth
00025066                            ; ---------------------------------------------------------------------------
00025066 000B                       PLC_LZ:		dc.w $B
00025068 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0002506C 0000                       		dc.w 0
0002506E 0000 0000                  		dc.l Nem_LzBlock1	; block
00025072 3C00                       		dc.w $3C00
00025074 0000 0000                  		dc.l Nem_LzBlock2	; blocks
00025078 3E00                       		dc.w $3E00
0002507A 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0002507E 4B20                       		dc.w $4B20
00025080 0000 0000                  		dc.l Nem_Water		; water	surface
00025084 6000                       		dc.w $6000
00025086 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0002508A 6200                       		dc.w $6200
0002508C 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
00025090 6500                       		dc.w $6500
00025092 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
00025096 6900                       		dc.w $6900
00025098 0000 0000                  		dc.l Nem_LzBlock3	; block
0002509C 7780                       		dc.w $7780
0002509E 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
000250A2 7880                       		dc.w $7880
000250A4 0000 0000                  		dc.l Nem_Harpoon	; harpoon
000250A8 7980                       		dc.w $7980
000250AA 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
000250AE 94C0                       		dc.w $94C0
000250B0 000C                       PLC_LZ2:	dc.w $C
000250B2 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
000250B6 7BC0                       		dc.w $7BC0
000250B8 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
000250BC 7CC0                       		dc.w $7CC0
000250BE 0000 0000                  		dc.l Nem_Ballhog
000250C2 7EC0                       		dc.w $7EC0
000250C4 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
000250C8 5D20                       		dc.w $5D20
000250CA 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
000250CE 8800                       		dc.w $8800
000250D0 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
000250D4 89E0                       		dc.w $89E0
000250D6 0000 0000                  		dc.l Nem_OrbinautLZ	; orbinaut enemy
000250DA 8CE0                       		dc.w $8CE0
000250DC 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
000250E0 90C0                       		dc.w $90C0
000250E2 0000 0000                  		dc.l Nem_LzSwitch	; switch
000250E6 A1E0                       		dc.w $A1E0
000250E8 0000 0000                  		dc.l Nem_Cork		; cork block
000250EC A000                       		dc.w $A000
000250EE 0000 0000                  		dc.l Nem_Spikes		; spikes
000250F2 A360                       		dc.w $A360
000250F4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
000250F8 A460                       		dc.w $A460
000250FA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
000250FE A660                       		dc.w $A660
00025100                            ; ---------------------------------------------------------------------------
00025100                            ; Pattern load cues - Marble
00025100                            ; ---------------------------------------------------------------------------
00025100 0009                       PLC_MZ:		dc.w 9
00025102 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
00025106 0000                       		dc.w 0
00025108 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0002510C 6000                       		dc.w $6000
0002510E 0000 0000                  		dc.l Nem_MzFire		; fireballs
00025112 68A0                       		dc.w $68A0
00025114 0000 0000                  		dc.l Nem_Swing		; swinging platform
00025118 7000                       		dc.w $7000
0002511A 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0002511E 71C0                       		dc.w $71C0
00025120 0000 0000                  		dc.l Nem_Lava		; lava
00025124 7500                       		dc.w $7500
00025126 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0002512A 8880                       		dc.w $8880
0002512C 0000 0000                  		dc.l Nem_Hellgirl		; yadrin enemy
00025130 8F60                       		dc.w $8F60
00025132 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
00025136 9700                       		dc.w $9700
00025138 0000 0000                  		dc.l Nem_CaterMZ	; caterkiller enemy
0002513C 9FE0                       		dc.w $9FE0
0002513E 0004                       PLC_MZ2:	dc.w 4
00025140 0000 0000                  		dc.l Nem_MzSwitch	; switch
00025144 A260                       		dc.w $A260
00025146 0000 0000                  		dc.l Nem_Spikes		; spikes
0002514A A360                       		dc.w $A360
0002514C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
00025150 A460                       		dc.w $A460
00025152 0000 0000                  		dc.l Nem_VSpring	; vertical spring
00025156 A660                       		dc.w $A660
00025158 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0002515C                            		;dc.l Nem_Balllove
0002515C 5700                       		dc.w $5700
0002515E                            ; ---------------------------------------------------------------------------
0002515E                            ; Pattern load cues - Star Light
0002515E                            ; ---------------------------------------------------------------------------
0002515E 0008                       PLC_SLZ:	dc.w 8
00025160 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
00025164 0000                       		dc.w 0
00025166 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0002516A 8000                       		dc.w $8000
0002516C                            		;dc.l Nem_OrbinautSLZ	; orbinaut enemy
0002516C 0000 0000                                  dc.l Nem_Springer
00025170 8520                       		dc.w $8520
00025172 0000 0000                  		dc.l Nem_SlzEnBalls		; fireballs
00025176 9000                       		dc.w $9000
00025178 0000 0000                  		dc.l Nem_SlzBlock	; block
0002517C 9C00                       		dc.w $9C00
0002517E 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
00025182 A260                       		dc.w $A260
00025184 0000 0000                  		dc.l Nem_Spikes		; spikes
00025188 A360                       		dc.w $A360
0002518A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002518E A460                       		dc.w $A460
00025190 0000 0000                  		dc.l Nem_VSpring	; vertical spring
00025194 A660                       		dc.w $A660
00025196 0005                       PLC_SLZ2:	dc.w 5
00025198                            		;dc.l Nem_Seesaw		; seesaw
00025198 0000 0000                                  dc.l Nem_Bumper
0002519C 6E80                       		dc.w $6E80
0002519E 0000 0000                  		dc.l Nem_Chopper		; fan
000251A2 7400                       		dc.w $7400
000251A4 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
000251A8 7980                       		dc.w $7980
000251AA 0000 0000                                  dc.l Nem_BallHog
000251AE 7B80                       		dc.w $7B80
000251B0 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
000251B4 9B00                       		dc.w $9B00
000251B6                            		;dc.l Nem_SlzSpike	; spikeball
000251B6 0000 0000                  		dc.l Nem_Hatofu
000251BA 9E00                       		dc.w $9E00
000251BC                            ; ---------------------------------------------------------------------------
000251BC                            ; Pattern load cues - Spring Yard
000251BC                            ; ---------------------------------------------------------------------------
000251BC 0004                       PLC_SYZ:	dc.w 4
000251BE 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
000251C2 0000                       		dc.w 0
000251C4 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
000251C8 8000                       		dc.w $8000
000251CA 0000 0000                  		dc.l Nem_BuzzSYZ	; buzz bomber enemy
000251CE 8880                       		dc.w $8880
000251D0 0000 0000                  		dc.l Nem_Rhinobot	; yadrin enemy
000251D4 8F60                       		dc.w $8F60
000251D6 0000 0000                                  dc.l Nem_Basaran
000251DA 9700                       		dc.w $9700
000251DC 0007                       PLC_SYZ2:	dc.w 7
000251DE 0000 0000                  		dc.l Nem_Bumper		; bumper
000251E2 7000                       		dc.w $7000
000251E4 0000 0000                  		dc.l Nem_Stump	; large	spikeball
000251E8 72C0                       		dc.w $72C0
000251EA 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
000251EE 7740                       		dc.w $7740
000251F0 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
000251F4 9FE0                       		dc.w $9FE0
000251F6 0000 0000                  		dc.l Nem_LzSwitch	; switch
000251FA A1E0                       		dc.w $A1E0
000251FC 0000 0000                  		dc.l Nem_Spikes		; spikes
00025200 A360                       		dc.w $A360
00025202 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
00025206 A460                       		dc.w $A460
00025208 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0002520C A660                       		dc.w $A660
0002520E                            ; ---------------------------------------------------------------------------
0002520E                            ; Pattern load cues - Scrap Brain
0002520E                            ; ---------------------------------------------------------------------------
0002520E 000B                       PLC_SBZ:	dc.w $B
00025210 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
00025214 0000                       		dc.w 0
00025216 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0002521A 5800                       		dc.w $5800
0002521C 0000 0000                  		dc.l Nem_SbzDoor1	; door
00025220 5D00                       		dc.w $5D00
00025222 0000 0000                  		dc.l Nem_Girder		; girder
00025226 5E00                       		dc.w $5E00
00025228 0000 0000                  		dc.l Nem_BallFire	; ball hog enemy
0002522C 6040                       		dc.w $6040
0002522E 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
00025232 6880                       		dc.w $6880
00025234 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
00025238 6900                       		dc.w $6900
0002523A 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0002523E 7220                       		dc.w $7220
00025240                            		;dc.l Nem_Cutter		; pizza	cutter
00025240 0000 0000                                  dc.l Nem_Megamak       ; chemicals
00025244 76A0                       		dc.w $76A0
00025246 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0002524A 7B20                       		dc.w $7B20
0002524C 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
00025250 7EA0                       		dc.w $7EA0
00025252 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
00025256 9860                       		dc.w $9860
00025258 000C                       PLC_SBZ2:	dc.w $C
0002525A 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0002525E 5600                       		dc.w $5600
00025260 0000 0000                  		dc.l Nem_Stump		; spiked wheel enemy
00025264 8000                       		dc.w $8000
00025266 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0002526A 8520                       		dc.w $8520
0002526C 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
00025270 8C00                       		dc.w $8C00
00025272 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
00025276 8DE0                       		dc.w $8DE0
00025278 0000 0000                  		dc.l Nem_Electric	; electric orb
0002527C 8FC0                       		dc.w $8FC0
0002527E 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
00025282 9240                       		dc.w $9240
00025284 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
00025288 7F20                       		dc.w $7F20
0002528A 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0002528E 9BE0                       		dc.w $9BE0
00025290 0000 0000                  		dc.l Nem_LzSwitch	; switch
00025294 A1E0                       		dc.w $A1E0
00025296 0000 0000                  		dc.l Nem_Spikes		; spikes
0002529A A360                       		dc.w $A360
0002529C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
000252A0 A460                       		dc.w $A460
000252A2 0000 0000                  		dc.l Nem_VSpring	; vertical spring
000252A6 A660                       		dc.w $A660
000252A8                            ; ---------------------------------------------------------------------------
000252A8                            ; Pattern load cues - title card
000252A8                            ; ---------------------------------------------------------------------------
000252A8 0000                       PLC_TitleCard:	dc.w 0
000252AA 0000 0000                  		dc.l Nem_TitleCard
000252AE B000                       		dc.w $B000
000252B0                            ; ---------------------------------------------------------------------------
000252B0                            ; Pattern load cues - act 3 boss
000252B0                            ; ---------------------------------------------------------------------------
000252B0 0006                       PLC_Boss:	dc.w 6
000252B2 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
000252B6 8000                       		dc.w $8000
000252B8 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
000252BC 8D80                       		dc.w $8D80
000252BE 0000 0000                  		dc.l Nem_Prison		; prison capsule
000252C2 93A0                       		dc.w $93A0
000252C4 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
000252C8 A300                       		dc.w $A300
000252CA 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
000252CE A300                       		dc.w $A300
000252D0 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
000252D4 A540                       		dc.w $A540
000252D6 0002 1F28                                  dc.l ArtNem_RobotnikHud
000252DA D000                                       dc.w $D000
000252DC                            
000252DC                            PLC_EggroboBoss:	
000252DC 0006                                       dc.w 6
000252DE 0000 0000                  		dc.l Nem_Eggrobo	; Eggman main patterns
000252E2 8000                       		dc.w $8000
000252E4 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
000252E8 8D80                       		dc.w $8D80
000252EA 0000 0000                  		dc.l Nem_Prison		; prison capsule
000252EE 93A0                       		dc.w $93A0
000252F0 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
000252F4 A300                       		dc.w $A300
000252F6 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
000252FA A300                       		dc.w $A300
000252FC 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
00025300 A540                       		dc.w $A540
00025302 0002 1F28                                  dc.l ArtNem_RobotnikHud 
00025306 D000                                       dc.w $D000
00025308                            
00025308                            ; ---------------------------------------------------------------------------
00025308                            ; Pattern load cues - act 1/2 signpost
00025308                            ; ---------------------------------------------------------------------------
00025308 0002                       PLC_Signpost:	dc.w 2
0002530A 0000 0000                  		dc.l Nem_SignPost	; signpost
0002530E D000                       		dc.w $D000
00025310 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
00025314 96C0                       		dc.w $96C0
00025316 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0002531A 8C40                       		dc.w $8C40
0002531C                            
0002531C                            MightyPLC_Signpost:	
0002531C 0002                                       dc.w 2
0002531E 0000 0000                  		dc.l Nem_MSignPost	; signpost
00025322 D000                       		dc.w $D000
00025324 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
00025328 96C0                       		dc.w $96C0
0002532A 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0002532E 8C40                       		dc.w $8C40
00025330                            
00025330                            MetalPLC_Signpost:	
00025330 0002                                       dc.w 2
00025332 0000 0000                  		dc.l Nem_MetSignPost	; signpost
00025336 D000                       		dc.w $D000
00025338 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0002533C 96C0                       		dc.w $96C0
0002533E 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
00025342 8C40                       		dc.w $8C40
00025344                            
00025344                            TikalPLC_Signpost:	
00025344 0002                                       dc.w 2
00025346 0000 0000                  		dc.l Nem_TikSignPost	; signpost
0002534A D000                       		dc.w $D000
0002534C 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
00025350 96C0                       		dc.w $96C0
00025352 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
00025356 8C40                       		dc.w $8C40
00025358                            
00025358                            ShadowPLC_Signpost:	
00025358 0002                                       dc.w 2
0002535A 0000 0000                  		dc.l Nem_ShdSignPost	; signpost
0002535E D000                       		dc.w $D000
00025360 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
00025364 96C0                       		dc.w $96C0
00025366 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0002536A 8C40                       		dc.w $8C40
0002536C                            
0002536C                            EspioPLC_Signpost:	
0002536C 0002                                       dc.w 2
0002536E 0000 0000                  		dc.l Nem_EspSignPost	; signp
00025372 D000                       		dc.w $D000
00025374 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
00025378 96C0                       		dc.w $96C0
0002537A 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0002537E 8C40                       		dc.w $8C40
00025380                            ; ---------------------------------------------------------------------------
00025380                            ; Pattern load cues - beta special stage warp effect
00025380                            ; ---------------------------------------------------------------------------
00025380 0000                       PLC_Warp:	dc.w 0
00025382 0000 0000                  		dc.l Nem_Warp
00025386 A820                       		dc.w $A820
00025388                            ; ---------------------------------------------------------------------------
00025388                            ; Pattern load cues - special stage
00025388                            ; ---------------------------------------------------------------------------
00025388 0010                       PLC_SpeStage:	dc.w $10
0002538A 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0002538E 0000                       		dc.w 0
00025390 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
00025394 0A20                       		dc.w $A20
00025396 0000 0000                  		dc.l Nem_SSWalls	; walls
0002539A 2840                       		dc.w $2840
0002539C 0000 0000                  		dc.l Nem_Bumper		; bumper
000253A0 4760                       		dc.w $4760
000253A2 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
000253A6 4A20                       		dc.w $4A20
000253A8 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
000253AC 4C60                       		dc.w $4C60
000253AE 0000 0000                  		dc.l Nem_SSRBlock	; R block
000253B2 5E00                       		dc.w $5E00
000253B4 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
000253B8 6E00                       		dc.w $6E00
000253BA 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
000253BE 7E00                       		dc.w $7E00
000253C0 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
000253C4 8E00                       		dc.w $8E00
000253C6 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
000253CA 9E00                       		dc.w $9E00
000253CC 0000 0000                  		dc.l Nem_SSWBlock	; W block
000253D0 AE00                       		dc.w $AE00
000253D2 0000 0000                  		dc.l Nem_SSGlass	; glass	block
000253D6 BE00                       		dc.w $BE00
000253D8 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
000253DC EE00                       		dc.w $EE00
000253DE 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
000253E2 F2E0                       		dc.w $F2E0
000253E4 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
000253E8 F400                       		dc.w $F400
000253EA 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
000253EE F520                       		dc.w $F520
000253F0 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
000253F4 F2E0                       		dc.w $F2E0
000253F6 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
000253FA F400                       		dc.w $F400
000253FC 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
00025400 F520                       		dc.w $F520
00025402                            ; ---------------------------------------------------------------------------
00025402                            ; Pattern load cues - GHZ animals
00025402                            ; ---------------------------------------------------------------------------
00025402 0001                       PLC_GHZAnimals:	dc.w 1
00025404 0000 0000                  		dc.l Nem_Rabbit		; rabbit
00025408 B000                       		dc.w $B000
0002540A 0000 0000                  		dc.l Nem_Flicky		; flicky
0002540E B240                       		dc.w $B240
00025410                            ; ---------------------------------------------------------------------------
00025410                            ; Pattern load cues - LZ animals
00025410                            ; ---------------------------------------------------------------------------
00025410 0001                       PLC_LZAnimals:	dc.w 1
00025412 0000 0000                  		dc.l Nem_BlackBird	; blackbird
00025416 B000                       		dc.w $B000
00025418 0000 0000                  		dc.l Nem_Seal		; seal
0002541C B240                       		dc.w $B240
0002541E                            ; ---------------------------------------------------------------------------
0002541E                            ; Pattern load cues - MZ animals
0002541E                            ; ---------------------------------------------------------------------------
0002541E 0001                       PLC_MZAnimals:	dc.w 1
00025420 0000 0000                  		dc.l Nem_Squirrel	; squirrel
00025424 B000                       		dc.w $B000
00025426 0000 0000                  		dc.l Nem_Seal		; seal
0002542A B240                       		dc.w $B240
0002542C                            ; ---------------------------------------------------------------------------
0002542C                            ; Pattern load cues - SLZ animals
0002542C                            ; ---------------------------------------------------------------------------
0002542C 0001                       PLC_SLZAnimals:	dc.w 1
0002542E 0000 0000                  		dc.l Nem_Pig		; pig
00025432 B000                       		dc.w $B000
00025434 0000 0000                  		dc.l Nem_Flicky		; flicky
00025438 B240                       		dc.w $B240
0002543A                            ; ---------------------------------------------------------------------------
0002543A                            ; Pattern load cues - SYZ animals
0002543A                            ; ---------------------------------------------------------------------------
0002543A 0001                       PLC_SYZAnimals:	dc.w 1
0002543C 0000 0000                  		dc.l Nem_Pig		; pig
00025440 B000                       		dc.w $B000
00025442 0000 0000                  		dc.l Nem_Chicken	; chicken
00025446 B240                       		dc.w $B240
00025448                            ; ---------------------------------------------------------------------------
00025448                            ; Pattern load cues - SBZ animals
00025448                            ; ---------------------------------------------------------------------------
00025448 0001                       PLC_SBZAnimals:	dc.w 1
0002544A 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0002544E B000                       		dc.w $B000
00025450 0000 0000                  		dc.l Nem_Chicken	; chicken
00025454 B240                       		dc.w $B240
00025456                            ; ---------------------------------------------------------------------------
00025456                            ; Pattern load cues - special stage results screen
00025456                            ; ---------------------------------------------------------------------------
00025456 0001                       PLC_SpeStResult:dc.w 1
00025458 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0002545C A820                       		dc.w $A820
0002545E 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
00025462 AA20                       		dc.w $AA20
00025464                            ; ---------------------------------------------------------------------------
00025464                            ; Pattern load cues - ending sequence
00025464                            ; ---------------------------------------------------------------------------
00025464 000E                       PLC_Ending:	dc.w $E
00025466 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0002546A 0000                       		dc.w 0
0002546C 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
00025470 39A0                       		dc.w $39A0
00025472 0000 0000                  		dc.l Nem_Stalk		; flower stalk
00025476 6B00                       		dc.w $6B00
00025478 0000 0000                  		dc.l Nem_EndFlower	; flowers
0002547C 7400                       		dc.w $7400
0002547E 0000 0000                  		dc.l Nem_EndEm		; emeralds
00025482 78A0                       		dc.w $78A0
00025484 0000 0000                  		dc.l Nem_EndSonic	; Sonic
00025488 7C20                       		dc.w $7C20
0002548A 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0002548E A480                       		dc.w $A480
00025490 0000 0000                  		dc.l Nem_Rabbit		; rabbit
00025494 AA60                       		dc.w $AA60
00025496 0000 0000                  		dc.l Nem_Chicken	; chicken
0002549A ACA0                       		dc.w $ACA0
0002549C 0000 0000                  		dc.l Nem_BlackBird	; blackbird
000254A0 AE60                       		dc.w $AE60
000254A2 0000 0000                  		dc.l Nem_Seal		; seal
000254A6 B0A0                       		dc.w $B0A0
000254A8 0000 0000                  		dc.l Nem_Pig		; pig
000254AC B260                       		dc.w $B260
000254AE 0000 0000                  		dc.l Nem_Flicky		; flicky
000254B2 B4A0                       		dc.w $B4A0
000254B4 0000 0000                  		dc.l Nem_Squirrel	; squirrel
000254B8 B660                       		dc.w $B660
000254BA 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
000254BE B8A0                       		dc.w $B8A0
000254C0                            ; ---------------------------------------------------------------------------
000254C0                            ; Pattern load cues - "TRY AGAIN" and "END" screens
000254C0                            ; ---------------------------------------------------------------------------
000254C0 0002                       PLC_TryAgain:	dc.w 2
000254C2 0000 0000                  		dc.l Nem_EndEm		; emeralds
000254C6 78A0                       		dc.w $78A0
000254C8 0000 0000                  		dc.l Nem_TryAgain	; Eggman
000254CC 7C20                       		dc.w $7C20
000254CE 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
000254D2 B000                       		dc.w $B000
000254D4                            ; ---------------------------------------------------------------------------
000254D4                            ; Pattern load cues - Eggman on SBZ 2
000254D4                            ; ---------------------------------------------------------------------------
000254D4 0002                       PLC_EggmanSBZ2:	dc.w 2
000254D6 0000 0000                  		dc.l Nem_SbzBlock	; block
000254DA A300                       		dc.w $A300
000254DC 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
000254E0 8000                       		dc.w $8000
000254E2 0000 0000                  		dc.l Nem_LzSwitch	; switch
000254E6 9400                       		dc.w $9400
000254E8                            ; ---------------------------------------------------------------------------
000254E8                            ; Pattern load cues - final boss
000254E8                            ; ---------------------------------------------------------------------------
000254E8 0005                       PLC_FZBoss:	dc.w 5
000254EA 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
000254EE 7400                       		dc.w $7400
000254F0 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
000254F4 6000                       		dc.w $6000
000254F6 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
000254FA 8000                       		dc.w $8000
000254FC 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
00025500 8E00                       		dc.w $8E00
00025502 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
00025506 A540                       		dc.w $A540
00025508 0002 1F28                                  dc.l ArtNem_RobotnikHud 
0002550C D000                                       dc.w $D000
0002550E                            		
0002550E                            ; ----------------------------------------------------------------------- 
0002550E                            ; Pattern load cues - SLZ act 3 boss 
0002550E                            ; ----------------------------------------------------------------------- 
0002550E                            PLC_BallHog: 
0002550E 0001                                       dc.w 1 
00025510 0002 1C30                                  dc.l ArtNem_BallhogBoss 
00025514 8200                                       dc.w $8200 
00025516 0002 1F28                                  dc.l ArtNem_RobotnikHud 
0002551A D000                                       dc.w $D000
0002551C                            
0002551C                            ; ----------------------------------------------------------------------- 
0002551C                            ; Pattern load cues - LZ act 2 boss (also ghz1)
0002551C                            ; ----------------------------------------------------------------------- 
0002551C                            PLC_SilverSonicBoss:	
0002551C 0002                                       dc.w 2
0002551E 0000 0000                  		dc.l Nem_SilvSon	; Silver Sonic main patterns
00025522 9000                       		dc.w $9000
00025524 0000 0000                                  dc.l Nem_BallHog	; ball hog enemy
00025528 7EC0                       		dc.w $7EC0
0002552A 0002 1F28                                  dc.l ArtNem_RobotnikHud 
0002552E D000                                       dc.w $D000
00025530                            		even
00025530                            
00025530                            ; ----------------------------------------------------------------------- 
00025530                            ; Pattern load cues - SYZ act 2 boss 
00025530                            ; ----------------------------------------------------------------------- 
00025530                            PLC_WhispKingBoss:	
00025530 0003                                       dc.w 3
00025532 0000 0000                  		dc.l Nem_WhispKing	
00025536 8000                       		dc.w $8000
00025538 0000 0000                  		dc.l Nem_Basaran	
0002553C 9700                       		dc.w $9700
0002553E 0000 0000                                  dc.l Nem_BallHog	; ball hog enemy
00025542 A000                       		dc.w $A000
00025544 0002 1F28                                  dc.l ArtNem_RobotnikHud 
00025548 D000                                       dc.w $D000
0002554A                            		even
0002554A                            
0002554A                            
0002554A                            ; ----------------------------------------------------------------------- 
0002554A                            ; Pattern load cues - SLZ act 2 boss 
0002554A                            ; ----------------------------------------------------------------------- 
0002554A                            PLC_DinoKingBoss:	
0002554A 0002                                       dc.w 2
0002554C 0000 0000                                  dc.l Nem_BallFire
00025550 7B80                       		dc.w $7B80
00025552 0000 0000                  		dc.l Nem_DinoKing	
00025556 9000                       		dc.w $9000
00025558 0002 1F28                                  dc.l ArtNem_RobotnikHud 
0002555C D000                                       dc.w $D000
0002555E                            		even
0002555E                            
0002555E                            ; ----------------------------------------------------------------------- 
0002555E                            ; Pattern load cues - SLZ act 1 boss 
0002555E                            ; ----------------------------------------------------------------------- 
0002555E                            PLC_BrutalNewtronBoss:	
0002555E 0002                                       dc.w 2
00025560 0000 0000                                  dc.l Nem_BallFire
00025564 7B80                       		dc.w $7B80
00025566 0000 0000                  		dc.l Nem_BrutalNewt	
0002556A 9000                       		dc.w $9000
0002556C 0002 1F28                                  dc.l ArtNem_RobotnikHud 
00025570 D000                                       dc.w $D000
00025572                            		even
00025572                            
00025572                            ; ----------------------------------------------------------------------- 
00025572                            ; Pattern load cues - MZ act 2 boss 
00025572                            ; ----------------------------------------------------------------------- 
00025572                            PLC_HellgirlBoss:	
00025572 0002                                       dc.w 2
00025574 0000 0000                  		dc.l Nem_Hellgirl	
00025578 8000                       		dc.w $8000
0002557A 0000 0000                                  dc.l Nem_BallLove
0002557E A000                       		dc.w $A000
00025580 0002 1F28                                  dc.l ArtNem_RobotnikHud 
00025584 D000                                       dc.w $D000
00025586                            		even
00025586                            
00025586                            ; ---------------------------------------------------------------------------
00025586                            ; Pattern load cues - Station Core final boss
00025586                            ; ---------------------------------------------------------------------------
00025586                            PLC_CrusherBoss:	
00025586 0003                       		dc.w 3
00025588 0000 0000                  		dc.l Nem_Eggman		; Eggman 
0002558C 6000                       		dc.w $6000
0002558E 0000 0000                  		dc.l Nem_Crusher	; Eggman's big fist
00025592 6D80                       		dc.w $6D80
00025594 0000 0000                                  dc.l Nem_Ballwave
00025598 7B80                       		dc.w $7B80
0002559A 0002 1F28                                  dc.l ArtNem_RobotnikHud
0002559E D000                                       dc.w $D000
000255A0                            		even
000255A0                            
000255A0                            ; ----------------------------------------------------------------------- 
000255A0                            ; Pattern load cues - SYZ act 1 boss 
000255A0                            ; ----------------------------------------------------------------------- 
000255A0                            PLC_TailsDollBoss:	
000255A0 0001                                       dc.w 1
000255A2 0000 0000                  		dc.l Nem_Tailsdoll	
000255A6 9000                       		dc.w $9000
000255A8 0002 1F28                                  dc.l ArtNem_RobotnikHud 
000255AC D000                                       dc.w $D000
000255AE                            		even
000255AE                            		even
000255AE                            
000255AE                            		incbin	misc\padding.bin
0002569C                            		even
0002569C                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
00025AF4 00                         		even
00025AF4                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
00025BEC                            		even
00025BEC                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
00025D00                            		even
00025D00                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
00026BE6                            		even
00026BE6                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00028366                            		even
00028366                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
000283A8                            		even
000283A8                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00028466                            		even
00028466                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00028900 00                         		even
00028900                            ; ---------------------------------------------------------------------------
00028900                            ; Sprite mappings - Sonic
00028900                            ; ---------------------------------------------------------------------------
00028900                            Map_Sonic:
00028900                            	include "_maps\Sonic.asm"
00028900                            ; ---------------------------------------------------------------------------
00028900                            ; Sprite mappings - Sonic
00028900                            ; ---------------------------------------------------------------------------
00028900 0000 0000                  		dc.w byte_21292-Map_Sonic, byte_21293-Map_Sonic
00028904 0000 0000                  		dc.w byte_212A8-Map_Sonic, byte_212B8-Map_Sonic
00028908 0000 0000                  		dc.w byte_212C8-Map_Sonic, byte_212D8-Map_Sonic
0002890C 0000 0000                  		dc.w byte_212E8-Map_Sonic, byte_212FD-Map_Sonic
00028910 0000 0000                  		dc.w byte_21308-Map_Sonic, byte_21313-Map_Sonic
00028914 0000 0000                  		dc.w byte_21328-Map_Sonic, byte_21333-Map_Sonic
00028918 0000 0000                  		dc.w byte_21343-Map_Sonic, byte_2135D-Map_Sonic
0002891C 0000 0000                  		dc.w byte_2137C-Map_Sonic, byte_21391-Map_Sonic
00028920 0000 0000                  		dc.w byte_213AB-Map_Sonic, byte_213C0-Map_Sonic
00028924 0000 0000                  		dc.w byte_213DA-Map_Sonic, byte_213EF-Map_Sonic
00028928 0000 0000                  		dc.w byte_213FA-Map_Sonic, byte_21405-Map_Sonic
0002892C 0000 0000                  		dc.w byte_2141A-Map_Sonic, byte_21425-Map_Sonic
00028930 0000 0000                  		dc.w byte_21435-Map_Sonic, byte_21454-Map_Sonic
00028934 0000 0000                  		dc.w byte_21473-Map_Sonic, byte_21488-Map_Sonic
00028938 0000 0000                  		dc.w byte_214A2-Map_Sonic, byte_214B7-Map_Sonic
0002893C 0000 0000                  		dc.w byte_214D1-Map_Sonic, byte_214DC-Map_Sonic
00028940 0000 0000                  		dc.w byte_214E7-Map_Sonic, byte_214F2-Map_Sonic
00028944 0000 0000                  		dc.w byte_214FD-Map_Sonic, byte_21512-Map_Sonic
00028948 0000 0000                  		dc.w byte_21522-Map_Sonic, byte_21537-Map_Sonic
0002894C 0000 0000                  		dc.w byte_21547-Map_Sonic, byte_21552-Map_Sonic
00028950 0000 0000                  		dc.w byte_2155D-Map_Sonic, byte_21568-Map_Sonic
00028954 0000 0000                  		dc.w byte_21573-Map_Sonic, byte_21588-Map_Sonic
00028958 0000 0000                  		dc.w byte_21593-Map_Sonic, byte_215A8-Map_Sonic
0002895C 0000 0000                  		dc.w byte_215B3-Map_Sonic, byte_215B9-Map_Sonic
00028960 0000 0000                  		dc.w byte_215BF-Map_Sonic, byte_215C5-Map_Sonic
00028964 0000 0000                  		dc.w byte_215CB-Map_Sonic, byte_215D1-Map_Sonic
00028968 0000 0000                  		dc.w byte_215DC-Map_Sonic, byte_215E2-Map_Sonic
0002896C 0000 0000                  		dc.w byte_215ED-Map_Sonic, byte_215F3-Map_Sonic
00028970 0000 0000                  		dc.w byte_215FE-Map_Sonic, byte_21613-Map_Sonic
00028974 0000 0000                  		dc.w byte_21628-Map_Sonic, byte_21638-Map_Sonic
00028978 0000 0000                  		dc.w byte_21648-Map_Sonic, byte_21658-Map_Sonic
0002897C 0000 0000                  		dc.w byte_21663-Map_Sonic, byte_21673-Map_Sonic
00028980 0000 0000                  		dc.w byte_21683-Map_Sonic, byte_21693-Map_Sonic
00028984 0000 0000                  		dc.w byte_216A8-Map_Sonic, byte_216BD-Map_Sonic
00028988 0000 0000                  		dc.w byte_216D7-Map_Sonic, byte_216F1-Map_Sonic
0002898C 0000 0000                  		dc.w byte_216FC-Map_Sonic, byte_2170C-Map_Sonic
00028990 0000 0000                  		dc.w byte_21717-Map_Sonic, byte_21727-Map_Sonic
00028994 0000 0000                  		dc.w byte_21732-Map_Sonic, byte_21742-Map_Sonic
00028998 0000 0000                  		dc.w byte_21752-Map_Sonic, byte_2176C-Map_Sonic
0002899C 0000 0000                  		dc.w byte_21786-Map_Sonic, byte_21791-Map_Sonic
000289A0 0000 0000                  		dc.w byte_217A1-Map_Sonic, byte_217A7-Map_Sonic
000289A4 0000 0000                  		dc.w byte_217AD-Map_Sonic, byte_217B3-Map_Sonic
000289A8 0000 0000                  		dc.w byte_217C3-Map_Sonic, byte_217D3-Map_Sonic
000289AC 0000 0000                  		dc.w byte_217E3-Map_Sonic, byte_217F3-Map_Sonic
000289B0 0000 0000                  		dc.w byte_spdh1-Map_Sonic, byte_spdh2-Map_Sonic
000289B4 0000 0000                  		dc.w byte_spdh3-Map_Sonic, byte_spdh4-Map_Sonic
000289B8 0000 0000                  		dc.w byte_spdh5-Map_Sonic, byte_spdh6-Map_Sonic
000289BC 0000 0000                                  dc.w byte_01peelout5E-Map_Sonic, byte_02peelout5F-Map_Sonic
000289C0 0000 0000                  		dc.w byte_03peelout60-Map_Sonic, byte_04peelout61-Map_Sonic
000289C4 0000 0000                  		dc.w byte_SPRING01-Map_Sonic, byte_SPRING02-Map_Sonic	
000289C8 0000 0000                  		dc.w byte_SPRING03-Map_Sonic, byte_SPRING04-Map_Sonic
000289CC 0000                       		dc.w byte_SPRING05-Map_Sonic
000289CE 0000 0000                                  dc.w byte_11outing67-Map_Sonic, byte_12outing68-Map_Sonic
000289D2 0000 0000                  		dc.w byte_13outing69-Map_Sonic, byte_14outing6A-Map_Sonic
000289D6 0000 0000                                  dc.w byte_21outing6B-Map_Sonic, byte_22outing6C-Map_Sonic
000289DA 0000 0000                  		dc.w byte_23outing6D-Map_Sonic, byte_24outing6E-Map_Sonic
000289DE 0000 0000                  		dc.w byte_31outing6F-Map_Sonic, byte_32outing70-Map_Sonic
000289E2 0000 0000                  		dc.w byte_33outing71-Map_Sonic, byte_34outing72-Map_Sonic
000289E6 0000 0000                  		dc.w byte_41outing73-Map_Sonic, byte_42outing74-Map_Sonic
000289EA 0000 0000                  		dc.w byte_43outing75-Map_Sonic, byte_44outing76-Map_Sonic
000289EE 00                         byte_21292:	dc.b 0
000289EF 04                         byte_21293:	dc.b 4			; standing
000289F0 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
000289F5 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0
000289FA 0408 000B F0               		dc.b 4,	8, 0, $B, $F0
000289FF 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8
00028A04 03                         byte_212A8:	dc.b 3			; waiting 1
00028A05 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00028A0A FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
00028A0F 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00028A14 03                         byte_212B8:	dc.b 3			; waiting 2
00028A15 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00028A1A FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
00028A1F 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00028A24 03                         byte_212C8:	dc.b 3			; waiting 3
00028A25 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00028A2A FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
00028A2F 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00028A34 03                         byte_212D8:	dc.b 3			; looking up
00028A35 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
00028A3A 0408 0009 F0               		dc.b 4,	8, 0, 9, $F0
00028A3F 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00028A44 04                         byte_212E8:	dc.b 4			; walking 1-1
00028A45 EB0D 0000 EC               		dc.b $EB, $D, 0, 0, $EC
00028A4A FB09 0008 EC               		dc.b $FB, 9, 0,	8, $EC
00028A4F FB06 000E 04               		dc.b $FB, 6, 0,	$E, 4
00028A54 0B04 0014 EC               		dc.b $B, 4, 0, $14, $EC
00028A59 02                         byte_212FD:	dc.b 2			; walking 1-2
00028A5A EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED
00028A5F FC0E 0008 F5               		dc.b $FC, $E, 0, 8, $F5
00028A64 02                         byte_21308:	dc.b 2			; walking 1-3
00028A65 ED09 0000 F3               		dc.b $ED, 9, 0,	0, $F3
00028A6A FD0A 0006 F3               		dc.b $FD, $A, 0, 6, $F3
00028A6F 04                         byte_21313:	dc.b 4			; walking 1-4
00028A70 EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
00028A75 FB09 0006 EC               		dc.b $FB, 9, 0,	6, $EC
00028A7A FB06 000C 04               		dc.b $FB, 6, 0,	$C, 4
00028A7F 0B04 0012 EC               		dc.b $B, 4, 0, $12, $EC
00028A84 02                         byte_21328:	dc.b 2			; walking 1-5
00028A85 EC09 0000 F3               		dc.b $EC, 9, 0,	0, $F3
00028A8A FC0E 0006 EB               		dc.b $FC, $E, 0, 6, $EB
00028A8F 03                         byte_21333:	dc.b 3			; walking 1-6
00028A90 ED0D 0000 EC               		dc.b $ED, $D, 0, 0, $EC
00028A95 FD0C 0008 F4               		dc.b $FD, $C, 0, 8, $F4
00028A9A 0509 000C F4               		dc.b 5,	9, 0, $C, $F4
00028A9F 05                         byte_21343:	dc.b 5			; walking 2-1
00028AA0 EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
00028AA5 EB06 0006 03               		dc.b $EB, 6, 0,	6, 3
00028AAA FB08 000C EB               		dc.b $FB, 8, 0,	$C, $EB
00028AAF 0309 000F F3               		dc.b 3,	9, 0, $F, $F3
00028AB4 1300 0015 FB               		dc.b $13, 0, 0,	$15, $FB
00028AB9 06                         byte_2135D:	dc.b 6			; walking 2-2
00028ABA EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
00028ABF EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
00028AC4 FC0C 0008 EC               		dc.b $FC, $C, 0, 8, $EC
00028AC9 0409 000C F4               		dc.b 4,	9, 0, $C, $F4
00028ACE FC05 0012 0C               		dc.b $FC, 5, 0,	$12, $C
00028AD3 F400 0016 14               		dc.b $F4, 0, 0,	$16, $14
00028AD8 04                         byte_2137C:	dc.b 4			; walking 2-3
00028AD9 ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
00028ADE ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
00028AE3 FD0D 0008 F5               		dc.b $FD, $D, 0, 8, $F5
00028AE8 0D08 0010 FD               		dc.b $D, 8, 0, $10, $FD
00028AED 05                         byte_21391:	dc.b 5			; walking 2-4
00028AEE EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
00028AF3 EB05 0006 03               		dc.b $EB, 5, 0,	6, 3
00028AF8 FB0D 000A F3               		dc.b $FB, $D, 0, $A, $F3
00028AFD 0B08 0012 F3               		dc.b $B, 8, 0, $12, $F3
00028B02 1304 0015 FB               		dc.b $13, 4, 0,	$15, $FB
00028B07 04                         byte_213AB:	dc.b 4			; walking 2-5
00028B08 EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
00028B0D EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
00028B12 FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4
00028B17 0C08 0010 FC               		dc.b $C, 8, 0, $10, $FC
00028B1C 05                         byte_213C0:	dc.b 5			; walking 2-6
00028B1D ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
00028B22 ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
00028B27 FD00 0008 ED               		dc.b $FD, 0, 0,	8, $ED
00028B2C FD0D 0009 F5               		dc.b $FD, $D, 0, 9, $F5
00028B31 0D08 0011 FD               		dc.b $D, 8, 0, $11, $FD
00028B36 04                         byte_213DA:	dc.b 4			; walking 3-1
00028B37 F407 0000 EB               		dc.b $F4, 7, 0,	0, $EB
00028B3C EC09 0008 FB               		dc.b $EC, 9, 0,	8, $FB
00028B41 FC04 000E FB               		dc.b $FC, 4, 0,	$E, $FB
00028B46 0409 0010 FB               		dc.b 4,	9, 0, $10, $FB
00028B4B 02                         byte_213EF:	dc.b 2			; walking 3-2
00028B4C F407 0000 EC               		dc.b $F4, 7, 0,	0, $EC
00028B51 EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC
00028B56 02                         byte_213FA:	dc.b 2			; walking 3-3
00028B57 F406 0000 ED               		dc.b $F4, 6, 0,	0, $ED
00028B5C F40A 0006 FD               		dc.b $F4, $A, 0, 6, $FD
00028B61 04                         byte_21405:	dc.b 4			; walking 3-4
00028B62 F406 0000 EB               		dc.b $F4, 6, 0,	0, $EB
00028B67 EC09 0006 FB               		dc.b $EC, 9, 0,	6, $FB
00028B6C FC04 000C FB               		dc.b $FC, 4, 0,	$C, $FB
00028B71 0409 000E FB               		dc.b 4,	9, 0, $E, $FB
00028B76 02                         byte_2141A:	dc.b 2			; walking 3-5
00028B77 F406 0000 EC               		dc.b $F4, 6, 0,	0, $EC
00028B7C F40B 0006 FC               		dc.b $F4, $B, 0, 6, $FC
00028B81 03                         byte_21425:	dc.b 3			; walking 3-6
00028B82 F407 0000 ED               		dc.b $F4, 7, 0,	0, $ED
00028B87 EC00 0008 FD               		dc.b $EC, 0, 0,	8, $FD
00028B8C F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD
00028B91 06                         byte_21435:	dc.b 6			; walking 4-1
00028B92 FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
00028B97 ED04 0006 F3               		dc.b $ED, 4, 0,	6, $F3
00028B9C F504 0008 EB               		dc.b $F5, 4, 0,	8, $EB
00028BA1 F50A 000A FB               		dc.b $F5, $A, 0, $A, $FB
00028BA6 0D00 0013 FB               		dc.b $D, 0, 0, $13, $FB
00028BAB FD00 0014 13               		dc.b $FD, 0, 0,	$14, $13
00028BB0 06                         byte_21454:	dc.b 6			; walking 4-2
00028BB1 FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
00028BB6 E408 0006 F4               		dc.b $E4, 8, 0,	6, $F4
00028BBB EC04 0009 FC               		dc.b $EC, 4, 0,	9, $FC
00028BC0 F404 000B EC               		dc.b $F4, 4, 0,	$B, $EC
00028BC5 F40A 000D FC               		dc.b $F4, $A, 0, $D, $FC
00028BCA 0C00 0016 FC               		dc.b $C, 0, 0, $16, $FC
00028BCF 04                         byte_21473:	dc.b 4			; walking 4-3
00028BD0 FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
00028BD5 F304 0006 ED               		dc.b $F3, 4, 0,	6, $ED
00028BDA EB0A 0008 FD               		dc.b $EB, $A, 0, 8, $FD
00028BDF 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
00028BE4 05                         byte_21488:	dc.b 5			; walking 4-4
00028BE5 FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
00028BEA ED08 0006 F3               		dc.b $ED, 8, 0,	6, $F3
00028BEF F504 0009 EB               		dc.b $F5, 4, 0,	9, $EB
00028BF4 F50D 000B FB               		dc.b $F5, $D, 0, $B, $FB
00028BF9 0508 0013 FB               		dc.b 5,	8, 0, $13, $FB
00028BFE 04                         byte_214A2:	dc.b 4			; walking 4-5
00028BFF FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
00028C04 F404 0006 EC               		dc.b $F4, 4, 0,	6, $EC
00028C09 EC0A 0008 FC               		dc.b $EC, $A, 0, 8, $FC
00028C0E 0404 0011 FC               		dc.b 4,	4, 0, $11, $FC
00028C13 05                         byte_214B7:	dc.b 5			; walking 4-6
00028C14 FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
00028C19 EB0A 0006 FD               		dc.b $EB, $A, 0, 6, $FD
00028C1E F304 000F ED               		dc.b $F3, 4, 0,	$F, $ED
00028C23 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
00028C28 0B00 0013 FD               		dc.b $B, 0, 0, $13, $FD
00028C2D 02                         byte_214D1:	dc.b 2			; running 1-1
00028C2E EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00028C33 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00028C38 02                         byte_214DC:	dc.b 2			; running 1-2
00028C39 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00028C3E FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00028C43 02                         byte_214E7:	dc.b 2			; running 1-3
00028C44 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00028C49 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00028C4E 02                         byte_214F2:	dc.b 2			; running 1-4
00028C4F EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00028C54 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00028C59 04                         byte_214FD:	dc.b 4			; running 2-1
00028C5A EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
00028C5F EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00028C64 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00028C69 FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
00028C6E 03                         byte_21512:	dc.b 3			; running 2-2
00028C6F EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
00028C74 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00028C79 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00028C7E 04                         byte_21522:	dc.b 4			; running 2-3
00028C7F EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
00028C84 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00028C89 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00028C8E FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
00028C93 03                         byte_21537:	dc.b 3			; running 2-4
00028C94 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
00028C99 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00028C9E FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00028CA3 02                         byte_21547:	dc.b 2			; running 3-1
00028CA4 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00028CA9 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00028CAE 02                         byte_21552:	dc.b 2			; running 3-2
00028CAF F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00028CB4 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00028CB9 02                         byte_2155D:	dc.b 2			; running 3-3
00028CBA F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00028CBF F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00028CC4 02                         byte_21568:	dc.b 2			; running 3-4
00028CC5 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00028CCA F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00028CCF 04                         byte_21573:	dc.b 4			; running 4-1
00028CD0 FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
00028CD5 F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
00028CDA EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00028CDF 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
00028CE4 02                         byte_21588:	dc.b 2			; running 4-2
00028CE5 F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
00028CEA EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00028CEF 04                         byte_21593:	dc.b 4			; running 4-3
00028CF0 FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
00028CF5 F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
00028CFA EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00028CFF 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
00028D04 02                         byte_215A8:	dc.b 2			; running 4-4
00028D05 F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
00028D0A EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00028D0F 01                         byte_215B3:	dc.b 1			; rolling 1
00028D10 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00028D15 01                         byte_215B9:	dc.b 1			; rolling 2
00028D16 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00028D1B 01                         byte_215BF:	dc.b 1			; rolling 3
00028D1C F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00028D21 01                         byte_215C5:	dc.b 1			; rolling 4
00028D22 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00028D27 01                         byte_215CB:	dc.b 1			; rolling 5
00028D28 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00028D2D 02                         byte_215D1:	dc.b 2			; warped 1 (unused)
00028D2E F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC
00028D33 F402 000C 0C               		dc.b $F4, 2, 0,	$C, $C
00028D38 01                         byte_215DC:	dc.b 1			; warped 2 (unused)
00028D39 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00028D3E 02                         byte_215E2:	dc.b 2			; warped 3 (unused)
00028D3F EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4
00028D44 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4
00028D49 01                         byte_215ED:	dc.b 1			; warped 4 (unused)
00028D4A F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00028D4F 02                         byte_215F3:	dc.b 2			; stopping 1
00028D50 ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
00028D55 FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0
00028D5A 04                         byte_215FE:	dc.b 4			; stopping 2
00028D5B ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
00028D60 FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0
00028D65 0D04 000E 00               		dc.b $D, 4, 0, $E, 0
00028D6A 0500 0010 E8               		dc.b 5,	0, 0, $10, $E8
00028D6F 04                         byte_21613:	dc.b 4			; ducking
00028D70 F404 0000 FC               		dc.b $F4, 4, 0,	0, $FC
00028D75 FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4
00028D7A 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4
00028D7F 0400 000D EC               		dc.b 4,	0, 0, $D, $EC
00028D84 03                         byte_21628:	dc.b 3			; balancing 1
00028D85 EC08 0800 E8               		dc.b $EC, 8, 8,	0, $E8
00028D8A F402 0803 00               		dc.b $F4, 2, 8,	3, 0
00028D8F F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0
00028D94 03                         byte_21638:	dc.b 3			; balancing 2
00028D95 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8
00028D9A 040D 080C E0               		dc.b 4,	$D, 8, $C, $E0
00028D9F 0C00 1814 00               		dc.b $C, 0, $18, $14, 0
00028DA4 03                         byte_21648:	dc.b 3			; spinning 1 (LZ)
00028DA5 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
00028DAA FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
00028DAF 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
00028DB4 02                         byte_21658:	dc.b 2			; spinning 2 (LZ)
00028DB5 F40A 0000 E8               		dc.b $F4, $A, 0, 0, $E8
00028DBA F40A 0800 00               		dc.b $F4, $A, 8, 0, 0
00028DBF 03                         byte_21663:	dc.b 3			; spinning 3 (LZ)
00028DC0 F40D 0000 E4               		dc.b $F4, $D, 0, 0, $E4
00028DC5 FC00 0008 04               		dc.b $FC, 0, 0,	8, 4
00028DCA 040C 0009 EC               		dc.b 4,	$C, 0, 9, $EC
00028DCF 03                         byte_21673:	dc.b 3			; spinning 4 (LZ)
00028DD0 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
00028DD5 FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
00028DDA 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
00028DDF 03                         byte_21683:	dc.b 3			; bouncing
00028DE0 E80B 0000 F0               		dc.b $E8, $B, 0, 0, $F0
00028DE5 0804 000C F8               		dc.b 8,	4, 0, $C, $F8
00028DEA 1000 000E F8               		dc.b $10, 0, 0,	$E, $F8
00028DEF 04                         byte_21693:	dc.b 4			; hanging 1 (LZ)
00028DF0 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
00028DF5 0005 000C 08               		dc.b 0,	5, 0, $C, 8
00028DFA F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
00028DFF F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
00028E04 04                         byte_216A8:	dc.b 4			; hanging 2 (LZ)
00028E05 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
00028E0A 0005 000C 08               		dc.b 0,	5, 0, $C, 8
00028E0F F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
00028E14 F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
00028E19 05                         byte_216BD:	dc.b 5			; celebration leap 1 (unused)
00028E1A E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
00028E1F F001 0009 0C               		dc.b $F0, 1, 0,	9, $C
00028E24 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
00028E29 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
00028E2E 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
00028E33 05                         byte_216D7:	dc.b 5			; celebration leap 2 (unused)
00028E34 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
00028E39 E801 0009 0C               		dc.b $E8, 1, 0,	9, $C
00028E3E 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
00028E43 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
00028E48 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
00028E4D 02                         byte_216F1:	dc.b 2			; pushing 1
00028E4E ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
00028E53 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
00028E58 03                         byte_216FC:	dc.b 3			; pushing 2
00028E59 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
00028E5E 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
00028E63 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
00028E68 02                         byte_2170C:	dc.b 2			; pushing 3
00028E69 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
00028E6E 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
00028E73 03                         byte_21717:	dc.b 3			; pushing 4
00028E74 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
00028E79 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
00028E7E 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
00028E83 02                         byte_21727:	dc.b 2			; surfing or sliding (unused)
00028E84 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00028E89 FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0
00028E8E 03                         byte_21732:	dc.b 3			; collecting bubble (unused)
00028E8F EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
00028E94 0405 0009 F8               		dc.b 4,	5, 0, 9, $F8
00028E99 E400 000D F8               		dc.b $E4, 0, 0,	$D, $F8
00028E9E 03                         byte_21742:	dc.b 3			; death	1
00028E9F E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
00028EA4 E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
00028EA9 F80B 000A F4               		dc.b $F8, $B, 0, $A, $F4
00028EAE 05                         byte_21752:	dc.b 5			; drowning
00028EAF E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
00028EB4 E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
00028EB9 F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
00028EBE 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
00028EC3 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
00028EC8 05                         byte_2176C:	dc.b 5			; death	2
00028EC9 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
00028ECE E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
00028ED3 F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
00028ED8 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
00028EDD 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
00028EE2 02                         byte_21786:	dc.b 2			; shrinking 1 (unused)
00028EE3 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00028EE8 F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0
00028EED 03                         byte_21791:	dc.b 3			; shrinking 2 (unused)
00028EEE EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00028EF3 F40E 0003 F0               		dc.b $F4, $E, 0, 3, $F0
00028EF8 0C08 000F F8               		dc.b $C, 8, 0, $F, $F8
00028EFD 01                         byte_217A1:	dc.b 1			; shrinking 3 (unused)
00028EFE F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4
00028F03 01                         byte_217A7:	dc.b 1			; shrinking 4 (unused)
00028F04 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00028F09 01                         byte_217AD:	dc.b 1			; shrinking 5 (unused)
00028F0A F801 0000 FC               		dc.b $F8, 1, 0,	0, $FC
00028F0F 03                         byte_217B3:	dc.b 3			; injury
00028F10 F40D 0800 E4               		dc.b $F4, $D, 8, 0, $E4
00028F15 FC05 0808 04               		dc.b $FC, 5, 8,	8, 4
00028F1A 0408 080C EC               		dc.b 4,	8, 8, $C, $EC
00028F1F 03                         byte_217C3:	dc.b 3			; spinning 5 (LZ)
00028F20 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC
00028F25 FC00 0808 F4               		dc.b $FC, 0, 8,	8, $F4
00028F2A 040C 0809 F4               		dc.b 4,	$C, 8, 9, $F4
00028F2F 03                         byte_217D3:	dc.b 3			; spinning 6 (LZ)
00028F30 F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC
00028F35 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00028F3A 080C 000E F4               		dc.b 8,	$C, 0, $E, $F4
00028F3F 03                         byte_217E3:	dc.b 3			; collecting bubble (LZ)
00028F40 EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
00028F45 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC
00028F4A 0301 0012 0C               		dc.b 3,	1, 0, $12, $C
00028F4F 02                         byte_217F3:	dc.b 2			; water	slide (LZ)
00028F50 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC
00028F55 F802 0010 0C               		dc.b $F8, 2, 0,	$10, $C
00028F5A 01                         byte_spdh1:	dc.b 1			; Spin Dash 1
00028F5B F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00028F60 01                         byte_spdh2:	dc.b 1			; Spin Dash 2
00028F61 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00028F66 01                         byte_spdh3:	dc.b 1			; Spin Dash 3
00028F67 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00028F6C 01                         byte_spdh4:	dc.b 1			; Spin Dash 4
00028F6D F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00028F72 01                         byte_spdh5:	dc.b 1			; Spin Dash 5
00028F73 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00028F78 01                         byte_spdh6:	dc.b 1			; Spin Dash 6
00028F79 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00028F7E 02                         byte_01peelout5E:	dc.b 2	
00028F7F F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
00028F84 FC02 0010 E8               		dc.b $FC, 2, 0, $10, $E8	
00028F89 02                         byte_02peelout5F:	dc.b 2	
00028F8A F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
00028F8F FC02 0010 E8               		dc.b $FC, 2, 0, $10, $E8	
00028F94 02                         byte_03peelout60:	dc.b 2	
00028F95 F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
00028F9A FC02 0010 E8               		dc.b $FC, 2, 0, $10, $E8	
00028F9F 02                         byte_04peelout61:	dc.b 2	
00028FA0 F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
00028FA5 FC01 0010 E8               		dc.b $FC, 1, 0, $10, $E8	
00028FAA 02                         byte_SPRING01:	dc.b 2
00028FAB EC0F 0000 F0               		dc.b $EC, $F, 0, $0, $F0		
00028FB0 0C05 0010 F8               		dc.b $0C, $5, 0, $10, $F8	
00028FB5 02                         byte_SPRING02:	dc.b 2
00028FB6 EC0F 0000 F0               		dc.b $EC, $F, 0, 0, $F0		
00028FBB 0C05 0010 F8               		dc.b $0C, $5, 0, $10, $F8	
00028FC0 02                         byte_SPRING03:	dc.b 2
00028FC1 EC0F 0000 F0               		dc.b $EC, $F, 0, 0, $F0		
00028FC6 0C05 0010 F8               		dc.b $0C, $5, 0, $10, $F8	
00028FCB 02                         byte_SPRING04:	dc.b 2
00028FCC EC0F 0000 F0               		dc.b $EC, $F, 0, 0, $F0		
00028FD1 0C05 0010 F8               		dc.b $0C, $5, 0, $10, $F8	
00028FD6 02                         byte_SPRING05:	dc.b 2
00028FD7 EC0F 0000 F0               		dc.b $EC, $F, 0, 0, $F0		
00028FDC 0C05 0010 F8               		dc.b $0C, $5, 0, $10, $F8
00028FE1 02                         byte_11outing67:	dc.b 2	                ; outing 1-1
00028FE2 F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
00028FE7 FC02 0010 E8               		dc.b $FC, 2, 0, $10, $E8	
00028FEC 02                         byte_12outing68:	dc.b 2	                ; outing 1-2
00028FED F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
00028FF2 FC02 0010 E8               		dc.b $FC, 2, 0, $10, $E8	
00028FF7 02                         byte_13outing69:	dc.b 2	                ; outing 1-3
00028FF8 F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
00028FFD FC02 0010 E8               		dc.b $FC, 2, 0, $10, $E8	
00029002 02                         byte_14outing6A:	dc.b 2	                ; outing 1-4
00029003 F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
00029008 FC01 0010 E8               		dc.b $FC, 1, 0, $10, $E8
0002900D 04                         byte_21outing6B:	dc.b 4			; outing 2-1
0002900E EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
00029013 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00029018 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
0002901D FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
00029022 03                         byte_22outing6C:	dc.b 3			; outing 2-2
00029023 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
00029028 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
0002902D FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00029032 04                         byte_23outing6D:	dc.b 4			; outing 2-3
00029033 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
00029038 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
0002903D FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00029042 FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
00029047 03                         byte_24outing6E:	dc.b 3			; outing 2-4
00029048 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
0002904D EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00029052 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00029057 02                         byte_31outing6F:	dc.b 2			; outing 3-1
00029058 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
0002905D F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00029062 02                         byte_32outing70:	dc.b 2			; outing 3-2
00029063 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00029068 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
0002906D 02                         byte_33outing71:	dc.b 2			; outing 3-3
0002906E F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00029073 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00029078 02                         byte_34outing72:	dc.b 2			; outing 3-4
00029079 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
0002907E F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00029083 04                         byte_41outing73:	dc.b 4			; outing 4-1
00029084 FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
00029089 F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
0002908E EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00029093 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
00029098 02                         byte_42outing74:	dc.b 2			; outing 4-2
00029099 F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
0002909E EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
000290A3 04                         byte_43outing75:	dc.b 4			; outing 4-3
000290A4 FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
000290A9 F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
000290AE EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
000290B3 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
000290B8 02                         byte_44outing76:	dc.b 2			; outing 4-4
000290B9 F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
000290BE EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
000290C4 00                         		even
000290C4 00                         		even
000290C4                            Map_Mighty:
000290C4                            
000290C4                                    include "_maps\Mighty.asm"
000290C4                            ; --------------------------------------------------------------------------------
000290C4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000290C4                            ; --------------------------------------------------------------------------------
000290C4                            
000290C4                            SME_IiJWw:	
000290C4 0000 0000                  		dc.w SME_IiJWw_BC-SME_IiJWw, SME_IiJWw_BD-SME_IiJWw	
000290C8 0000 0000                  		dc.w SME_IiJWw_D2-SME_IiJWw, SME_IiJWw_E2-SME_IiJWw	
000290CC 0000 0000                  		dc.w SME_IiJWw_F2-SME_IiJWw, SME_IiJWw_102-SME_IiJWw	
000290D0 0000 0000                  		dc.w SME_IiJWw_112-SME_IiJWw, SME_IiJWw_127-SME_IiJWw	
000290D4 0000 0000                  		dc.w SME_IiJWw_132-SME_IiJWw, SME_IiJWw_13D-SME_IiJWw	
000290D8 0000 0000                  		dc.w SME_IiJWw_152-SME_IiJWw, SME_IiJWw_15D-SME_IiJWw	
000290DC 0000 0000                  		dc.w SME_IiJWw_16D-SME_IiJWw, SME_IiJWw_187-SME_IiJWw	
000290E0 0000 0000                  		dc.w SME_IiJWw_1A6-SME_IiJWw, SME_IiJWw_1BB-SME_IiJWw	
000290E4 0000 0000                  		dc.w SME_IiJWw_1D5-SME_IiJWw, SME_IiJWw_1EA-SME_IiJWw	
000290E8 0000 0000                  		dc.w SME_IiJWw_204-SME_IiJWw, SME_IiJWw_219-SME_IiJWw	
000290EC 0000 0000                  		dc.w SME_IiJWw_224-SME_IiJWw, SME_IiJWw_22F-SME_IiJWw	
000290F0 0000 0000                  		dc.w SME_IiJWw_244-SME_IiJWw, SME_IiJWw_24F-SME_IiJWw	
000290F4 0000 0000                  		dc.w SME_IiJWw_25F-SME_IiJWw, SME_IiJWw_288-SME_IiJWw	
000290F8 0000 0000                  		dc.w SME_IiJWw_2B1-SME_IiJWw, SME_IiJWw_2C6-SME_IiJWw	
000290FC 0000 0000                  		dc.w SME_IiJWw_2E0-SME_IiJWw, SME_IiJWw_2F5-SME_IiJWw	
00029100 0000 0000                  		dc.w SME_IiJWw_30F-SME_IiJWw, SME_IiJWw_31A-SME_IiJWw	
00029104 0000 0000                  		dc.w SME_IiJWw_325-SME_IiJWw, SME_IiJWw_330-SME_IiJWw	
00029108 0000 0000                  		dc.w SME_IiJWw_33B-SME_IiJWw, SME_IiJWw_350-SME_IiJWw	
0002910C 0000 0000                  		dc.w SME_IiJWw_360-SME_IiJWw, SME_IiJWw_375-SME_IiJWw	
00029110 0000 0000                  		dc.w SME_IiJWw_385-SME_IiJWw, SME_IiJWw_390-SME_IiJWw	
00029114 0000 0000                  		dc.w SME_IiJWw_39B-SME_IiJWw, SME_IiJWw_3A6-SME_IiJWw	
00029118 0000 0000                  		dc.w SME_IiJWw_3B1-SME_IiJWw, SME_IiJWw_3C6-SME_IiJWw	
0002911C 0000 0000                  		dc.w SME_IiJWw_3D1-SME_IiJWw, SME_IiJWw_3E6-SME_IiJWw	
00029120 0000 0000                  		dc.w SME_IiJWw_3F1-SME_IiJWw, SME_IiJWw_3F7-SME_IiJWw	
00029124 0000 0000                  		dc.w SME_IiJWw_3FD-SME_IiJWw, SME_IiJWw_403-SME_IiJWw	
00029128 0000 0000                  		dc.w SME_IiJWw_409-SME_IiJWw, SME_IiJWw_40F-SME_IiJWw	
0002912C 0000 0000                  		dc.w SME_IiJWw_41A-SME_IiJWw, SME_IiJWw_420-SME_IiJWw	
00029130 0000 0000                  		dc.w SME_IiJWw_42B-SME_IiJWw, SME_IiJWw_431-SME_IiJWw	
00029134 0000 0000                  		dc.w SME_IiJWw_43C-SME_IiJWw, SME_IiJWw_451-SME_IiJWw	
00029138 0000 0000                  		dc.w SME_IiJWw_466-SME_IiJWw, SME_IiJWw_476-SME_IiJWw	
0002913C 0000 0000                  		dc.w SME_IiJWw_486-SME_IiJWw, SME_IiJWw_496-SME_IiJWw	
00029140 0000 0000                  		dc.w SME_IiJWw_4A1-SME_IiJWw, SME_IiJWw_4B1-SME_IiJWw	
00029144 0000 0000                  		dc.w SME_IiJWw_4C1-SME_IiJWw, SME_IiJWw_4D1-SME_IiJWw	
00029148 0000 0000                  		dc.w SME_IiJWw_4E6-SME_IiJWw, SME_IiJWw_4FB-SME_IiJWw	
0002914C 0000 0000                  		dc.w SME_IiJWw_515-SME_IiJWw, SME_IiJWw_52F-SME_IiJWw	
00029150 0000 0000                  		dc.w SME_IiJWw_53A-SME_IiJWw, SME_IiJWw_54A-SME_IiJWw	
00029154 0000 0000                  		dc.w SME_IiJWw_555-SME_IiJWw, SME_IiJWw_565-SME_IiJWw	
00029158 0000 0000                  		dc.w SME_IiJWw_570-SME_IiJWw, SME_IiJWw_580-SME_IiJWw	
0002915C 0000 0000                  		dc.w SME_IiJWw_59A-SME_IiJWw, SME_IiJWw_5B4-SME_IiJWw	
00029160 0000 0000                  		dc.w SME_IiJWw_5CE-SME_IiJWw, SME_IiJWw_5D9-SME_IiJWw	
00029164 0000 0000                  		dc.w SME_IiJWw_5E9-SME_IiJWw, SME_IiJWw_5EF-SME_IiJWw	
00029168 0000 0000                  		dc.w SME_IiJWw_5F5-SME_IiJWw, SME_IiJWw_5FB-SME_IiJWw	
0002916C 0000 0000                  		dc.w SME_IiJWw_60B-SME_IiJWw, SME_IiJWw_61B-SME_IiJWw	
00029170 0000 0000                  		dc.w SME_IiJWw_62B-SME_IiJWw, SME_IiJWw_63B-SME_IiJWw	
00029174 0000 0000                  		dc.w SME_IiJWw_646-SME_IiJWw, SME_IiJWw_64C-SME_IiJWw	
00029178 0000 0000                  		dc.w SME_IiJWw_652-SME_IiJWw, SME_IiJWw_658-SME_IiJWw	
0002917C 0000 0000                  		dc.w SME_IiJWw_65E-SME_IiJWw, SME_IiJWw_664-SME_IiJWw	
00029180 00                         SME_IiJWw_BC:	dc.b 0	
00029181 04                         SME_IiJWw_BD:	dc.b 4	
00029182 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00029187 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
0002918C 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
00029191 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00029196 03                         SME_IiJWw_D2:	dc.b 3	
00029197 EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
0002919C FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
000291A1 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
000291A6 03                         SME_IiJWw_E2:	dc.b 3	
000291A7 EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
000291AC FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
000291B1 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
000291B6 03                         SME_IiJWw_F2:	dc.b 3	
000291B7 EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
000291BC FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
000291C1 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
000291C6 03                         SME_IiJWw_102:	dc.b 3	
000291C7 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
000291CC 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
000291D1 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
000291D6 04                         SME_IiJWw_112:	dc.b 4	
000291D7 EB0D 0000 EC               		dc.b $EB, $D, 0, 0, $EC	
000291DC FB09 0008 EC               		dc.b $FB, 9, 0, 8, $EC	
000291E1 FB06 000E 04               		dc.b $FB, 6, 0, $E, 4	
000291E6 0B04 0014 EC               		dc.b $B, 4, 0, $14, $EC	
000291EB 02                         SME_IiJWw_127:	dc.b 2	
000291EC EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
000291F1 FC0E 0008 F5               		dc.b $FC, $E, 0, 8, $F5	
000291F6 02                         SME_IiJWw_132:	dc.b 2	
000291F7 ED09 0000 F3               		dc.b $ED, 9, 0, 0, $F3	
000291FC FD0A 0006 F3               		dc.b $FD, $A, 0, 6, $F3	
00029201 04                         SME_IiJWw_13D:	dc.b 4	
00029202 EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
00029207 FB09 0006 EC               		dc.b $FB, 9, 0, 6, $EC	
0002920C FB06 000C 04               		dc.b $FB, 6, 0, $C, 4	
00029211 0B04 0012 EC               		dc.b $B, 4, 0, $12, $EC	
00029216 02                         SME_IiJWw_152:	dc.b 2	
00029217 EC09 0000 F3               		dc.b $EC, 9, 0, 0, $F3	
0002921C FC0E 0006 EB               		dc.b $FC, $E, 0, 6, $EB	
00029221 03                         SME_IiJWw_15D:	dc.b 3	
00029222 ED0D 0000 EC               		dc.b $ED, $D, 0, 0, $EC	
00029227 FD0C 0008 F4               		dc.b $FD, $C, 0, 8, $F4	
0002922C 0509 000C F4               		dc.b 5, 9, 0, $C, $F4	
00029231 05                         SME_IiJWw_16D:	dc.b 5	
00029232 EB09 0000 EB               		dc.b $EB, 9, 0, 0, $EB	
00029237 EB06 0006 03               		dc.b $EB, 6, 0, 6, 3	
0002923C FB08 000C EB               		dc.b $FB, 8, 0, $C, $EB	
00029241 0309 000F F3               		dc.b 3, 9, 0, $F, $F3	
00029246 1300 0015 FB               		dc.b $13, 0, 0, $15, $FB	
0002924B 06                         SME_IiJWw_187:	dc.b 6	
0002924C EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00029251 EC01 0006 04               		dc.b $EC, 1, 0, 6, 4	
00029256 FC0C 0008 EC               		dc.b $FC, $C, 0, 8, $EC	
0002925B 0409 000C F4               		dc.b 4, 9, 0, $C, $F4	
00029260 FC05 0012 0C               		dc.b $FC, 5, 0, $12, $C	
00029265 F400 0016 14               		dc.b $F4, 0, 0, $16, $14	
0002926A 04                         SME_IiJWw_1A6:	dc.b 4	
0002926B ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00029270 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00029275 FD0D 0008 F5               		dc.b $FD, $D, 0, 8, $F5	
0002927A 0D08 0010 FD               		dc.b $D, 8, 0, $10, $FD	
0002927F 05                         SME_IiJWw_1BB:	dc.b 5	
00029280 EB09 0000 EB               		dc.b $EB, 9, 0, 0, $EB	
00029285 EB05 0006 03               		dc.b $EB, 5, 0, 6, 3	
0002928A FB0D 000A F3               		dc.b $FB, $D, 0, $A, $F3	
0002928F 0B08 0012 F3               		dc.b $B, 8, 0, $12, $F3	
00029294 1304 0015 FB               		dc.b $13, 4, 0, $15, $FB	
00029299 04                         SME_IiJWw_1D5:	dc.b 4	
0002929A EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
0002929F EC01 0006 04               		dc.b $EC, 1, 0, 6, 4	
000292A4 FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4	
000292A9 0C08 0010 FC               		dc.b $C, 8, 0, $10, $FC	
000292AE 05                         SME_IiJWw_1EA:	dc.b 5	
000292AF ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
000292B4 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
000292B9 FD00 0008 ED               		dc.b $FD, 0, 0, 8, $ED	
000292BE FD0D 0009 F5               		dc.b $FD, $D, 0, 9, $F5	
000292C3 0D08 0011 FD               		dc.b $D, 8, 0, $11, $FD	
000292C8 04                         SME_IiJWw_204:	dc.b 4	
000292C9 F407 0000 EB               		dc.b $F4, 7, 0, 0, $EB	
000292CE EC09 0008 FB               		dc.b $EC, 9, 0, 8, $FB	
000292D3 FC04 000E FB               		dc.b $FC, 4, 0, $E, $FB	
000292D8 0409 0010 FB               		dc.b 4, 9, 0, $10, $FB	
000292DD 02                         SME_IiJWw_219:	dc.b 2	
000292DE F407 0000 EC               		dc.b $F4, 7, 0, 0, $EC	
000292E3 EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC	
000292E8 02                         SME_IiJWw_224:	dc.b 2	
000292E9 F406 0000 ED               		dc.b $F4, 6, 0, 0, $ED	
000292EE F40A 0006 FD               		dc.b $F4, $A, 0, 6, $FD	
000292F3 04                         SME_IiJWw_22F:	dc.b 4	
000292F4 F406 0000 EB               		dc.b $F4, 6, 0, 0, $EB	
000292F9 EC09 0006 FB               		dc.b $EC, 9, 0, 6, $FB	
000292FE FC04 000C FB               		dc.b $FC, 4, 0, $C, $FB	
00029303 0409 000E FB               		dc.b 4, 9, 0, $E, $FB	
00029308 02                         SME_IiJWw_244:	dc.b 2	
00029309 F406 0000 EC               		dc.b $F4, 6, 0, 0, $EC	
0002930E F40B 0006 FC               		dc.b $F4, $B, 0, 6, $FC	
00029313 03                         SME_IiJWw_24F:	dc.b 3	
00029314 F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00029319 EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
0002931E F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
00029323 08                         SME_IiJWw_25F:	dc.b 8	
00029324 ED04 0000 F3               		dc.b $ED, 4, 0, 0, $F3	
00029329 F504 0002 EB               		dc.b $F5, 4, 0, 2, $EB	
0002932E F50A 0004 FB               		dc.b $F5, $A, 0, 4, $FB	
00029333 0D00 000D FB               		dc.b $D, 0, 0, $D, $FB	
00029338 FD00 000E 13               		dc.b $FD, 0, 0, $E, $13	
0002933D FD02 000F EB               		dc.b $FD, 2, 0, $F, $EB	
00029342 FD00 0012 F3               		dc.b $FD, 0, 0, $12, $F3	
00029347 0500 0813 F3               		dc.b 5, 0, 8, $13, $F3	
0002934C 08                         SME_IiJWw_288:	dc.b 8	
0002934D E408 0000 F4               		dc.b $E4, 8, 0, 0, $F4	
00029352 EC04 0003 FC               		dc.b $EC, 4, 0, 3, $FC	
00029357 F404 0005 EC               		dc.b $F4, 4, 0, 5, $EC	
0002935C F40A 0007 FC               		dc.b $F4, $A, 0, 7, $FC	
00029361 0C00 0010 FC               		dc.b $C, 0, 0, $10, $FC	
00029366 FC02 0011 EC               		dc.b $FC, 2, 0, $11, $EC	
0002936B FC00 0014 F4               		dc.b $FC, 0, 0, $14, $F4	
00029370 0400 0815 F4               		dc.b 4, 0, 8, $15, $F4	
00029375 04                         SME_IiJWw_2B1:	dc.b 4	
00029376 FB06 0000 ED               		dc.b $FB, 6, 0, 0, $ED	
0002937B F304 0006 ED               		dc.b $F3, 4, 0, 6, $ED	
00029380 EB0A 0008 FD               		dc.b $EB, $A, 0, 8, $FD	
00029385 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
0002938A 05                         SME_IiJWw_2C6:	dc.b 5	
0002938B FD06 0000 EB               		dc.b $FD, 6, 0, 0, $EB	
00029390 ED08 0006 F3               		dc.b $ED, 8, 0, 6, $F3	
00029395 F504 0009 EB               		dc.b $F5, 4, 0, 9, $EB	
0002939A F50D 000B FB               		dc.b $F5, $D, 0, $B, $FB	
0002939F 0508 0013 FB               		dc.b 5, 8, 0, $13, $FB	
000293A4 04                         SME_IiJWw_2E0:	dc.b 4	
000293A5 FC06 0000 EC               		dc.b $FC, 6, 0, 0, $EC	
000293AA F404 0006 EC               		dc.b $F4, 4, 0, 6, $EC	
000293AF EC0A 0008 FC               		dc.b $EC, $A, 0, 8, $FC	
000293B4 0404 0011 FC               		dc.b 4, 4, 0, $11, $FC	
000293B9 05                         SME_IiJWw_2F5:	dc.b 5	
000293BA FB06 0000 ED               		dc.b $FB, 6, 0, 0, $ED	
000293BF EB0A 0006 FD               		dc.b $EB, $A, 0, 6, $FD	
000293C4 F304 000F ED               		dc.b $F3, 4, 0, $F, $ED	
000293C9 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
000293CE 0B00 0013 FD               		dc.b $B, 0, 0, $13, $FD	
000293D3 02                         SME_IiJWw_30F:	dc.b 2	
000293D4 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
000293D9 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
000293DE 02                         SME_IiJWw_31A:	dc.b 2	
000293DF EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
000293E4 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
000293E9 02                         SME_IiJWw_325:	dc.b 2	
000293EA EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
000293EF FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
000293F4 02                         SME_IiJWw_330:	dc.b 2	
000293F5 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
000293FA FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
000293FF 04                         SME_IiJWw_33B:	dc.b 4	
00029400 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00029405 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002940A FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
0002940F FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00029414 03                         SME_IiJWw_350:	dc.b 3	
00029415 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002941A EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002941F FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00029424 04                         SME_IiJWw_360:	dc.b 4	
00029425 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002942A EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002942F FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00029434 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00029439 03                         SME_IiJWw_375:	dc.b 3	
0002943A EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002943F EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00029444 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00029449 02                         SME_IiJWw_385:	dc.b 2	
0002944A F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002944F F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00029454 02                         SME_IiJWw_390:	dc.b 2	
00029455 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002945A F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002945F 02                         SME_IiJWw_39B:	dc.b 2	
00029460 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00029465 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002946A 02                         SME_IiJWw_3A6:	dc.b 2	
0002946B F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00029470 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00029475 04                         SME_IiJWw_3B1:	dc.b 4	
00029476 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002947B F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
00029480 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00029485 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
0002948A 02                         SME_IiJWw_3C6:	dc.b 2	
0002948B F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
00029490 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00029495 04                         SME_IiJWw_3D1:	dc.b 4	
00029496 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002949B F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
000294A0 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000294A5 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
000294AA 02                         SME_IiJWw_3E6:	dc.b 2	
000294AB F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
000294B0 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000294B5 01                         SME_IiJWw_3F1:	dc.b 1	
000294B6 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000294BB 01                         SME_IiJWw_3F7:	dc.b 1	
000294BC F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000294C1 01                         SME_IiJWw_3FD:	dc.b 1	
000294C2 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000294C7 01                         SME_IiJWw_403:	dc.b 1	
000294C8 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000294CD 01                         SME_IiJWw_409:	dc.b 1	
000294CE F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000294D3 02                         SME_IiJWw_40F:	dc.b 2	
000294D4 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
000294D9 F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
000294DE 01                         SME_IiJWw_41A:	dc.b 1	
000294DF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000294E4 02                         SME_IiJWw_420:	dc.b 2	
000294E5 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
000294EA 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
000294EF 01                         SME_IiJWw_42B:	dc.b 1	
000294F0 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000294F5 02                         SME_IiJWw_431:	dc.b 2	
000294F6 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000294FB FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
00029500 04                         SME_IiJWw_43C:	dc.b 4	
00029501 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
00029506 FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
0002950B 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
00029510 0500 0010 E8               		dc.b 5, 0, 0, $10, $E8	
00029515 04                         SME_IiJWw_451:	dc.b 4	
00029516 F404 0000 FC               		dc.b $F4, 4, 0, 0, $FC	
0002951B FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4	
00029520 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4	
00029525 0400 000D EC               		dc.b 4, 0, 0, $D, $EC	
0002952A 03                         SME_IiJWw_466:	dc.b 3	
0002952B EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00029530 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
00029535 F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
0002953A 03                         SME_IiJWw_476:	dc.b 3	
0002953B EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
00029540 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
00029545 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
0002954A 03                         SME_IiJWw_486:	dc.b 3	
0002954B F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00029550 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00029555 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
0002955A 02                         SME_IiJWw_496:	dc.b 2	
0002955B F40A 0000 E8               		dc.b $F4, $A, 0, 0, $E8	
00029560 F40A 0800 00               		dc.b $F4, $A, 8, 0, 0	
00029565 03                         SME_IiJWw_4A1:	dc.b 3	
00029566 F40D 0000 E4               		dc.b $F4, $D, 0, 0, $E4	
0002956B FC00 0008 04               		dc.b $FC, 0, 0, 8, 4	
00029570 040C 0009 EC               		dc.b 4, $C, 0, 9, $EC	
00029575 03                         SME_IiJWw_4B1:	dc.b 3	
00029576 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
0002957B FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00029580 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00029585 03                         SME_IiJWw_4C1:	dc.b 3	
00029586 E80B 0000 F0               		dc.b $E8, $B, 0, 0, $F0	
0002958B 0804 000C F8               		dc.b 8, 4, 0, $C, $F8	
00029590 1000 000E F8               		dc.b $10, 0, 0, $E, $F8	
00029595 04                         SME_IiJWw_4D1:	dc.b 4	
00029596 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
0002959B 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000295A0 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000295A5 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000295AA 04                         SME_IiJWw_4E6:	dc.b 4	
000295AB F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000295B0 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000295B5 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000295BA F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000295BF 05                         SME_IiJWw_4FB:	dc.b 5	
000295C0 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
000295C5 F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
000295CA 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
000295CF 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
000295D4 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
000295D9 05                         SME_IiJWw_515:	dc.b 5	
000295DA E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
000295DF E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
000295E4 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
000295E9 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
000295EE 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
000295F3 02                         SME_IiJWw_52F:	dc.b 2	
000295F4 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
000295F9 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
000295FE 03                         SME_IiJWw_53A:	dc.b 3	
000295FF EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00029604 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00029609 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
0002960E 02                         SME_IiJWw_54A:	dc.b 2	
0002960F ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00029614 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00029619 03                         SME_IiJWw_555:	dc.b 3	
0002961A EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
0002961F 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00029624 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00029629 02                         SME_IiJWw_565:	dc.b 2	
0002962A EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
0002962F FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
00029634 03                         SME_IiJWw_570:	dc.b 3	
00029635 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
0002963A 0405 0009 F8               		dc.b 4, 5, 0, 9, $F8	
0002963F E400 000D F8               		dc.b $E4, 0, 0, $D, $F8	
00029644 05                         SME_IiJWw_580:	dc.b 5	
00029645 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
0002964A E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
0002964F F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00029654 080C 0010 F4               		dc.b 8, $C, 0, $10, $F4	
00029659 1000 0014 F4               		dc.b $10, 0, 0, $14, $F4	
0002965E 05                         SME_IiJWw_59A:	dc.b 5	
0002965F E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00029664 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00029669 F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
0002966E 080C 0010 F4               		dc.b 8, $C, 0, $10, $F4	
00029673 1000 0014 F4               		dc.b $10, 0, 0, $14, $F4	
00029678 05                         SME_IiJWw_5B4:	dc.b 5	
00029679 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
0002967E E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00029683 F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00029688 080C 0010 F4               		dc.b 8, $C, 0, $10, $F4	
0002968D 1000 0014 F4               		dc.b $10, 0, 0, $14, $F4	
00029692 02                         SME_IiJWw_5CE:	dc.b 2	
00029693 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00029698 F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
0002969D 03                         SME_IiJWw_5D9:	dc.b 3	
0002969E EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
000296A3 F40E 0003 F0               		dc.b $F4, $E, 0, 3, $F0	
000296A8 0C08 000F F8               		dc.b $C, 8, 0, $F, $F8	
000296AD 01                         SME_IiJWw_5E9:	dc.b 1	
000296AE F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4	
000296B3 01                         SME_IiJWw_5EF:	dc.b 1	
000296B4 F406 0000 F8               		dc.b $F4, 6, 0, 0, $F8	
000296B9 01                         SME_IiJWw_5F5:	dc.b 1	
000296BA F801 0000 FC               		dc.b $F8, 1, 0, 0, $FC	
000296BF 03                         SME_IiJWw_5FB:	dc.b 3	
000296C0 F40D 0800 E4               		dc.b $F4, $D, 8, 0, $E4	
000296C5 FC05 0808 04               		dc.b $FC, 5, 8, 8, 4	
000296CA 0408 080C EC               		dc.b 4, 8, 8, $C, $EC	
000296CF 03                         SME_IiJWw_60B:	dc.b 3	
000296D0 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
000296D5 FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
000296DA 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
000296DF 03                         SME_IiJWw_61B:	dc.b 3	
000296E0 F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC	
000296E5 F801 000C 0C               		dc.b $F8, 1, 0, $C, $C	
000296EA 080C 000E F4               		dc.b 8, $C, 0, $E, $F4	
000296EF 03                         SME_IiJWw_62B:	dc.b 3	
000296F0 EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
000296F5 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
000296FA 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
000296FF 02                         SME_IiJWw_63B:	dc.b 2	
00029700 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00029705 F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
0002970A 01                         SME_IiJWw_646:	dc.b 1	
0002970B F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00029710 01                         SME_IiJWw_64C:	dc.b 1	
00029711 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00029716 01                         SME_IiJWw_652:	dc.b 1	
00029717 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
0002971C 01                         SME_IiJWw_658:	dc.b 1	
0002971D F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00029722 01                         SME_IiJWw_65E:	dc.b 1	
00029723 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00029728 01                         SME_IiJWw_664:	dc.b 1	
00029729 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
0002972E                            		even
0002972E                            		even
0002972E                            
0002972E                            ; ---------------------------------------------------------------------------
0002972E                            ; Uncompressed graphics	loading	array for Sonic
0002972E                            ; ---------------------------------------------------------------------------
0002972E                            SonicDynPLC:
0002972E                            	include "_inc\Sonic dynamic pattern load cues.asm"
0002972E                            ; ---------------------------------------------------------------------------
0002972E                            ; Uncompressed graphics	loading	array for Sonic
0002972E                            ; ---------------------------------------------------------------------------
0002972E 0000                       		dc.w SonPLC_Blank-SonicDynPLC
00029730 0000                       		dc.w SonPLC_Stand-SonicDynPLC
00029732 0000                       		dc.w SonPLC_Wait1-SonicDynPLC
00029734 0000                       		dc.w SonPLC_Wait2-SonicDynPLC
00029736 0000                       		dc.w SonPLC_Wait3-SonicDynPLC
00029738 0000                       		dc.w SonPLC_LookUp-SonicDynPLC
0002973A 0000                       		dc.w SonPLC_Walk11-SonicDynPLC
0002973C 0000                       		dc.w SonPLC_Walk12-SonicDynPLC
0002973E 0000                       		dc.w SonPLC_Walk13-SonicDynPLC
00029740 0000                       		dc.w SonPLC_Walk14-SonicDynPLC
00029742 0000                       		dc.w SonPLC_Walk15-SonicDynPLC
00029744 0000                       		dc.w SonPLC_Walk16-SonicDynPLC
00029746 0000                       		dc.w SonPLC_Walk21-SonicDynPLC
00029748 0000                       		dc.w SonPLC_Walk22-SonicDynPLC
0002974A 0000                       		dc.w SonPLC_Walk23-SonicDynPLC
0002974C 0000                       		dc.w SonPLC_Walk24-SonicDynPLC
0002974E 0000                       		dc.w SonPLC_Walk25-SonicDynPLC
00029750 0000                       		dc.w SonPLC_Walk26-SonicDynPLC
00029752 0000                       		dc.w SonPLC_Walk31-SonicDynPLC
00029754 0000                       		dc.w SonPLC_Walk32-SonicDynPLC
00029756 0000                       		dc.w SonPLC_Walk33-SonicDynPLC
00029758 0000                       		dc.w SonPLC_Walk34-SonicDynPLC
0002975A 0000                       		dc.w SonPLC_Walk35-SonicDynPLC
0002975C 0000                       		dc.w SonPLC_Walk36-SonicDynPLC
0002975E 0000                       		dc.w SonPLC_Walk41-SonicDynPLC
00029760 0000                       		dc.w SonPLC_Walk42-SonicDynPLC
00029762 0000                       		dc.w SonPLC_Walk43-SonicDynPLC
00029764 0000                       		dc.w SonPLC_Walk44-SonicDynPLC
00029766 0000                       		dc.w SonPLC_Walk45-SonicDynPLC
00029768 0000                       		dc.w SonPLC_Walk46-SonicDynPLC
0002976A 0000                       		dc.w SonPLC_Run11-SonicDynPLC
0002976C 0000                       		dc.w SonPLC_Run12-SonicDynPLC
0002976E 0000                       		dc.w SonPLC_Run13-SonicDynPLC
00029770 0000                       		dc.w SonPLC_Run14-SonicDynPLC
00029772 0000                       		dc.w SonPLC_Run21-SonicDynPLC
00029774 0000                       		dc.w SonPLC_Run22-SonicDynPLC
00029776 0000                       		dc.w SonPLC_Run23-SonicDynPLC
00029778 0000                       		dc.w SonPLC_Run24-SonicDynPLC
0002977A 0000                       		dc.w SonPLC_Run31-SonicDynPLC
0002977C 0000                       		dc.w SonPLC_Run32-SonicDynPLC
0002977E 0000                       		dc.w SonPLC_Run33-SonicDynPLC
00029780 0000                       		dc.w SonPLC_Run34-SonicDynPLC
00029782 0000                       		dc.w SonPLC_Run41-SonicDynPLC
00029784 0000                       		dc.w SonPLC_Run42-SonicDynPLC
00029786 0000                       		dc.w SonPLC_Run43-SonicDynPLC
00029788 0000                       		dc.w SonPLC_Run44-SonicDynPLC
0002978A 0000                       		dc.w SonPLC_Roll1-SonicDynPLC
0002978C 0000                       		dc.w SonPLC_Roll2-SonicDynPLC
0002978E 0000                       		dc.w SonPLC_Roll3-SonicDynPLC
00029790 0000                       		dc.w SonPLC_Roll4-SonicDynPLC
00029792 0000                       		dc.w SonPLC_Roll5-SonicDynPLC
00029794 0000                       		dc.w SonPLC_Warp1-SonicDynPLC
00029796 0000                       		dc.w SonPLC_Warp2-SonicDynPLC
00029798 0000                       		dc.w SonPLC_Warp3-SonicDynPLC
0002979A 0000                       		dc.w SonPLC_Warp4-SonicDynPLC
0002979C 0000                       		dc.w SonPLC_Stop1-SonicDynPLC
0002979E 0000                       		dc.w SonPLC_Stop2-SonicDynPLC
000297A0 0000                       		dc.w SonPLC_Duck-SonicDynPLC
000297A2 0000                       		dc.w SonPLC_Balance1-SonicDynPLC
000297A4 0000                       		dc.w SonPLC_Balance2-SonicDynPLC
000297A6 0000                       		dc.w SonPLC_Float1-SonicDynPLC
000297A8 0000                       		dc.w SonPLC_Float2-SonicDynPLC
000297AA 0000                       		dc.w SonPLC_Float3-SonicDynPLC
000297AC 0000                       		dc.w SonPLC_Float4-SonicDynPLC
000297AE 0000                       		dc.w SonPLC_Spring-SonicDynPLC
000297B0 0000                       		dc.w SonPLC_Hang1-SonicDynPLC
000297B2 0000                       		dc.w SonPLC_Hang2-SonicDynPLC
000297B4 0000                       		dc.w SonPLC_Leap1-SonicDynPLC
000297B6 0000                       		dc.w SonPLC_Leap2-SonicDynPLC
000297B8 0000                       		dc.w SonPLC_Push1-SonicDynPLC
000297BA 0000                       		dc.w SonPLC_Push2-SonicDynPLC
000297BC 0000                       		dc.w SonPLC_Push3-SonicDynPLC
000297BE 0000                       		dc.w SonPLC_Push4-SonicDynPLC
000297C0 0000                       		dc.w SonPLC_Slide-SonicDynPLC
000297C2 0000                       		dc.w SonPLC_BblUnk-SonicDynPLC
000297C4 0000                       		dc.w SonPLC_Death1-SonicDynPLC
000297C6 0000                       		dc.w SonPLC_Drown-SonicDynPLC
000297C8 0000                       		dc.w SonPLC_Burnt-SonicDynPLC
000297CA 0000                       		dc.w SonPLC_Shrink1-SonicDynPLC
000297CC 0000                       		dc.w SonPLC_Shrink2-SonicDynPLC
000297CE 0000                       		dc.w SonPLC_Shrink3-SonicDynPLC
000297D0 0000                       		dc.w SonPLC_Shrink4-SonicDynPLC
000297D2 0000                       		dc.w SonPLC_Shrink5-SonicDynPLC
000297D4 0000                       		dc.w SonPLC_Float1-SonicDynPLC
000297D6 0000                       		dc.w SonPLC_Float3-SonicDynPLC
000297D8 0000                       		dc.w SonPLC_Injury1-SonicDynPLC
000297DA 0000                       		dc.w SonPLC_Bubble-SonicDynPLC
000297DC 0000                       		dc.w SonPLC_Injury2-SonicDynPLC
000297DE 0000                       		dc.w SonPLC_Spin_Dash1-SonicDynPLC	;58
000297E0 0000                       		dc.w SonPLC_Spin_Dash2-SonicDynPLC	;59
000297E2 0000                       		dc.w SonPLC_Spin_Dash3-SonicDynPLC	;5A
000297E4 0000                       		dc.w SonPLC_Spin_Dash4-SonicDynPLC	;5B
000297E6 0000                       		dc.w SonPLC_Spin_Dash5-SonicDynPLC	;5C
000297E8 0000                       		dc.w SonPLC_Spin_Dash6-SonicDynPLC	;5D
000297EA 0000                                       dc.w SonPLC_Peelout1-SonicDynPLC            ;5E
000297EC 0000                                       dc.w SonPLC_Peelout2-SonicDynPLC             ;5F
000297EE 0000                                       dc.w SonPLC_Peelout3-SonicDynPLC            ;60
000297F0 0000                                       dc.w SonPLC_Peelout4-SonicDynPLC             ;61
000297F2 0000                       		dc.w SonPLC_spring01-SonicDynPLC;62
000297F4 0000                       		dc.w SonPLC_spring02-SonicDynPLC;63
000297F6 0000                       		dc.w SonPLC_spring03-SonicDynPLC;64
000297F8 0000                       		dc.w SonPLC_spring04-SonicDynPLC;65
000297FA 0000                       		dc.w SonPLC_spring05-SonicDynPLC;66
000297FC 0000                                       dc.w SonPLC_outing11-SonicDynPLC            ;67
000297FE 0000                                       dc.w SonPLC_outing12-SonicDynPLC             ;68
00029800 0000                                       dc.w SonPLC_outing13-SonicDynPLC            ;69
00029802 0000                                       dc.w SonPLC_outing14-SonicDynPLC             ;6A
00029804 0000                                       dc.w SonPLC_outing21-SonicDynPLC             ;6B
00029806 0000                       		dc.w SonPLC_outing22-SonicDynPLC             ;6C
00029808 0000                       		dc.w SonPLC_outing23-SonicDynPLC             ;6D
0002980A 0000                       		dc.w SonPLC_outing24-SonicDynPLC             ;6E
0002980C 0000                       		dc.w SonPLC_outing31-SonicDynPLC             ;6F
0002980E 0000                       		dc.w SonPLC_outing32-SonicDynPLC             ;70
00029810 0000                       		dc.w SonPLC_outing33-SonicDynPLC             ;71
00029812 0000                       		dc.w SonPLC_outing34-SonicDynPLC             ;72
00029814 0000                       		dc.w SonPLC_outing41-SonicDynPLC             ;73
00029816 0000                       		dc.w SonPLC_outing42-SonicDynPLC             ;74
00029818 0000                       		dc.w SonPLC_outing43-SonicDynPLC             ;75
0002981A 0000                       		dc.w SonPLC_outing44-SonicDynPLC             ;76
0002981C                            
0002981C                            
0002981C 00                         SonPLC_Blank:	dc.b 0
0002981D 0420 0070 0320 0B20 0E     SonPLC_Stand:	dc.b 4,	$20, 0,	$70, 3,	$20, $B, $20, $E
00029826 0350 1150 1720 1D          SonPLC_Wait1:	dc.b 3,	$50, $11, $50, $17, $20, $1D
0002982D 0350 2050 1720 1D          SonPLC_Wait2:	dc.b 3,	$50, $20, $50, $17, $20, $1D
00029834 0350 2050 1720 26          SonPLC_Wait3:	dc.b 3,	$50, $20, $50, $17, $20, $26
0002983B 0380 2920 0B20 0E          SonPLC_LookUp:	dc.b 3,	$80, $29, $20, $B, $20,	$E
00029842 0470 3250 3A50 4010 46     SonPLC_Walk11:	dc.b 4,	$70, $32, $50, $3A, $50, $40, $10, $46
0002984B 0270 32B0 48               SonPLC_Walk12:	dc.b 2,	$70, $32, $B0, $48
00029850 0250 5480 5A               SonPLC_Walk13:	dc.b 2,	$50, $54, $80, $5A
00029855 0450 5450 6350 6910 6F     SonPLC_Walk14:	dc.b 4,	$50, $54, $50, $63, $50, $69, $10, $6F
0002985E 0250 54B0 71               SonPLC_Walk15:	dc.b 2,	$50, $54, $B0, $71
00029863 0370 3230 7D50 81          SonPLC_Walk16:	dc.b 3,	$70, $32, $30, $7D, $50, $81
0002986A 0550 8750 8D20 9350 9600+  SonPLC_Walk21:	dc.b 5,	$50, $87, $50, $8D, $20, $93, $50, $96,	0, $9C
00029875 0650 8710 9D30 9F50 A330+  SonPLC_Walk22:	dc.b 6,	$50, $87, $10, $9D, $30, $9F, $50, $A3,	$30, $A9, 0, $AD
00029882 0450 AE10 B470 B620 BE     SonPLC_Walk23:	dc.b 4,	$50, $AE, $10, $B4, $70, $B6, $20, $BE
0002988B 0550 C130 C770 CB20 D310+  SonPLC_Walk24:	dc.b 5,	$50, $C1, $30, $C7, $70, $CB, $20, $D3,	$10, $D6
00029896 0450 C110 D870 DA20 E2     SonPLC_Walk25:	dc.b 4,	$50, $C1, $10, $D8, $70, $DA, $20, $E2
0002989F 0550 8710 9D00 9370 E520+  SonPLC_Walk26:	dc.b 5,	$50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED
000298AA 0470 F050 F810 FE51 00     SonPLC_Walk31:	dc.b 4,	$70, $F0, $50, $F8, $10, $FE, $51, 0
000298B3 0270 F0B1 06               SonPLC_Walk32:	dc.b 2,	$70, $F0, $B1, 6
000298B8 0251 1281 18               SonPLC_Walk33:	dc.b 2,	$51, $12, $81, $18
000298BD 0451 1251 2111 2751 29     SonPLC_Walk34:	dc.b 4,	$51, $12, $51, $21, $11, $27, $51, $29
000298C6 0251 12B1 2F               SonPLC_Walk35:	dc.b 2,	$51, $12, $B1, $2F
000298CB 0370 F001 0681 3B          SonPLC_Walk36:	dc.b 3,	$70, $F0, 1, 6,	$81, $3B
000298D2 0651 4411 4A11 4C81 4E01+  SonPLC_Walk41:	dc.b 6,	$51, $44, $11, $4A, $11, $4C, $81, $4E,	1, $57,	1, $58
000298DF 0651 4421 5911 5C11 5E81+  SonPLC_Walk42:	dc.b 6,	$51, $44, $21, $59, $11, $5C, $11, $5E,	$81, $60, 1, $57
000298EC 0451 6911 6F81 7111 7A     SonPLC_Walk43:	dc.b 4,	$51, $69, $11, $6F, $81, $71, $11, $7A
000298F5 0551 7C21 8211 8571 8721+  SonPLC_Walk44:	dc.b 5,	$51, $7C, $21, $82, $11, $85, $71, $87,	$21, $8F
00029900 0451 7C11 9281 9411 9D     SonPLC_Walk45:	dc.b 4,	$51, $7C, $11, $92, $81, $94, $11, $9D
00029909 0551 4481 9F11 5E11 A801+  SonPLC_Walk46:	dc.b 5,	$51, $44, $81, $9F, $11, $5E, $11, $A8,	1, $57
00029914 0251 AAB1 B0               SonPLC_Run11:	dc.b 2,	$51, $AA, $B1, $B0
00029919 0250 54B1 BC               SonPLC_Run12:	dc.b 2,	$50, $54, $B1, $BC
0002991E 0251 AAB1 C8               SonPLC_Run13:	dc.b 2,	$51, $AA, $B1, $C8
00029923 0250 54B1 D4               SonPLC_Run14:	dc.b 2,	$50, $54, $B1, $D4
00029928 0451 E011 E6B1 E801 F4     SonPLC_Run21:	dc.b 4,	$51, $E0, $11, $E6, $B1, $E8, 1, $F4
00029931 0351 F511 FBB1 FD          SonPLC_Run22:	dc.b 3,	$51, $F5, $11, $FB, $B1, $FD
00029938 0451 E012 09B2 0B01 F4     SonPLC_Run23:	dc.b 4,	$51, $E0, $12, 9, $B2, $B, 1, $F4
00029941 0351 F511 FBB2 17          SonPLC_Run24:	dc.b 3,	$51, $F5, $11, $FB, $B2, $17
00029948 0252 23B2 29               SonPLC_Run31:	dc.b 2,	$52, $23, $B2, $29
0002994D 0251 12B2 35               SonPLC_Run32:	dc.b 2,	$51, $12, $B2, $35
00029952 0252 23B2 41               SonPLC_Run33:	dc.b 2,	$52, $23, $B2, $41
00029957 0251 12B2 4D               SonPLC_Run34:	dc.b 2,	$51, $12, $B2, $4D
0002995C 0452 5912 5FB2 6102 6D     SonPLC_Run41:	dc.b 4,	$52, $59, $12, $5F, $B2, $61, 2, $6D
00029965 0272 6EB2 76               SonPLC_Run42:	dc.b 2,	$72, $6E, $B2, $76
0002996A 0452 5912 82B2 8402 6D     SonPLC_Run43:	dc.b 4,	$52, $59, $12, $82, $B2, $84, 2, $6D
00029973 0272 6EB2 90               SonPLC_Run44:	dc.b 2,	$72, $6E, $B2, $90
00029978 01F2 9C                    SonPLC_Roll1:	dc.b 1,	$F2, $9C
0002997B 01F2 AC                    SonPLC_Roll2:	dc.b 1,	$F2, $AC
0002997E 01F2 BC                    SonPLC_Roll3:	dc.b 1,	$F2, $BC
00029981 01F2 CC                    SonPLC_Roll4:	dc.b 1,	$F2, $CC
00029984 01F2 DC                    SonPLC_Roll5:	dc.b 1,	$F2, $DC
00029987 02B2 EC22 F8               SonPLC_Warp1:	dc.b 2,	$B2, $EC, $22, $F8
0002998C 01F2 FB                    SonPLC_Warp2:	dc.b 1,	$F2, $FB
0002998F 02B3 0B23 17               SonPLC_Warp3:	dc.b 2,	$B3, $B, $23, $17
00029994 01F3 1A                    SonPLC_Warp4:	dc.b 1,	$F3, $1A
00029997 0253 2AB3 30               SonPLC_Stop1:	dc.b 2,	$53, $2A, $B3, $30
0002999C 0453 3C73 4213 4A03 4C     SonPLC_Stop2:	dc.b 4,	$53, $3C, $73, $42, $13, $4A, 3, $4C
000299A5 0413 4D73 4F23 5703 5A     SonPLC_Duck:	dc.b 4,	$13, $4D, $73, $4F, $23, $57, 3, $5A
000299AE 0323 5B23 5EF3 61          SonPLC_Balance1:dc.b 3,	$23, $5B, $23, $5E, $F3, $61
000299B5 03B3 7173 7D00 71          SonPLC_Balance2:dc.b 3,	$B3, $71, $73, $7D, 0, $71
000299BC 0373 8533 8D23 91          SonPLC_Float1:	dc.b 3,	$73, $85, $33, $8D, $23, $91
000299C3 0183 94                    SonPLC_Float2:	dc.b 1,	$83, $94
000299C6 0373 9D03 A533 A6          SonPLC_Float3:	dc.b 3,	$73, $9D, 3, $A5, $33, $A6
000299CD 0373 AA33 B223 B6          SonPLC_Float4:	dc.b 3,	$73, $AA, $33, $B2, $23, $B6
000299D4 03B3 B913 C503 C7          SonPLC_Spring:	dc.b 3,	$B3, $B9, $13, $C5, 3, $C7
000299DB 04B3 C833 D403 D803 D9     SonPLC_Hang1:	dc.b 4,	$B3, $C8, $33, $D4, 3, $D8, 3, $D9
000299E4 04B3 DA33 E603 EA03 EB     SonPLC_Hang2:	dc.b 4,	$B3, $DA, $33, $E6, 3, $EA, 3, $EB
000299ED 0583 EC13 F553 F713 FD03+  SonPLC_Leap1:	dc.b 5,	$83, $EC, $13, $F5, $53, $F7, $13, $FD,	3, $FF
000299F8 0584 0014 0953 F713 FD03+  SonPLC_Leap2:	dc.b 5,	$84, 0,	$14, 9,	$53, $F7, $13, $FD, 3, $FF
00029A03 0284 0B74 14               SonPLC_Push1:	dc.b 2,	$84, $B, $74, $14
00029A08 0384 1C24 2514 28          SonPLC_Push2:	dc.b 3,	$84, $1C, $24, $25, $14, $28
00029A0F 0284 2A74 33               SonPLC_Push3:	dc.b 2,	$84, $2A, $74, $33
00029A14 0384 1C24 3B14 3E          SonPLC_Push4:	dc.b 3,	$84, $1C, $24, $3B, $14, $3E
00029A1B 0254 40B4 46               SonPLC_Slide:	dc.b 2,	$54, $40, $B4, $46
00029A20 0384 5234 5B04 5F          SonPLC_BblUnk:	dc.b 3,	$84, $52, $34, $5B, 4, $5F
00029A27 0374 6014 68B4 6A          SonPLC_Death1:	dc.b 3,	$74, $60, $14, $68, $B4, $6A
00029A2E 0574 7614 7E54 8034 8604+  SonPLC_Drown:	dc.b 5,	$74, $76, $14, $7E, $54, $80, $34, $86,	4, $8A
00029A39 0574 8B14 7E54 9334 8604+  SonPLC_Burnt:	dc.b 5,	$74, $8B, $14, $7E, $54, $93, $34, $86,	4, $8A
00029A44 0224 99F4 9C               SonPLC_Shrink1:	dc.b 2,	$24, $99, $F4, $9C
00029A49 0324 ACB4 AF24 BB          SonPLC_Shrink2:	dc.b 3,	$24, $AC, $B4, $AF, $24, $BB
00029A50 01B4 BE                    SonPLC_Shrink3:	dc.b 1,	$B4, $BE
00029A53 0154 CA                    SonPLC_Shrink4:	dc.b 1,	$54, $CA
00029A56 0114 D0                    SonPLC_Shrink5:	dc.b 1,	$14, $D0
00029A59 03B4 D214 DE34 E0          SonPLC_Injury1:	dc.b 3,	$B4, $D2, $14, $DE, $34, $E0
00029A60 0354 E4B4 EA10 6D          SonPLC_Bubble:	dc.b 3,	$54, $E4, $B4, $EA, $10, $6D
00029A67 02F4 F625 06               SonPLC_Injury2:	dc.b 2,	$F4, $F6, $25, 6
00029A6C 01F5 10                    SonPLC_Spin_Dash1:	dc.b 1, $F5, $10	; 01 F 510
00029A6F 01F5 20                    SonPLC_Spin_Dash2:	dc.b 1, $F5, $20	; 01 F 520
00029A72 01F5 30                    SonPLC_Spin_Dash3:	dc.b 1, $F5, $30	; 01 F 530
00029A75 01F5 40                    SonPLC_Spin_Dash4:	dc.b 1, $F5, $40	; 01 F 540
00029A78 01F5 50                    SonPLC_Spin_Dash5:	dc.b 1, $F5, $50	; 01 F 550
00029A7B 01F5 60                    SonPLC_Spin_Dash6:	dc.b 1, $F5, $60	; 01 F 560
00029A7E 02F5 7325 70               SonPLC_Peelout1: 	dc.b 2, $F5, $73, $25, $70
00029A83 02F5 8625 83               SonPLC_Peelout2:	dc.b 2, $F5, $86, $25, $83	
00029A88 02F5 9925 96               SonPLC_Peelout3:	dc.b 2, $F5, $99, $25, $96	
00029A8D 02F5 AB15 A9               SonPLC_Peelout4:	dc.b 2, $F5, $AB, $15, $A9
00029A92 02F5 BB45 CD               SonPLC_spring01:	dc.b 2, $F5, $BB,$45, $CD
00029A97 02F5 D345 E5               SonPLC_spring02:	dc.b 2, $F5, $D3,$45, $E5
00029A9C 02F5 EB45 FD               SonPLC_spring03:	dc.b 2, $F5, $EB,$45, $FD
00029AA1 02F6 0346 15               SonPLC_spring04:	dc.b 2, $F6, $03,$46, $15
00029AA6 02F6 1B46 2D               SonPLC_spring05:	dc.b 2, $F6, $1B,$46, $2D
00029AAB 02F5 7325 70               SonPLC_outing11: 	dc.b 2, $F5, $73, $25, $70
00029AB0 02F5 8625 83               SonPLC_outing12:	dc.b 2, $F5, $86, $25, $83	
00029AB5 02F5 9925 96               SonPLC_outing13:	dc.b 2, $F5, $99, $25, $96	
00029ABA 02F5 AB15 A9               SonPLC_outing14:	dc.b 2, $F5, $AB, $15, $A9
00029ABF 0451 E011 E6B1 E801 F4     SonPLC_outing21:	dc.b 4,	$51, $E0, $11, $E6, $B1, $E8, 1, $F4
00029AC8 0351 F511 FBB1 FD          SonPLC_outing22:	dc.b 3,	$51, $F5, $11, $FB, $B1, $FD
00029ACF 0451 E012 09B2 0B01 F4     SonPLC_outing23:	dc.b 4,	$51, $E0, $12, 9, $B2, $B, 1, $F4
00029AD8 0351 F511 FBB2 17          SonPLC_outing24:	dc.b 3,	$51, $F5, $11, $FB, $B2, $17
00029ADF 0252 23B2 29               SonPLC_outing31:	dc.b 2,	$52, $23, $B2, $29
00029AE4 0251 12B2 35               SonPLC_outing32:	dc.b 2,	$51, $12, $B2, $35
00029AE9 0252 23B2 41               SonPLC_outing33:	dc.b 2,	$52, $23, $B2, $41
00029AEE 0251 12B2 4D               SonPLC_outing34:	dc.b 2,	$51, $12, $B2, $4D
00029AF3 0452 5912 5FB2 6102 6D     SonPLC_outing41:	dc.b 4,	$52, $59, $12, $5F, $B2, $61, 2, $6D
00029AFC 0272 6EB2 76               SonPLC_outing42:	dc.b 2,	$72, $6E, $B2, $76
00029B01 0452 5912 82B2 8402 6D     SonPLC_outing43:	dc.b 4,	$52, $59, $12, $82, $B2, $84, 2, $6D
00029B0A 0272 6EB2 90               SonPLC_outing44:	dc.b 2,	$72, $6E, $B2, $90
00029B10 00                         		even
00029B10 00                         		even
00029B10                            MightyDynPLC:
00029B10                                    include "_inc\Mighty dynamic pattern load cues.asm"
00029B10                            ; --------------------------------------------------------------------------------
00029B10                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00029B10                            
00029B10                            SME_HNAKJ:	
00029B10 0000 0000                  		dc.w SME_HNAKJ_BC-SME_HNAKJ, SME_HNAKJ_BD-SME_HNAKJ	
00029B14 0000 0000                  		dc.w SME_HNAKJ_C6-SME_HNAKJ, SME_HNAKJ_CD-SME_HNAKJ	
00029B18 0000 0000                  		dc.w SME_HNAKJ_D4-SME_HNAKJ, SME_HNAKJ_DB-SME_HNAKJ	
00029B1C 0000 0000                  		dc.w SME_HNAKJ_E2-SME_HNAKJ, SME_HNAKJ_EB-SME_HNAKJ	
00029B20 0000 0000                  		dc.w SME_HNAKJ_F0-SME_HNAKJ, SME_HNAKJ_F5-SME_HNAKJ	
00029B24 0000 0000                  		dc.w SME_HNAKJ_FE-SME_HNAKJ, SME_HNAKJ_103-SME_HNAKJ	
00029B28 0000 0000                  		dc.w SME_HNAKJ_10A-SME_HNAKJ, SME_HNAKJ_115-SME_HNAKJ	
00029B2C 0000 0000                  		dc.w SME_HNAKJ_122-SME_HNAKJ, SME_HNAKJ_12B-SME_HNAKJ	
00029B30 0000 0000                  		dc.w SME_HNAKJ_136-SME_HNAKJ, SME_HNAKJ_13F-SME_HNAKJ	
00029B34 0000 0000                  		dc.w SME_HNAKJ_14A-SME_HNAKJ, SME_HNAKJ_153-SME_HNAKJ	
00029B38 0000 0000                  		dc.w SME_HNAKJ_158-SME_HNAKJ, SME_HNAKJ_15D-SME_HNAKJ	
00029B3C 0000 0000                  		dc.w SME_HNAKJ_166-SME_HNAKJ, SME_HNAKJ_16B-SME_HNAKJ	
00029B40 0000 0000                  		dc.w SME_HNAKJ_172-SME_HNAKJ, SME_HNAKJ_183-SME_HNAKJ	
00029B44 0000 0000                  		dc.w SME_HNAKJ_194-SME_HNAKJ, SME_HNAKJ_19D-SME_HNAKJ	
00029B48 0000 0000                  		dc.w SME_HNAKJ_1A8-SME_HNAKJ, SME_HNAKJ_1B1-SME_HNAKJ	
00029B4C 0000 0000                  		dc.w SME_HNAKJ_1BC-SME_HNAKJ, SME_HNAKJ_1C1-SME_HNAKJ	
00029B50 0000 0000                  		dc.w SME_HNAKJ_1C6-SME_HNAKJ, SME_HNAKJ_1CB-SME_HNAKJ	
00029B54 0000 0000                  		dc.w SME_HNAKJ_1D0-SME_HNAKJ, SME_HNAKJ_1D9-SME_HNAKJ	
00029B58 0000 0000                  		dc.w SME_HNAKJ_1E0-SME_HNAKJ, SME_HNAKJ_1E9-SME_HNAKJ	
00029B5C 0000 0000                  		dc.w SME_HNAKJ_1F0-SME_HNAKJ, SME_HNAKJ_1F5-SME_HNAKJ	
00029B60 0000 0000                  		dc.w SME_HNAKJ_1FA-SME_HNAKJ, SME_HNAKJ_1FF-SME_HNAKJ	
00029B64 0000 0000                  		dc.w SME_HNAKJ_204-SME_HNAKJ, SME_HNAKJ_20D-SME_HNAKJ	
00029B68 0000 0000                  		dc.w SME_HNAKJ_212-SME_HNAKJ, SME_HNAKJ_21B-SME_HNAKJ	
00029B6C 0000 0000                  		dc.w SME_HNAKJ_220-SME_HNAKJ, SME_HNAKJ_223-SME_HNAKJ	
00029B70 0000 0000                  		dc.w SME_HNAKJ_226-SME_HNAKJ, SME_HNAKJ_229-SME_HNAKJ	
00029B74 0000 0000                  		dc.w SME_HNAKJ_22C-SME_HNAKJ, SME_HNAKJ_22F-SME_HNAKJ	
00029B78 0000 0000                  		dc.w SME_HNAKJ_234-SME_HNAKJ, SME_HNAKJ_237-SME_HNAKJ	
00029B7C 0000 0000                  		dc.w SME_HNAKJ_23C-SME_HNAKJ, SME_HNAKJ_23F-SME_HNAKJ	
00029B80 0000 0000                  		dc.w SME_HNAKJ_244-SME_HNAKJ, SME_HNAKJ_24D-SME_HNAKJ	
00029B84 0000 0000                  		dc.w SME_HNAKJ_256-SME_HNAKJ, SME_HNAKJ_25D-SME_HNAKJ	
00029B88 0000 0000                  		dc.w SME_HNAKJ_264-SME_HNAKJ, SME_HNAKJ_26B-SME_HNAKJ	
00029B8C 0000 0000                  		dc.w SME_HNAKJ_26E-SME_HNAKJ, SME_HNAKJ_275-SME_HNAKJ	
00029B90 0000 0000                  		dc.w SME_HNAKJ_27C-SME_HNAKJ, SME_HNAKJ_283-SME_HNAKJ	
00029B94 0000 0000                  		dc.w SME_HNAKJ_28C-SME_HNAKJ, SME_HNAKJ_295-SME_HNAKJ	
00029B98 0000 0000                  		dc.w SME_HNAKJ_2A0-SME_HNAKJ, SME_HNAKJ_2AB-SME_HNAKJ	
00029B9C 0000 0000                  		dc.w SME_HNAKJ_2B0-SME_HNAKJ, SME_HNAKJ_2B7-SME_HNAKJ	
00029BA0 0000 0000                  		dc.w SME_HNAKJ_2BC-SME_HNAKJ, SME_HNAKJ_2C3-SME_HNAKJ	
00029BA4 0000 0000                  		dc.w SME_HNAKJ_2C8-SME_HNAKJ, SME_HNAKJ_2CF-SME_HNAKJ	
00029BA8 0000 0000                  		dc.w SME_HNAKJ_2DA-SME_HNAKJ, SME_HNAKJ_2E5-SME_HNAKJ	
00029BAC 0000 0000                  		dc.w SME_HNAKJ_2F0-SME_HNAKJ, SME_HNAKJ_2F5-SME_HNAKJ	
00029BB0 0000 0000                  		dc.w SME_HNAKJ_2FC-SME_HNAKJ, SME_HNAKJ_2FF-SME_HNAKJ	
00029BB4 0000 0000                  		dc.w SME_HNAKJ_302-SME_HNAKJ, SME_HNAKJ_305-SME_HNAKJ	
00029BB8 0000 0000                  		dc.w SME_HNAKJ_30C-SME_HNAKJ, SME_HNAKJ_313-SME_HNAKJ	
00029BBC 0000 0000                  		dc.w SME_HNAKJ_31A-SME_HNAKJ, SME_HNAKJ_321-SME_HNAKJ	
00029BC0 0000 0000                  		dc.w SME_HNAKJ_326-SME_HNAKJ, SME_HNAKJ_329-SME_HNAKJ	
00029BC4 0000 0000                  		dc.w SME_HNAKJ_32C-SME_HNAKJ, SME_HNAKJ_32F-SME_HNAKJ	
00029BC8 0000 0000                  		dc.w SME_HNAKJ_332-SME_HNAKJ, SME_HNAKJ_335-SME_HNAKJ	
00029BCC 00                         SME_HNAKJ_BC:	dc.b 0	
00029BCD 0420 0070 0320 0B20 0E     SME_HNAKJ_BD:	dc.b 4, $20, 0, $70, 3, $20, $B, $20, $E	
00029BD6 0350 1150 1720 1D          SME_HNAKJ_C6:	dc.b 3, $50, $11, $50, $17, $20, $1D	
00029BDD 0350 2050 1720 1D          SME_HNAKJ_CD:	dc.b 3, $50, $20, $50, $17, $20, $1D	
00029BE4 0350 2050 1720 26          SME_HNAKJ_D4:	dc.b 3, $50, $20, $50, $17, $20, $26	
00029BEB 0380 2920 0B20 0E          SME_HNAKJ_DB:	dc.b 3, $80, $29, $20, $B, $20, $E	
00029BF2 0470 3250 3A50 4010 46     SME_HNAKJ_E2:	dc.b 4, $70, $32, $50, $3A, $50, $40, $10, $46	
00029BFB 0270 32B0 48               SME_HNAKJ_EB:	dc.b 2, $70, $32, $B0, $48	
00029C00 0250 5480 5A               SME_HNAKJ_F0:	dc.b 2, $50, $54, $80, $5A	
00029C05 0450 5450 6350 6910 6F     SME_HNAKJ_F5:	dc.b 4, $50, $54, $50, $63, $50, $69, $10, $6F	
00029C0E 0250 54B0 71               SME_HNAKJ_FE:	dc.b 2, $50, $54, $B0, $71	
00029C13 0370 3230 7D50 81          SME_HNAKJ_103:	dc.b 3, $70, $32, $30, $7D, $50, $81	
00029C1A 0550 8750 8D20 9350 9600+  SME_HNAKJ_10A:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
00029C25 0650 8710 9D30 9F50 A330+  SME_HNAKJ_115:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
00029C32 0450 AE10 B470 B620 BE     SME_HNAKJ_122:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
00029C3B 0550 C130 C770 CB20 D310+  SME_HNAKJ_12B:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
00029C46 0450 C110 D870 DA20 E2     SME_HNAKJ_136:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
00029C4F 0550 8710 9D00 9370 E520+  SME_HNAKJ_13F:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
00029C5A 0470 F050 F810 FE51 00     SME_HNAKJ_14A:	dc.b 4, $70, $F0, $50, $F8, $10, $FE, $51, 0	
00029C63 0270 F0B1 06               SME_HNAKJ_153:	dc.b 2, $70, $F0, $B1, 6	
00029C68 0251 1281 18               SME_HNAKJ_158:	dc.b 2, $51, $12, $81, $18	
00029C6D 0451 1251 2111 2751 29     SME_HNAKJ_15D:	dc.b 4, $51, $12, $51, $21, $11, $27, $51, $29	
00029C76 0251 12B1 2F               SME_HNAKJ_166:	dc.b 2, $51, $12, $B1, $2F	
00029C7B 0370 F001 0681 3B          SME_HNAKJ_16B:	dc.b 3, $70, $F0, 1, 6, $81, $3B	
00029C82 0811 4A11 4C81 4E01 5701+  SME_HNAKJ_172:	dc.b 8, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58, $21, $44, 1, $47, 2, $64	
00029C93 0821 5911 5C11 5E81 6001+  SME_HNAKJ_183:	dc.b 8, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57, $21, $44, 1, $47, 2, $64	
00029CA4 0451 6911 6F81 7111 7A     SME_HNAKJ_194:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
00029CAD 0551 7C21 8211 8571 8721+  SME_HNAKJ_19D:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
00029CB8 0451 7C11 9281 9411 9D     SME_HNAKJ_1A8:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
00029CC1 0551 4481 9F11 5E11 A801+  SME_HNAKJ_1B1:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
00029CCC 0251 AAB1 B0               SME_HNAKJ_1BC:	dc.b 2, $51, $AA, $B1, $B0	
00029CD1 0250 54B1 BC               SME_HNAKJ_1C1:	dc.b 2, $50, $54, $B1, $BC	
00029CD6 0251 AAB1 C8               SME_HNAKJ_1C6:	dc.b 2, $51, $AA, $B1, $C8	
00029CDB 0250 54B1 D4               SME_HNAKJ_1CB:	dc.b 2, $50, $54, $B1, $D4	
00029CE0 0451 E011 E6B1 E801 F4     SME_HNAKJ_1D0:	dc.b 4, $51, $E0, $11, $E6, $B1, $E8, 1, $F4	
00029CE9 0351 F511 FBB1 FD          SME_HNAKJ_1D9:	dc.b 3, $51, $F5, $11, $FB, $B1, $FD	
00029CF0 0451 E012 09B2 0B01 F4     SME_HNAKJ_1E0:	dc.b 4, $51, $E0, $12, 9, $B2, $B, 1, $F4	
00029CF9 0351 F511 FBB2 17          SME_HNAKJ_1E9:	dc.b 3, $51, $F5, $11, $FB, $B2, $17	
00029D00 0252 23B2 29               SME_HNAKJ_1F0:	dc.b 2, $52, $23, $B2, $29	
00029D05 0251 12B2 35               SME_HNAKJ_1F5:	dc.b 2, $51, $12, $B2, $35	
00029D0A 0252 23B2 41               SME_HNAKJ_1FA:	dc.b 2, $52, $23, $B2, $41	
00029D0F 0251 12B2 4D               SME_HNAKJ_1FF:	dc.b 2, $51, $12, $B2, $4D	
00029D14 0452 5912 5FB2 6102 6D     SME_HNAKJ_204:	dc.b 4, $52, $59, $12, $5F, $B2, $61, 2, $6D	
00029D1D 0272 6EB2 76               SME_HNAKJ_20D:	dc.b 2, $72, $6E, $B2, $76	
00029D22 0452 5912 82B2 8402 6D     SME_HNAKJ_212:	dc.b 4, $52, $59, $12, $82, $B2, $84, 2, $6D	
00029D2B 0272 6EB2 90               SME_HNAKJ_21B:	dc.b 2, $72, $6E, $B2, $90	
00029D30 01F2 9C                    SME_HNAKJ_220:	dc.b 1, $F2, $9C	
00029D33 01F2 AC                    SME_HNAKJ_223:	dc.b 1, $F2, $AC	
00029D36 01F2 BC                    SME_HNAKJ_226:	dc.b 1, $F2, $BC	
00029D39 01F2 CC                    SME_HNAKJ_229:	dc.b 1, $F2, $CC	
00029D3C 01F2 DC                    SME_HNAKJ_22C:	dc.b 1, $F2, $DC	
00029D3F 02B2 EC22 F8               SME_HNAKJ_22F:	dc.b 2, $B2, $EC, $22, $F8	
00029D44 01F2 FB                    SME_HNAKJ_234:	dc.b 1, $F2, $FB	
00029D47 02B3 0B23 17               SME_HNAKJ_237:	dc.b 2, $B3, $B, $23, $17	
00029D4C 01F3 1A                    SME_HNAKJ_23C:	dc.b 1, $F3, $1A	
00029D4F 0253 2AB3 30               SME_HNAKJ_23F:	dc.b 2, $53, $2A, $B3, $30	
00029D54 0453 3C73 4213 4A03 4C     SME_HNAKJ_244:	dc.b 4, $53, $3C, $73, $42, $13, $4A, 3, $4C	
00029D5D 0413 4D73 4F23 5703 5A     SME_HNAKJ_24D:	dc.b 4, $13, $4D, $73, $4F, $23, $57, 3, $5A	
00029D66 0323 5B23 5EF3 61          SME_HNAKJ_256:	dc.b 3, $23, $5B, $23, $5E, $F3, $61	
00029D6D 03B3 7173 7D00 71          SME_HNAKJ_25D:	dc.b 3, $B3, $71, $73, $7D, 0, $71	
00029D74 0373 8533 8D23 91          SME_HNAKJ_264:	dc.b 3, $73, $85, $33, $8D, $23, $91	
00029D7B 0183 94                    SME_HNAKJ_26B:	dc.b 1, $83, $94	
00029D7E 0373 9D03 A533 A6          SME_HNAKJ_26E:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00029D85 0373 AA33 B223 B6          SME_HNAKJ_275:	dc.b 3, $73, $AA, $33, $B2, $23, $B6	
00029D8C 03B3 B913 C503 C7          SME_HNAKJ_27C:	dc.b 3, $B3, $B9, $13, $C5, 3, $C7	
00029D93 04B3 C833 D403 D803 D9     SME_HNAKJ_283:	dc.b 4, $B3, $C8, $33, $D4, 3, $D8, 3, $D9	
00029D9C 04B3 DA33 E603 EA03 EB     SME_HNAKJ_28C:	dc.b 4, $B3, $DA, $33, $E6, 3, $EA, 3, $EB	
00029DA5 0583 EC13 F553 F713 FD03+  SME_HNAKJ_295:	dc.b 5, $83, $EC, $13, $F5, $53, $F7, $13, $FD, 3, $FF	
00029DB0 0584 0014 0953 F713 FD03+  SME_HNAKJ_2A0:	dc.b 5, $84, 0, $14, 9, $53, $F7, $13, $FD, 3, $FF	
00029DBB 0284 0B74 14               SME_HNAKJ_2AB:	dc.b 2, $84, $B, $74, $14	
00029DC0 0384 1C24 2514 28          SME_HNAKJ_2B0:	dc.b 3, $84, $1C, $24, $25, $14, $28	
00029DC7 0284 2A74 33               SME_HNAKJ_2B7:	dc.b 2, $84, $2A, $74, $33	
00029DCC 0384 1C24 3B14 3E          SME_HNAKJ_2BC:	dc.b 3, $84, $1C, $24, $3B, $14, $3E	
00029DD3 0254 40B4 46               SME_HNAKJ_2C3:	dc.b 2, $54, $40, $B4, $46	
00029DD8 0384 5234 5B04 5F          SME_HNAKJ_2C8:	dc.b 3, $84, $52, $34, $5B, 4, $5F	
00029DDF 0574 7614 7E54 8034 8604+  SME_HNAKJ_2CF:	dc.b 5, $74, $76, $14, $7E, $54, $80, $34, $86, 4, $8A	
00029DEA 0574 7614 7E54 8034 8604+  SME_HNAKJ_2DA:	dc.b 5, $74, $76, $14, $7E, $54, $80, $34, $86, 4, $8A	
00029DF5 0574 8B14 7E54 9334 8604+  SME_HNAKJ_2E5:	dc.b 5, $74, $8B, $14, $7E, $54, $93, $34, $86, 4, $8A	
00029E00 0224 99F4 9C               SME_HNAKJ_2F0:	dc.b 2, $24, $99, $F4, $9C	
00029E05 0324 ACB4 AF24 BB          SME_HNAKJ_2F5:	dc.b 3, $24, $AC, $B4, $AF, $24, $BB	
00029E0C 01B4 BE                    SME_HNAKJ_2FC:	dc.b 1, $B4, $BE	
00029E0F 0154 CA                    SME_HNAKJ_2FF:	dc.b 1, $54, $CA	
00029E12 0114 D0                    SME_HNAKJ_302:	dc.b 1, $14, $D0	
00029E15 0373 8533 8D23 91          SME_HNAKJ_305:	dc.b 3, $73, $85, $33, $8D, $23, $91	
00029E1C 0373 9D03 A533 A6          SME_HNAKJ_30C:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00029E23 03B4 D214 DE34 E0          SME_HNAKJ_313:	dc.b 3, $B4, $D2, $14, $DE, $34, $E0	
00029E2A 0354 E4B4 EA10 6D          SME_HNAKJ_31A:	dc.b 3, $54, $E4, $B4, $EA, $10, $6D	
00029E31 02F4 F625 06               SME_HNAKJ_321:	dc.b 2, $F4, $F6, $25, 6	
00029E36 01F5 10                    SME_HNAKJ_326:	dc.b 1, $F5, $10	
00029E39 01F5 20                    SME_HNAKJ_329:	dc.b 1, $F5, $20	
00029E3C 01F5 30                    SME_HNAKJ_32C:	dc.b 1, $F5, $30	
00029E3F 01F5 40                    SME_HNAKJ_32F:	dc.b 1, $F5, $40	
00029E42 01F5 50                    SME_HNAKJ_332:	dc.b 1, $F5, $50	
00029E45 01F5 60                    SME_HNAKJ_335:	dc.b 1, $F5, $60	
00029E48                            		even
00029E48                            		even
00029E48                            
00029E48                            ; ---------------------------------------------------------------------------
00029E48                            ; Uncompressed graphics	- Sonic
00029E48                            ; ---------------------------------------------------------------------------
00029E48                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic           
00034C48                                            incbin  artunc\peelout.bin
000355A8                                            incbin  artunc\sfscd.bin
000364A8                            		even
000364A8                            Art_Mighty:     incbin  artunc\mighty.bin       ; Mighty
000405C8                                            even
000405C8                            Art_Metal:      incbin  artunc\metal.bin
0004B3C8                                            incbin  artunc\metout.bin
0004BD28                                            incbin  artunc\metsfscd.bin
0004CC28                                            even
0004CC28                            Art_Tikal:      incbin  artunc\tikal.bin
00057A28                                            incbin  artunc\tikout.bin
00058388                                            incbin  artunc\tiksfscd.bin
00059288                                            even
00059288                            Art_Shadow:     incbin  artunc\shadow.bin       ; Shadow
00064088                                            incbin  artunc\peelout.bin
000649E8                                            incbin  artunc\shdsfscd.bin
000658E8                                            even
000658E8                            Art_Espio:      incbin  artunc\espio.bin        ; Espio
000706E8                                            incbin  artunc\peelout.bin
00071048                                            incbin  artunc\espsfscd.bin
00071F48                                            even
00071F48                            ; ---------------------------------------------------------------------------
00071F48                            ; Compressed graphics - various
00071F48                            ; ---------------------------------------------------------------------------
00071F48                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0007204C 00                         		even
0007204C                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
00072096                            		even
00072096                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0007222A                            		even
0007222A                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
00072372                            		even
00072372                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0007247C                            		even
0007247C                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
000724DC 00                         		even
000724DC                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0007271E                            		even
0007271E                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
000728A2 00                         		even
000728A2                            ; ---------------------------------------------------------------------------
000728A2                            ; Sprite mappings - walls of the special stage
000728A2                            ; ---------------------------------------------------------------------------
000728A2                            Map_SSWalls:
000728A2                            	include "_maps\SSwalls.asm"
000728A2                            ; ---------------------------------------------------------------------------
000728A2                            ; Sprite mappings - walls of the special stage
000728A2                            ; ---------------------------------------------------------------------------
000728A2 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
000728A6 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
000728AA 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
000728AE 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
000728B2 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
000728B6 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
000728BA 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
000728BE 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
000728C2 01                         byte_2C584:	dc.b 1
000728C3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000728C8 01                         byte_2C58A:	dc.b 1
000728C9 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
000728CE 01                         byte_2C590:	dc.b 1
000728CF F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
000728D4 01                         byte_2C596:	dc.b 1
000728D5 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
000728DA 01                         byte_2C59C:	dc.b 1
000728DB F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
000728E0 01                         byte_2C5A2:	dc.b 1
000728E1 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
000728E6 01                         byte_2C5A8:	dc.b 1
000728E7 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
000728EC 01                         byte_2C5AE:	dc.b 1
000728ED F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
000728F2 01                         byte_2C5B4:	dc.b 1
000728F3 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
000728F8 01                         byte_2C5BA:	dc.b 1
000728F9 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
000728FE 01                         byte_2C5C0:	dc.b 1
000728FF F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00072904 01                         byte_2C5C6:	dc.b 1
00072905 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0007290A 01                         byte_2C5CC:	dc.b 1
0007290B F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00072910 01                         byte_2C5D2:	dc.b 1
00072911 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00072916 01                         byte_2C5D8:	dc.b 1
00072917 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0007291C 01                         byte_2C5DE:	dc.b 1
0007291D F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00072922                            		even
00072922                            		even
00072922                            ; ---------------------------------------------------------------------------
00072922                            ; Compressed graphics - special stage
00072922                            ; ---------------------------------------------------------------------------
00072922                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0007323A                            		even
0007323A                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0007336E                            		even
0007336E                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00073FCC                            		even
00073FCC                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
000742CC                            		even
000742CC                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
000747B4                            		even
000747B4                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
000748A4 00                         		even
000748A4                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00074974                            		even
00074974                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00074A6A 00                         		even
00074A6A                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00074AD0 00                         		even
00074AD0                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00074B6E                            		even
00074B6E                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00074C30                            		even
00074C30                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00074D00 00                         		even
00074D00                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00074DCC 00                         		even
00074DCC                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00074E94                            		even
00074E94                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00074F5E                            		even
00074F5E                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
0007502E                            		even
0007502E                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00075220                            		even
00075220                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00075386 00                         		even
00075386                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00075438                            		even
00075438                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00075512                            		even
00075512                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
000755A0 00                         		even
000755A0                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0007571E                            		even
0007571E                            ; ---------------------------------------------------------------------------
0007571E                            ; Compressed graphics - GHZ stuff
0007571E                            ; ---------------------------------------------------------------------------
0007571E                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
0007577E                            		even
0007577E                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00075898                            		even
00075898                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00075978 00                         		even
00075978                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
000759DE 00                         		even
000759DE                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00075B7C                            		even
00075B7C                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00075C1A 00                         		even
00075C1A                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00075E2C                            		even
00075E2C                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00075F58                            		even
00075F58                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00076088 00                         		even
00076088                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00076132 00                         		even
00076132                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
0007619E 00                         		even
0007619E                            ; ---------------------------------------------------------------------------
0007619E                            ; Compressed graphics - LZ stuff
0007619E                            ; ---------------------------------------------------------------------------
0007619E                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
000762C2 00                         		even
000762C2                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00076A98                            		even
00076A98                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00076C18                            		even
00076C18                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00076D82 00                         		even
00076D82                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
000773C6 00                         		even
000773C6                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
0007747C                            		even
0007747C                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0007751E                            		even
0007751E                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0007767A 00                         		even
0007767A                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000776E4                            		even
000776E4                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00077834                            		even
00077834                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00077D0E                            		even
00077D0E                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00077E7C 00                         		even
00077E7C                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00078118 00                         		even
00078118                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00078250 00                         		even
00078250                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
0007837C 00                         		even
0007837C                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
0007848A                            		even
0007848A                            ; ---------------------------------------------------------------------------
0007848A                            ; Compressed graphics - MZ stuff
0007848A                            ; ---------------------------------------------------------------------------
0007848A                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00078716 00                         		even
00078716                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
000787D6                            		even
000787D6                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
0007888C 00                         		even
0007888C                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
000788EA 00                         		even
000788EA                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00078BC6 00                         		even
00078BC6                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000794B6                            		even
000794B6                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0007961E 00                         		even
0007961E                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000796A6                            		even
000796A6                            ; ---------------------------------------------------------------------------
000796A6                            ; Compressed graphics - SLZ stuff
000796A6                            ; ---------------------------------------------------------------------------
000796A6                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
000798E0                            		even
000798E0                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00079A26                            		even
00079A26                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00079C68 00                         		even
00079C68                            Nem_Hatofu:	incbin  artnem\hatofu.bin
00079E52                            		even
00079E52                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00079EB4 00                         		even
00079EB4                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00079F94 00                         		even
00079F94                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
0007A17C                            		even
0007A17C                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
0007A286 00                         		even
0007A286                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
0007A32A                            		even
0007A32A                            Nem_SlzEnBalls:	incbin	artnem\slzfire.bin	; MZ fireballs
0007A524                            		even
0007A524                            ; ---------------------------------------------------------------------------
0007A524                            ; Compressed graphics - SYZ stuff
0007A524                            ; ---------------------------------------------------------------------------
0007A524                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
0007A6B0 00                         		even
0007A6B0                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
0007A722                            		even
0007A722                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
0007A802 00                         		even
0007A802                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
0007AB3A                            		even
0007AB3A                            ; ---------------------------------------------------------------------------
0007AB3A                            ; Compressed graphics - SBZ stuff
0007AB3A                            ; ---------------------------------------------------------------------------
0007AB3A                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0007ABA4 00                         		even
0007ABA4                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
0007AE3C 00                         		even
0007AE3C                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
0007B03E                            		even
0007B03E                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0007B1DA                            		even
0007B1DA                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0007B508 00                         		even
0007B508                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0007B6E4 00                         		even
0007B6E4                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0007B74A                            		even
0007B74A                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0007B8C6                            		even
0007B8C6                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0007B9C0 00                         		even
0007B9C0                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0007BB48                            		even
0007BB48                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0007BBB0 00                         		even
0007BBB0                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0007BC06                            		even
0007BC06                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0007BD02 00                         		even
0007BD02                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0007BE18                            		even
0007BE18                            Nem_SBZChem:	incbin	artnem\sbzchem.bin	; MZ fireballs
0007C132                            		even
0007C132                            ; ---------------------------------------------------------------------------
0007C132                            ; Compressed graphics - enemies
0007C132                            ; ---------------------------------------------------------------------------
0007C132                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0007C5D0 00                         		even
0007C5D0                            Nem_rocket:	incbin	artnem\rocket.bin	; ball hog
0007CA70                            		even
0007CA70                            Nem_BallFire:	incbin	artnem\ballfire.bin	; ball hog
0007CEF0                            		even
0007CEF0                            Nem_BallLove:	incbin	artnem\ballove.bin	; ball hog
0007D360 00                         		even
0007D360                            Nem_BallWave:	incbin	artnem\ballwave.bin	; ball hog
0007D7F8                            		even
0007D7F8                            Nem_BallHogSLZ:	incbin	artnem\bahSLZ.bin	; ball hog
0007DC6A 00                         		even
0007DC6A                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0007DF30                            		even
0007DF30                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber used in Marble zone
0007E2D4 00                         		even
0007E2D4                            Nem_BuzzGHZ:	incbin	artnem\buzzghz.bin	; buzz bomber used in Green Hill zone
0007E5F8                            		even
0007E5F8                            Nem_BuzzSYZ:	incbin	artnem\buzzsyz.bin	; buzz bomber used in Spring Yard zone
0007E954                            		even
0007E954                            Nem_BuzzSLZ:	incbin	artnem\buzzslz.bin	; buzz bomber used in Star Light zone
0007ECC6 00                         		even
0007ECC6                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0007EEAC                            		even
0007EEAC                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0007F57A                            		even
0007F57A                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0007F7C2 00                         		even
0007F7C2                            Nem_Megamak:	incbin	artnem\choppersbz.bin	; chopper
0007F912                            		even
0007F912                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0007FB14                            		even
0007FB14                            Nem_Roller:	incbin	artnem\roller.bin	; roller
00080030                            		even
00080030                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0008025A                            		even
0008025A                            Nem_Springer:	incbin	artnem\springer.bin	; moto bug
0008049E 00                         		even
0008049E                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
00080AB4 00                         		even
00080AB4                            Nem_Yadrin:	incbin	artnem\rhinobot.bin	; yadrin
00080EFE                            		even
00080EFE                            Nem_Stump:	incbin	artnem\stump.bin	; mr stumpy
0008116A 00                         		even
0008116A                            Nem_Rhinobot:	incbin	artnem\rhinobot.bin	; rhinobot
000815B4                            		even
000815B4                            Nem_Skeleton:	incbin	artnem\skelet.bin	; skeleton from MZ
00081F9C                            		even
00081F9C                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
00082654 00                         		even
00082654                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0008289C 00                         		even
0008289C                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
00082B0E 00                         		even
00082B0E                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
00082CD4 00                         		even
00082CD4                            Nem_OrbinautLZ:	incbin	artnem\orbitlz.bin	; orbinaut
00082EBA                            		even
00082EBA                            Nem_OrbinautSLZ:	incbin	artnem\orbitslz.bin	; orbinaut
00083056 00                         		even
00083056                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
000831B2 00                         		even
000831B2                            Nem_CaterMZ:	incbin	artnem\catermz.bin	; caterkiller
000832FC                            		even
000832FC                            ; ---------------------------------------------------------------------------
000832FC                            ; Compressed graphics - various
000832FC                            ; ---------------------------------------------------------------------------
000832FC                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
000837AA                            		even
000837AA                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
000838E2                            		even
000838E2                            Nem_Hudm:	incbin	artnem\hudm.bin		; HUD (rings, time, score)
00083A1C                            		even
00083A1C                            Nem_Hudmet:	incbin	artnem\hudmet.bin		; HUD (rings, time, score)
00083B56                            		even
00083B56                            Nem_Hudtik:	incbin	artnem\hudtik.bin		; HUD (rings, time, score)
00083C90                            		even
00083C90                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
00083CEE 00                         		even
00083CEE                            Nem_Ring:	incbin	artnem\rings.bin	; rings
00083DE0                            		even
00083DE0                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0008421C 00                         		even
0008421C                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
00084872 00                         		even
00084872                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
00084924 00                         		even
00084924                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
00084AB6                            		even
00084AB6                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
00084BEA                            		even
00084BEA                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
00084CF6                            		even
00084CF6                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0008515E                            		even
0008515E                            Nem_MSignPost:	incbin	artnem\signpostm.bin	; end of level signpost
000855C2 00                         		even
000855C2                            Nem_MetSignPost:	incbin	artnem\signpostmet.bin	; end of level signpost
00085A56 00                         		even
00085A56                            Nem_TikSignPost:	incbin	artnem\signposttik.bin	; end of level signpost
00085E74                            		even
00085E74                            Nem_ShdSignPost:	incbin	artnem\signpostshd.bin	; end of level signpost
000862B2 00                         		even
000862B2                            Nem_EspSignPost:	incbin	artnem\signpostesp.bin	; end of level signpost
0008669A                            		even
0008669A                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0008675A 00                         		even
0008675A                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
000868D2                            		even
000868D2                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
00086BCE                            		even
00086BCE                            ; ---------------------------------------------------------------------------
00086BCE                            ; Compressed graphics - continue screen
00086BCE                            ; ---------------------------------------------------------------------------
00086BCE                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
00086E7A                            		even
00086E7A                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
000870B2                            		even
000870B2                            ; ---------------------------------------------------------------------------
000870B2                            ; Compressed graphics - animals
000870B2                            ; ---------------------------------------------------------------------------
000870B2                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
000870CA                            		even
000870CA                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
000870DE                            		even
000870DE                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
000870F6                            		even
000870F6                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0008710A                            		even
0008710A                            Nem_Pig:	incbin	artnem\pig.bin		; pig
00087122                            		even
00087122                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
00087136                            		even
00087136                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0008714E                            		even
0008714E                            ; ---------------------------------------------------------------------------
0008714E                            ; Compressed graphics - primary patterns and block mappings
0008714E                            ; ---------------------------------------------------------------------------
0008714E                            Blk16_GHZ:	incbin	map16\ghz.bin
00087B82                            		even
00087B82                            Blk16_TS:	incbin	map16\ts.bin
000884E6                            		even
000884E6                            Nem_GHZ:	incbin	artnem\8x8ghz.bin
0008B046 00                         		even
0008B046                            Nem_TS:	        incbin	artnem\8x8ts.bin
0008C798                            		even
0008C798                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
0008DE28                            		even
0008DE28                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
0008F196                            		even
0008F196                            Blk256_GHZ:	incbin	map256\ghz.bin
0009191C                            		even
0009191C                            Blk256_TS:	incbin	map256\ts.bin
00093792                            		even
00093792                            Blk16_LZ:	incbin	map16\lz.bin
00093B50 00                         		even
00093B50                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00095330 00                         		even
00095330                            Blk256_LZ:	incbin	map256\lz.bin
00097B3A 00                         		even
00097B3A                            Blk16_MZ:	incbin	map16\mz.bin
0009836E 00                         		even
0009836E                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0009A9E2                            		even
0009A9E2                            Blk256_MZ:	incbin	map256\mz.bin
0009C304 00                         		even
0009C304                            Blk16_SLZ:	incbin	map16\slz.bin
0009CA68 00                         		even
0009CA68                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0009FEA2 00                         		even
0009FEA2                            Blk256_SLZ:	incbin	map256\slz.bin
000A23F6                            		even
000A23F6                            Blk16_SYZ:	incbin	map16\syz.bin
000A2D94                            		even
000A2D94                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
000A6844                            		even
000A6844                            Blk256_SYZ:	incbin	map256\syz.bin
000A8944 00                         		even
000A8944                            Blk16_SBZ:	incbin	map16\sbz.bin
000A9770 00                         		even
000A9770                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
000ABD54 00                         		even
000ABD54                            Blk256_SBZ:	incbin	map256\sbz.bin
000AE378                            		even
000AE378                            ; ---------------------------------------------------------------------------
000AE378                            ; Compressed graphics - bosses and ending sequence
000AE378                            ; ---------------------------------------------------------------------------
000AE378                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
000AEB6A                            		even
000AEB6A                            Nem_SilvSon:	incbin	artnem\silvson.bin	; boss main patterns
000AF14A                            		even
000AF14A                            Nem_WhispKing:  incbin  artnem\kingwhisp.bin
000AF8E0                                            even
000AF8E0                            Nem_MechaSonic: incbin  artnem\mechason.bin
000B033C                                            even
000B033C                            Nem_DinoKing:	incbin	artnem\dinoking.bin
000B0522 00                         		even
000B0522                            Nem_BrutalNewt:	incbin	#Bosses\#BrutalNewt\meganewt.bin
000B0B08                            		even
000B0B08                            Nem_Hellgirl:	incbin	#Bosses\#Hellgirl\Hellgirl.bin
000B1336                            		even
000B1336                            Nem_TailsDoll:	incbin	#Bosses\#Tailsdoll\tailsdoll.bin
000B19BE 00                         		even
000B19BE                            Nem_Crusher:	incbin	#Bosses\#Crusher\Crusher.bin
000B1BD6 00                         		even
000B1BD6                            Nem_Eggrobo:	incbin	artnem\bossegrb.bin	; boss main patterns
000B2156 00                         		even
000B2156                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
000B243C 00                         		even
000B243C                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
000B2BD6                            		even
000B2BD6                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
000B33F0                            		even
000B33F0                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
000B3B44                            		even
000B3B44                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
000B40BC 00                         		even
000B40BC                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
000B41DE 00                         		even
000B41DE                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
000B43DA                            		even
000B43DA                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
000B557A                            		even
000B557A                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
000B5EAC                            		even
000B5EAC                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
000B627E                            		even
000B627E                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
000B680E                            		even
000B680E                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
000B6A92                            		even
000B6A92                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
000B6D1E                            		even
000B6D1E                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
000B6FA4 00                         		even
000B6FA4                            		incbin	misc\padding2.bin
000B70A8                            		even
000B70A8                            ; ---------------------------------------------------------------------------
000B70A8                            ; Collision data
000B70A8                            ; ---------------------------------------------------------------------------
000B70A8                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
000B71A8                            		even
000B71A8                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
000B81A8                            		even
000B81A8                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
000B91A8                            		even
000B91A8                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
000BA2A8                            		even
000BA2A8                            Col_LZ:		incbin	collide\lz.bin		; LZ index
000BAA58                            		even
000BAA58                            Col_MZ:		incbin	collide\mz.bin		; MZ index
000BB7C8                            		even
000BB7C8                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
000BC4F8                            		even
000BC4F8                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
000BD758                            		even
000BD758                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
000BED28                            		even
000BED28                            ; ---------------------------------------------------------------------------
000BED28                            ; Special layouts
000BED28                            ; ---------------------------------------------------------------------------
000BED28                            SS_1:		incbin	sslayout\1.bin
000BEFA2                            		even
000BEFA2                            SS_2:		incbin	sslayout\2.bin
000BF3B4                            		even
000BF3B4                            SS_3:		incbin	sslayout\3.bin
000BF710                            		even
000BF710                            SS_4:		incbin	sslayout\4.bin
000BFBEA                            		even
000BFBEA                            SS_5:		incbin	sslayout\5.bin
000C00BC                            		even
000C00BC                            SS_6:		incbin	sslayout\6.bin
000C03CC                            		even
000C03CC                            ; ---------------------------------------------------------------------------
000C03CC                            ; Animated uncompressed graphics
000C03CC                            ; ---------------------------------------------------------------------------
000C03CC                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
000C05CC                            		even
000C05CC                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
000C09CC                            		even
000C09CC                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
000C0E4C                            		even
000C0E4C                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
000C114C                            		even
000C114C                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
000C174C                            		even
000C174C                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
000C1A4C                            		even
000C1A4C                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
000C24CC                            		even
000C24CC                            
000C24CC                            ; ---------------------------------------------------------------------------
000C24CC                            ; Level	layout index
000C24CC                            ; ---------------------------------------------------------------------------
000C24CC 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
000C24D2 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
000C24D8 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
000C24DE 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
000C24E4 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
000C24EA 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
000C24F0 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
000C24F6 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
000C24FC 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
000C2502 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
000C2508 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
000C250E 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
000C2514 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000C251A 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000C2520 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000C2526 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
000C252C 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
000C2532 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
000C2538 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
000C253E 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
000C2544 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
000C254A 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
000C2550 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
000C2556 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
000C255C 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
000C2562 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
000C2568 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000C256E 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000C2574                            
000C2574                            Level_GHZ1:	incbin	levels\ghz1.bin
000C26B6                            		even
000C26B6 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
000C26BA                            Level_GHZ2:	incbin	levels\ghz2.bin
000C283C                            		even
000C283C 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
000C2840                            Level_GHZ3:	incbin	levels\ghz3.bin
000C2962                            		even
000C2962                            Level_GHZbg:	incbin	levels\ghzbg.bin
000C298A 00                         		even
000C298A 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
000C298E 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
000C2992                            
000C2992                            Level_LZ1:	incbin	levels\lz1.bin
000C2AA4                            		even
000C2AA4                            Level_LZbg:	incbin	levels\lzbg.bin
000C2BA6                            		even
000C2BA6 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
000C2BAA                            Level_LZ2:	incbin	levels\lz2.bin
000C2D0C                            		even
000C2D0C 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
000C2D10                            Level_LZ3:	incbin	levels\lz3.bin
000C2E2A                            		even
000C2E2A 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
000C2E2E                            Level_SBZ3:	incbin	levels\sbz3.bin
000C2EE8                            		even
000C2EE8 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
000C2EEC                            
000C2EEC                            Level_MZ1:	incbin	levels\mz1.bin
000C2FE4                            		even
000C2FE4                            Level_MZ1bg:	incbin	levels\mz1bg.bin
000C30A6                            		even
000C30A6                            Level_MZ2:	incbin	levels\mz2.bin
000C31A4                            		even
000C31A4                            Level_MZ2bg:	incbin	levels\mz2bg.bin
000C3284                            		even
000C3284 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
000C3288                            Level_MZ3:	incbin	levels\mz3.bin
000C336A                            		even
000C336A                            Level_MZ3bg:	incbin	levels\mz3bg.bin
000C340E 00                         		even
000C340E 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
000C3412 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
000C3416                            
000C3416                            Level_SLZ1:	incbin	levels\slz1.bin
000C35B8                            		even
000C35B8                            Level_SLZbg:	incbin	levels\slzbg.bin
000C364C 00                         		even
000C364C                            Level_SLZ2:	incbin	levels\slz2.bin
000C37D6                            		even
000C37D6                            Level_SLZ3:	incbin	levels\slz3.bin
000C38F0                            		even
000C38F0 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
000C38F4                            
000C38F4                            Level_SYZ1:	incbin	levels\syz1.bin
000C39F0                            		even
000C39F0                            Level_SYZbg:	incbin	levels\syzbg.bin
000C3A2A                            		even
000C3A2A 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
000C3A2E                            Level_SYZ2:	incbin	levels\syz2.bin
000C3B68                            		even
000C3B68 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
000C3B6C                            Level_SYZ3:	incbin	levels\syz3.bin
000C3CC6                            		even
000C3CC6 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
000C3CCA 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
000C3CCE                            
000C3CCE                            Level_SBZ1:	incbin	levels\sbz1.bin
000C3E48                            		even
000C3E48                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
000C3E86                            		even
000C3E86                            Level_SBZ2:	incbin	levels\sbz2.bin
000C3FC8                            		even
000C3FC8                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
000C401C                            		even
000C401C 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
000C4020 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
000C4024                            Level_End:	incbin	levels\ending.bin
000C4044                            		even
000C4044 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
000C4048                            
000C4048                            ; ---------------------------------------------------------------------------
000C4048                            ; Animated uncompressed giant ring graphics
000C4048                            ; ---------------------------------------------------------------------------
000C4048                            Art_BigRing:	incbin	artunc\bigring.bin
000C4C88                            		even
000C4C88                            
000C4C88                            		incbin	misc\padding3.bin
000C4D24                            		even
000C4D24                            
000C4D24                            ; ---------------------------------------------------------------------------
000C4D24                            ; Sprite locations index
000C4D24                            ; ---------------------------------------------------------------------------
000C4D24 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D28 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D2C 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D30 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D34 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D38 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D3C 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D40 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D44 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D48 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D4C 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D50 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D54 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D58 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D5C 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D60 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D64 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D68 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D6C 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D70 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D74 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D78 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D7C 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D80 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D84 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D88 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D8C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D90 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000C4D94 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
000C4D98 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
000C4D9C 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
000C4DA0 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
000C4DA4 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
000C4DA8 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
000C4DAC 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
000C4DB0 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
000C4DB4 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
000C4DBA                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
000C50F6                            		even
000C50F6                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
000C53EA                            		even
000C53EA                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
000C564E                            		even
000C564E                            ObjPos_LZ1:	incbin	objpos\lz1.bin
000C58B8                            		even
000C58B8                            ObjPos_LZ2:	incbin	objpos\lz2.bin
000C5BB8                            		even
000C5BB8                            ObjPos_LZ3:	incbin	objpos\lz3.bin
000C5F36                            		even
000C5F36                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000C6326                            		even
000C6326                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000C6358                            		even
000C6358                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
000C638A                            		even
000C638A                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
000C63BC                            		even
000C63BC                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
000C63EE                            		even
000C63EE                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000C6438                            		even
000C6438                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
000C6476                            		even
000C6476                            ObjPos_MZ1:	incbin	objpos\mz1.bin
000C6836                            		even
000C6836                            ObjPos_MZ2:	incbin	objpos\mz2.bin
000C6BCC                            		even
000C6BCC                            ObjPos_MZ3:	incbin	objpos\mz3.bin
000C6F98                            		even
000C6F98                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
000C71F6                            		even
000C71F6                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
000C740C                            		even
000C740C                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
000C7640                            		even
000C7640                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000C790A                            		even
000C790A                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
000C7B1A                            		even
000C7B1A                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
000C7D24                            		even
000C7D24                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
000C7EDA                            		even
000C7EDA                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
000C8006                            		even
000C8006                            ObjPos_FZ:	incbin	objpos\fz.bin
000C801E                            		even
000C801E                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
000C8050                            		even
000C8050                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
000C8082                            		even
000C8082                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
000C80B4                            		even
000C80B4                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
000C80E6                            		even
000C80E6                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
000C8118                            		even
000C8118                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
000C8150                            		even
000C8150                            ObjPos_End:	incbin	objpos\ending.bin
000C82AC                            		even
000C82AC FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000C82B2                            ; ---------------------------------------------------------------------------
000C82B2                            		incbin	misc\padding4.bin
000C88DC                            		even
000C88DC                            
000C88DC 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
000C88E0 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
000C88E4 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
000C88E8 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
000C88EC 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
000C88F0 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
000C88F4                            ; ---------------------------------------------------------------------------
000C88F4                            ; PSG instruments used in music
000C88F4                            ; ---------------------------------------------------------------------------
000C88F4 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
000C8900 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
000C890C 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000C8918                            PSG1:		incbin	sound\psg1.bin
000C892F                            PSG2:		incbin	sound\psg2.bin
000C8936                            PSG3:		incbin	sound\psg3.bin
000C8947                            PSG4:		incbin	sound\psg4.bin
000C8952                            PSG6:		incbin	sound\psg6.bin
000C8961                            PSG5:		incbin	sound\psg5.bin
000C898B                            PSG7:		incbin	sound\psg7.bin
000C89A7                            PSG8:		incbin	sound\psg8.bin
000C89CF                            PSG9:		incbin	sound\psg9.bin
000C89E0                            
000C89E0 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
000C89E8                            ; ---------------------------------------------------------------------------
000C89E8                            ; Music	Pointers
000C89E8                            ; ---------------------------------------------------------------------------
000C89E8 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
000C89F0 0000 0000 0000 0000        		dc.l Music83, Music84
000C89F8 0000 0000 0000 0000        		dc.l Music85, Music86
000C8A00 0000 0000 0000 0000        		dc.l Music87, Music88
000C8A08 0000 0000 0000 0000        		dc.l Music89, Music8A
000C8A10 0000 0000 0000 0000        		dc.l Music8B, Music8C
000C8A18 0000 0000 0000 0000        		dc.l Music8D, Music8E
000C8A20 0000 0000 0000 0000        		dc.l Music8F, Music90
000C8A28 0000 0000 0000 0000        		dc.l Music91, Music92
000C8A30 0000 0000 0000 0000        		dc.l Music93, Music94
000C8A38 0000 0000 0000 0000        		dc.l Music95, Music96
000C8A40 0000 0000 0000 0000        		dc.l Music97, Music98
000C8A48 0000 0000 0000 0000        		dc.l Music99, Music9A
000C8A50 0000 0000 0000 0000        		dc.l Music9B, Music9C
000C8A58 0000 0000 0000 0000        		dc.l Music9D, Music9E
000C8A60 0000 0000                                  dc.l Music9F
000C8A64                            ; ---------------------------------------------------------------------------
000C8A64                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
000C8A64                            ; ---------------------------------------------------------------------------
000C8A64 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
000C8A74 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
000C8A84 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
000C8A94 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
000C8AA4 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
000C8AB4 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
000C8AC4 9090 9090                  		dc.b $90, $90, $90, $90
000C8AC8                            
000C8AC8                            ; ===========================================================================
000C8AC8                            ; Subroutine to update music
000C8AC8                            ; ===========================================================================
000C8AC8                            
000C8AC8                            ;sub_71B4C;
000C8AC8                            UpdateMusic:				; XREF: VBlank; PalToCRAM
000C8AC8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000C8AD0 4E71                       		nop	
000C8AD2 4E71                       		nop	
000C8AD4 4E71                       		nop	
000C8AD6                            
000C8AD6 0839 0000 00A1 1100        	@wait:  btst	#0,($A11100).l
000C8ADE 66F6                       		bne.s	@wait
000C8AE0                            
000C8AE0                            		;btst	#7,($A01FFD).l
000C8AE0                            		;beq.s	loc_71B82
000C8AE0                            		;move.w	#0,($A11100).l	; start	the Z80
000C8AE0                            		;nop	
000C8AE0                            		;nop	
000C8AE0                            		;nop	
000C8AE0                            		;nop	
000C8AE0                            		;nop	
000C8AE0                            		;bra.s	UpdateMusic
000C8AE0                            ; ===========================================================================
000C8AE0                            
000C8AE0                            ;loc_71B82:
000C8AE0 4DF9 00FF F000             		lea	($FFF000).l,a6
000C8AE6 422E 000E                  		clr.b	$E(a6)
000C8AEA 4A2E 0003                  		tst.b	3(a6)		; is music paused?
000C8AEE 6600 0000                  		bne.w	loc_71E50	; if yes, branch
000C8AF2 532E 0001                  		subq.b	#1,1(a6)
000C8AF6 6600                       		bne.s	loc_71B9E
000C8AF8 4EBA 0000                  		jsr	sub_7260C(pc)
000C8AFC                            
000C8AFC                            loc_71B9E:
000C8AFC 102E 0004                  		move.b	4(a6),d0
000C8B00 6700                       		beq.s	loc_71BA8
000C8B02 4EBA 0000                  		jsr	sub_72504(pc)
000C8B06                            
000C8B06                            loc_71BA8:
000C8B06 4A2E 0024                  		tst.b	$24(a6)
000C8B0A 6700                       		beq.s	loc_71BB2
000C8B0C 4EBA 0000                  		jsr	sub_7267C(pc)
000C8B10                            
000C8B10                            loc_71BB2:
000C8B10 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
000C8B14 6700                       		beq.s	loc_71BBC	; if not, branch
000C8B16 4EBA 0000                  		jsr	Sound_Play(pc)
000C8B1A                            
000C8B1A                            loc_71BBC:
000C8B1A 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000C8B20 6700                       		beq.s	loc_71BC8
000C8B22 4EBA 0000                  		jsr	Sound_ChkValue(pc)
000C8B26                            
000C8B26                            loc_71BC8:
000C8B26 4BEE 0040                  		lea	$40(a6),a5
000C8B2A 4A15                       		tst.b	(a5)
000C8B2C 6A00                       		bpl.s	loc_71BD4
000C8B2E 4EBA 0000                  		jsr	sub_71C4E(pc)
000C8B32                            
000C8B32                            loc_71BD4:
000C8B32 422E 0008                  		clr.b	8(a6)
000C8B36 7E05                       		moveq	#5,d7
000C8B38                            
000C8B38                            loc_71BDA:
000C8B38 DAFC 0030                  		adda.w	#$30,a5
000C8B3C 4A15                       		tst.b	(a5)
000C8B3E 6A00                       		bpl.s	loc_71BE6
000C8B40 4EBA 0000                  		jsr	sub_71CCA(pc)
000C8B44                            
000C8B44                            loc_71BE6:
000C8B44 51CF FFF2                  		dbf	d7,loc_71BDA
000C8B48                            
000C8B48 7E02                       		moveq	#2,d7
000C8B4A                            
000C8B4A                            loc_71BEC:
000C8B4A DAFC 0030                  		adda.w	#$30,a5
000C8B4E 4A15                       		tst.b	(a5)
000C8B50 6A00                       		bpl.s	loc_71BF8
000C8B52 4EBA 0000                  		jsr	sub_72850(pc)
000C8B56                            
000C8B56                            loc_71BF8:
000C8B56 51CF FFF2                  		dbf	d7,loc_71BEC
000C8B5A                            
000C8B5A 1D7C 0080 000E             		move.b	#$80,$E(a6)
000C8B60 7E02                       		moveq	#2,d7
000C8B62                            
000C8B62                            loc_71C04:
000C8B62 DAFC 0030                  		adda.w	#$30,a5
000C8B66 4A15                       		tst.b	(a5)
000C8B68 6A00                       		bpl.s	loc_71C10
000C8B6A 4EBA 0000                  		jsr	sub_71CCA(pc)
000C8B6E                            
000C8B6E                            loc_71C10:
000C8B6E 51CF FFF2                  		dbf	d7,loc_71C04
000C8B72                            
000C8B72 7E02                       		moveq	#2,d7
000C8B74                            
000C8B74                            loc_71C16:
000C8B74 DAFC 0030                  		adda.w	#$30,a5
000C8B78 4A15                       		tst.b	(a5)
000C8B7A 6A00                       		bpl.s	loc_71C22
000C8B7C 4EBA 0000                  		jsr	sub_72850(pc)
000C8B80                            
000C8B80                            loc_71C22:
000C8B80 51CF FFF2                  		dbf	d7,loc_71C16
000C8B84 1D7C 0040 000E             		move.b	#$40,$E(a6)
000C8B8A DAFC 0030                  		adda.w	#$30,a5
000C8B8E 4A15                       		tst.b	(a5)
000C8B90 6A00                       		bpl.s	loc_71C38
000C8B92 4EBA 0000                  		jsr	sub_71CCA(pc)
000C8B96                            
000C8B96                            loc_71C38:
000C8B96 DAFC 0030                  		adda.w	#$30,a5
000C8B9A 4A15                       		tst.b	(a5)
000C8B9C 6A00                       		bpl.s	loc_71C44
000C8B9E 4EBA 0000                  		jsr	sub_72850(pc)
000C8BA2                            
000C8BA2                            loc_71C44:
000C8BA2 1439 00A0 4000                             move.b	($A04000).l,d2
000C8BA8 0802 0007                  		btst	#7,d2
000C8BAC 66F4                       		bne.s	loc_71C44
000C8BAE 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l
000C8BB6 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000C8BBE 4E75                       		rts	
000C8BC0                            ; End of function UpdateMusic
000C8BC0                            
000C8BC0                            
000C8BC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C8BC0                            
000C8BC0                            
000C8BC0                            sub_71C4E:				; XREF: UpdateMusic
000C8BC0 532D 000E                  		subq.b	#1,$E(a5)
000C8BC4 6600                       		bne.s	locret_71CAA
000C8BC6 1D7C 0080 0008             		move.b	#$80,8(a6)
000C8BCC 286D 0004                  		movea.l	4(a5),a4
000C8BD0                            
000C8BD0                            loc_71C5E:
000C8BD0 7A00                       		moveq	#0,d5
000C8BD2 1A1C                       		move.b	(a4)+,d5
000C8BD4 0C05 00E0                  		cmpi.b	#-$20,d5
000C8BD8 6500                       		bcs.s	loc_71C6E
000C8BDA 4EBA 0000                  		jsr	sub_72A5A(pc)
000C8BDE 60F0                       		bra.s	loc_71C5E
000C8BE0                            ; ===========================================================================
000C8BE0                            
000C8BE0                            loc_71C6E:
000C8BE0 4A05                       		tst.b	d5
000C8BE2 6A00                       		bpl.s	loc_71C84
000C8BE4 1B45 0010                  		move.b	d5,$10(a5)
000C8BE8 1A1C                       		move.b	(a4)+,d5
000C8BEA 6A00                       		bpl.s	loc_71C84
000C8BEC 534C                       		subq.w	#1,a4
000C8BEE 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000C8BF4 6000                       		bra.s	loc_71C88
000C8BF6                            ; ===========================================================================
000C8BF6                            
000C8BF6                            loc_71C84:
000C8BF6 4EBA 0000                  		jsr	sub_71D40(pc)
000C8BFA                            
000C8BFA                            loc_71C88:
000C8BFA 2B4C 0004                  		move.l	a4,4(a5)
000C8BFE 0815 0002                  		btst	#2,(a5)
000C8C02 6600                       		bne.s	locret_71CAA
000C8C04 7000                       		moveq	#0,d0
000C8C06 102D 0010                  		move.b	$10(a5),d0
000C8C0A 0C00 0080                  		cmpi.b	#$80,d0
000C8C0E 6700                       		beq.s	locret_71CAA
000C8C10                            		;btst	#3,d0
000C8C10                            		;bne.s	loc_71CAC
000C8C10 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
000C8C16                            
000C8C16                            locret_71CAA:
000C8C16 4E75                       		rts	
000C8C18                            ; ===========================================================================
000C8C18                            
000C8C18                            loc_71CAC:
000C8C18 0400 0088                  		subi.b	#$88,d0
000C8C1C 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
000C8C20 13C0 00A0 00EA             		move.b	d0,($A000EA).l
000C8C26 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
000C8C2E 4E75                       		rts	
000C8C30                            ; End of function sub_71C4E
000C8C30                            
000C8C30                            ; ===========================================================================
000C8C30 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
000C8C36                            
000C8C36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C8C36                            
000C8C36                            
000C8C36                            sub_71CCA:				; XREF: UpdateMusic
000C8C36 532D 000E                  		subq.b	#1,$E(a5)
000C8C3A 6600                       		bne.s	loc_71CE0
000C8C3C 0895 0004                  		bclr	#4,(a5)
000C8C40 4EBA 0000                  		jsr	sub_71CEC(pc)
000C8C44 4EBA 0000                  		jsr	sub_71E18(pc)
000C8C48 6000 0000                  		bra.w	loc_726E2
000C8C4C                            ; ===========================================================================
000C8C4C                            
000C8C4C                            loc_71CE0:
000C8C4C 4EBA 0000                  		jsr	sub_71D9E(pc)
000C8C50 4EBA 0000                  		jsr	sub_71DC6(pc)
000C8C54 6000 0000                  		bra.w	loc_71E24
000C8C58                            ; End of function sub_71CCA
000C8C58                            
000C8C58                            
000C8C58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C8C58                            
000C8C58                            
000C8C58                            sub_71CEC:				; XREF: sub_71CCA
000C8C58 286D 0004                  		movea.l	4(a5),a4
000C8C5C 0895 0001                  		bclr	#1,(a5)
000C8C60                            
000C8C60                            loc_71CF4:
000C8C60 7A00                       		moveq	#0,d5
000C8C62 1A1C                       		move.b	(a4)+,d5
000C8C64 0C05 00E0                  		cmpi.b	#-$20,d5
000C8C68 6500                       		bcs.s	loc_71D04
000C8C6A 4EBA 0000                  		jsr	sub_72A5A(pc)
000C8C6E 60F0                       		bra.s	loc_71CF4
000C8C70                            ; ===========================================================================
000C8C70                            
000C8C70                            loc_71D04:
000C8C70 4EBA 0000                  		jsr	sub_726FE(pc)
000C8C74 4A05                       		tst.b	d5
000C8C76 6A00                       		bpl.s	loc_71D1A
000C8C78 4EBA 0000                  		jsr	sub_71D22(pc)
000C8C7C 1A1C                       		move.b	(a4)+,d5
000C8C7E 6A00                       		bpl.s	loc_71D1A
000C8C80 534C                       		subq.w	#1,a4
000C8C82 6000 0000                  		bra.w	sub_71D60
000C8C86                            ; ===========================================================================
000C8C86                            
000C8C86                            loc_71D1A:
000C8C86 4EBA 0000                  		jsr	sub_71D40(pc)
000C8C8A 6000 0000                  		bra.w	sub_71D60
000C8C8E                            ; End of function sub_71CEC
000C8C8E                            
000C8C8E                            
000C8C8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C8C8E                            
000C8C8E                            
000C8C8E                            sub_71D22:				; XREF: sub_71CEC
000C8C8E 0405 0080                  		subi.b	#$80,d5
000C8C92 6700                       		beq.s	loc_71D58
000C8C94 DA2D 0008                  		add.b	8(a5),d5
000C8C98 0245 007F                  		andi.w	#$7F,d5
000C8C9C E34D                       		lsl.w	#1,d5
000C8C9E 41FA 0000                  		lea	word_72790(pc),a0
000C8CA2 3C30 5000                  		move.w	(a0,d5.w),d6
000C8CA6 3B46 0010                  		move.w	d6,$10(a5)
000C8CAA 4E75                       		rts	
000C8CAC                            ; End of function sub_71D22
000C8CAC                            
000C8CAC                            
000C8CAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C8CAC                            
000C8CAC                            
000C8CAC                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000C8CAC 1005                       		move.b	d5,d0
000C8CAE 122D 0002                  		move.b	2(a5),d1
000C8CB2                            
000C8CB2                            loc_71D46:
000C8CB2 5301                       		subq.b	#1,d1
000C8CB4 6700                       		beq.s	loc_71D4E
000C8CB6 D005                       		add.b	d5,d0
000C8CB8 60F8                       		bra.s	loc_71D46
000C8CBA                            ; ===========================================================================
000C8CBA                            
000C8CBA                            loc_71D4E:
000C8CBA 1B40 000F                  		move.b	d0,$F(a5)
000C8CBE 1B40 000E                  		move.b	d0,$E(a5)
000C8CC2 4E75                       		rts	
000C8CC4                            ; End of function sub_71D40
000C8CC4                            
000C8CC4                            ; ===========================================================================
000C8CC4                            
000C8CC4                            loc_71D58:				; XREF: sub_71D22
000C8CC4 08D5 0001                  		bset	#1,(a5)
000C8CC8 426D 0010                  		clr.w	$10(a5)
000C8CCC                            
000C8CCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C8CCC                            
000C8CCC                            
000C8CCC                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
000C8CCC 2B4C 0004                  		move.l	a4,4(a5)
000C8CD0 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000C8CD6 0815 0004                  		btst	#4,(a5)
000C8CDA 6600                       		bne.s	locret_71D9C
000C8CDC 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
000C8CE2 422D 000C                  		clr.b	$C(a5)
000C8CE6 0815 0003                  		btst	#3,(a5)
000C8CEA 6700                       		beq.s	locret_71D9C
000C8CEC 206D 0014                  		movea.l	$14(a5),a0
000C8CF0 1B58 0018                  		move.b	(a0)+,$18(a5)
000C8CF4 1B58 0019                  		move.b	(a0)+,$19(a5)
000C8CF8 1B58 001A                  		move.b	(a0)+,$1A(a5)
000C8CFC 1018                       		move.b	(a0)+,d0
000C8CFE E208                       		lsr.b	#1,d0
000C8D00 1B40 001B                  		move.b	d0,$1B(a5)
000C8D04 426D 001C                  		clr.w	$1C(a5)
000C8D08                            
000C8D08                            locret_71D9C:
000C8D08 4E75                       		rts	
000C8D0A                            ; End of function sub_71D60
000C8D0A                            
000C8D0A                            
000C8D0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C8D0A                            
000C8D0A                            
000C8D0A                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000C8D0A 4A2D 0012                  		tst.b	$12(a5)
000C8D0E 6700                       		beq.s	locret_71DC4
000C8D10 532D 0012                  		subq.b	#1,$12(a5)
000C8D14 6600                       		bne.s	locret_71DC4
000C8D16 08D5 0001                  		bset	#1,(a5)
000C8D1A 4A2D 0001                  		tst.b	1(a5)
000C8D1E 6B00 0000                  		bmi.w	loc_71DBE
000C8D22 4EBA 0000                  		jsr	sub_726FE(pc)
000C8D26 584F                       		addq.w	#4,sp
000C8D28 4E75                       		rts	
000C8D2A                            ; ===========================================================================
000C8D2A                            
000C8D2A                            loc_71DBE:
000C8D2A 4EBA 0000                  		jsr	sub_729A0(pc)
000C8D2E 584F                       		addq.w	#4,sp
000C8D30                            
000C8D30                            locret_71DC4:
000C8D30 4E75                       		rts	
000C8D32                            ; End of function sub_71D9E
000C8D32                            
000C8D32                            
000C8D32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C8D32                            
000C8D32                            
000C8D32                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
000C8D32 584F                       		addq.w	#4,sp
000C8D34 0815 0003                  		btst	#3,(a5)
000C8D38 6700                       		beq.s	locret_71E16
000C8D3A 4A2D 0018                  		tst.b	$18(a5)
000C8D3E 6700                       		beq.s	loc_71DDA
000C8D40 532D 0018                  		subq.b	#1,$18(a5)
000C8D44 4E75                       		rts	
000C8D46                            ; ===========================================================================
000C8D46                            
000C8D46                            loc_71DDA:
000C8D46 532D 0019                  		subq.b	#1,$19(a5)
000C8D4A 6700                       		beq.s	loc_71DE2
000C8D4C 4E75                       		rts	
000C8D4E                            ; ===========================================================================
000C8D4E                            
000C8D4E                            loc_71DE2:
000C8D4E 206D 0014                  		movea.l	$14(a5),a0
000C8D52 1B68 0001 0019             		move.b	1(a0),$19(a5)
000C8D58 4A2D 001B                  		tst.b	$1B(a5)
000C8D5C 6600                       		bne.s	loc_71DFE
000C8D5E 1B68 0003 001B             		move.b	3(a0),$1B(a5)
000C8D64 442D 001A                  		neg.b	$1A(a5)
000C8D68 4E75                       		rts	
000C8D6A                            ; ===========================================================================
000C8D6A                            
000C8D6A                            loc_71DFE:
000C8D6A 532D 001B                  		subq.b	#1,$1B(a5)
000C8D6E 1C2D 001A                  		move.b	$1A(a5),d6
000C8D72 4886                       		ext.w	d6
000C8D74 DC6D 001C                  		add.w	$1C(a5),d6
000C8D78 3B46 001C                  		move.w	d6,$1C(a5)
000C8D7C DC6D 0010                  		add.w	$10(a5),d6
000C8D80 594F                       		subq.w	#4,sp
000C8D82                            
000C8D82                            locret_71E16:
000C8D82 4E75                       		rts	
000C8D84                            ; End of function sub_71DC6
000C8D84                            
000C8D84                            
000C8D84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C8D84                            
000C8D84                            
000C8D84                            sub_71E18:				; XREF: sub_71CCA
000C8D84 0815 0001                  		btst	#1,(a5)
000C8D88 6600                       		bne.s	locret_71E48
000C8D8A 3C2D 0010                  		move.w	$10(a5),d6
000C8D8E 6700                       		beq.s	loc_71E4A
000C8D90                            
000C8D90                            loc_71E24:				; XREF: sub_71CCA
000C8D90 102D 001E                  		move.b	$1E(a5),d0
000C8D94 4880                       		ext.w	d0
000C8D96 DC40                       		add.w	d0,d6
000C8D98 0815 0002                  		btst	#2,(a5)
000C8D9C 6600                       		bne.s	locret_71E48
000C8D9E 3206                       		move.w	d6,d1
000C8DA0 E049                       		lsr.w	#8,d1
000C8DA2 103C 00A4                  		move.b	#-$5C,d0
000C8DA6 4EBA 0000                  		jsr	sub_72722(pc)
000C8DAA 1206                       		move.b	d6,d1
000C8DAC 103C 00A0                  		move.b	#-$60,d0
000C8DB0 4EBA 0000                  		jsr	sub_72722(pc)
000C8DB4                            
000C8DB4                            locret_71E48:
000C8DB4 4E75                       		rts	
000C8DB6                            ; ===========================================================================
000C8DB6                            
000C8DB6                            loc_71E4A:
000C8DB6 08D5 0001                  		bset	#1,(a5)
000C8DBA 4E75                       		rts	
000C8DBC                            ; End of function sub_71E18
000C8DBC                            
000C8DBC                            ; ===========================================================================
000C8DBC                            
000C8DBC                            loc_71E50:				; XREF: UpdateMusic
000C8DBC 6B00                       		bmi.s	loc_71E94
000C8DBE 0C2E 0002 0003             		cmpi.b	#2,3(a6)
000C8DC4 6700 0000                  		beq.w	loc_71EFE
000C8DC8 1D7C 0002 0003             		move.b	#2,3(a6)
000C8DCE 7602                       		moveq	#2,d3
000C8DD0 103C 00B4                  		move.b	#-$4C,d0
000C8DD4 7200                       		moveq	#0,d1
000C8DD6                            
000C8DD6                            loc_71E6A:
000C8DD6 4EBA 0000                  		jsr	sub_7272E(pc)
000C8DDA 4EBA 0000                  		jsr	sub_72764(pc)
000C8DDE 5200                       		addq.b	#1,d0
000C8DE0 51CB FFF4                  		dbf	d3,loc_71E6A
000C8DE4                            
000C8DE4 7602                       		moveq	#2,d3
000C8DE6 7028                       		moveq	#$28,d0
000C8DE8                            
000C8DE8                            loc_71E7C:
000C8DE8 1203                       		move.b	d3,d1
000C8DEA 4EBA 0000                  		jsr	sub_7272E(pc)
000C8DEE 5801                       		addq.b	#4,d1
000C8DF0 4EBA 0000                  		jsr	sub_7272E(pc)
000C8DF4 51CB FFF2                  		dbf	d3,loc_71E7C
000C8DF8                            
000C8DF8 4EBA 0000                  		jsr	sub_729B6(pc)
000C8DFC 13FC 007F 00A0 1FFF                        move.b	#$7F,($A01FFF).l; pause DAC
000C8E04 6000 FD9C                  		bra.w	loc_71C44
000C8E08                            ; ===========================================================================
000C8E08                            
000C8E08                            loc_71E94:				; XREF: loc_71E50
000C8E08 422E 0003                  		clr.b	3(a6)
000C8E0C 7630                       		moveq	#$30,d3
000C8E0E 4BEE 0040                  		lea	$40(a6),a5
000C8E12 7806                       		moveq	#6,d4
000C8E14                            
000C8E14                            loc_71EA0:
000C8E14 0815 0007                  		btst	#7,(a5)
000C8E18 6700                       		beq.s	loc_71EB8
000C8E1A 0815 0002                  		btst	#2,(a5)
000C8E1E 6600                       		bne.s	loc_71EB8
000C8E20 103C 00B4                  		move.b	#-$4C,d0
000C8E24 122D 000A                  		move.b	$A(a5),d1
000C8E28 4EBA 0000                  		jsr	sub_72722(pc)
000C8E2C                            
000C8E2C                            loc_71EB8:
000C8E2C DAC3                       		adda.w	d3,a5
000C8E2E 51CC FFE4                  		dbf	d4,loc_71EA0
000C8E32                            
000C8E32 4BEE 0220                  		lea	$220(a6),a5
000C8E36 7802                       		moveq	#2,d4
000C8E38                            
000C8E38                            loc_71EC4:
000C8E38 0815 0007                  		btst	#7,(a5)
000C8E3C 6700                       		beq.s	loc_71EDC
000C8E3E 0815 0002                  		btst	#2,(a5)
000C8E42 6600                       		bne.s	loc_71EDC
000C8E44 103C 00B4                  		move.b	#-$4C,d0
000C8E48 122D 000A                  		move.b	$A(a5),d1
000C8E4C 4EBA 0000                  		jsr	sub_72722(pc)
000C8E50                            
000C8E50                            loc_71EDC:
000C8E50 DAC3                                       adda.w	d3,a5
000C8E52 51CC FFE4                  		dbf	d4,loc_71EC4
000C8E56                            
000C8E56 4BEE 0340                  		lea	$340(a6),a5
000C8E5A 0815 0007                  		btst	#7,(a5)
000C8E5E 6700                       		beq.s	@UnpauseDAC
000C8E60 0815 0002                  		btst	#2,(a5)
000C8E64 6600                       		bne.s	@UnpauseDAC
000C8E66 103C 00B4                  		move.b	#-$4C,d0
000C8E6A 122D 000A                  		move.b	$A(a5),d1
000C8E6E 4EBA 0000                  		jsr	sub_72722(pc)
000C8E72                            
000C8E72                            @UnpauseDAC:
000C8E72 13FC 0000 00A0 1FFF        		move.b	#0,($A01FFF).l	; unpause DAC
000C8E7A                            
000C8E7A                            loc_71EFE:
000C8E7A 6000 FD26                  		bra.w	loc_71C44
000C8E7E                            
000C8E7E                            ; ---------------------------------------------------------------------------
000C8E7E                            ; Subroutine to	play a sound or	music track
000C8E7E                            ; ---------------------------------------------------------------------------
000C8E7E                            
000C8E7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C8E7E                            
000C8E7E                            
000C8E7E                            Sound_Play:				; XREF: UpdateMusic
000C8E7E 2079 000C 88DC             		movea.l	(Go_SoundTypes).l,a0
000C8E84 43EE 000A                  		lea	$A(a6),a1	; load music track number
000C8E88 1616                       		move.b	0(a6),d3
000C8E8A 7802                       		moveq	#2,d4
000C8E8C                            
000C8E8C                            loc_71F12:
000C8E8C 1011                       		move.b	(a1),d0		; move track number to d0
000C8E8E 1200                       		move.b	d0,d1
000C8E90 4219                       		clr.b	(a1)+
000C8E92 0400 0081                  		subi.b	#$81,d0
000C8E96 6500                       		bcs.s	loc_71F3E
000C8E98 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000C8E9E 6700                       		beq.s	loc_71F2C
000C8EA0 1D41 000A                  		move.b	d1,$A(a6)
000C8EA4 6000                       		bra.s	loc_71F3E
000C8EA6                            ; ===========================================================================
000C8EA6                            
000C8EA6                            loc_71F2C:
000C8EA6 0240 007F                  		andi.w	#$7F,d0
000C8EAA 1430 0000                  		move.b	(a0,d0.w),d2
000C8EAE B403                       		cmp.b	d3,d2
000C8EB0 6500                       		bcs.s	loc_71F3E
000C8EB2 1602                       		move.b	d2,d3
000C8EB4 1D41 0009                  		move.b	d1,9(a6)	; set music flag
000C8EB8                            
000C8EB8                            loc_71F3E:
000C8EB8 51CC FFD2                  		dbf	d4,loc_71F12
000C8EBC                            
000C8EBC 4A03                       		tst.b	d3
000C8EBE 6B00                       		bmi.s	locret_71F4A
000C8EC0 1C83                       		move.b	d3,0(a6)
000C8EC2                            
000C8EC2                            locret_71F4A:
000C8EC2 4E75                       		rts	
000C8EC4                            ; End of function Sound_Play
000C8EC4                            
000C8EC4                            
000C8EC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C8EC4                            
000C8EC4                            
000C8EC4                            Sound_ChkValue:				; XREF: UpdateMusic
000C8EC4 7E00                       		moveq	#0,d7
000C8EC6 1E2E 0009                  		move.b	9(a6),d7
000C8ECA 6700 0000                  		beq.w	Sound_E4
000C8ECE 6A00                       		bpl.s	locret_71F8C
000C8ED0 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
000C8ED6 0C07 009F                  		cmpi.b	#$9F,d7
000C8EDA 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
000C8EDE 0C07 00A0                  		cmpi.b	#$A0,d7
000C8EE2 6500 0000                  		bcs.w	locret_71F8C
000C8EE6 0C07 00CF                  		cmpi.b	#$CF,d7
000C8EEA 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
000C8EEE 0C07 00D0                  		cmpi.b	#$D0,d7
000C8EF2 6500 0000                  		bcs.w	locret_71F8C
000C8EF6 0C07 00D1                  		cmpi.b	#$D1,d7         ; changed from #$E0
000C8EFA 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0
000C8EFE 0C07 00DF                  		cmp.b	#$DF,d7             ; own cmp
000C8F02 6F00 0000                  		ble	Sound_D1toDF        ; own
000C8F06 0C07 00E4                  		cmpi.b	#$E4,d7
000C8F0A 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
000C8F0C                            
000C8F0C                            locret_71F8C:
000C8F0C 4E75                       		rts	
000C8F0E                            ; ===========================================================================
000C8F0E                            
000C8F0E                            Sound_E0toE4:				; XREF: Sound_ChkValue
000C8F0E 0407 00E0                  		subi.b	#$E0,d7
000C8F12 E54F                       		lsl.w	#2,d7
000C8F14 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000C8F18                            ; ===========================================================================
000C8F18                            
000C8F18                            Sound_ExIndex:
000C8F18 6000 0000                  		bra.w	Sound_E0
000C8F1C                            ; ===========================================================================
000C8F1C 6000 0000                  		bra.w	Sound_E1
000C8F20                            ; ===========================================================================
000C8F20 6000 0000                  		bra.w	Sound_E2
000C8F24                            ; ===========================================================================
000C8F24 6000 0000                  		bra.w	Sound_E3
000C8F28                            ; ===========================================================================
000C8F28 6000 0000                  		bra.w	Sound_E4
000C8F2C                            ; ===========================================================================
000C8F2C                            ; ---------------------------------------------------------------------------
000C8F2C                            ; Play "Say-gaa" PCM sound
000C8F2C                            ; ---------------------------------------------------------------------------
000C8F2C                            
000C8F2C                            Sound_E1:
000C8F2C 45F9 0000 0000             		lea	(SegaPCM).l,a2		; load PCM sample
000C8F32 263C 0000 6978             		move.l	#$6978,d3		; load sample size
000C8F38 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l
000C8F40                            
000C8F40                            PlayPCM_Loop:
000C8F40 13DA 00A0 4001             		move.b	(a2)+,($A04001).l	; write the PCM data
000C8F46 303C 0014                  		move.w	#$14,d0			; load pitch
000C8F4A 51C8 FFFE                  		dbf	d0,*			; delay program for d0 times
000C8F4E 5383                       		sub.l	#1,d3			; subtract 1 from the PCM sample size
000C8F50 6700                       		beq.s	return_PlayPCM		; if sample is over, branch
000C8F52 41F8 F604                  		lea	(Joypad),a0
000C8F56 43F9 00A1 0003             		lea	($A10003).l,a1
000C8F5C 4EB8 1126                  		jsr	(Joypad_Read).w
000C8F60 0838 0007 F604             		btst	#iStart,(Joypad|Held)	; is Start button pressed?
000C8F66 6600                       		bne.s	return_PlayPCM		; if yes, branch
000C8F68 60D6                       		bra.s	PlayPCM_Loop
000C8F6A                            
000C8F6A                            return_PlayPCM:
000C8F6A 584F                       		addq.w	#4,sp
000C8F6C 4E75                       		rts
000C8F6E                            ; ===========================================================================
000C8F6E                            ; ---------------------------------------------------------------------------
000C8F6E                            ; Play music track $81-$9F
000C8F6E                            ; ---------------------------------------------------------------------------
000C8F6E                            
000C8F6E                            Sound_81to9F:				; XREF: Sound_ChkValue
000C8F6E 0C07 009F                  		cmpi.b	#$9F,d7		; is "extra life" music	played?
000C8F72 6600                       		bne.s	loc_72024	; if not, branch
000C8F74 4A2E 0027                  		tst.b	$27(a6)
000C8F78 6600 0000                  		bne.w	loc_721B6
000C8F7C 4BEE 0040                  		lea	$40(a6),a5
000C8F80 7009                       		moveq	#9,d0
000C8F82                            
000C8F82                            loc_71FE6:
000C8F82 0895 0002                  		bclr	#2,(a5)
000C8F86 DAFC 0030                  		adda.w	#$30,a5
000C8F8A 51C8 FFF6                  		dbf	d0,loc_71FE6
000C8F8E                            
000C8F8E 4BEE 0220                  		lea	$220(a6),a5
000C8F92 7005                       		moveq	#5,d0
000C8F94                            
000C8F94                            loc_71FF8:
000C8F94 0895 0007                  		bclr	#7,(a5)
000C8F98 DAFC 0030                  		adda.w	#$30,a5
000C8F9C 51C8 FFF6                  		dbf	d0,loc_71FF8
000C8FA0 4216                       		clr.b	0(a6)
000C8FA2 204E                       		movea.l	a6,a0
000C8FA4 43EE 03A0                  		lea	$3A0(a6),a1
000C8FA8 303C 0087                  		move.w	#$87,d0
000C8FAC                            
000C8FAC                            loc_72012:
000C8FAC 22D8                       		move.l	(a0)+,(a1)+
000C8FAE 51C8 FFFC                  		dbf	d0,loc_72012
000C8FB2                            
000C8FB2 1D7C 0080 0027             		move.b	#$80,$27(a6)
000C8FB8 4216                       		clr.b	0(a6)
000C8FBA 6000                       		bra.s	loc_7202C
000C8FBC                            ; ===========================================================================
000C8FBC                            
000C8FBC                            loc_72024:
000C8FBC 422E 0027                  		clr.b	$27(a6)
000C8FC0 422E 0026                  		clr.b	$26(a6)
000C8FC4                            
000C8FC4                            loc_7202C:
000C8FC4 4EBA 0000                  		jsr	sub_725CA(pc)
000C8FC8 2879 000C 88EC             		movea.l	(off_719A0).l,a4
000C8FCE 0407 0081                  		subi.b	#$81,d7
000C8FD2 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000C8FD8 2879 000C 88E4             		movea.l	(Go_MusicIndex).l,a4
000C8FDE E54F                       		lsl.w	#2,d7
000C8FE0 2874 7000                  		movea.l	(a4,d7.w),a4
000C8FE4 7000                       		moveq	#0,d0
000C8FE6 3014                       		move.w	(a4),d0
000C8FE8 D08C                       		add.l	a4,d0
000C8FEA 2D40 0018                  		move.l	d0,$18(a6)
000C8FEE 102C 0005                  		move.b	5(a4),d0
000C8FF2 1D40 0028                  		move.b	d0,$28(a6)
000C8FF6 4A2E 002A                  		tst.b	$2A(a6)
000C8FFA 6700                       		beq.s	loc_72068
000C8FFC 102E 0029                  		move.b	$29(a6),d0
000C9000                            
000C9000                            loc_72068:
000C9000 1D40 0002                  		move.b	d0,2(a6)
000C9004 1D40 0001                  		move.b	d0,1(a6)
000C9008 7200                       		moveq	#0,d1
000C900A 264C                       		movea.l	a4,a3
000C900C 5C4C                       		addq.w	#6,a4
000C900E 7E00                       		moveq	#0,d7
000C9010 1E2B 0002                  		move.b	2(a3),d7
000C9014 6700 0000                  		beq.w	loc_72114
000C9018 5307                       		subq.b	#1,d7
000C901A 123C 00C0                  		move.b	#-$40,d1
000C901E 182B 0004                  		move.b	4(a3),d4
000C9022 7C30                       		moveq	#$30,d6
000C9024 1A3C 0001                  		move.b	#1,d5
000C9028 43EE 0040                  		lea	$40(a6),a1
000C902C 45FA 0000                  		lea	byte_721BA(pc),a2
000C9030                            
000C9030                            loc_72098:
000C9030 08D1 0007                  		bset	#7,(a1)
000C9034 135A 0001                  		move.b	(a2)+,1(a1)
000C9038 1344 0002                  		move.b	d4,2(a1)
000C903C 1346 000D                  		move.b	d6,$D(a1)
000C9040 1341 000A                  		move.b	d1,$A(a1)
000C9044 1345 000E                  		move.b	d5,$E(a1)
000C9048 7000                       		moveq	#0,d0
000C904A 301C                       		move.w	(a4)+,d0
000C904C D08B                       		add.l	a3,d0
000C904E 2340 0004                  		move.l	d0,4(a1)
000C9052 335C 0008                  		move.w	(a4)+,8(a1)
000C9056 D2C6                       		adda.w	d6,a1
000C9058 51CF FFD6                  		dbf	d7,loc_72098
000C905C 0C2B 0007 0002             		cmpi.b	#7,2(a3)
000C9062 6600                       		bne.s	loc_720D8
000C9064 702B                       		moveq	#$2B,d0
000C9066 7200                       		moveq	#0,d1
000C9068 4EBA 0000                  		jsr	sub_7272E(pc)
000C906C 6000 0000                  		bra.w	loc_72114
000C9070                            ; ===========================================================================
000C9070                            
000C9070                            loc_720D8:
000C9070 7028                       		moveq	#$28,d0
000C9072 7206                       		moveq	#6,d1
000C9074 4EBA 0000                  		jsr	sub_7272E(pc)
000C9078 103C 0042                  		move.b	#$42,d0
000C907C 727F                       		moveq	#$7F,d1
000C907E 4EBA 0000                  		jsr	sub_72764(pc)
000C9082 103C 004A                  		move.b	#$4A,d0
000C9086 727F                       		moveq	#$7F,d1
000C9088 4EBA 0000                  		jsr	sub_72764(pc)
000C908C 103C 0046                  		move.b	#$46,d0
000C9090 727F                       		moveq	#$7F,d1
000C9092 4EBA 0000                  		jsr	sub_72764(pc)
000C9096 103C 004E                  		move.b	#$4E,d0
000C909A 727F                       		moveq	#$7F,d1
000C909C 4EBA 0000                  		jsr	sub_72764(pc)
000C90A0 103C 00B6                  		move.b	#-$4A,d0
000C90A4 123C 00C0                  		move.b	#-$40,d1
000C90A8 4EBA 0000                  		jsr	sub_72764(pc)
000C90AC                            
000C90AC                            loc_72114:
000C90AC 7E00                       		moveq	#0,d7
000C90AE 1E2B 0003                  		move.b	3(a3),d7
000C90B2 6700                       		beq.s	loc_72154
000C90B4 5307                       		subq.b	#1,d7
000C90B6 43EE 0190                  		lea	$190(a6),a1
000C90BA 45FA 0000                  		lea	byte_721C2(pc),a2
000C90BE                            
000C90BE                            loc_72126:
000C90BE 08D1 0007                  		bset	#7,(a1)
000C90C2 135A 0001                  		move.b	(a2)+,1(a1)
000C90C6 1344 0002                  		move.b	d4,2(a1)
000C90CA 1346 000D                  		move.b	d6,$D(a1)
000C90CE 1345 000E                  		move.b	d5,$E(a1)
000C90D2 7000                       		moveq	#0,d0
000C90D4 301C                       		move.w	(a4)+,d0
000C90D6 D08B                       		add.l	a3,d0
000C90D8 2340 0004                  		move.l	d0,4(a1)
000C90DC 335C 0008                  		move.w	(a4)+,8(a1)
000C90E0 101C                       		move.b	(a4)+,d0
000C90E2 135C 000B                  		move.b	(a4)+,$B(a1)
000C90E6 D2C6                       		adda.w	d6,a1
000C90E8 51CF FFD4                  		dbf	d7,loc_72126
000C90EC                            
000C90EC                            loc_72154:
000C90EC 43EE 0220                  		lea	$220(a6),a1
000C90F0 7E05                       		moveq	#5,d7
000C90F2                            
000C90F2                            loc_7215A:
000C90F2 4A11                       		tst.b	(a1)
000C90F4 6A00 0000                  		bpl.w	loc_7217C
000C90F8 7000                       		moveq	#0,d0
000C90FA 1029 0001                  		move.b	1(a1),d0
000C90FE 6B00                       		bmi.s	loc_7216E
000C9100 5500                       		subq.b	#2,d0
000C9102 E508                       		lsl.b	#2,d0
000C9104 6000                       		bra.s	loc_72170
000C9106                            ; ===========================================================================
000C9106                            
000C9106                            loc_7216E:
000C9106 E608                       		lsr.b	#3,d0
000C9108                            
000C9108                            loc_72170:
000C9108 41FA 0000                  		lea	dword_722CC(pc),a0
000C910C 2070 0000                  		movea.l	(a0,d0.w),a0
000C9110 08D0 0002                  		bset	#2,(a0)
000C9114                            
000C9114                            loc_7217C:
000C9114 D2C6                       		adda.w	d6,a1
000C9116 51CF FFDA                  		dbf	d7,loc_7215A
000C911A                            
000C911A 4A6E 0340                  		tst.w	$340(a6)
000C911E 6A00                       		bpl.s	loc_7218E
000C9120 08EE 0002 0100             		bset	#2,$100(a6)
000C9126                            
000C9126                            loc_7218E:
000C9126 4A6E 0370                  		tst.w	$370(a6)
000C912A 6A00                       		bpl.s	loc_7219A
000C912C 08EE 0002 01F0             		bset	#2,$1F0(a6)
000C9132                            
000C9132                            loc_7219A:
000C9132 4BEE 0070                  		lea	$70(a6),a5
000C9136 7805                       		moveq	#5,d4
000C9138                            
000C9138                            loc_721A0:
000C9138 4EBA 0000                  		jsr	sub_726FE(pc)
000C913C DAC6                       		adda.w	d6,a5
000C913E 51CC FFF8                  		dbf	d4,loc_721A0
000C9142 7802                       		moveq	#2,d4
000C9144                            
000C9144                            loc_721AC:
000C9144 4EBA 0000                  		jsr	sub_729A0(pc)
000C9148 DAC6                       		adda.w	d6,a5
000C914A 51CC FFF8                  		dbf	d4,loc_721AC
000C914E                            
000C914E                            loc_721B6:
000C914E 584F                       		addq.w	#4,sp
000C9150 4E75                       		rts	
000C9152                            ; ===========================================================================
000C9152 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
000C915A                            		even
000C915A 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
000C915E                            		even
000C915E                            ; ===========================================================================
000C915E                            ; ---------------------------------------------------------------------------
000C915E                            ; Play normal sound effect
000C915E                            ; ---------------------------------------------------------------------------
000C915E                            
000C915E                            		
000C915E                            Sound_D1toDF:                               ; own routine
000C915E 4A2E 0027                  		tst.b	$27(a6)
000C9162 6600 0000                  		bne.w	loc_722C6
000C9166 4A2E 0004                  		tst.b	4(a6)
000C916A 6600 0000                  		bne.w	loc_722C6
000C916E 4A2E 0024                  		tst.b	$24(a6)
000C9172 6600 0000                  		bne.w	loc_722C6
000C9176 2079 000C 88E8             		movea.l	(Go_SoundIndex).l,a0
000C917C 0407 00A1                  		subi.b	#$A1,d7
000C9180 6000 0000                  		bra	SoundEffects_Common
000C9184                            
000C9184                            Sound_A0toCF:				; XREF: Sound_ChkValue
000C9184 4A2E 0027                  		tst.b	$27(a6)
000C9188 6600 0000                  		bne.w	loc_722C6
000C918C 4A2E 0004                  		tst.b	4(a6)
000C9190 6600 0000                  		bne.w	loc_722C6
000C9194 4A2E 0024                  		tst.b	$24(a6)
000C9198 6600 0000                  		bne.w	loc_722C6
000C919C 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000C91A0 6600                       		bne.s	Sound_notB5	; if not, branch
000C91A2 4A2E 002B                  		tst.b	$2B(a6)
000C91A6 6600                       		bne.s	loc_721EE
000C91A8 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000C91AC                            		
000C91AC                            loc_721EE:
000C91AC 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000C91B2                            
000C91B2                            Sound_notB5:
000C91B2 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000C91B6 6600                       		bne.s	Sound_notA7	; if not, branch
000C91B8 4A2E 002C                  		tst.b	$2C(a6)
000C91BC 6600 0000                  		bne.w	locret_722C4
000C91C0 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000C91C6                            
000C91C6                            Sound_notA7:
000C91C6 2079 000C 88E8             		movea.l	(Go_SoundIndex).l,a0
000C91CC 0407 00A0                  		subi.b	#$A0,d7
000C91D0                            		
000C91D0                            SoundEffects_Common:                     ; own label
000C91D0 E54F                       		lsl.w	#2,d7
000C91D2 2670 7000                  		movea.l	(a0,d7.w),a3
000C91D6 224B                       		movea.l	a3,a1
000C91D8 7200                       		moveq	#0,d1
000C91DA 3219                       		move.w	(a1)+,d1
000C91DC D28B                       		add.l	a3,d1
000C91DE 1A19                       		move.b	(a1)+,d5
000C91E0 1E19                       		move.b	(a1)+,d7
000C91E2 5307                       		subq.b	#1,d7
000C91E4 7C30                       		moveq	#$30,d6
000C91E6                            
000C91E6                            loc_72228:
000C91E6 7600                       		moveq	#0,d3
000C91E8 1629 0001                  		move.b	1(a1),d3
000C91EC 1803                       		move.b	d3,d4
000C91EE 6B00                       		bmi.s	loc_72244
000C91F0 5543                       		subq.w	#2,d3
000C91F2 E54B                       		lsl.w	#2,d3
000C91F4 4BFA 0000                  		lea	dword_722CC(pc),a5
000C91F8 2A75 3000                  		movea.l	(a5,d3.w),a5
000C91FC 08D5 0002                  		bset	#2,(a5)
000C9200 6000                       		bra.s	loc_7226E
000C9202                            ; ===========================================================================
000C9202                            
000C9202                            
000C9202                            loc_72244:
000C9202 E64B                       		lsr.w	#3,d3
000C9204 4BFA 0000                  		lea	dword_722CC(pc),a5
000C9208 2A75 3000                  		movea.l	(a5,d3.w),a5
000C920C 08D5 0002                  		bset	#2,(a5)
000C9210 0C04 00C0                  		cmpi.b	#$C0,d4
000C9214 6600                       		bne.s	loc_7226E
000C9216 1004                       		move.b	d4,d0
000C9218 0000 001F                  		ori.b	#$1F,d0
000C921C 13C0 00C0 0011             		move.b	d0,($C00011).l
000C9222 0840 0005                  		bchg	#5,d0
000C9226 13C0 00C0 0011             		move.b	d0,($C00011).l
000C922C                            
000C922C                            loc_7226E:
000C922C 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
000C9230 244D                       		movea.l	a5,a2
000C9232 700B                       		moveq	#$B,d0
000C9234                            
000C9234                            loc_72276:
000C9234 429A                       		clr.l	(a2)+
000C9236 51C8 FFFC                  		dbf	d0,loc_72276
000C923A                            
000C923A 3A99                       		move.w	(a1)+,(a5)
000C923C 1B45 0002                  		move.b	d5,2(a5)
000C9240 7000                       		moveq	#0,d0
000C9242 3019                       		move.w	(a1)+,d0
000C9244 D08B                       		add.l	a3,d0
000C9246 2B40 0004                  		move.l	d0,4(a5)
000C924A 3B59 0008                  		move.w	(a1)+,8(a5)
000C924E 1B7C 0001 000E             		move.b	#1,$E(a5)
000C9254 1B46 000D                  		move.b	d6,$D(a5)
000C9258 4A04                       		tst.b	d4
000C925A 6B00                       		bmi.s	loc_722A8
000C925C 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000C9262 2B41 0020                  		move.l	d1,$20(a5)
000C9266                            
000C9266                            loc_722A8:
000C9266 51CF FF7E                  		dbf	d7,loc_72228
000C926A                            
000C926A 4A2E 0250                  		tst.b	$250(a6)
000C926E 6A00                       		bpl.s	loc_722B8
000C9270 08EE 0002 0340             		bset	#2,$340(a6)
000C9276                            
000C9276                            loc_722B8:
000C9276 4A2E 0310                  		tst.b	$310(a6)
000C927A 6A00                       		bpl.s	locret_722C4
000C927C 08EE 0002 0370             		bset	#2,$370(a6)
000C9282                            
000C9282                            locret_722C4:
000C9282 4E75                       		rts	
000C9284                            ; ===========================================================================
000C9284                            
000C9284                            loc_722C6:
000C9284 4216                       		clr.b	0(a6)
000C9286 4E75                       		rts	
000C9288                            ; ===========================================================================
000C9288 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
000C928C 0000 0000                  		dc.l 0
000C9290 00FF F100                  		dc.l $FFF100
000C9294 00FF F130                  		dc.l $FFF130
000C9298 00FF F190                  		dc.l $FFF190
000C929C 00FF F1C0                  		dc.l $FFF1C0
000C92A0 00FF F1F0                  		dc.l $FFF1F0
000C92A4 00FF F1F0                  		dc.l $FFF1F0
000C92A8 00FF F220                  dword_722EC:	dc.l $FFF220
000C92AC 0000 0000                  		dc.l 0
000C92B0 00FF F250                  		dc.l $FFF250
000C92B4 00FF F280                  		dc.l $FFF280
000C92B8 00FF F2B0                  		dc.l $FFF2B0
000C92BC 00FF F2E0                  		dc.l $FFF2E0
000C92C0 00FF F310                  		dc.l $FFF310
000C92C4 00FF F310                  		dc.l $FFF310
000C92C8                            ; ===========================================================================
000C92C8                            ; ---------------------------------------------------------------------------
000C92C8                            ; Play GHZ waterfall sound
000C92C8                            ; ---------------------------------------------------------------------------
000C92C8                            
000C92C8                            Sound_D0toDF:				; XREF: Sound_ChkValue
000C92C8 4A2E 0027                  		tst.b	$27(a6)
000C92CC 6600 0000                  		bne.w	locret_723C6
000C92D0 4A2E 0004                  		tst.b	4(a6)
000C92D4 6600 0000                  		bne.w	locret_723C6
000C92D8 4A2E 0024                  		tst.b	$24(a6)
000C92DC 6600 0000                  		bne.w	locret_723C6
000C92E0 2079 000C 88E0             		movea.l	(Go_SoundD0).l,a0
000C92E6 0407 00D0                  		subi.b	#$D0,d7
000C92EA E54F                       		lsl.w	#2,d7
000C92EC 2670 7000                  		movea.l	(a0,d7.w),a3
000C92F0 224B                       		movea.l	a3,a1
000C92F2 7000                       		moveq	#0,d0
000C92F4 3019                       		move.w	(a1)+,d0
000C92F6 D08B                       		add.l	a3,d0
000C92F8 2D40 0020                  		move.l	d0,$20(a6)
000C92FC 1A19                       		move.b	(a1)+,d5
000C92FE 1E19                       		move.b	(a1)+,d7
000C9300 5307                       		subq.b	#1,d7
000C9302 7C30                       		moveq	#$30,d6
000C9304                            
000C9304                            loc_72348:
000C9304 1829 0001                  		move.b	1(a1),d4
000C9308 6B00                       		bmi.s	loc_7235A
000C930A 08EE 0002 0100             		bset	#2,$100(a6)
000C9310 4BEE 0340                  		lea	$340(a6),a5
000C9314 6000                       		bra.s	loc_72364
000C9316                            ; ===========================================================================
000C9316                            
000C9316                            loc_7235A:
000C9316 08EE 0002 01F0             		bset	#2,$1F0(a6)
000C931C 4BEE 0370                  		lea	$370(a6),a5
000C9320                            
000C9320                            loc_72364:
000C9320 244D                       		movea.l	a5,a2
000C9322 700B                       		moveq	#$B,d0
000C9324                            
000C9324                            loc_72368:
000C9324 429A                       		clr.l	(a2)+
000C9326 51C8 FFFC                  		dbf	d0,loc_72368
000C932A                            
000C932A 3A99                       		move.w	(a1)+,(a5)
000C932C 1B45 0002                  		move.b	d5,2(a5)
000C9330 7000                       		moveq	#0,d0
000C9332 3019                       		move.w	(a1)+,d0
000C9334 D08B                       		add.l	a3,d0
000C9336 2B40 0004                  		move.l	d0,4(a5)
000C933A 3B59 0008                  		move.w	(a1)+,8(a5)
000C933E 1B7C 0001 000E             		move.b	#1,$E(a5)
000C9344 1B46 000D                  		move.b	d6,$D(a5)
000C9348 4A04                       		tst.b	d4
000C934A 6B00                       		bmi.s	loc_72396
000C934C 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000C9352                            
000C9352                            loc_72396:
000C9352 51CF FFB0                  		dbf	d7,loc_72348
000C9356                            
000C9356 4A2E 0250                  		tst.b	$250(a6)
000C935A 6A00                       		bpl.s	loc_723A6
000C935C 08EE 0002 0340             		bset	#2,$340(a6)
000C9362                            
000C9362                            loc_723A6:
000C9362 4A2E 0310                  		tst.b	$310(a6)
000C9366 6A00                       		bpl.s	locret_723C6
000C9368 08EE 0002 0370             		bset	#2,$370(a6)
000C936E 0004 001F                  		ori.b	#$1F,d4
000C9372 13C4 00C0 0011             		move.b	d4,($C00011).l
000C9378 0844 0005                  		bchg	#5,d4
000C937C 13C4 00C0 0011             		move.b	d4,($C00011).l
000C9382                            
000C9382                            locret_723C6:
000C9382 4E75                       		rts
000C9384                            		              
000C9384                            	
000C9384                            ; End of function Sound_ChkValue
000C9384                            
000C9384                            ; ===========================================================================
000C9384 00FF F100                  		dc.l $FFF100
000C9388 00FF F1F0                  		dc.l $FFF1F0
000C938C 00FF F250                  		dc.l $FFF250
000C9390 00FF F310                  		dc.l $FFF310
000C9394 00FF F340                  		dc.l $FFF340
000C9398 00FF F370                  		dc.l $FFF370
000C939C                            
000C939C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C939C                            
000C939C                            
000C939C                            Snd_FadeOut1:				; XREF: Sound_E0
000C939C 4216                       		clr.b	0(a6)
000C939E 4BEE 0220                  		lea	$220(a6),a5
000C93A2 7E05                       		moveq	#5,d7
000C93A4                            
000C93A4                            loc_723EA:
000C93A4 4A15                       		tst.b	(a5)
000C93A6 6A00 0000                  		bpl.w	loc_72472
000C93AA 0895 0007                  		bclr	#7,(a5)
000C93AE 7600                       		moveq	#0,d3
000C93B0 162D 0001                  		move.b	1(a5),d3
000C93B4 6B00                       		bmi.s	loc_7243C
000C93B6 4EBA 0000                  		jsr	sub_726FE(pc)
000C93BA 0C03 0004                  		cmpi.b	#4,d3
000C93BE 6600                       		bne.s	loc_72416
000C93C0 4A2E 0340                  		tst.b	$340(a6)
000C93C4 6A00                       		bpl.s	loc_72416
000C93C6 4BEE 0340                  		lea	$340(a6),a5
000C93CA 226E 0020                  		movea.l	$20(a6),a1
000C93CE 6000                       		bra.s	loc_72428
000C93D0                            ; ===========================================================================
000C93D0                            
000C93D0                            loc_72416:
000C93D0 5503                       		subq.b	#2,d3
000C93D2 E50B                       		lsl.b	#2,d3
000C93D4 41FA FEB2                  		lea	dword_722CC(pc),a0
000C93D8 264D                       		movea.l	a5,a3
000C93DA 2A70 3000                  		movea.l	(a0,d3.w),a5
000C93DE 226E 0018                  		movea.l	$18(a6),a1
000C93E2                            
000C93E2                            loc_72428:
000C93E2 0895 0002                  		bclr	#2,(a5)
000C93E6 08D5 0001                  		bset	#1,(a5)
000C93EA 102D 000B                  		move.b	$B(a5),d0
000C93EE 4EBA 0000                  		jsr	sub_72C4E(pc)
000C93F2 2A4B                       		movea.l	a3,a5
000C93F4 6000                       		bra.s	loc_72472
000C93F6                            ; ===========================================================================
000C93F6                            
000C93F6                            loc_7243C:
000C93F6 4EBA 0000                  		jsr	sub_729A0(pc)
000C93FA 41EE 0370                  		lea	$370(a6),a0
000C93FE 0C03 00E0                  		cmpi.b	#$E0,d3
000C9402 6700                       		beq.s	loc_7245A
000C9404 0C03 00C0                  		cmpi.b	#$C0,d3
000C9408 6700                       		beq.s	loc_7245A
000C940A E60B                       		lsr.b	#3,d3
000C940C 41FA FE7A                  		lea	dword_722CC(pc),a0
000C9410 2070 3000                  		movea.l	(a0,d3.w),a0
000C9414                            
000C9414                            loc_7245A:
000C9414 0890 0002                  		bclr	#2,(a0)
000C9418 08D0 0001                  		bset	#1,(a0)
000C941C 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000C9422 6600                       		bne.s	loc_72472
000C9424 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000C942C                            
000C942C                            loc_72472:
000C942C DAFC 0030                  		adda.w	#$30,a5
000C9430 51CF FF72                  		dbf	d7,loc_723EA
000C9434                            
000C9434 4E75                       		rts	
000C9436                            ; End of function Snd_FadeOut1
000C9436                            
000C9436                            
000C9436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C9436                            
000C9436                            
000C9436                            Snd_FadeOut2:				; XREF: Sound_E0
000C9436 4BEE 0340                  		lea	$340(a6),a5
000C943A 4A15                       		tst.b	(a5)
000C943C 6A00                       		bpl.s	loc_724AE
000C943E 0895 0007                  		bclr	#7,(a5)
000C9442 0815 0002                  		btst	#2,(a5)
000C9446 6600                       		bne.s	loc_724AE
000C9448 4EBA 0000                  		jsr	loc_7270A(pc)
000C944C 4BEE 0100                  		lea	$100(a6),a5
000C9450 0895 0002                  		bclr	#2,(a5)
000C9454 08D5 0001                  		bset	#1,(a5)
000C9458 4A15                       		tst.b	(a5)
000C945A 6A00                       		bpl.s	loc_724AE
000C945C 226E 0018                  		movea.l	$18(a6),a1
000C9460 102D 000B                  		move.b	$B(a5),d0
000C9464 4EBA 0000                  		jsr	sub_72C4E(pc)
000C9468                            
000C9468                            loc_724AE:
000C9468 4BEE 0370                  		lea	$370(a6),a5
000C946C 4A15                       		tst.b	(a5)
000C946E 6A00                       		bpl.s	locret_724E4
000C9470 0895 0007                  		bclr	#7,(a5)
000C9474 0815 0002                  		btst	#2,(a5)
000C9478 6600                       		bne.s	locret_724E4
000C947A 4EBA 0000                  		jsr	loc_729A6(pc)
000C947E 4BEE 01F0                  		lea	$1F0(a6),a5
000C9482 0895 0002                  		bclr	#2,(a5)
000C9486 08D5 0001                  		bset	#1,(a5)
000C948A 4A15                       		tst.b	(a5)
000C948C 6A00                       		bpl.s	locret_724E4
000C948E 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000C9494 6600                       		bne.s	locret_724E4
000C9496 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000C949E                            
000C949E                            locret_724E4:
000C949E 4E75                       		rts	
000C94A0                            ; End of function Snd_FadeOut2
000C94A0                            
000C94A0                            ; ===========================================================================
000C94A0                            ; ---------------------------------------------------------------------------
000C94A0                            ; Fade out music
000C94A0                            ; ---------------------------------------------------------------------------
000C94A0                            
000C94A0                            Sound_E0:				; XREF: Sound_ExIndex
000C94A0 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
000C94A4 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
000C94A8 1D7C 0003 0006             		move.b	#3,6(a6)
000C94AE 1D7C 0028 0004             		move.b	#$28,4(a6)
000C94B4 422E 0040                  		clr.b	$40(a6)
000C94B8 422E 002A                  		clr.b	$2A(a6)
000C94BC 4E75                       		rts	
000C94BE                            
000C94BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C94BE                            
000C94BE                            
000C94BE                            sub_72504:				; XREF: UpdateMusic
000C94BE 102E 0006                  		move.b	6(a6),d0
000C94C2 6700                       		beq.s	loc_72510
000C94C4 532E 0006                  		subq.b	#1,6(a6)
000C94C8 4E75                       		rts	
000C94CA                            ; ===========================================================================
000C94CA                            
000C94CA                            loc_72510:
000C94CA 532E 0004                  		subq.b	#1,4(a6)
000C94CE 6700 0000                  		beq.w	Sound_E4
000C94D2 1D7C 0003 0006             		move.b	#3,6(a6)
000C94D8 4BEE 0070                  		lea	$70(a6),a5
000C94DC 7E05                       		moveq	#5,d7
000C94DE                            
000C94DE                            loc_72524:
000C94DE 4A15                       		tst.b	(a5)
000C94E0 6A00                       		bpl.s	loc_72538
000C94E2 522D 0009                  		addq.b	#1,9(a5)
000C94E6 6A00                       		bpl.s	loc_72534
000C94E8 0895 0007                  		bclr	#7,(a5)
000C94EC 6000                       		bra.s	loc_72538
000C94EE                            ; ===========================================================================
000C94EE                            
000C94EE                            loc_72534:
000C94EE 4EBA 0000                  		jsr	sub_72CB4(pc)
000C94F2                            
000C94F2                            loc_72538:
000C94F2 DAFC 0030                  		adda.w	#$30,a5
000C94F6 51CF FFE6                  		dbf	d7,loc_72524
000C94FA                            
000C94FA 7E02                       		moveq	#2,d7
000C94FC                            
000C94FC                            loc_72542:
000C94FC 4A15                       		tst.b	(a5)
000C94FE 6A00                       		bpl.s	loc_72560
000C9500 522D 0009                  		addq.b	#1,9(a5)
000C9504 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
000C950A 6500                       		bcs.s	loc_72558
000C950C 0895 0007                  		bclr	#7,(a5)
000C9510 6000                       		bra.s	loc_72560
000C9512                            ; ===========================================================================
000C9512                            
000C9512                            loc_72558:
000C9512 1C2D 0009                  		move.b	9(a5),d6
000C9516 4EBA 0000                  		jsr	sub_7296A(pc)
000C951A                            
000C951A                            loc_72560:
000C951A DAFC 0030                  		adda.w	#$30,a5
000C951E 51CF FFDC                  		dbf	d7,loc_72542
000C9522                            
000C9522 4E75                       		rts	
000C9524                            ; End of function sub_72504
000C9524                            
000C9524                            
000C9524                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C9524                            
000C9524                            
000C9524                            sub_7256A:				; XREF: Sound_E4; sub_725CA
000C9524 7602                       		moveq	#2,d3
000C9526 7028                       		moveq	#$28,d0
000C9528                            
000C9528                            loc_7256E:
000C9528 1203                       		move.b	d3,d1
000C952A 4EBA 0000                  		jsr	sub_7272E(pc)
000C952E 5801                       		addq.b	#4,d1
000C9530 4EBA 0000                  		jsr	sub_7272E(pc)
000C9534 51CB FFF2                  		dbf	d3,loc_7256E
000C9538                            
000C9538 7040                       		moveq	#$40,d0
000C953A 727F                       		moveq	#$7F,d1
000C953C 7802                       		moveq	#2,d4
000C953E                            
000C953E                            loc_72584:
000C953E 7603                       		moveq	#3,d3
000C9540                            
000C9540                            loc_72586:
000C9540 4EBA 0000                  		jsr	sub_7272E(pc)
000C9544 4EBA 0000                  		jsr	sub_72764(pc)
000C9548 5840                       		addq.w	#4,d0
000C954A 51CB FFF4                  		dbf	d3,loc_72586
000C954E                            
000C954E 0400 000F                  		subi.b	#$F,d0
000C9552 51CC FFEA                  		dbf	d4,loc_72584
000C9556                            
000C9556 4E75                       		rts	
000C9558                            ; End of function sub_7256A
000C9558                            
000C9558                            ; ===========================================================================
000C9558                            ; ---------------------------------------------------------------------------
000C9558                            ; Stop music
000C9558                            ; ---------------------------------------------------------------------------
000C9558                            
000C9558                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
000C9558 702B                       		moveq	#$2B,d0
000C955A 123C 0080                  		move.b	#$80,d1
000C955E 4EBA 0000                  		jsr	sub_7272E(pc)
000C9562 7027                       		moveq	#$27,d0
000C9564 7200                       		moveq	#0,d1
000C9566 4EBA 0000                  		jsr	sub_7272E(pc)
000C956A 204E                       		movea.l	a6,a0
000C956C 303C 00E3                  		move.w	#$E3,d0
000C9570                            
000C9570                            loc_725B6:
000C9570 4298                       		clr.l	(a0)+
000C9572 51C8 FFFC                  		dbf	d0,loc_725B6
000C9576                            
000C9576 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
000C957C 4EBA FFA6                  		jsr	sub_7256A(pc)
000C9580 13FC 0080 00A0 1FFF                        move.b	#$80,($A01FFF).l ; stop DAC playback
000C9588 6000 0000                  		bra.w	sub_729B6
000C958C                            
000C958C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C958C                            
000C958C                            
000C958C                            sub_725CA:				; XREF: Sound_ChkValue
000C958C 204E                       		movea.l	a6,a0
000C958E 1216                       		move.b	0(a6),d1
000C9590 142E 0027                  		move.b	$27(a6),d2
000C9594 162E 002A                  		move.b	$2A(a6),d3
000C9598 182E 0026                  		move.b	$26(a6),d4
000C959C 3A2E 000A                  		move.w	$A(a6),d5
000C95A0 303C 0087                  		move.w	#$87,d0
000C95A4                            
000C95A4                            loc_725E4:
000C95A4 4298                       		clr.l	(a0)+
000C95A6 51C8 FFFC                  		dbf	d0,loc_725E4
000C95AA                            
000C95AA 1C81                       		move.b	d1,0(a6)
000C95AC 1D42 0027                  		move.b	d2,$27(a6)
000C95B0 1D43 002A                  		move.b	d3,$2A(a6)
000C95B4 1D44 0026                  		move.b	d4,$26(a6)
000C95B8 3D45 000A                  		move.w	d5,$A(a6)
000C95BC 1D7C 0080 0009             		move.b	#$80,9(a6)
000C95C2 4EBA FF60                  		jsr	sub_7256A(pc)
000C95C6 6000 0000                  		bra.w	sub_729B6
000C95CA                            ; End of function sub_725CA
000C95CA                            
000C95CA                            
000C95CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C95CA                            
000C95CA                            
000C95CA                            sub_7260C:				; XREF: UpdateMusic
000C95CA 1D6E 0002 0001             		move.b	2(a6),1(a6)
000C95D0 41EE 004E                  		lea	$4E(a6),a0
000C95D4 7030                       		moveq	#$30,d0
000C95D6 7209                       		moveq	#9,d1
000C95D8                            
000C95D8                            loc_7261A:
000C95D8 5210                       		addq.b	#1,(a0)
000C95DA D0C0                       		adda.w	d0,a0
000C95DC 51C9 FFFA                  		dbf	d1,loc_7261A
000C95E0                            
000C95E0 4E75                       		rts	
000C95E2                            ; End of function sub_7260C
000C95E2                            
000C95E2                            ; ===========================================================================
000C95E2                            ; ---------------------------------------------------------------------------
000C95E2                            ; Speed	up music
000C95E2                            ; ---------------------------------------------------------------------------
000C95E2                            
000C95E2                            Sound_E2:				; XREF: Sound_ExIndex
000C95E2 4A2E 0027                  		tst.b	$27(a6)
000C95E6 6600                       		bne.s	loc_7263E
000C95E8 1D6E 0029 0002             		move.b	$29(a6),2(a6)
000C95EE 1D6E 0029 0001             		move.b	$29(a6),1(a6)
000C95F4 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000C95FA 4E75                       		rts	
000C95FC                            ; ===========================================================================
000C95FC                            
000C95FC                            loc_7263E:
000C95FC 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
000C9602 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
000C9608 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
000C960E 4E75                       		rts	
000C9610                            ; ===========================================================================
000C9610                            ; ---------------------------------------------------------------------------
000C9610                            ; Change music back to normal speed
000C9610                            ; ---------------------------------------------------------------------------
000C9610                            
000C9610                            Sound_E3:				; XREF: Sound_ExIndex
000C9610 4A2E 0027                  		tst.b	$27(a6)
000C9614 6600                       		bne.s	loc_7266A
000C9616 1D6E 0028 0002             		move.b	$28(a6),2(a6)
000C961C 1D6E 0028 0001             		move.b	$28(a6),1(a6)
000C9622 422E 002A                  		clr.b	$2A(a6)
000C9626 4E75                       		rts	
000C9628                            ; ===========================================================================
000C9628                            
000C9628                            loc_7266A:
000C9628 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
000C962E 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
000C9634 422E 03CA                  		clr.b	$3CA(a6)
000C9638 4E75                       		rts	
000C963A                            
000C963A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C963A                            
000C963A                            
000C963A                            sub_7267C:				; XREF: UpdateMusic
000C963A 4A2E 0025                  		tst.b	$25(a6)
000C963E 6700                       		beq.s	loc_72688
000C9640 532E 0025                  		subq.b	#1,$25(a6)
000C9644 4E75                       		rts	
000C9646                            ; ===========================================================================
000C9646                            
000C9646                            loc_72688:
000C9646 4A2E 0026                  		tst.b	$26(a6)
000C964A 6700                       		beq.s	loc_726D6
000C964C 532E 0026                  		subq.b	#1,$26(a6)
000C9650 1D7C 0002 0025             		move.b	#2,$25(a6)
000C9656 4BEE 0070                  		lea	$70(a6),a5
000C965A 7E05                       		moveq	#5,d7
000C965C                            
000C965C                            loc_7269E:
000C965C 4A15                       		tst.b	(a5)
000C965E 6A00                       		bpl.s	loc_726AA
000C9660 532D 0009                  		subq.b	#1,9(a5)
000C9664 4EBA 0000                  		jsr	sub_72CB4(pc)
000C9668                            
000C9668                            loc_726AA:
000C9668 DAFC 0030                  		adda.w	#$30,a5
000C966C 51CF FFEE                  		dbf	d7,loc_7269E
000C9670 7E02                       		moveq	#2,d7
000C9672                            
000C9672                            loc_726B4:
000C9672 4A15                       		tst.b	(a5)
000C9674 6A00                       		bpl.s	loc_726CC
000C9676 532D 0009                  		subq.b	#1,9(a5)
000C967A 1C2D 0009                  		move.b	9(a5),d6
000C967E 0C06 0010                  		cmpi.b	#$10,d6
000C9682 6500                       		bcs.s	loc_726C8
000C9684 7C0F                       		moveq	#$F,d6
000C9686                            
000C9686                            loc_726C8:
000C9686 4EBA 0000                  		jsr	sub_7296A(pc)
000C968A                            
000C968A                            loc_726CC:
000C968A DAFC 0030                  		adda.w	#$30,a5
000C968E 51CF FFE2                  		dbf	d7,loc_726B4
000C9692 4E75                       		rts	
000C9694                            ; ===========================================================================
000C9694                            
000C9694                            loc_726D6:
000C9694 08AE 0002 0040             		bclr	#2,$40(a6)
000C969A 422E 0024                  		clr.b	$24(a6)
000C969E 4E75                       		rts	
000C96A0                            ; End of function sub_7267C
000C96A0                            
000C96A0                            ; ===========================================================================
000C96A0                            
000C96A0                            loc_726E2:				; XREF: sub_71CCA
000C96A0 0815 0001                  		btst	#1,(a5)
000C96A4 6600                       		bne.s	locret_726FC
000C96A6 0815 0002                  		btst	#2,(a5)
000C96AA 6600                       		bne.s	locret_726FC
000C96AC 7028                       		moveq	#$28,d0
000C96AE 122D 0001                  		move.b	1(a5),d1
000C96B2 0001 00F0                  		ori.b	#-$10,d1
000C96B6 6000 0000                  		bra.w	sub_7272E
000C96BA                            ; ===========================================================================
000C96BA                            
000C96BA                            locret_726FC:
000C96BA 4E75                       		rts	
000C96BC                            
000C96BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C96BC                            
000C96BC                            
000C96BC                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000C96BC 0815 0004                  		btst	#4,(a5)
000C96C0 6600                       		bne.s	locret_72714
000C96C2 0815 0002                  		btst	#2,(a5)
000C96C6 6600                       		bne.s	locret_72714
000C96C8                            
000C96C8                            loc_7270A:				; XREF: Snd_FadeOut2
000C96C8 7028                       		moveq	#$28,d0
000C96CA 122D 0001                  		move.b	1(a5),d1
000C96CE 6000 0000                  		bra.w	sub_7272E
000C96D2                            ; ===========================================================================
000C96D2                            
000C96D2                            locret_72714:
000C96D2 4E75                       		rts	
000C96D4                            ; End of function sub_726FE
000C96D4                            
000C96D4                            ; ===========================================================================
000C96D4                            
000C96D4                            loc_72716:				; XREF: sub_72A5A
000C96D4 0815 0002                  		btst	#2,(a5)
000C96D8 6600                       		bne.s	locret_72720
000C96DA 6000 0000                  		bra.w	sub_72722
000C96DE                            ; ===========================================================================
000C96DE                            
000C96DE                            locret_72720:
000C96DE 4E75                       		rts	
000C96E0                            
000C96E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C96E0                            
000C96E0                            
000C96E0                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000C96E0 082D 0002 0001             		btst	#2,1(a5)
000C96E6 6600                       		bne.s	loc_7275A
000C96E8 D02D 0001                  		add.b	1(a5),d0
000C96EC                            ; End of function sub_72722
000C96EC                            
000C96EC                            
000C96EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C96EC                            
000C96EC                            
000C96EC                            sub_7272E:				; XREF: loc_71E6A
000C96EC 1439 00A0 4000             		move.b	($A04000).l,d2
000C96F2 0802 0007                  		btst	#7,d2
000C96F6 66F4                       		bne.s	sub_7272E
000C96F8 13C0 00A0 4000             		move.b	d0,($A04000).l
000C96FE 4E71                       		nop	
000C9700 4E71                       		nop	
000C9702 4E71                       		nop	
000C9704                            
000C9704                            loc_72746:
000C9704 1439 00A0 4000             		move.b	($A04000).l,d2
000C970A 0802 0007                  		btst	#7,d2
000C970E 66F4                       		bne.s	loc_72746
000C9710                            
000C9710 13C1 00A0 4001             		move.b	d1,($A04001).l
000C9716 4E75                       		rts	
000C9718                            ; End of function sub_7272E
000C9718                            
000C9718                            ; ===========================================================================
000C9718                            
000C9718                            loc_7275A:				; XREF: sub_72722
000C9718 142D 0001                  		move.b	1(a5),d2
000C971C 0882 0002                  		bclr	#2,d2
000C9720 D002                       		add.b	d2,d0
000C9722                            
000C9722                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C9722                            
000C9722                            
000C9722                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
000C9722 1439 00A0 4000             		move.b	($A04000).l,d2
000C9728 0802 0007                  		btst	#7,d2
000C972C 66F4                       		bne.s	sub_72764
000C972E 13C0 00A0 4002             		move.b	d0,($A04002).l
000C9734 4E71                       		nop	
000C9736 4E71                       		nop	
000C9738 4E71                       		nop	
000C973A                            
000C973A                            loc_7277C:
000C973A 1439 00A0 4000             		move.b	($A04000).l,d2
000C9740 0802 0007                  		btst	#7,d2
000C9744 66F4                       		bne.s	loc_7277C
000C9746                            
000C9746 13C1 00A0 4003             		move.b	d1,($A04003).l
000C974C 4E75                       		rts	
000C974E                            ; End of function sub_72764
000C974E                            
000C974E                            ; ===========================================================================
000C974E 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
000C9760 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
000C9772 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
000C9782 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
000C9792 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000C97A2 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000C97B2 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000C97C2 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000C97D2 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000C97E2 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
000C97F2 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
000C9802 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
000C980E                            
000C980E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C980E                            
000C980E                            
000C980E                            sub_72850:				; XREF: UpdateMusic
000C980E 532D 000E                  		subq.b	#1,$E(a5)
000C9812 6600                       		bne.s	loc_72866
000C9814 0895 0004                  		bclr	#4,(a5)
000C9818 4EBA 0000                  		jsr	sub_72878(pc)
000C981C 4EBA 0000                  		jsr	sub_728DC(pc)
000C9820 6000 0000                  		bra.w	loc_7292E
000C9824                            ; ===========================================================================
000C9824                            
000C9824                            loc_72866:
000C9824 4EBA F4E4                  		jsr	sub_71D9E(pc)
000C9828 4EBA 0000                  		jsr	sub_72926(pc)
000C982C 4EBA F504                  		jsr	sub_71DC6(pc)
000C9830 4EBA 0000                  		jsr	sub_728E2(pc)
000C9834 4E75                       		rts	
000C9836                            ; End of function sub_72850
000C9836                            
000C9836                            
000C9836                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C9836                            
000C9836                            
000C9836                            sub_72878:				; XREF: sub_72850
000C9836 0895 0001                  		bclr	#1,(a5)
000C983A 286D 0004                  		movea.l	4(a5),a4
000C983E                            
000C983E                            loc_72880:
000C983E 7A00                       		moveq	#0,d5
000C9840 1A1C                       		move.b	(a4)+,d5
000C9842 0C05 00E0                  		cmpi.b	#$E0,d5
000C9846 6500                       		bcs.s	loc_72890
000C9848 4EBA 0000                  		jsr	sub_72A5A(pc)
000C984C 60F0                       		bra.s	loc_72880
000C984E                            ; ===========================================================================
000C984E                            
000C984E                            loc_72890:
000C984E 4A05                       		tst.b	d5
000C9850 6A00                       		bpl.s	loc_728A4
000C9852 4EBA 0000                  		jsr	sub_728AC(pc)
000C9856 1A1C                       		move.b	(a4)+,d5
000C9858 4A05                       		tst.b	d5
000C985A 6A00                       		bpl.s	loc_728A4
000C985C 534C                       		subq.w	#1,a4
000C985E 6000 F46C                  		bra.w	sub_71D60
000C9862                            ; ===========================================================================
000C9862                            
000C9862                            loc_728A4:
000C9862 4EBA F448                  		jsr	sub_71D40(pc)
000C9866 6000 F464                  		bra.w	sub_71D60
000C986A                            ; End of function sub_72878
000C986A                            
000C986A                            
000C986A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C986A                            
000C986A                            
000C986A                            sub_728AC:				; XREF: sub_72878
000C986A 0405 0081                  		subi.b	#$81,d5
000C986E 6500                       		bcs.s	loc_728CA
000C9870 DA2D 0008                  		add.b	8(a5),d5
000C9874 0245 007F                  		andi.w	#$7F,d5
000C9878 E34D                       		lsl.w	#1,d5
000C987A 41FA 0000                  		lea	word_729CE(pc),a0
000C987E 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
000C9884 6000 F446                  		bra.w	sub_71D60
000C9888                            ; ===========================================================================
000C9888                            
000C9888                            loc_728CA:
000C9888 08D5 0001                  		bset	#1,(a5)
000C988C 3B7C FFFF 0010             		move.w	#-1,$10(a5)
000C9892 4EBA F438                  		jsr	sub_71D60(pc)
000C9896 6000 0000                  		bra.w	sub_729A0
000C989A                            ; End of function sub_728AC
000C989A                            
000C989A                            
000C989A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C989A                            
000C989A                            
000C989A                            sub_728DC:				; XREF: sub_72850
000C989A 3C2D 0010                  		move.w	$10(a5),d6
000C989E 6B00                       		bmi.s	loc_72920
000C98A0                            ; End of function sub_728DC
000C98A0                            
000C98A0                            
000C98A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C98A0                            
000C98A0                            
000C98A0                            sub_728E2:				; XREF: sub_72850
000C98A0 102D 001E                  		move.b	$1E(a5),d0
000C98A4 4880                       		ext.w	d0
000C98A6 DC40                       		add.w	d0,d6
000C98A8 0815 0002                  		btst	#2,(a5)
000C98AC 6600                       		bne.s	locret_7291E
000C98AE 0815 0001                  		btst	#1,(a5)
000C98B2 6600                       		bne.s	locret_7291E
000C98B4 102D 0001                  		move.b	1(a5),d0
000C98B8 0C00 00E0                  		cmpi.b	#$E0,d0
000C98BC 6600                       		bne.s	loc_72904
000C98BE 103C 00C0                  		move.b	#$C0,d0
000C98C2                            
000C98C2                            loc_72904:
000C98C2 3206                       		move.w	d6,d1
000C98C4 0201 000F                  		andi.b	#$F,d1
000C98C8 8001                       		or.b	d1,d0
000C98CA E84E                       		lsr.w	#4,d6
000C98CC 0206 003F                  		andi.b	#$3F,d6
000C98D0 13C0 00C0 0011             		move.b	d0,($C00011).l
000C98D6 13C6 00C0 0011             		move.b	d6,($C00011).l
000C98DC                            
000C98DC                            locret_7291E:
000C98DC 4E75                       		rts	
000C98DE                            ; End of function sub_728E2
000C98DE                            
000C98DE                            ; ===========================================================================
000C98DE                            
000C98DE                            loc_72920:				; XREF: sub_728DC
000C98DE 08D5 0001                  		bset	#1,(a5)
000C98E2 4E75                       		rts	
000C98E4                            
000C98E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C98E4                            
000C98E4                            
000C98E4                            sub_72926:				; XREF: sub_72850
000C98E4 4A2D 000B                  		tst.b	$B(a5)
000C98E8 6700 0000                  		beq.w	locret_7298A
000C98EC                            
000C98EC                            loc_7292E:				; XREF: sub_72850
000C98EC 1C2D 0009                  		move.b	9(a5),d6
000C98F0 7000                       		moveq	#0,d0
000C98F2 102D 000B                  		move.b	$B(a5),d0
000C98F6 6700                       		beq.s	sub_7296A
000C98F8 2079 000C 88F0             		movea.l	(Go_PSGIndex).l,a0
000C98FE 5340                       		subq.w	#1,d0
000C9900 E548                       		lsl.w	#2,d0
000C9902 2070 0000                  		movea.l	(a0,d0.w),a0
000C9906 102D 000C                  		move.b	$C(a5),d0
000C990A 1030 0000                  		move.b	(a0,d0.w),d0
000C990E 522D 000C                  		addq.b	#1,$C(a5)
000C9912 0800 0007                  		btst	#7,d0
000C9916 6700                       		beq.s	loc_72960
000C9918 0C00 0080                  		cmpi.b	#$80,d0
000C991C 6700                       		beq.s	loc_7299A
000C991E                            
000C991E                            loc_72960:
000C991E DC40                       		add.w	d0,d6
000C9920 0C06 0010                  		cmpi.b	#$10,d6
000C9924 6500                       		bcs.s	sub_7296A
000C9926 7C0F                       		moveq	#$F,d6
000C9928                            ; End of function sub_72926
000C9928                            
000C9928                            
000C9928                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C9928                            
000C9928                            
000C9928                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
000C9928 0815 0001                  		btst	#1,(a5)
000C992C 6600                       		bne.s	locret_7298A
000C992E 0815 0002                  		btst	#2,(a5)
000C9932 6600                       		bne.s	locret_7298A
000C9934 0815 0004                  		btst	#4,(a5)
000C9938 6600                       		bne.s	loc_7298C
000C993A                            
000C993A                            loc_7297C:
000C993A 8C2D 0001                  		or.b	1(a5),d6
000C993E 0606 0010                  		addi.b	#$10,d6
000C9942 13C6 00C0 0011             		move.b	d6,($C00011).l
000C9948                            
000C9948                            locret_7298A:
000C9948 4E75                       		rts	
000C994A                            ; ===========================================================================
000C994A                            
000C994A                            loc_7298C:
000C994A 4A2D 0013                  		tst.b	$13(a5)
000C994E 67EA                       		beq.s	loc_7297C
000C9950 4A2D 0012                  		tst.b	$12(a5)
000C9954 66E4                       		bne.s	loc_7297C
000C9956 4E75                       		rts	
000C9958                            ; End of function sub_7296A
000C9958                            
000C9958                            ; ===========================================================================
000C9958                            
000C9958                            loc_7299A:				; XREF: sub_72926
000C9958 532D 000C                  		subq.b	#1,$C(a5)
000C995C 4E75                       		rts	
000C995E                            
000C995E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C995E                            
000C995E                            
000C995E                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
000C995E 0815 0002                  		btst	#2,(a5)
000C9962 6600                       		bne.s	locret_729B4
000C9964                            
000C9964                            loc_729A6:				; XREF: Snd_FadeOut2
000C9964 102D 0001                  		move.b	1(a5),d0
000C9968 0000 001F                  		ori.b	#$1F,d0
000C996C 13C0 00C0 0011             		move.b	d0,($C00011).l
000C9972                            
000C9972                            locret_729B4:
000C9972 4E75                       		rts	
000C9974                            ; End of function sub_729A0
000C9974                            
000C9974                            
000C9974                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C9974                            
000C9974                            
000C9974                            sub_729B6:				; XREF: loc_71E7C
000C9974 41F9 00C0 0011             		lea	($C00011).l,a0
000C997A 10BC 009F                  		move.b	#$9F,(a0)
000C997E 10BC 00BF                  		move.b	#$BF,(a0)
000C9982 10BC 00DF                  		move.b	#$DF,(a0)
000C9986 10BC 00FF                  		move.b	#$FF,(a0)
000C998A 4E75                       		rts	
000C998C                            ; End of function sub_729B6
000C998C                            
000C998C                            ; ===========================================================================
000C998C 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
000C999E 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000C99B0 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000C99C4 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000C99D8 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
000C99EC 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
000C9A00 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
000C9A14 0011 0000                  		dc.w $11, 0
000C9A18                            
000C9A18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C9A18                            
000C9A18                            
000C9A18                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000C9A18 0445 00E0                  		subi.w	#$E0,d5
000C9A1C E54D                       		lsl.w	#2,d5
000C9A1E 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
000C9A22                            ; End of function sub_72A5A
000C9A22                            
000C9A22                            ; ===========================================================================
000C9A22                            
000C9A22                            loc_72A64:
000C9A22 6000 0000                  		bra.w	loc_72ACC
000C9A26                            ; ===========================================================================
000C9A26 6000 0000                  		bra.w	loc_72AEC
000C9A2A                            ; ===========================================================================
000C9A2A 6000 0000                  		bra.w	loc_72AF2
000C9A2E                            ; ===========================================================================
000C9A2E 6000 0000                  		bra.w	loc_72AF8
000C9A32                            ; ===========================================================================
000C9A32 6000 0000                  		bra.w	loc_72B14
000C9A36                            ; ===========================================================================
000C9A36 6000 0000                  		bra.w	loc_72B9E
000C9A3A                            ; ===========================================================================
000C9A3A 6000 0000                  		bra.w	loc_72BA4
000C9A3E                            ; ===========================================================================
000C9A3E 6000 0000                  		bra.w	loc_72BAE
000C9A42                            ; ===========================================================================
000C9A42 6000 0000                  		bra.w	loc_72BB4
000C9A46                            ; ===========================================================================
000C9A46 6000 0000                  		bra.w	loc_72BBE
000C9A4A                            ; ===========================================================================
000C9A4A 6000 0000                  		bra.w	loc_72BC6
000C9A4E                            ; ===========================================================================
000C9A4E 6000 0000                  		bra.w	loc_72BD0
000C9A52                            ; ===========================================================================
000C9A52 6000 0000                  		bra.w	loc_72BE6
000C9A56                            ; ===========================================================================
000C9A56 6000 0000                  		bra.w	loc_72BEE
000C9A5A                            ; ===========================================================================
000C9A5A 6000 0000                  		bra.w	loc_72BF4
000C9A5E                            ; ===========================================================================
000C9A5E 6000 0000                  		bra.w	loc_72C26
000C9A62                            ; ===========================================================================
000C9A62 6000 0000                  		bra.w	loc_72D30
000C9A66                            ; ===========================================================================
000C9A66 6000 0000                  		bra.w	loc_72D52
000C9A6A                            ; ===========================================================================
000C9A6A 6000 0000                  		bra.w	loc_72D58
000C9A6E                            ; ===========================================================================
000C9A6E 6000 0000                  		bra.w	loc_72E06
000C9A72                            ; ===========================================================================
000C9A72 6000 0000                  		bra.w	loc_72E20
000C9A76                            ; ===========================================================================
000C9A76 6000 0000                  		bra.w	loc_72E26
000C9A7A                            ; ===========================================================================
000C9A7A 6000 0000                  		bra.w	loc_72E2C
000C9A7E                            ; ===========================================================================
000C9A7E 6000 0000                  		bra.w	loc_72E38
000C9A82                            ; ===========================================================================
000C9A82 6000 0000                  		bra.w	loc_72E52
000C9A86                            ; ===========================================================================
000C9A86 6000 0000                  		bra.w	loc_72E64
000C9A8A                            ; ===========================================================================
000C9A8A                            
000C9A8A                            loc_72ACC:				; XREF: loc_72A64
000C9A8A 121C                       		move.b	(a4)+,d1
000C9A8C 4A2D 0001                  		tst.b	1(a5)
000C9A90 6B00                       		bmi.s	locret_72AEA
000C9A92 102D 000A                  		move.b	$A(a5),d0
000C9A96 0200 0037                  		andi.b	#$37,d0
000C9A9A 8200                       		or.b	d0,d1
000C9A9C 1B41 000A                  		move.b	d1,$A(a5)
000C9AA0 103C 00B4                  		move.b	#$B4,d0
000C9AA4 6000 FC2E                  		bra.w	loc_72716
000C9AA8                            ; ===========================================================================
000C9AA8                            
000C9AA8                            locret_72AEA:
000C9AA8 4E75                       		rts	
000C9AAA                            ; ===========================================================================
000C9AAA                            
000C9AAA                            loc_72AEC:				; XREF: loc_72A64
000C9AAA 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000C9AAE 4E75                       		rts	
000C9AB0                            ; ===========================================================================
000C9AB0                            
000C9AB0                            loc_72AF2:				; XREF: loc_72A64
000C9AB0 1D5C 0007                  		move.b	(a4)+,7(a6)
000C9AB4 4E75                       		rts	
000C9AB6                            ; ===========================================================================
000C9AB6                            
000C9AB6                            loc_72AF8:				; XREF: loc_72A64
000C9AB6 7000                       		moveq	#0,d0
000C9AB8 102D 000D                  		move.b	$D(a5),d0
000C9ABC 2875 0000                  		movea.l	(a5,d0.w),a4
000C9AC0 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000C9AC8 544C                       		addq.w	#2,a4
000C9ACA 5800                       		addq.b	#4,d0
000C9ACC 1B40 000D                  		move.b	d0,$D(a5)
000C9AD0 4E75                       		rts	
000C9AD2                            ; ===========================================================================
000C9AD2                            
000C9AD2                            loc_72B14:				; XREF: loc_72A64
000C9AD2 204E                       		movea.l	a6,a0
000C9AD4 43EE 03A0                  		lea	$3A0(a6),a1
000C9AD8 303C 0087                  		move.w	#$87,d0
000C9ADC                            
000C9ADC                            loc_72B1E:
000C9ADC 20D9                       		move.l	(a1)+,(a0)+
000C9ADE 51C8 FFFC                  		dbf	d0,loc_72B1E
000C9AE2                            
000C9AE2 08EE 0002 0040             		bset	#2,$40(a6)
000C9AE8 264D                       		movea.l	a5,a3
000C9AEA 1C3C 0028                  		move.b	#$28,d6
000C9AEE 9C2E 0026                  		sub.b	$26(a6),d6
000C9AF2 7E05                       		moveq	#5,d7
000C9AF4 4BEE 0070                  		lea	$70(a6),a5
000C9AF8                            
000C9AF8                            loc_72B3A:
000C9AF8 0815 0007                  		btst	#7,(a5)
000C9AFC 6700                       		beq.s	loc_72B5C
000C9AFE 08D5 0001                  		bset	#1,(a5)
000C9B02 DD2D 0009                  		add.b	d6,9(a5)
000C9B06 0815 0002                  		btst	#2,(a5)
000C9B0A 6600                       		bne.s	loc_72B5C
000C9B0C 7000                       		moveq	#0,d0
000C9B0E 102D 000B                  		move.b	$B(a5),d0
000C9B12 226E 0018                  		movea.l	$18(a6),a1
000C9B16 4EBA 0000                  		jsr	sub_72C4E(pc)
000C9B1A                            
000C9B1A                            loc_72B5C:
000C9B1A DAFC 0030                  		adda.w	#$30,a5
000C9B1E 51CF FFD8                  		dbf	d7,loc_72B3A
000C9B22                            
000C9B22 7E02                       		moveq	#2,d7
000C9B24                            
000C9B24                            loc_72B66:
000C9B24 0815 0007                  		btst	#7,(a5)
000C9B28 6700                       		beq.s	loc_72B78
000C9B2A 08D5 0001                  		bset	#1,(a5)
000C9B2E 4EBA FE2E                  		jsr	sub_729A0(pc)
000C9B32 DD2D 0009                  		add.b	d6,9(a5)
000C9B36                            
000C9B36                            loc_72B78:
000C9B36 DAFC 0030                  		adda.w	#$30,a5
000C9B3A 51CF FFE8                  		dbf	d7,loc_72B66
000C9B3E 2A4B                       		movea.l	a3,a5
000C9B40 1D7C 0080 0024             		move.b	#$80,$24(a6)
000C9B46 1D7C 0028 0026             		move.b	#$28,$26(a6)
000C9B4C 422E 0027                  		clr.b	$27(a6)
000C9B50 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
000C9B58 504F                       		addq.w	#8,sp
000C9B5A 4E75                       		rts	
000C9B5C                            ; ===========================================================================
000C9B5C                            
000C9B5C                            loc_72B9E:				; XREF: loc_72A64
000C9B5C 1B5C 0002                  		move.b	(a4)+,2(a5)
000C9B60 4E75                       		rts	
000C9B62                            ; ===========================================================================
000C9B62                            
000C9B62                            loc_72BA4:				; XREF: loc_72A64
000C9B62 101C                       		move.b	(a4)+,d0
000C9B64 D12D 0009                  		add.b	d0,9(a5)
000C9B68 6000 0000                  		bra.w	sub_72CB4
000C9B6C                            ; ===========================================================================
000C9B6C                            
000C9B6C                            loc_72BAE:				; XREF: loc_72A64
000C9B6C 08D5 0004                  		bset	#4,(a5)
000C9B70 4E75                       		rts	
000C9B72                            ; ===========================================================================
000C9B72                            
000C9B72                            loc_72BB4:				; XREF: loc_72A64
000C9B72 1B54 0012                  		move.b	(a4),$12(a5)
000C9B76 1B5C 0013                  		move.b	(a4)+,$13(a5)
000C9B7A 4E75                       		rts	
000C9B7C                            ; ===========================================================================
000C9B7C                            
000C9B7C                            loc_72BBE:				; XREF: loc_72A64
000C9B7C 101C                       		move.b	(a4)+,d0
000C9B7E D12D 0008                  		add.b	d0,8(a5)
000C9B82 4E75                       		rts	
000C9B84                            ; ===========================================================================
000C9B84                            
000C9B84                            loc_72BC6:				; XREF: loc_72A64
000C9B84 1D54 0002                  		move.b	(a4),2(a6)
000C9B88 1D5C 0001                  		move.b	(a4)+,1(a6)
000C9B8C 4E75                       		rts	
000C9B8E                            ; ===========================================================================
000C9B8E                            
000C9B8E                            loc_72BD0:				; XREF: loc_72A64
000C9B8E 41EE 0040                  		lea	$40(a6),a0
000C9B92 101C                       		move.b	(a4)+,d0
000C9B94 7230                       		moveq	#$30,d1
000C9B96 7409                       		moveq	#9,d2
000C9B98                            
000C9B98                            loc_72BDA:
000C9B98 1140 0002                  		move.b	d0,2(a0)
000C9B9C D0C1                       		adda.w	d1,a0
000C9B9E 51CA FFF8                  		dbf	d2,loc_72BDA
000C9BA2                            
000C9BA2 4E75                       		rts	
000C9BA4                            ; ===========================================================================
000C9BA4                            
000C9BA4                            loc_72BE6:				; XREF: loc_72A64
000C9BA4 101C                       		move.b	(a4)+,d0
000C9BA6 D12D 0009                  		add.b	d0,9(a5)
000C9BAA 4E75                       		rts	
000C9BAC                            ; ===========================================================================
000C9BAC                            
000C9BAC                            loc_72BEE:				; XREF: loc_72A64
000C9BAC 422E 002C                  		clr.b	$2C(a6)
000C9BB0 4E75                       		rts	
000C9BB2                            ; ===========================================================================
000C9BB2                            
000C9BB2                            loc_72BF4:				; XREF: loc_72A64
000C9BB2 0895 0007                  		bclr	#7,(a5)
000C9BB6 0895 0004                  		bclr	#4,(a5)
000C9BBA 4EBA FB00                  		jsr	sub_726FE(pc)
000C9BBE 4A2E 0250                  		tst.b	$250(a6)
000C9BC2 6B00                       		bmi.s	loc_72C22
000C9BC4 264D                       		movea.l	a5,a3
000C9BC6 4BEE 0100                  		lea	$100(a6),a5
000C9BCA 226E 0018                  		movea.l	$18(a6),a1
000C9BCE 0895 0002                  		bclr	#2,(a5)
000C9BD2 08D5 0001                  		bset	#1,(a5)
000C9BD6 102D 000B                  		move.b	$B(a5),d0
000C9BDA 4EBA 0000                  		jsr	sub_72C4E(pc)
000C9BDE 2A4B                       		movea.l	a3,a5
000C9BE0                            
000C9BE0                            loc_72C22:
000C9BE0 504F                       		addq.w	#8,sp
000C9BE2 4E75                       		rts	
000C9BE4                            ; ===========================================================================
000C9BE4                            
000C9BE4                            loc_72C26:				; XREF: loc_72A64
000C9BE4 7000                       		moveq	#0,d0
000C9BE6 101C                       		move.b	(a4)+,d0
000C9BE8 1B40 000B                  		move.b	d0,$B(a5)
000C9BEC 0815 0002                  		btst	#2,(a5)
000C9BF0 6600 0000                  		bne.w	locret_72CAA
000C9BF4 226E 0018                  		movea.l	$18(a6),a1
000C9BF8 4A2E 000E                  		tst.b	$E(a6)
000C9BFC 6700                       		beq.s	sub_72C4E
000C9BFE 226D 0020                  		movea.l	$20(a5),a1
000C9C02 4A2E 000E                  		tst.b	$E(a6)
000C9C06 6B00                       		bmi.s	sub_72C4E
000C9C08 226E 0020                  		movea.l	$20(a6),a1
000C9C0C                            
000C9C0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C9C0C                            
000C9C0C                            
000C9C0C                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
000C9C0C 5340                       		subq.w	#1,d0
000C9C0E 6B00                       		bmi.s	loc_72C5C
000C9C10 323C 0019                  		move.w	#$19,d1
000C9C14                            
000C9C14                            loc_72C56:
000C9C14 D2C1                       		adda.w	d1,a1
000C9C16 51C8 FFFC                  		dbf	d0,loc_72C56
000C9C1A                            
000C9C1A                            loc_72C5C:
000C9C1A 1219                       		move.b	(a1)+,d1
000C9C1C 1B41 001F                  		move.b	d1,$1F(a5)
000C9C20 1801                       		move.b	d1,d4
000C9C22 103C 00B0                  		move.b	#$B0,d0
000C9C26 4EBA FAB8                  		jsr	sub_72722(pc)
000C9C2A 45FA 0000                  		lea	byte_72D18(pc),a2
000C9C2E 7613                       		moveq	#$13,d3
000C9C30                            
000C9C30                            loc_72C72:
000C9C30 101A                       		move.b	(a2)+,d0
000C9C32 1219                       		move.b	(a1)+,d1
000C9C34 4EBA FAAA                  		jsr	sub_72722(pc)
000C9C38 51CB FFF6                  		dbf	d3,loc_72C72
000C9C3C 7A03                       		moveq	#3,d5
000C9C3E 0244 0007                  		andi.w	#7,d4
000C9C42 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
000C9C46 162D 0009                  		move.b	9(a5),d3
000C9C4A                            
000C9C4A                            loc_72C8C:
000C9C4A 101A                       		move.b	(a2)+,d0
000C9C4C 1219                       		move.b	(a1)+,d1
000C9C4E E20C                       		lsr.b	#1,d4
000C9C50 6400                       		bcc.s	loc_72C96
000C9C52 D203                       		add.b	d3,d1
000C9C54                            
000C9C54                            loc_72C96:
000C9C54 4EBA FA8A                  		jsr	sub_72722(pc)
000C9C58 51CD FFF0                  		dbf	d5,loc_72C8C
000C9C5C 103C 00B4                  		move.b	#$B4,d0
000C9C60 122D 000A                  		move.b	$A(a5),d1
000C9C64 4EBA FA7A                  		jsr	sub_72722(pc)
000C9C68                            
000C9C68                            locret_72CAA:
000C9C68 4E75                       		rts	
000C9C6A                            ; End of function sub_72C4E
000C9C6A                            
000C9C6A                            ; ===========================================================================
000C9C6A 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000C9C72                            
000C9C72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C9C72                            
000C9C72                            
000C9C72                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
000C9C72 0815 0002                  		btst	#2,(a5)
000C9C76 6600                       		bne.s	locret_72D16
000C9C78 7000                       		moveq	#0,d0
000C9C7A 102D 000B                  		move.b	$B(a5),d0
000C9C7E 226E 0018                  		movea.l	$18(a6),a1
000C9C82 4A2E 000E                  		tst.b	$E(a6)
000C9C86 6700                       		beq.s	loc_72CD8
000C9C88 226E 0020                  		movea.l	$20(a6),a1
000C9C8C 4A2E 000E                  		tst.b	$E(a6)
000C9C90 6B00                       		bmi.s	loc_72CD8
000C9C92 226E 0020                  		movea.l	$20(a6),a1
000C9C96                            
000C9C96                            loc_72CD8:
000C9C96 5340                       		subq.w	#1,d0
000C9C98 6B00                       		bmi.s	loc_72CE6
000C9C9A 323C 0019                  		move.w	#$19,d1
000C9C9E                            
000C9C9E                            loc_72CE0:
000C9C9E D2C1                       		adda.w	d1,a1
000C9CA0 51C8 FFFC                  		dbf	d0,loc_72CE0
000C9CA4                            
000C9CA4                            loc_72CE6:
000C9CA4 D2FC 0015                  		adda.w	#$15,a1
000C9CA8 45FA 0000                  		lea	byte_72D2C(pc),a2
000C9CAC 102D 001F                  		move.b	$1F(a5),d0
000C9CB0 0240 0007                  		andi.w	#7,d0
000C9CB4 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
000C9CB8 162D 0009                  		move.b	9(a5),d3
000C9CBC 6B00                       		bmi.s	locret_72D16
000C9CBE 7A03                       		moveq	#3,d5
000C9CC0                            
000C9CC0                            loc_72D02:
000C9CC0 101A                       		move.b	(a2)+,d0
000C9CC2 1219                       		move.b	(a1)+,d1
000C9CC4 E20C                       		lsr.b	#1,d4
000C9CC6 6400                       		bcc.s	loc_72D12
000C9CC8 D203                       		add.b	d3,d1
000C9CCA 6500                       		bcs.s	loc_72D12
000C9CCC 4EBA FA12                  		jsr	sub_72722(pc)
000C9CD0                            
000C9CD0                            loc_72D12:
000C9CD0 51CD FFEE                  		dbf	d5,loc_72D02
000C9CD4                            
000C9CD4                            locret_72D16:
000C9CD4 4E75                       		rts	
000C9CD6                            ; End of function sub_72CB4
000C9CD6                            
000C9CD6                            ; ===========================================================================
000C9CD6 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
000C9CE0 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
000C9CEA 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
000C9CEE                            ; ===========================================================================
000C9CEE                            
000C9CEE                            loc_72D30:				; XREF: loc_72A64
000C9CEE 08D5 0003                  		bset	#3,(a5)
000C9CF2 2B4C 0014                  		move.l	a4,$14(a5)
000C9CF6 1B5C 0018                  		move.b	(a4)+,$18(a5)
000C9CFA 1B5C 0019                  		move.b	(a4)+,$19(a5)
000C9CFE 1B5C 001A                  		move.b	(a4)+,$1A(a5)
000C9D02 101C                       		move.b	(a4)+,d0
000C9D04 E208                       		lsr.b	#1,d0
000C9D06 1B40 001B                  		move.b	d0,$1B(a5)
000C9D0A 426D 001C                  		clr.w	$1C(a5)
000C9D0E 4E75                       		rts	
000C9D10                            ; ===========================================================================
000C9D10                            
000C9D10                            loc_72D52:				; XREF: loc_72A64
000C9D10 08D5 0003                  		bset	#3,(a5)
000C9D14 4E75                       		rts	
000C9D16                            ; ===========================================================================
000C9D16                            
000C9D16                            loc_72D58:				; XREF: loc_72A64
000C9D16 0895 0007                  		bclr	#7,(a5)
000C9D1A 0895 0004                  		bclr	#4,(a5)
000C9D1E 4A2D 0001                  		tst.b	1(a5)
000C9D22 6B00                       		bmi.s	loc_72D74
000C9D24 4A2E 0008                  		tst.b	8(a6)
000C9D28 6B00 0000                  		bmi.w	loc_72E02
000C9D2C 4EBA F98E                  		jsr	sub_726FE(pc)
000C9D30 6000                       		bra.s	loc_72D78
000C9D32                            ; ===========================================================================
000C9D32                            
000C9D32                            loc_72D74:
000C9D32 4EBA FC2A                  		jsr	sub_729A0(pc)
000C9D36                            
000C9D36                            loc_72D78:
000C9D36 4A2E 000E                  		tst.b	$E(a6)
000C9D3A 6A00 0000                  		bpl.w	loc_72E02
000C9D3E 4216                       		clr.b	0(a6)
000C9D40 7000                       		moveq	#0,d0
000C9D42 102D 0001                  		move.b	1(a5),d0
000C9D46 6B00                       		bmi.s	loc_72DCC
000C9D48 41FA F53E                  		lea	dword_722CC(pc),a0
000C9D4C 264D                       		movea.l	a5,a3
000C9D4E 0C00 0004                  		cmpi.b	#4,d0
000C9D52 6600                       		bne.s	loc_72DA8
000C9D54 4A2E 0340                  		tst.b	$340(a6)
000C9D58 6A00                       		bpl.s	loc_72DA8
000C9D5A 4BEE 0340                  		lea	$340(a6),a5
000C9D5E 226E 0020                  		movea.l	$20(a6),a1
000C9D62 6000                       		bra.s	loc_72DB8
000C9D64                            ; ===========================================================================
000C9D64                            
000C9D64                            loc_72DA8:
000C9D64 5500                       		subq.b	#2,d0
000C9D66 E508                       		lsl.b	#2,d0
000C9D68 2A70 0000                  		movea.l	(a0,d0.w),a5
000C9D6C 4A15                       		tst.b	(a5)
000C9D6E 6A00                       		bpl.s	loc_72DC8
000C9D70 226E 0018                  		movea.l	$18(a6),a1
000C9D74                            
000C9D74                            loc_72DB8:
000C9D74 0895 0002                  		bclr	#2,(a5)
000C9D78 08D5 0001                  		bset	#1,(a5)
000C9D7C 102D 000B                  		move.b	$B(a5),d0
000C9D80 4EBA FE8A                  		jsr	sub_72C4E(pc)
000C9D84                            
000C9D84                            loc_72DC8:
000C9D84 2A4B                       		movea.l	a3,a5
000C9D86 6000                       		bra.s	loc_72E02
000C9D88                            ; ===========================================================================
000C9D88                            
000C9D88                            loc_72DCC:
000C9D88 41EE 0370                  		lea	$370(a6),a0
000C9D8C 4A10                       		tst.b	(a0)
000C9D8E 6A00                       		bpl.s	loc_72DE0
000C9D90 0C00 00E0                  		cmpi.b	#$E0,d0
000C9D94 6700                       		beq.s	loc_72DEA
000C9D96 0C00 00C0                  		cmpi.b	#$C0,d0
000C9D9A 6700                       		beq.s	loc_72DEA
000C9D9C                            
000C9D9C                            loc_72DE0:
000C9D9C 41FA F4EA                  		lea	dword_722CC(pc),a0
000C9DA0 E608                       		lsr.b	#3,d0
000C9DA2 2070 0000                  		movea.l	(a0,d0.w),a0
000C9DA6                            
000C9DA6                            loc_72DEA:
000C9DA6 0890 0002                  		bclr	#2,(a0)
000C9DAA 08D0 0001                  		bset	#1,(a0)
000C9DAE 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000C9DB4 6600                       		bne.s	loc_72E02
000C9DB6 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000C9DBE                            
000C9DBE                            loc_72E02:
000C9DBE 504F                       		addq.w	#8,sp
000C9DC0 4E75                       		rts	
000C9DC2                            ; ===========================================================================
000C9DC2                            
000C9DC2                            loc_72E06:				; XREF: loc_72A64
000C9DC2 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000C9DC8 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000C9DCC 0815 0002                  		btst	#2,(a5)
000C9DD0 6600                       		bne.s	locret_72E1E
000C9DD2 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
000C9DDA                            
000C9DDA                            locret_72E1E:
000C9DDA 4E75                       		rts	
000C9DDC                            ; ===========================================================================
000C9DDC                            
000C9DDC                            loc_72E20:				; XREF: loc_72A64
000C9DDC 0895 0003                  		bclr	#3,(a5)
000C9DE0 4E75                       		rts	
000C9DE2                            ; ===========================================================================
000C9DE2                            
000C9DE2                            loc_72E26:				; XREF: loc_72A64
000C9DE2 1B5C 000B                  		move.b	(a4)+,$B(a5)
000C9DE6 4E75                       		rts	
000C9DE8                            ; ===========================================================================
000C9DE8                            
000C9DE8                            loc_72E2C:				; XREF: loc_72A64
000C9DE8 101C                       		move.b	(a4)+,d0
000C9DEA E148                       		lsl.w	#8,d0
000C9DEC 101C                       		move.b	(a4)+,d0
000C9DEE D8C0                       		adda.w	d0,a4
000C9DF0 534C                       		subq.w	#1,a4
000C9DF2 4E75                       		rts	
000C9DF4                            ; ===========================================================================
000C9DF4                            
000C9DF4                            loc_72E38:				; XREF: loc_72A64
000C9DF4 7000                       		moveq	#0,d0
000C9DF6 101C                       		move.b	(a4)+,d0
000C9DF8 121C                       		move.b	(a4)+,d1
000C9DFA 4A35 0024                  		tst.b	$24(a5,d0.w)
000C9DFE 6600                       		bne.s	loc_72E48
000C9E00 1B81 0024                  		move.b	d1,$24(a5,d0.w)
000C9E04                            
000C9E04                            loc_72E48:
000C9E04 5335 0024                  		subq.b	#1,$24(a5,d0.w)
000C9E08 66DE                       		bne.s	loc_72E2C
000C9E0A 544C                       		addq.w	#2,a4
000C9E0C 4E75                       		rts	
000C9E0E                            ; ===========================================================================
000C9E0E                            
000C9E0E                            loc_72E52:				; XREF: loc_72A64
000C9E0E 7000                       		moveq	#0,d0
000C9E10 102D 000D                  		move.b	$D(a5),d0
000C9E14 5900                       		subq.b	#4,d0
000C9E16 2B8C 0000                  		move.l	a4,(a5,d0.w)
000C9E1A 1B40 000D                  		move.b	d0,$D(a5)
000C9E1E 60C8                       		bra.s	loc_72E2C
000C9E20                            ; ===========================================================================
000C9E20                            
000C9E20                            loc_72E64:				; XREF: loc_72A64
000C9E20 103C 0088                  		move.b	#$88,d0
000C9E24 123C 000F                  		move.b	#$F,d1
000C9E28 4EBA F8C2                  		jsr	sub_7272E(pc)
000C9E2C 103C 008C                  		move.b	#$8C,d0
000C9E30 123C 000F                  		move.b	#$F,d1
000C9E34 6000 F8B6                  		bra.w	sub_7272E
000C9E38                            ; ===========================================================================
000C9E38                                            include "_s1smps2asm_inc.asm"
000C9E38 =0000000C                  psgdelta	EQU 12
000C9E38                            
000C9E38                            ; Standard Octave Pitch Equates
000C9E38 =00000088                  smpsPitch10lo		EQU	$88
000C9E38 =00000094                  smpsPitch09lo		EQU	$94
000C9E38 =000000A0                  smpsPitch08lo		EQU	$A0
000C9E38 =000000AC                  smpsPitch07lo		EQU	$AC
000C9E38 =000000B8                  smpsPitch06lo		EQU	$B8
000C9E38 =000000C4                  smpsPitch05lo		EQU	$C4
000C9E38 =000000D0                  smpsPitch04lo		EQU	$D0
000C9E38 =000000DC                  smpsPitch03lo		EQU	$DC
000C9E38 =000000E8                  smpsPitch02lo		EQU	$E8
000C9E38 =000000F4                  smpsPitch01lo		EQU	$F4
000C9E38 =00000000                  smpsPitch00			EQU	$00
000C9E38 =0000000C                  smpsPitch01hi		EQU	$0C
000C9E38 =00000018                  smpsPitch02hi		EQU	$18
000C9E38 =00000024                  smpsPitch03hi		EQU	$24
000C9E38 =00000030                  smpsPitch04hi		EQU	$30
000C9E38 =0000003C                  smpsPitch05hi		EQU	$3C
000C9E38 =00000048                  smpsPitch06hi		EQU	$48
000C9E38 =00000054                  smpsPitch07hi		EQU	$54
000C9E38 =00000060                  smpsPitch08hi		EQU	$60
000C9E38 =0000006C                  smpsPitch09hi		EQU	$6C
000C9E38 =00000078                  smpsPitch10hi		EQU	$78
000C9E38                            
000C9E38                            ; Note Equates
000C9E38 =00000080                  noff					EQU	$80
000C9E38 =00000080                  nRst					EQU	$80
000C9E38 =00000081                  nC0					EQU	$81
000C9E38 =00000082                  nCs0				EQU	$82
000C9E38 =00000083                  nD0					EQU	$83
000C9E38 =00000084                  nEb0				EQU	$84
000C9E38 =00000085                  nE0					EQU	$85
000C9E38 =00000086                  nF0					EQU	$86
000C9E38 =00000087                  nFs0				EQU	$87
000C9E38 =00000088                  nG0					EQU	$88
000C9E38 =00000089                  nAb0				EQU	$89
000C9E38 =0000008A                  nA0					EQU	$8A
000C9E38 =0000008B                  nBb0				EQU	$8B
000C9E38 =0000008C                  nB0					EQU	$8C
000C9E38 =0000008D                  nC1					EQU	$8D
000C9E38 =0000008E                  nCs1					EQU	$8E
000C9E38 =0000008F                  nD1					EQU	$8F
000C9E38 =00000090                  nEb1				EQU	$90
000C9E38 =00000091                  nE1					EQU	$91
000C9E38 =00000092                  nF1					EQU	$92
000C9E38 =00000093                  nFs1					EQU	$93
000C9E38 =00000094                  nG1					EQU	$94
000C9E38 =00000095                  nAb1				EQU	$95
000C9E38 =00000096                  nA1					EQU	$96
000C9E38 =00000097                  nBb1				EQU	$97
000C9E38 =00000098                  nB1					EQU	$98
000C9E38 =00000099                  nC2					EQU	$99
000C9E38 =0000009A                  nCs2				EQU	$9A
000C9E38 =0000009B                  nD2					EQU	$9B
000C9E38 =0000009C                  nEb2				EQU	$9C
000C9E38 =0000009D                  nE2					EQU	$9D
000C9E38 =0000009E                  nF2					EQU	$9E
000C9E38 =0000009F                  nFs2				EQU	$9F
000C9E38 =000000A0                  nG2					EQU	$A0
000C9E38 =000000A1                  nAb2				EQU	$A1
000C9E38 =000000A2                  nA2					EQU	$A2
000C9E38 =000000A3                  nBb2				EQU	$A3
000C9E38 =000000A4                  nB2					EQU	$A4
000C9E38 =000000A5                  nC3					EQU	$A5
000C9E38 =000000A6                  nCs3				EQU	$A6
000C9E38 =000000A7                  nD3					EQU	$A7
000C9E38 =000000A8                  nEb3				EQU	$A8
000C9E38 =000000A9                  nE3					EQU	$A9
000C9E38 =000000AA                  nF3					EQU	$AA
000C9E38 =000000AB                  nFs3				EQU	$AB
000C9E38 =000000AC                  nG3					EQU	$AC
000C9E38 =000000AD                  nAb3				EQU	$AD
000C9E38 =000000AE                  nA3					EQU	$AE
000C9E38 =000000AF                  nBb3				EQU	$AF
000C9E38 =000000B0                  nB3					EQU	$B0
000C9E38 =000000B1                  nC4					EQU	$B1
000C9E38 =000000B2                  nCs4				EQU	$B2
000C9E38 =000000B3                  nD4					EQU	$B3
000C9E38 =000000B4                  nEb4				EQU	$B4
000C9E38 =000000B5                  nE4					EQU	$B5
000C9E38 =000000B6                  nF4					EQU	$B6
000C9E38 =000000B7                  nFs4				EQU	$B7
000C9E38 =000000B8                  nG4					EQU	$B8
000C9E38 =000000B9                  nAb4				EQU	$B9
000C9E38 =000000BA                  nA4					EQU	$BA
000C9E38 =000000BB                  nBb4				EQU	$BB
000C9E38 =000000BC                  nB4					EQU	$BC
000C9E38 =000000BD                  nC5					EQU	$BD
000C9E38 =000000BE                  nCs5				EQU	$BE
000C9E38 =000000BF                  nD5					EQU	$BF
000C9E38 =000000C0                  nEb5				EQU	$C0
000C9E38 =000000C1                  nE5					EQU	$C1
000C9E38 =000000C2                  nF5					EQU	$C2
000C9E38 =000000C3                  nFs5				EQU	$C3
000C9E38 =000000C4                  nG5					EQU	$C4
000C9E38 =000000C5                  nAb5				EQU	$C5
000C9E38 =000000C6                  nA5					EQU	$C6
000C9E38 =000000C7                  nBb5				EQU	$C7
000C9E38 =000000C8                  nB5					EQU	$C8
000C9E38 =000000C9                  nC6					EQU	$C9
000C9E38 =000000CA                  nCs6				EQU	$CA
000C9E38 =000000CB                  nD6					EQU	$CB
000C9E38 =000000CC                  nEb6				EQU	$CC
000C9E38 =000000CD                  nE6					EQU	$CD
000C9E38 =000000CE                  nF6					EQU	$CE
000C9E38 =000000CF                  nFs6				EQU	$CF
000C9E38 =000000D0                  nG6					EQU	$D0
000C9E38 =000000D1                  nAb6				EQU	$D1
000C9E38 =000000D2                  nA6					EQU	$D2
000C9E38 =000000D3                  nBb6				EQU	$D3
000C9E38 =000000D4                  nB6					EQU	$D4
000C9E38 =000000D5                  nC7					EQU	$D5
000C9E38 =000000D6                  nCs7				EQU	$D6
000C9E38 =000000D7                  nD7					EQU	$D7
000C9E38 =000000D8                  nEb7				EQU	$D8
000C9E38 =000000D9                  nE7					EQU	$D9
000C9E38 =000000DA                  nF7					EQU	$DA
000C9E38 =000000DB                  nFs7				EQU	$DB
000C9E38 =000000DC                  nG7					EQU	$DC
000C9E38 =000000DD                  nAb7				EQU	$DD
000C9E38 =000000DE                  nA7					EQU	$DE
000C9E38 =000000DF                  nBb7				EQU	$DF
000C9E38                            
000C9E38 =000000C7                  nMaxPSG			EQU 	nBb6-psgdelta
000C9E38 =000000D3                  nMaxPSG1			EQU 	nBb6
000C9E38 =000000D4                  nMaxPSG2			EQU 	nB6
000C9E38                            ; ---------------------------------------------------------------------------------------------
000C9E38                            ; DAC Equates
000C9E38 =00000081                  dKick				EQU	$81
000C9E38 =00000081                  dKickS3				EQU	$81
000C9E38 =00000082                  dSnare				EQU	$82
000C9E38 =00000082                  dSnareS3			EQU	$82
000C9E38 =00000083                  dTimpani			EQU	$83
000C9E38 =00000088                  dHiTimpani			EQU	$88
000C9E38 =00000089                  dMidTimpani			EQU	$89
000C9E38 =0000008A                  dLowTimpani			EQU	$8A
000C9E38 =0000008B                  dVLowTimpani		EQU	$8B
000C9E38 =00000082                  dMuffledSnare		EQU	dSnare
000C9E38 =00000081                  dLowTomS3			EQU	dKick
000C9E38 =00000081                  dMidTomS3			EQU	dKick
000C9E38 =00000081                  dHighTom			EQU	dKick
000C9E38                            
000C9E38                            ; Header Macros
000C9E38                            ; Header - Set up Voice Location
000C9E38                            smpsHeaderVoice macro loc
000C9E38                            songStart set *
000C9E38                            	dc.w	loc-songStart
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Header - Set up Channel Usage	
000C9E38                            smpsHeaderChan macro fm,psg
000C9E38                            	dc.b	fm,psg
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Header - Set up Tempo
000C9E38                            smpsHeaderTempo macro div,mod
000C9E38                            	dc.b	div,mod
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Header - Set up DAC Channel
000C9E38                            smpsHeaderDAC macro loc
000C9E38                            	dc.w	loc-songStart
000C9E38                            	dc.w	$00
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Header - Set up FM Channel	
000C9E38                            smpsHeaderFM macro loc,pitch,vol
000C9E38                            	dc.w	loc-songStart
000C9E38                            	dc.b	pitch,vol
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Header - Set up PSG Channel
000C9E38                            smpsHeaderPSG macro loc,pitch,vol,voice
000C9E38                            	dc.w	loc-songStart
000C9E38                            	dc.b	pitch,vol
000C9E38                            	dc.w	voice
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Header Macros
000C9E38                            smpsHeaderStartSong macro ver
000C9E38                            SourceDriver set ver
000C9E38                            songStart set *
000C9E38                            	endm
000C9E38                            
000C9E38                            smpsHeaderStartSongConvert macro ver
000C9E38                            SourceDriver set ver
000C9E38                            songStart set *
000C9E38                            	endm
000C9E38                            
000C9E38                            smpsHeaderVoiceNull macro
000C9E38                            	if songStart<>*
000C9E38                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
000C9E38                            	endif
000C9E38                            	dc.w	$0000
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Co-ord Flag Macros and Equates
000C9E38                            ; E0xx - Panning, AMS, FMS
000C9E38                            smpsPan macro direction,amsfms
000C9E38                            panNone 	set $00
000C9E38                            panRight 	set $40
000C9E38                            panLeft 		set $80
000C9E38                            panCentre 	set $C0
000C9E38                            panCenter 	set $C0 ; silly Americans :U
000C9E38                            	dc.b $E0,direction+amsfms
000C9E38                            	endm
000C9E38                            	
000C9E38                            ; E1xx - Alter note values by xx
000C9E38                            smpsAlterNote macro val
000C9E38                            	dc.b	$E1,val
000C9E38                            	endm
000C9E38                            	
000C9E38                            ; E2xx - Unknown
000C9E38                            smpsE2 macro val
000C9E38                            	dc.b	$E2,val
000C9E38                            	endm
000C9E38                            
000C9E38                            smpsNop macro val
000C9E38                            	dc.b	$E2,val
000C9E38                            	endm
000C9E38                            
000C9E38                            ; E3 - Return (generally used after F8)
000C9E38                            smpsReturn macro val
000C9E38                            	dc.b	$E3
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Silences FM channel then stops as per smpsStop
000C9E38                            smpsStopFM macro
000C9E38                            	dc.b	$E3
000C9E38                            	endm
000C9E38                            	
000C9E38                            ; E4 - Fade in previous song (ie. 1-Up)
000C9E38                            smpsFade macro val
000C9E38                            	dc.b	$E4
000C9E38                            	endm
000C9E38                            
000C9E38                            ; E5xx - Set channel tempo divider to xx
000C9E38                            smpsChanTempoDiv macro val
000C9E38                            	dc.b	$E5,val
000C9E38                            	endm
000C9E38                            	
000C9E38                            ; E6xx - Alter Volume by xx
000C9E38                            smpsAlterVol macro val
000C9E38                            	dc.b	$E6,val
000C9E38                            	endm
000C9E38                            
000C9E38                            ; E6xx - Alter Volume by xx
000C9E38                            smpsFMAlterVol macro val
000C9E38                            	dc.b	$E6,val
000C9E38                            	endm
000C9E38                            	
000C9E38                            ; E7 - Prevent attack of next note
000C9E38 =000000E7                  smpsNoAttack	EQU $E7
000C9E38                            
000C9E38                            ; E8xx - Set note fill to xx
000C9E38                            smpsNoteFill macro val
000C9E38                            	dc.b	$E8,val
000C9E38                            	endm
000C9E38                            	
000C9E38                            ; E9xx - Add xx to channel pitch
000C9E38                            smpsAlterPitch macro val
000C9E38                            	dc.b	$E9,val
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Spindash Rev
000C9E38                            smpsSpindashRev macro
000C9E38                            	dc.b	$E9
000C9E38                            	endm
000C9E38                            	
000C9E38                            ; EAxx - Set music tempo modifier to xx
000C9E38                            smpsSetTempoMod macro val
000C9E38                            	dc.b	$EA,val
000C9E38                            	endm
000C9E38                            
000C9E38                            smpsPlayDACSample macro sample
000C9E38                            	dc.b	$EA,(sample&$7F)
000C9E38                            	endm
000C9E38                            	
000C9E38                            ; EBxx - Set music tempo divider to xx
000C9E38                            smpsSetTempoDiv macro val
000C9E38                            	dc.b	$EB,val
000C9E38                            	endm
000C9E38                            	
000C9E38                            ; ECxx - Set Volume to xx
000C9E38                            smpsSetVol macro val
000C9E38                            	dc.b	$EC,val
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Works on all drivers
000C9E38                            smpsPSGAlterVol macro vol
000C9E38                            	dc.b	$EC,vol
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Set note values to xx-$40
000C9E38                            smpsSetNote macro val
000C9E38                            	dc.b	$ED,val
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Set Modulation
000C9E38                            smpsModChange2 macro fmmod,psgmod
000C9E38                            	dc.b	$F1,fmmod,psgmod
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Set Modulation
000C9E38                            smpsModChange macro val
000C9E38                            	dc.b	$F4,val
000C9E38                            	endm
000C9E38                            	
000C9E38                            ; ED - Unknown
000C9E38 =000000ED                  smpsED		EQU $ED
000C9E38                            	
000C9E38                            ; EE - Unknown (Something to do with voice selection)
000C9E38 =000000EE                  smpsEE 		EQU $EE
000C9E38                            	
000C9E38                            ; EFxx - Set Voice of FM channel to xx
000C9E38                            smpsFMvoice macro voice
000C9E38                            	dc.b	$EF,voice
000C9E38                            	endm
000C9E38                            
000C9E38                            ; EFxx - Set Voice of FM channel to xx
000C9E38                            smpsSetvoice macro voice
000C9E38                            	dc.b	$EF,voice
000C9E38                            	endm
000C9E38                            
000C9E38                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
000C9E38                            smpsModSet macro wait,speed,change,step
000C9E38                            	dc.b	$F0,wait,speed,change,step
000C9E38                            	endm
000C9E38                            	
000C9E38                            ; F1 - Turn on Modulation
000C9E38                            smpsModOn macro
000C9E38                            	dc.b	$F1
000C9E38                            	endm
000C9E38                            
000C9E38                            ; F2 - End of channel
000C9E38                            smpsStop macro
000C9E38                            	dc.b	$F2
000C9E38                            	endm
000C9E38                            	
000C9E38                            ; F3xx - PSG waveform to xx
000C9E38                            smpsPSGform macro form
000C9E38                            	dc.b	$F3,form
000C9E38                            	endm
000C9E38                            	
000C9E38                            ; F4 - Turn off Modulation
000C9E38                            smpsModOff macro
000C9E38                            	dc.b	$F4
000C9E38                            	endm
000C9E38                            	
000C9E38                            ; F5xx - PSG voice to xx
000C9E38                            smpsPSGvoice macro voice
000C9E38                            	dc.b	$F5,voice
000C9E38                            	endm
000C9E38                            
000C9E38                            ; F6xxxx - Jump to xxxx
000C9E38                            smpsJump macro loc
000C9E38                            	dc.b	$F6
000C9E38                            	dc.w	loc-*-1
000C9E38                            	endm
000C9E38                            
000C9E38                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
000C9E38                            smpsLoop macro index,loops,loc
000C9E38                            	dc.b	$F7
000C9E38                            	dc.b	index,loops
000C9E38                            	dc.w	loc-*-1
000C9E38                            	endm
000C9E38                            
000C9E38                            ; F8xxxx - Call pattern at xxxx, saving return point
000C9E38                            smpsCall macro loc
000C9E38                            	dc.b	$F8
000C9E38                            	dc.w	loc-*-1
000C9E38                            	endm
000C9E38                            
000C9E38                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
000C9E38                            	dc.b	$FE,ind1,ind2,ind3,ind4
000C9E38                            	endm
000C9E38                            	
000C9E38                            ; F9 - Unknown
000C9E38 =000000F9                  smpsF9		EQU $F9
000C9E38                            ; ---------------------------------------------------------------------------------------------
000C9E38                            ; Macros for FM instruments
000C9E38                            ; Voices - Feedback
000C9E38                            smpsVcFeedback macro val
000C9E38                            vcFeedback set val
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Voices - Algorithm
000C9E38                            smpsVcAlgorithm macro val
000C9E38                            vcAlgorithm set val
000C9E38                            	endm
000C9E38                            
000C9E38                            smpsVcUnusedBits macro val
000C9E38                            vcUnusedBits set val
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Voices - Detune
000C9E38                            smpsVcDetune macro op1,op2,op3,op4
000C9E38                            vcDT1 set op1
000C9E38                            vcDT2 set op2
000C9E38                            vcDT3 set op3
000C9E38                            vcDT4 set op4
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Voices - Coarse-Frequency
000C9E38                            smpsVcCoarseFreq macro op1,op2,op3,op4
000C9E38                            vcCF1 set op1
000C9E38                            vcCF2 set op2
000C9E38                            vcCF3 set op3
000C9E38                            vcCF4 set op4
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Voices - Rate Scale
000C9E38                            smpsVcRateScale macro op1,op2,op3,op4
000C9E38                            vcRS1 set op1
000C9E38                            vcRS2 set op2
000C9E38                            vcRS3 set op3
000C9E38                            vcRS4 set op4
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Voices - Attack Rate
000C9E38                            smpsVcAttackRate macro op1,op2,op3,op4
000C9E38                            vcAR1 set op1
000C9E38                            vcAR2 set op2
000C9E38                            vcAR3 set op3
000C9E38                            vcAR4 set op4
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Voices - Amplitude Modulation
000C9E38                            smpsVcAmpMod macro op1,op2,op3,op4
000C9E38                            vcAM1 set op1
000C9E38                            vcAM2 set op2
000C9E38                            vcAM3 set op3
000C9E38                            vcAM4 set op4
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Voices - First Decay Rate
000C9E38                            smpsVcDecayRate1 macro op1,op2,op3,op4
000C9E38                            vcD1R1 set op1
000C9E38                            vcD1R2 set op2
000C9E38                            vcD1R3 set op3
000C9E38                            vcD1R4 set op4
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Voices - Second Decay Rate
000C9E38                            smpsVcDecayRate2 macro op1,op2,op3,op4
000C9E38                            vcD2R1 set op1
000C9E38                            vcD2R2 set op2
000C9E38                            vcD2R3 set op3
000C9E38                            vcD2R4 set op4
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Voices - Decay Level	
000C9E38                            smpsVcDecayLevel macro op1,op2,op3,op4
000C9E38                            vcDL1 set op1
000C9E38                            vcDL2 set op2
000C9E38                            vcDL3 set op3
000C9E38                            vcDL4 set op4
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Voices - Release Rate
000C9E38                            smpsVcReleaseRate macro op1,op2,op3,op4
000C9E38                            vcRR1 set op1
000C9E38                            vcRR2 set op2
000C9E38                            vcRR3 set op3
000C9E38                            vcRR4 set op4
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Voices - Total Level
000C9E38                            smpsVcTotalLevel macro op1,op2,op3,op4
000C9E38                            vcTL1 set op1
000C9E38                            vcTL2 set op2
000C9E38                            vcTL3 set op3
000C9E38                            vcTL4 set op4
000C9E38                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
000C9E38                            ;   0     1     2     3     4     5     6     7
000C9E38                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
000C9E38                            vcTLMask4 set ((vcAlgorithm==7)<<7)
000C9E38                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
000C9E38                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
000C9E38                            vcTLMask1 set $80
000C9E38                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
000C9E38                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
000C9E38                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
000C9E38                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
000C9E38                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
000C9E38                            	dc.b	vcTL4,vcTL3,vcTL2,vcTL1
000C9E38                            	endm
000C9E38                            
000C9E38                            ; Header - Set up a secondary PWM Channel
000C9E38                            smpsHeaderPWM macro loc
000C9E38                            	dc.w	loc-songStart
000C9E38                            	endm
000C9E38                            	
000C9E38                            ; Header - Set up first PWM Channel
000C9E38                            smpsHeaderPWM1 macro loc,num
000C9E38                            	dc.w	loc-songStart
000C9E38                            	dc.b	num,0
000C9E38                            	endm
000C9E38                            	endm
000C9E38                            Kos_Z80:	include	'MegaPCM.asm'
000C9E38                            
000C9E38                            ; ===============================================================
000C9E38                            ; Mega PCM Driver Include File
000C9E38                            ; (c) 2012, Vladikcomper
000C9E38                            ; ===============================================================
000C9E38                            
000C9E38                            ; ---------------------------------------------------------------
000C9E38                            ; Variables used in DAC table
000C9E38                            ; ---------------------------------------------------------------
000C9E38                            
000C9E38                            ; flags
000C9E38 =000000C0                  panLR	= $C0
000C9E38 =00000080                  panL	= $80
000C9E38 =00000040                  panR	= $40
000C9E38 =00000000                  pcm	= 0
000C9E38 =00000004                  dpcm	= 4
000C9E38 =00000002                  loop	= 2
000C9E38 =00000001                  pri	= 1
000C9E38                            
000C9E38                            ; ---------------------------------------------------------------
000C9E38                            ; Macros
000C9E38                            ; ---------------------------------------------------------------
000C9E38                            
000C9E38                            z80word macro Value
000C9E38                            	dc.w	((\Value)&$FF)<<8|((\Value)&$FF00)>>8
000C9E38                            	endm
000C9E38                            
000C9E38                            DAC_Entry macro Pitch,Offset,Flags
000C9E38                            	dc.b	\Flags			; 00h	- Flags
000C9E38                            	dc.b	\Pitch			; 01h	- Pitch
000C9E38                            	dc.b	(\Offset>>15)&$FF	; 02h	- Start Bank
000C9E38                            	dc.b	(\Offset\_End>>15)&$FF	; 03h	- End Bank
000C9E38                            	z80word	(\Offset)|$8000		; 04h	- Start Offset (in Start bank)
000C9E38                            	z80word	(\Offset\_End-1)|$8000	; 06h	- End Offset (in End bank)
000C9E38                            	endm
000C9E38                            	
000C9E38                            IncludeDAC macro Name,Extension
000C9E38                            \Name:
000C9E38                            	if strcmp('\extension','wav')
000C9E38                            		incbin	'dac/\Name\.\Extension\',$3A
000C9E38                            	else
000C9E38                            		incbin	'dac/\Name\.\Extension\'
000C9E38                            	endc
000C9E38                            \Name\_End:
000C9E38                            	endm
000C9E38                            
000C9E38                            ; ---------------------------------------------------------------
000C9E38                            ; Driver's code
000C9E38                            ; ---------------------------------------------------------------
000C9E38                            
000C9E38                            MegaPCM:
000C9E38                            	incbin	'MegaPCM.z80'
000CA048                            
000CA048 0405 0000 0000 0000        	DAC_Entry   $05, DAC_81, dpcm	; 81 - Kick
000CA050 0402 0000 0000 0000        	DAC_Entry   $02, DAC_82, dpcm	; 82 - Snare
000CA058 041B 0000 0000 0000        	DAC_Entry	$1B, Timpani, dpcm		; $83	- Timpani
000CA060 0107 0000 0000 0000        	DAC_Entry	$07, V_Hurt, pcm+pri		; $84	- 'Hurt' voice
000CA068 0001 0000 0000 0000        	DAC_Entry	$01, Clap_1, pcm		; $85	- Clap S3
000CA070 0001 0000 0000 0000        	DAC_Entry   $01, KicknSnare,     pcm ; 86 - Kick + Snare
000CA078 0412 0000 0000 0000        	DAC_Entry	$12, Timpani, dpcm		; $87	- Hi-Timpani
000CA080 0415 0000 0000 0000        	DAC_Entry	$15, Timpani, dpcm		; $88	- Mid-Timpani
000CA088 041B 0000 0000 0000        	DAC_Entry	$1B, Timpani, dpcm		; $88	- Mid-Low-Timpani
000CA090 041D 0000 0000 0000        	DAC_Entry	$1D, Timpani, dpcm		; $8A	- Low-Timpani
000CA098 0003 0000 0000 0000        	DAC_Entry	$03, op_hi_conga, pcm		; $8B	- Open Hi Conga
000CA0A0 0003 0000 0000 0000        	DAC_Entry	$03, lo_conga, pcm		; $8C	- Low Conga
000CA0A8 0003 0000 0000 0000        	DAC_Entry	$03, lo_bongo, pcm		; $8D	- Low Bongo
000CA0B0 0001 0000 0000 0000        	DAC_Entry	$01, Scratch_Push, pcm				; $8E	- 
000CA0B8 0001 0000 0000 0000        	DAC_Entry	$01, Crash, pcm			; $8F 	- Kick Crash Simbal S3
000CA0C0 0004 0000 0000 0000        	DAC_Entry	$04, Hard_Kick, pcm			; $90 	- Hard Kick (Sonic Crackers)
000CA0C8 000D 0000 0000 0000        	DAC_Entry	$0D, Hard_Snare, pcm		; $91 	- Hard Snare (Sonic Crackers)
000CA0D0 0001 0000 0000 0000        	DAC_Entry	$01, Scratch_Pull, pcm		; $92	- 
000CA0D8 0001 0000 0000 0000        	DAC_Entry	$01, Soft_Kick, pcm		; $93	- Soft Kick
000CA0E0 0001 0000 0000 0000        	DAC_Entry	$01, Soft_Snare, pcm		; $94	- Soft Snare	
000CA0E8 0001 0000 0000 0000        	DAC_Entry	$01, Soft_KicknSnare, pcm	; $95	- Soft Kick & Snare
000CA0F0 0002 0000 0000 0000        	DAC_Entry	$02, Tom2, pcm			; $96	- High Tom S3
000CA0F8 000A 0000 0000 0000        	DAC_Entry	$0A, Tom2, pcm			; $97	- Mid Tom S3
000CA100 000F 0000 0000 0000        	DAC_Entry	$0F, Tom2, pcm			; $98	- Low Tom S3
000CA108 0010 0000 0000 0000        	DAC_Entry	$10, Tom2, pcm			; $99	- Floor Tom S3
000CA110 0016 0000 0000 0000        	DAC_Entry	$16, Tom2, pcm			; $9A	- Low Floor Tom S3
000CA118 0001 0000 0000 0000        	DAC_Entry	$01, CRASH909, pcm	; $9B	- Crash
000CA120                            	
000CA120                            
000CA120                            MegaPCM_End:
000CA120                            
000CA120                            ; ---------------------------------------------------------------
000CA120                            ; DAC Samples Files
000CA120                            ; ---------------------------------------------------------------
000CA120                            
000EAED0 00                         	even
000EAED0 00                         	even
000EAED0                            Music81:	incbin	sound\music81.bin
000EC474 00                         		even
000EC474                            Music82:	incbin	sound\music82.bin
000ED830                            		even
000ED830                            Music83:	incbin	sound\music83.bin
000EDF84                            		even
000EDF84                            Music84:	include	sound\music84.asm
000EDF84                            ; -------------------------------------------------------
000EDF84                            ; File created using XM4SMPS v4.1-beta (Qt 3.2.1 Win32)
000EDF84                            ; Created on Âñ ôåâ 16 2014, 12:21:17
000EDF84                            ; -------------------------------------------------------
000EDF84                            
000EDF84                            SCDTTGF_Header:
000EDF84 0000                       	smpsHeaderVoice	SCDTTGF_Voices
000EDF86 0603                       	smpsHeaderChan	6,3
000EDF88 0103                       	smpsHeaderTempo	$1, $3
000EDF8A 0000 0000                  	smpsHeaderDAC	SCDTTGF_DAC
000EDF8E 0000 000C                  	smpsHeaderFM	SCDTTGF_FM1,	$0, $c
000EDF92 0000 0012                  	smpsHeaderFM	SCDTTGF_FM2,	$0, $12
000EDF96 0000 0016                  	smpsHeaderFM	SCDTTGF_FM3,	$0, $16
000EDF9A 0000 E81B                  	smpsHeaderFM	SCDTTGF_FM4,	$e8, $1b
000EDF9E 0000 E81C                  	smpsHeaderFM	SCDTTGF_FM5,	$e8, $1c
000EDFA2 0000 DC05 0000             	smpsHeaderPSG	SCDTTGF_PSG1,	$dc, $5, $0
000EDFA8 0000 DC07 0000             	smpsHeaderPSG	SCDTTGF_PSG2,	$dc, $7, $0
000EDFAE 0000 DC02 0000             	smpsHeaderPSG	SCDTTGF_PSG3,	$dc, $2, $0
000EDFB4                            
000EDFB4                            SCDTTGF_FM1:
000EDFB4 F800 00                    	smpsCall	SCDTTGF_FM1_p0
000EDFB7 F800 00                    	smpsCall	SCDTTGF_FM1_p1
000EDFBA F800 00                    	smpsCall	SCDTTGF_FM1_p2
000EDFBD F800 00                    	smpsCall	SCDTTGF_FM1_p3
000EDFC0 F800 00                    	smpsCall	SCDTTGF_FM1_p4
000EDFC3 F800 00                    	smpsCall	SCDTTGF_FM1_p1
000EDFC6 F800 00                    	smpsCall	SCDTTGF_FM1_p2
000EDFC9 F800 00                    	smpsCall	SCDTTGF_FM1_p3
000EDFCC F800 00                    	smpsCall	SCDTTGF_FM1_p8
000EDFCF F800 00                    	smpsCall	SCDTTGF_FM1_p9
000EDFD2 F800 00                    	smpsCall	SCDTTGF_FM1_p8
000EDFD5 F800 00                    	smpsCall	SCDTTGF_FM1_p9
000EDFD8 F800 00                    	smpsCall	SCDTTGF_FM1_p8
000EDFDB F800 00                    	smpsCall	SCDTTGF_FM1_p9
000EDFDE F800 00                    	smpsCall	SCDTTGF_FM1_p8
000EDFE1 F800 00                    	smpsCall	SCDTTGF_FM1_p9
000EDFE4 F800 00                    	smpsCall	SCDTTGF_FM1_p10
000EDFE7 F800 00                    	smpsCall	SCDTTGF_FM1_p11
000EDFEA F800 00                    	smpsCall	SCDTTGF_FM1_p4
000EDFED F800 00                    	smpsCall	SCDTTGF_FM1_p13
000EDFF0 F800 00                    	smpsCall	SCDTTGF_FM1_p14
000EDFF3 F800 00                    	smpsCall	SCDTTGF_FM1_p15
000EDFF6 F800 00                    	smpsCall	SCDTTGF_FM1_p2
000EDFF9 F800 00                    	smpsCall	SCDTTGF_FM1_p17
000EDFFC F800 00                    	smpsCall	SCDTTGF_FM1_p4
000EDFFF F800 00                    	smpsCall	SCDTTGF_FM1_p1
000EE002 F800 00                    	smpsCall	SCDTTGF_FM1_p2
000EE005 F800 00                    	smpsCall	SCDTTGF_FM1_p3
000EE008 F800 00                    	smpsCall	SCDTTGF_FM1_p4
000EE00B F800 00                    	smpsCall	SCDTTGF_FM1_p1
000EE00E F800 00                    	smpsCall	SCDTTGF_FM1_p2
000EE011 F800 00                    	smpsCall	SCDTTGF_FM1_p3
000EE014 F6FF 9E                    	smpsJump	SCDTTGF_FM1
000EE017                            
000EE017                            SCDTTGF_FM2:
000EE017 F800 00                    	smpsCall	SCDTTGF_FM2_p0
000EE01A F800 00                    	smpsCall	SCDTTGF_FM2_p1
000EE01D F800 00                    	smpsCall	SCDTTGF_FM2_p2
000EE020 F800 00                    	smpsCall	SCDTTGF_FM2_p3
000EE023 F800 00                    	smpsCall	SCDTTGF_FM2_p0
000EE026 F800 00                    	smpsCall	SCDTTGF_FM2_p1
000EE029 F800 00                    	smpsCall	SCDTTGF_FM2_p6
000EE02C F800 00                    	smpsCall	SCDTTGF_FM2_p3
000EE02F E6FD                       	smpsaltervol	-3
000EE031 F800 00                    	smpsCall	SCDTTGF_FM2_p8
000EE034 F800 00                    	smpsCall	SCDTTGF_FM2_p9
000EE037 F800 00                    	smpsCall	SCDTTGF_FM2_pa
000EE03A F800 00                    	smpsCall	SCDTTGF_FM2_p3
000EE03D F800 00                    	smpsCall	SCDTTGF_FM2_pc
000EE040 F800 00                    	smpsCall	SCDTTGF_FM2_pd
000EE043 F800 00                    	smpsCall	SCDTTGF_FM2_pe
000EE046 F800 00                    	smpsCall	SCDTTGF_FM2_pf
000EE049 F800 00                    	smpsCall	SCDTTGF_FM2_p6
000EE04C F800 00                    	smpsCall	SCDTTGF_FM2_p11
000EE04F F800 00                    	smpsCall	SCDTTGF_FM2_p12
000EE052 F800 00                    	smpsCall	SCDTTGF_FM2_p13
000EE055 F800 00                    	smpsCall	SCDTTGF_FM2_p14
000EE058 F800 00                    	smpsCall	SCDTTGF_FM2_p15
000EE05B F800 00                    	smpsCall	SCDTTGF_FM2_p16
000EE05E F800 00                    	smpsCall	SCDTTGF_FM2_p3
000EE061 E6FA                       	smpsaltervol	-6
000EE063 F800 00                    	smpsCall	SCDTTGF_FM2_p18
000EE066 F800 00                    	smpsCall	SCDTTGF_FM2_p19
000EE069 F800 00                    	smpsCall	SCDTTGF_FM2_p1a
000EE06C F800 00                    	smpsCall	SCDTTGF_FM2_p1a
000EE06F F800 00                    	smpsCall	SCDTTGF_FM2_p19
000EE072 F800 00                    	smpsCall	SCDTTGF_FM2_p19
000EE075 F800 00                    	smpsCall	SCDTTGF_FM2_p1a
000EE078 F800 00                    	smpsCall	SCDTTGF_FM2_p1a
000EE07B E606                       	smpsaltervol	6
000EE07D F6FF 98                    	smpsJump	SCDTTGF_FM2
000EE080                            
000EE080                            SCDTTGF_FM3:
000EE080 E040                       	smpsPan		panRight,0
000EE082 F010 0108 04               	smpsmodset	16,1,8,4
000EE087 E104                       	smpsalternote	4
000EE089 F800 00                    	smpsCall	SCDTTGF_FM3_p0
000EE08C F800 00                    	smpsCall	SCDTTGF_FM3_p1
000EE08F F800 00                    	smpsCall	SCDTTGF_FM3_p2
000EE092 F800 00                    	smpsCall	SCDTTGF_FM3_p3
000EE095 F800 00                    	smpsCall	SCDTTGF_FM3_p4
000EE098 F800 00                    	smpsCall	SCDTTGF_FM3_p1
000EE09B F800 00                    	smpsCall	SCDTTGF_FM3_p6
000EE09E F800 00                    	smpsCall	SCDTTGF_FM3_p3
000EE0A1 F800 00                    	smpsCall	SCDTTGF_FM3_p8
000EE0A4 F800 00                    	smpsCall	SCDTTGF_FM3_p3
000EE0A7 F800 00                    	smpsCall	SCDTTGF_FM3_p3
000EE0AA F800 00                    	smpsCall	SCDTTGF_FM3_p3
000EE0AD E6FD                       	smpsaltervol	-3
000EE0AF E6FC                       	smpsaltervol	-4
000EE0B1 E100                       	smpsalternote	0
000EE0B3 F800 00                    	smpsCall	SCDTTGF_FM3_pc
000EE0B6 F800 00                    	smpsCall	SCDTTGF_FM3_pd
000EE0B9 F800 00                    	smpsCall	SCDTTGF_FM3_pe
000EE0BC F800 00                    	smpsCall	SCDTTGF_FM3_pf
000EE0BF F800 00                    	smpsCall	SCDTTGF_FM3_p6
000EE0C2 F800 00                    	smpsCall	SCDTTGF_FM3_p11
000EE0C5 F800 00                    	smpsCall	SCDTTGF_FM3_p12
000EE0C8 F800 00                    	smpsCall	SCDTTGF_FM3_p13
000EE0CB F800 00                    	smpsCall	SCDTTGF_FM3_p14
000EE0CE F800 00                    	smpsCall	SCDTTGF_FM3_p15
000EE0D1 F800 00                    	smpsCall	SCDTTGF_FM3_p16
000EE0D4 F800 00                    	smpsCall	SCDTTGF_FM3_p3
000EE0D7 E6FA                       	smpsaltervol	-6
000EE0D9 E100                       	smpsalternote	0
000EE0DB E0C0                       	smpspan	pancentre,0
000EE0DD F800 00                    	smpsCall	SCDTTGF_FM3_p18
000EE0E0 F800 00                    	smpsCall	SCDTTGF_FM3_p18
000EE0E3 F800 00                    	smpsCall	SCDTTGF_FM3_p1a
000EE0E6 F800 00                    	smpsCall	SCDTTGF_FM3_p1a
000EE0E9 F800 00                    	smpsCall	SCDTTGF_FM3_p18
000EE0EC F800 00                    	smpsCall	SCDTTGF_FM3_p18
000EE0EF F800 00                    	smpsCall	SCDTTGF_FM3_p1a
000EE0F2 F800 00                    	smpsCall	SCDTTGF_FM3_p1a
000EE0F5 E606                       	smpsaltervol	6
000EE0F7 E040                       	smpsPan		panRight,0
000EE0F9 E104                       	smpsalternote	4
000EE0FB F6FF 83                    	smpsJump	SCDTTGF_FM3
000EE0FE                            
000EE0FE                            SCDTTGF_FM4:
000EE0FE E080                       	smpsPan		panLeft,0
000EE100 F800 00                    	smpsCall	SCDTTGF_FM4_p0
000EE103 F800 00                    	smpsCall	SCDTTGF_FM4_p1
000EE106 F800 00                    	smpsCall	SCDTTGF_FM4_p2
000EE109 F800 00                    	smpsCall	SCDTTGF_FM4_p1
000EE10C F800 00                    	smpsCall	SCDTTGF_FM4_p0
000EE10F F800 00                    	smpsCall	SCDTTGF_FM4_p1
000EE112 F800 00                    	smpsCall	SCDTTGF_FM4_p2
000EE115 F800 00                    	smpsCall	SCDTTGF_FM4_p1
000EE118 E918                       	smpsalterpitch	24
000EE11A E6EE                       	smpsaltervol	-18
000EE11C F800 00                    	smpsCall	SCDTTGF_FM4_p8
000EE11F F800 00                    	smpsCall	SCDTTGF_FM4_p9
000EE122 F800 00                    	smpsCall	SCDTTGF_FM4_p8
000EE125 F800 00                    	smpsCall	SCDTTGF_FM4_p9
000EE128 F800 00                    	smpsCall	SCDTTGF_FM4_p8
000EE12B F800 00                    	smpsCall	SCDTTGF_FM4_p9
000EE12E F800 00                    	smpsCall	SCDTTGF_FM4_p8
000EE131 F800 00                    	smpsCall	SCDTTGF_FM4_pf
000EE134 F800 00                    	smpsCall	SCDTTGF_FM4_p10
000EE137 F800 00                    	smpsCall	SCDTTGF_FM4_p9
000EE13A F800 00                    	smpsCall	SCDTTGF_FM4_p8
000EE13D F800 00                    	smpsCall	SCDTTGF_FM4_p9
000EE140 F800 00                    	smpsCall	SCDTTGF_FM4_p14
000EE143 F800 00                    	smpsCall	SCDTTGF_FM4_p9
000EE146 F800 00                    	smpsCall	SCDTTGF_FM4_p16
000EE149 F800 00                    	smpsCall	SCDTTGF_FM4_p9
000EE14C E9E8                       	smpsalterpitch	-24
000EE14E E612                       	smpsaltervol	18
000EE150 F800 00                    	smpsCall	SCDTTGF_FM4_p0
000EE153 F800 00                    	smpsCall	SCDTTGF_FM4_p1
000EE156 F800 00                    	smpsCall	SCDTTGF_FM4_p2
000EE159 F800 00                    	smpsCall	SCDTTGF_FM4_p1
000EE15C F800 00                    	smpsCall	SCDTTGF_FM4_p0
000EE15F F800 00                    	smpsCall	SCDTTGF_FM4_p1
000EE162 F800 00                    	smpsCall	SCDTTGF_FM4_p2
000EE165 F800 00                    	smpsCall	SCDTTGF_FM4_p1
000EE168 F6FF 94                    	smpsJump	SCDTTGF_FM4
000EE16B                            
000EE16B                            SCDTTGF_FM5:
000EE16B E040                       	smpsPan		panRight,0
000EE16D F800 00                    	smpsCall	SCDTTGF_FM5_p0
000EE170 F800 00                    	smpsCall	SCDTTGF_FM5_p1
000EE173 F800 00                    	smpsCall	SCDTTGF_FM5_p2
000EE176 F800 00                    	smpsCall	SCDTTGF_FM5_p1
000EE179 F800 00                    	smpsCall	SCDTTGF_FM5_p0
000EE17C F800 00                    	smpsCall	SCDTTGF_FM5_p1
000EE17F F800 00                    	smpsCall	SCDTTGF_FM5_p2
000EE182 F800 00                    	smpsCall	SCDTTGF_FM5_p1
000EE185 E918                       	smpsalterpitch	24
000EE187 E6EE                       	smpsaltervol	-18
000EE189 F800 00                    	smpsCall	SCDTTGF_FM5_p8
000EE18C F800 00                    	smpsCall	SCDTTGF_FM5_p9
000EE18F F800 00                    	smpsCall	SCDTTGF_FM5_p8
000EE192 F800 00                    	smpsCall	SCDTTGF_FM5_p9
000EE195 F800 00                    	smpsCall	SCDTTGF_FM5_p8
000EE198 F800 00                    	smpsCall	SCDTTGF_FM5_p9
000EE19B F800 00                    	smpsCall	SCDTTGF_FM5_p8
000EE19E F800 00                    	smpsCall	SCDTTGF_FM5_pf
000EE1A1 F800 00                    	smpsCall	SCDTTGF_FM5_p10
000EE1A4 F800 00                    	smpsCall	SCDTTGF_FM5_p9
000EE1A7 F800 00                    	smpsCall	SCDTTGF_FM5_p12
000EE1AA F800 00                    	smpsCall	SCDTTGF_FM5_p9
000EE1AD F800 00                    	smpsCall	SCDTTGF_FM5_p14
000EE1B0 F800 00                    	smpsCall	SCDTTGF_FM5_p9
000EE1B3 F800 00                    	smpsCall	SCDTTGF_FM5_p16
000EE1B6 F800 00                    	smpsCall	SCDTTGF_FM5_p9
000EE1B9 E9E8                       	smpsalterpitch	-24
000EE1BB E612                       	smpsaltervol	18
000EE1BD F800 00                    	smpsCall	SCDTTGF_FM5_p0
000EE1C0 F800 00                    	smpsCall	SCDTTGF_FM5_p1
000EE1C3 F800 00                    	smpsCall	SCDTTGF_FM5_p2
000EE1C6 F800 00                    	smpsCall	SCDTTGF_FM5_p1
000EE1C9 F800 00                    	smpsCall	SCDTTGF_FM5_p0
000EE1CC F800 00                    	smpsCall	SCDTTGF_FM5_p1
000EE1CF F800 00                    	smpsCall	SCDTTGF_FM5_p2
000EE1D2 F800 00                    	smpsCall	SCDTTGF_FM5_p1
000EE1D5 F6FF 94                    	smpsJump	SCDTTGF_FM5
000EE1D8                            
000EE1D8                            SCDTTGF_PSG1:
000EE1D8 F800 00                    	smpsCall	SCDTTGF_PSG1_p0
000EE1DB F800 00                    	smpsCall	SCDTTGF_PSG1_p1
000EE1DE F800 00                    	smpsCall	SCDTTGF_PSG1_p2
000EE1E1 F800 00                    	smpsCall	SCDTTGF_PSG1_p2
000EE1E4 F800 00                    	smpsCall	SCDTTGF_PSG1_p1
000EE1E7 F800 00                    	smpsCall	SCDTTGF_PSG1_p1
000EE1EA F800 00                    	smpsCall	SCDTTGF_PSG1_p2
000EE1ED F800 00                    	smpsCall	SCDTTGF_PSG1_p2
000EE1F0 F800 00                    	smpsCall	SCDTTGF_PSG1_p8
000EE1F3 F800 00                    	smpsCall	SCDTTGF_PSG1_p8
000EE1F6 F800 00                    	smpsCall	SCDTTGF_PSG1_pa
000EE1F9 F800 00                    	smpsCall	SCDTTGF_PSG1_pa
000EE1FC F800 00                    	smpsCall	SCDTTGF_PSG1_p8
000EE1FF F800 00                    	smpsCall	SCDTTGF_PSG1_p8
000EE202 F800 00                    	smpsCall	SCDTTGF_PSG1_pa
000EE205 F800 00                    	smpsCall	SCDTTGF_PSG1_pa
000EE208 F800 00                    	smpsCall	SCDTTGF_PSG1_p10
000EE20B F800 00                    	smpsCall	SCDTTGF_PSG1_p10
000EE20E F800 00                    	smpsCall	SCDTTGF_PSG1_p12
000EE211 F800 00                    	smpsCall	SCDTTGF_PSG1_p13
000EE214 F800 00                    	smpsCall	SCDTTGF_PSG1_p14
000EE217 F800 00                    	smpsCall	SCDTTGF_PSG1_p14
000EE21A F800 00                    	smpsCall	SCDTTGF_PSG1_p16
000EE21D F800 00                    	smpsCall	SCDTTGF_PSG1_p17
000EE220 F800 00                    	smpsCall	SCDTTGF_PSG1_p1
000EE223 F800 00                    	smpsCall	SCDTTGF_PSG1_p1
000EE226 F800 00                    	smpsCall	SCDTTGF_PSG1_p2
000EE229 F800 00                    	smpsCall	SCDTTGF_PSG1_p2
000EE22C F800 00                    	smpsCall	SCDTTGF_PSG1_p1
000EE22F F800 00                    	smpsCall	SCDTTGF_PSG1_p1
000EE232 F800 00                    	smpsCall	SCDTTGF_PSG1_p2
000EE235 F800 00                    	smpsCall	SCDTTGF_PSG1_p2
000EE238 F6FF 9E                    	smpsJump	SCDTTGF_PSG1
000EE23B                            
000EE23B                            SCDTTGF_PSG2:
000EE23B F800 00                    	smpsCall	SCDTTGF_PSG2_p0
000EE23E F800 00                    	smpsCall	SCDTTGF_PSG2_p1
000EE241 F800 00                    	smpsCall	SCDTTGF_PSG2_p2
000EE244 F800 00                    	smpsCall	SCDTTGF_PSG2_p3
000EE247 F800 00                    	smpsCall	SCDTTGF_PSG2_p4
000EE24A F800 00                    	smpsCall	SCDTTGF_PSG2_p1
000EE24D F800 00                    	smpsCall	SCDTTGF_PSG2_p2
000EE250 F800 00                    	smpsCall	SCDTTGF_PSG2_p3
000EE253 F800 00                    	smpsCall	SCDTTGF_PSG2_p8
000EE256 F800 00                    	smpsCall	SCDTTGF_PSG2_p9
000EE259 F800 00                    	smpsCall	SCDTTGF_PSG2_pa
000EE25C F800 00                    	smpsCall	SCDTTGF_PSG2_pb
000EE25F F800 00                    	smpsCall	SCDTTGF_PSG2_pc
000EE262 F800 00                    	smpsCall	SCDTTGF_PSG2_p9
000EE265 F800 00                    	smpsCall	SCDTTGF_PSG2_pa
000EE268 F800 00                    	smpsCall	SCDTTGF_PSG2_pb
000EE26B F800 00                    	smpsCall	SCDTTGF_PSG2_p10
000EE26E F800 00                    	smpsCall	SCDTTGF_PSG2_p11
000EE271 F800 00                    	smpsCall	SCDTTGF_PSG2_p12
000EE274 F800 00                    	smpsCall	SCDTTGF_PSG2_p13
000EE277 F800 00                    	smpsCall	SCDTTGF_PSG2_p14
000EE27A F800 00                    	smpsCall	SCDTTGF_PSG2_p15
000EE27D F800 00                    	smpsCall	SCDTTGF_PSG2_p16
000EE280 F800 00                    	smpsCall	SCDTTGF_PSG2_p17
000EE283 F800 00                    	smpsCall	SCDTTGF_PSG2_p18
000EE286 F800 00                    	smpsCall	SCDTTGF_PSG2_p1
000EE289 F800 00                    	smpsCall	SCDTTGF_PSG2_p2
000EE28C F800 00                    	smpsCall	SCDTTGF_PSG2_p3
000EE28F F800 00                    	smpsCall	SCDTTGF_PSG2_p4
000EE292 F800 00                    	smpsCall	SCDTTGF_PSG2_p1
000EE295 F800 00                    	smpsCall	SCDTTGF_PSG2_p2
000EE298 F800 00                    	smpsCall	SCDTTGF_PSG2_p3
000EE29B F6FF 9E                    	smpsJump	SCDTTGF_PSG2
000EE29E                            
000EE29E                            SCDTTGF_PSG3:
000EE29E F3E7                       	smpsPSGform	$E7
000EE2A0 F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2A3 F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2A6 F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2A9 F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2AC F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2AF F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2B2 F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2B5 F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2B8 F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2BB F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2BE F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2C1 F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2C4 F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2C7 F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2CA F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2CD F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2D0 F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2D3 F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2D6 F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2D9 F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2DC F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2DF F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2E2 F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2E5 F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2E8 F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2EB F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2EE F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2F1 F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2F4 F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2F7 F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2FA F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE2FD F800 00                    	smpsCall	SCDTTGF_PSG3_p0
000EE300 F6FF 9C                    	smpsJump	SCDTTGF_PSG3
000EE303                            
000EE303                            SCDTTGF_DAC:
000EE303 F800 00                    	smpsCall	SCDTTGF_DAC_p0
000EE306 F800 00                    	smpsCall	SCDTTGF_DAC_p0
000EE309 F800 00                    	smpsCall	SCDTTGF_DAC_p0
000EE30C F800 00                    	smpsCall	SCDTTGF_DAC_p3
000EE30F F800 00                    	smpsCall	SCDTTGF_DAC_p0
000EE312 F800 00                    	smpsCall	SCDTTGF_DAC_p0
000EE315 F800 00                    	smpsCall	SCDTTGF_DAC_p0
000EE318 F800 00                    	smpsCall	SCDTTGF_DAC_p3
000EE31B F800 00                    	smpsCall	SCDTTGF_DAC_p0
000EE31E F800 00                    	smpsCall	SCDTTGF_DAC_p0
000EE321 F800 00                    	smpsCall	SCDTTGF_DAC_p0
000EE324 F800 00                    	smpsCall	SCDTTGF_DAC_p3
000EE327 F800 00                    	smpsCall	SCDTTGF_DAC_p0
000EE32A F800 00                    	smpsCall	SCDTTGF_DAC_p0
000EE32D F800 00                    	smpsCall	SCDTTGF_DAC_p0
000EE330 F800 00                    	smpsCall	SCDTTGF_DAC_p3
000EE333 F800 00                    	smpsCall	SCDTTGF_DAC_p0
000EE336 F800 00                    	smpsCall	SCDTTGF_DAC_p0
000EE339 F800 00                    	smpsCall	SCDTTGF_DAC_p0
000EE33C F800 00                    	smpsCall	SCDTTGF_DAC_p3
000EE33F F800 00                    	smpsCall	SCDTTGF_DAC_p0
000EE342 F800 00                    	smpsCall	SCDTTGF_DAC_p0
000EE345 F800 00                    	smpsCall	SCDTTGF_DAC_p0
000EE348 F800 00                    	smpsCall	SCDTTGF_DAC_p3
000EE34B F800 00                    	smpsCall	SCDTTGF_DAC_p0
000EE34E F800 00                    	smpsCall	SCDTTGF_DAC_p0
000EE351 F800 00                    	smpsCall	SCDTTGF_DAC_p0
000EE354 F800 00                    	smpsCall	SCDTTGF_DAC_p3
000EE357 F800 00                    	smpsCall	SCDTTGF_DAC_p0
000EE35A F800 00                    	smpsCall	SCDTTGF_DAC_p0
000EE35D F800 00                    	smpsCall	SCDTTGF_DAC_p0
000EE360 F800 00                    	smpsCall	SCDTTGF_DAC_p3
000EE363 F6FF 9E                    	smpsJump	SCDTTGF_DAC
000EE366                            
000EE366                            
000EE366                            ; Pattern data for FM1
000EE366                            SCDTTGF_FM1_p0:
000EE366 EF00                       	smpsFMvoice	$0
000EE368 960C                       	dc.b		$96,$c
000EE36A 96                         	dc.b		$96
000EE36B 9D08                       	dc.b		$9d,$8
000EE36D 9904                       	dc.b		$99,$4
000EE36F A208                       	dc.b		$a2,$8
000EE371 A404                       	dc.b		$a4,$4
000EE373 8008                       	dc.b		$80,$8
000EE375 A404                       	dc.b		$a4,$4
000EE377 A208                       	dc.b		$a2,$8
000EE379 A404                       	dc.b		$a4,$4
000EE37B A20C                       	dc.b		$a2,$c
000EE37D 9D                         	dc.b		$9d
000EE37E E3                         	smpsReturn
000EE37F                            
000EE37F                            SCDTTGF_FM1_p1:
000EE37F 960C                       	dc.b		$96,$c
000EE381 96                         	dc.b		$96
000EE382 9D08                       	dc.b		$9d,$8
000EE384 9904                       	dc.b		$99,$4
000EE386 A208                       	dc.b		$a2,$8
000EE388 A404                       	dc.b		$a4,$4
000EE38A 8008                       	dc.b		$80,$8
000EE38C A404                       	dc.b		$a4,$4
000EE38E A208                       	dc.b		$a2,$8
000EE390 A404                       	dc.b		$a4,$4
000EE392 A208                       	dc.b		$a2,$8
000EE394 9D04                       	dc.b		$9d,$4
000EE396 9608                       	dc.b		$96,$8
000EE398 9504                       	dc.b		$95,$4
000EE39A E3                         	smpsReturn
000EE39B                            
000EE39B                            SCDTTGF_FM1_p2:
000EE39B 940C                       	dc.b		$94,$c
000EE39D 94                         	dc.b		$94
000EE39E 9B08                       	dc.b		$9b,$8
000EE3A0 9704                       	dc.b		$97,$4
000EE3A2 A008                       	dc.b		$a0,$8
000EE3A4 A204                       	dc.b		$a2,$4
000EE3A6 8008                       	dc.b		$80,$8
000EE3A8 A204                       	dc.b		$a2,$4
000EE3AA A008                       	dc.b		$a0,$8
000EE3AC A204                       	dc.b		$a2,$4
000EE3AE A00C                       	dc.b		$a0,$c
000EE3B0 9B                         	dc.b		$9b
000EE3B1 E3                         	smpsReturn
000EE3B2                            
000EE3B2                            SCDTTGF_FM1_p3:
000EE3B2 940C                       	dc.b		$94,$c
000EE3B4 94                         	dc.b		$94
000EE3B5 9B08                       	dc.b		$9b,$8
000EE3B7 9704                       	dc.b		$97,$4
000EE3B9 A008                       	dc.b		$a0,$8
000EE3BB A204                       	dc.b		$a2,$4
000EE3BD 8008                       	dc.b		$80,$8
000EE3BF A204                       	dc.b		$a2,$4
000EE3C1 A008                       	dc.b		$a0,$8
000EE3C3 A204                       	dc.b		$a2,$4
000EE3C5 A008                       	dc.b		$a0,$8
000EE3C7 9B04                       	dc.b		$9b,$4
000EE3C9 9408                       	dc.b		$94,$8
000EE3CB 9504                       	dc.b		$95,$4
000EE3CD E3                         	smpsReturn
000EE3CE                            
000EE3CE                            SCDTTGF_FM1_p4:
000EE3CE 960C                       	dc.b		$96,$c
000EE3D0 96                         	dc.b		$96
000EE3D1 9D08                       	dc.b		$9d,$8
000EE3D3 9904                       	dc.b		$99,$4
000EE3D5 A208                       	dc.b		$a2,$8
000EE3D7 A404                       	dc.b		$a4,$4
000EE3D9 8008                       	dc.b		$80,$8
000EE3DB A404                       	dc.b		$a4,$4
000EE3DD A208                       	dc.b		$a2,$8
000EE3DF A404                       	dc.b		$a4,$4
000EE3E1 A20C                       	dc.b		$a2,$c
000EE3E3 9D                         	dc.b		$9d
000EE3E4 E3                         	smpsReturn
000EE3E5                            
000EE3E5                            SCDTTGF_FM1_p8:
000EE3E5 920C                       	dc.b		$92,$c
000EE3E7 92                         	dc.b		$92
000EE3E8 9908                       	dc.b		$99,$8
000EE3EA 9504                       	dc.b		$95,$4
000EE3EC 9E08                       	dc.b		$9e,$8
000EE3EE A004                       	dc.b		$a0,$4
000EE3F0 8008                       	dc.b		$80,$8
000EE3F2 A004                       	dc.b		$a0,$4
000EE3F4 9E08                       	dc.b		$9e,$8
000EE3F6 A004                       	dc.b		$a0,$4
000EE3F8 9E0C                       	dc.b		$9e,$c
000EE3FA 99                         	dc.b		$99
000EE3FB E3                         	smpsReturn
000EE3FC                            
000EE3FC                            SCDTTGF_FM1_p9:
000EE3FC 920C                       	dc.b		$92,$c
000EE3FE 92                         	dc.b		$92
000EE3FF 9908                       	dc.b		$99,$8
000EE401 9504                       	dc.b		$95,$4
000EE403 9E08                       	dc.b		$9e,$8
000EE405 A004                       	dc.b		$a0,$4
000EE407 8008                       	dc.b		$80,$8
000EE409 A004                       	dc.b		$a0,$4
000EE40B 9E08                       	dc.b		$9e,$8
000EE40D A004                       	dc.b		$a0,$4
000EE40F 9E08                       	dc.b		$9e,$8
000EE411 9904                       	dc.b		$99,$4
000EE413 9608                       	dc.b		$96,$8
000EE415 9404                       	dc.b		$94,$4
000EE417 E3                         	smpsReturn
000EE418                            
000EE418                            SCDTTGF_FM1_p10:
000EE418 910C                       	dc.b		$91,$c
000EE41A 98                         	dc.b		$98
000EE41B 9108                       	dc.b		$91,$8
000EE41D 9404                       	dc.b		$94,$4
000EE41F 9808                       	dc.b		$98,$8
000EE421 9D04                       	dc.b		$9d,$4
000EE423 8008                       	dc.b		$80,$8
000EE425 9D04                       	dc.b		$9d,$4
000EE427 9B08                       	dc.b		$9b,$8
000EE429 9D04                       	dc.b		$9d,$4
000EE42B 9B0C                       	dc.b		$9b,$c
000EE42D 98                         	dc.b		$98
000EE42E E3                         	smpsReturn
000EE42F                            
000EE42F                            SCDTTGF_FM1_p11:
000EE42F 910C                       	dc.b		$91,$c
000EE431 91                         	dc.b		$91
000EE432 9808                       	dc.b		$98,$8
000EE434 9404                       	dc.b		$94,$4
000EE436 9808                       	dc.b		$98,$8
000EE438 9D04                       	dc.b		$9d,$4
000EE43A 8008                       	dc.b		$80,$8
000EE43C 9D04                       	dc.b		$9d,$4
000EE43E 9B08                       	dc.b		$9b,$8
000EE440 9D04                       	dc.b		$9d,$4
000EE442 9B08                       	dc.b		$9b,$8
000EE444 9804                       	dc.b		$98,$4
000EE446 9408                       	dc.b		$94,$8
000EE448 9804                       	dc.b		$98,$4
000EE44A E3                         	smpsReturn
000EE44B                            
000EE44B                            SCDTTGF_FM1_p13:
000EE44B 960C                       	dc.b		$96,$c
000EE44D 96                         	dc.b		$96
000EE44E 9D08                       	dc.b		$9d,$8
000EE450 9904                       	dc.b		$99,$4
000EE452 A208                       	dc.b		$a2,$8
000EE454 A404                       	dc.b		$a4,$4
000EE456 8008                       	dc.b		$80,$8
000EE458 A404                       	dc.b		$a4,$4
000EE45A A208                       	dc.b		$a2,$8
000EE45C A404                       	dc.b		$a4,$4
000EE45E A208                       	dc.b		$a2,$8
000EE460 9D04                       	dc.b		$9d,$4
000EE462 9608                       	dc.b		$96,$8
000EE464 9104                       	dc.b		$91,$4
000EE466 E3                         	smpsReturn
000EE467                            
000EE467                            SCDTTGF_FM1_p14:
000EE467 8F0C                       	dc.b		$8f,$c
000EE469 8F                         	dc.b		$8f
000EE46A 9608                       	dc.b		$96,$8
000EE46C 9204                       	dc.b		$92,$4
000EE46E 9B08                       	dc.b		$9b,$8
000EE470 9D04                       	dc.b		$9d,$4
000EE472 8008                       	dc.b		$80,$8
000EE474 9D04                       	dc.b		$9d,$4
000EE476 9B08                       	dc.b		$9b,$8
000EE478 9D04                       	dc.b		$9d,$4
000EE47A 9B0C                       	dc.b		$9b,$c
000EE47C 96                         	dc.b		$96
000EE47D E3                         	smpsReturn
000EE47E                            
000EE47E                            SCDTTGF_FM1_p15:
000EE47E 8F0C                       	dc.b		$8f,$c
000EE480 8F                         	dc.b		$8f
000EE481 9608                       	dc.b		$96,$8
000EE483 9204                       	dc.b		$92,$4
000EE485 9B08                       	dc.b		$9b,$8
000EE487 9D04                       	dc.b		$9d,$4
000EE489 8008                       	dc.b		$80,$8
000EE48B 9D04                       	dc.b		$9d,$4
000EE48D 9B08                       	dc.b		$9b,$8
000EE48F 9D04                       	dc.b		$9d,$4
000EE491 9B08                       	dc.b		$9b,$8
000EE493 9604                       	dc.b		$96,$4
000EE495 9408                       	dc.b		$94,$8
000EE497 9604                       	dc.b		$96,$4
000EE499 E3                         	smpsReturn
000EE49A                            
000EE49A                            SCDTTGF_FM1_p17:
000EE49A 940C                       	dc.b		$94,$c
000EE49C 94                         	dc.b		$94
000EE49D 9B08                       	dc.b		$9b,$8
000EE49F 9704                       	dc.b		$97,$4
000EE4A1 A008                       	dc.b		$a0,$8
000EE4A3 A204                       	dc.b		$a2,$4
000EE4A5 8008                       	dc.b		$80,$8
000EE4A7 A204                       	dc.b		$a2,$4
000EE4A9 A008                       	dc.b		$a0,$8
000EE4AB A204                       	dc.b		$a2,$4
000EE4AD A008                       	dc.b		$a0,$8
000EE4AF 9B04                       	dc.b		$9b,$4
000EE4B1 9808                       	dc.b		$98,$8
000EE4B3 9704                       	dc.b		$97,$4
000EE4B5 E3                         	smpsReturn
000EE4B6                            
000EE4B6                            ; Pattern data for FM2
000EE4B6                            SCDTTGF_FM2_p0:
000EE4B6 EF02                       	smpsFMvoice	$2
000EE4B8 BC48                       	dc.b		$bc,$48
000EE4BA BA18                       	dc.b		$ba,$18
000EE4BC E3                         	smpsReturn
000EE4BD                            
000EE4BD                            SCDTTGF_FM2_p1:
000EE4BD BC24                       	dc.b		$bc,$24
000EE4BF BD                         	dc.b		$bd
000EE4C0 BF18                       	dc.b		$bf,$18
000EE4C2 E3                         	smpsReturn
000EE4C3                            
000EE4C3                            SCDTTGF_FM2_p2:
000EE4C3 BA60                       	dc.b		$ba,$60
000EE4C5 E3                         	smpsReturn
000EE4C6                            
000EE4C6                            SCDTTGF_FM2_p3:
000EE4C6 E760                       	dc.b		$e7,$60
000EE4C8 E3                         	smpsReturn
000EE4C9                            
000EE4C9                            SCDTTGF_FM2_p6:
000EE4C9 C160                       	dc.b		$c1,$60
000EE4CB E3                         	smpsReturn
000EE4CC                            
000EE4CC                            SCDTTGF_FM2_p8:
000EE4CC EF03                       	smpsFMvoice	$3
000EE4CE BA24                       	dc.b		$ba,$24
000EE4D0 BC                         	dc.b		$bc
000EE4D1 BD18                       	dc.b		$bd,$18
000EE4D3 E3                         	smpsReturn
000EE4D4                            
000EE4D4                            SCDTTGF_FM2_p9:
000EE4D4 E70C                       	dc.b		$e7,$c
000EE4D6 C1                         	dc.b		$c1
000EE4D7 BF                         	dc.b		$bf
000EE4D8 BD                         	dc.b		$bd
000EE4D9 BC                         	dc.b		$bc
000EE4DA BA                         	dc.b		$ba
000EE4DB BC                         	dc.b		$bc
000EE4DC BD                         	dc.b		$bd
000EE4DD E3                         	smpsReturn
000EE4DE                            
000EE4DE                            SCDTTGF_FM2_pa:
000EE4DE B924                       	dc.b		$b9,$24
000EE4E0 B63C                       	dc.b		$b6,$3c
000EE4E2 E3                         	smpsReturn
000EE4E3                            
000EE4E3                            SCDTTGF_FM2_pc:
000EE4E3 EF03                       	smpsFMvoice	$3
000EE4E5 BD24                       	dc.b		$bd,$24
000EE4E7 BF                         	dc.b		$bf
000EE4E8 C118                       	dc.b		$c1,$18
000EE4EA E3                         	smpsReturn
000EE4EB                            
000EE4EB                            SCDTTGF_FM2_pd:
000EE4EB E70C                       	dc.b		$e7,$c
000EE4ED C4                         	dc.b		$c4
000EE4EE C2                         	dc.b		$c2
000EE4EF C1                         	dc.b		$c1
000EE4F0 BF                         	dc.b		$bf
000EE4F1 BD                         	dc.b		$bd
000EE4F2 BF                         	dc.b		$bf
000EE4F3 C1                         	dc.b		$c1
000EE4F4 E3                         	smpsReturn
000EE4F5                            
000EE4F5                            SCDTTGF_FM2_pe:
000EE4F5 BD24                       	dc.b		$bd,$24
000EE4F7 B93C                       	dc.b		$b9,$3c
000EE4F9 E3                         	smpsReturn
000EE4FA                            
000EE4FA                            SCDTTGF_FM2_pf:
000EE4FA E730                       	dc.b		$e7,$30
000EE4FC EF02                       	smpsFMvoice	$2
000EE4FE E603                       	smpsaltervol	3
000EE500 C418                       	dc.b		$c4,$18
000EE502 C2                         	dc.b		$c2
000EE503 E3                         	smpsReturn
000EE504                            
000EE504                            SCDTTGF_FM2_p11:
000EE504 E730                       	dc.b		$e7,$30
000EE506 BF18                       	dc.b		$bf,$18
000EE508 BD                         	dc.b		$bd
000EE509 E3                         	smpsReturn
000EE50A                            
000EE50A                            SCDTTGF_FM2_p12:
000EE50A BC48                       	dc.b		$bc,$48
000EE50C BE18                       	dc.b		$be,$18
000EE50E E3                         	smpsReturn
000EE50F                            
000EE50F                            SCDTTGF_FM2_p13:
000EE50F BA3C                       	dc.b		$ba,$3c
000EE511 BE18                       	dc.b		$be,$18
000EE513 BA0C                       	dc.b		$ba,$c
000EE515 E3                         	smpsReturn
000EE516                            
000EE516                            SCDTTGF_FM2_p14:
000EE516 BF60                       	dc.b		$bf,$60
000EE518 E3                         	smpsReturn
000EE519                            
000EE519                            SCDTTGF_FM2_p15:
000EE519 E718                       	dc.b		$e7,$18
000EE51B C1                         	dc.b		$c1
000EE51C C2                         	dc.b		$c2
000EE51D C6                         	dc.b		$c6
000EE51E E3                         	smpsReturn
000EE51F                            
000EE51F                            SCDTTGF_FM2_p16:
000EE51F C460                       	dc.b		$c4,$60
000EE521 E3                         	smpsReturn
000EE522                            
000EE522                            SCDTTGF_FM2_p18:
000EE522 800C                       	dc.b		$80,$c
000EE524 EF05                       	smpsFMvoice	$5
000EE526 C404                       	dc.b		$c4,$4
000EE528 8008                       	dc.b		$80,$8
000EE52A C8                         	dc.b		$c8
000EE52B C104                       	dc.b		$c1,$4
000EE52D 800C                       	dc.b		$80,$c
000EE52F C404                       	dc.b		$c4,$4
000EE531 8008                       	dc.b		$80,$8
000EE533 C8                         	dc.b		$c8
000EE534 C104                       	dc.b		$c1,$4
000EE536 8018                       	dc.b		$80,$18
000EE538 E3                         	smpsReturn
000EE539                            
000EE539                            SCDTTGF_FM2_p19:
000EE539 E70C                       	dc.b		$e7,$c
000EE53B C404                       	dc.b		$c4,$4
000EE53D 8008                       	dc.b		$80,$8
000EE53F C8                         	dc.b		$c8
000EE540 C104                       	dc.b		$c1,$4
000EE542 800C                       	dc.b		$80,$c
000EE544 C404                       	dc.b		$c4,$4
000EE546 8008                       	dc.b		$80,$8
000EE548 C8                         	dc.b		$c8
000EE549 C104                       	dc.b		$c1,$4
000EE54B 8018                       	dc.b		$80,$18
000EE54D E3                         	smpsReturn
000EE54E                            
000EE54E                            SCDTTGF_FM2_p1a:
000EE54E E70C                       	dc.b		$e7,$c
000EE550 C204                       	dc.b		$c2,$4
000EE552 8008                       	dc.b		$80,$8
000EE554 C6                         	dc.b		$c6
000EE555 BF04                       	dc.b		$bf,$4
000EE557 800C                       	dc.b		$80,$c
000EE559 C204                       	dc.b		$c2,$4
000EE55B 8008                       	dc.b		$80,$8
000EE55D C6                         	dc.b		$c6
000EE55E BF04                       	dc.b		$bf,$4
000EE560 8018                       	dc.b		$80,$18
000EE562 E3                         	smpsReturn
000EE563                            
000EE563                            ; Pattern data for FM3
000EE563                            SCDTTGF_FM3_p0:
000EE563 800C                       	dc.b		$80,$c
000EE565 EF02                       	smpsFMvoice	$2
000EE567 BC48                       	dc.b		$bc,$48
000EE569 BA0C                       	dc.b		$ba,$c
000EE56B E3                         	smpsReturn
000EE56C                            
000EE56C                            SCDTTGF_FM3_p1:
000EE56C E70C                       	dc.b		$e7,$c
000EE56E BC24                       	dc.b		$bc,$24
000EE570 BD                         	dc.b		$bd
000EE571 BF0C                       	dc.b		$bf,$c
000EE573 E3                         	smpsReturn
000EE574                            
000EE574                            SCDTTGF_FM3_p2:
000EE574 E70C                       	dc.b		$e7,$c
000EE576 BA54                       	dc.b		$ba,$54
000EE578 E3                         	smpsReturn
000EE579                            
000EE579                            SCDTTGF_FM3_p3:
000EE579 E760                       	dc.b		$e7,$60
000EE57B E3                         	smpsReturn
000EE57C                            
000EE57C                            SCDTTGF_FM3_p4:
000EE57C E70C                       	dc.b		$e7,$c
000EE57E EF02                       	smpsFMvoice	$2
000EE580 BC48                       	dc.b		$bc,$48
000EE582 BA0C                       	dc.b		$ba,$c
000EE584 E3                         	smpsReturn
000EE585                            
000EE585                            SCDTTGF_FM3_p6:
000EE585 E70C                       	dc.b		$e7,$c
000EE587 C154                       	dc.b		$c1,$54
000EE589 E3                         	smpsReturn
000EE58A                            
000EE58A                            SCDTTGF_FM3_p8:
000EE58A E70C                       	dc.b		$e7,$c
000EE58C 8054                       	dc.b		$80,$54
000EE58E E3                         	smpsReturn
000EE58F                            
000EE58F                            SCDTTGF_FM3_pc:
000EE58F EF03                       	smpsFMvoice	$3
000EE591 BA24                       	dc.b		$ba,$24
000EE593 BC                         	dc.b		$bc
000EE594 BD18                       	dc.b		$bd,$18
000EE596 E3                         	smpsReturn
000EE597                            
000EE597                            SCDTTGF_FM3_pd:
000EE597 E70C                       	dc.b		$e7,$c
000EE599 C1                         	dc.b		$c1
000EE59A BF                         	dc.b		$bf
000EE59B BD                         	dc.b		$bd
000EE59C BC                         	dc.b		$bc
000EE59D BA                         	dc.b		$ba
000EE59E BC                         	dc.b		$bc
000EE59F BD                         	dc.b		$bd
000EE5A0 E3                         	smpsReturn
000EE5A1                            
000EE5A1                            SCDTTGF_FM3_pe:
000EE5A1 B924                       	dc.b		$b9,$24
000EE5A3 B63C                       	dc.b		$b6,$3c
000EE5A5 E3                         	smpsReturn
000EE5A6                            
000EE5A6                            SCDTTGF_FM3_pf:
000EE5A6 E73C                       	dc.b		$e7,$3c
000EE5A8 EF02                       	smpsFMvoice	$2
000EE5AA E603                       	smpsaltervol	3
000EE5AC E104                       	smpsalternote	4
000EE5AE E604                       	smpsaltervol	4
000EE5B0 C418                       	dc.b		$c4,$18
000EE5B2 C20C                       	dc.b		$c2,$c
000EE5B4 E3                         	smpsReturn
000EE5B5                            
000EE5B5                            SCDTTGF_FM3_p11:
000EE5B5 E73C                       	dc.b		$e7,$3c
000EE5B7 BF18                       	dc.b		$bf,$18
000EE5B9 BD0C                       	dc.b		$bd,$c
000EE5BB E3                         	smpsReturn
000EE5BC                            
000EE5BC                            SCDTTGF_FM3_p12:
000EE5BC E70C                       	dc.b		$e7,$c
000EE5BE BC48                       	dc.b		$bc,$48
000EE5C0 BE0C                       	dc.b		$be,$c
000EE5C2 E3                         	smpsReturn
000EE5C3                            
000EE5C3                            SCDTTGF_FM3_p13:
000EE5C3 E70C                       	dc.b		$e7,$c
000EE5C5 BA3C                       	dc.b		$ba,$3c
000EE5C7 BE18                       	dc.b		$be,$18
000EE5C9 E3                         	smpsReturn
000EE5CA                            
000EE5CA                            SCDTTGF_FM3_p14:
000EE5CA BA0C                       	dc.b		$ba,$c
000EE5CC BF54                       	dc.b		$bf,$54
000EE5CE E3                         	smpsReturn
000EE5CF                            
000EE5CF                            SCDTTGF_FM3_p15:
000EE5CF E724                       	dc.b		$e7,$24
000EE5D1 C118                       	dc.b		$c1,$18
000EE5D3 C2                         	dc.b		$c2
000EE5D4 C60C                       	dc.b		$c6,$c
000EE5D6 E3                         	smpsReturn
000EE5D7                            
000EE5D7                            SCDTTGF_FM3_p16:
000EE5D7 E70C                       	dc.b		$e7,$c
000EE5D9 C454                       	dc.b		$c4,$54
000EE5DB E3                         	smpsReturn
000EE5DC                            
000EE5DC                            SCDTTGF_FM3_p18:
000EE5DC 800C                       	dc.b		$80,$c
000EE5DE EF05                       	smpsFMvoice	$5
000EE5E0 C104                       	dc.b		$c1,$4
000EE5E2 8008                       	dc.b		$80,$8
000EE5E4 C4                         	dc.b		$c4
000EE5E5 BD04                       	dc.b		$bd,$4
000EE5E7 800C                       	dc.b		$80,$c
000EE5E9 C104                       	dc.b		$c1,$4
000EE5EB 8008                       	dc.b		$80,$8
000EE5ED C4                         	dc.b		$c4
000EE5EE BD04                       	dc.b		$bd,$4
000EE5F0 8018                       	dc.b		$80,$18
000EE5F2 E3                         	smpsReturn
000EE5F3                            
000EE5F3                            SCDTTGF_FM3_p1a:
000EE5F3 E70C                       	dc.b		$e7,$c
000EE5F5 BF04                       	dc.b		$bf,$4
000EE5F7 8008                       	dc.b		$80,$8
000EE5F9 C2                         	dc.b		$c2
000EE5FA BB04                       	dc.b		$bb,$4
000EE5FC 800C                       	dc.b		$80,$c
000EE5FE BF04                       	dc.b		$bf,$4
000EE600 8008                       	dc.b		$80,$8
000EE602 C2                         	dc.b		$c2
000EE603 BB04                       	dc.b		$bb,$4
000EE605 8018                       	dc.b		$80,$18
000EE607 E3                         	smpsReturn
000EE608                            
000EE608                            ; Pattern data for FM4
000EE608                            SCDTTGF_FM4_p0:
000EE608 EF01                       	smpsFMvoice	$1
000EE60A BC60                       	dc.b		$bc,$60
000EE60C E3                         	smpsReturn
000EE60D                            
000EE60D                            SCDTTGF_FM4_p1:
000EE60D E760                       	dc.b		$e7,$60
000EE60F E3                         	smpsReturn
000EE610                            
000EE610                            SCDTTGF_FM4_p2:
000EE610 EF01                       	smpsFMvoice	$1
000EE612 BA60                       	dc.b		$ba,$60
000EE614 E3                         	smpsReturn
000EE615                            
000EE615                            SCDTTGF_FM4_p8:
000EE615 EF04                       	smpsFMvoice	$4
000EE617 B560                       	dc.b		$b5,$60
000EE619 E3                         	smpsReturn
000EE61A                            
000EE61A                            SCDTTGF_FM4_p9:
000EE61A E754                       	dc.b		$e7,$54
000EE61C 800C                       	dc.b		$80,$c
000EE61E E3                         	smpsReturn
000EE61F                            
000EE61F                            SCDTTGF_FM4_pf:
000EE61F E730                       	dc.b		$e7,$30
000EE621 80                         	dc.b		$80
000EE622 E3                         	smpsReturn
000EE623                            
000EE623                            SCDTTGF_FM4_p10:
000EE623 EF04                       	smpsFMvoice	$4
000EE625 B060                       	dc.b		$b0,$60
000EE627 E3                         	smpsReturn
000EE628                            
000EE628                            SCDTTGF_FM4_p14:
000EE628 EF04                       	smpsFMvoice	$4
000EE62A B160                       	dc.b		$b1,$60
000EE62C E3                         	smpsReturn
000EE62D                            
000EE62D                            SCDTTGF_FM4_p16:
000EE62D EF04                       	smpsFMvoice	$4
000EE62F B860                       	dc.b		$b8,$60
000EE631 E3                         	smpsReturn
000EE632                            
000EE632                            ; Pattern data for FM5
000EE632                            SCDTTGF_FM5_p0:
000EE632 EF01                       	smpsFMvoice	$1
000EE634 B860                       	dc.b		$b8,$60
000EE636 E3                         	smpsReturn
000EE637                            
000EE637                            SCDTTGF_FM5_p1:
000EE637 E760                       	dc.b		$e7,$60
000EE639 E3                         	smpsReturn
000EE63A                            
000EE63A                            SCDTTGF_FM5_p2:
000EE63A EF01                       	smpsFMvoice	$1
000EE63C B660                       	dc.b		$b6,$60
000EE63E E3                         	smpsReturn
000EE63F                            
000EE63F                            SCDTTGF_FM5_p8:
000EE63F EF04                       	smpsFMvoice	$4
000EE641 B160                       	dc.b		$b1,$60
000EE643 E3                         	smpsReturn
000EE644                            
000EE644                            SCDTTGF_FM5_p9:
000EE644 E754                       	dc.b		$e7,$54
000EE646 800C                       	dc.b		$80,$c
000EE648 E3                         	smpsReturn
000EE649                            
000EE649                            SCDTTGF_FM5_pf:
000EE649 E730                       	dc.b		$e7,$30
000EE64B 80                         	dc.b		$80
000EE64C E3                         	smpsReturn
000EE64D                            
000EE64D                            SCDTTGF_FM5_p10:
000EE64D EF04                       	smpsFMvoice	$4
000EE64F AC60                       	dc.b		$ac,$60
000EE651 E3                         	smpsReturn
000EE652                            
000EE652                            SCDTTGF_FM5_p12:
000EE652 EF04                       	smpsFMvoice	$4
000EE654 B060                       	dc.b		$b0,$60
000EE656 E3                         	smpsReturn
000EE657                            
000EE657                            SCDTTGF_FM5_p14:
000EE657 EF04                       	smpsFMvoice	$4
000EE659 AE60                       	dc.b		$ae,$60
000EE65B E3                         	smpsReturn
000EE65C                            
000EE65C                            SCDTTGF_FM5_p16:
000EE65C EF04                       	smpsFMvoice	$4
000EE65E B360                       	dc.b		$b3,$60
000EE660 E3                         	smpsReturn
000EE661                            
000EE661                            ; Pattern data for PSG1
000EE661                            SCDTTGF_PSG1_p0:
000EE661 F501                       	smpsPSGvoice	$1
000EE663 D403                       	dc.b		$d4,$3
000EE665 D0                         	dc.b		$d0
000EE666 CD                         	dc.b		$cd
000EE667 C9                         	dc.b		$c9
000EE668 C8                         	dc.b		$c8
000EE669 C4                         	dc.b		$c4
000EE66A C1                         	dc.b		$c1
000EE66B BD                         	dc.b		$bd
000EE66C D4                         	dc.b		$d4
000EE66D D0                         	dc.b		$d0
000EE66E CD                         	dc.b		$cd
000EE66F C9                         	dc.b		$c9
000EE670 C8                         	dc.b		$c8
000EE671 C4                         	dc.b		$c4
000EE672 C1                         	dc.b		$c1
000EE673 BD                         	dc.b		$bd
000EE674 D4                         	dc.b		$d4
000EE675 D0                         	dc.b		$d0
000EE676 CD                         	dc.b		$cd
000EE677 C9                         	dc.b		$c9
000EE678 C8                         	dc.b		$c8
000EE679 C4                         	dc.b		$c4
000EE67A C1                         	dc.b		$c1
000EE67B BD                         	dc.b		$bd
000EE67C D4                         	dc.b		$d4
000EE67D D0                         	dc.b		$d0
000EE67E CD                         	dc.b		$cd
000EE67F C9                         	dc.b		$c9
000EE680 C8                         	dc.b		$c8
000EE681 C4                         	dc.b		$c4
000EE682 C1                         	dc.b		$c1
000EE683 BD                         	dc.b		$bd
000EE684 E3                         	smpsReturn
000EE685                            
000EE685                            SCDTTGF_PSG1_p1:
000EE685 D403                       	dc.b		$d4,$3
000EE687 D0                         	dc.b		$d0
000EE688 CD                         	dc.b		$cd
000EE689 C9                         	dc.b		$c9
000EE68A C8                         	dc.b		$c8
000EE68B C4                         	dc.b		$c4
000EE68C C1                         	dc.b		$c1
000EE68D BD                         	dc.b		$bd
000EE68E D4                         	dc.b		$d4
000EE68F D0                         	dc.b		$d0
000EE690 CD                         	dc.b		$cd
000EE691 C9                         	dc.b		$c9
000EE692 C8                         	dc.b		$c8
000EE693 C4                         	dc.b		$c4
000EE694 C1                         	dc.b		$c1
000EE695 BD                         	dc.b		$bd
000EE696 D4                         	dc.b		$d4
000EE697 D0                         	dc.b		$d0
000EE698 CD                         	dc.b		$cd
000EE699 C9                         	dc.b		$c9
000EE69A C8                         	dc.b		$c8
000EE69B C4                         	dc.b		$c4
000EE69C C1                         	dc.b		$c1
000EE69D BD                         	dc.b		$bd
000EE69E D4                         	dc.b		$d4
000EE69F D0                         	dc.b		$d0
000EE6A0 CD                         	dc.b		$cd
000EE6A1 C9                         	dc.b		$c9
000EE6A2 C8                         	dc.b		$c8
000EE6A3 C4                         	dc.b		$c4
000EE6A4 C1                         	dc.b		$c1
000EE6A5 BD                         	dc.b		$bd
000EE6A6 E3                         	smpsReturn
000EE6A7                            
000EE6A7                            SCDTTGF_PSG1_p2:
000EE6A7 D203                       	dc.b		$d2,$3
000EE6A9 CE                         	dc.b		$ce
000EE6AA CB                         	dc.b		$cb
000EE6AB C7                         	dc.b		$c7
000EE6AC C6                         	dc.b		$c6
000EE6AD C2                         	dc.b		$c2
000EE6AE BF                         	dc.b		$bf
000EE6AF BB                         	dc.b		$bb
000EE6B0 D2                         	dc.b		$d2
000EE6B1 CE                         	dc.b		$ce
000EE6B2 CB                         	dc.b		$cb
000EE6B3 C7                         	dc.b		$c7
000EE6B4 C6                         	dc.b		$c6
000EE6B5 C2                         	dc.b		$c2
000EE6B6 BF                         	dc.b		$bf
000EE6B7 BB                         	dc.b		$bb
000EE6B8 D2                         	dc.b		$d2
000EE6B9 CE                         	dc.b		$ce
000EE6BA CB                         	dc.b		$cb
000EE6BB C7                         	dc.b		$c7
000EE6BC C6                         	dc.b		$c6
000EE6BD C2                         	dc.b		$c2
000EE6BE BF                         	dc.b		$bf
000EE6BF BB                         	dc.b		$bb
000EE6C0 D2                         	dc.b		$d2
000EE6C1 CE                         	dc.b		$ce
000EE6C2 CB                         	dc.b		$cb
000EE6C3 C7                         	dc.b		$c7
000EE6C4 C6                         	dc.b		$c6
000EE6C5 C2                         	dc.b		$c2
000EE6C6 BF                         	dc.b		$bf
000EE6C7 BB                         	dc.b		$bb
000EE6C8 E3                         	smpsReturn
000EE6C9                            
000EE6C9                            SCDTTGF_PSG1_p8:
000EE6C9 CD03                       	dc.b		$cd,$3
000EE6CB C9                         	dc.b		$c9
000EE6CC C6                         	dc.b		$c6
000EE6CD C2                         	dc.b		$c2
000EE6CE C1                         	dc.b		$c1
000EE6CF BD                         	dc.b		$bd
000EE6D0 BA                         	dc.b		$ba
000EE6D1 B6                         	dc.b		$b6
000EE6D2 CD                         	dc.b		$cd
000EE6D3 C9                         	dc.b		$c9
000EE6D4 C6                         	dc.b		$c6
000EE6D5 C2                         	dc.b		$c2
000EE6D6 C1                         	dc.b		$c1
000EE6D7 BD                         	dc.b		$bd
000EE6D8 BA                         	dc.b		$ba
000EE6D9 B6                         	dc.b		$b6
000EE6DA CD                         	dc.b		$cd
000EE6DB C9                         	dc.b		$c9
000EE6DC C6                         	dc.b		$c6
000EE6DD C2                         	dc.b		$c2
000EE6DE C1                         	dc.b		$c1
000EE6DF BD                         	dc.b		$bd
000EE6E0 BA                         	dc.b		$ba
000EE6E1 B6                         	dc.b		$b6
000EE6E2 CD                         	dc.b		$cd
000EE6E3 C9                         	dc.b		$c9
000EE6E4 C6                         	dc.b		$c6
000EE6E5 C2                         	dc.b		$c2
000EE6E6 C1                         	dc.b		$c1
000EE6E7 BD                         	dc.b		$bd
000EE6E8 BA                         	dc.b		$ba
000EE6E9 B6                         	dc.b		$b6
000EE6EA E3                         	smpsReturn
000EE6EB                            
000EE6EB                            SCDTTGF_PSG1_pa:
000EE6EB CD03                       	dc.b		$cd,$3
000EE6ED C9                         	dc.b		$c9
000EE6EE C5                         	dc.b		$c5
000EE6EF C2                         	dc.b		$c2
000EE6F0 C1                         	dc.b		$c1
000EE6F1 BD                         	dc.b		$bd
000EE6F2 B9                         	dc.b		$b9
000EE6F3 B6                         	dc.b		$b6
000EE6F4 CD                         	dc.b		$cd
000EE6F5 C9                         	dc.b		$c9
000EE6F6 C5                         	dc.b		$c5
000EE6F7 C2                         	dc.b		$c2
000EE6F8 C1                         	dc.b		$c1
000EE6F9 BD                         	dc.b		$bd
000EE6FA B9                         	dc.b		$b9
000EE6FB B6                         	dc.b		$b6
000EE6FC CD                         	dc.b		$cd
000EE6FD C9                         	dc.b		$c9
000EE6FE C5                         	dc.b		$c5
000EE6FF C2                         	dc.b		$c2
000EE700 C1                         	dc.b		$c1
000EE701 BD                         	dc.b		$bd
000EE702 B9                         	dc.b		$b9
000EE703 B6                         	dc.b		$b6
000EE704 CD                         	dc.b		$cd
000EE705 C9                         	dc.b		$c9
000EE706 C5                         	dc.b		$c5
000EE707 C2                         	dc.b		$c2
000EE708 C1                         	dc.b		$c1
000EE709 BD                         	dc.b		$bd
000EE70A B9                         	dc.b		$b9
000EE70B B6                         	dc.b		$b6
000EE70C E3                         	smpsReturn
000EE70D                            
000EE70D                            SCDTTGF_PSG1_p10:
000EE70D D403                       	dc.b		$d4,$3
000EE70F D0                         	dc.b		$d0
000EE710 CD                         	dc.b		$cd
000EE711 CB                         	dc.b		$cb
000EE712 C8                         	dc.b		$c8
000EE713 C4                         	dc.b		$c4
000EE714 C1                         	dc.b		$c1
000EE715 BF                         	dc.b		$bf
000EE716 D4                         	dc.b		$d4
000EE717 D0                         	dc.b		$d0
000EE718 CD                         	dc.b		$cd
000EE719 CB                         	dc.b		$cb
000EE71A C8                         	dc.b		$c8
000EE71B C4                         	dc.b		$c4
000EE71C C1                         	dc.b		$c1
000EE71D BF                         	dc.b		$bf
000EE71E D4                         	dc.b		$d4
000EE71F D0                         	dc.b		$d0
000EE720 CD                         	dc.b		$cd
000EE721 CB                         	dc.b		$cb
000EE722 C8                         	dc.b		$c8
000EE723 C4                         	dc.b		$c4
000EE724 C1                         	dc.b		$c1
000EE725 BF                         	dc.b		$bf
000EE726 D4                         	dc.b		$d4
000EE727 D0                         	dc.b		$d0
000EE728 CD                         	dc.b		$cd
000EE729 CB                         	dc.b		$cb
000EE72A C8                         	dc.b		$c8
000EE72B C4                         	dc.b		$c4
000EE72C C1                         	dc.b		$c1
000EE72D BF                         	dc.b		$bf
000EE72E E3                         	smpsReturn
000EE72F                            
000EE72F                            SCDTTGF_PSG1_p12:
000EE72F CB03                       	dc.b		$cb,$3
000EE731 C8                         	dc.b		$c8
000EE732 C6                         	dc.b		$c6
000EE733 C1                         	dc.b		$c1
000EE734 BF                         	dc.b		$bf
000EE735 BC                         	dc.b		$bc
000EE736 BA                         	dc.b		$ba
000EE737 B5                         	dc.b		$b5
000EE738 CB                         	dc.b		$cb
000EE739 C8                         	dc.b		$c8
000EE73A C6                         	dc.b		$c6
000EE73B C1                         	dc.b		$c1
000EE73C BF                         	dc.b		$bf
000EE73D BC                         	dc.b		$bc
000EE73E BA                         	dc.b		$ba
000EE73F B5                         	dc.b		$b5
000EE740 CB                         	dc.b		$cb
000EE741 C8                         	dc.b		$c8
000EE742 C6                         	dc.b		$c6
000EE743 C1                         	dc.b		$c1
000EE744 BF                         	dc.b		$bf
000EE745 BC                         	dc.b		$bc
000EE746 BA                         	dc.b		$ba
000EE747 B5                         	dc.b		$b5
000EE748 CB                         	dc.b		$cb
000EE749 C8                         	dc.b		$c8
000EE74A C6                         	dc.b		$c6
000EE74B C1                         	dc.b		$c1
000EE74C BF                         	dc.b		$bf
000EE74D BC                         	dc.b		$bc
000EE74E BA                         	dc.b		$ba
000EE74F B5                         	dc.b		$b5
000EE750 E3                         	smpsReturn
000EE751                            
000EE751                            SCDTTGF_PSG1_p13:
000EE751 CA03                       	dc.b		$ca,$3
000EE753 C8                         	dc.b		$c8
000EE754 C6                         	dc.b		$c6
000EE755 C1                         	dc.b		$c1
000EE756 BE                         	dc.b		$be
000EE757 BC                         	dc.b		$bc
000EE758 BA                         	dc.b		$ba
000EE759 B5                         	dc.b		$b5
000EE75A CA                         	dc.b		$ca
000EE75B C8                         	dc.b		$c8
000EE75C C6                         	dc.b		$c6
000EE75D C1                         	dc.b		$c1
000EE75E BE                         	dc.b		$be
000EE75F BC                         	dc.b		$bc
000EE760 BA                         	dc.b		$ba
000EE761 B5                         	dc.b		$b5
000EE762 CA                         	dc.b		$ca
000EE763 C8                         	dc.b		$c8
000EE764 C6                         	dc.b		$c6
000EE765 C1                         	dc.b		$c1
000EE766 BE                         	dc.b		$be
000EE767 BC                         	dc.b		$bc
000EE768 BA                         	dc.b		$ba
000EE769 B5                         	dc.b		$b5
000EE76A CA                         	dc.b		$ca
000EE76B C8                         	dc.b		$c8
000EE76C C6                         	dc.b		$c6
000EE76D C1                         	dc.b		$c1
000EE76E BE                         	dc.b		$be
000EE76F BC                         	dc.b		$bc
000EE770 BA                         	dc.b		$ba
000EE771 B3                         	dc.b		$b3
000EE772 E3                         	smpsReturn
000EE773                            
000EE773                            SCDTTGF_PSG1_p14:
000EE773 D703                       	dc.b		$d7,$3
000EE775 D5                         	dc.b		$d5
000EE776 D2                         	dc.b		$d2
000EE777 CE                         	dc.b		$ce
000EE778 CB                         	dc.b		$cb
000EE779 C9                         	dc.b		$c9
000EE77A C6                         	dc.b		$c6
000EE77B C2                         	dc.b		$c2
000EE77C D7                         	dc.b		$d7
000EE77D D5                         	dc.b		$d5
000EE77E D2                         	dc.b		$d2
000EE77F CE                         	dc.b		$ce
000EE780 CB                         	dc.b		$cb
000EE781 C9                         	dc.b		$c9
000EE782 C6                         	dc.b		$c6
000EE783 C2                         	dc.b		$c2
000EE784 D7                         	dc.b		$d7
000EE785 D5                         	dc.b		$d5
000EE786 D2                         	dc.b		$d2
000EE787 CE                         	dc.b		$ce
000EE788 CB                         	dc.b		$cb
000EE789 C9                         	dc.b		$c9
000EE78A C6                         	dc.b		$c6
000EE78B C2                         	dc.b		$c2
000EE78C D7                         	dc.b		$d7
000EE78D D5                         	dc.b		$d5
000EE78E D2                         	dc.b		$d2
000EE78F CE                         	dc.b		$ce
000EE790 CB                         	dc.b		$cb
000EE791 C9                         	dc.b		$c9
000EE792 C6                         	dc.b		$c6
000EE793 C2                         	dc.b		$c2
000EE794 E3                         	smpsReturn
000EE795                            
000EE795                            SCDTTGF_PSG1_p16:
000EE795 BA03                       	dc.b		$ba,$3
000EE797 BD                         	dc.b		$bd
000EE798 BF                         	dc.b		$bf
000EE799 C2                         	dc.b		$c2
000EE79A C6                         	dc.b		$c6
000EE79B C9                         	dc.b		$c9
000EE79C CB                         	dc.b		$cb
000EE79D CE                         	dc.b		$ce
000EE79E BA                         	dc.b		$ba
000EE79F BD                         	dc.b		$bd
000EE7A0 BF                         	dc.b		$bf
000EE7A1 C2                         	dc.b		$c2
000EE7A2 C6                         	dc.b		$c6
000EE7A3 C9                         	dc.b		$c9
000EE7A4 CB                         	dc.b		$cb
000EE7A5 CE                         	dc.b		$ce
000EE7A6 BA                         	dc.b		$ba
000EE7A7 BD                         	dc.b		$bd
000EE7A8 BF                         	dc.b		$bf
000EE7A9 C2                         	dc.b		$c2
000EE7AA C6                         	dc.b		$c6
000EE7AB C9                         	dc.b		$c9
000EE7AC CB                         	dc.b		$cb
000EE7AD CE                         	dc.b		$ce
000EE7AE BA                         	dc.b		$ba
000EE7AF BD                         	dc.b		$bd
000EE7B0 BF                         	dc.b		$bf
000EE7B1 C2                         	dc.b		$c2
000EE7B2 C6                         	dc.b		$c6
000EE7B3 C9                         	dc.b		$c9
000EE7B4 CB                         	dc.b		$cb
000EE7B5 CE                         	dc.b		$ce
000EE7B6 E3                         	smpsReturn
000EE7B7                            
000EE7B7                            SCDTTGF_PSG1_p17:
000EE7B7 B803                       	dc.b		$b8,$3
000EE7B9 BC                         	dc.b		$bc
000EE7BA BF                         	dc.b		$bf
000EE7BB C2                         	dc.b		$c2
000EE7BC C4                         	dc.b		$c4
000EE7BD C8                         	dc.b		$c8
000EE7BE CB                         	dc.b		$cb
000EE7BF CE                         	dc.b		$ce
000EE7C0 B8                         	dc.b		$b8
000EE7C1 BC                         	dc.b		$bc
000EE7C2 BF                         	dc.b		$bf
000EE7C3 C2                         	dc.b		$c2
000EE7C4 C4                         	dc.b		$c4
000EE7C5 C8                         	dc.b		$c8
000EE7C6 CB                         	dc.b		$cb
000EE7C7 CE                         	dc.b		$ce
000EE7C8 B8                         	dc.b		$b8
000EE7C9 BC                         	dc.b		$bc
000EE7CA BF                         	dc.b		$bf
000EE7CB C2                         	dc.b		$c2
000EE7CC C4                         	dc.b		$c4
000EE7CD C8                         	dc.b		$c8
000EE7CE CB                         	dc.b		$cb
000EE7CF CE                         	dc.b		$ce
000EE7D0 B8                         	dc.b		$b8
000EE7D1 BC                         	dc.b		$bc
000EE7D2 BF                         	dc.b		$bf
000EE7D3 C2                         	dc.b		$c2
000EE7D4 C4                         	dc.b		$c4
000EE7D5 C8                         	dc.b		$c8
000EE7D6 CB                         	dc.b		$cb
000EE7D7 CE                         	dc.b		$ce
000EE7D8 E3                         	smpsReturn
000EE7D9                            
000EE7D9                            ; Pattern data for PSG2
000EE7D9                            SCDTTGF_PSG2_p0:
000EE7D9 800C                       	dc.b		$80,$c
000EE7DB F501                       	smpsPSGvoice	$1
000EE7DD D403                       	dc.b		$d4,$3
000EE7DF D0                         	dc.b		$d0
000EE7E0 CD                         	dc.b		$cd
000EE7E1 C9                         	dc.b		$c9
000EE7E2 C8                         	dc.b		$c8
000EE7E3 C4                         	dc.b		$c4
000EE7E4 C1                         	dc.b		$c1
000EE7E5 BD                         	dc.b		$bd
000EE7E6 D4                         	dc.b		$d4
000EE7E7 D0                         	dc.b		$d0
000EE7E8 CD                         	dc.b		$cd
000EE7E9 C9                         	dc.b		$c9
000EE7EA C8                         	dc.b		$c8
000EE7EB C4                         	dc.b		$c4
000EE7EC C1                         	dc.b		$c1
000EE7ED BD                         	dc.b		$bd
000EE7EE D4                         	dc.b		$d4
000EE7EF D0                         	dc.b		$d0
000EE7F0 CD                         	dc.b		$cd
000EE7F1 C9                         	dc.b		$c9
000EE7F2 C8                         	dc.b		$c8
000EE7F3 C4                         	dc.b		$c4
000EE7F4 C1                         	dc.b		$c1
000EE7F5 BD                         	dc.b		$bd
000EE7F6 D4                         	dc.b		$d4
000EE7F7 D0                         	dc.b		$d0
000EE7F8 CD                         	dc.b		$cd
000EE7F9 C9                         	dc.b		$c9
000EE7FA E3                         	smpsReturn
000EE7FB                            
000EE7FB                            SCDTTGF_PSG2_p1:
000EE7FB C803                       	dc.b		$c8,$3
000EE7FD C4                         	dc.b		$c4
000EE7FE C1                         	dc.b		$c1
000EE7FF BD                         	dc.b		$bd
000EE800 D4                         	dc.b		$d4
000EE801 D0                         	dc.b		$d0
000EE802 CD                         	dc.b		$cd
000EE803 C9                         	dc.b		$c9
000EE804 C8                         	dc.b		$c8
000EE805 C4                         	dc.b		$c4
000EE806 C1                         	dc.b		$c1
000EE807 BD                         	dc.b		$bd
000EE808 D4                         	dc.b		$d4
000EE809 D0                         	dc.b		$d0
000EE80A CD                         	dc.b		$cd
000EE80B C9                         	dc.b		$c9
000EE80C C8                         	dc.b		$c8
000EE80D C4                         	dc.b		$c4
000EE80E C1                         	dc.b		$c1
000EE80F BD                         	dc.b		$bd
000EE810 D4                         	dc.b		$d4
000EE811 D0                         	dc.b		$d0
000EE812 CD                         	dc.b		$cd
000EE813 C9                         	dc.b		$c9
000EE814 C8                         	dc.b		$c8
000EE815 C4                         	dc.b		$c4
000EE816 C1                         	dc.b		$c1
000EE817 BD                         	dc.b		$bd
000EE818 D4                         	dc.b		$d4
000EE819 D0                         	dc.b		$d0
000EE81A CD                         	dc.b		$cd
000EE81B C9                         	dc.b		$c9
000EE81C E3                         	smpsReturn
000EE81D                            
000EE81D                            SCDTTGF_PSG2_p2:
000EE81D C803                       	dc.b		$c8,$3
000EE81F C4                         	dc.b		$c4
000EE820 C1                         	dc.b		$c1
000EE821 BD                         	dc.b		$bd
000EE822 D2                         	dc.b		$d2
000EE823 CE                         	dc.b		$ce
000EE824 CB                         	dc.b		$cb
000EE825 C7                         	dc.b		$c7
000EE826 C6                         	dc.b		$c6
000EE827 C2                         	dc.b		$c2
000EE828 BF                         	dc.b		$bf
000EE829 BB                         	dc.b		$bb
000EE82A D2                         	dc.b		$d2
000EE82B CE                         	dc.b		$ce
000EE82C CB                         	dc.b		$cb
000EE82D C7                         	dc.b		$c7
000EE82E C6                         	dc.b		$c6
000EE82F C2                         	dc.b		$c2
000EE830 BF                         	dc.b		$bf
000EE831 BB                         	dc.b		$bb
000EE832 D2                         	dc.b		$d2
000EE833 CE                         	dc.b		$ce
000EE834 CB                         	dc.b		$cb
000EE835 C7                         	dc.b		$c7
000EE836 C6                         	dc.b		$c6
000EE837 C2                         	dc.b		$c2
000EE838 BF                         	dc.b		$bf
000EE839 BB                         	dc.b		$bb
000EE83A D2                         	dc.b		$d2
000EE83B CE                         	dc.b		$ce
000EE83C CB                         	dc.b		$cb
000EE83D C7                         	dc.b		$c7
000EE83E E3                         	smpsReturn
000EE83F                            
000EE83F                            SCDTTGF_PSG2_p3:
000EE83F C603                       	dc.b		$c6,$3
000EE841 C2                         	dc.b		$c2
000EE842 BF                         	dc.b		$bf
000EE843 BB                         	dc.b		$bb
000EE844 D2                         	dc.b		$d2
000EE845 CE                         	dc.b		$ce
000EE846 CB                         	dc.b		$cb
000EE847 C7                         	dc.b		$c7
000EE848 C6                         	dc.b		$c6
000EE849 C2                         	dc.b		$c2
000EE84A BF                         	dc.b		$bf
000EE84B BB                         	dc.b		$bb
000EE84C D2                         	dc.b		$d2
000EE84D CE                         	dc.b		$ce
000EE84E CB                         	dc.b		$cb
000EE84F C7                         	dc.b		$c7
000EE850 C6                         	dc.b		$c6
000EE851 C2                         	dc.b		$c2
000EE852 BF                         	dc.b		$bf
000EE853 BB                         	dc.b		$bb
000EE854 D2                         	dc.b		$d2
000EE855 CE                         	dc.b		$ce
000EE856 CB                         	dc.b		$cb
000EE857 C7                         	dc.b		$c7
000EE858 C6                         	dc.b		$c6
000EE859 C2                         	dc.b		$c2
000EE85A BF                         	dc.b		$bf
000EE85B BB                         	dc.b		$bb
000EE85C D2                         	dc.b		$d2
000EE85D CE                         	dc.b		$ce
000EE85E CB                         	dc.b		$cb
000EE85F C7                         	dc.b		$c7
000EE860 E3                         	smpsReturn
000EE861                            
000EE861                            SCDTTGF_PSG2_p4:
000EE861 C603                       	dc.b		$c6,$3
000EE863 C2                         	dc.b		$c2
000EE864 BF                         	dc.b		$bf
000EE865 BB                         	dc.b		$bb
000EE866 D4                         	dc.b		$d4
000EE867 D0                         	dc.b		$d0
000EE868 CD                         	dc.b		$cd
000EE869 C9                         	dc.b		$c9
000EE86A C8                         	dc.b		$c8
000EE86B C4                         	dc.b		$c4
000EE86C C1                         	dc.b		$c1
000EE86D BD                         	dc.b		$bd
000EE86E D4                         	dc.b		$d4
000EE86F D0                         	dc.b		$d0
000EE870 CD                         	dc.b		$cd
000EE871 C9                         	dc.b		$c9
000EE872 C8                         	dc.b		$c8
000EE873 C4                         	dc.b		$c4
000EE874 C1                         	dc.b		$c1
000EE875 BD                         	dc.b		$bd
000EE876 D4                         	dc.b		$d4
000EE877 D0                         	dc.b		$d0
000EE878 CD                         	dc.b		$cd
000EE879 C9                         	dc.b		$c9
000EE87A C8                         	dc.b		$c8
000EE87B C4                         	dc.b		$c4
000EE87C C1                         	dc.b		$c1
000EE87D BD                         	dc.b		$bd
000EE87E D4                         	dc.b		$d4
000EE87F D0                         	dc.b		$d0
000EE880 CD                         	dc.b		$cd
000EE881 C9                         	dc.b		$c9
000EE882 E3                         	smpsReturn
000EE883                            
000EE883                            SCDTTGF_PSG2_p8:
000EE883 C603                       	dc.b		$c6,$3
000EE885 C2                         	dc.b		$c2
000EE886 BF                         	dc.b		$bf
000EE887 BB                         	dc.b		$bb
000EE888 CD                         	dc.b		$cd
000EE889 C9                         	dc.b		$c9
000EE88A C6                         	dc.b		$c6
000EE88B C2                         	dc.b		$c2
000EE88C C1                         	dc.b		$c1
000EE88D BD                         	dc.b		$bd
000EE88E BA                         	dc.b		$ba
000EE88F B6                         	dc.b		$b6
000EE890 CD                         	dc.b		$cd
000EE891 C9                         	dc.b		$c9
000EE892 C6                         	dc.b		$c6
000EE893 C2                         	dc.b		$c2
000EE894 C1                         	dc.b		$c1
000EE895 BD                         	dc.b		$bd
000EE896 BA                         	dc.b		$ba
000EE897 B6                         	dc.b		$b6
000EE898 CD                         	dc.b		$cd
000EE899 C9                         	dc.b		$c9
000EE89A C6                         	dc.b		$c6
000EE89B C2                         	dc.b		$c2
000EE89C C1                         	dc.b		$c1
000EE89D BD                         	dc.b		$bd
000EE89E BA                         	dc.b		$ba
000EE89F B6                         	dc.b		$b6
000EE8A0 CD                         	dc.b		$cd
000EE8A1 C9                         	dc.b		$c9
000EE8A2 C6                         	dc.b		$c6
000EE8A3 C2                         	dc.b		$c2
000EE8A4 E3                         	smpsReturn
000EE8A5                            
000EE8A5                            SCDTTGF_PSG2_p9:
000EE8A5 C103                       	dc.b		$c1,$3
000EE8A7 BD                         	dc.b		$bd
000EE8A8 BA                         	dc.b		$ba
000EE8A9 B6                         	dc.b		$b6
000EE8AA CD                         	dc.b		$cd
000EE8AB C9                         	dc.b		$c9
000EE8AC C6                         	dc.b		$c6
000EE8AD C2                         	dc.b		$c2
000EE8AE C1                         	dc.b		$c1
000EE8AF BD                         	dc.b		$bd
000EE8B0 BA                         	dc.b		$ba
000EE8B1 B6                         	dc.b		$b6
000EE8B2 CD                         	dc.b		$cd
000EE8B3 C9                         	dc.b		$c9
000EE8B4 C6                         	dc.b		$c6
000EE8B5 C2                         	dc.b		$c2
000EE8B6 C1                         	dc.b		$c1
000EE8B7 BD                         	dc.b		$bd
000EE8B8 BA                         	dc.b		$ba
000EE8B9 B6                         	dc.b		$b6
000EE8BA CD                         	dc.b		$cd
000EE8BB C9                         	dc.b		$c9
000EE8BC C6                         	dc.b		$c6
000EE8BD C2                         	dc.b		$c2
000EE8BE C1                         	dc.b		$c1
000EE8BF BD                         	dc.b		$bd
000EE8C0 BA                         	dc.b		$ba
000EE8C1 B6                         	dc.b		$b6
000EE8C2 CD                         	dc.b		$cd
000EE8C3 C9                         	dc.b		$c9
000EE8C4 C6                         	dc.b		$c6
000EE8C5 C2                         	dc.b		$c2
000EE8C6 E3                         	smpsReturn
000EE8C7                            
000EE8C7                            SCDTTGF_PSG2_pa:
000EE8C7 C103                       	dc.b		$c1,$3
000EE8C9 BD                         	dc.b		$bd
000EE8CA BA                         	dc.b		$ba
000EE8CB B6                         	dc.b		$b6
000EE8CC CD                         	dc.b		$cd
000EE8CD C9                         	dc.b		$c9
000EE8CE C5                         	dc.b		$c5
000EE8CF C2                         	dc.b		$c2
000EE8D0 C1                         	dc.b		$c1
000EE8D1 BD                         	dc.b		$bd
000EE8D2 B9                         	dc.b		$b9
000EE8D3 B6                         	dc.b		$b6
000EE8D4 CD                         	dc.b		$cd
000EE8D5 C9                         	dc.b		$c9
000EE8D6 C5                         	dc.b		$c5
000EE8D7 C2                         	dc.b		$c2
000EE8D8 C1                         	dc.b		$c1
000EE8D9 BD                         	dc.b		$bd
000EE8DA B9                         	dc.b		$b9
000EE8DB B6                         	dc.b		$b6
000EE8DC CD                         	dc.b		$cd
000EE8DD C9                         	dc.b		$c9
000EE8DE C5                         	dc.b		$c5
000EE8DF C2                         	dc.b		$c2
000EE8E0 C1                         	dc.b		$c1
000EE8E1 BD                         	dc.b		$bd
000EE8E2 B9                         	dc.b		$b9
000EE8E3 B6                         	dc.b		$b6
000EE8E4 CD                         	dc.b		$cd
000EE8E5 C9                         	dc.b		$c9
000EE8E6 C5                         	dc.b		$c5
000EE8E7 C2                         	dc.b		$c2
000EE8E8 E3                         	smpsReturn
000EE8E9                            
000EE8E9                            SCDTTGF_PSG2_pb:
000EE8E9 C103                       	dc.b		$c1,$3
000EE8EB BD                         	dc.b		$bd
000EE8EC B9                         	dc.b		$b9
000EE8ED B6                         	dc.b		$b6
000EE8EE CD                         	dc.b		$cd
000EE8EF C9                         	dc.b		$c9
000EE8F0 C5                         	dc.b		$c5
000EE8F1 C2                         	dc.b		$c2
000EE8F2 C1                         	dc.b		$c1
000EE8F3 BD                         	dc.b		$bd
000EE8F4 B9                         	dc.b		$b9
000EE8F5 B6                         	dc.b		$b6
000EE8F6 CD                         	dc.b		$cd
000EE8F7 C9                         	dc.b		$c9
000EE8F8 C5                         	dc.b		$c5
000EE8F9 C2                         	dc.b		$c2
000EE8FA C1                         	dc.b		$c1
000EE8FB BD                         	dc.b		$bd
000EE8FC B9                         	dc.b		$b9
000EE8FD B6                         	dc.b		$b6
000EE8FE CD                         	dc.b		$cd
000EE8FF C9                         	dc.b		$c9
000EE900 C5                         	dc.b		$c5
000EE901 C2                         	dc.b		$c2
000EE902 C1                         	dc.b		$c1
000EE903 BD                         	dc.b		$bd
000EE904 B9                         	dc.b		$b9
000EE905 B6                         	dc.b		$b6
000EE906 CD                         	dc.b		$cd
000EE907 C9                         	dc.b		$c9
000EE908 C5                         	dc.b		$c5
000EE909 C2                         	dc.b		$c2
000EE90A E3                         	smpsReturn
000EE90B                            
000EE90B                            SCDTTGF_PSG2_pc:
000EE90B C103                       	dc.b		$c1,$3
000EE90D BD                         	dc.b		$bd
000EE90E B9                         	dc.b		$b9
000EE90F B6                         	dc.b		$b6
000EE910 CD                         	dc.b		$cd
000EE911 C9                         	dc.b		$c9
000EE912 C6                         	dc.b		$c6
000EE913 C2                         	dc.b		$c2
000EE914 C1                         	dc.b		$c1
000EE915 BD                         	dc.b		$bd
000EE916 BA                         	dc.b		$ba
000EE917 B6                         	dc.b		$b6
000EE918 CD                         	dc.b		$cd
000EE919 C9                         	dc.b		$c9
000EE91A C6                         	dc.b		$c6
000EE91B C2                         	dc.b		$c2
000EE91C C1                         	dc.b		$c1
000EE91D BD                         	dc.b		$bd
000EE91E BA                         	dc.b		$ba
000EE91F B6                         	dc.b		$b6
000EE920 CD                         	dc.b		$cd
000EE921 C9                         	dc.b		$c9
000EE922 C6                         	dc.b		$c6
000EE923 C2                         	dc.b		$c2
000EE924 C1                         	dc.b		$c1
000EE925 BD                         	dc.b		$bd
000EE926 BA                         	dc.b		$ba
000EE927 B6                         	dc.b		$b6
000EE928 CD                         	dc.b		$cd
000EE929 C9                         	dc.b		$c9
000EE92A C6                         	dc.b		$c6
000EE92B C2                         	dc.b		$c2
000EE92C E3                         	smpsReturn
000EE92D                            
000EE92D                            SCDTTGF_PSG2_p10:
000EE92D C103                       	dc.b		$c1,$3
000EE92F BD                         	dc.b		$bd
000EE930 B9                         	dc.b		$b9
000EE931 B6                         	dc.b		$b6
000EE932 D4                         	dc.b		$d4
000EE933 D0                         	dc.b		$d0
000EE934 CD                         	dc.b		$cd
000EE935 CB                         	dc.b		$cb
000EE936 C8                         	dc.b		$c8
000EE937 C4                         	dc.b		$c4
000EE938 C1                         	dc.b		$c1
000EE939 BF                         	dc.b		$bf
000EE93A D4                         	dc.b		$d4
000EE93B D0                         	dc.b		$d0
000EE93C CD                         	dc.b		$cd
000EE93D CB                         	dc.b		$cb
000EE93E C8                         	dc.b		$c8
000EE93F C4                         	dc.b		$c4
000EE940 C1                         	dc.b		$c1
000EE941 BF                         	dc.b		$bf
000EE942 D4                         	dc.b		$d4
000EE943 D0                         	dc.b		$d0
000EE944 CD                         	dc.b		$cd
000EE945 CB                         	dc.b		$cb
000EE946 C8                         	dc.b		$c8
000EE947 C4                         	dc.b		$c4
000EE948 C1                         	dc.b		$c1
000EE949 BF                         	dc.b		$bf
000EE94A D4                         	dc.b		$d4
000EE94B D0                         	dc.b		$d0
000EE94C CD                         	dc.b		$cd
000EE94D CB                         	dc.b		$cb
000EE94E E3                         	smpsReturn
000EE94F                            
000EE94F                            SCDTTGF_PSG2_p11:
000EE94F C803                       	dc.b		$c8,$3
000EE951 C4                         	dc.b		$c4
000EE952 C1                         	dc.b		$c1
000EE953 BF                         	dc.b		$bf
000EE954 D4                         	dc.b		$d4
000EE955 D0                         	dc.b		$d0
000EE956 CD                         	dc.b		$cd
000EE957 CB                         	dc.b		$cb
000EE958 C8                         	dc.b		$c8
000EE959 C4                         	dc.b		$c4
000EE95A C1                         	dc.b		$c1
000EE95B BF                         	dc.b		$bf
000EE95C D4                         	dc.b		$d4
000EE95D D0                         	dc.b		$d0
000EE95E CD                         	dc.b		$cd
000EE95F CB                         	dc.b		$cb
000EE960 C8                         	dc.b		$c8
000EE961 C4                         	dc.b		$c4
000EE962 C1                         	dc.b		$c1
000EE963 BF                         	dc.b		$bf
000EE964 D4                         	dc.b		$d4
000EE965 D0                         	dc.b		$d0
000EE966 CD                         	dc.b		$cd
000EE967 CB                         	dc.b		$cb
000EE968 C8                         	dc.b		$c8
000EE969 C4                         	dc.b		$c4
000EE96A C1                         	dc.b		$c1
000EE96B BF                         	dc.b		$bf
000EE96C D4                         	dc.b		$d4
000EE96D D0                         	dc.b		$d0
000EE96E CD                         	dc.b		$cd
000EE96F CB                         	dc.b		$cb
000EE970 E3                         	smpsReturn
000EE971                            
000EE971                            SCDTTGF_PSG2_p12:
000EE971 C803                       	dc.b		$c8,$3
000EE973 C4                         	dc.b		$c4
000EE974 C1                         	dc.b		$c1
000EE975 BF                         	dc.b		$bf
000EE976 CB                         	dc.b		$cb
000EE977 C8                         	dc.b		$c8
000EE978 C6                         	dc.b		$c6
000EE979 C1                         	dc.b		$c1
000EE97A BF                         	dc.b		$bf
000EE97B BC                         	dc.b		$bc
000EE97C BA                         	dc.b		$ba
000EE97D B5                         	dc.b		$b5
000EE97E CB                         	dc.b		$cb
000EE97F C8                         	dc.b		$c8
000EE980 C6                         	dc.b		$c6
000EE981 C1                         	dc.b		$c1
000EE982 BF                         	dc.b		$bf
000EE983 BC                         	dc.b		$bc
000EE984 BA                         	dc.b		$ba
000EE985 B5                         	dc.b		$b5
000EE986 CB                         	dc.b		$cb
000EE987 C8                         	dc.b		$c8
000EE988 C6                         	dc.b		$c6
000EE989 C1                         	dc.b		$c1
000EE98A BF                         	dc.b		$bf
000EE98B BC                         	dc.b		$bc
000EE98C BA                         	dc.b		$ba
000EE98D B5                         	dc.b		$b5
000EE98E CB                         	dc.b		$cb
000EE98F C8                         	dc.b		$c8
000EE990 C6                         	dc.b		$c6
000EE991 C1                         	dc.b		$c1
000EE992 E3                         	smpsReturn
000EE993                            
000EE993                            SCDTTGF_PSG2_p13:
000EE993 BF03                       	dc.b		$bf,$3
000EE995 BC                         	dc.b		$bc
000EE996 BA                         	dc.b		$ba
000EE997 B5                         	dc.b		$b5
000EE998 CA                         	dc.b		$ca
000EE999 C8                         	dc.b		$c8
000EE99A C6                         	dc.b		$c6
000EE99B C1                         	dc.b		$c1
000EE99C BE                         	dc.b		$be
000EE99D BC                         	dc.b		$bc
000EE99E BA                         	dc.b		$ba
000EE99F B5                         	dc.b		$b5
000EE9A0 CA                         	dc.b		$ca
000EE9A1 C8                         	dc.b		$c8
000EE9A2 C6                         	dc.b		$c6
000EE9A3 C1                         	dc.b		$c1
000EE9A4 BE                         	dc.b		$be
000EE9A5 BC                         	dc.b		$bc
000EE9A6 BA                         	dc.b		$ba
000EE9A7 B5                         	dc.b		$b5
000EE9A8 CA                         	dc.b		$ca
000EE9A9 C8                         	dc.b		$c8
000EE9AA C6                         	dc.b		$c6
000EE9AB C1                         	dc.b		$c1
000EE9AC BE                         	dc.b		$be
000EE9AD BC                         	dc.b		$bc
000EE9AE BA                         	dc.b		$ba
000EE9AF B5                         	dc.b		$b5
000EE9B0 CA                         	dc.b		$ca
000EE9B1 C8                         	dc.b		$c8
000EE9B2 C6                         	dc.b		$c6
000EE9B3 C1                         	dc.b		$c1
000EE9B4 E3                         	smpsReturn
000EE9B5                            
000EE9B5                            SCDTTGF_PSG2_p14:
000EE9B5 BE03                       	dc.b		$be,$3
000EE9B7 BC                         	dc.b		$bc
000EE9B8 BA                         	dc.b		$ba
000EE9B9 B5                         	dc.b		$b5
000EE9BA D7                         	dc.b		$d7
000EE9BB D5                         	dc.b		$d5
000EE9BC D2                         	dc.b		$d2
000EE9BD CE                         	dc.b		$ce
000EE9BE CB                         	dc.b		$cb
000EE9BF C9                         	dc.b		$c9
000EE9C0 C6                         	dc.b		$c6
000EE9C1 C2                         	dc.b		$c2
000EE9C2 D7                         	dc.b		$d7
000EE9C3 D5                         	dc.b		$d5
000EE9C4 D2                         	dc.b		$d2
000EE9C5 CE                         	dc.b		$ce
000EE9C6 CB                         	dc.b		$cb
000EE9C7 C9                         	dc.b		$c9
000EE9C8 C6                         	dc.b		$c6
000EE9C9 C2                         	dc.b		$c2
000EE9CA D7                         	dc.b		$d7
000EE9CB D5                         	dc.b		$d5
000EE9CC D2                         	dc.b		$d2
000EE9CD CE                         	dc.b		$ce
000EE9CE CB                         	dc.b		$cb
000EE9CF C9                         	dc.b		$c9
000EE9D0 C6                         	dc.b		$c6
000EE9D1 C2                         	dc.b		$c2
000EE9D2 D7                         	dc.b		$d7
000EE9D3 D5                         	dc.b		$d5
000EE9D4 D2                         	dc.b		$d2
000EE9D5 CE                         	dc.b		$ce
000EE9D6 E3                         	smpsReturn
000EE9D7                            
000EE9D7                            SCDTTGF_PSG2_p15:
000EE9D7 CB03                       	dc.b		$cb,$3
000EE9D9 C9                         	dc.b		$c9
000EE9DA C6                         	dc.b		$c6
000EE9DB C2                         	dc.b		$c2
000EE9DC D7                         	dc.b		$d7
000EE9DD D5                         	dc.b		$d5
000EE9DE D2                         	dc.b		$d2
000EE9DF CE                         	dc.b		$ce
000EE9E0 CB                         	dc.b		$cb
000EE9E1 C9                         	dc.b		$c9
000EE9E2 C6                         	dc.b		$c6
000EE9E3 C2                         	dc.b		$c2
000EE9E4 D7                         	dc.b		$d7
000EE9E5 D5                         	dc.b		$d5
000EE9E6 D2                         	dc.b		$d2
000EE9E7 CE                         	dc.b		$ce
000EE9E8 CB                         	dc.b		$cb
000EE9E9 C9                         	dc.b		$c9
000EE9EA C6                         	dc.b		$c6
000EE9EB C2                         	dc.b		$c2
000EE9EC D7                         	dc.b		$d7
000EE9ED D5                         	dc.b		$d5
000EE9EE D2                         	dc.b		$d2
000EE9EF CE                         	dc.b		$ce
000EE9F0 CB                         	dc.b		$cb
000EE9F1 C9                         	dc.b		$c9
000EE9F2 C6                         	dc.b		$c6
000EE9F3 C2                         	dc.b		$c2
000EE9F4 D7                         	dc.b		$d7
000EE9F5 D5                         	dc.b		$d5
000EE9F6 D2                         	dc.b		$d2
000EE9F7 CE                         	dc.b		$ce
000EE9F8 E3                         	smpsReturn
000EE9F9                            
000EE9F9                            SCDTTGF_PSG2_p16:
000EE9F9 CB03                       	dc.b		$cb,$3
000EE9FB C9                         	dc.b		$c9
000EE9FC C6                         	dc.b		$c6
000EE9FD C2                         	dc.b		$c2
000EE9FE BA                         	dc.b		$ba
000EE9FF BD                         	dc.b		$bd
000EEA00 BF                         	dc.b		$bf
000EEA01 C2                         	dc.b		$c2
000EEA02 C6                         	dc.b		$c6
000EEA03 C9                         	dc.b		$c9
000EEA04 CB                         	dc.b		$cb
000EEA05 CE                         	dc.b		$ce
000EEA06 BA                         	dc.b		$ba
000EEA07 BD                         	dc.b		$bd
000EEA08 BF                         	dc.b		$bf
000EEA09 C2                         	dc.b		$c2
000EEA0A C6                         	dc.b		$c6
000EEA0B C9                         	dc.b		$c9
000EEA0C CB                         	dc.b		$cb
000EEA0D CE                         	dc.b		$ce
000EEA0E BA                         	dc.b		$ba
000EEA0F BD                         	dc.b		$bd
000EEA10 BF                         	dc.b		$bf
000EEA11 C2                         	dc.b		$c2
000EEA12 C6                         	dc.b		$c6
000EEA13 C9                         	dc.b		$c9
000EEA14 CB                         	dc.b		$cb
000EEA15 CE                         	dc.b		$ce
000EEA16 BA                         	dc.b		$ba
000EEA17 BD                         	dc.b		$bd
000EEA18 BF                         	dc.b		$bf
000EEA19 C2                         	dc.b		$c2
000EEA1A E3                         	smpsReturn
000EEA1B                            
000EEA1B                            SCDTTGF_PSG2_p17:
000EEA1B C603                       	dc.b		$c6,$3
000EEA1D C9                         	dc.b		$c9
000EEA1E CB                         	dc.b		$cb
000EEA1F CE                         	dc.b		$ce
000EEA20 B8                         	dc.b		$b8
000EEA21 BC                         	dc.b		$bc
000EEA22 BF                         	dc.b		$bf
000EEA23 C2                         	dc.b		$c2
000EEA24 C4                         	dc.b		$c4
000EEA25 C8                         	dc.b		$c8
000EEA26 CB                         	dc.b		$cb
000EEA27 CE                         	dc.b		$ce
000EEA28 B8                         	dc.b		$b8
000EEA29 BC                         	dc.b		$bc
000EEA2A BF                         	dc.b		$bf
000EEA2B C2                         	dc.b		$c2
000EEA2C C4                         	dc.b		$c4
000EEA2D C8                         	dc.b		$c8
000EEA2E CB                         	dc.b		$cb
000EEA2F CE                         	dc.b		$ce
000EEA30 B8                         	dc.b		$b8
000EEA31 BC                         	dc.b		$bc
000EEA32 BF                         	dc.b		$bf
000EEA33 C2                         	dc.b		$c2
000EEA34 C4                         	dc.b		$c4
000EEA35 C8                         	dc.b		$c8
000EEA36 CB                         	dc.b		$cb
000EEA37 CE                         	dc.b		$ce
000EEA38 B8                         	dc.b		$b8
000EEA39 BC                         	dc.b		$bc
000EEA3A BF                         	dc.b		$bf
000EEA3B C2                         	dc.b		$c2
000EEA3C E3                         	smpsReturn
000EEA3D                            
000EEA3D                            SCDTTGF_PSG2_p18:
000EEA3D C403                       	dc.b		$c4,$3
000EEA3F C8                         	dc.b		$c8
000EEA40 CB                         	dc.b		$cb
000EEA41 CE                         	dc.b		$ce
000EEA42 D4                         	dc.b		$d4
000EEA43 D0                         	dc.b		$d0
000EEA44 CD                         	dc.b		$cd
000EEA45 C9                         	dc.b		$c9
000EEA46 C8                         	dc.b		$c8
000EEA47 C4                         	dc.b		$c4
000EEA48 C1                         	dc.b		$c1
000EEA49 BD                         	dc.b		$bd
000EEA4A D4                         	dc.b		$d4
000EEA4B D0                         	dc.b		$d0
000EEA4C CD                         	dc.b		$cd
000EEA4D C9                         	dc.b		$c9
000EEA4E C8                         	dc.b		$c8
000EEA4F C4                         	dc.b		$c4
000EEA50 C1                         	dc.b		$c1
000EEA51 BD                         	dc.b		$bd
000EEA52 D4                         	dc.b		$d4
000EEA53 D0                         	dc.b		$d0
000EEA54 CD                         	dc.b		$cd
000EEA55 C9                         	dc.b		$c9
000EEA56 C8                         	dc.b		$c8
000EEA57 C4                         	dc.b		$c4
000EEA58 C1                         	dc.b		$c1
000EEA59 BD                         	dc.b		$bd
000EEA5A D4                         	dc.b		$d4
000EEA5B D0                         	dc.b		$d0
000EEA5C CD                         	dc.b		$cd
000EEA5D C9                         	dc.b		$c9
000EEA5E E3                         	smpsReturn
000EEA5F                            
000EEA5F                            ; Pattern data for PSG3 (Noise)
000EEA5F                            SCDTTGF_PSG3_p0:
000EEA5F F502                       	smpsPSGvoice	$2
000EEA61 8208                       	dc.b		$82,$8
000EEA63 04                         	dc.b		$4
000EEA64 08                         	dc.b		$8
000EEA65 04                         	dc.b		$4
000EEA66 08                         	dc.b		$8
000EEA67 04                         	dc.b		$4
000EEA68 08                         	dc.b		$8
000EEA69 04                         	dc.b		$4
000EEA6A 08                         	dc.b		$8
000EEA6B 04                         	dc.b		$4
000EEA6C 08                         	dc.b		$8
000EEA6D 04                         	dc.b		$4
000EEA6E 08                         	dc.b		$8
000EEA6F 04                         	dc.b		$4
000EEA70 08                         	dc.b		$8
000EEA71 04                         	dc.b		$4
000EEA72 E3                         	smpsReturn
000EEA73                            
000EEA73                            ; Pattern data for DAC
000EEA73                            SCDTTGF_DAC_p0:
000EEA73 930C                       	dc.b		$93,$c
000EEA75 93                         	dc.b		$93
000EEA76 9414                       	dc.b		$94,$14
000EEA78 9310                       	dc.b		$93,$10
000EEA7A 0C                         	dc.b		$c
000EEA7B 9418                       	dc.b		$94,$18
000EEA7D E3                         	smpsReturn
000EEA7E                            
000EEA7E                            SCDTTGF_DAC_p3:
000EEA7E 930C                       	dc.b		$93,$c
000EEA80 93                         	dc.b		$93
000EEA81 9418                       	dc.b		$94,$18
000EEA83 930C                       	dc.b		$93,$c
000EEA85 94                         	dc.b		$94
000EEA86 9408                       	dc.b		$94,$8
000EEA88 04                         	dc.b		$4
000EEA89 08                         	dc.b		$8
000EEA8A 04                         	dc.b		$4
000EEA8B E3                         	smpsReturn
000EEA8C                            
000EEA8C                            SCDTTGF_Voices:
000EEA8C 3A61 3C14 319C DB9C DA04+  	dc.b	$3a,$61,$3c,$14,$31,$9c,$db,$9c,$da,$4,$9,$4,$3,$3,$1,$3
000EEA9C 001F 0F0F AF21 4731 80     	dc.b	$0,$1f,$f,$f,$af,$21,$47,$31,$80	; Voice 0 (Soft Bass)
000EEAA5 2C64 6434 341F 121F 1F00+  	dc.b	$2c,$64,$64,$34,$34,$1f,$12,$1f,$1f,$0,$0,$0,$0,$0,$1,$0
000EEAB5 010F 3F0F 3F16 0017 00     	dc.b	$1,$f,$3f,$f,$3f,$16,$0,$17,$0	; Voice 1 (Standard Strings)
000EEABE 3B04 0204 010D 1F19 1200+  	dc.b	$3b,$4,$2,$4,$1,$d,$1f,$19,$12,$0,$0,$e,$7,$0,$0,$0
000EEACE 0007 0824 1823 262A 00     	dc.b	$0,$7,$8,$24,$18,$23,$26,$2a,$0	; Voice 6 (Clarinet Type 1)
000EEAD7 3A01 0701 018E 8E8D 530E+  	dc.b	$3a,$1,$7,$1,$1,$8e,$8e,$8d,$53,$e,$e,$e,$3,$0,$0,$0
000EEAE7 001F FF1F 0F18 2827 80     	dc.b	$0,$1f,$ff,$1f,$f,$18,$28,$27,$80	; Voice 3 (Standard Brass)
000EEAF0 0D01 0102 0114 0E0E 0E00+  	dc.b	$d,$1,$1,$2,$1,$14,$e,$e,$e,$0,$0,$0,$0,$0,$0,$0
000EEB00 0006 0707 072F 101C 10     	dc.b	$0,$6,$7,$7,$7,$2f,$10,$1c,$10	; Voice 4 (French Horn)
000EEB09 0430 3030 311F 1F1F 1F1F+  	dc.b	$4,$30,$30,$30,$31,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f
000EEB19 000F 0F0F 087F 7F7F 03     	dc.b	$0,$f,$f,$f,$8,$7f,$7f,$7f,$3	; Voice 5 (Sine Wave)
000EEB22                            	
000EEB22 3B06 0202 0112 1419 4F08+  	dc.b	$3b,$6,$2,$2,$1,$12,$14,$19,$4f,$8,$5,$1,$1,$1,$1,$1
000EEB32 0176 FAF8 F91F 391F 10     	dc.b	$1,$76,$fa,$f8,$f9,$1f,$39,$1f,$10	; Voice 7 (Clarinet Type 2)
000EEB3C 00                         	even
000EEB3C 00                         	even
000EEB3C                            		even
000EEB3C                            Music85:	include	sound\music85.asm
000EEB3C                            ; -------------------------------------------------------
000EEB3C                            ; File created using XM4SMPS v4.1-beta (Qt 3.2.1 Win32)
000EEB3C                            ; Created on Âñ ôåâ 16 2014, 14:54:15
000EEB3C                            ; -------------------------------------------------------
000EEB3C                            
000EEB3C                            MMBUBBLE_Header:
000EEB3C 0000                       	smpsHeaderVoice	MMBUBBLE_Voices
000EEB3E 0603                       	smpsHeaderChan	6,3
000EEB40 0107                       	smpsHeaderTempo	$1, $7
000EEB42 0000 0000                  	smpsHeaderDAC	MMBUBBLE_DAC
000EEB46 0000 000C                  	smpsHeaderFM	MMBUBBLE_FM1,	$0, $c
000EEB4A 0000 E81A                  	smpsHeaderFM	MMBUBBLE_FM2,	$e8, 26
000EEB4E 0000 E81A                  	smpsHeaderFM	MMBUBBLE_FM3,	$e8, 26
000EEB52 0000 0010                  	smpsHeaderFM	MMBUBBLE_FM4,	$0, 16
000EEB56 0000 0010                  	smpsHeaderFM	MMBUBBLE_FM5,	$0, 16
000EEB5A 0000 DC03 0000             	smpsHeaderPSG	MMBUBBLE_PSG1,	$dc, 3, $0
000EEB60 0000 DC05 0000             	smpsHeaderPSG	MMBUBBLE_PSG2,	$dc, 5, $0
000EEB66 0000 DC02 0000             	smpsHeaderPSG	MMBUBBLE_PSG3,	$dc, $2, $0
000EEB6C                            
000EEB6C                            MMBUBBLE_FM1:
000EEB6C E0C0                       	smpspan	pancentre,0
000EEB6E F800 00                    	smpsCall	MMBUBBLE_FM1_p0
000EEB71 F800 00                    	smpsCall	MMBUBBLE_FM1_p1
000EEB74 F800 00                    	smpsCall	MMBUBBLE_FM1_p2
000EEB77 F800 00                    	smpsCall	MMBUBBLE_FM1_p3
000EEB7A F800 00                    	smpsCall	MMBUBBLE_FM1_p0
000EEB7D F800 00                    	smpsCall	MMBUBBLE_FM1_p1
000EEB80 F800 00                    	smpsCall	MMBUBBLE_FM1_p2
000EEB83 F800 00                    	smpsCall	MMBUBBLE_FM1_p3
000EEB86 F800 00                    	smpsCall	MMBUBBLE_FM1_p6
000EEB89 F800 00                    	smpsCall	MMBUBBLE_FM1_p7
000EEB8C F800 00                    	smpsCall	MMBUBBLE_FM1_p8
000EEB8F F800 00                    	smpsCall	MMBUBBLE_FM1_p9
000EEB92 F800 00                    	smpsCall	MMBUBBLE_FM1_p6
000EEB95 F800 00                    	smpsCall	MMBUBBLE_FM1_p7
000EEB98 F800 00                    	smpsCall	MMBUBBLE_FM1_p8
000EEB9B F800 00                    	smpsCall	MMBUBBLE_FM1_p9
000EEB9E F800 00                    	smpsCall	MMBUBBLE_FM1_p0
000EEBA1 F800 00                    	smpsCall	MMBUBBLE_FM1_p1
000EEBA4 F800 00                    	smpsCall	MMBUBBLE_FM1_pe
000EEBA7 F800 00                    	smpsCall	MMBUBBLE_FM1_pf
000EEBAA F800 00                    	smpsCall	MMBUBBLE_FM1_p10
000EEBAD F800 00                    	smpsCall	MMBUBBLE_FM1_p11
000EEBB0 F800 00                    	smpsCall	MMBUBBLE_FM1_p2
000EEBB3 F800 00                    	smpsCall	MMBUBBLE_FM1_p3
000EEBB6 F800 00                    	smpsCall	MMBUBBLE_FM1_p14
000EEBB9 F800 00                    	smpsCall	MMBUBBLE_FM1_p15
000EEBBC F800 00                    	smpsCall	MMBUBBLE_FM1_p16
000EEBBF F800 00                    	smpsCall	MMBUBBLE_FM1_p17
000EEBC2 F800 00                    	smpsCall	MMBUBBLE_FM1_p14
000EEBC5 F800 00                    	smpsCall	MMBUBBLE_FM1_p15
000EEBC8 F800 00                    	smpsCall	MMBUBBLE_FM1_p19
000EEBCB F800 00                    	smpsCall	MMBUBBLE_FM1_p1a
000EEBCE F6FF 9C                    	smpsJump	MMBUBBLE_FM1
000EEBD1                            
000EEBD1                            MMBUBBLE_FM2:
000EEBD1 E0C0                       	smpspan	pancentre,0
000EEBD3 F800 00                    	smpsCall	MMBUBBLE_FM2_p0
000EEBD6 F800 00                    	smpsCall	MMBUBBLE_FM2_p1
000EEBD9 F800 00                    	smpsCall	MMBUBBLE_FM2_p2
000EEBDC F800 00                    	smpsCall	MMBUBBLE_FM2_p3
000EEBDF F800 00                    	smpsCall	MMBUBBLE_FM2_p0
000EEBE2 F800 00                    	smpsCall	MMBUBBLE_FM2_p1
000EEBE5 F800 00                    	smpsCall	MMBUBBLE_FM2_p2
000EEBE8 F800 00                    	smpsCall	MMBUBBLE_FM2_p3
000EEBEB F800 00                    	smpsCall	MMBUBBLE_FM2_p6
000EEBEE F800 00                    	smpsCall	MMBUBBLE_FM2_p6
000EEBF1 F800 00                    	smpsCall	MMBUBBLE_FM2_p8
000EEBF4 F800 00                    	smpsCall	MMBUBBLE_FM2_p8
000EEBF7 F800 00                    	smpsCall	MMBUBBLE_FM2_p6
000EEBFA F800 00                    	smpsCall	MMBUBBLE_FM2_p6
000EEBFD F800 00                    	smpsCall	MMBUBBLE_FM2_p8
000EEC00 F800 00                    	smpsCall	MMBUBBLE_FM2_pb
000EEC03 F800 00                    	smpsCall	MMBUBBLE_FM2_pc
000EEC06 F800 00                    	smpsCall	MMBUBBLE_FM2_pd
000EEC09 F800 00                    	smpsCall	MMBUBBLE_FM2_pe
000EEC0C F800 00                    	smpsCall	MMBUBBLE_FM2_pf
000EEC0F F800 00                    	smpsCall	MMBUBBLE_FM2_p10
000EEC12 F800 00                    	smpsCall	MMBUBBLE_FM2_p11
000EEC15 F800 00                    	smpsCall	MMBUBBLE_FM2_p12
000EEC18 F800 00                    	smpsCall	MMBUBBLE_FM2_p13
000EEC1B F800 00                    	smpsCall	MMBUBBLE_FM2_p14
000EEC1E F800 00                    	smpsCall	MMBUBBLE_FM2_p15
000EEC21 F800 00                    	smpsCall	MMBUBBLE_FM2_p16
000EEC24 F800 00                    	smpsCall	MMBUBBLE_FM2_p17
000EEC27 F800 00                    	smpsCall	MMBUBBLE_FM2_p14
000EEC2A F800 00                    	smpsCall	MMBUBBLE_FM2_p15
000EEC2D F800 00                    	smpsCall	MMBUBBLE_FM2_p16
000EEC30 F800 00                    	smpsCall	MMBUBBLE_FM2_p1a
000EEC33 F6FF 9C                    	smpsJump	MMBUBBLE_FM2
000EEC36                            
000EEC36                            MMBUBBLE_FM3:
000EEC36 E0C0                       	smpspan	pancentre,0
000EEC38 F800 00                    	smpsCall	MMBUBBLE_FM3_p0
000EEC3B F800 00                    	smpsCall	MMBUBBLE_FM3_p1
000EEC3E F800 00                    	smpsCall	MMBUBBLE_FM3_p2
000EEC41 F800 00                    	smpsCall	MMBUBBLE_FM3_p3
000EEC44 F800 00                    	smpsCall	MMBUBBLE_FM3_p0
000EEC47 F800 00                    	smpsCall	MMBUBBLE_FM3_p1
000EEC4A F800 00                    	smpsCall	MMBUBBLE_FM3_p2
000EEC4D F800 00                    	smpsCall	MMBUBBLE_FM3_p3
000EEC50 F800 00                    	smpsCall	MMBUBBLE_FM3_p6
000EEC53 F800 00                    	smpsCall	MMBUBBLE_FM3_p6
000EEC56 F800 00                    	smpsCall	MMBUBBLE_FM3_p8
000EEC59 F800 00                    	smpsCall	MMBUBBLE_FM3_p8
000EEC5C F800 00                    	smpsCall	MMBUBBLE_FM3_p6
000EEC5F F800 00                    	smpsCall	MMBUBBLE_FM3_p6
000EEC62 F800 00                    	smpsCall	MMBUBBLE_FM3_p8
000EEC65 F800 00                    	smpsCall	MMBUBBLE_FM3_pb
000EEC68 F800 00                    	smpsCall	MMBUBBLE_FM3_pc
000EEC6B F800 00                    	smpsCall	MMBUBBLE_FM3_pd
000EEC6E F800 00                    	smpsCall	MMBUBBLE_FM3_pe
000EEC71 F800 00                    	smpsCall	MMBUBBLE_FM3_pf
000EEC74 F800 00                    	smpsCall	MMBUBBLE_FM3_p10
000EEC77 F800 00                    	smpsCall	MMBUBBLE_FM3_p11
000EEC7A F800 00                    	smpsCall	MMBUBBLE_FM3_p12
000EEC7D F800 00                    	smpsCall	MMBUBBLE_FM3_p1
000EEC80 F800 00                    	smpsCall	MMBUBBLE_FM3_p14
000EEC83 F800 00                    	smpsCall	MMBUBBLE_FM3_p15
000EEC86 F800 00                    	smpsCall	MMBUBBLE_FM3_p16
000EEC89 F800 00                    	smpsCall	MMBUBBLE_FM3_p17
000EEC8C F800 00                    	smpsCall	MMBUBBLE_FM3_p14
000EEC8F F800 00                    	smpsCall	MMBUBBLE_FM3_p15
000EEC92 F800 00                    	smpsCall	MMBUBBLE_FM3_p16
000EEC95 F800 00                    	smpsCall	MMBUBBLE_FM3_p1a
000EEC98 F6FF 9C                    	smpsJump	MMBUBBLE_FM3
000EEC9B                            
000EEC9B                            MMBUBBLE_FM4:
000EEC9B E080                       	smpsPan		panLeft,0
000EEC9D E60E                       	smpsaltervol	14
000EEC9F E104                       	smpsalternote	4
000EECA1 E9E8                       	smpsalterpitch	-24
000EECA3 F800 00                    	smpsCall	MMBUBBLE_FM4_p0
000EECA6 F800 00                    	smpsCall	MMBUBBLE_FM4_p1
000EECA9 F800 00                    	smpsCall	MMBUBBLE_FM4_p2
000EECAC F800 00                    	smpsCall	MMBUBBLE_FM4_p3
000EECAF F800 00                    	smpsCall	MMBUBBLE_FM4_p4
000EECB2 F800 00                    	smpsCall	MMBUBBLE_FM4_p1
000EECB5 F800 00                    	smpsCall	MMBUBBLE_FM4_p2
000EECB8 F800 00                    	smpsCall	MMBUBBLE_FM4_p3
000EECBB E6F2                       	smpsaltervol	-14
000EECBD E100                       	smpsalternote	0
000EECBF E6FC                       	smpsaltervol	-4
000EECC1 E918                       	smpsalterpitch	24
000EECC3 F800 00                    	smpsCall	MMBUBBLE_FM4_p6
000EECC6 F800 00                    	smpsCall	MMBUBBLE_FM4_p6
000EECC9 F800 00                    	smpsCall	MMBUBBLE_FM4_p8
000EECCC F800 00                    	smpsCall	MMBUBBLE_FM4_p8
000EECCF F800 00                    	smpsCall	MMBUBBLE_FM4_p6
000EECD2 F800 00                    	smpsCall	MMBUBBLE_FM4_p6
000EECD5 F800 00                    	smpsCall	MMBUBBLE_FM4_p8
000EECD8 F800 00                    	smpsCall	MMBUBBLE_FM4_pb
000EECDB E60E                       	smpsaltervol	14
000EECDD E104                       	smpsalternote	4
000EECDF E9E8                       	smpsalterpitch	-24
000EECE1 F800 00                    	smpsCall	MMBUBBLE_FM4_pc
000EECE4 F800 00                    	smpsCall	MMBUBBLE_FM4_pd
000EECE7 F800 00                    	smpsCall	MMBUBBLE_FM4_pe
000EECEA F800 00                    	smpsCall	MMBUBBLE_FM4_pf
000EECED F800 00                    	smpsCall	MMBUBBLE_FM4_p10
000EECF0 F800 00                    	smpsCall	MMBUBBLE_FM4_p11
000EECF3 F800 00                    	smpsCall	MMBUBBLE_FM4_p12
000EECF6 F800 00                    	smpsCall	MMBUBBLE_FM4_p13
000EECF9 E6F2                       	smpsaltervol	-14
000EECFB E100                       	smpsalternote	0
000EECFD E918                       	smpsalterpitch	24
000EECFF F800 00                    	smpsCall	MMBUBBLE_FM4_p14
000EED02 F800 00                    	smpsCall	MMBUBBLE_FM4_p15
000EED05 F800 00                    	smpsCall	MMBUBBLE_FM4_p16
000EED08 F800 00                    	smpsCall	MMBUBBLE_FM4_p17
000EED0B F800 00                    	smpsCall	MMBUBBLE_FM4_p14
000EED0E F800 00                    	smpsCall	MMBUBBLE_FM4_p15
000EED11 F800 00                    	smpsCall	MMBUBBLE_FM4_p16
000EED14 F800 00                    	smpsCall	MMBUBBLE_FM4_p1a
000EED17 F6FF 82                    	smpsJump	MMBUBBLE_FM4
000EED1A                            
000EED1A                            MMBUBBLE_FM5:
000EED1A E040                       	smpsPan		panRight,0
000EED1C E6F2                       	smpsaltervol	-14
000EED1E F000 0108 04               	smpsmodset	0,	1,	8,	4
000EED23 F800 00                    	smpsCall	MMBUBBLE_FM5_p0
000EED26 F800 00                    	smpsCall	MMBUBBLE_FM5_p1
000EED29 F800 00                    	smpsCall	MMBUBBLE_FM5_p2
000EED2C F800 00                    	smpsCall	MMBUBBLE_FM5_p3
000EED2F F800 00                    	smpsCall	MMBUBBLE_FM5_p0
000EED32 F800 00                    	smpsCall	MMBUBBLE_FM5_p1
000EED35 F800 00                    	smpsCall	MMBUBBLE_FM5_p2
000EED38 F800 00                    	smpsCall	MMBUBBLE_FM5_p3
000EED3B E60E                       	smpsaltervol	14
000EED3D F4                         	smpsmodoff
000EED3E F800 00                    	smpsCall	MMBUBBLE_FM5_p6
000EED41 F800 00                    	smpsCall	MMBUBBLE_FM5_p6
000EED44 F800 00                    	smpsCall	MMBUBBLE_FM5_p8
000EED47 F800 00                    	smpsCall	MMBUBBLE_FM5_p8
000EED4A F800 00                    	smpsCall	MMBUBBLE_FM5_p6
000EED4D F800 00                    	smpsCall	MMBUBBLE_FM5_p6
000EED50 F800 00                    	smpsCall	MMBUBBLE_FM5_p8
000EED53 F800 00                    	smpsCall	MMBUBBLE_FM5_pb
000EED56 E6F2                       	smpsaltervol	-14
000EED58 F000 0108 04               	smpsmodset	0,	1,	8,	4
000EED5D F800 00                    	smpsCall	MMBUBBLE_FM5_pc
000EED60 F800 00                    	smpsCall	MMBUBBLE_FM5_pd
000EED63 F800 00                    	smpsCall	MMBUBBLE_FM5_pe
000EED66 F800 00                    	smpsCall	MMBUBBLE_FM5_pf
000EED69 F800 00                    	smpsCall	MMBUBBLE_FM5_p10
000EED6C F800 00                    	smpsCall	MMBUBBLE_FM5_p11
000EED6F F800 00                    	smpsCall	MMBUBBLE_FM5_p12
000EED72 F800 00                    	smpsCall	MMBUBBLE_FM5_p1
000EED75 E60E                       	smpsaltervol	14
000EED77 F4                         	smpsmodoff
000EED78 F800 00                    	smpsCall	MMBUBBLE_FM5_p14
000EED7B F800 00                    	smpsCall	MMBUBBLE_FM5_p15
000EED7E F800 00                    	smpsCall	MMBUBBLE_FM5_p16
000EED81 F800 00                    	smpsCall	MMBUBBLE_FM5_p17
000EED84 F800 00                    	smpsCall	MMBUBBLE_FM5_p14
000EED87 F800 00                    	smpsCall	MMBUBBLE_FM5_p15
000EED8A F800 00                    	smpsCall	MMBUBBLE_FM5_p16
000EED8D F800 00                    	smpsCall	MMBUBBLE_FM5_p1a
000EED90 F6FF 88                    	smpsJump	MMBUBBLE_FM5
000EED93                            
000EED93                            MMBUBBLE_PSG1:
000EED93 F800 00                    	smpsCall	MMBUBBLE_PSG1_p0
000EED96 F800 00                    	smpsCall	MMBUBBLE_PSG1_p0
000EED99 F800 00                    	smpsCall	MMBUBBLE_PSG1_p2
000EED9C F800 00                    	smpsCall	MMBUBBLE_PSG1_p2
000EED9F F800 00                    	smpsCall	MMBUBBLE_PSG1_p0
000EEDA2 F800 00                    	smpsCall	MMBUBBLE_PSG1_p0
000EEDA5 F800 00                    	smpsCall	MMBUBBLE_PSG1_p2
000EEDA8 F800 00                    	smpsCall	MMBUBBLE_PSG1_p2
000EEDAB F800 00                    	smpsCall	MMBUBBLE_PSG1_p0
000EEDAE F800 00                    	smpsCall	MMBUBBLE_PSG1_p0
000EEDB1 F800 00                    	smpsCall	MMBUBBLE_PSG1_p8
000EEDB4 F800 00                    	smpsCall	MMBUBBLE_PSG1_p8
000EEDB7 F800 00                    	smpsCall	MMBUBBLE_PSG1_p0
000EEDBA F800 00                    	smpsCall	MMBUBBLE_PSG1_p0
000EEDBD F800 00                    	smpsCall	MMBUBBLE_PSG1_p8
000EEDC0 F800 00                    	smpsCall	MMBUBBLE_PSG1_p8
000EEDC3 F800 00                    	smpsCall	MMBUBBLE_PSG1_p0
000EEDC6 F800 00                    	smpsCall	MMBUBBLE_PSG1_p0
000EEDC9 F800 00                    	smpsCall	MMBUBBLE_PSG1_pe
000EEDCC F800 00                    	smpsCall	MMBUBBLE_PSG1_pe
000EEDCF F800 00                    	smpsCall	MMBUBBLE_PSG1_p10
000EEDD2 F800 00                    	smpsCall	MMBUBBLE_PSG1_p10
000EEDD5 F800 00                    	smpsCall	MMBUBBLE_PSG1_p2
000EEDD8 F800 00                    	smpsCall	MMBUBBLE_PSG1_p2
000EEDDB F800 00                    	smpsCall	MMBUBBLE_PSG1_p14
000EEDDE F800 00                    	smpsCall	MMBUBBLE_PSG1_p15
000EEDE1 F800 00                    	smpsCall	MMBUBBLE_PSG1_p16
000EEDE4 F800 00                    	smpsCall	MMBUBBLE_PSG1_p17
000EEDE7 F800 00                    	smpsCall	MMBUBBLE_PSG1_p14
000EEDEA F800 00                    	smpsCall	MMBUBBLE_PSG1_p15
000EEDED F800 00                    	smpsCall	MMBUBBLE_PSG1_p16
000EEDF0 F800 00                    	smpsCall	MMBUBBLE_PSG1_p1a
000EEDF3 F6FF 9E                    	smpsJump	MMBUBBLE_PSG1
000EEDF6                            
000EEDF6                            MMBUBBLE_PSG2:
000EEDF6 F800 00                    	smpsCall	MMBUBBLE_PSG2_p0
000EEDF9 F800 00                    	smpsCall	MMBUBBLE_PSG2_p0
000EEDFC F800 00                    	smpsCall	MMBUBBLE_PSG2_p0
000EEDFF F800 00                    	smpsCall	MMBUBBLE_PSG2_p0
000EEE02 F800 00                    	smpsCall	MMBUBBLE_PSG2_p0
000EEE05 F800 00                    	smpsCall	MMBUBBLE_PSG2_p0
000EEE08 F800 00                    	smpsCall	MMBUBBLE_PSG2_p0
000EEE0B F800 00                    	smpsCall	MMBUBBLE_PSG2_p0
000EEE0E F800 00                    	smpsCall	MMBUBBLE_PSG2_p6
000EEE11 F800 00                    	smpsCall	MMBUBBLE_PSG2_p7
000EEE14 F800 00                    	smpsCall	MMBUBBLE_PSG2_p8
000EEE17 F800 00                    	smpsCall	MMBUBBLE_PSG2_p9
000EEE1A F800 00                    	smpsCall	MMBUBBLE_PSG2_pa
000EEE1D F800 00                    	smpsCall	MMBUBBLE_PSG2_p7
000EEE20 F800 00                    	smpsCall	MMBUBBLE_PSG2_p8
000EEE23 F800 00                    	smpsCall	MMBUBBLE_PSG2_p9
000EEE26 F800 00                    	smpsCall	MMBUBBLE_PSG2_pa
000EEE29 F800 00                    	smpsCall	MMBUBBLE_PSG2_p7
000EEE2C F800 00                    	smpsCall	MMBUBBLE_PSG2_pe
000EEE2F F800 00                    	smpsCall	MMBUBBLE_PSG2_pf
000EEE32 F800 00                    	smpsCall	MMBUBBLE_PSG2_p10
000EEE35 F800 00                    	smpsCall	MMBUBBLE_PSG2_p11
000EEE38 F800 00                    	smpsCall	MMBUBBLE_PSG2_p12
000EEE3B F800 00                    	smpsCall	MMBUBBLE_PSG2_p13
000EEE3E F800 00                    	smpsCall	MMBUBBLE_PSG2_p14
000EEE41 F800 00                    	smpsCall	MMBUBBLE_PSG2_p15
000EEE44 F800 00                    	smpsCall	MMBUBBLE_PSG2_p16
000EEE47 F800 00                    	smpsCall	MMBUBBLE_PSG2_p17
000EEE4A F800 00                    	smpsCall	MMBUBBLE_PSG2_p18
000EEE4D F800 00                    	smpsCall	MMBUBBLE_PSG2_p15
000EEE50 F800 00                    	smpsCall	MMBUBBLE_PSG2_p16
000EEE53 F800 00                    	smpsCall	MMBUBBLE_PSG2_p1a
000EEE56 F6FF 9E                    	smpsJump	MMBUBBLE_PSG2
000EEE59                            
000EEE59                            MMBUBBLE_PSG3:
000EEE59 F3E7                       	smpsPSGform	$E7
000EEE5B F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEE5E F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEE61 F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEE64 F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEE67 F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEE6A F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEE6D F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEE70 F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEE73 F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEE76 F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEE79 F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEE7C F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEE7F F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEE82 F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEE85 F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEE88 F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEE8B F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEE8E F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEE91 F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEE94 F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEE97 F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEE9A F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEE9D F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEEA0 F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEEA3 F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEEA6 F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEEA9 F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEEAC F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEEAF F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEEB2 F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEEB5 F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEEB8 F800 00                    	smpsCall	MMBUBBLE_PSG3_p0
000EEEBB F6FF 9C                    	smpsJump	MMBUBBLE_PSG3
000EEEBE                            
000EEEBE                            MMBUBBLE_DAC:
000EEEBE F800 00                    	smpsCall	MMBUBBLE_DAC_p0
000EEEC1 F800 00                    	smpsCall	MMBUBBLE_DAC_p1
000EEEC4 F800 00                    	smpsCall	MMBUBBLE_DAC_p1
000EEEC7 F800 00                    	smpsCall	MMBUBBLE_DAC_p3
000EEECA F800 00                    	smpsCall	MMBUBBLE_DAC_p1
000EEECD F800 00                    	smpsCall	MMBUBBLE_DAC_p1
000EEED0 F800 00                    	smpsCall	MMBUBBLE_DAC_p1
000EEED3 F800 00                    	smpsCall	MMBUBBLE_DAC_p5
000EEED6 F800 00                    	smpsCall	MMBUBBLE_DAC_p6
000EEED9 F800 00                    	smpsCall	MMBUBBLE_DAC_p6
000EEEDC F800 00                    	smpsCall	MMBUBBLE_DAC_p6
000EEEDF F800 00                    	smpsCall	MMBUBBLE_DAC_p6
000EEEE2 F800 00                    	smpsCall	MMBUBBLE_DAC_p6
000EEEE5 F800 00                    	smpsCall	MMBUBBLE_DAC_p6
000EEEE8 F800 00                    	smpsCall	MMBUBBLE_DAC_p6
000EEEEB F800 00                    	smpsCall	MMBUBBLE_DAC_pb
000EEEEE F800 00                    	smpsCall	MMBUBBLE_DAC_pc
000EEEF1 F800 00                    	smpsCall	MMBUBBLE_DAC_pd
000EEEF4 F800 00                    	smpsCall	MMBUBBLE_DAC_pc
000EEEF7 F800 00                    	smpsCall	MMBUBBLE_DAC_pd
000EEEFA F800 00                    	smpsCall	MMBUBBLE_DAC_pc
000EEEFD F800 00                    	smpsCall	MMBUBBLE_DAC_pd
000EEF00 F800 00                    	smpsCall	MMBUBBLE_DAC_pc
000EEF03 F800 00                    	smpsCall	MMBUBBLE_DAC_pb
000EEF06 F800 00                    	smpsCall	MMBUBBLE_DAC_pc
000EEF09 F800 00                    	smpsCall	MMBUBBLE_DAC_p15
000EEF0C F800 00                    	smpsCall	MMBUBBLE_DAC_pc
000EEF0F F800 00                    	smpsCall	MMBUBBLE_DAC_pc
000EEF12 F800 00                    	smpsCall	MMBUBBLE_DAC_pc
000EEF15 F800 00                    	smpsCall	MMBUBBLE_DAC_p15
000EEF18 F800 00                    	smpsCall	MMBUBBLE_DAC_pc
000EEF1B F800 00                    	smpsCall	MMBUBBLE_DAC_p1a
000EEF1E F6FF 9E                    	smpsJump	MMBUBBLE_DAC
000EEF21                            
000EEF21                            
000EEF21                            ; Pattern data for FM1
000EEF21                            MMBUBBLE_FM1_p0:
000EEF21 EF03                       	smpsFMvoice	$3
000EEF23 9908                       	dc.b		$99,$8
000EEF25 A0                         	dc.b		$a0
000EEF26 9C                         	dc.b		$9c
000EEF27 99                         	dc.b		$99
000EEF28 A0                         	dc.b		$a0
000EEF29 9C                         	dc.b		$9c
000EEF2A 99                         	dc.b		$99
000EEF2B A5                         	dc.b		$a5
000EEF2C E3                         	smpsReturn
000EEF2D                            
000EEF2D                            MMBUBBLE_FM1_p1:
000EEF2D A008                       	dc.b		$a0,$8
000EEF2F 9C                         	dc.b		$9c
000EEF30 99                         	dc.b		$99
000EEF31 A0                         	dc.b		$a0
000EEF32 9C                         	dc.b		$9c
000EEF33 99                         	dc.b		$99
000EEF34 9C                         	dc.b		$9c
000EEF35 A0                         	dc.b		$a0
000EEF36 E3                         	smpsReturn
000EEF37                            
000EEF37                            MMBUBBLE_FM1_p2:
000EEF37 9408                       	dc.b		$94,$8
000EEF39 9E                         	dc.b		$9e
000EEF3A 9B                         	dc.b		$9b
000EEF3B 94                         	dc.b		$94
000EEF3C 9E                         	dc.b		$9e
000EEF3D 9B                         	dc.b		$9b
000EEF3E 98                         	dc.b		$98
000EEF3F A0                         	dc.b		$a0
000EEF40 E3                         	smpsReturn
000EEF41                            
000EEF41                            MMBUBBLE_FM1_p3:
000EEF41 9E08                       	dc.b		$9e,$8
000EEF43 9B                         	dc.b		$9b
000EEF44 94                         	dc.b		$94
000EEF45 9E                         	dc.b		$9e
000EEF46 9B                         	dc.b		$9b
000EEF47 98                         	dc.b		$98
000EEF48 9B                         	dc.b		$9b
000EEF49 9E                         	dc.b		$9e
000EEF4A E3                         	smpsReturn
000EEF4B                            
000EEF4B                            MMBUBBLE_FM1_p6:
000EEF4B 9910                       	dc.b		$99,$10
000EEF4D 9C08                       	dc.b		$9c,$8
000EEF4F A0                         	dc.b		$a0
000EEF50 A5                         	dc.b		$a5
000EEF51 A010                       	dc.b		$a0,$10
000EEF53 9C08                       	dc.b		$9c,$8
000EEF55 E3                         	smpsReturn
000EEF56                            
000EEF56                            MMBUBBLE_FM1_p7:
000EEF56 9910                       	dc.b		$99,$10
000EEF58 08                         	dc.b		$8
000EEF59 9C10                       	dc.b		$9c,$10
000EEF5B A508                       	dc.b		$a5,$8
000EEF5D 9C                         	dc.b		$9c
000EEF5E 99                         	dc.b		$99
000EEF5F E3                         	smpsReturn
000EEF60                            
000EEF60                            MMBUBBLE_FM1_p8:
000EEF60 9410                       	dc.b		$94,$10
000EEF62 9808                       	dc.b		$98,$8
000EEF64 9B                         	dc.b		$9b
000EEF65 A0                         	dc.b		$a0
000EEF66 9B10                       	dc.b		$9b,$10
000EEF68 9808                       	dc.b		$98,$8
000EEF6A E3                         	smpsReturn
000EEF6B                            
000EEF6B                            MMBUBBLE_FM1_p9:
000EEF6B 9410                       	dc.b		$94,$10
000EEF6D 08                         	dc.b		$8
000EEF6E 9810                       	dc.b		$98,$10
000EEF70 A008                       	dc.b		$a0,$8
000EEF72 94                         	dc.b		$94
000EEF73 98                         	dc.b		$98
000EEF74 E3                         	smpsReturn
000EEF75                            
000EEF75                            MMBUBBLE_FM1_pe:
000EEF75 9708                       	dc.b		$97,$8
000EEF77 9E                         	dc.b		$9e
000EEF78 9B                         	dc.b		$9b
000EEF79 97                         	dc.b		$97
000EEF7A 9E                         	dc.b		$9e
000EEF7B 9B                         	dc.b		$9b
000EEF7C 97                         	dc.b		$97
000EEF7D A3                         	dc.b		$a3
000EEF7E E3                         	smpsReturn
000EEF7F                            
000EEF7F                            MMBUBBLE_FM1_pf:
000EEF7F 9E08                       	dc.b		$9e,$8
000EEF81 9B                         	dc.b		$9b
000EEF82 97                         	dc.b		$97
000EEF83 9E                         	dc.b		$9e
000EEF84 9B                         	dc.b		$9b
000EEF85 97                         	dc.b		$97
000EEF86 9B                         	dc.b		$9b
000EEF87 9E                         	dc.b		$9e
000EEF88 E3                         	smpsReturn
000EEF89                            
000EEF89                            MMBUBBLE_FM1_p10:
000EEF89 9508                       	dc.b		$95,$8
000EEF8B 9C                         	dc.b		$9c
000EEF8C 99                         	dc.b		$99
000EEF8D 95                         	dc.b		$95
000EEF8E 9C                         	dc.b		$9c
000EEF8F 99                         	dc.b		$99
000EEF90 95                         	dc.b		$95
000EEF91 A1                         	dc.b		$a1
000EEF92 E3                         	smpsReturn
000EEF93                            
000EEF93                            MMBUBBLE_FM1_p11:
000EEF93 9C08                       	dc.b		$9c,$8
000EEF95 99                         	dc.b		$99
000EEF96 95                         	dc.b		$95
000EEF97 9C                         	dc.b		$9c
000EEF98 99                         	dc.b		$99
000EEF99 95                         	dc.b		$95
000EEF9A 99                         	dc.b		$99
000EEF9B 9C                         	dc.b		$9c
000EEF9C E3                         	smpsReturn
000EEF9D                            
000EEF9D                            MMBUBBLE_FM1_p14:
000EEF9D 9908                       	dc.b		$99,$8
000EEF9F 9C                         	dc.b		$9c
000EEFA0 9B                         	dc.b		$9b
000EEFA1 99                         	dc.b		$99
000EEFA2 9710                       	dc.b		$97,$10
000EEFA4 08                         	dc.b		$8
000EEFA5 95                         	dc.b		$95
000EEFA6 E3                         	smpsReturn
000EEFA7                            
000EEFA7                            MMBUBBLE_FM1_p15:
000EEFA7 A108                       	dc.b		$a1,$8
000EEFA9 97                         	dc.b		$97
000EEFAA 9710                       	dc.b		$97,$10
000EEFAC A308                       	dc.b		$a3,$8
000EEFAE 95                         	dc.b		$95
000EEFAF 99                         	dc.b		$99
000EEFB0 9B                         	dc.b		$9b
000EEFB1 E3                         	smpsReturn
000EEFB2                            
000EEFB2                            MMBUBBLE_FM1_p16:
000EEFB2 9508                       	dc.b		$95,$8
000EEFB4 95                         	dc.b		$95
000EEFB5 95                         	dc.b		$95
000EEFB6 95                         	dc.b		$95
000EEFB7 95                         	dc.b		$95
000EEFB8 A1                         	dc.b		$a1
000EEFB9 95                         	dc.b		$95
000EEFBA 95                         	dc.b		$95
000EEFBB E3                         	smpsReturn
000EEFBC                            
000EEFBC                            MMBUBBLE_FM1_p17:
000EEFBC 9808                       	dc.b		$98,$8
000EEFBE 98                         	dc.b		$98
000EEFBF 98                         	dc.b		$98
000EEFC0 98                         	dc.b		$98
000EEFC1 98                         	dc.b		$98
000EEFC2 98                         	dc.b		$98
000EEFC3 A4                         	dc.b		$a4
000EEFC4 98                         	dc.b		$98
000EEFC5 E3                         	smpsReturn
000EEFC6                            
000EEFC6                            MMBUBBLE_FM1_p19:
000EEFC6 9508                       	dc.b		$95,$8
000EEFC8 99                         	dc.b		$99
000EEFC9 9C                         	dc.b		$9c
000EEFCA 95                         	dc.b		$95
000EEFCB 99                         	dc.b		$99
000EEFCC 9C                         	dc.b		$9c
000EEFCD 95                         	dc.b		$95
000EEFCE 99                         	dc.b		$99
000EEFCF E3                         	smpsReturn
000EEFD0                            
000EEFD0                            MMBUBBLE_FM1_p1a:
000EEFD0 9C08                       	dc.b		$9c,$8
000EEFD2 94                         	dc.b		$94
000EEFD3 98                         	dc.b		$98
000EEFD4 9B                         	dc.b		$9b
000EEFD5 94                         	dc.b		$94
000EEFD6 98                         	dc.b		$98
000EEFD7 9B                         	dc.b		$9b
000EEFD8 A0                         	dc.b		$a0
000EEFD9 E3                         	smpsReturn
000EEFDA                            
000EEFDA                            ; Pattern data for FM2
000EEFDA                            MMBUBBLE_FM2_p0:
000EEFDA EF01                       	smpsFMvoice	$1
000EEFDC B820                       	dc.b		$b8,$20
000EEFDE B910                       	dc.b		$b9,$10
000EEFE0 BB08                       	dc.b		$bb,$8
000EEFE2 B8                         	dc.b		$b8
000EEFE3 E3                         	smpsReturn
000EEFE4                            
000EEFE4                            MMBUBBLE_FM2_p1:
000EEFE4 E740                       	dc.b		$e7,$40
000EEFE6 E3                         	smpsReturn
000EEFE7                            
000EEFE7                            MMBUBBLE_FM2_p2:
000EEFE7 EF01                       	smpsFMvoice	$1
000EEFE9 B620                       	dc.b		$b6,$20
000EEFEB 10                         	dc.b		$10
000EEFEC B8                         	dc.b		$b8
000EEFED E3                         	smpsReturn
000EEFEE                            
000EEFEE                            MMBUBBLE_FM2_p3:
000EEFEE C408                       	dc.b		$c4,$8
000EEFF0 C4                         	dc.b		$c4
000EEFF1 E604                       	smpsaltervol	4
000EEFF3 C4                         	dc.b		$c4
000EEFF4 E604                       	smpsaltervol	4
000EEFF6 C4                         	dc.b		$c4
000EEFF7 E6F8                       	smpsaltervol	-8
000EEFF9 C4                         	dc.b		$c4
000EEFFA C4                         	dc.b		$c4
000EEFFB E604                       	smpsaltervol	4
000EEFFD C4                         	dc.b		$c4
000EEFFE E604                       	smpsaltervol	4
000EF000 C4                         	dc.b		$c4
000EF001 E6F8                       	smpsaltervol	-8
000EF003 E3                         	smpsReturn
000EF004                            
000EF004                            MMBUBBLE_FM2_p6:
000EF004 BD18                       	dc.b		$bd,$18
000EF006 10                         	dc.b		$10
000EF007 BB                         	dc.b		$bb
000EF008 BD08                       	dc.b		$bd,$8
000EF00A E3                         	smpsReturn
000EF00B                            
000EF00B                            MMBUBBLE_FM2_p8:
000EF00B BF18                       	dc.b		$bf,$18
000EF00D 10                         	dc.b		$10
000EF00E BD                         	dc.b		$bd
000EF00F BF08                       	dc.b		$bf,$8
000EF011 E3                         	smpsReturn
000EF012                            
000EF012                            MMBUBBLE_FM2_pb:
000EF012 BC18                       	dc.b		$bc,$18
000EF014 BF10                       	dc.b		$bf,$10
000EF016 BC                         	dc.b		$bc
000EF017 BF08                       	dc.b		$bf,$8
000EF019 E3                         	smpsReturn
000EF01A                            
000EF01A                            MMBUBBLE_FM2_pc:
000EF01A C020                       	dc.b		$c0,$20
000EF01C 08                         	dc.b		$8
000EF01D C210                       	dc.b		$c2,$10
000EF01F C408                       	dc.b		$c4,$8
000EF021 E3                         	smpsReturn
000EF022                            
000EF022                            MMBUBBLE_FM2_pd:
000EF022 E708                       	dc.b		$e7,$8
000EF024 C210                       	dc.b		$c2,$10
000EF026 C0                         	dc.b		$c0
000EF027 C008                       	dc.b		$c0,$8
000EF029 C210                       	dc.b		$c2,$10
000EF02B E3                         	smpsReturn
000EF02C                            
000EF02C                            MMBUBBLE_FM2_pe:
000EF02C BF08                       	dc.b		$bf,$8
000EF02E C010                       	dc.b		$c0,$10
000EF030 BF                         	dc.b		$bf
000EF031 BD                         	dc.b		$bd
000EF032 BB08                       	dc.b		$bb,$8
000EF034 E3                         	smpsReturn
000EF035                            
000EF035                            MMBUBBLE_FM2_pf:
000EF035 E718                       	dc.b		$e7,$18
000EF037 C7                         	dc.b		$c7
000EF038 C510                       	dc.b		$c5,$10
000EF03A E3                         	smpsReturn
000EF03B                            
000EF03B                            MMBUBBLE_FM2_p10:
000EF03B C420                       	dc.b		$c4,$20
000EF03D 08                         	dc.b		$8
000EF03E C2                         	dc.b		$c2
000EF03F C0                         	dc.b		$c0
000EF040 C7                         	dc.b		$c7
000EF041 E3                         	smpsReturn
000EF042                            
000EF042                            MMBUBBLE_FM2_p11:
000EF042 E708                       	dc.b		$e7,$8
000EF044 C510                       	dc.b		$c5,$10
000EF046 C418                       	dc.b		$c4,$18
000EF048 C908                       	dc.b		$c9,$8
000EF04A C8                         	dc.b		$c8
000EF04B E3                         	smpsReturn
000EF04C                            
000EF04C                            MMBUBBLE_FM2_p12:
000EF04C E728                       	dc.b		$e7,$28
000EF04E C408                       	dc.b		$c4,$8
000EF050 C8                         	dc.b		$c8
000EF051 CB                         	dc.b		$cb
000EF052 E3                         	smpsReturn
000EF053                            
000EF053                            MMBUBBLE_FM2_p13:
000EF053 E738                       	dc.b		$e7,$38
000EF055 8008                       	dc.b		$80,$8
000EF057 E3                         	smpsReturn
000EF058                            
000EF058                            MMBUBBLE_FM2_p14:
000EF058 EF01                       	smpsFMvoice	$1
000EF05A C418                       	dc.b		$c4,$18
000EF05C C208                       	dc.b		$c2,$8
000EF05E 18                         	dc.b		$18
000EF05F C008                       	dc.b		$c0,$8
000EF061 E3                         	smpsReturn
000EF062                            
000EF062                            MMBUBBLE_FM2_p15:
000EF062 E708                       	dc.b		$e7,$8
000EF064 C2                         	dc.b		$c2
000EF065 C218                       	dc.b		$c2,$18
000EF067 BD08                       	dc.b		$bd,$8
000EF069 C0                         	dc.b		$c0
000EF06A C2                         	dc.b		$c2
000EF06B E3                         	smpsReturn
000EF06C                            
000EF06C                            MMBUBBLE_FM2_p16:
000EF06C C410                       	dc.b		$c4,$10
000EF06E C208                       	dc.b		$c2,$8
000EF070 C710                       	dc.b		$c7,$10
000EF072 C5                         	dc.b		$c5
000EF073 C408                       	dc.b		$c4,$8
000EF075 E3                         	smpsReturn
000EF076                            
000EF076                            MMBUBBLE_FM2_p17:
000EF076 E708                       	dc.b		$e7,$8
000EF078 C210                       	dc.b		$c2,$10
000EF07A C0                         	dc.b		$c0
000EF07B BF18                       	dc.b		$bf,$18
000EF07D E3                         	smpsReturn
000EF07E                            
000EF07E                            MMBUBBLE_FM2_p1a:
000EF07E E708                       	dc.b		$e7,$8
000EF080 C810                       	dc.b		$c8,$10
000EF082 CB                         	dc.b		$cb
000EF083 CE                         	dc.b		$ce
000EF084 D008                       	dc.b		$d0,$8
000EF086 E3                         	smpsReturn
000EF087                            
000EF087                            ; Pattern data for FM3
000EF087                            MMBUBBLE_FM3_p0:
000EF087 EF01                       	smpsFMvoice	$1
000EF089 B420                       	dc.b		$b4,$20
000EF08B 10                         	dc.b		$10
000EF08C 08                         	dc.b		$8
000EF08D B4                         	dc.b		$b4
000EF08E E3                         	smpsReturn
000EF08F                            
000EF08F                            MMBUBBLE_FM3_p1:
000EF08F E740                       	dc.b		$e7,$40
000EF091 E3                         	smpsReturn
000EF092                            
000EF092                            MMBUBBLE_FM3_p2:
000EF092 EF01                       	smpsFMvoice	$1
000EF094 B320                       	dc.b		$b3,$20
000EF096 10                         	dc.b		$10
000EF097 B3                         	dc.b		$b3
000EF098 E3                         	smpsReturn
000EF099                            
000EF099                            MMBUBBLE_FM3_p3:
000EF099 BF08                       	dc.b		$bf,$8
000EF09B BF                         	dc.b		$bf
000EF09C E604                       	smpsaltervol	4
000EF09E BF                         	dc.b		$bf
000EF09F E604                       	smpsaltervol	4
000EF0A1 BF                         	dc.b		$bf
000EF0A2 E6F8                       	smpsaltervol	-8
000EF0A4 BF                         	dc.b		$bf
000EF0A5 BF                         	dc.b		$bf
000EF0A6 E604                       	smpsaltervol	4
000EF0A8 BF                         	dc.b		$bf
000EF0A9 E604                       	smpsaltervol	4
000EF0AB BF                         	dc.b		$bf
000EF0AC E6F8                       	smpsaltervol	-8
000EF0AE E3                         	smpsReturn
000EF0AF                            
000EF0AF                            MMBUBBLE_FM3_p6:
000EF0AF B818                       	dc.b		$b8,$18
000EF0B1 10                         	dc.b		$10
000EF0B2 B8                         	dc.b		$b8
000EF0B3 B808                       	dc.b		$b8,$8
000EF0B5 E3                         	smpsReturn
000EF0B6                            
000EF0B6                            MMBUBBLE_FM3_p8:
000EF0B6 BC18                       	dc.b		$bc,$18
000EF0B8 10                         	dc.b		$10
000EF0B9 B8                         	dc.b		$b8
000EF0BA BC08                       	dc.b		$bc,$8
000EF0BC E3                         	smpsReturn
000EF0BD                            
000EF0BD                            MMBUBBLE_FM3_pb:
000EF0BD B818                       	dc.b		$b8,$18
000EF0BF BC10                       	dc.b		$bc,$10
000EF0C1 B8                         	dc.b		$b8
000EF0C2 BC08                       	dc.b		$bc,$8
000EF0C4 E3                         	smpsReturn
000EF0C5                            
000EF0C5                            MMBUBBLE_FM3_pc:
000EF0C5 BD20                       	dc.b		$bd,$20
000EF0C7 08                         	dc.b		$8
000EF0C8 BF10                       	dc.b		$bf,$10
000EF0CA C008                       	dc.b		$c0,$8
000EF0CC E3                         	smpsReturn
000EF0CD                            
000EF0CD                            MMBUBBLE_FM3_pd:
000EF0CD E708                       	dc.b		$e7,$8
000EF0CF BF10                       	dc.b		$bf,$10
000EF0D1 BD                         	dc.b		$bd
000EF0D2 BD08                       	dc.b		$bd,$8
000EF0D4 BF10                       	dc.b		$bf,$10
000EF0D6 E3                         	smpsReturn
000EF0D7                            
000EF0D7                            MMBUBBLE_FM3_pe:
000EF0D7 BB08                       	dc.b		$bb,$8
000EF0D9 BD10                       	dc.b		$bd,$10
000EF0DB BB                         	dc.b		$bb
000EF0DC B8                         	dc.b		$b8
000EF0DD B608                       	dc.b		$b6,$8
000EF0DF E3                         	smpsReturn
000EF0E0                            
000EF0E0                            MMBUBBLE_FM3_pf:
000EF0E0 E718                       	dc.b		$e7,$18
000EF0E2 C2                         	dc.b		$c2
000EF0E3 C210                       	dc.b		$c2,$10
000EF0E5 E3                         	smpsReturn
000EF0E6                            
000EF0E6                            MMBUBBLE_FM3_p10:
000EF0E6 C020                       	dc.b		$c0,$20
000EF0E8 08                         	dc.b		$8
000EF0E9 BF                         	dc.b		$bf
000EF0EA BD                         	dc.b		$bd
000EF0EB C4                         	dc.b		$c4
000EF0EC E3                         	smpsReturn
000EF0ED                            
000EF0ED                            MMBUBBLE_FM3_p11:
000EF0ED E708                       	dc.b		$e7,$8
000EF0EF C210                       	dc.b		$c2,$10
000EF0F1 C018                       	dc.b		$c0,$18
000EF0F3 C408                       	dc.b		$c4,$8
000EF0F5 C4                         	dc.b		$c4
000EF0F6 E3                         	smpsReturn
000EF0F7                            
000EF0F7                            MMBUBBLE_FM3_p12:
000EF0F7 E728                       	dc.b		$e7,$28
000EF0F9 BF08                       	dc.b		$bf,$8
000EF0FB C4                         	dc.b		$c4
000EF0FC C8                         	dc.b		$c8
000EF0FD E3                         	smpsReturn
000EF0FE                            
000EF0FE                            MMBUBBLE_FM3_p14:
000EF0FE EF01                       	smpsFMvoice	$1
000EF100 C018                       	dc.b		$c0,$18
000EF102 BF08                       	dc.b		$bf,$8
000EF104 18                         	dc.b		$18
000EF105 BD08                       	dc.b		$bd,$8
000EF107 E3                         	smpsReturn
000EF108                            
000EF108                            MMBUBBLE_FM3_p15:
000EF108 E708                       	dc.b		$e7,$8
000EF10A BF                         	dc.b		$bf
000EF10B BF18                       	dc.b		$bf,$18
000EF10D B908                       	dc.b		$b9,$8
000EF10F BD                         	dc.b		$bd
000EF110 BF                         	dc.b		$bf
000EF111 E3                         	smpsReturn
000EF112                            
000EF112                            MMBUBBLE_FM3_p16:
000EF112 C010                       	dc.b		$c0,$10
000EF114 BF08                       	dc.b		$bf,$8
000EF116 C210                       	dc.b		$c2,$10
000EF118 C0                         	dc.b		$c0
000EF119 BF08                       	dc.b		$bf,$8
000EF11B E3                         	smpsReturn
000EF11C                            
000EF11C                            MMBUBBLE_FM3_p17:
000EF11C E708                       	dc.b		$e7,$8
000EF11E BF10                       	dc.b		$bf,$10
000EF120 BC                         	dc.b		$bc
000EF121 BC18                       	dc.b		$bc,$18
000EF123 E3                         	smpsReturn
000EF124                            
000EF124                            MMBUBBLE_FM3_p1a:
000EF124 E708                       	dc.b		$e7,$8
000EF126 C210                       	dc.b		$c2,$10
000EF128 C8                         	dc.b		$c8
000EF129 C8                         	dc.b		$c8
000EF12A CB08                       	dc.b		$cb,$8
000EF12C E3                         	smpsReturn
000EF12D                            
000EF12D                            ; Pattern data for FM4
000EF12D                            MMBUBBLE_FM4_p0:
000EF12D E708                       	dc.b		$e7,$8
000EF12F EF01                       	smpsFMvoice	$1
000EF131 B820                       	dc.b		$b8,$20
000EF133 B910                       	dc.b		$b9,$10
000EF135 BB08                       	dc.b		$bb,$8
000EF137 E3                         	smpsReturn
000EF138                            
000EF138                            MMBUBBLE_FM4_p1:
000EF138 B840                       	dc.b		$b8,$40
000EF13A E3                         	smpsReturn
000EF13B                            
000EF13B                            MMBUBBLE_FM4_p2:
000EF13B E708                       	dc.b		$e7,$8
000EF13D B620                       	dc.b		$b6,$20
000EF13F 10                         	dc.b		$10
000EF140 B808                       	dc.b		$b8,$8
000EF142 E3                         	smpsReturn
000EF143                            
000EF143                            MMBUBBLE_FM4_p3:
000EF143 E708                       	dc.b		$e7,$8
000EF145 C4                         	dc.b		$c4
000EF146 C4                         	dc.b		$c4
000EF147 E604                       	smpsaltervol	4
000EF149 C4                         	dc.b		$c4
000EF14A E604                       	smpsaltervol	4
000EF14C C4                         	dc.b		$c4
000EF14D E6F8                       	smpsaltervol	-8
000EF14F C4                         	dc.b		$c4
000EF150 C4                         	dc.b		$c4
000EF151 E604                       	smpsaltervol	4
000EF153 C4                         	dc.b		$c4
000EF154 E3                         	smpsReturn
000EF155                            
000EF155                            MMBUBBLE_FM4_p4:
000EF155 E604                       	smpsaltervol	4
000EF157 C408                       	dc.b		$c4,$8
000EF159 E6F8                       	smpsaltervol	-8
000EF15B B820                       	dc.b		$b8,$20
000EF15D B910                       	dc.b		$b9,$10
000EF15F BB08                       	dc.b		$bb,$8
000EF161 E3                         	smpsReturn
000EF162                            
000EF162                            MMBUBBLE_FM4_p6:
000EF162 EF00                       	smpsFMvoice	$0
000EF164 BD18                       	dc.b		$bd,$18
000EF166 10                         	dc.b		$10
000EF167 BB                         	dc.b		$bb
000EF168 BD08                       	dc.b		$bd,$8
000EF16A E3                         	smpsReturn
000EF16B                            
000EF16B                            MMBUBBLE_FM4_p8:
000EF16B BF18                       	dc.b		$bf,$18
000EF16D 10                         	dc.b		$10
000EF16E BD                         	dc.b		$bd
000EF16F BF08                       	dc.b		$bf,$8
000EF171 E3                         	smpsReturn
000EF172                            
000EF172                            MMBUBBLE_FM4_pb:
000EF172 BC18                       	dc.b		$bc,$18
000EF174 BF10                       	dc.b		$bf,$10
000EF176 BC                         	dc.b		$bc
000EF177 BF08                       	dc.b		$bf,$8
000EF179 E3                         	smpsReturn
000EF17A                            
000EF17A                            MMBUBBLE_FM4_pc:
000EF17A 8008                       	dc.b		$80,$8
000EF17C EF01                       	smpsFMvoice	$1
000EF17E C020                       	dc.b		$c0,$20
000EF180 08                         	dc.b		$8
000EF181 C210                       	dc.b		$c2,$10
000EF183 E3                         	smpsReturn
000EF184                            
000EF184                            MMBUBBLE_FM4_pd:
000EF184 C410                       	dc.b		$c4,$10
000EF186 C2                         	dc.b		$c2
000EF187 C0                         	dc.b		$c0
000EF188 C008                       	dc.b		$c0,$8
000EF18A C2                         	dc.b		$c2
000EF18B E3                         	smpsReturn
000EF18C                            
000EF18C                            MMBUBBLE_FM4_pe:
000EF18C E708                       	dc.b		$e7,$8
000EF18E BF                         	dc.b		$bf
000EF18F C010                       	dc.b		$c0,$10
000EF191 BF                         	dc.b		$bf
000EF192 BD                         	dc.b		$bd
000EF193 E3                         	smpsReturn
000EF194                            
000EF194                            MMBUBBLE_FM4_pf:
000EF194 BB20                       	dc.b		$bb,$20
000EF196 C718                       	dc.b		$c7,$18
000EF198 C508                       	dc.b		$c5,$8
000EF19A E3                         	smpsReturn
000EF19B                            
000EF19B                            MMBUBBLE_FM4_p10:
000EF19B E708                       	dc.b		$e7,$8
000EF19D C420                       	dc.b		$c4,$20
000EF19F 08                         	dc.b		$8
000EF1A0 C2                         	dc.b		$c2
000EF1A1 C0                         	dc.b		$c0
000EF1A2 E3                         	smpsReturn
000EF1A3                            
000EF1A3                            MMBUBBLE_FM4_p11:
000EF1A3 C710                       	dc.b		$c7,$10
000EF1A5 C5                         	dc.b		$c5
000EF1A6 C418                       	dc.b		$c4,$18
000EF1A8 C908                       	dc.b		$c9,$8
000EF1AA E3                         	smpsReturn
000EF1AB                            
000EF1AB                            MMBUBBLE_FM4_p12:
000EF1AB C830                       	dc.b		$c8,$30
000EF1AD C408                       	dc.b		$c4,$8
000EF1AF C8                         	dc.b		$c8
000EF1B0 E3                         	smpsReturn
000EF1B1                            
000EF1B1                            MMBUBBLE_FM4_p13:
000EF1B1 CB40                       	dc.b		$cb,$40
000EF1B3 E3                         	smpsReturn
000EF1B4                            
000EF1B4                            MMBUBBLE_FM4_p14:
000EF1B4 EF00                       	smpsFMvoice	$0
000EF1B6 C418                       	dc.b		$c4,$18
000EF1B8 C208                       	dc.b		$c2,$8
000EF1BA 18                         	dc.b		$18
000EF1BB C008                       	dc.b		$c0,$8
000EF1BD E3                         	smpsReturn
000EF1BE                            
000EF1BE                            MMBUBBLE_FM4_p15:
000EF1BE E708                       	dc.b		$e7,$8
000EF1C0 C2                         	dc.b		$c2
000EF1C1 C218                       	dc.b		$c2,$18
000EF1C3 BD08                       	dc.b		$bd,$8
000EF1C5 C0                         	dc.b		$c0
000EF1C6 C2                         	dc.b		$c2
000EF1C7 E3                         	smpsReturn
000EF1C8                            
000EF1C8                            MMBUBBLE_FM4_p16:
000EF1C8 C410                       	dc.b		$c4,$10
000EF1CA C208                       	dc.b		$c2,$8
000EF1CC C710                       	dc.b		$c7,$10
000EF1CE C5                         	dc.b		$c5
000EF1CF C408                       	dc.b		$c4,$8
000EF1D1 E3                         	smpsReturn
000EF1D2                            
000EF1D2                            MMBUBBLE_FM4_p17:
000EF1D2 E708                       	dc.b		$e7,$8
000EF1D4 C210                       	dc.b		$c2,$10
000EF1D6 C0                         	dc.b		$c0
000EF1D7 BF18                       	dc.b		$bf,$18
000EF1D9 E3                         	smpsReturn
000EF1DA                            
000EF1DA                            MMBUBBLE_FM4_p1a:
000EF1DA E708                       	dc.b		$e7,$8
000EF1DC C810                       	dc.b		$c8,$10
000EF1DE CB                         	dc.b		$cb
000EF1DF CE                         	dc.b		$ce
000EF1E0 D008                       	dc.b		$d0,$8
000EF1E2 E3                         	smpsReturn
000EF1E3                            
000EF1E3                            ; Pattern data for FM5
000EF1E3                            MMBUBBLE_FM5_p0:
000EF1E3 EF02                       	smpsFMvoice	$2
000EF1E5 B820                       	dc.b		$b8,$20
000EF1E7 B910                       	dc.b		$b9,$10
000EF1E9 BB08                       	dc.b		$bb,$8
000EF1EB B8                         	dc.b		$b8
000EF1EC E3                         	smpsReturn
000EF1ED                            
000EF1ED                            MMBUBBLE_FM5_p1:
000EF1ED E740                       	dc.b		$e7,$40
000EF1EF E3                         	smpsReturn
000EF1F0                            
000EF1F0                            MMBUBBLE_FM5_p2:
000EF1F0 EF02                       	smpsFMvoice	$2
000EF1F2 B620                       	dc.b		$b6,$20
000EF1F4 10                         	dc.b		$10
000EF1F5 B8                         	dc.b		$b8
000EF1F6 E3                         	smpsReturn
000EF1F7                            
000EF1F7                            MMBUBBLE_FM5_p3:
000EF1F7 C408                       	dc.b		$c4,$8
000EF1F9 C4                         	dc.b		$c4
000EF1FA C4                         	dc.b		$c4
000EF1FB C4                         	dc.b		$c4
000EF1FC C4                         	dc.b		$c4
000EF1FD C4                         	dc.b		$c4
000EF1FE C4                         	dc.b		$c4
000EF1FF C4                         	dc.b		$c4
000EF200 E3                         	smpsReturn
000EF201                            
000EF201                            MMBUBBLE_FM5_p6:
000EF201 EF00                       	smpsFMvoice	$0
000EF203 B818                       	dc.b		$b8,$18
000EF205 10                         	dc.b		$10
000EF206 B8                         	dc.b		$b8
000EF207 B808                       	dc.b		$b8,$8
000EF209 E3                         	smpsReturn
000EF20A                            
000EF20A                            MMBUBBLE_FM5_p8:
000EF20A BC18                       	dc.b		$bc,$18
000EF20C 10                         	dc.b		$10
000EF20D B8                         	dc.b		$b8
000EF20E BC08                       	dc.b		$bc,$8
000EF210 E3                         	smpsReturn
000EF211                            
000EF211                            MMBUBBLE_FM5_pb:
000EF211 B818                       	dc.b		$b8,$18
000EF213 BC10                       	dc.b		$bc,$10
000EF215 B8                         	dc.b		$b8
000EF216 BC08                       	dc.b		$bc,$8
000EF218 E3                         	smpsReturn
000EF219                            
000EF219                            MMBUBBLE_FM5_pc:
000EF219 EF02                       	smpsFMvoice	$2
000EF21B C020                       	dc.b		$c0,$20
000EF21D 08                         	dc.b		$8
000EF21E C210                       	dc.b		$c2,$10
000EF220 C408                       	dc.b		$c4,$8
000EF222 E3                         	smpsReturn
000EF223                            
000EF223                            MMBUBBLE_FM5_pd:
000EF223 E708                       	dc.b		$e7,$8
000EF225 C210                       	dc.b		$c2,$10
000EF227 C0                         	dc.b		$c0
000EF228 C008                       	dc.b		$c0,$8
000EF22A C210                       	dc.b		$c2,$10
000EF22C E3                         	smpsReturn
000EF22D                            
000EF22D                            MMBUBBLE_FM5_pe:
000EF22D BF08                       	dc.b		$bf,$8
000EF22F C010                       	dc.b		$c0,$10
000EF231 BF                         	dc.b		$bf
000EF232 BD                         	dc.b		$bd
000EF233 BB08                       	dc.b		$bb,$8
000EF235 E3                         	smpsReturn
000EF236                            
000EF236                            MMBUBBLE_FM5_pf:
000EF236 E718                       	dc.b		$e7,$18
000EF238 C7                         	dc.b		$c7
000EF239 C510                       	dc.b		$c5,$10
000EF23B E3                         	smpsReturn
000EF23C                            
000EF23C                            MMBUBBLE_FM5_p10:
000EF23C C420                       	dc.b		$c4,$20
000EF23E 08                         	dc.b		$8
000EF23F C2                         	dc.b		$c2
000EF240 C0                         	dc.b		$c0
000EF241 C7                         	dc.b		$c7
000EF242 E3                         	smpsReturn
000EF243                            
000EF243                            MMBUBBLE_FM5_p11:
000EF243 E708                       	dc.b		$e7,$8
000EF245 C510                       	dc.b		$c5,$10
000EF247 C418                       	dc.b		$c4,$18
000EF249 C908                       	dc.b		$c9,$8
000EF24B C8                         	dc.b		$c8
000EF24C E3                         	smpsReturn
000EF24D                            
000EF24D                            MMBUBBLE_FM5_p12:
000EF24D E728                       	dc.b		$e7,$28
000EF24F C408                       	dc.b		$c4,$8
000EF251 C8                         	dc.b		$c8
000EF252 CB                         	dc.b		$cb
000EF253 E3                         	smpsReturn
000EF254                            
000EF254                            MMBUBBLE_FM5_p14:
000EF254 EF00                       	smpsFMvoice	$0
000EF256 C018                       	dc.b		$c0,$18
000EF258 BF08                       	dc.b		$bf,$8
000EF25A 18                         	dc.b		$18
000EF25B BD08                       	dc.b		$bd,$8
000EF25D E3                         	smpsReturn
000EF25E                            
000EF25E                            MMBUBBLE_FM5_p15:
000EF25E E708                       	dc.b		$e7,$8
000EF260 BF                         	dc.b		$bf
000EF261 BF18                       	dc.b		$bf,$18
000EF263 B908                       	dc.b		$b9,$8
000EF265 BD                         	dc.b		$bd
000EF266 BF                         	dc.b		$bf
000EF267 E3                         	smpsReturn
000EF268                            
000EF268                            MMBUBBLE_FM5_p16:
000EF268 C010                       	dc.b		$c0,$10
000EF26A BF08                       	dc.b		$bf,$8
000EF26C C210                       	dc.b		$c2,$10
000EF26E C0                         	dc.b		$c0
000EF26F BF08                       	dc.b		$bf,$8
000EF271 E3                         	smpsReturn
000EF272                            
000EF272                            MMBUBBLE_FM5_p17:
000EF272 E708                       	dc.b		$e7,$8
000EF274 BF10                       	dc.b		$bf,$10
000EF276 BC                         	dc.b		$bc
000EF277 BC18                       	dc.b		$bc,$18
000EF279 E3                         	smpsReturn
000EF27A                            
000EF27A                            MMBUBBLE_FM5_p1a:
000EF27A E708                       	dc.b		$e7,$8
000EF27C C210                       	dc.b		$c2,$10
000EF27E C8                         	dc.b		$c8
000EF27F C8                         	dc.b		$c8
000EF280 CB08                       	dc.b		$cb,$8
000EF282 E3                         	smpsReturn
000EF283                            
000EF283                            ; Pattern data for PSG1
000EF283                            MMBUBBLE_PSG1_p0:
000EF283 F501                       	smpsPSGvoice	$1
000EF285 B108                       	dc.b		$b1,$8
000EF287 B4                         	dc.b		$b4
000EF288 B8                         	dc.b		$b8
000EF289 B1                         	dc.b		$b1
000EF28A B4                         	dc.b		$b4
000EF28B B8                         	dc.b		$b8
000EF28C B1                         	dc.b		$b1
000EF28D B4                         	dc.b		$b4
000EF28E E3                         	smpsReturn
000EF28F                            
000EF28F                            MMBUBBLE_PSG1_p2:
000EF28F AC08                       	dc.b		$ac,$8
000EF291 B0                         	dc.b		$b0
000EF292 B3                         	dc.b		$b3
000EF293 AC                         	dc.b		$ac
000EF294 B0                         	dc.b		$b0
000EF295 B3                         	dc.b		$b3
000EF296 AC                         	dc.b		$ac
000EF297 B0                         	dc.b		$b0
000EF298 E3                         	smpsReturn
000EF299                            
000EF299                            MMBUBBLE_PSG1_p8:
000EF299 B008                       	dc.b		$b0,$8
000EF29B B3                         	dc.b		$b3
000EF29C B6                         	dc.b		$b6
000EF29D B0                         	dc.b		$b0
000EF29E B3                         	dc.b		$b3
000EF29F B6                         	dc.b		$b6
000EF2A0 B0                         	dc.b		$b0
000EF2A1 B3                         	dc.b		$b3
000EF2A2 E3                         	smpsReturn
000EF2A3                            
000EF2A3                            MMBUBBLE_PSG1_pe:
000EF2A3 AF08                       	dc.b		$af,$8
000EF2A5 B3                         	dc.b		$b3
000EF2A6 B6                         	dc.b		$b6
000EF2A7 AF                         	dc.b		$af
000EF2A8 B3                         	dc.b		$b3
000EF2A9 B6                         	dc.b		$b6
000EF2AA AF                         	dc.b		$af
000EF2AB B3                         	dc.b		$b3
000EF2AC E3                         	smpsReturn
000EF2AD                            
000EF2AD                            MMBUBBLE_PSG1_p10:
000EF2AD AD08                       	dc.b		$ad,$8
000EF2AF B1                         	dc.b		$b1
000EF2B0 B4                         	dc.b		$b4
000EF2B1 AD                         	dc.b		$ad
000EF2B2 B1                         	dc.b		$b1
000EF2B3 B4                         	dc.b		$b4
000EF2B4 AD                         	dc.b		$ad
000EF2B5 B1                         	dc.b		$b1
000EF2B6 E3                         	smpsReturn
000EF2B7                            
000EF2B7                            MMBUBBLE_PSG1_p14:
000EF2B7 B818                       	dc.b		$b8,$18
000EF2B9 B608                       	dc.b		$b6,$8
000EF2BB 18                         	dc.b		$18
000EF2BC B408                       	dc.b		$b4,$8
000EF2BE E3                         	smpsReturn
000EF2BF                            
000EF2BF                            MMBUBBLE_PSG1_p15:
000EF2BF E708                       	dc.b		$e7,$8
000EF2C1 B6                         	dc.b		$b6
000EF2C2 B618                       	dc.b		$b6,$18
000EF2C4 B108                       	dc.b		$b1,$8
000EF2C6 B4                         	dc.b		$b4
000EF2C7 B6                         	dc.b		$b6
000EF2C8 E3                         	smpsReturn
000EF2C9                            
000EF2C9                            MMBUBBLE_PSG1_p16:
000EF2C9 C404                       	dc.b		$c4,$4
000EF2CB C0                         	dc.b		$c0
000EF2CC BD                         	dc.b		$bd
000EF2CD B9                         	dc.b		$b9
000EF2CE C4                         	dc.b		$c4
000EF2CF C0                         	dc.b		$c0
000EF2D0 BD                         	dc.b		$bd
000EF2D1 B9                         	dc.b		$b9
000EF2D2 C4                         	dc.b		$c4
000EF2D3 C0                         	dc.b		$c0
000EF2D4 BD                         	dc.b		$bd
000EF2D5 B9                         	dc.b		$b9
000EF2D6 C4                         	dc.b		$c4
000EF2D7 C0                         	dc.b		$c0
000EF2D8 BD                         	dc.b		$bd
000EF2D9 B9                         	dc.b		$b9
000EF2DA E3                         	smpsReturn
000EF2DB                            
000EF2DB                            MMBUBBLE_PSG1_p17:
000EF2DB C804                       	dc.b		$c8,$4
000EF2DD C2                         	dc.b		$c2
000EF2DE BF                         	dc.b		$bf
000EF2DF BC                         	dc.b		$bc
000EF2E0 C8                         	dc.b		$c8
000EF2E1 C2                         	dc.b		$c2
000EF2E2 BF                         	dc.b		$bf
000EF2E3 BC                         	dc.b		$bc
000EF2E4 C8                         	dc.b		$c8
000EF2E5 C2                         	dc.b		$c2
000EF2E6 BF                         	dc.b		$bf
000EF2E7 BC                         	dc.b		$bc
000EF2E8 C8                         	dc.b		$c8
000EF2E9 C2                         	dc.b		$c2
000EF2EA BF                         	dc.b		$bf
000EF2EB BC                         	dc.b		$bc
000EF2EC E3                         	smpsReturn
000EF2ED                            
000EF2ED                            MMBUBBLE_PSG1_p1a:
000EF2ED C204                       	dc.b		$c2,$4
000EF2EF BF                         	dc.b		$bf
000EF2F0 BC                         	dc.b		$bc
000EF2F1 B8                         	dc.b		$b8
000EF2F2 C2                         	dc.b		$c2
000EF2F3 BF                         	dc.b		$bf
000EF2F4 BC                         	dc.b		$bc
000EF2F5 B8                         	dc.b		$b8
000EF2F6 C2                         	dc.b		$c2
000EF2F7 BF                         	dc.b		$bf
000EF2F8 BC                         	dc.b		$bc
000EF2F9 B8                         	dc.b		$b8
000EF2FA C2                         	dc.b		$c2
000EF2FB BF                         	dc.b		$bf
000EF2FC BC                         	dc.b		$bc
000EF2FD B8                         	dc.b		$b8
000EF2FE E3                         	smpsReturn
000EF2FF                            
000EF2FF                            ; Pattern data for PSG2
000EF2FF                            MMBUBBLE_PSG2_p0:
000EF2FF E740                       	dc.b		$e7,$40
000EF301 E3                         	smpsReturn
000EF302                            
000EF302                            MMBUBBLE_PSG2_p6:
000EF302 8008                       	dc.b		$80,$8
000EF304 F501                       	smpsPSGvoice	$1
000EF306 B1                         	dc.b		$b1
000EF307 B4                         	dc.b		$b4
000EF308 B8                         	dc.b		$b8
000EF309 B1                         	dc.b		$b1
000EF30A B4                         	dc.b		$b4
000EF30B B8                         	dc.b		$b8
000EF30C B1                         	dc.b		$b1
000EF30D E3                         	smpsReturn
000EF30E                            
000EF30E                            MMBUBBLE_PSG2_p7:
000EF30E B408                       	dc.b		$b4,$8
000EF310 B1                         	dc.b		$b1
000EF311 B4                         	dc.b		$b4
000EF312 B8                         	dc.b		$b8
000EF313 B1                         	dc.b		$b1
000EF314 B4                         	dc.b		$b4
000EF315 B8                         	dc.b		$b8
000EF316 B1                         	dc.b		$b1
000EF317 E3                         	smpsReturn
000EF318                            
000EF318                            MMBUBBLE_PSG2_p8:
000EF318 B408                       	dc.b		$b4,$8
000EF31A B0                         	dc.b		$b0
000EF31B B3                         	dc.b		$b3
000EF31C B6                         	dc.b		$b6
000EF31D B0                         	dc.b		$b0
000EF31E B3                         	dc.b		$b3
000EF31F B6                         	dc.b		$b6
000EF320 B0                         	dc.b		$b0
000EF321 E3                         	smpsReturn
000EF322                            
000EF322                            MMBUBBLE_PSG2_p9:
000EF322 B308                       	dc.b		$b3,$8
000EF324 B0                         	dc.b		$b0
000EF325 B3                         	dc.b		$b3
000EF326 B6                         	dc.b		$b6
000EF327 B0                         	dc.b		$b0
000EF328 B3                         	dc.b		$b3
000EF329 B6                         	dc.b		$b6
000EF32A B0                         	dc.b		$b0
000EF32B E3                         	smpsReturn
000EF32C                            
000EF32C                            MMBUBBLE_PSG2_pa:
000EF32C B308                       	dc.b		$b3,$8
000EF32E B1                         	dc.b		$b1
000EF32F B4                         	dc.b		$b4
000EF330 B8                         	dc.b		$b8
000EF331 B1                         	dc.b		$b1
000EF332 B4                         	dc.b		$b4
000EF333 B8                         	dc.b		$b8
000EF334 B1                         	dc.b		$b1
000EF335 E3                         	smpsReturn
000EF336                            
000EF336                            MMBUBBLE_PSG2_pe:
000EF336 B408                       	dc.b		$b4,$8
000EF338 AF                         	dc.b		$af
000EF339 B3                         	dc.b		$b3
000EF33A B6                         	dc.b		$b6
000EF33B AF                         	dc.b		$af
000EF33C B3                         	dc.b		$b3
000EF33D B6                         	dc.b		$b6
000EF33E AF                         	dc.b		$af
000EF33F E3                         	smpsReturn
000EF340                            
000EF340                            MMBUBBLE_PSG2_pf:
000EF340 B308                       	dc.b		$b3,$8
000EF342 AF                         	dc.b		$af
000EF343 B3                         	dc.b		$b3
000EF344 B6                         	dc.b		$b6
000EF345 AF                         	dc.b		$af
000EF346 B3                         	dc.b		$b3
000EF347 B6                         	dc.b		$b6
000EF348 AF                         	dc.b		$af
000EF349 E3                         	smpsReturn
000EF34A                            
000EF34A                            MMBUBBLE_PSG2_p10:
000EF34A B308                       	dc.b		$b3,$8
000EF34C AD                         	dc.b		$ad
000EF34D B1                         	dc.b		$b1
000EF34E B4                         	dc.b		$b4
000EF34F AD                         	dc.b		$ad
000EF350 B1                         	dc.b		$b1
000EF351 B4                         	dc.b		$b4
000EF352 AD                         	dc.b		$ad
000EF353 E3                         	smpsReturn
000EF354                            
000EF354                            MMBUBBLE_PSG2_p11:
000EF354 B108                       	dc.b		$b1,$8
000EF356 AD                         	dc.b		$ad
000EF357 B1                         	dc.b		$b1
000EF358 B4                         	dc.b		$b4
000EF359 AD                         	dc.b		$ad
000EF35A B1                         	dc.b		$b1
000EF35B B4                         	dc.b		$b4
000EF35C AD                         	dc.b		$ad
000EF35D E3                         	smpsReturn
000EF35E                            
000EF35E                            MMBUBBLE_PSG2_p12:
000EF35E B108                       	dc.b		$b1,$8
000EF360 AC                         	dc.b		$ac
000EF361 B0                         	dc.b		$b0
000EF362 B3                         	dc.b		$b3
000EF363 AC                         	dc.b		$ac
000EF364 B0                         	dc.b		$b0
000EF365 B3                         	dc.b		$b3
000EF366 AC                         	dc.b		$ac
000EF367 E3                         	smpsReturn
000EF368                            
000EF368                            MMBUBBLE_PSG2_p13:
000EF368 B008                       	dc.b		$b0,$8
000EF36A AC                         	dc.b		$ac
000EF36B B0                         	dc.b		$b0
000EF36C B3                         	dc.b		$b3
000EF36D AC                         	dc.b		$ac
000EF36E B0                         	dc.b		$b0
000EF36F B3                         	dc.b		$b3
000EF370 AC                         	dc.b		$ac
000EF371 E3                         	smpsReturn
000EF372                            
000EF372                            MMBUBBLE_PSG2_p14:
000EF372 B008                       	dc.b		$b0,$8
000EF374 B818                       	dc.b		$b8,$18
000EF376 B608                       	dc.b		$b6,$8
000EF378 18                         	dc.b		$18
000EF379 E3                         	smpsReturn
000EF37A                            
000EF37A                            MMBUBBLE_PSG2_p15:
000EF37A B410                       	dc.b		$b4,$10
000EF37C B608                       	dc.b		$b6,$8
000EF37E 18                         	dc.b		$18
000EF37F B108                       	dc.b		$b1,$8
000EF381 B4                         	dc.b		$b4
000EF382 E3                         	smpsReturn
000EF383                            
000EF383                            MMBUBBLE_PSG2_p16:
000EF383 B608                       	dc.b		$b6,$8
000EF385 C404                       	dc.b		$c4,$4
000EF387 C0                         	dc.b		$c0
000EF388 BD                         	dc.b		$bd
000EF389 B9                         	dc.b		$b9
000EF38A C4                         	dc.b		$c4
000EF38B C0                         	dc.b		$c0
000EF38C BD                         	dc.b		$bd
000EF38D B9                         	dc.b		$b9
000EF38E C4                         	dc.b		$c4
000EF38F C0                         	dc.b		$c0
000EF390 BD                         	dc.b		$bd
000EF391 B9                         	dc.b		$b9
000EF392 C4                         	dc.b		$c4
000EF393 C0                         	dc.b		$c0
000EF394 E3                         	smpsReturn
000EF395                            
000EF395                            MMBUBBLE_PSG2_p17:
000EF395 BD04                       	dc.b		$bd,$4
000EF397 B9                         	dc.b		$b9
000EF398 C8                         	dc.b		$c8
000EF399 C2                         	dc.b		$c2
000EF39A BF                         	dc.b		$bf
000EF39B BC                         	dc.b		$bc
000EF39C C8                         	dc.b		$c8
000EF39D C2                         	dc.b		$c2
000EF39E BF                         	dc.b		$bf
000EF39F BC                         	dc.b		$bc
000EF3A0 C8                         	dc.b		$c8
000EF3A1 C2                         	dc.b		$c2
000EF3A2 BF                         	dc.b		$bf
000EF3A3 BC                         	dc.b		$bc
000EF3A4 C8                         	dc.b		$c8
000EF3A5 C2                         	dc.b		$c2
000EF3A6 E3                         	smpsReturn
000EF3A7                            
000EF3A7                            MMBUBBLE_PSG2_p18:
000EF3A7 BF04                       	dc.b		$bf,$4
000EF3A9 BC                         	dc.b		$bc
000EF3AA B818                       	dc.b		$b8,$18
000EF3AC B608                       	dc.b		$b6,$8
000EF3AE 18                         	dc.b		$18
000EF3AF E3                         	smpsReturn
000EF3B0                            
000EF3B0                            MMBUBBLE_PSG2_p1a:
000EF3B0 BD04                       	dc.b		$bd,$4
000EF3B2 B9                         	dc.b		$b9
000EF3B3 C2                         	dc.b		$c2
000EF3B4 BF                         	dc.b		$bf
000EF3B5 BC                         	dc.b		$bc
000EF3B6 B8                         	dc.b		$b8
000EF3B7 C2                         	dc.b		$c2
000EF3B8 BF                         	dc.b		$bf
000EF3B9 BC                         	dc.b		$bc
000EF3BA B8                         	dc.b		$b8
000EF3BB C2                         	dc.b		$c2
000EF3BC BF                         	dc.b		$bf
000EF3BD BC                         	dc.b		$bc
000EF3BE B8                         	dc.b		$b8
000EF3BF C2                         	dc.b		$c2
000EF3C0 BF                         	dc.b		$bf
000EF3C1 E3                         	smpsReturn
000EF3C2                            
000EF3C2                            ; Pattern data for PSG3 (Noise)
000EF3C2                            MMBUBBLE_PSG3_p0:
000EF3C2 F502                       	smpsPSGvoice	$2
000EF3C4 8208                       	dc.b		$82,$8
000EF3C6 82                         	dc.b		$82
000EF3C7 82                         	dc.b		$82
000EF3C8 82                         	dc.b		$82
000EF3C9 82                         	dc.b		$82
000EF3CA 82                         	dc.b		$82
000EF3CB 82                         	dc.b		$82
000EF3CC 82                         	dc.b		$82
000EF3CD E3                         	smpsReturn
000EF3CE                            
000EF3CE                            ; Pattern data for DAC
000EF3CE                            MMBUBBLE_DAC_p0:
000EF3CE 9310                       	dc.b		$93,$10
000EF3D0 8208                       	dc.b		$82,$8
000EF3D2 93                         	dc.b		$93
000EF3D3 9310                       	dc.b		$93,$10
000EF3D5 82                         	dc.b		$82
000EF3D6 E3                         	smpsReturn
000EF3D7                            
000EF3D7                            MMBUBBLE_DAC_p1:
000EF3D7 9310                       	dc.b		$93,$10
000EF3D9 8208                       	dc.b		$82,$8
000EF3DB 93                         	dc.b		$93
000EF3DC 9310                       	dc.b		$93,$10
000EF3DE 82                         	dc.b		$82
000EF3DF E3                         	smpsReturn
000EF3E0                            
000EF3E0                            MMBUBBLE_DAC_p3:
000EF3E0 9310                       	dc.b		$93,$10
000EF3E2 8208                       	dc.b		$82,$8
000EF3E4 93                         	dc.b		$93
000EF3E5 93                         	dc.b		$93
000EF3E6 96                         	dc.b		$96
000EF3E7 82                         	dc.b		$82
000EF3E8 98                         	dc.b		$98
000EF3E9 E3                         	smpsReturn
000EF3EA                            
000EF3EA                            MMBUBBLE_DAC_p5:
000EF3EA 9310                       	dc.b		$93,$10
000EF3EC 8208                       	dc.b		$82,$8
000EF3EE 93                         	dc.b		$93
000EF3EF 9604                       	dc.b		$96,$4
000EF3F1 96                         	dc.b		$96
000EF3F2 96                         	dc.b		$96
000EF3F3 96                         	dc.b		$96
000EF3F4 97                         	dc.b		$97
000EF3F5 97                         	dc.b		$97
000EF3F6 98                         	dc.b		$98
000EF3F7 98                         	dc.b		$98
000EF3F8 E3                         	smpsReturn
000EF3F9                            
000EF3F9                            MMBUBBLE_DAC_p6:
000EF3F9 9310                       	dc.b		$93,$10
000EF3FB 8208                       	dc.b		$82,$8
000EF3FD 9310                       	dc.b		$93,$10
000EF3FF 8208                       	dc.b		$82,$8
000EF401 82                         	dc.b		$82
000EF402 93                         	dc.b		$93
000EF403 E3                         	smpsReturn
000EF404                            
000EF404                            MMBUBBLE_DAC_pb:
000EF404 9310                       	dc.b		$93,$10
000EF406 8208                       	dc.b		$82,$8
000EF408 93                         	dc.b		$93
000EF409 93                         	dc.b		$93
000EF40A 82                         	dc.b		$82
000EF40B 82                         	dc.b		$82
000EF40C 82                         	dc.b		$82
000EF40D E3                         	smpsReturn
000EF40E                            
000EF40E                            MMBUBBLE_DAC_pc:
000EF40E 9310                       	dc.b		$93,$10
000EF410 8208                       	dc.b		$82,$8
000EF412 93                         	dc.b		$93
000EF413 9310                       	dc.b		$93,$10
000EF415 8208                       	dc.b		$82,$8
000EF417 93                         	dc.b		$93
000EF418 E3                         	smpsReturn
000EF419                            
000EF419                            MMBUBBLE_DAC_pd:
000EF419 9310                       	dc.b		$93,$10
000EF41B 8208                       	dc.b		$82,$8
000EF41D 10                         	dc.b		$10
000EF41E 08                         	dc.b		$8
000EF41F 10                         	dc.b		$10
000EF420 E3                         	smpsReturn
000EF421                            
000EF421                            MMBUBBLE_DAC_p15:
000EF421 9308                       	dc.b		$93,$8
000EF423 82                         	dc.b		$82
000EF424 8210                       	dc.b		$82,$10
000EF426 9308                       	dc.b		$93,$8
000EF428 82                         	dc.b		$82
000EF429 82                         	dc.b		$82
000EF42A 93                         	dc.b		$93
000EF42B E3                         	smpsReturn
000EF42C                            
000EF42C                            MMBUBBLE_DAC_p1a:
000EF42C 9310                       	dc.b		$93,$10
000EF42E 8208                       	dc.b		$82,$8
000EF430 93                         	dc.b		$93
000EF431 93                         	dc.b		$93
000EF432 82                         	dc.b		$82
000EF433 82                         	dc.b		$82
000EF434 8204                       	dc.b		$82,$4
000EF436 80                         	dc.b		$80
000EF437 E3                         	smpsReturn
000EF438                            
000EF438                            MMBUBBLE_Voices:
000EF438 3A01 0701 019F 9F9F 5F0E+  	dc.b	$3a,$1,$7,$1,$1,$9f,$9f,$9f,$5f,$e,$e,$e,$3,$0,$0,$0
000EF448 061F FF1F 0F18 2827 00     	dc.b	$6,$1f,$ff,$1f,$f,$18,$28,$27,$0	; Voice 1 (Standard Brass)
000EF451 2C64 6434 341F 121F 1F00+  	dc.b	$2c,$64,$64,$34,$34,$1f,$12,$1f,$1f,$0,$0,$0,$0,$0,$1,$0
000EF461 010F 3F0F 3F16 0017 00     	dc.b	$1,$f,$3f,$f,$3f,$16,$0,$17,$0	; Voice 2 (Strings)
000EF46A 3632 0461 3F5F 5F5F 5F0C+  	dc.b	$36,$32,$4,$61,$3f,$5f,$5f,$5f,$5f,$c,$d,$9,$10,$9,$8,$8
000EF47A 1030 3536 D52B 1010 1D     	dc.b	$10,$30,$35,$36,$d5,$2b,$10,$10,$1d	; Voice 2 (Bell)
000EF483 3A61 3C14 319C DB9C DA04+  	dc.b	$3a,$61,$3c,$14,$31,$9c,$db,$9c,$da,$4,$9,$4,$3,$3,$1,$3
000EF493 001F 0F0F AF21 4731 80     	dc.b	$0,$1f,$f,$f,$af,$21,$47,$31,$80	; Voice 3 (Soft Bass)
000EF49C                            	even
000EF49C                            	even
000EF49C                            		even
000EF49C                            Music86:	include	sound\music86.asm
000EF49C                            ; -------------------------------------------------------
000EF49C                            ; File created using XM4SMPS v4.1-beta (Qt 3.2.1 Win32)
000EF49C                            ; Created on ×ò ìàé 30 2013, 22:43:11
000EF49C                            ; -------------------------------------------------------
000EF49C                            
000EF49C                            lozerenssoil_Header:
000EF49C 0000                       	smpsHeaderVoice	lozerenssoil_Voices
000EF49E 0600                       	smpsHeaderChan	6,0
000EF4A0 0103                       	smpsHeaderTempo	$1, $3
000EF4A2 0000 0000                  	smpsHeaderDAC	lozerenssoil_DAC
000EF4A6 0000 00F0                  	smpsHeaderFM	lozerenssoil_FM1,	$0, -16
000EF4AA 0000 00F6                  	smpsHeaderFM	lozerenssoil_FM2,	$0, -10
000EF4AE 0000 E81B                  	smpsHeaderFM	lozerenssoil_FM3,	$e8, 27
000EF4B2 0000 E81B                  	smpsHeaderFM	lozerenssoil_FM4,	$e8, 27
000EF4B6 0000 00FC                  	smpsHeaderFM	lozerenssoil_FM5,	$0, $100-4
000EF4BA                            
000EF4BA                            lozerenssoil_FM1:
000EF4BA F800 00                    	smpsCall	lozerenssoil_FM1_p0
000EF4BD F800 00                    	smpsCall	lozerenssoil_FM1_p0
000EF4C0 F800 00                    	smpsCall	lozerenssoil_FM1_p0
000EF4C3 F800 00                    	smpsCall	lozerenssoil_FM1_p0
000EF4C6 F800 00                    	smpsCall	lozerenssoil_FM1_p0
000EF4C9 F800 00                    	smpsCall	lozerenssoil_FM1_p0
000EF4CC F800 00                    	smpsCall	lozerenssoil_FM1_p0
000EF4CF F800 00                    	smpsCall	lozerenssoil_FM1_p0
000EF4D2                            lozerenssoil_FM1_Loop:
000EF4D2 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF4D5 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF4D8 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF4DB F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF4DE F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF4E1 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF4E4 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF4E7 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF4EA F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF4ED F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF4F0 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF4F3 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF4F6 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF4F9 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF4FC F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF4FF F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF502 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF505 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF508 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF50B F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF50E F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF511 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF514 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF517 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF51A F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF51D F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF520 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF523 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF526 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF529 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF52C F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF52F F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF532 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF535 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF538 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF53B F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF53E F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF541 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF544 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF547 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF54A F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF54D F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF550 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF553 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF556 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF559 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF55C F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF55F F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF562 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF565 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF568 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF56B F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF56E F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF571 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF574 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF577 F800 00                    	smpsCall	lozerenssoil_FM1_p8
000EF57A E6F6                       	smpsaltervol	-10
000EF57C F800 00                    	smpsCall	lozerenssoil_FM1_p40
000EF57F F800 00                    	smpsCall	lozerenssoil_FM1_p40
000EF582 E60A                       	smpsaltervol	10
000EF584 F6FF 4C                    	smpsJump	lozerenssoil_FM1_Loop
000EF587                            
000EF587                            lozerenssoil_FM2:
000EF587 F009 0208 04               	smpsmodset	9,2,8,4
000EF58C F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF58F F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF592 F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF595 F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF598 F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF59B F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF59E F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF5A1 F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF5A4                            lozerenssoil_FM2_Loop:
000EF5A4 F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF5A7 F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF5AA F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF5AD F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF5B0 F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF5B3 F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF5B6 F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF5B9 F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF5BC F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF5BF F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF5C2 F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF5C5 F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF5C8 F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF5CB F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF5CE F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF5D1 F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF5D4 F800 00                    	smpsCall	lozerenssoil_FM2_p18
000EF5D7 F800 00                    	smpsCall	lozerenssoil_FM2_p19
000EF5DA F800 00                    	smpsCall	lozerenssoil_FM2_p1a
000EF5DD F800 00                    	smpsCall	lozerenssoil_FM2_p1b
000EF5E0 F800 00                    	smpsCall	lozerenssoil_FM2_p1c
000EF5E3 F800 00                    	smpsCall	lozerenssoil_FM2_p1d
000EF5E6 F800 00                    	smpsCall	lozerenssoil_FM2_p1e
000EF5E9 F800 00                    	smpsCall	lozerenssoil_FM2_p1f
000EF5EC F800 00                    	smpsCall	lozerenssoil_FM2_p20
000EF5EF F800 00                    	smpsCall	lozerenssoil_FM2_p21
000EF5F2 F800 00                    	smpsCall	lozerenssoil_FM2_p22
000EF5F5 F800 00                    	smpsCall	lozerenssoil_FM2_p23
000EF5F8 F800 00                    	smpsCall	lozerenssoil_FM2_p24
000EF5FB F800 00                    	smpsCall	lozerenssoil_FM2_p25
000EF5FE F800 00                    	smpsCall	lozerenssoil_FM2_p26
000EF601 F800 00                    	smpsCall	lozerenssoil_FM2_p27
000EF604 F800 00                    	smpsCall	lozerenssoil_FM2_p28
000EF607 F800 00                    	smpsCall	lozerenssoil_FM2_p21
000EF60A F800 00                    	smpsCall	lozerenssoil_FM2_p22
000EF60D F800 00                    	smpsCall	lozerenssoil_FM2_p23
000EF610 F800 00                    	smpsCall	lozerenssoil_FM2_p2c
000EF613 F800 00                    	smpsCall	lozerenssoil_FM2_p2d
000EF616 F800 00                    	smpsCall	lozerenssoil_FM2_p26
000EF619 F800 00                    	smpsCall	lozerenssoil_FM2_p27
000EF61C F800 00                    	smpsCall	lozerenssoil_FM2_p30
000EF61F F800 00                    	smpsCall	lozerenssoil_FM2_p31
000EF622 F800 00                    	smpsCall	lozerenssoil_FM2_p30
000EF625 F800 00                    	smpsCall	lozerenssoil_FM2_p31
000EF628 F800 00                    	smpsCall	lozerenssoil_FM2_p34
000EF62B F800 00                    	smpsCall	lozerenssoil_FM2_p35
000EF62E F800 00                    	smpsCall	lozerenssoil_FM2_p34
000EF631 F800 00                    	smpsCall	lozerenssoil_FM2_p35
000EF634 F800 00                    	smpsCall	lozerenssoil_FM2_p38
000EF637 F800 00                    	smpsCall	lozerenssoil_FM2_p39
000EF63A F800 00                    	smpsCall	lozerenssoil_FM2_p3a
000EF63D F800 00                    	smpsCall	lozerenssoil_FM2_p35
000EF640 F800 00                    	smpsCall	lozerenssoil_FM2_p38
000EF643 F800 00                    	smpsCall	lozerenssoil_FM2_p3d
000EF646 F800 00                    	smpsCall	lozerenssoil_FM2_p3e
000EF649 F800 00                    	smpsCall	lozerenssoil_FM2_p3f
000EF64C F800 00                    	smpsCall	lozerenssoil_FM2_p40
000EF64F F800 00                    	smpsCall	lozerenssoil_FM2_p0
000EF652 F6FF 50                    	smpsJump	lozerenssoil_FM2_Loop
000EF655                            
000EF655                            lozerenssoil_FM3:
000EF655 F000 0202 02               	smpsmodset	0,2,2,2
000EF65A F800 00                    	smpsCall	lozerenssoil_FM3_p0
000EF65D F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF660 F800 00                    	smpsCall	lozerenssoil_FM3_p2
000EF663 F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF666 F800 00                    	smpsCall	lozerenssoil_FM3_p4
000EF669 F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF66C F800 00                    	smpsCall	lozerenssoil_FM3_p6
000EF66F F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF672                            lozerenssoil_FM3_Loop:
000EF672 F800 00                    	smpsCall	lozerenssoil_FM3_p8
000EF675 F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF678 F800 00                    	smpsCall	lozerenssoil_FM3_pa
000EF67B F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF67E F800 00                    	smpsCall	lozerenssoil_FM3_pc
000EF681 F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF684 F800 00                    	smpsCall	lozerenssoil_FM3_pe
000EF687 F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF68A F800 00                    	smpsCall	lozerenssoil_FM3_p8
000EF68D F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF690 F800 00                    	smpsCall	lozerenssoil_FM3_pa
000EF693 F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF696 F800 00                    	smpsCall	lozerenssoil_FM3_pc
000EF699 F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF69C F800 00                    	smpsCall	lozerenssoil_FM3_pe
000EF69F F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF6A2 F800 00                    	smpsCall	lozerenssoil_FM3_p8
000EF6A5 F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF6A8 F800 00                    	smpsCall	lozerenssoil_FM3_pa
000EF6AB F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF6AE F800 00                    	smpsCall	lozerenssoil_FM3_pc
000EF6B1 F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF6B4 F800 00                    	smpsCall	lozerenssoil_FM3_pe
000EF6B7 F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF6BA F800 00                    	smpsCall	lozerenssoil_FM3_p20
000EF6BD F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF6C0 F800 00                    	smpsCall	lozerenssoil_FM3_pa
000EF6C3 F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF6C6 F800 00                    	smpsCall	lozerenssoil_FM3_pc
000EF6C9 F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF6CC F800 00                    	smpsCall	lozerenssoil_FM3_pe
000EF6CF F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF6D2 F800 00                    	smpsCall	lozerenssoil_FM3_p8
000EF6D5 F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF6D8 F800 00                    	smpsCall	lozerenssoil_FM3_pa
000EF6DB F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF6DE F800 00                    	smpsCall	lozerenssoil_FM3_pc
000EF6E1 F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF6E4 F800 00                    	smpsCall	lozerenssoil_FM3_pe
000EF6E7 F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF6EA F800 00                    	smpsCall	lozerenssoil_FM3_p8
000EF6ED F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF6F0 F800 00                    	smpsCall	lozerenssoil_FM3_p8
000EF6F3 F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF6F6 F800 00                    	smpsCall	lozerenssoil_FM3_p8
000EF6F9 F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF6FC F800 00                    	smpsCall	lozerenssoil_FM3_pc
000EF6FF F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF702 F800 00                    	smpsCall	lozerenssoil_FM3_p38
000EF705 F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF708 F800 00                    	smpsCall	lozerenssoil_FM3_p8
000EF70B F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF70E F800 00                    	smpsCall	lozerenssoil_FM3_p38
000EF711 F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF714 F800 00                    	smpsCall	lozerenssoil_FM3_p3e
000EF717 F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF71A F800 00                    	smpsCall	lozerenssoil_FM3_p40
000EF71D F800 00                    	smpsCall	lozerenssoil_FM3_p1
000EF720 F6FF 50                    	smpsJump	lozerenssoil_FM3_Loop
000EF723                            
000EF723                            lozerenssoil_FM4:
000EF723 F000 0202 02               	smpsmodset	0,2,2,2
000EF728 F800 00                    	smpsCall	lozerenssoil_FM4_p0
000EF72B F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF72E F800 00                    	smpsCall	lozerenssoil_FM4_p0
000EF731 F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF734 F800 00                    	smpsCall	lozerenssoil_FM4_p4
000EF737 F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF73A F800 00                    	smpsCall	lozerenssoil_FM4_p4
000EF73D F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF740                            lozerenssoil_FM4_Loop:
000EF740 F800 00                    	smpsCall	lozerenssoil_FM4_p8
000EF743 F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF746 F800 00                    	smpsCall	lozerenssoil_FM4_p8
000EF749 F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF74C F800 00                    	smpsCall	lozerenssoil_FM4_pc
000EF74F F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF752 F800 00                    	smpsCall	lozerenssoil_FM4_pc
000EF755 F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF758 F800 00                    	smpsCall	lozerenssoil_FM4_p8
000EF75B F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF75E F800 00                    	smpsCall	lozerenssoil_FM4_p8
000EF761 F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF764 F800 00                    	smpsCall	lozerenssoil_FM4_pc
000EF767 F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF76A F800 00                    	smpsCall	lozerenssoil_FM4_pc
000EF76D F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF770 F800 00                    	smpsCall	lozerenssoil_FM4_p8
000EF773 F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF776 F800 00                    	smpsCall	lozerenssoil_FM4_p8
000EF779 F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF77C F800 00                    	smpsCall	lozerenssoil_FM4_pc
000EF77F F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF782 F800 00                    	smpsCall	lozerenssoil_FM4_pc
000EF785 F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF788 F800 00                    	smpsCall	lozerenssoil_FM4_p20
000EF78B F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF78E F800 00                    	smpsCall	lozerenssoil_FM4_p8
000EF791 F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF794 F800 00                    	smpsCall	lozerenssoil_FM4_pc
000EF797 F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF79A F800 00                    	smpsCall	lozerenssoil_FM4_pc
000EF79D F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF7A0 F800 00                    	smpsCall	lozerenssoil_FM4_p8
000EF7A3 F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF7A6 F800 00                    	smpsCall	lozerenssoil_FM4_p8
000EF7A9 F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF7AC F800 00                    	smpsCall	lozerenssoil_FM4_pc
000EF7AF F800 00                    	smpsCall	lozerenssoil_FM4_p2d
000EF7B2 F800 00                    	smpsCall	lozerenssoil_FM4_pc
000EF7B5 F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF7B8 F800 00                    	smpsCall	lozerenssoil_FM4_p8
000EF7BB F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF7BE F800 00                    	smpsCall	lozerenssoil_FM4_p32
000EF7C1 F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF7C4 F800 00                    	smpsCall	lozerenssoil_FM4_p8
000EF7C7 F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF7CA F800 00                    	smpsCall	lozerenssoil_FM4_p20
000EF7CD F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF7D0 F800 00                    	smpsCall	lozerenssoil_FM4_p38
000EF7D3 F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF7D6 F800 00                    	smpsCall	lozerenssoil_FM4_p32
000EF7D9 F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF7DC F800 00                    	smpsCall	lozerenssoil_FM4_p38
000EF7DF F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF7E2 F800 00                    	smpsCall	lozerenssoil_FM4_p20
000EF7E5 F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF7E8 F800 00                    	smpsCall	lozerenssoil_FM4_p40
000EF7EB F800 00                    	smpsCall	lozerenssoil_FM4_p1
000EF7EE F6FF 50                    	smpsJump	lozerenssoil_FM4_Loop
000EF7F1                            
000EF7F1                            lozerenssoil_FM5:
000EF7F1 F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF7F4 F800 00                    	smpsCall	lozerenssoil_FM5_p1
000EF7F7 F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF7FA F800 00                    	smpsCall	lozerenssoil_FM5_p1
000EF7FD F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF800 F800 00                    	smpsCall	lozerenssoil_FM5_p1
000EF803 F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF806 F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF809                            lozerenssoil_FM5_Loop:
000EF809 F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF80C F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF80F F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF812 F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF815 F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF818 F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF81B F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF81E F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF821 F800 00                    	smpsCall	lozerenssoil_FM5_p10
000EF824 F800 00                    	smpsCall	lozerenssoil_FM5_p10
000EF827 F800 00                    	smpsCall	lozerenssoil_FM5_p10
000EF82A F800 00                    	smpsCall	lozerenssoil_FM5_p10
000EF82D F800 00                    	smpsCall	lozerenssoil_FM5_p10
000EF830 F800 00                    	smpsCall	lozerenssoil_FM5_p10
000EF833 F800 00                    	smpsCall	lozerenssoil_FM5_p16
000EF836 F800 00                    	smpsCall	lozerenssoil_FM5_p16
000EF839 F800 00                    	smpsCall	lozerenssoil_FM5_p10
000EF83C F800 00                    	smpsCall	lozerenssoil_FM5_p10
000EF83F F800 00                    	smpsCall	lozerenssoil_FM5_p10
000EF842 F800 00                    	smpsCall	lozerenssoil_FM5_p10
000EF845 F800 00                    	smpsCall	lozerenssoil_FM5_p10
000EF848 F800 00                    	smpsCall	lozerenssoil_FM5_p10
000EF84B F800 00                    	smpsCall	lozerenssoil_FM5_p16
000EF84E F800 00                    	smpsCall	lozerenssoil_FM5_p16
000EF851 F800 00                    	smpsCall	lozerenssoil_FM5_p10
000EF854 F800 00                    	smpsCall	lozerenssoil_FM5_p10
000EF857 F800 00                    	smpsCall	lozerenssoil_FM5_p10
000EF85A F800 00                    	smpsCall	lozerenssoil_FM5_p10
000EF85D F800 00                    	smpsCall	lozerenssoil_FM5_p10
000EF860 F800 00                    	smpsCall	lozerenssoil_FM5_p10
000EF863 F800 00                    	smpsCall	lozerenssoil_FM5_p16
000EF866 F800 00                    	smpsCall	lozerenssoil_FM5_p16
000EF869 F800 00                    	smpsCall	lozerenssoil_FM5_p28
000EF86C F800 00                    	smpsCall	lozerenssoil_FM5_p29
000EF86F F800 00                    	smpsCall	lozerenssoil_FM5_p28
000EF872 F800 00                    	smpsCall	lozerenssoil_FM5_p29
000EF875 F800 00                    	smpsCall	lozerenssoil_FM5_p28
000EF878 F800 00                    	smpsCall	lozerenssoil_FM5_p2d
000EF87B F800 00                    	smpsCall	lozerenssoil_FM5_p2e
000EF87E F800 00                    	smpsCall	lozerenssoil_FM5_p2f
000EF881 F800 00                    	smpsCall	lozerenssoil_FM5_p30
000EF884 E61F                       	smpsaltervol	31
000EF886 E9E8                       	smpsalterpitch	-24
000EF888 F000 0202 02               	smpsmodset	0,2,2,2
000EF88D F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF890 F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF893 F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF896 F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF899 F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF89C F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF89F F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF8A2 F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF8A5 F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF8A8 F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF8AB F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF8AE F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF8B1 F800 00                    	smpsCall	lozerenssoil_FM5_p3d
000EF8B4 F800 00                    	smpsCall	lozerenssoil_FM5_p3e
000EF8B7 F800 00                    	smpsCall	lozerenssoil_FM5_p3f
000EF8BA F800 00                    	smpsCall	lozerenssoil_FM5_p3e
000EF8BD F800 00                    	smpsCall	lozerenssoil_FM5_p0
000EF8C0 E6E1                       	smpsaltervol	-31
000EF8C2 E918                       	smpsalterpitch	24
000EF8C4 F4                         	smpsmodoff
000EF8C5 F6FF 42                    	smpsJump	lozerenssoil_FM5_Loop
000EF8C8                            
000EF8C8                            lozerenssoil_DAC:
000EF8C8 F800 00                    	smpsCall	lozerenssoil_DAC_p0
000EF8CB F800 00                    	smpsCall	lozerenssoil_DAC_p0
000EF8CE F800 00                    	smpsCall	lozerenssoil_DAC_p0
000EF8D1 F800 00                    	smpsCall	lozerenssoil_DAC_p0
000EF8D4 F800 00                    	smpsCall	lozerenssoil_DAC_p0
000EF8D7 F800 00                    	smpsCall	lozerenssoil_DAC_p0
000EF8DA F800 00                    	smpsCall	lozerenssoil_DAC_p0
000EF8DD F800 00                    	smpsCall	lozerenssoil_DAC_p7
000EF8E0                            lozerenssoil_DAC_Loop:
000EF8E0 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF8E3 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF8E6 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF8E9 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF8EC F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF8EF F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF8F2 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF8F5 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF8F8 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF8FB F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF8FE F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF901 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF904 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF907 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF90A F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF90D F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF910 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF913 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF916 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF919 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF91C F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF91F F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF922 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF925 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF928 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF92B F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF92E F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF931 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF934 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF937 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF93A F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF93D F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF940 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF943 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF946 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF949 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF94C F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF94F F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF952 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF955 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF958 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF95B F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF95E F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF961 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF964 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF967 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF96A F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF96D F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF970 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF973 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF976 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF979 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF97C F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF97F F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF982 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF985 F800 00                    	smpsCall	lozerenssoil_DAC_p8
000EF988 F800 00                    	smpsCall	lozerenssoil_DAC_p0
000EF98B F800 00                    	smpsCall	lozerenssoil_DAC_p7
000EF98E F6FF 50                    	smpsJump	lozerenssoil_DAC_Loop
000EF991                            
000EF991                            
000EF991                            ; Pattern data for FM1
000EF991                            lozerenssoil_FM1_p0:
000EF991 E760                       	dc.b		$e7,$60
000EF993 E3                         	smpsReturn
000EF994                            
000EF994                            lozerenssoil_FM1_p8:
000EF994 EF01                       	smpsFMvoice	$1
000EF996 AD02                       	dc.b		$ad,$2
000EF998 8004                       	dc.b		$80,$4
000EF99A E604                       	smpsaltervol	4
000EF99C E080                       	smpspan		panleft,0
000EF99E AD02                       	dc.b		$ad,$2
000EF9A0 8004                       	dc.b		$80,$4
000EF9A2 E6FC                       	smpsaltervol	-4
000EF9A4 E0C0                       	smpspan		pancentre,0
000EF9A6 AD02                       	dc.b		$ad,$2
000EF9A8 8004                       	dc.b		$80,$4
000EF9AA E606                       	smpsaltervol	6
000EF9AC AD02                       	dc.b		$ad,$2
000EF9AE 8004                       	dc.b		$80,$4
000EF9B0 E6FA                       	smpsaltervol	-6
000EF9B2 AD02                       	dc.b		$ad,$2
000EF9B4 8004                       	dc.b		$80,$4
000EF9B6 E604                       	smpsaltervol	4
000EF9B8 E080                       	smpspan		panleft,0
000EF9BA AD02                       	dc.b		$ad,$2
000EF9BC 8004                       	dc.b		$80,$4
000EF9BE E6FC                       	smpsaltervol	-4
000EF9C0 E0C0                       	smpspan		pancentre,0
000EF9C2 AD02                       	dc.b		$ad,$2
000EF9C4 8004                       	dc.b		$80,$4
000EF9C6 E606                       	smpsaltervol	6
000EF9C8 AD02                       	dc.b		$ad,$2
000EF9CA 8004                       	dc.b		$80,$4
000EF9CC E6FA                       	smpsaltervol	-6
000EF9CE AD02                       	dc.b		$ad,$2
000EF9D0 8004                       	dc.b		$80,$4
000EF9D2 E604                       	smpsaltervol	4
000EF9D4 E080                       	smpspan		panleft,0
000EF9D6 AD02                       	dc.b		$ad,$2
000EF9D8 8004                       	dc.b		$80,$4
000EF9DA E6FC                       	smpsaltervol	-4
000EF9DC E0C0                       	smpspan		pancentre,0
000EF9DE AD02                       	dc.b		$ad,$2
000EF9E0 8004                       	dc.b		$80,$4
000EF9E2 E606                       	smpsaltervol	6
000EF9E4 AD02                       	dc.b		$ad,$2
000EF9E6 8004                       	dc.b		$80,$4
000EF9E8 E6FA                       	smpsaltervol	-6
000EF9EA AD02                       	dc.b		$ad,$2
000EF9EC 8004                       	dc.b		$80,$4
000EF9EE E604                       	smpsaltervol	4
000EF9F0 E080                       	smpspan		panleft,0
000EF9F2 AD02                       	dc.b		$ad,$2
000EF9F4 8004                       	dc.b		$80,$4
000EF9F6 E6FC                       	smpsaltervol	-4
000EF9F8 E0C0                       	smpspan		pancentre,0
000EF9FA AD02                       	dc.b		$ad,$2
000EF9FC 8004                       	dc.b		$80,$4
000EF9FE E606                       	smpsaltervol	6
000EFA00 AD02                       	dc.b		$ad,$2
000EFA02 8004                       	dc.b		$80,$4
000EFA04 E6FA                       	smpsaltervol	-6
000EFA06 E3                         	smpsReturn
000EFA07                            
000EFA07                            lozerenssoil_FM1_p40:
000EFA07 EF04                       	smpsFMvoice	$4
000EFA09 8606                       	dc.b		$86,$6
000EFA0B 801E                       	dc.b		$80,$1e
000EFA0D 8606                       	dc.b		$86,$6
000EFA0F 80                         	dc.b		$80
000EFA10 86                         	dc.b		$86
000EFA11 801E                       	dc.b		$80,$1e
000EFA13 8606                       	dc.b		$86,$6
000EFA15 80                         	dc.b		$80
000EFA16 E3                         	smpsReturn
000EFA17                            
000EFA17                            ; Pattern data for FM2
000EFA17                            lozerenssoil_FM2_p0:
000EFA17 E760                       	dc.b		$e7,$60
000EFA19 E3                         	smpsReturn
000EFA1A                            
000EFA1A                            lozerenssoil_FM2_p18:
000EFA1A EF03                       	smpsFMvoice	$3
000EFA1C BD01                       	dc.b		$bd,$1
000EFA1E E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFA1F C0                         	dc.b		$c0
000EFA20 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFA21 C2                         	dc.b		$c2
000EFA22 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFA23 C445                       	dc.b		$c4,$45
000EFA25 C20C                       	dc.b		$c2,$c
000EFA27 BE01                       	dc.b		$be,$1
000EFA29 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFA2A C1                         	dc.b		$c1
000EFA2B E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFA2C C40A                       	dc.b		$c4,$a
000EFA2E E3                         	smpsReturn
000EFA2F                            
000EFA2F                            lozerenssoil_FM2_p19:
000EFA2F 8018                       	dc.b		$80,$18
000EFA31 E604                       	smpsaltervol	4
000EFA33 E080                       	smpspan		panleft,0
000EFA35 C20C                       	dc.b		$c2,$c
000EFA37 BE01                       	dc.b		$be,$1
000EFA39 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFA3A C1                         	dc.b		$c1
000EFA3B E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFA3C C40A                       	dc.b		$c4,$a
000EFA3E 8018                       	dc.b		$80,$18
000EFA40 E604                       	smpsaltervol	4
000EFA42 E040                       	smpspan		panright,0
000EFA44 C20C                       	dc.b		$c2,$c
000EFA46 BE01                       	dc.b		$be,$1
000EFA48 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFA49 C1                         	dc.b		$c1
000EFA4A E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFA4B C40A                       	dc.b		$c4,$a
000EFA4D E6F8                       	smpsaltervol	-8
000EFA4F E0C0                       	smpspan		pancentre,0
000EFA51 E3                         	smpsReturn
000EFA52                            
000EFA52                            lozerenssoil_FM2_p1a:
000EFA52 BB01                       	dc.b		$bb,$1
000EFA54 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFA55 BE                         	dc.b		$be
000EFA56 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFA57 C2                         	dc.b		$c2
000EFA58 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFA59 C445                       	dc.b		$c4,$45
000EFA5B C20C                       	dc.b		$c2,$c
000EFA5D BD01                       	dc.b		$bd,$1
000EFA5F E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFA60 BF                         	dc.b		$bf
000EFA61 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFA62 C40A                       	dc.b		$c4,$a
000EFA64 E3                         	smpsReturn
000EFA65                            
000EFA65                            lozerenssoil_FM2_p1b:
000EFA65 8018                       	dc.b		$80,$18
000EFA67 E604                       	smpsaltervol	4
000EFA69 E080                       	smpspan		panleft,0
000EFA6B C20C                       	dc.b		$c2,$c
000EFA6D BD01                       	dc.b		$bd,$1
000EFA6F E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFA70 BF                         	dc.b		$bf
000EFA71 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFA72 C40A                       	dc.b		$c4,$a
000EFA74 8018                       	dc.b		$80,$18
000EFA76 E604                       	smpsaltervol	4
000EFA78 E040                       	smpspan		panright,0
000EFA7A C20C                       	dc.b		$c2,$c
000EFA7C BD01                       	dc.b		$bd,$1
000EFA7E E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFA7F BF                         	dc.b		$bf
000EFA80 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFA81 C40A                       	dc.b		$c4,$a
000EFA83 E6F8                       	smpsaltervol	-8
000EFA85 E0C0                       	smpspan		pancentre,0
000EFA87 E3                         	smpsReturn
000EFA88                            
000EFA88                            lozerenssoil_FM2_p1c:
000EFA88 BD02                       	dc.b		$bd,$2
000EFA8A E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFA8B C446                       	dc.b		$c4,$46
000EFA8D C20C                       	dc.b		$c2,$c
000EFA8F BD01                       	dc.b		$bd,$1
000EFA91 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFA92 BF                         	dc.b		$bf
000EFA93 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFA94 C2                         	dc.b		$c2
000EFA95 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFA96 C409                       	dc.b		$c4,$9
000EFA98 E3                         	smpsReturn
000EFA99                            
000EFA99                            lozerenssoil_FM2_p1d:
000EFA99 8018                       	dc.b		$80,$18
000EFA9B E604                       	smpsaltervol	4
000EFA9D E080                       	smpspan		panleft,0
000EFA9F C20C                       	dc.b		$c2,$c
000EFAA1 BD01                       	dc.b		$bd,$1
000EFAA3 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFAA4 BF                         	dc.b		$bf
000EFAA5 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFAA6 C2                         	dc.b		$c2
000EFAA7 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFAA8 C409                       	dc.b		$c4,$9
000EFAAA 8018                       	dc.b		$80,$18
000EFAAC E604                       	smpsaltervol	4
000EFAAE E040                       	smpspan		panright,0
000EFAB0 C20C                       	dc.b		$c2,$c
000EFAB2 BD01                       	dc.b		$bd,$1
000EFAB4 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFAB5 BF                         	dc.b		$bf
000EFAB6 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFAB7 C2                         	dc.b		$c2
000EFAB8 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFAB9 C409                       	dc.b		$c4,$9
000EFABB E6F8                       	smpsaltervol	-8
000EFABD E0C0                       	smpspan		pancentre,0
000EFABF E3                         	smpsReturn
000EFAC0                            
000EFAC0                            lozerenssoil_FM2_p1e:
000EFAC0 BD01                       	dc.b		$bd,$1
000EFAC2 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFAC3 BF                         	dc.b		$bf
000EFAC4 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFAC5 C446                       	dc.b		$c4,$46
000EFAC7 C20B                       	dc.b		$c2,$b
000EFAC9 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFACA BD01                       	dc.b		$bd,$1
000EFACC B9                         	dc.b		$b9
000EFACD E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFACE BC                         	dc.b		$bc
000EFACF E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFAD0 BF                         	dc.b		$bf
000EFAD1 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFAD2 C1                         	dc.b		$c1
000EFAD3 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFAD4 C408                       	dc.b		$c4,$8
000EFAD6 E3                         	smpsReturn
000EFAD7                            
000EFAD7                            lozerenssoil_FM2_p1f:
000EFAD7 8018                       	dc.b		$80,$18
000EFAD9 E604                       	smpsaltervol	4
000EFADB E080                       	smpspan		panleft,0
000EFADD C20B                       	dc.b		$c2,$b
000EFADF E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFAE0 BD01                       	dc.b		$bd,$1
000EFAE2 B9                         	dc.b		$b9
000EFAE3 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFAE4 BC                         	dc.b		$bc
000EFAE5 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFAE6 BF                         	dc.b		$bf
000EFAE7 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFAE8 C1                         	dc.b		$c1
000EFAE9 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFAEA C408                       	dc.b		$c4,$8
000EFAEC 8018                       	dc.b		$80,$18
000EFAEE E604                       	smpsaltervol	4
000EFAF0 E040                       	smpspan		panright,0
000EFAF2 C20B                       	dc.b		$c2,$b
000EFAF4 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFAF5 BD01                       	dc.b		$bd,$1
000EFAF7 B9                         	dc.b		$b9
000EFAF8 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFAF9 BC                         	dc.b		$bc
000EFAFA E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFAFB BF                         	dc.b		$bf
000EFAFC E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFAFD C1                         	dc.b		$c1
000EFAFE E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFAFF C408                       	dc.b		$c4,$8
000EFB01 E6F8                       	smpsaltervol	-8
000EFB03 E0C0                       	smpspan		pancentre,0
000EFB05 E3                         	smpsReturn
000EFB06                            
000EFB06                            lozerenssoil_FM2_p20:
000EFB06 BC01                       	dc.b		$bc,$1
000EFB08 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB09 BF                         	dc.b		$bf
000EFB0A E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB0B C1                         	dc.b		$c1
000EFB0C E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB0D C445                       	dc.b		$c4,$45
000EFB0F C20C                       	dc.b		$c2,$c
000EFB11 B901                       	dc.b		$b9,$1
000EFB13 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB14 BB                         	dc.b		$bb
000EFB15 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB16 C0                         	dc.b		$c0
000EFB17 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB18 C409                       	dc.b		$c4,$9
000EFB1A E3                         	smpsReturn
000EFB1B                            
000EFB1B                            lozerenssoil_FM2_p21:
000EFB1B 8018                       	dc.b		$80,$18
000EFB1D E604                       	smpsaltervol	4
000EFB1F E080                       	smpspan		panleft,0
000EFB21 C20C                       	dc.b		$c2,$c
000EFB23 B901                       	dc.b		$b9,$1
000EFB25 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB26 BB                         	dc.b		$bb
000EFB27 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB28 C0                         	dc.b		$c0
000EFB29 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB2A C409                       	dc.b		$c4,$9
000EFB2C BF01                       	dc.b		$bf,$1
000EFB2E E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB2F C4                         	dc.b		$c4
000EFB30 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB31 C804                       	dc.b		$c8,$4
000EFB33 E6FC                       	smpsaltervol	-4
000EFB35 E0C0                       	smpspan		pancentre,0
000EFB37 C60C                       	dc.b		$c6,$c
000EFB39 C4                         	dc.b		$c4
000EFB3A C6                         	dc.b		$c6
000EFB3B 8006                       	dc.b		$80,$6
000EFB3D E3                         	smpsReturn
000EFB3E                            
000EFB3E                            lozerenssoil_FM2_p22:
000EFB3E BE02                       	dc.b		$be,$2
000EFB40 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB41 C446                       	dc.b		$c4,$46
000EFB43 C20C                       	dc.b		$c2,$c
000EFB45 BC01                       	dc.b		$bc,$1
000EFB47 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB48 C1                         	dc.b		$c1
000EFB49 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB4A C40A                       	dc.b		$c4,$a
000EFB4C E3                         	smpsReturn
000EFB4D                            
000EFB4D                            lozerenssoil_FM2_p23:
000EFB4D 8018                       	dc.b		$80,$18
000EFB4F E604                       	smpsaltervol	4
000EFB51 E080                       	smpspan		panleft,0
000EFB53 C20C                       	dc.b		$c2,$c
000EFB55 BC01                       	dc.b		$bc,$1
000EFB57 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB58 C1                         	dc.b		$c1
000EFB59 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB5A C40A                       	dc.b		$c4,$a
000EFB5C E6FC                       	smpsaltervol	-4
000EFB5E E0C0                       	smpspan		pancentre,0
000EFB60 BE01                       	dc.b		$be,$1
000EFB62 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB63 C3                         	dc.b		$c3
000EFB64 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB65 C7                         	dc.b		$c7
000EFB66 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB67 C903                       	dc.b		$c9,$3
000EFB69 C80C                       	dc.b		$c8,$c
000EFB6B C6                         	dc.b		$c6
000EFB6C C8                         	dc.b		$c8
000EFB6D 8006                       	dc.b		$80,$6
000EFB6F E3                         	smpsReturn
000EFB70                            
000EFB70                            lozerenssoil_FM2_p24:
000EFB70 BC01                       	dc.b		$bc,$1
000EFB72 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB73 BF                         	dc.b		$bf
000EFB74 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB75 C2                         	dc.b		$c2
000EFB76 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB77 C445                       	dc.b		$c4,$45
000EFB79 C20B                       	dc.b		$c2,$b
000EFB7B E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB7C BF01                       	dc.b		$bf,$1
000EFB7E BA                         	dc.b		$ba
000EFB7F E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB80 BE                         	dc.b		$be
000EFB81 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB82 C40A                       	dc.b		$c4,$a
000EFB84 E3                         	smpsReturn
000EFB85                            
000EFB85                            lozerenssoil_FM2_p25:
000EFB85 8018                       	dc.b		$80,$18
000EFB87 E604                       	smpsaltervol	4
000EFB89 E080                       	smpspan		panleft,0
000EFB8B C20B                       	dc.b		$c2,$b
000EFB8D E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB8E BF01                       	dc.b		$bf,$1
000EFB90 BA                         	dc.b		$ba
000EFB91 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB92 BE                         	dc.b		$be
000EFB93 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB94 C40A                       	dc.b		$c4,$a
000EFB96 E6FC                       	smpsaltervol	-4
000EFB98 E0C0                       	smpspan		pancentre,0
000EFB9A B401                       	dc.b		$b4,$1
000EFB9C E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB9D B7                         	dc.b		$b7
000EFB9E E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFB9F BD04                       	dc.b		$bd,$4
000EFBA1 BF0C                       	dc.b		$bf,$c
000EFBA3 C0                         	dc.b		$c0
000EFBA4 C2                         	dc.b		$c2
000EFBA5 8006                       	dc.b		$80,$6
000EFBA7 E3                         	smpsReturn
000EFBA8                            
000EFBA8                            lozerenssoil_FM2_p26:
000EFBA8 BB01                       	dc.b		$bb,$1
000EFBAA E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFBAB BF                         	dc.b		$bf
000EFBAC E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFBAD C1                         	dc.b		$c1
000EFBAE E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFBAF C433                       	dc.b		$c4,$33
000EFBB1 C206                       	dc.b		$c2,$6
000EFBB3 C403                       	dc.b		$c4,$3
000EFBB5 C2                         	dc.b		$c2
000EFBB6 C404                       	dc.b		$c4,$4
000EFBB8 C2                         	dc.b		$c2
000EFBB9 C4                         	dc.b		$c4
000EFBBA C2                         	dc.b		$c2
000EFBBB 8002                       	dc.b		$80,$2
000EFBBD C404                       	dc.b		$c4,$4
000EFBBF 8002                       	dc.b		$80,$2
000EFBC1 C206                       	dc.b		$c2,$6
000EFBC3 E3                         	smpsReturn
000EFBC4                            
000EFBC4                            lozerenssoil_FM2_p27:
000EFBC4 C001                       	dc.b		$c0,$1
000EFBC6 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFBC7 C605                       	dc.b		$c6,$5
000EFBC9 C40C                       	dc.b		$c4,$c
000EFBCB C6                         	dc.b		$c6
000EFBCC C4                         	dc.b		$c4
000EFBCD C001                       	dc.b		$c0,$1
000EFBCF E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFBD0 C3                         	dc.b		$c3
000EFBD1 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFBD2 C60A                       	dc.b		$c6,$a
000EFBD4 C80C                       	dc.b		$c8,$c
000EFBD6 C6                         	dc.b		$c6
000EFBD7 C4                         	dc.b		$c4
000EFBD8 8006                       	dc.b		$80,$6
000EFBDA E3                         	smpsReturn
000EFBDB                            
000EFBDB                            lozerenssoil_FM2_p28:
000EFBDB BC02                       	dc.b		$bc,$2
000EFBDD E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFBDE BF01                       	dc.b		$bf,$1
000EFBE0 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFBE1 C1                         	dc.b		$c1
000EFBE2 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFBE3 C444                       	dc.b		$c4,$44
000EFBE5 C20C                       	dc.b		$c2,$c
000EFBE7 B901                       	dc.b		$b9,$1
000EFBE9 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFBEA BB                         	dc.b		$bb
000EFBEB E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFBEC C0                         	dc.b		$c0
000EFBED E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFBEE C409                       	dc.b		$c4,$9
000EFBF0 E3                         	smpsReturn
000EFBF1                            
000EFBF1                            lozerenssoil_FM2_p2c:
000EFBF1 BC01                       	dc.b		$bc,$1
000EFBF3 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFBF4 BF                         	dc.b		$bf
000EFBF5 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFBF6 C2                         	dc.b		$c2
000EFBF7 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFBF8 C445                       	dc.b		$c4,$45
000EFBFA C20B                       	dc.b		$c2,$b
000EFBFC E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFBFD BF01                       	dc.b		$bf,$1
000EFBFF B902                       	dc.b		$b9,$2
000EFC01 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC02 BD01                       	dc.b		$bd,$1
000EFC04 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC05 C409                       	dc.b		$c4,$9
000EFC07 E3                         	smpsReturn
000EFC08                            
000EFC08                            lozerenssoil_FM2_p2d:
000EFC08 8018                       	dc.b		$80,$18
000EFC0A E604                       	smpsaltervol	4
000EFC0C E080                       	smpspan		panleft,0
000EFC0E C20B                       	dc.b		$c2,$b
000EFC10 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC11 BF01                       	dc.b		$bf,$1
000EFC13 B902                       	dc.b		$b9,$2
000EFC15 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC16 BD01                       	dc.b		$bd,$1
000EFC18 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC19 C409                       	dc.b		$c4,$9
000EFC1B E6FC                       	smpsaltervol	-4
000EFC1D E0C0                       	smpspan		pancentre,0
000EFC1F B401                       	dc.b		$b4,$1
000EFC21 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC22 B7                         	dc.b		$b7
000EFC23 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC24 BD04                       	dc.b		$bd,$4
000EFC26 BF0C                       	dc.b		$bf,$c
000EFC28 C0                         	dc.b		$c0
000EFC29 C2                         	dc.b		$c2
000EFC2A 8006                       	dc.b		$80,$6
000EFC2C E3                         	smpsReturn
000EFC2D                            
000EFC2D                            lozerenssoil_FM2_p30:
000EFC2D B801                       	dc.b		$b8,$1
000EFC2F E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC30 C0                         	dc.b		$c0
000EFC31 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC32 C446                       	dc.b		$c4,$46
000EFC34 C20B                       	dc.b		$c2,$b
000EFC36 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC37 BC01                       	dc.b		$bc,$1
000EFC39 B9                         	dc.b		$b9
000EFC3A E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC3B BD                         	dc.b		$bd
000EFC3C E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC3D C40A                       	dc.b		$c4,$a
000EFC3F E3                         	smpsReturn
000EFC40                            
000EFC40                            lozerenssoil_FM2_p31:
000EFC40 8018                       	dc.b		$80,$18
000EFC42 E604                       	smpsaltervol	4
000EFC44 E080                       	smpspan		panleft,0
000EFC46 C20B                       	dc.b		$c2,$b
000EFC48 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC49 BC01                       	dc.b		$bc,$1
000EFC4B B9                         	dc.b		$b9
000EFC4C E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC4D BD                         	dc.b		$bd
000EFC4E E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC4F C40A                       	dc.b		$c4,$a
000EFC51 8018                       	dc.b		$80,$18
000EFC53 E604                       	smpsaltervol	4
000EFC55 E040                       	smpspan		panright,0
000EFC57 C20B                       	dc.b		$c2,$b
000EFC59 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC5A BC01                       	dc.b		$bc,$1
000EFC5C B9                         	dc.b		$b9
000EFC5D E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC5E BD                         	dc.b		$bd
000EFC5F E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC60 C40A                       	dc.b		$c4,$a
000EFC62 E6F8                       	smpsaltervol	-8
000EFC64 E0C0                       	smpspan		pancentre,0
000EFC66 E3                         	smpsReturn
000EFC67                            
000EFC67                            lozerenssoil_FM2_p34:
000EFC67 BA01                       	dc.b		$ba,$1
000EFC69 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC6A C0                         	dc.b		$c0
000EFC6B E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC6C C446                       	dc.b		$c4,$46
000EFC6E C20C                       	dc.b		$c2,$c
000EFC70 B902                       	dc.b		$b9,$2
000EFC72 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC73 C40A                       	dc.b		$c4,$a
000EFC75 E3                         	smpsReturn
000EFC76                            
000EFC76                            lozerenssoil_FM2_p35:
000EFC76 8018                       	dc.b		$80,$18
000EFC78 E604                       	smpsaltervol	4
000EFC7A E080                       	smpspan		panleft,0
000EFC7C C20C                       	dc.b		$c2,$c
000EFC7E B902                       	dc.b		$b9,$2
000EFC80 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC81 C40A                       	dc.b		$c4,$a
000EFC83 8018                       	dc.b		$80,$18
000EFC85 E604                       	smpsaltervol	4
000EFC87 E040                       	smpspan		panright,0
000EFC89 C20C                       	dc.b		$c2,$c
000EFC8B B902                       	dc.b		$b9,$2
000EFC8D E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC8E C40A                       	dc.b		$c4,$a
000EFC90 E6F8                       	smpsaltervol	-8
000EFC92 E0C0                       	smpspan		pancentre,0
000EFC94 E3                         	smpsReturn
000EFC95                            
000EFC95                            lozerenssoil_FM2_p38:
000EFC95 BC01                       	dc.b		$bc,$1
000EFC97 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC98 C2                         	dc.b		$c2
000EFC99 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFC9A C646                       	dc.b		$c6,$46
000EFC9C C40C                       	dc.b		$c4,$c
000EFC9E BB02                       	dc.b		$bb,$2
000EFCA0 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFCA1 C60A                       	dc.b		$c6,$a
000EFCA3 E3                         	smpsReturn
000EFCA4                            
000EFCA4                            lozerenssoil_FM2_p39:
000EFCA4 8018                       	dc.b		$80,$18
000EFCA6 E604                       	smpsaltervol	4
000EFCA8 E080                       	smpspan		panleft,0
000EFCAA C40C                       	dc.b		$c4,$c
000EFCAC BB02                       	dc.b		$bb,$2
000EFCAE E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFCAF C60A                       	dc.b		$c6,$a
000EFCB1 E6FC                       	smpsaltervol	-4
000EFCB3 E0C0                       	smpspan		pancentre,0
000EFCB5 BE01                       	dc.b		$be,$1
000EFCB7 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFCB8 C3                         	dc.b		$c3
000EFCB9 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFCBA C7                         	dc.b		$c7
000EFCBB E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFCBC C903                       	dc.b		$c9,$3
000EFCBE C80C                       	dc.b		$c8,$c
000EFCC0 C6                         	dc.b		$c6
000EFCC1 C8                         	dc.b		$c8
000EFCC2 8006                       	dc.b		$80,$6
000EFCC4 E3                         	smpsReturn
000EFCC5                            
000EFCC5                            lozerenssoil_FM2_p3a:
000EFCC5 C401                       	dc.b		$c4,$1
000EFCC7 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFCC8 C1                         	dc.b		$c1
000EFCC9 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFCCA C446                       	dc.b		$c4,$46
000EFCCC C20C                       	dc.b		$c2,$c
000EFCCE B902                       	dc.b		$b9,$2
000EFCD0 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFCD1 C40A                       	dc.b		$c4,$a
000EFCD3 E3                         	smpsReturn
000EFCD4                            
000EFCD4                            lozerenssoil_FM2_p3d:
000EFCD4 8018                       	dc.b		$80,$18
000EFCD6 E604                       	smpsaltervol	4
000EFCD8 E080                       	smpspan		panleft,0
000EFCDA C40C                       	dc.b		$c4,$c
000EFCDC BB02                       	dc.b		$bb,$2
000EFCDE E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFCDF C60A                       	dc.b		$c6,$a
000EFCE1 E6FC                       	smpsaltervol	-4
000EFCE3 E0C0                       	smpspan		pancentre,0
000EFCE5 BE01                       	dc.b		$be,$1
000EFCE7 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFCE8 C3                         	dc.b		$c3
000EFCE9 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFCEA C904                       	dc.b		$c9,$4
000EFCEC C80C                       	dc.b		$c8,$c
000EFCEE C6                         	dc.b		$c6
000EFCEF C8                         	dc.b		$c8
000EFCF0 8006                       	dc.b		$80,$6
000EFCF2 E3                         	smpsReturn
000EFCF3                            
000EFCF3                            lozerenssoil_FM2_p3e:
000EFCF3 C201                       	dc.b		$c2,$1
000EFCF5 E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFCF6 C847                       	dc.b		$c8,$47
000EFCF8 C60C                       	dc.b		$c6,$c
000EFCFA BD01                       	dc.b		$bd,$1
000EFCFC E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFCFD C2                         	dc.b		$c2
000EFCFE E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFCFF C80A                       	dc.b		$c8,$a
000EFD01 E3                         	smpsReturn
000EFD02                            
000EFD02                            lozerenssoil_FM2_p3f:
000EFD02 8018                       	dc.b		$80,$18
000EFD04 E604                       	smpsaltervol	4
000EFD06 E080                       	smpspan		panleft,0
000EFD08 C60C                       	dc.b		$c6,$c
000EFD0A BD01                       	dc.b		$bd,$1
000EFD0C E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFD0D C2                         	dc.b		$c2
000EFD0E E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFD0F C80A                       	dc.b		$c8,$a
000EFD11 8018                       	dc.b		$80,$18
000EFD13 E604                       	smpsaltervol	4
000EFD15 E040                       	smpspan		panright,0
000EFD17 C60C                       	dc.b		$c6,$c
000EFD19 BD01                       	dc.b		$bd,$1
000EFD1B E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFD1C C2                         	dc.b		$c2
000EFD1D E7                         	dc.b		smpsNoAttack ; max-speed portamento
000EFD1E C80A                       	dc.b		$c8,$a
000EFD20 E6F8                       	smpsaltervol	-8
000EFD22 E0C0                       	smpspan		pancentre,0
000EFD24 E3                         	smpsReturn
000EFD25                            
000EFD25                            lozerenssoil_FM2_p40:
000EFD25 8060                       	dc.b		$80,$60
000EFD27 E3                         	smpsReturn
000EFD28                            
000EFD28                            ; Pattern data for FM3
000EFD28                            lozerenssoil_FM3_p0:
000EFD28 EF00                       	smpsFMvoice	$0
000EFD2A B860                       	dc.b		$b8,$60
000EFD2C E3                         	smpsReturn
000EFD2D                            
000EFD2D                            lozerenssoil_FM3_p1:
000EFD2D E760                       	dc.b		$e7,$60
000EFD2F E3                         	smpsReturn
000EFD30                            
000EFD30                            lozerenssoil_FM3_p2:
000EFD30 EF00                       	smpsFMvoice	$0
000EFD32 B660                       	dc.b		$b6,$60
000EFD34 E3                         	smpsReturn
000EFD35                            
000EFD35                            lozerenssoil_FM3_p4:
000EFD35 EF00                       	smpsFMvoice	$0
000EFD37 B560                       	dc.b		$b5,$60
000EFD39 E3                         	smpsReturn
000EFD3A                            
000EFD3A                            lozerenssoil_FM3_p6:
000EFD3A EF00                       	smpsFMvoice	$0
000EFD3C B460                       	dc.b		$b4,$60
000EFD3E E3                         	smpsReturn
000EFD3F                            
000EFD3F                            lozerenssoil_FM3_p8:
000EFD3F EF00                       	smpsFMvoice	$0
000EFD41 B860                       	dc.b		$b8,$60
000EFD43 E3                         	smpsReturn
000EFD44                            
000EFD44                            lozerenssoil_FM3_pa:
000EFD44 EF00                       	smpsFMvoice	$0
000EFD46 B660                       	dc.b		$b6,$60
000EFD48 E3                         	smpsReturn
000EFD49                            
000EFD49                            lozerenssoil_FM3_pc:
000EFD49 EF00                       	smpsFMvoice	$0
000EFD4B B560                       	dc.b		$b5,$60
000EFD4D E3                         	smpsReturn
000EFD4E                            
000EFD4E                            lozerenssoil_FM3_pe:
000EFD4E EF00                       	smpsFMvoice	$0
000EFD50 B460                       	dc.b		$b4,$60
000EFD52 E3                         	smpsReturn
000EFD53                            
000EFD53                            lozerenssoil_FM3_p20:
000EFD53 EF00                       	smpsFMvoice	$0
000EFD55 B360                       	dc.b		$b3,$60
000EFD57 E3                         	smpsReturn
000EFD58                            
000EFD58                            lozerenssoil_FM3_p38:
000EFD58 EF00                       	smpsFMvoice	$0
000EFD5A BA60                       	dc.b		$ba,$60
000EFD5C E3                         	smpsReturn
000EFD5D                            
000EFD5D                            lozerenssoil_FM3_p3e:
000EFD5D EF00                       	smpsFMvoice	$0
000EFD5F BC60                       	dc.b		$bc,$60
000EFD61 E3                         	smpsReturn
000EFD62                            
000EFD62                            lozerenssoil_FM3_p40:
000EFD62 8060                       	dc.b		$80,$60
000EFD64 E3                         	smpsReturn
000EFD65                            
000EFD65                            ; Pattern data for FM4
000EFD65                            lozerenssoil_FM4_p0:
000EFD65 EF00                       	smpsFMvoice	$0
000EFD67 B360                       	dc.b		$b3,$60
000EFD69 E3                         	smpsReturn
000EFD6A                            
000EFD6A                            lozerenssoil_FM4_p1:
000EFD6A E760                       	dc.b		$e7,$60
000EFD6C E3                         	smpsReturn
000EFD6D                            
000EFD6D                            lozerenssoil_FM4_p4:
000EFD6D EF00                       	smpsFMvoice	$0
000EFD6F B160                       	dc.b		$b1,$60
000EFD71 E3                         	smpsReturn
000EFD72                            
000EFD72                            lozerenssoil_FM4_p8:
000EFD72 EF00                       	smpsFMvoice	$0
000EFD74 B360                       	dc.b		$b3,$60
000EFD76 E3                         	smpsReturn
000EFD77                            
000EFD77                            lozerenssoil_FM4_pc:
000EFD77 EF00                       	smpsFMvoice	$0
000EFD79 B160                       	dc.b		$b1,$60
000EFD7B E3                         	smpsReturn
000EFD7C                            
000EFD7C                            lozerenssoil_FM4_p20:
000EFD7C EF00                       	smpsFMvoice	$0
000EFD7E B860                       	dc.b		$b8,$60
000EFD80 E3                         	smpsReturn
000EFD81                            
000EFD81                            lozerenssoil_FM4_p2d:
000EFD81 E75F                       	dc.b		$e7,$5f
000EFD83 8001                       	dc.b		$80,$1
000EFD85 E3                         	smpsReturn
000EFD86                            
000EFD86                            lozerenssoil_FM4_p32:
000EFD86 EF00                       	smpsFMvoice	$0
000EFD88 B560                       	dc.b		$b5,$60
000EFD8A E3                         	smpsReturn
000EFD8B                            
000EFD8B                            lozerenssoil_FM4_p38:
000EFD8B EF00                       	smpsFMvoice	$0
000EFD8D B660                       	dc.b		$b6,$60
000EFD8F E3                         	smpsReturn
000EFD90                            
000EFD90                            lozerenssoil_FM4_p40:
000EFD90 8060                       	dc.b		$80,$60
000EFD92 E3                         	smpsReturn
000EFD93                            
000EFD93                            ; Pattern data for FM5
000EFD93                            lozerenssoil_FM5_p0:
000EFD93 E760                       	dc.b		$e7,$60
000EFD95 E3                         	smpsReturn
000EFD96                            
000EFD96                            lozerenssoil_FM5_p1:
000EFD96 E760                       	dc.b		$e7,$60
000EFD98 E3                         	smpsReturn
000EFD99                            
000EFD99                            lozerenssoil_FM5_p10:
000EFD99 EF02                       	smpsFMvoice	$2
000EFD9B D708                       	dc.b		$d7,$8
000EFD9D 8004                       	dc.b		$80,$4
000EFD9F DC08                       	dc.b		$dc,$8
000EFDA1 8004                       	dc.b		$80,$4
000EFDA3 DA08                       	dc.b		$da,$8
000EFDA5 8004                       	dc.b		$80,$4
000EFDA7 DC02                       	dc.b		$dc,$2
000EFDA9 8004                       	dc.b		$80,$4
000EFDAB D708                       	dc.b		$d7,$8
000EFDAD 8004                       	dc.b		$80,$4
000EFDAF D702                       	dc.b		$d7,$2
000EFDB1 8004                       	dc.b		$80,$4
000EFDB3 DC08                       	dc.b		$dc,$8
000EFDB5 8004                       	dc.b		$80,$4
000EFDB7 DA08                       	dc.b		$da,$8
000EFDB9 8004                       	dc.b		$80,$4
000EFDBB DC08                       	dc.b		$dc,$8
000EFDBD 8004                       	dc.b		$80,$4
000EFDBF E3                         	smpsReturn
000EFDC0                            
000EFDC0                            lozerenssoil_FM5_p16:
000EFDC0 D508                       	dc.b		$d5,$8
000EFDC2 8004                       	dc.b		$80,$4
000EFDC4 DC08                       	dc.b		$dc,$8
000EFDC6 8004                       	dc.b		$80,$4
000EFDC8 D808                       	dc.b		$d8,$8
000EFDCA 8004                       	dc.b		$80,$4
000EFDCC DC02                       	dc.b		$dc,$2
000EFDCE 8004                       	dc.b		$80,$4
000EFDD0 D508                       	dc.b		$d5,$8
000EFDD2 8004                       	dc.b		$80,$4
000EFDD4 D502                       	dc.b		$d5,$2
000EFDD6 8004                       	dc.b		$80,$4
000EFDD8 DC08                       	dc.b		$dc,$8
000EFDDA 8004                       	dc.b		$80,$4
000EFDDC D808                       	dc.b		$d8,$8
000EFDDE 8004                       	dc.b		$80,$4
000EFDE0 DC08                       	dc.b		$dc,$8
000EFDE2 8004                       	dc.b		$80,$4
000EFDE4 E3                         	smpsReturn
000EFDE5                            
000EFDE5                            lozerenssoil_FM5_p28:
000EFDE5 C40C                       	dc.b		$c4,$c
000EFDE7 8018                       	dc.b		$80,$18
000EFDE9 BF0C                       	dc.b		$bf,$c
000EFDEB 8018                       	dc.b		$80,$18
000EFDED C10C                       	dc.b		$c1,$c
000EFDEF 80                         	dc.b		$80
000EFDF0 E3                         	smpsReturn
000EFDF1                            
000EFDF1                            lozerenssoil_FM5_p29:
000EFDF1 B80C                       	dc.b		$b8,$c
000EFDF3 8018                       	dc.b		$80,$18
000EFDF5 BA0C                       	dc.b		$ba,$c
000EFDF7 8018                       	dc.b		$80,$18
000EFDF9 BC0C                       	dc.b		$bc,$c
000EFDFB 80                         	dc.b		$80
000EFDFC E3                         	smpsReturn
000EFDFD                            
000EFDFD                            lozerenssoil_FM5_p2d:
000EFDFD B80C                       	dc.b		$b8,$c
000EFDFF 8018                       	dc.b		$80,$18
000EFE01 BA0C                       	dc.b		$ba,$c
000EFE03 8018                       	dc.b		$80,$18
000EFE05 BD0C                       	dc.b		$bd,$c
000EFE07 80                         	dc.b		$80
000EFE08 E3                         	smpsReturn
000EFE09                            
000EFE09                            lozerenssoil_FM5_p2e:
000EFE09 C40C                       	dc.b		$c4,$c
000EFE0B 8018                       	dc.b		$80,$18
000EFE0D BF0C                       	dc.b		$bf,$c
000EFE0F 8018                       	dc.b		$80,$18
000EFE11 C00C                       	dc.b		$c0,$c
000EFE13 80                         	dc.b		$80
000EFE14 E3                         	smpsReturn
000EFE15                            
000EFE15                            lozerenssoil_FM5_p2f:
000EFE15 BD0C                       	dc.b		$bd,$c
000EFE17 8018                       	dc.b		$80,$18
000EFE19 C00C                       	dc.b		$c0,$c
000EFE1B 8018                       	dc.b		$80,$18
000EFE1D C20C                       	dc.b		$c2,$c
000EFE1F 80                         	dc.b		$80
000EFE20 E3                         	smpsReturn
000EFE21                            
000EFE21                            lozerenssoil_FM5_p30:
000EFE21 C40C                       	dc.b		$c4,$c
000EFE23 8054                       	dc.b		$80,$54
000EFE25 E3                         	smpsReturn
000EFE26                            
000EFE26                            lozerenssoil_FM5_p3d:
000EFE26 E730                       	dc.b		$e7,$30
000EFE28 EF00                       	smpsFMvoice	$0
000EFE2A BD                         	dc.b		$bd
000EFE2B E3                         	smpsReturn
000EFE2C                            
000EFE2C                            lozerenssoil_FM5_p3e:
000EFE2C 8060                       	dc.b		$80,$60
000EFE2E E3                         	smpsReturn
000EFE2F                            
000EFE2F                            lozerenssoil_FM5_p3f:
000EFE2F EF00                       	smpsFMvoice	$0
000EFE31 BF60                       	dc.b		$bf,$60
000EFE33 E3                         	smpsReturn
000EFE34                            
000EFE34                            ; Pattern data for DAC
000EFE34                            lozerenssoil_DAC_p0:
000EFE34 8060                       	dc.b		$80,$60
000EFE36 E3                         	smpsReturn
000EFE37                            
000EFE37                            lozerenssoil_DAC_p7:
000EFE37 803C                       	dc.b		$80,$3c
000EFE39 820C                       	dc.b		$82,$c
000EFE3B 82                         	dc.b		$82
000EFE3C 8206                       	dc.b		$82,$6
000EFE3E 82                         	dc.b		$82
000EFE3F E3                         	smpsReturn
000EFE40                            
000EFE40                            lozerenssoil_DAC_p8:
000EFE40 8112                       	dc.b		$81,$12
000EFE42 06                         	dc.b		$6
000EFE43 820C                       	dc.b		$82,$c
000EFE45 8118                       	dc.b		$81,$18
000EFE47 0C                         	dc.b		$c
000EFE48 8218                       	dc.b		$82,$18
000EFE4A E3                         	smpsReturn
000EFE4B                            
000EFE4B                            
000EFE4B                            lozerenssoil_Voices:
000EFE4B 2C64 6434 341F 121F 1F00+  	dc.b	$2c,$64,$64,$34,$34,$1f,$12,$1f,$1f,$0,$0,$0,$0,$0,$1,$0
000EFE5B 010F 3F0F 3F16 0017 00     	dc.b	$1,$f,$3f,$f,$3f,$16,$0,$17,$0	; Voice 0 (Strings)
000EFE64 2438 D71C D05F DFDC DF0F+  	dc.b	$24,$38,$d7,$1c,$d0,$5f,$df,$dc,$df,$f,$d,$e,$e,$1c,$10,$0
000EFE74 10B4 B9F4 D901 2700 27     	dc.b	$10,$b4,$b9,$f4,$d9,$1,$27,$0,$27	; Voice 1 (ls_1.tfi)
000EFE7D 1403 3103 011F 1F9F 1F11+  	dc.b	$14,$3,$31,$3,$1,$1f,$1f,$9f,$1f,$11,$1c,$9,$1f,$17,$c,$5
000EFE8D 05FE 3FF2 1616 1E13 1F     	dc.b	$5,$fe,$3f,$f2,$16,$16,$1e,$13,$1f	; Voice 2 (ls_2.tfi)
000EFE96 1731 D334 12CA 9292 D000+  	dc.b	$17,$31,$d3,$34,$12,$ca,$92,$92,$d0,$0,$13,$c,$d,$0,$0,$a
000EFEA6 0008 7ACA 7A16 2823 28     	dc.b	$0,$8,$7a,$ca,$7a,$16,$28,$23,$28	; Voice 3 (ls_3.tfi)
000EFEAF 2BD1 0020 2415 0C10 0F0F+  	dc.b	$2b,$d1,$0,$20,$24,$15,$c,$10,$f,$f,$17,$18,$19,$0,$0,$0
000EFEBF 0288 3C2B FD29 0307 0B     	dc.b	$2,$88,$3c,$2b,$fd,$29,$3,$7,$b	; Voice 4 (ls_4.tfi)
000EFEC8                            	even
000EFEC8                            	even
000EFEC8                            		even
000EFEC8                            Music87:	incbin	sound\music87.bin
000F19AA                            		even
000F19AA                            Music88:	incbin	sound\music88.bin
000F80B4 00                         		even
000F80B4                            Music89:	incbin	sound\music89.bin
000F9A60 00                         		even
000F9A60                            Music8A:	incbin	sound\music8A.bin
000FA968                            		even
000FA968                            Music8B:	incbin	sound\music8B.bin
000FE59E                            		even
000FE59E                            Music8C:	incbin	sound\music8C.bin
001007D2                            		even
001007D2                            Music8D:	incbin	sound\music8D.bin
00107076 00                         		even
00107076                            Music8E:	incbin	sound\music8E.bin
0010A4D4 00                         		even
0010A4D4                            Music8F:	incbin	sound\music8F.bin
0010E494 00                         		even
0010E494                            Music90:	incbin	sound\music90.bin
0010ECE6 00                         		even
0010ECE6                            Music91:	include	sound\music91.asm
0010ECE6                            ; -------------------------------------------------------
0010ECE6                            ; File created using XM4SMPS v4.1-beta (Qt 3.2.1 Win32)
0010ECE6                            ; Created on Ïò äåê 20 2013, 18:09:51
0010ECE6                            ; -------------------------------------------------------
0010ECE6                            
0010ECE6                            SCDMMPresent_Header:
0010ECE6 0000                       	smpsHeaderVoice	SCDMMPresent_Voices
0010ECE8 0603                       	smpsHeaderChan	6,3
0010ECEA 011A                       	smpsHeaderTempo	$1, $1a
0010ECEC 0000 0000                  	smpsHeaderDAC	SCDMMPresent_DAC
0010ECF0 0000 000A                  	smpsHeaderFM	SCDMMPresent_FM1,	$0, 10
0010ECF4 0000 0000                  	smpsHeaderFM	SCDMMPresent_FM2,	$0, 0
0010ECF8 0000 0000                  	smpsHeaderFM	SCDMMPresent_FM3,	$0, 0
0010ECFC 0000 E81C                  	smpsHeaderFM	SCDMMPresent_FM4,	$e8, 28
0010ED00 0000 E81C                  	smpsHeaderFM	SCDMMPresent_FM5,	$e8, 28
0010ED04 0000 DC04 0000             	smpsHeaderPSG	SCDMMPresent_PSG1,	$dc, 4, $0
0010ED0A 0000 DC07 0000             	smpsHeaderPSG	SCDMMPresent_PSG2,	$dc, 7, $0
0010ED10 0000 DC03 0000             	smpsHeaderPSG	SCDMMPresent_PSG3,	$dc, 3, $0
0010ED16                            
0010ED16                            SCDMMPresent_FM1:
0010ED16 F800 00                    	smpsCall	SCDMMPresent_FM1_p0
0010ED19 F800 00                    	smpsCall	SCDMMPresent_FM1_p1
0010ED1C                            SCDMMPresent_FM1_Loop:
0010ED1C F800 00                    	smpsCall	SCDMMPresent_FM1_p2
0010ED1F F800 00                    	smpsCall	SCDMMPresent_FM1_p3
0010ED22 F800 00                    	smpsCall	SCDMMPresent_FM1_p2
0010ED25 F800 00                    	smpsCall	SCDMMPresent_FM1_p3
0010ED28 F800 00                    	smpsCall	SCDMMPresent_FM1_p2
0010ED2B F800 00                    	smpsCall	SCDMMPresent_FM1_p3
0010ED2E F800 00                    	smpsCall	SCDMMPresent_FM1_p2
0010ED31 F800 00                    	smpsCall	SCDMMPresent_FM1_p3
0010ED34 F800 00                    	smpsCall	SCDMMPresent_FM1_p2
0010ED37 F800 00                    	smpsCall	SCDMMPresent_FM1_pb
0010ED3A F800 00                    	smpsCall	SCDMMPresent_FM1_pc
0010ED3D F800 00                    	smpsCall	SCDMMPresent_FM1_pd
0010ED40 F800 00                    	smpsCall	SCDMMPresent_FM1_p2
0010ED43 F800 00                    	smpsCall	SCDMMPresent_FM1_pb
0010ED46 F800 00                    	smpsCall	SCDMMPresent_FM1_pc
0010ED49 F800 00                    	smpsCall	SCDMMPresent_FM1_pd
0010ED4C F800 00                    	smpsCall	SCDMMPresent_FM1_p12
0010ED4F F800 00                    	smpsCall	SCDMMPresent_FM1_p12
0010ED52 F800 00                    	smpsCall	SCDMMPresent_FM1_p12
0010ED55 F800 00                    	smpsCall	SCDMMPresent_FM1_p12
0010ED58 F800 00                    	smpsCall	SCDMMPresent_FM1_p12
0010ED5B F800 00                    	smpsCall	SCDMMPresent_FM1_p12
0010ED5E F800 00                    	smpsCall	SCDMMPresent_FM1_p0
0010ED61 F800 00                    	smpsCall	SCDMMPresent_FM1_p1
0010ED64 F800 00                    	smpsCall	SCDMMPresent_FM1_p2
0010ED67 F800 00                    	smpsCall	SCDMMPresent_FM1_pb
0010ED6A F800 00                    	smpsCall	SCDMMPresent_FM1_pc
0010ED6D F800 00                    	smpsCall	SCDMMPresent_FM1_pd
0010ED70 F800 00                    	smpsCall	SCDMMPresent_FM1_p2
0010ED73 F800 00                    	smpsCall	SCDMMPresent_FM1_pb
0010ED76 F800 00                    	smpsCall	SCDMMPresent_FM1_pc
0010ED79 F800 00                    	smpsCall	SCDMMPresent_FM1_pd
0010ED7C F800 00                    	smpsCall	SCDMMPresent_FM1_p22
0010ED7F F800 00                    	smpsCall	SCDMMPresent_FM1_p22
0010ED82 F800 00                    	smpsCall	SCDMMPresent_FM1_p24
0010ED85 F800 00                    	smpsCall	SCDMMPresent_FM1_p24
0010ED88 F800 00                    	smpsCall	SCDMMPresent_FM1_p26
0010ED8B F800 00                    	smpsCall	SCDMMPresent_FM1_p27
0010ED8E F800 00                    	smpsCall	SCDMMPresent_FM1_p28
0010ED91 F800 00                    	smpsCall	SCDMMPresent_FM1_p29
0010ED94 F800 00                    	smpsCall	SCDMMPresent_FM1_p2
0010ED97 F800 00                    	smpsCall	SCDMMPresent_FM1_pb
0010ED9A F800 00                    	smpsCall	SCDMMPresent_FM1_pc
0010ED9D F800 00                    	smpsCall	SCDMMPresent_FM1_pd
0010EDA0 F800 00                    	smpsCall	SCDMMPresent_FM1_p2
0010EDA3 F800 00                    	smpsCall	SCDMMPresent_FM1_pb
0010EDA6 F800 00                    	smpsCall	SCDMMPresent_FM1_pc
0010EDA9 F800 00                    	smpsCall	SCDMMPresent_FM1_pd
0010EDAC F6FF 6E                    	smpsJump	SCDMMPresent_FM1_Loop
0010EDAF                            
0010EDAF                            SCDMMPresent_FM2:
0010EDAF E607                       	smpsaltervol	7
0010EDB1 F800 00                    	smpsCall	SCDMMPresent_FM2_p0
0010EDB4 F800 00                    	smpsCall	SCDMMPresent_FM2_p0
0010EDB7 E6F9                       	smpsaltervol	-7
0010EDB9                            SCDMMPresent_FM2_Loop:
0010EDB9 F800 00                    	smpsCall	SCDMMPresent_FM2_p2
0010EDBC F800 00                    	smpsCall	SCDMMPresent_FM2_p3
0010EDBF F800 00                    	smpsCall	SCDMMPresent_FM2_p2
0010EDC2 F800 00                    	smpsCall	SCDMMPresent_FM2_p5
0010EDC5 F800 00                    	smpsCall	SCDMMPresent_FM2_p2
0010EDC8 F800 00                    	smpsCall	SCDMMPresent_FM2_p3
0010EDCB F800 00                    	smpsCall	SCDMMPresent_FM2_p2
0010EDCE F800 00                    	smpsCall	SCDMMPresent_FM2_p3
0010EDD1 E61C                       	smpsaltervol	28
0010EDD3 E9E8                       	smpsalterpitch	-24
0010EDD5 F800 00                    	smpsCall	SCDMMPresent_FM2_pa
0010EDD8 F800 00                    	smpsCall	SCDMMPresent_FM2_pb
0010EDDB F800 00                    	smpsCall	SCDMMPresent_FM2_pc
0010EDDE F800 00                    	smpsCall	SCDMMPresent_FM2_pd
0010EDE1 F800 00                    	smpsCall	SCDMMPresent_FM2_pa
0010EDE4 F800 00                    	smpsCall	SCDMMPresent_FM2_pb
0010EDE7 F800 00                    	smpsCall	SCDMMPresent_FM2_pc
0010EDEA F800 00                    	smpsCall	SCDMMPresent_FM2_p11
0010EDED F800 00                    	smpsCall	SCDMMPresent_FM2_p12
0010EDF0 F800 00                    	smpsCall	SCDMMPresent_FM2_pd
0010EDF3 F800 00                    	smpsCall	SCDMMPresent_FM2_pd
0010EDF6 F800 00                    	smpsCall	SCDMMPresent_FM2_pd
0010EDF9 F800 00                    	smpsCall	SCDMMPresent_FM2_p16
0010EDFC F800 00                    	smpsCall	SCDMMPresent_FM2_p17
0010EDFF F800 00                    	smpsCall	SCDMMPresent_FM2_p18
0010EE02 F800 00                    	smpsCall	SCDMMPresent_FM2_p19
0010EE05 F800 00                    	smpsCall	SCDMMPresent_FM2_p0
0010EE08 F800 00                    	smpsCall	SCDMMPresent_FM2_p0
0010EE0B F800 00                    	smpsCall	SCDMMPresent_FM2_p0
0010EE0E F800 00                    	smpsCall	SCDMMPresent_FM2_p1d
0010EE11 F800 00                    	smpsCall	SCDMMPresent_FM2_p1e
0010EE14 F800 00                    	smpsCall	SCDMMPresent_FM2_p0
0010EE17 F800 00                    	smpsCall	SCDMMPresent_FM2_p0
0010EE1A F800 00                    	smpsCall	SCDMMPresent_FM2_p21
0010EE1D F800 00                    	smpsCall	SCDMMPresent_FM2_p22
0010EE20 F800 00                    	smpsCall	SCDMMPresent_FM2_p23
0010EE23 F800 00                    	smpsCall	SCDMMPresent_FM2_p24
0010EE26 F800 00                    	smpsCall	SCDMMPresent_FM2_p25
0010EE29 F800 00                    	smpsCall	SCDMMPresent_FM2_p26
0010EE2C F800 00                    	smpsCall	SCDMMPresent_FM2_p27
0010EE2F F800 00                    	smpsCall	SCDMMPresent_FM2_p28
0010EE32 F800 00                    	smpsCall	SCDMMPresent_FM2_p29
0010EE35 F800 00                    	smpsCall	SCDMMPresent_FM2_p2a
0010EE38 F800 00                    	smpsCall	SCDMMPresent_FM2_p2b
0010EE3B F800 00                    	smpsCall	SCDMMPresent_FM2_pd
0010EE3E F800 00                    	smpsCall	SCDMMPresent_FM2_pd
0010EE41 F800 00                    	smpsCall	SCDMMPresent_FM2_pd
0010EE44 F800 00                    	smpsCall	SCDMMPresent_FM2_pd
0010EE47 F800 00                    	smpsCall	SCDMMPresent_FM2_pd
0010EE4A F800 00                    	smpsCall	SCDMMPresent_FM2_pd
0010EE4D F6FF 6A                    	smpsJump	SCDMMPresent_FM2_Loop
0010EE50                            
0010EE50                            SCDMMPresent_FM3:
0010EE50 E607                       	smpsaltervol	7
0010EE52 F800 00                    	smpsCall	SCDMMPresent_FM3_p0
0010EE55 F800 00                    	smpsCall	SCDMMPresent_FM3_p0
0010EE58 E6F9                       	smpsaltervol	-7
0010EE5A                            SCDMMPresent_FM3_Loop:
0010EE5A F800 00                    	smpsCall	SCDMMPresent_FM3_p2
0010EE5D F800 00                    	smpsCall	SCDMMPresent_FM3_p3
0010EE60 F800 00                    	smpsCall	SCDMMPresent_FM3_p2
0010EE63 F800 00                    	smpsCall	SCDMMPresent_FM3_p5
0010EE66 F800 00                    	smpsCall	SCDMMPresent_FM3_p2
0010EE69 F800 00                    	smpsCall	SCDMMPresent_FM3_p3
0010EE6C F800 00                    	smpsCall	SCDMMPresent_FM3_p2
0010EE6F F800 00                    	smpsCall	SCDMMPresent_FM3_p3
0010EE72 E61C                       	smpsaltervol	28
0010EE74 E9E8                       	smpsalterpitch	-24
0010EE76 F800 00                    	smpsCall	SCDMMPresent_FM3_pa
0010EE79 F800 00                    	smpsCall	SCDMMPresent_FM3_pb
0010EE7C F800 00                    	smpsCall	SCDMMPresent_FM3_pc
0010EE7F F800 00                    	smpsCall	SCDMMPresent_FM3_pb
0010EE82 F800 00                    	smpsCall	SCDMMPresent_FM3_pc
0010EE85 F800 00                    	smpsCall	SCDMMPresent_FM3_pb
0010EE88 F800 00                    	smpsCall	SCDMMPresent_FM3_pc
0010EE8B F800 00                    	smpsCall	SCDMMPresent_FM2_p11
0010EE8E F800 00                    	smpsCall	SCDMMPresent_FM2_p12
0010EE91 F800 00                    	smpsCall	SCDMMPresent_FM2_pd
0010EE94 F800 00                    	smpsCall	SCDMMPresent_FM2_pd
0010EE97 F800 00                    	smpsCall	SCDMMPresent_FM2_pd
0010EE9A F800 00                    	smpsCall	SCDMMPresent_FM2_p16
0010EE9D F800 00                    	smpsCall	SCDMMPresent_FM2_p17
0010EEA0 F800 00                    	smpsCall	SCDMMPresent_FM2_p18
0010EEA3 F800 00                    	smpsCall	SCDMMPresent_FM3_p19
0010EEA6 F800 00                    	smpsCall	SCDMMPresent_FM3_p0
0010EEA9 F800 00                    	smpsCall	SCDMMPresent_FM3_p0
0010EEAC F800 00                    	smpsCall	SCDMMPresent_FM3_p0
0010EEAF F800 00                    	smpsCall	SCDMMPresent_FM3_p1d
0010EEB2 F800 00                    	smpsCall	SCDMMPresent_FM3_p1e
0010EEB5 F800 00                    	smpsCall	SCDMMPresent_FM3_p0
0010EEB8 F800 00                    	smpsCall	SCDMMPresent_FM3_p0
0010EEBB F800 00                    	smpsCall	SCDMMPresent_FM3_p21
0010EEBE F800 00                    	smpsCall	SCDMMPresent_FM3_p22
0010EEC1 F800 00                    	smpsCall	SCDMMPresent_FM3_p23
0010EEC4 F800 00                    	smpsCall	SCDMMPresent_FM3_p24
0010EEC7 F800 00                    	smpsCall	SCDMMPresent_FM3_p25
0010EECA F800 00                    	smpsCall	SCDMMPresent_FM3_p26
0010EECD F800 00                    	smpsCall	SCDMMPresent_FM3_p27
0010EED0 F800 00                    	smpsCall	SCDMMPresent_FM3_p28
0010EED3 F800 00                    	smpsCall	SCDMMPresent_FM3_p29
0010EED6 F800 00                    	smpsCall	SCDMMPresent_FM3_p2a
0010EED9 F800 00                    	smpsCall	SCDMMPresent_FM3_p2b
0010EEDC F800 00                    	smpsCall	SCDMMPresent_FM3_pb
0010EEDF F800 00                    	smpsCall	SCDMMPresent_FM3_pb
0010EEE2 F800 00                    	smpsCall	SCDMMPresent_FM3_pb
0010EEE5 F800 00                    	smpsCall	SCDMMPresent_FM3_pb
0010EEE8 F800 00                    	smpsCall	SCDMMPresent_FM3_pb
0010EEEB F800 00                    	smpsCall	SCDMMPresent_FM3_pb
0010EEEE F6FF 6A                    	smpsJump	SCDMMPresent_FM3_Loop
0010EEF1                            
0010EEF1                            SCDMMPresent_FM4:
0010EEF1 E080                       	smpsPan		panLeft,0
0010EEF3 F800 00                    	smpsCall	SCDMMPresent_FM4_p0
0010EEF6 F800 00                    	smpsCall	SCDMMPresent_FM4_p1
0010EEF9                            SCDMMPresent_FM4_Loop:
0010EEF9 F800 00                    	smpsCall	SCDMMPresent_FM4_p2
0010EEFC F800 00                    	smpsCall	SCDMMPresent_FM4_p3
0010EEFF F800 00                    	smpsCall	SCDMMPresent_FM4_p2
0010EF02 F800 00                    	smpsCall	SCDMMPresent_FM4_p3
0010EF05 F800 00                    	smpsCall	SCDMMPresent_FM4_p2
0010EF08 F800 00                    	smpsCall	SCDMMPresent_FM4_p3
0010EF0B F800 00                    	smpsCall	SCDMMPresent_FM4_p2
0010EF0E F800 00                    	smpsCall	SCDMMPresent_FM4_p3
0010EF11 F800 00                    	smpsCall	SCDMMPresent_FM4_pa
0010EF14 F800 00                    	smpsCall	SCDMMPresent_FM4_pb
0010EF17 F800 00                    	smpsCall	SCDMMPresent_FM4_pc
0010EF1A F800 00                    	smpsCall	SCDMMPresent_FM4_pd
0010EF1D F800 00                    	smpsCall	SCDMMPresent_FM4_pc
0010EF20 F800 00                    	smpsCall	SCDMMPresent_FM4_pb
0010EF23 F800 00                    	smpsCall	SCDMMPresent_FM4_pc
0010EF26 E90C                       	smpsalterpitch	12
0010EF28 F800 00                    	smpsCall	SCDMMPresent_FM4_p11
0010EF2B F800 00                    	smpsCall	SCDMMPresent_FM4_p12
0010EF2E F800 00                    	smpsCall	SCDMMPresent_FM4_p13
0010EF31 F800 00                    	smpsCall	SCDMMPresent_FM4_p14
0010EF34 F800 00                    	smpsCall	SCDMMPresent_FM4_p14
0010EF37 F800 00                    	smpsCall	SCDMMPresent_FM4_p14
0010EF3A F800 00                    	smpsCall	SCDMMPresent_FM4_p14
0010EF3D F800 00                    	smpsCall	SCDMMPresent_FM4_p18
0010EF40 E61C                       	smpsaltervol	28
0010EF42 E9E8                       	smpsalterpitch	-24
0010EF44 E9F4                       	smpsalterpitch	-12
0010EF46 F800 00                    	smpsCall	SCDMMPresent_FM4_pd
0010EF49 F800 00                    	smpsCall	SCDMMPresent_FM4_p1a
0010EF4C F800 00                    	smpsCall	SCDMMPresent_FM4_p1b
0010EF4F F800 00                    	smpsCall	SCDMMPresent_FM4_p1c
0010EF52 F800 00                    	smpsCall	SCDMMPresent_FM4_pd
0010EF55 F800 00                    	smpsCall	SCDMMPresent_FM4_p1a
0010EF58 F800 00                    	smpsCall	SCDMMPresent_FM4_p1b
0010EF5B F800 00                    	smpsCall	SCDMMPresent_FM4_p1c
0010EF5E F800 00                    	smpsCall	SCDMMPresent_FM4_pd
0010EF61 F800 00                    	smpsCall	SCDMMPresent_FM4_p2
0010EF64 F800 00                    	smpsCall	SCDMMPresent_FM4_pd
0010EF67 F800 00                    	smpsCall	SCDMMPresent_FM4_p24
0010EF6A F800 00                    	smpsCall	SCDMMPresent_FM4_pd
0010EF6D F800 00                    	smpsCall	SCDMMPresent_FM4_p2
0010EF70 F800 00                    	smpsCall	SCDMMPresent_FM4_p27
0010EF73 F800 00                    	smpsCall	SCDMMPresent_FM4_p28
0010EF76 F800 00                    	smpsCall	SCDMMPresent_FM4_p29
0010EF79 F800 00                    	smpsCall	SCDMMPresent_FM4_p2
0010EF7C F800 00                    	smpsCall	SCDMMPresent_FM4_pb
0010EF7F F800 00                    	smpsCall	SCDMMPresent_FM4_p3
0010EF82 F800 00                    	smpsCall	SCDMMPresent_FM4_pd
0010EF85 F800 00                    	smpsCall	SCDMMPresent_FM4_p2
0010EF88 F800 00                    	smpsCall	SCDMMPresent_FM4_pb
0010EF8B F800 00                    	smpsCall	SCDMMPresent_FM4_p3
0010EF8E F800 00                    	smpsCall	SCDMMPresent_FM4_pd
0010EF91 F6FF 66                    	smpsJump	SCDMMPresent_FM4_Loop
0010EF94                            
0010EF94                            SCDMMPresent_FM5:
0010EF94 E040                       	smpsPan		panRight,0
0010EF96 F800 00                    	smpsCall	SCDMMPresent_FM5_p0
0010EF99 F800 00                    	smpsCall	SCDMMPresent_FM5_p1
0010EF9C                            SCDMMPresent_FM5_Loop:
0010EF9C F800 00                    	smpsCall	SCDMMPresent_FM5_p2
0010EF9F F800 00                    	smpsCall	SCDMMPresent_FM5_p2
0010EFA2 F800 00                    	smpsCall	SCDMMPresent_FM5_p2
0010EFA5 F800 00                    	smpsCall	SCDMMPresent_FM5_p2
0010EFA8 F800 00                    	smpsCall	SCDMMPresent_FM5_p2
0010EFAB F800 00                    	smpsCall	SCDMMPresent_FM5_p2
0010EFAE F800 00                    	smpsCall	SCDMMPresent_FM5_p2
0010EFB1 F800 00                    	smpsCall	SCDMMPresent_FM5_p2
0010EFB4 F800 00                    	smpsCall	SCDMMPresent_FM5_pa
0010EFB7 F800 00                    	smpsCall	SCDMMPresent_FM5_pb
0010EFBA F800 00                    	smpsCall	SCDMMPresent_FM5_pc
0010EFBD F800 00                    	smpsCall	SCDMMPresent_FM5_pb
0010EFC0 F800 00                    	smpsCall	SCDMMPresent_FM5_pa
0010EFC3 F800 00                    	smpsCall	SCDMMPresent_FM5_pb
0010EFC6 F800 00                    	smpsCall	SCDMMPresent_FM5_pc
0010EFC9 F800 00                    	smpsCall	SCDMMPresent_FM5_p11
0010EFCC E918                       	smpsalterpitch	24
0010EFCE F800 00                    	smpsCall	SCDMMPresent_FM4_p12
0010EFD1 F800 00                    	smpsCall	SCDMMPresent_FM4_p13
0010EFD4 F800 00                    	smpsCall	SCDMMPresent_FM4_p14
0010EFD7 F800 00                    	smpsCall	SCDMMPresent_FM4_p14
0010EFDA F800 00                    	smpsCall	SCDMMPresent_FM4_p14
0010EFDD F800 00                    	smpsCall	SCDMMPresent_FM4_p14
0010EFE0 F800 00                    	smpsCall	SCDMMPresent_FM4_p18
0010EFE3 E61C                       	smpsaltervol	28
0010EFE5 E9E8                       	smpsalterpitch	-24
0010EFE7 E9E8                       	smpsalterpitch	-24
0010EFE9 E040                       	smpsPan		panRight,0
0010EFEB F800 00                    	smpsCall	SCDMMPresent_FM5_pb
0010EFEE F800 00                    	smpsCall	SCDMMPresent_FM5_p1a
0010EFF1 F800 00                    	smpsCall	SCDMMPresent_FM5_p1b
0010EFF4 F800 00                    	smpsCall	SCDMMPresent_FM5_p1a
0010EFF7 F800 00                    	smpsCall	SCDMMPresent_FM5_pb
0010EFFA F800 00                    	smpsCall	SCDMMPresent_FM5_p1a
0010EFFD F800 00                    	smpsCall	SCDMMPresent_FM5_p1b
0010F000 F800 00                    	smpsCall	SCDMMPresent_FM5_p1a
0010F003 F800 00                    	smpsCall	SCDMMPresent_FM5_pb
0010F006 F800 00                    	smpsCall	SCDMMPresent_FM5_p2
0010F009 F800 00                    	smpsCall	SCDMMPresent_FM5_pb
0010F00C F800 00                    	smpsCall	SCDMMPresent_FM5_p24
0010F00F F800 00                    	smpsCall	SCDMMPresent_FM5_pb
0010F012 F800 00                    	smpsCall	SCDMMPresent_FM5_p2
0010F015 F800 00                    	smpsCall	SCDMMPresent_FM5_pa
0010F018 F800 00                    	smpsCall	SCDMMPresent_FM5_pa
0010F01B F800 00                    	smpsCall	SCDMMPresent_FM5_p29
0010F01E F800 00                    	smpsCall	SCDMMPresent_FM5_p2
0010F021 F800 00                    	smpsCall	SCDMMPresent_FM5_p2b
0010F024 F800 00                    	smpsCall	SCDMMPresent_FM5_p2
0010F027 F800 00                    	smpsCall	SCDMMPresent_FM5_pb
0010F02A F800 00                    	smpsCall	SCDMMPresent_FM5_p2
0010F02D F800 00                    	smpsCall	SCDMMPresent_FM5_p2b
0010F030 F800 00                    	smpsCall	SCDMMPresent_FM5_p2
0010F033 F800 00                    	smpsCall	SCDMMPresent_FM5_pb
0010F036 F6FF 64                    	smpsJump	SCDMMPresent_FM5_Loop
0010F039                            
0010F039                            SCDMMPresent_PSG1:
0010F039 F800 00                    	smpsCall	SCDMMPresent_PSG1_p0
0010F03C F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F03F                            SCDMMPresent_PSG1_Loop:
0010F03F F800 00                    	smpsCall	SCDMMPresent_PSG1_p0
0010F042 F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F045 F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F048 F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F04B F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F04E F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F051 F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F054 F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F057 F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F05A F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F05D F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F060 F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F063 F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F066 F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F069 F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F06C F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F06F F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F072 F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F075 F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F078 F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F07B F800 00                    	smpsCall	SCDMMPresent_PSG1_p16
0010F07E F800 00                    	smpsCall	SCDMMPresent_PSG1_p17
0010F081 F800 00                    	smpsCall	SCDMMPresent_PSG1_p18
0010F084 F800 00                    	smpsCall	SCDMMPresent_PSG1_p19
0010F087 F800 00                    	smpsCall	SCDMMPresent_PSG1_p16
0010F08A F800 00                    	smpsCall	SCDMMPresent_PSG1_p17
0010F08D F800 00                    	smpsCall	SCDMMPresent_PSG1_p18
0010F090 F800 00                    	smpsCall	SCDMMPresent_PSG1_p19
0010F093 F800 00                    	smpsCall	SCDMMPresent_PSG1_p16
0010F096 F800 00                    	smpsCall	SCDMMPresent_PSG1_p17
0010F099 F800 00                    	smpsCall	SCDMMPresent_PSG1_p18
0010F09C F800 00                    	smpsCall	SCDMMPresent_PSG1_p19
0010F09F F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F0A2 F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F0A5 F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F0A8 F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F0AB F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F0AE F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F0B1 F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F0B4 F800 00                    	smpsCall	SCDMMPresent_PSG1_p1
0010F0B7 F800 00                    	smpsCall	SCDMMPresent_PSG1_p16
0010F0BA F800 00                    	smpsCall	SCDMMPresent_PSG1_p17
0010F0BD F800 00                    	smpsCall	SCDMMPresent_PSG1_p18
0010F0C0 F800 00                    	smpsCall	SCDMMPresent_PSG1_p19
0010F0C3 F800 00                    	smpsCall	SCDMMPresent_PSG1_p16
0010F0C6 F800 00                    	smpsCall	SCDMMPresent_PSG1_p17
0010F0C9 F800 00                    	smpsCall	SCDMMPresent_PSG1_p18
0010F0CC F800 00                    	smpsCall	SCDMMPresent_PSG1_p19
0010F0CF F6FF 6E                    	smpsJump	SCDMMPresent_PSG1_Loop
0010F0D2                            
0010F0D2                            SCDMMPresent_PSG2:
0010F0D2 F800 00                    	smpsCall	SCDMMPresent_PSG2_p0
0010F0D5 F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F0D8                            SCDMMPresent_PSG2_Loop:
0010F0D8 F800 00                    	smpsCall	SCDMMPresent_PSG2_p0
0010F0DB F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F0DE F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F0E1 F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F0E4 F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F0E7 F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F0EA F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F0ED F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F0F0 F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F0F3 F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F0F6 F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F0F9 F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F0FC F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F0FF F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F102 F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F105 F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F108 F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F10B F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F10E F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F111 F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F114 F800 00                    	smpsCall	SCDMMPresent_PSG2_p16
0010F117 F800 00                    	smpsCall	SCDMMPresent_PSG2_p17
0010F11A F800 00                    	smpsCall	SCDMMPresent_PSG2_p18
0010F11D E6FE                       	smpsaltervol	-2
0010F11F F800 00                    	smpsCall	SCDMMPresent_PSG2_p19
0010F122 E602                       	smpsaltervol	2
0010F124 F800 00                    	smpsCall	SCDMMPresent_PSG2_p1a
0010F127 F800 00                    	smpsCall	SCDMMPresent_PSG2_p17
0010F12A F800 00                    	smpsCall	SCDMMPresent_PSG2_p18
0010F12D E6FE                       	smpsaltervol	-2
0010F12F F800 00                    	smpsCall	SCDMMPresent_PSG2_p19
0010F132 E602                       	smpsaltervol	2
0010F134 F800 00                    	smpsCall	SCDMMPresent_PSG2_p1e
0010F137 F800 00                    	smpsCall	SCDMMPresent_PSG2_p17
0010F13A F800 00                    	smpsCall	SCDMMPresent_PSG2_p18
0010F13D E6FE                       	smpsaltervol	-2
0010F13F F800 00                    	smpsCall	SCDMMPresent_PSG2_p19
0010F142 E602                       	smpsaltervol	2
0010F144 F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F147 F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F14A F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F14D F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F150 F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F153 F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F156 F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F159 F800 00                    	smpsCall	SCDMMPresent_PSG2_p1
0010F15C F800 00                    	smpsCall	SCDMMPresent_PSG2_p1e
0010F15F F800 00                    	smpsCall	SCDMMPresent_PSG2_p17
0010F162 F800 00                    	smpsCall	SCDMMPresent_PSG2_p18
0010F165 F800 00                    	smpsCall	SCDMMPresent_PSG2_p19
0010F168 F800 00                    	smpsCall	SCDMMPresent_PSG2_p1e
0010F16B F800 00                    	smpsCall	SCDMMPresent_PSG2_p17
0010F16E F800 00                    	smpsCall	SCDMMPresent_PSG2_p18
0010F171 F800 00                    	smpsCall	SCDMMPresent_PSG2_p19
0010F174 F6FF 62                    	smpsJump	SCDMMPresent_PSG2_Loop
0010F177                            
0010F177                            SCDMMPresent_PSG3:
0010F177 F3E7                       	smpsPSGform	$E7
0010F179 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F17C F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F17F                            SCDMMPresent_PSG3_Loop:
0010F17F F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F182 F800 00                    	smpsCall	SCDMMPresent_PSG3_p3
0010F185 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F188 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F18B F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F18E F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F191 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F194 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F197 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F19A F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F19D F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1A0 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1A3 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1A6 F800 00                    	smpsCall	SCDMMPresent_PSG3_pf
0010F1A9 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1AC F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1AF F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1B2 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1B5 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1B8 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1BB F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1BE F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1C1 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1C4 F800 00                    	smpsCall	SCDMMPresent_PSG3_p19
0010F1C7 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1CA F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1CD F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1D0 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1D3 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1D6 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1D9 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1DC F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1DF F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1E2 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1E5 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1E8 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1EB F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1EE F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1F1 F800 00                    	smpsCall	SCDMMPresent_PSG3_pf
0010F1F4 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1F7 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1FA F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F1FD F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F200 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F203 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F206 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F209 F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F20C F800 00                    	smpsCall	SCDMMPresent_PSG3_p0
0010F20F F6FF 6E                    	smpsJump	SCDMMPresent_PSG3_Loop
0010F212                            
0010F212                            SCDMMPresent_DAC:
0010F212 F800 00                    	smpsCall	SCDMMPresent_DAC_p0
0010F215 F800 00                    	smpsCall	SCDMMPresent_DAC_p1
0010F218                            SCDMMPresent_DAC_Loop:
0010F218 F800 00                    	smpsCall	SCDMMPresent_DAC_p2
0010F21B F800 00                    	smpsCall	SCDMMPresent_DAC_p3
0010F21E F800 00                    	smpsCall	SCDMMPresent_DAC_p2
0010F221 F800 00                    	smpsCall	SCDMMPresent_DAC_p5
0010F224 F800 00                    	smpsCall	SCDMMPresent_DAC_p2
0010F227 F800 00                    	smpsCall	SCDMMPresent_DAC_p7
0010F22A F800 00                    	smpsCall	SCDMMPresent_DAC_p2
0010F22D F800 00                    	smpsCall	SCDMMPresent_DAC_p9
0010F230 F800 00                    	smpsCall	SCDMMPresent_DAC_pa
0010F233 F800 00                    	smpsCall	SCDMMPresent_DAC_p7
0010F236 F800 00                    	smpsCall	SCDMMPresent_DAC_pa
0010F239 F800 00                    	smpsCall	SCDMMPresent_DAC_p7
0010F23C F800 00                    	smpsCall	SCDMMPresent_DAC_pa
0010F23F F800 00                    	smpsCall	SCDMMPresent_DAC_p7
0010F242 F800 00                    	smpsCall	SCDMMPresent_DAC_p2
0010F245 F800 00                    	smpsCall	SCDMMPresent_DAC_p9
0010F248 F800 00                    	smpsCall	SCDMMPresent_DAC_p12
0010F24B F800 00                    	smpsCall	SCDMMPresent_DAC_p12
0010F24E F800 00                    	smpsCall	SCDMMPresent_DAC_p14
0010F251 F800 00                    	smpsCall	SCDMMPresent_DAC_p15
0010F254 F800 00                    	smpsCall	SCDMMPresent_DAC_p16
0010F257 F800 00                    	smpsCall	SCDMMPresent_DAC_p17
0010F25A F800 00                    	smpsCall	SCDMMPresent_DAC_p18
0010F25D F800 00                    	smpsCall	SCDMMPresent_DAC_p19
0010F260 F800 00                    	smpsCall	SCDMMPresent_DAC_p2
0010F263 F800 00                    	smpsCall	SCDMMPresent_DAC_p7
0010F266 F800 00                    	smpsCall	SCDMMPresent_DAC_p2
0010F269 F800 00                    	smpsCall	SCDMMPresent_DAC_p1d
0010F26C F800 00                    	smpsCall	SCDMMPresent_DAC_p2
0010F26F F800 00                    	smpsCall	SCDMMPresent_DAC_p7
0010F272 F800 00                    	smpsCall	SCDMMPresent_DAC_p2
0010F275 F800 00                    	smpsCall	SCDMMPresent_DAC_p9
0010F278 F800 00                    	smpsCall	SCDMMPresent_DAC_p2
0010F27B F800 00                    	smpsCall	SCDMMPresent_DAC_p7
0010F27E F800 00                    	smpsCall	SCDMMPresent_DAC_p2
0010F281 F800 00                    	smpsCall	SCDMMPresent_DAC_p1d
0010F284 F800 00                    	smpsCall	SCDMMPresent_DAC_p2
0010F287 F800 00                    	smpsCall	SCDMMPresent_DAC_p7
0010F28A F800 00                    	smpsCall	SCDMMPresent_DAC_p2
0010F28D F800 00                    	smpsCall	SCDMMPresent_DAC_p9
0010F290 F800 00                    	smpsCall	SCDMMPresent_DAC_pa
0010F293 F800 00                    	smpsCall	SCDMMPresent_DAC_p2b
0010F296 F800 00                    	smpsCall	SCDMMPresent_DAC_pa
0010F299 F800 00                    	smpsCall	SCDMMPresent_DAC_p2b
0010F29C F800 00                    	smpsCall	SCDMMPresent_DAC_pa
0010F29F F800 00                    	smpsCall	SCDMMPresent_DAC_p2b
0010F2A2 F800 00                    	smpsCall	SCDMMPresent_DAC_pa
0010F2A5 F800 00                    	smpsCall	SCDMMPresent_DAC_p31
0010F2A8 F6FF 6E                    	smpsJump	SCDMMPresent_DAC_Loop
0010F2AB                            
0010F2AB                            
0010F2AB                            ; Pattern data for FM1
0010F2AB                            SCDMMPresent_FM1_p0:
0010F2AB 8060                       	dc.b		$80,$60
0010F2AD E3                         	smpsReturn
0010F2AE                            
0010F2AE                            SCDMMPresent_FM1_p1:
0010F2AE E760                       	dc.b		$e7,$60
0010F2B0 E3                         	smpsReturn
0010F2B1                            
0010F2B1                            SCDMMPresent_FM1_p2:
0010F2B1 EF02                       	smpsFMvoice	$2
0010F2B3 960C                       	dc.b		$96,$c
0010F2B5 9D                         	dc.b		$9d
0010F2B6 A2                         	dc.b		$a2
0010F2B7 9606                       	dc.b		$96,$6
0010F2B9 9D0C                       	dc.b		$9d,$c
0010F2BB 9606                       	dc.b		$96,$6
0010F2BD 990C                       	dc.b		$99,$c
0010F2BF 96                         	dc.b		$96
0010F2C0 99                         	dc.b		$99
0010F2C1 E3                         	smpsReturn
0010F2C2                            
0010F2C2                            SCDMMPresent_FM1_p3:
0010F2C2 A006                       	dc.b		$a0,$6
0010F2C4 A2                         	dc.b		$a2
0010F2C5 960C                       	dc.b		$96,$c
0010F2C7 9C                         	dc.b		$9c
0010F2C8 9606                       	dc.b		$96,$6
0010F2CA A20C                       	dc.b		$a2,$c
0010F2CC 9606                       	dc.b		$96,$6
0010F2CE 990C                       	dc.b		$99,$c
0010F2D0 9B06                       	dc.b		$9b,$6
0010F2D2 9C0C                       	dc.b		$9c,$c
0010F2D4 8006                       	dc.b		$80,$6
0010F2D6 E3                         	smpsReturn
0010F2D7                            
0010F2D7                            SCDMMPresent_FM1_pb:
0010F2D7 A006                       	dc.b		$a0,$6
0010F2D9 A2                         	dc.b		$a2
0010F2DA 960C                       	dc.b		$96,$c
0010F2DC 99                         	dc.b		$99
0010F2DD 9606                       	dc.b		$96,$6
0010F2DF A20C                       	dc.b		$a2,$c
0010F2E1 9606                       	dc.b		$96,$6
0010F2E3 990C                       	dc.b		$99,$c
0010F2E5 96                         	dc.b		$96
0010F2E6 9D                         	dc.b		$9d
0010F2E7 E3                         	smpsReturn
0010F2E8                            
0010F2E8                            SCDMMPresent_FM1_pc:
0010F2E8 960C                       	dc.b		$96,$c
0010F2EA 9C                         	dc.b		$9c
0010F2EB A2                         	dc.b		$a2
0010F2EC 9606                       	dc.b		$96,$6
0010F2EE 9C0C                       	dc.b		$9c,$c
0010F2F0 9606                       	dc.b		$96,$6
0010F2F2 990C                       	dc.b		$99,$c
0010F2F4 96                         	dc.b		$96
0010F2F5 A2                         	dc.b		$a2
0010F2F6 E3                         	smpsReturn
0010F2F7                            
0010F2F7                            SCDMMPresent_FM1_pd:
0010F2F7 A006                       	dc.b		$a0,$6
0010F2F9 A2                         	dc.b		$a2
0010F2FA 960C                       	dc.b		$96,$c
0010F2FC 9C                         	dc.b		$9c
0010F2FD 9606                       	dc.b		$96,$6
0010F2FF A20C                       	dc.b		$a2,$c
0010F301 9606                       	dc.b		$96,$6
0010F303 990C                       	dc.b		$99,$c
0010F305 9C                         	dc.b		$9c
0010F306 96                         	dc.b		$96
0010F307 E3                         	smpsReturn
0010F308                            
0010F308                            SCDMMPresent_FM1_p12:
0010F308 A00C                       	dc.b		$a0,$c
0010F30A A2                         	dc.b		$a2
0010F30B A206                       	dc.b		$a2,$6
0010F30D A00C                       	dc.b		$a0,$c
0010F30F 06                         	dc.b		$6
0010F310 A20C                       	dc.b		$a2,$c
0010F312 8006                       	dc.b		$80,$6
0010F314 A00C                       	dc.b		$a0,$c
0010F316 8006                       	dc.b		$80,$6
0010F318 A20C                       	dc.b		$a2,$c
0010F31A E3                         	smpsReturn
0010F31B                            
0010F31B                            SCDMMPresent_FM1_p22:
0010F31B 8F0C                       	dc.b		$8f,$c
0010F31D 96                         	dc.b		$96
0010F31E 9B                         	dc.b		$9b
0010F31F 9606                       	dc.b		$96,$6
0010F321 8F0C                       	dc.b		$8f,$c
0010F323 9606                       	dc.b		$96,$6
0010F325 9B0C                       	dc.b		$9b,$c
0010F327 96                         	dc.b		$96
0010F328 8F                         	dc.b		$8f
0010F329 E3                         	smpsReturn
0010F32A                            
0010F32A                            SCDMMPresent_FM1_p24:
0010F32A 910C                       	dc.b		$91,$c
0010F32C 98                         	dc.b		$98
0010F32D 9D                         	dc.b		$9d
0010F32E 9806                       	dc.b		$98,$6
0010F330 910C                       	dc.b		$91,$c
0010F332 9806                       	dc.b		$98,$6
0010F334 9D0C                       	dc.b		$9d,$c
0010F336 98                         	dc.b		$98
0010F337 91                         	dc.b		$91
0010F338 E3                         	smpsReturn
0010F339                            
0010F339                            SCDMMPresent_FM1_p26:
0010F339 920C                       	dc.b		$92,$c
0010F33B 99                         	dc.b		$99
0010F33C 9E                         	dc.b		$9e
0010F33D 9906                       	dc.b		$99,$6
0010F33F 920C                       	dc.b		$92,$c
0010F341 9906                       	dc.b		$99,$6
0010F343 9E0C                       	dc.b		$9e,$c
0010F345 99                         	dc.b		$99
0010F346 92                         	dc.b		$92
0010F347 E3                         	smpsReturn
0010F348                            
0010F348                            SCDMMPresent_FM1_p27:
0010F348 930C                       	dc.b		$93,$c
0010F34A 99                         	dc.b		$99
0010F34B 9F                         	dc.b		$9f
0010F34C 9906                       	dc.b		$99,$6
0010F34E 930C                       	dc.b		$93,$c
0010F350 9906                       	dc.b		$99,$6
0010F352 9F0C                       	dc.b		$9f,$c
0010F354 99                         	dc.b		$99
0010F355 93                         	dc.b		$93
0010F356 E3                         	smpsReturn
0010F357                            
0010F357                            SCDMMPresent_FM1_p28:
0010F357 940C                       	dc.b		$94,$c
0010F359 99                         	dc.b		$99
0010F35A A0                         	dc.b		$a0
0010F35B 9906                       	dc.b		$99,$6
0010F35D 940C                       	dc.b		$94,$c
0010F35F 9906                       	dc.b		$99,$6
0010F361 A00C                       	dc.b		$a0,$c
0010F363 99                         	dc.b		$99
0010F364 94                         	dc.b		$94
0010F365 E3                         	smpsReturn
0010F366                            
0010F366                            SCDMMPresent_FM1_p29:
0010F366 950C                       	dc.b		$95,$c
0010F368 9D                         	dc.b		$9d
0010F369 A1                         	dc.b		$a1
0010F36A 9D06                       	dc.b		$9d,$6
0010F36C 950C                       	dc.b		$95,$c
0010F36E 9D06                       	dc.b		$9d,$6
0010F370 A10C                       	dc.b		$a1,$c
0010F372 9D                         	dc.b		$9d
0010F373 95                         	dc.b		$95
0010F374 E3                         	smpsReturn
0010F375                            
0010F375                            ; Pattern data for FM2
0010F375                            SCDMMPresent_FM2_p0:
0010F375 EF00                       	smpsFMvoice	$0
0010F377 C112                       	dc.b		$c1,$12
0010F379 C0                         	dc.b		$c0
0010F37A BF18                       	dc.b		$bf,$18
0010F37C BD0C                       	dc.b		$bd,$c
0010F37E BA18                       	dc.b		$ba,$18
0010F380 E3                         	smpsReturn
0010F381                            
0010F381                            SCDMMPresent_FM2_p2:
0010F381 EF03                       	smpsFMvoice	$3
0010F383 AE0C                       	dc.b		$ae,$c
0010F385 B1                         	dc.b		$b1
0010F386 8006                       	dc.b		$80,$6
0010F388 B10C                       	dc.b		$b1,$c
0010F38A AE06                       	dc.b		$ae,$6
0010F38C B10C                       	dc.b		$b1,$c
0010F38E 8006                       	dc.b		$80,$6
0010F390 B10C                       	dc.b		$b1,$c
0010F392 AE06                       	dc.b		$ae,$6
0010F394 B10C                       	dc.b		$b1,$c
0010F396 E3                         	smpsReturn
0010F397                            
0010F397                            SCDMMPresent_FM2_p3:
0010F397 AE0C                       	dc.b		$ae,$c
0010F399 B1                         	dc.b		$b1
0010F39A 8006                       	dc.b		$80,$6
0010F39C B10C                       	dc.b		$b1,$c
0010F39E AE06                       	dc.b		$ae,$6
0010F3A0 B40C                       	dc.b		$b4,$c
0010F3A2 8006                       	dc.b		$80,$6
0010F3A4 B40C                       	dc.b		$b4,$c
0010F3A6 AE06                       	dc.b		$ae,$6
0010F3A8 B10C                       	dc.b		$b1,$c
0010F3AA E3                         	smpsReturn
0010F3AB                            
0010F3AB                            SCDMMPresent_FM2_p5:
0010F3AB AE0C                       	dc.b		$ae,$c
0010F3AD B1                         	dc.b		$b1
0010F3AE 8006                       	dc.b		$80,$6
0010F3B0 B40C                       	dc.b		$b4,$c
0010F3B2 AE06                       	dc.b		$ae,$6
0010F3B4 B40C                       	dc.b		$b4,$c
0010F3B6 8006                       	dc.b		$80,$6
0010F3B8 B40C                       	dc.b		$b4,$c
0010F3BA AE06                       	dc.b		$ae,$6
0010F3BC B10C                       	dc.b		$b1,$c
0010F3BE E3                         	smpsReturn
0010F3BF                            
0010F3BF                            SCDMMPresent_FM2_pa:
0010F3BF EF01                       	smpsFMvoice	$1
0010F3C1 C160                       	dc.b		$c1,$60
0010F3C3 E3                         	smpsReturn
0010F3C4                            
0010F3C4                            SCDMMPresent_FM2_pb:
0010F3C4 E748                       	dc.b		$e7,$48
0010F3C6 C618                       	dc.b		$c6,$18
0010F3C8 E3                         	smpsReturn
0010F3C9                            
0010F3C9                            SCDMMPresent_FM2_pc:
0010F3C9 C060                       	dc.b		$c0,$60
0010F3CB E3                         	smpsReturn
0010F3CC                            
0010F3CC                            SCDMMPresent_FM2_pd:
0010F3CC E760                       	dc.b		$e7,$60
0010F3CE E3                         	smpsReturn
0010F3CF                            
0010F3CF                            SCDMMPresent_FM2_p11:
0010F3CF E748                       	dc.b		$e7,$48
0010F3D1 EF00                       	smpsFMvoice	$0
0010F3D3 E6E4                       	smpsaltervol	-28
0010F3D5 E918                       	smpsalterpitch	24
0010F3D7 E607                       	smpsaltervol	7
0010F3D9 B303                       	dc.b		$b3,$3
0010F3DB B5                         	dc.b		$b5
0010F3DC B8                         	dc.b		$b8
0010F3DD BA                         	dc.b		$ba
0010F3DE BD                         	dc.b		$bd
0010F3DF BF                         	dc.b		$bf
0010F3E0 C1                         	dc.b		$c1
0010F3E1 C4                         	dc.b		$c4
0010F3E2 E3                         	smpsReturn
0010F3E3                            
0010F3E3                            SCDMMPresent_FM2_p12:
0010F3E3 C618                       	dc.b		$c6,$18
0010F3E5 8048                       	dc.b		$80,$48
0010F3E7 E3                         	smpsReturn
0010F3E8                            
0010F3E8                            SCDMMPresent_FM2_p16:
0010F3E8 EF00                       	smpsFMvoice	$0
0010F3EA BA18                       	dc.b		$ba,$18
0010F3EC 80                         	dc.b		$80
0010F3ED BA0C                       	dc.b		$ba,$c
0010F3EF BD                         	dc.b		$bd
0010F3F0 8012                       	dc.b		$80,$12
0010F3F2 C106                       	dc.b		$c1,$6
0010F3F4 E3                         	smpsReturn
0010F3F5                            
0010F3F5                            SCDMMPresent_FM2_p17:
0010F3F5 E706                       	dc.b		$e7,$6
0010F3F7 8042                       	dc.b		$80,$42
0010F3F9 BF0C                       	dc.b		$bf,$c
0010F3FB 8006                       	dc.b		$80,$6
0010F3FD BD                         	dc.b		$bd
0010F3FE E3                         	smpsReturn
0010F3FF                            
0010F3FF                            SCDMMPresent_FM2_p18:
0010F3FF E706                       	dc.b		$e7,$6
0010F401 8036                       	dc.b		$80,$36
0010F403 BA18                       	dc.b		$ba,$18
0010F405 800C                       	dc.b		$80,$c
0010F407 E3                         	smpsReturn
0010F408                            
0010F408                            SCDMMPresent_FM2_p19:
0010F408 E730                       	dc.b		$e7,$30
0010F40A 9D03                       	dc.b		$9d,$3
0010F40C A0                         	dc.b		$a0
0010F40D A4                         	dc.b		$a4
0010F40E A7                         	dc.b		$a7
0010F40F A9                         	dc.b		$a9
0010F410 AC                         	dc.b		$ac
0010F411 B0                         	dc.b		$b0
0010F412 B3                         	dc.b		$b3
0010F413 B5                         	dc.b		$b5
0010F414 B8                         	dc.b		$b8
0010F415 BC                         	dc.b		$bc
0010F416 BF                         	dc.b		$bf
0010F417 800C                       	dc.b		$80,$c
0010F419 E3                         	smpsReturn
0010F41A                            
0010F41A                            SCDMMPresent_FM2_p1d:
0010F41A C112                       	dc.b		$c1,$12
0010F41C C0                         	dc.b		$c0
0010F41D BF18                       	dc.b		$bf,$18
0010F41F BD0C                       	dc.b		$bd,$c
0010F421 BA06                       	dc.b		$ba,$6
0010F423 BA                         	dc.b		$ba
0010F424 BA                         	dc.b		$ba
0010F425 BA                         	dc.b		$ba
0010F426 E3                         	smpsReturn
0010F427                            
0010F427                            SCDMMPresent_FM2_p1e:
0010F427 C112                       	dc.b		$c1,$12
0010F429 B4                         	dc.b		$b4
0010F42A B318                       	dc.b		$b3,$18
0010F42C B10C                       	dc.b		$b1,$c
0010F42E AE18                       	dc.b		$ae,$18
0010F430 E3                         	smpsReturn
0010F431                            
0010F431                            SCDMMPresent_FM2_p21:
0010F431 C112                       	dc.b		$c1,$12
0010F433 C0                         	dc.b		$c0
0010F434 BF18                       	dc.b		$bf,$18
0010F436 BD0C                       	dc.b		$bd,$c
0010F438 E6F9                       	smpsaltervol	-7
0010F43A E60A                       	smpsaltervol	10
0010F43C EF04                       	smpsFMvoice	$4
0010F43E BF06                       	dc.b		$bf,$6
0010F440 C1                         	dc.b		$c1
0010F441 C4                         	dc.b		$c4
0010F442 C6                         	dc.b		$c6
0010F443 E3                         	smpsReturn
0010F444                            
0010F444                            SCDMMPresent_FM2_p22:
0010F444 C912                       	dc.b		$c9,$12
0010F446 C606                       	dc.b		$c6,$6
0010F448 80                         	dc.b		$80
0010F449 C9                         	dc.b		$c9
0010F44A CB                         	dc.b		$cb
0010F44B C9                         	dc.b		$c9
0010F44C CB02                       	dc.b		$cb,$2
0010F44E E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F44F E110                       	smpsalternote	16
0010F451 CB                         	dc.b		$cb
0010F452 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F453 E110                       	smpsalternote	16
0010F455 CB                         	dc.b		$cb
0010F456 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F457 E100                       	smpsalternote	0
0010F459 CC                         	dc.b		$cc
0010F45A E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F45B E110                       	smpsalternote	16
0010F45D CC                         	dc.b		$cc
0010F45E E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F45F E110                       	smpsalternote	16
0010F461 CC                         	dc.b		$cc
0010F462 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F463 E100                       	smpsalternote	0
0010F465 CD18                       	dc.b		$cd,$18
0010F467 D00C                       	dc.b		$d0,$c
0010F469 E3                         	smpsReturn
0010F46A                            
0010F46A                            SCDMMPresent_FM2_p23:
0010F46A D006                       	dc.b		$d0,$6
0010F46C CD08                       	dc.b		$cd,$8
0010F46E E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F46F 02                         	dc.b		$2
0010F470 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F471 CC                         	dc.b		$cc
0010F472 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F473 CB                         	dc.b		$cb
0010F474 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F475 CA                         	dc.b		$ca
0010F476 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F477 C9                         	dc.b		$c9
0010F478 CB06                       	dc.b		$cb,$6
0010F47A C9                         	dc.b		$c9
0010F47B C6                         	dc.b		$c6
0010F47C C9                         	dc.b		$c9
0010F47D CB                         	dc.b		$cb
0010F47E 80                         	dc.b		$80
0010F47F CB02                       	dc.b		$cb,$2
0010F481 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F482 CB                         	dc.b		$cb
0010F483 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F484 CB                         	dc.b		$cb
0010F485 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F486 CC                         	dc.b		$cc
0010F487 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F488 CC                         	dc.b		$cc
0010F489 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F48A CC                         	dc.b		$cc
0010F48B E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F48C CD0C                       	dc.b		$cd,$c
0010F48E D006                       	dc.b		$d0,$6
0010F490 80                         	dc.b		$80
0010F491 E3                         	smpsReturn
0010F492                            
0010F492                            SCDMMPresent_FM2_p24:
0010F492 D006                       	dc.b		$d0,$6
0010F494 C608                       	dc.b		$c6,$8
0010F496 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F497 C502                       	dc.b		$c5,$2
0010F499 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F49A C428                       	dc.b		$c4,$28
0010F49C 800A                       	dc.b		$80,$a
0010F49E C006                       	dc.b		$c0,$6
0010F4A0 C1                         	dc.b		$c1
0010F4A1 C4                         	dc.b		$c4
0010F4A2 C6                         	dc.b		$c6
0010F4A3 C4                         	dc.b		$c4
0010F4A4 E3                         	smpsReturn
0010F4A5                            
0010F4A5                            SCDMMPresent_FM2_p25:
0010F4A5 C40C                       	dc.b		$c4,$c
0010F4A7 BF02                       	dc.b		$bf,$2
0010F4A9 C004                       	dc.b		$c0,$4
0010F4AB BF06                       	dc.b		$bf,$6
0010F4AD BD                         	dc.b		$bd
0010F4AE BF                         	dc.b		$bf
0010F4AF BA                         	dc.b		$ba
0010F4B0 BD                         	dc.b		$bd
0010F4B1 BF                         	dc.b		$bf
0010F4B2 C1                         	dc.b		$c1
0010F4B3 BD                         	dc.b		$bd
0010F4B4 BA                         	dc.b		$ba
0010F4B5 B8                         	dc.b		$b8
0010F4B6 BA                         	dc.b		$ba
0010F4B7 BD                         	dc.b		$bd
0010F4B8 B8                         	dc.b		$b8
0010F4B9 E3                         	smpsReturn
0010F4BA                            
0010F4BA                            SCDMMPresent_FM2_p26:
0010F4BA E706                       	dc.b		$e7,$6
0010F4BC B5                         	dc.b		$b5
0010F4BD B6                         	dc.b		$b6
0010F4BE B1                         	dc.b		$b1
0010F4BF B50C                       	dc.b		$b5,$c
0010F4C1 B606                       	dc.b		$b6,$6
0010F4C3 B51E                       	dc.b		$b5,$1e
0010F4C5 8006                       	dc.b		$80,$6
0010F4C7 B8                         	dc.b		$b8
0010F4C8 BA                         	dc.b		$ba
0010F4C9 B8                         	dc.b		$b8
0010F4CA E3                         	smpsReturn
0010F4CB                            
0010F4CB                            SCDMMPresent_FM2_p27:
0010F4CB C006                       	dc.b		$c0,$6
0010F4CD BD                         	dc.b		$bd
0010F4CE B8                         	dc.b		$b8
0010F4CF BA                         	dc.b		$ba
0010F4D0 BD                         	dc.b		$bd
0010F4D1 BF                         	dc.b		$bf
0010F4D2 BD                         	dc.b		$bd
0010F4D3 BF                         	dc.b		$bf
0010F4D4 BF02                       	dc.b		$bf,$2
0010F4D6 C004                       	dc.b		$c0,$4
0010F4D8 C406                       	dc.b		$c4,$6
0010F4DA C6                         	dc.b		$c6
0010F4DB BD                         	dc.b		$bd
0010F4DC 80                         	dc.b		$80
0010F4DD BA                         	dc.b		$ba
0010F4DE BD                         	dc.b		$bd
0010F4DF BF                         	dc.b		$bf
0010F4E0 E3                         	smpsReturn
0010F4E1                            
0010F4E1                            SCDMMPresent_FM2_p28:
0010F4E1 C006                       	dc.b		$c0,$6
0010F4E3 C1                         	dc.b		$c1
0010F4E4 C4                         	dc.b		$c4
0010F4E5 800C                       	dc.b		$80,$c
0010F4E7 C106                       	dc.b		$c1,$6
0010F4E9 C4                         	dc.b		$c4
0010F4EA C9                         	dc.b		$c9
0010F4EB 80                         	dc.b		$80
0010F4EC C1                         	dc.b		$c1
0010F4ED C4                         	dc.b		$c4
0010F4EE C9                         	dc.b		$c9
0010F4EF 80                         	dc.b		$80
0010F4F0 CB                         	dc.b		$cb
0010F4F1 80                         	dc.b		$80
0010F4F2 CB                         	dc.b		$cb
0010F4F3 E3                         	smpsReturn
0010F4F4                            
0010F4F4                            SCDMMPresent_FM2_p29:
0010F4F4 CD0C                       	dc.b		$cd,$c
0010F4F6 CE06                       	dc.b		$ce,$6
0010F4F8 D4                         	dc.b		$d4
0010F4F9 D1                         	dc.b		$d1
0010F4FA CE                         	dc.b		$ce
0010F4FB CD                         	dc.b		$cd
0010F4FC CB                         	dc.b		$cb
0010F4FD CE                         	dc.b		$ce
0010F4FE CD                         	dc.b		$cd
0010F4FF C8                         	dc.b		$c8
0010F500 C5                         	dc.b		$c5
0010F501 C2                         	dc.b		$c2
0010F502 C1                         	dc.b		$c1
0010F503 C1                         	dc.b		$c1
0010F504 BF                         	dc.b		$bf
0010F505 E3                         	smpsReturn
0010F506                            
0010F506                            SCDMMPresent_FM2_p2a:
0010F506 C12A                       	dc.b		$c1,$2a
0010F508 F000 05FA 19               	smpsmodset	0,5,-6,25
0010F50D E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F50E 24                         	dc.b		$24
0010F50F E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F510 F4                         	smpsmodoff
0010F511 12                         	dc.b		$12
0010F512 E3                         	smpsReturn
0010F513                            
0010F513                            SCDMMPresent_FM2_p2b:
0010F513 8060                       	dc.b		$80,$60
0010F515 E6F9                       	smpsaltervol	-7
0010F517 E3                         	smpsReturn
0010F518                            
0010F518                            ; Pattern data for FM3
0010F518                            SCDMMPresent_FM3_p0:
0010F518 EF00                       	smpsFMvoice	$0
0010F51A B512                       	dc.b		$b5,$12
0010F51C B4                         	dc.b		$b4
0010F51D B318                       	dc.b		$b3,$18
0010F51F B10C                       	dc.b		$b1,$c
0010F521 AE18                       	dc.b		$ae,$18
0010F523 E3                         	smpsReturn
0010F524                            
0010F524                            SCDMMPresent_FM3_p2:
0010F524 800C                       	dc.b		$80,$c
0010F526 EF03                       	smpsFMvoice	$3
0010F528 B5                         	dc.b		$b5
0010F529 8006                       	dc.b		$80,$6
0010F52B B50C                       	dc.b		$b5,$c
0010F52D 8006                       	dc.b		$80,$6
0010F52F B50C                       	dc.b		$b5,$c
0010F531 8006                       	dc.b		$80,$6
0010F533 B70C                       	dc.b		$b7,$c
0010F535 8006                       	dc.b		$80,$6
0010F537 B80C                       	dc.b		$b8,$c
0010F539 E3                         	smpsReturn
0010F53A                            
0010F53A                            SCDMMPresent_FM3_p3:
0010F53A 800C                       	dc.b		$80,$c
0010F53C B4                         	dc.b		$b4
0010F53D 8006                       	dc.b		$80,$6
0010F53F B40C                       	dc.b		$b4,$c
0010F541 8006                       	dc.b		$80,$6
0010F543 B80C                       	dc.b		$b8,$c
0010F545 8006                       	dc.b		$80,$6
0010F547 B60C                       	dc.b		$b6,$c
0010F549 8006                       	dc.b		$80,$6
0010F54B B40C                       	dc.b		$b4,$c
0010F54D E3                         	smpsReturn
0010F54E                            
0010F54E                            SCDMMPresent_FM3_p5:
0010F54E 800C                       	dc.b		$80,$c
0010F550 B4                         	dc.b		$b4
0010F551 8006                       	dc.b		$80,$6
0010F553 B10C                       	dc.b		$b1,$c
0010F555 8006                       	dc.b		$80,$6
0010F557 B80C                       	dc.b		$b8,$c
0010F559 8006                       	dc.b		$80,$6
0010F55B B60C                       	dc.b		$b6,$c
0010F55D 8006                       	dc.b		$80,$6
0010F55F B40C                       	dc.b		$b4,$c
0010F561 E3                         	smpsReturn
0010F562                            
0010F562                            SCDMMPresent_FM3_pa:
0010F562 EF01                       	smpsFMvoice	$1
0010F564 BD60                       	dc.b		$bd,$60
0010F566 E3                         	smpsReturn
0010F567                            
0010F567                            SCDMMPresent_FM3_pb:
0010F567 E760                       	dc.b		$e7,$60
0010F569 E3                         	smpsReturn
0010F56A                            
0010F56A                            SCDMMPresent_FM3_pc:
0010F56A EF01                       	smpsFMvoice	$1
0010F56C BD60                       	dc.b		$bd,$60
0010F56E E3                         	smpsReturn
0010F56F                            
0010F56F                            SCDMMPresent_FM3_p11:
0010F56F E748                       	dc.b		$e7,$48
0010F571 EF00                       	smpsFMvoice	$0
0010F573 A703                       	dc.b		$a7,$3
0010F575 A9                         	dc.b		$a9
0010F576 AC                         	dc.b		$ac
0010F577 AE                         	dc.b		$ae
0010F578 B1                         	dc.b		$b1
0010F579 B3                         	dc.b		$b3
0010F57A B5                         	dc.b		$b5
0010F57B B8                         	dc.b		$b8
0010F57C E3                         	smpsReturn
0010F57D                            
0010F57D                            SCDMMPresent_FM3_p12:
0010F57D BA18                       	dc.b		$ba,$18
0010F57F 8048                       	dc.b		$80,$48
0010F581 E3                         	smpsReturn
0010F582                            
0010F582                            SCDMMPresent_FM3_p16:
0010F582 EF00                       	smpsFMvoice	$0
0010F584 AE18                       	dc.b		$ae,$18
0010F586 80                         	dc.b		$80
0010F587 AE0C                       	dc.b		$ae,$c
0010F589 B1                         	dc.b		$b1
0010F58A 8012                       	dc.b		$80,$12
0010F58C B506                       	dc.b		$b5,$6
0010F58E E3                         	smpsReturn
0010F58F                            
0010F58F                            SCDMMPresent_FM3_p17:
0010F58F E706                       	dc.b		$e7,$6
0010F591 8042                       	dc.b		$80,$42
0010F593 B30C                       	dc.b		$b3,$c
0010F595 8006                       	dc.b		$80,$6
0010F597 B1                         	dc.b		$b1
0010F598 E3                         	smpsReturn
0010F599                            
0010F599                            SCDMMPresent_FM3_p18:
0010F599 E706                       	dc.b		$e7,$6
0010F59B 8036                       	dc.b		$80,$36
0010F59D AE18                       	dc.b		$ae,$18
0010F59F 800C                       	dc.b		$80,$c
0010F5A1 E3                         	smpsReturn
0010F5A2                            
0010F5A2                            SCDMMPresent_FM3_p19:
0010F5A2 E730                       	dc.b		$e7,$30
0010F5A4 9103                       	dc.b		$91,$3
0010F5A6 94                         	dc.b		$94
0010F5A7 98                         	dc.b		$98
0010F5A8 9B                         	dc.b		$9b
0010F5A9 9D                         	dc.b		$9d
0010F5AA A0                         	dc.b		$a0
0010F5AB A4                         	dc.b		$a4
0010F5AC A7                         	dc.b		$a7
0010F5AD A9                         	dc.b		$a9
0010F5AE AC                         	dc.b		$ac
0010F5AF B0                         	dc.b		$b0
0010F5B0 B3                         	dc.b		$b3
0010F5B1 800C                       	dc.b		$80,$c
0010F5B3 E3                         	smpsReturn
0010F5B4                            
0010F5B4                            SCDMMPresent_FM3_p1d:
0010F5B4 B512                       	dc.b		$b5,$12
0010F5B6 B4                         	dc.b		$b4
0010F5B7 B318                       	dc.b		$b3,$18
0010F5B9 B10C                       	dc.b		$b1,$c
0010F5BB AE06                       	dc.b		$ae,$6
0010F5BD AE                         	dc.b		$ae
0010F5BE AE                         	dc.b		$ae
0010F5BF AE                         	dc.b		$ae
0010F5C0 E3                         	smpsReturn
0010F5C1                            
0010F5C1                            SCDMMPresent_FM3_p1e:
0010F5C1 B512                       	dc.b		$b5,$12
0010F5C3 C0                         	dc.b		$c0
0010F5C4 BF18                       	dc.b		$bf,$18
0010F5C6 BD0C                       	dc.b		$bd,$c
0010F5C8 BA18                       	dc.b		$ba,$18
0010F5CA E3                         	smpsReturn
0010F5CB                            
0010F5CB                            SCDMMPresent_FM3_p21:
0010F5CB B512                       	dc.b		$b5,$12
0010F5CD B4                         	dc.b		$b4
0010F5CE B318                       	dc.b		$b3,$18
0010F5D0 B10C                       	dc.b		$b1,$c
0010F5D2 E6F9                       	smpsaltervol	-7
0010F5D4 E60A                       	smpsaltervol	10
0010F5D6 EF04                       	smpsFMvoice	$4
0010F5D8 B806                       	dc.b		$b8,$6
0010F5DA BA                         	dc.b		$ba
0010F5DB BF                         	dc.b		$bf
0010F5DC C1                         	dc.b		$c1
0010F5DD E3                         	smpsReturn
0010F5DE                            
0010F5DE                            SCDMMPresent_FM3_p22:
0010F5DE C612                       	dc.b		$c6,$12
0010F5E0 C106                       	dc.b		$c1,$6
0010F5E2 80                         	dc.b		$80
0010F5E3 C4                         	dc.b		$c4
0010F5E4 C6                         	dc.b		$c6
0010F5E5 C4                         	dc.b		$c4
0010F5E6 C402                       	dc.b		$c4,$2
0010F5E8 E110                       	smpsalternote	16
0010F5EA E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F5EB C4                         	dc.b		$c4
0010F5EC E110                       	smpsalternote	16
0010F5EE E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F5EF C4                         	dc.b		$c4
0010F5F0 E100                       	smpsalternote	0
0010F5F2 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F5F3 C5                         	dc.b		$c5
0010F5F4 E110                       	smpsalternote	16
0010F5F6 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F5F7 C5                         	dc.b		$c5
0010F5F8 E110                       	smpsalternote	16
0010F5FA E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F5FB C5                         	dc.b		$c5
0010F5FC E100                       	smpsalternote	0
0010F5FE E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F5FF C61E                       	dc.b		$c6,$1e
0010F601 E605                       	smpsaltervol	5
0010F603 E080                       	smpspan	panleft,0
0010F605 D006                       	dc.b		$d0,$6
0010F607 E3                         	smpsReturn
0010F608                            
0010F608                            SCDMMPresent_FM3_p23:
0010F608 E706                       	dc.b		$e7,$6
0010F60A D0                         	dc.b		$d0
0010F60B CD08                       	dc.b		$cd,$8
0010F60D E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F60E 02                         	dc.b		$2
0010F60F E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F610 CC                         	dc.b		$cc
0010F611 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F612 CB                         	dc.b		$cb
0010F613 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F614 CA                         	dc.b		$ca
0010F615 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F616 C9                         	dc.b		$c9
0010F617 CB06                       	dc.b		$cb,$6
0010F619 C9                         	dc.b		$c9
0010F61A C6                         	dc.b		$c6
0010F61B C9                         	dc.b		$c9
0010F61C CB                         	dc.b		$cb
0010F61D 80                         	dc.b		$80
0010F61E CB02                       	dc.b		$cb,$2
0010F620 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F621 CB                         	dc.b		$cb
0010F622 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F623 CB                         	dc.b		$cb
0010F624 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F625 CC                         	dc.b		$cc
0010F626 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F627 CC                         	dc.b		$cc
0010F628 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F629 CC                         	dc.b		$cc
0010F62A E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F62B CD0C                       	dc.b		$cd,$c
0010F62D D006                       	dc.b		$d0,$6
0010F62F E3                         	smpsReturn
0010F630                            
0010F630                            SCDMMPresent_FM3_p24:
0010F630 8006                       	dc.b		$80,$6
0010F632 D0                         	dc.b		$d0
0010F633 C608                       	dc.b		$c6,$8
0010F635 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F636 C502                       	dc.b		$c5,$2
0010F638 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F639 C428                       	dc.b		$c4,$28
0010F63B 800A                       	dc.b		$80,$a
0010F63D C006                       	dc.b		$c0,$6
0010F63F C1                         	dc.b		$c1
0010F640 C4                         	dc.b		$c4
0010F641 C6                         	dc.b		$c6
0010F642 E3                         	smpsReturn
0010F643                            
0010F643                            SCDMMPresent_FM3_p25:
0010F643 E706                       	dc.b		$e7,$6
0010F645 BF02                       	dc.b		$bf,$2
0010F647 C004                       	dc.b		$c0,$4
0010F649 BF06                       	dc.b		$bf,$6
0010F64B BD                         	dc.b		$bd
0010F64C BF                         	dc.b		$bf
0010F64D BA                         	dc.b		$ba
0010F64E BD                         	dc.b		$bd
0010F64F BF                         	dc.b		$bf
0010F650 C1                         	dc.b		$c1
0010F651 BD                         	dc.b		$bd
0010F652 BA                         	dc.b		$ba
0010F653 B8                         	dc.b		$b8
0010F654 BA                         	dc.b		$ba
0010F655 BD                         	dc.b		$bd
0010F656 80                         	dc.b		$80
0010F657 B303                       	dc.b		$b3,$3
0010F659 B4                         	dc.b		$b4
0010F65A E3                         	smpsReturn
0010F65B                            
0010F65B                            SCDMMPresent_FM3_p26:
0010F65B B306                       	dc.b		$b3,$6
0010F65D B1                         	dc.b		$b1
0010F65E B3                         	dc.b		$b3
0010F65F AE                         	dc.b		$ae
0010F660 B10C                       	dc.b		$b1,$c
0010F662 B306                       	dc.b		$b3,$6
0010F664 B11E                       	dc.b		$b1,$1e
0010F666 800C                       	dc.b		$80,$c
0010F668 E6FB                       	smpsaltervol	-5
0010F66A E0C0                       	smpspan	pancentre,0
0010F66C B806                       	dc.b		$b8,$6
0010F66E BA                         	dc.b		$ba
0010F66F E3                         	smpsReturn
0010F670                            
0010F670                            SCDMMPresent_FM3_p27:
0010F670 B806                       	dc.b		$b8,$6
0010F672 C0                         	dc.b		$c0
0010F673 BD                         	dc.b		$bd
0010F674 B8                         	dc.b		$b8
0010F675 BA                         	dc.b		$ba
0010F676 BD                         	dc.b		$bd
0010F677 BF                         	dc.b		$bf
0010F678 BD                         	dc.b		$bd
0010F679 BF                         	dc.b		$bf
0010F67A BF02                       	dc.b		$bf,$2
0010F67C C004                       	dc.b		$c0,$4
0010F67E C406                       	dc.b		$c4,$6
0010F680 C6                         	dc.b		$c6
0010F681 BD                         	dc.b		$bd
0010F682 80                         	dc.b		$80
0010F683 E605                       	smpsaltervol	5
0010F685 E080                       	smpspan	panleft,0
0010F687 BA                         	dc.b		$ba
0010F688 BD                         	dc.b		$bd
0010F689 E3                         	smpsReturn
0010F68A                            
0010F68A                            SCDMMPresent_FM3_p28:
0010F68A BF06                       	dc.b		$bf,$6
0010F68C C0                         	dc.b		$c0
0010F68D C1                         	dc.b		$c1
0010F68E C4                         	dc.b		$c4
0010F68F 800C                       	dc.b		$80,$c
0010F691 C106                       	dc.b		$c1,$6
0010F693 C4                         	dc.b		$c4
0010F694 C9                         	dc.b		$c9
0010F695 80                         	dc.b		$80
0010F696 C1                         	dc.b		$c1
0010F697 C4                         	dc.b		$c4
0010F698 C9                         	dc.b		$c9
0010F699 80                         	dc.b		$80
0010F69A CB                         	dc.b		$cb
0010F69B 80                         	dc.b		$80
0010F69C E3                         	smpsReturn
0010F69D                            
0010F69D                            SCDMMPresent_FM3_p29:
0010F69D CB06                       	dc.b		$cb,$6
0010F69F CD0C                       	dc.b		$cd,$c
0010F6A1 CE06                       	dc.b		$ce,$6
0010F6A3 D4                         	dc.b		$d4
0010F6A4 D1                         	dc.b		$d1
0010F6A5 CE                         	dc.b		$ce
0010F6A6 CD                         	dc.b		$cd
0010F6A7 CB                         	dc.b		$cb
0010F6A8 CE                         	dc.b		$ce
0010F6A9 CD                         	dc.b		$cd
0010F6AA C8                         	dc.b		$c8
0010F6AB C5                         	dc.b		$c5
0010F6AC C2                         	dc.b		$c2
0010F6AD C1                         	dc.b		$c1
0010F6AE C1                         	dc.b		$c1
0010F6AF E3                         	smpsReturn
0010F6B0                            
0010F6B0                            SCDMMPresent_FM3_p2a:
0010F6B0 BF06                       	dc.b		$bf,$6
0010F6B2 C12A                       	dc.b		$c1,$2a
0010F6B4 F000 05FA 19               	smpsmodset	0,5,-6,25
0010F6B9 E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F6BA 24                         	dc.b		$24
0010F6BB F4                         	smpsmodoff
0010F6BC E7                         	dc.b		smpsNoAttack ; max-speed portamento
0010F6BD 0C                         	dc.b		$c
0010F6BE E3                         	smpsReturn
0010F6BF                            
0010F6BF                            SCDMMPresent_FM3_p2b:
0010F6BF E706                       	dc.b		$e7,$6
0010F6C1 805A                       	dc.b		$80,$5a
0010F6C3 E6FB                       	smpsaltervol	-5
0010F6C5 E0C0                       	smpspan	pancentre,0
0010F6C7 E6F6                       	smpsaltervol	-10
0010F6C9 E3                         	smpsReturn
0010F6CA                            
0010F6CA                            ; Pattern data for FM4
0010F6CA                            SCDMMPresent_FM4_p0:
0010F6CA EF01                       	smpsFMvoice	$1
0010F6CC BD54                       	dc.b		$bd,$54
0010F6CE 800C                       	dc.b		$80,$c
0010F6D0 E3                         	smpsReturn
0010F6D1                            
0010F6D1                            SCDMMPresent_FM4_p1:
0010F6D1 BD60                       	dc.b		$bd,$60
0010F6D3 E3                         	smpsReturn
0010F6D4                            
0010F6D4                            SCDMMPresent_FM4_p2:
0010F6D4 EF01                       	smpsFMvoice	$1
0010F6D6 B560                       	dc.b		$b5,$60
0010F6D8 E3                         	smpsReturn
0010F6D9                            
0010F6D9                            SCDMMPresent_FM4_p3:
0010F6D9 B460                       	dc.b		$b4,$60
0010F6DB E3                         	smpsReturn
0010F6DC                            
0010F6DC                            SCDMMPresent_FM4_pa:
0010F6DC BA60                       	dc.b		$ba,$60
0010F6DE E3                         	smpsReturn
0010F6DF                            
0010F6DF                            SCDMMPresent_FM4_pb:
0010F6DF E748                       	dc.b		$e7,$48
0010F6E1 BA18                       	dc.b		$ba,$18
0010F6E3 E3                         	smpsReturn
0010F6E4                            
0010F6E4                            SCDMMPresent_FM4_pc:
0010F6E4 EF01                       	smpsFMvoice	$1
0010F6E6 BA60                       	dc.b		$ba,$60
0010F6E8 E3                         	smpsReturn
0010F6E9                            
0010F6E9                            SCDMMPresent_FM4_pd:
0010F6E9 E760                       	dc.b		$e7,$60
0010F6EB E3                         	smpsReturn
0010F6EC                            
0010F6EC                            SCDMMPresent_FM4_p11:
0010F6EC E748                       	dc.b		$e7,$48
0010F6EE EF03                       	smpsFMvoice	$3
0010F6F0 E6E4                       	smpsaltervol	-28
0010F6F2 E918                       	smpsalterpitch	24
0010F6F4 E0C0                       	smpspan		pancentre,0
0010F6F6 8F03                       	dc.b		$8f,$3
0010F6F8 91                         	dc.b		$91
0010F6F9 94                         	dc.b		$94
0010F6FA 96                         	dc.b		$96
0010F6FB 99                         	dc.b		$99
0010F6FC 9B                         	dc.b		$9b
0010F6FD 9D                         	dc.b		$9d
0010F6FE A0                         	dc.b		$a0
0010F6FF E3                         	smpsReturn
0010F700                            
0010F700                            SCDMMPresent_FM4_p12:
0010F700 A00C                       	dc.b		$a0,$c
0010F702 A2                         	dc.b		$a2
0010F703 A206                       	dc.b		$a2,$6
0010F705 A00C                       	dc.b		$a0,$c
0010F707 06                         	dc.b		$6
0010F708 A2                         	dc.b		$a2
0010F709 94                         	dc.b		$94
0010F70A 9D                         	dc.b		$9d
0010F70B A00C                       	dc.b		$a0,$c
0010F70D 8A06                       	dc.b		$8a,$6
0010F70F A2                         	dc.b		$a2
0010F710 96                         	dc.b		$96
0010F711 E3                         	smpsReturn
0010F712                            
0010F712                            SCDMMPresent_FM4_p13:
0010F712 A00C                       	dc.b		$a0,$c
0010F714 A2                         	dc.b		$a2
0010F715 A206                       	dc.b		$a2,$6
0010F717 A00C                       	dc.b		$a0,$c
0010F719 06                         	dc.b		$6
0010F71A A2                         	dc.b		$a2
0010F71B 94                         	dc.b		$94
0010F71C 9D                         	dc.b		$9d
0010F71D A00C                       	dc.b		$a0,$c
0010F71F 9606                       	dc.b		$96,$6
0010F721 A2                         	dc.b		$a2
0010F722 96                         	dc.b		$96
0010F723 E3                         	smpsReturn
0010F724                            
0010F724                            SCDMMPresent_FM4_p14:
0010F724 A00C                       	dc.b		$a0,$c
0010F726 A2                         	dc.b		$a2
0010F727 A206                       	dc.b		$a2,$6
0010F729 A00C                       	dc.b		$a0,$c
0010F72B 06                         	dc.b		$6
0010F72C A2                         	dc.b		$a2
0010F72D A0                         	dc.b		$a0
0010F72E 9D                         	dc.b		$9d
0010F72F A00C                       	dc.b		$a0,$c
0010F731 9606                       	dc.b		$96,$6
0010F733 A2                         	dc.b		$a2
0010F734 96                         	dc.b		$96
0010F735 E3                         	smpsReturn
0010F736                            
0010F736                            SCDMMPresent_FM4_p18:
0010F736 8060                       	dc.b		$80,$60
0010F738 E3                         	smpsReturn
0010F739                            
0010F739                            SCDMMPresent_FM4_p1a:
0010F739 EF01                       	smpsFMvoice	$1
0010F73B C160                       	dc.b		$c1,$60
0010F73D E3                         	smpsReturn
0010F73E                            
0010F73E                            SCDMMPresent_FM4_p1b:
0010F73E E748                       	dc.b		$e7,$48
0010F740 C618                       	dc.b		$c6,$18
0010F742 E3                         	smpsReturn
0010F743                            
0010F743                            SCDMMPresent_FM4_p1c:
0010F743 C060                       	dc.b		$c0,$60
0010F745 E3                         	smpsReturn
0010F746                            
0010F746                            SCDMMPresent_FM4_p24:
0010F746 EF01                       	smpsFMvoice	$1
0010F748 B360                       	dc.b		$b3,$60
0010F74A E3                         	smpsReturn
0010F74B                            
0010F74B                            SCDMMPresent_FM4_p27:
0010F74B B760                       	dc.b		$b7,$60
0010F74D E3                         	smpsReturn
0010F74E                            
0010F74E                            SCDMMPresent_FM4_p28:
0010F74E B860                       	dc.b		$b8,$60
0010F750 E3                         	smpsReturn
0010F751                            
0010F751                            SCDMMPresent_FM4_p29:
0010F751 B830                       	dc.b		$b8,$30
0010F753 B6                         	dc.b		$b6
0010F754 E3                         	smpsReturn
0010F755                            
0010F755                            ; Pattern data for FM5
0010F755                            SCDMMPresent_FM5_p0:
0010F755 EF01                       	smpsFMvoice	$1
0010F757 B860                       	dc.b		$b8,$60
0010F759 E3                         	smpsReturn
0010F75A                            
0010F75A                            SCDMMPresent_FM5_p1:
0010F75A B860                       	dc.b		$b8,$60
0010F75C E3                         	smpsReturn
0010F75D                            
0010F75D                            SCDMMPresent_FM5_p2:
0010F75D EF01                       	smpsFMvoice	$1
0010F75F B160                       	dc.b		$b1,$60
0010F761 E3                         	smpsReturn
0010F762                            
0010F762                            SCDMMPresent_FM5_pa:
0010F762 EF01                       	smpsFMvoice	$1
0010F764 B560                       	dc.b		$b5,$60
0010F766 E3                         	smpsReturn
0010F767                            
0010F767                            SCDMMPresent_FM5_pb:
0010F767 E760                       	dc.b		$e7,$60
0010F769 E3                         	smpsReturn
0010F76A                            
0010F76A                            SCDMMPresent_FM5_pc:
0010F76A EF01                       	smpsFMvoice	$1
0010F76C B460                       	dc.b		$b4,$60
0010F76E E3                         	smpsReturn
0010F76F                            
0010F76F                            SCDMMPresent_FM5_p11:
0010F76F E748                       	dc.b		$e7,$48
0010F771 E6E4                       	smpsaltervol	-28
0010F773 E918                       	smpsalterpitch	24
0010F775 E90C                       	smpsalterpitch	12
0010F777 EF03                       	smpsFMvoice	$3
0010F779 8303                       	dc.b		$83,$3
0010F77B 85                         	dc.b		$85
0010F77C 88                         	dc.b		$88
0010F77D 8A                         	dc.b		$8a
0010F77E 8D                         	dc.b		$8d
0010F77F 8F                         	dc.b		$8f
0010F780 91                         	dc.b		$91
0010F781 94                         	dc.b		$94
0010F782 E9F4                       	smpsalterpitch	-12
0010F784 E3                         	smpsReturn
0010F785                            
0010F785                            SCDMMPresent_FM5_p12:
0010F785 940C                       	dc.b		$94,$c
0010F787 96                         	dc.b		$96
0010F788 9606                       	dc.b		$96,$6
0010F78A 940C                       	dc.b		$94,$c
0010F78C 06                         	dc.b		$6
0010F78D 96                         	dc.b		$96
0010F78E A0                         	dc.b		$a0
0010F78F 91                         	dc.b		$91
0010F790 940C                       	dc.b		$94,$c
0010F792 9606                       	dc.b		$96,$6
0010F794 96                         	dc.b		$96
0010F795 8A                         	dc.b		$8a
0010F796 E3                         	smpsReturn
0010F797                            
0010F797                            SCDMMPresent_FM5_p13:
0010F797 940C                       	dc.b		$94,$c
0010F799 96                         	dc.b		$96
0010F79A 9606                       	dc.b		$96,$6
0010F79C 940C                       	dc.b		$94,$c
0010F79E 06                         	dc.b		$6
0010F79F 96                         	dc.b		$96
0010F7A0 A0                         	dc.b		$a0
0010F7A1 91                         	dc.b		$91
0010F7A2 940C                       	dc.b		$94,$c
0010F7A4 8A06                       	dc.b		$8a,$6
0010F7A6 96                         	dc.b		$96
0010F7A7 8A                         	dc.b		$8a
0010F7A8 E3                         	smpsReturn
0010F7A9                            
0010F7A9                            SCDMMPresent_FM5_p14:
0010F7A9 940C                       	dc.b		$94,$c
0010F7AB 96                         	dc.b		$96
0010F7AC 9606                       	dc.b		$96,$6
0010F7AE 940C                       	dc.b		$94,$c
0010F7B0 06                         	dc.b		$6
0010F7B1 96                         	dc.b		$96
0010F7B2 94                         	dc.b		$94
0010F7B3 91                         	dc.b		$91
0010F7B4 940C                       	dc.b		$94,$c
0010F7B6 8A06                       	dc.b		$8a,$6
0010F7B8 96                         	dc.b		$96
0010F7B9 8A                         	dc.b		$8a
0010F7BA E3                         	smpsReturn
0010F7BB                            
0010F7BB                            SCDMMPresent_FM5_p18:
0010F7BB 8060                       	dc.b		$80,$60
0010F7BD E3                         	smpsReturn
0010F7BE                            
0010F7BE                            SCDMMPresent_FM5_p1a:
0010F7BE EF01                       	smpsFMvoice	$1
0010F7C0 BD60                       	dc.b		$bd,$60
0010F7C2 E3                         	smpsReturn
0010F7C3                            
0010F7C3                            SCDMMPresent_FM5_p1b:
0010F7C3 E748                       	dc.b		$e7,$48
0010F7C5 C118                       	dc.b		$c1,$18
0010F7C7 E3                         	smpsReturn
0010F7C8                            
0010F7C8                            SCDMMPresent_FM5_p24:
0010F7C8 EF01                       	smpsFMvoice	$1
0010F7CA B060                       	dc.b		$b0,$60
0010F7CC E3                         	smpsReturn
0010F7CD                            
0010F7CD                            SCDMMPresent_FM5_p29:
0010F7CD B360                       	dc.b		$b3,$60
0010F7CF E3                         	smpsReturn
0010F7D0                            
0010F7D0                            SCDMMPresent_FM5_p2b:
0010F7D0 E748                       	dc.b		$e7,$48
0010F7D2 B518                       	dc.b		$b5,$18
0010F7D4 E3                         	smpsReturn
0010F7D5                            
0010F7D5                            ; Pattern data for PSG1
0010F7D5                            SCDMMPresent_PSG1_p0:
0010F7D5 8060                       	dc.b		$80,$60
0010F7D7 E3                         	smpsReturn
0010F7D8                            
0010F7D8                            SCDMMPresent_PSG1_p1:
0010F7D8 E760                       	dc.b		$e7,$60
0010F7DA E3                         	smpsReturn
0010F7DB                            
0010F7DB                            SCDMMPresent_PSG1_p16:
0010F7DB F500                       	smpsPSGvoice	$0
0010F7DD AE04                       	dc.b		$ae,$4
0010F7DF 8002                       	dc.b		$80,$2
0010F7E1 B804                       	dc.b		$b8,$4
0010F7E3 8002                       	dc.b		$80,$2
0010F7E5 C404                       	dc.b		$c4,$4
0010F7E7 8002                       	dc.b		$80,$2
0010F7E9 AE04                       	dc.b		$ae,$4
0010F7EB 8002                       	dc.b		$80,$2
0010F7ED B504                       	dc.b		$b5,$4
0010F7EF 8002                       	dc.b		$80,$2
0010F7F1 BA04                       	dc.b		$ba,$4
0010F7F3 8002                       	dc.b		$80,$2
0010F7F5 BD04                       	dc.b		$bd,$4
0010F7F7 8002                       	dc.b		$80,$2
0010F7F9 C104                       	dc.b		$c1,$4
0010F7FB 8002                       	dc.b		$80,$2
0010F7FD AE04                       	dc.b		$ae,$4
0010F7FF 8002                       	dc.b		$80,$2
0010F801 B804                       	dc.b		$b8,$4
0010F803 8002                       	dc.b		$80,$2
0010F805 C104                       	dc.b		$c1,$4
0010F807 8002                       	dc.b		$80,$2
0010F809 C404                       	dc.b		$c4,$4
0010F80B 8002                       	dc.b		$80,$2
0010F80D BD04                       	dc.b		$bd,$4
0010F80F 8002                       	dc.b		$80,$2
0010F811 B804                       	dc.b		$b8,$4
0010F813 8002                       	dc.b		$80,$2
0010F815 BA04                       	dc.b		$ba,$4
0010F817 8002                       	dc.b		$80,$2
0010F819 C104                       	dc.b		$c1,$4
0010F81B 8002                       	dc.b		$80,$2
0010F81D E3                         	smpsReturn
0010F81E                            
0010F81E                            SCDMMPresent_PSG1_p17:
0010F81E AE04                       	dc.b		$ae,$4
0010F820 8002                       	dc.b		$80,$2
0010F822 B804                       	dc.b		$b8,$4
0010F824 8002                       	dc.b		$80,$2
0010F826 C404                       	dc.b		$c4,$4
0010F828 8002                       	dc.b		$80,$2
0010F82A AE04                       	dc.b		$ae,$4
0010F82C 8002                       	dc.b		$80,$2
0010F82E B504                       	dc.b		$b5,$4
0010F830 8002                       	dc.b		$80,$2
0010F832 BA04                       	dc.b		$ba,$4
0010F834 8002                       	dc.b		$80,$2
0010F836 BD04                       	dc.b		$bd,$4
0010F838 8002                       	dc.b		$80,$2
0010F83A C104                       	dc.b		$c1,$4
0010F83C 8002                       	dc.b		$80,$2
0010F83E AE04                       	dc.b		$ae,$4
0010F840 8002                       	dc.b		$80,$2
0010F842 B804                       	dc.b		$b8,$4
0010F844 8002                       	dc.b		$80,$2
0010F846 C104                       	dc.b		$c1,$4
0010F848 8002                       	dc.b		$80,$2
0010F84A C404                       	dc.b		$c4,$4
0010F84C 8002                       	dc.b		$80,$2
0010F84E B804                       	dc.b		$b8,$4
0010F850 8002                       	dc.b		$80,$2
0010F852 BD04                       	dc.b		$bd,$4
0010F854 8002                       	dc.b		$80,$2
0010F856 C104                       	dc.b		$c1,$4
0010F858 8002                       	dc.b		$80,$2
0010F85A BD04                       	dc.b		$bd,$4
0010F85C 8002                       	dc.b		$80,$2
0010F85E E3                         	smpsReturn
0010F85F                            
0010F85F                            SCDMMPresent_PSG1_p18:
0010F85F AE04                       	dc.b		$ae,$4
0010F861 8002                       	dc.b		$80,$2
0010F863 B804                       	dc.b		$b8,$4
0010F865 8002                       	dc.b		$80,$2
0010F867 C404                       	dc.b		$c4,$4
0010F869 8002                       	dc.b		$80,$2
0010F86B AE04                       	dc.b		$ae,$4
0010F86D 8002                       	dc.b		$80,$2
0010F86F B404                       	dc.b		$b4,$4
0010F871 8002                       	dc.b		$80,$2
0010F873 BA04                       	dc.b		$ba,$4
0010F875 8002                       	dc.b		$80,$2
0010F877 BD04                       	dc.b		$bd,$4
0010F879 8002                       	dc.b		$80,$2
0010F87B C004                       	dc.b		$c0,$4
0010F87D 8002                       	dc.b		$80,$2
0010F87F AE04                       	dc.b		$ae,$4
0010F881 8002                       	dc.b		$80,$2
0010F883 B804                       	dc.b		$b8,$4
0010F885 8002                       	dc.b		$80,$2
0010F887 C004                       	dc.b		$c0,$4
0010F889 8002                       	dc.b		$80,$2
0010F88B C404                       	dc.b		$c4,$4
0010F88D 8002                       	dc.b		$80,$2
0010F88F C604                       	dc.b		$c6,$4
0010F891 8002                       	dc.b		$80,$2
0010F893 C404                       	dc.b		$c4,$4
0010F895 8002                       	dc.b		$80,$2
0010F897 C804                       	dc.b		$c8,$4
0010F899 8002                       	dc.b		$80,$2
0010F89B C004                       	dc.b		$c0,$4
0010F89D 8002                       	dc.b		$80,$2
0010F89F E3                         	smpsReturn
0010F8A0                            
0010F8A0                            SCDMMPresent_PSG1_p19:
0010F8A0 B404                       	dc.b		$b4,$4
0010F8A2 8002                       	dc.b		$80,$2
0010F8A4 C404                       	dc.b		$c4,$4
0010F8A6 8002                       	dc.b		$80,$2
0010F8A8 C604                       	dc.b		$c6,$4
0010F8AA 8002                       	dc.b		$80,$2
0010F8AC B404                       	dc.b		$b4,$4
0010F8AE 8002                       	dc.b		$80,$2
0010F8B0 C904                       	dc.b		$c9,$4
0010F8B2 8002                       	dc.b		$80,$2
0010F8B4 C804                       	dc.b		$c8,$4
0010F8B6 8002                       	dc.b		$80,$2
0010F8B8 B404                       	dc.b		$b4,$4
0010F8BA 8002                       	dc.b		$80,$2
0010F8BC C904                       	dc.b		$c9,$4
0010F8BE 8002                       	dc.b		$80,$2
0010F8C0 B404                       	dc.b		$b4,$4
0010F8C2 8002                       	dc.b		$80,$2
0010F8C4 C604                       	dc.b		$c6,$4
0010F8C6 8002                       	dc.b		$80,$2
0010F8C8 C804                       	dc.b		$c8,$4
0010F8CA 8002                       	dc.b		$80,$2
0010F8CC C404                       	dc.b		$c4,$4
0010F8CE 8002                       	dc.b		$80,$2
0010F8D0 B404                       	dc.b		$b4,$4
0010F8D2 8002                       	dc.b		$80,$2
0010F8D4 C804                       	dc.b		$c8,$4
0010F8D6 8002                       	dc.b		$80,$2
0010F8D8 C604                       	dc.b		$c6,$4
0010F8DA 8002                       	dc.b		$80,$2
0010F8DC C404                       	dc.b		$c4,$4
0010F8DE 8002                       	dc.b		$80,$2
0010F8E0 E3                         	smpsReturn
0010F8E1                            
0010F8E1                            ; Pattern data for PSG2
0010F8E1                            SCDMMPresent_PSG2_p0:
0010F8E1 8060                       	dc.b		$80,$60
0010F8E3 E3                         	smpsReturn
0010F8E4                            
0010F8E4                            SCDMMPresent_PSG2_p1:
0010F8E4 E760                       	dc.b		$e7,$60
0010F8E6 E3                         	smpsReturn
0010F8E7                            
0010F8E7                            SCDMMPresent_PSG2_p16:
0010F8E7 800C                       	dc.b		$80,$c
0010F8E9 F500                       	smpsPSGvoice	$0
0010F8EB AE04                       	dc.b		$ae,$4
0010F8ED 8002                       	dc.b		$80,$2
0010F8EF B804                       	dc.b		$b8,$4
0010F8F1 8002                       	dc.b		$80,$2
0010F8F3 C404                       	dc.b		$c4,$4
0010F8F5 8002                       	dc.b		$80,$2
0010F8F7 AE04                       	dc.b		$ae,$4
0010F8F9 8002                       	dc.b		$80,$2
0010F8FB B504                       	dc.b		$b5,$4
0010F8FD 8002                       	dc.b		$80,$2
0010F8FF BA04                       	dc.b		$ba,$4
0010F901 8002                       	dc.b		$80,$2
0010F903 BD04                       	dc.b		$bd,$4
0010F905 8002                       	dc.b		$80,$2
0010F907 C104                       	dc.b		$c1,$4
0010F909 8002                       	dc.b		$80,$2
0010F90B AE04                       	dc.b		$ae,$4
0010F90D 8002                       	dc.b		$80,$2
0010F90F B804                       	dc.b		$b8,$4
0010F911 8002                       	dc.b		$80,$2
0010F913 C104                       	dc.b		$c1,$4
0010F915 8002                       	dc.b		$80,$2
0010F917 C404                       	dc.b		$c4,$4
0010F919 8002                       	dc.b		$80,$2
0010F91B BD04                       	dc.b		$bd,$4
0010F91D 8002                       	dc.b		$80,$2
0010F91F B804                       	dc.b		$b8,$4
0010F921 8002                       	dc.b		$80,$2
0010F923 E3                         	smpsReturn
0010F924                            
0010F924                            SCDMMPresent_PSG2_p17:
0010F924 BA04                       	dc.b		$ba,$4
0010F926 8002                       	dc.b		$80,$2
0010F928 C104                       	dc.b		$c1,$4
0010F92A 8002                       	dc.b		$80,$2
0010F92C AE04                       	dc.b		$ae,$4
0010F92E 8002                       	dc.b		$80,$2
0010F930 B804                       	dc.b		$b8,$4
0010F932 8002                       	dc.b		$80,$2
0010F934 C404                       	dc.b		$c4,$4
0010F936 8002                       	dc.b		$80,$2
0010F938 AE04                       	dc.b		$ae,$4
0010F93A 8002                       	dc.b		$80,$2
0010F93C B504                       	dc.b		$b5,$4
0010F93E 8002                       	dc.b		$80,$2
0010F940 BA04                       	dc.b		$ba,$4
0010F942 8002                       	dc.b		$80,$2
0010F944 BD04                       	dc.b		$bd,$4
0010F946 8002                       	dc.b		$80,$2
0010F948 C104                       	dc.b		$c1,$4
0010F94A 8002                       	dc.b		$80,$2
0010F94C AE04                       	dc.b		$ae,$4
0010F94E 8002                       	dc.b		$80,$2
0010F950 B804                       	dc.b		$b8,$4
0010F952 8002                       	dc.b		$80,$2
0010F954 C104                       	dc.b		$c1,$4
0010F956 8002                       	dc.b		$80,$2
0010F958 C404                       	dc.b		$c4,$4
0010F95A 8002                       	dc.b		$80,$2
0010F95C B804                       	dc.b		$b8,$4
0010F95E 8002                       	dc.b		$80,$2
0010F960 BD04                       	dc.b		$bd,$4
0010F962 8002                       	dc.b		$80,$2
0010F964 E3                         	smpsReturn
0010F965                            
0010F965                            SCDMMPresent_PSG2_p18:
0010F965 C104                       	dc.b		$c1,$4
0010F967 8002                       	dc.b		$80,$2
0010F969 BD04                       	dc.b		$bd,$4
0010F96B 8002                       	dc.b		$80,$2
0010F96D AE04                       	dc.b		$ae,$4
0010F96F 8002                       	dc.b		$80,$2
0010F971 B804                       	dc.b		$b8,$4
0010F973 8002                       	dc.b		$80,$2
0010F975 C404                       	dc.b		$c4,$4
0010F977 8002                       	dc.b		$80,$2
0010F979 AE04                       	dc.b		$ae,$4
0010F97B 8002                       	dc.b		$80,$2
0010F97D B404                       	dc.b		$b4,$4
0010F97F 8002                       	dc.b		$80,$2
0010F981 BA04                       	dc.b		$ba,$4
0010F983 8002                       	dc.b		$80,$2
0010F985 BD04                       	dc.b		$bd,$4
0010F987 8002                       	dc.b		$80,$2
0010F989 C004                       	dc.b		$c0,$4
0010F98B 8002                       	dc.b		$80,$2
0010F98D AE04                       	dc.b		$ae,$4
0010F98F 8002                       	dc.b		$80,$2
0010F991 B804                       	dc.b		$b8,$4
0010F993 8002                       	dc.b		$80,$2
0010F995 C004                       	dc.b		$c0,$4
0010F997 8002                       	dc.b		$80,$2
0010F999 C404                       	dc.b		$c4,$4
0010F99B 8002                       	dc.b		$80,$2
0010F99D C604                       	dc.b		$c6,$4
0010F99F 8002                       	dc.b		$80,$2
0010F9A1 C404                       	dc.b		$c4,$4
0010F9A3 8002                       	dc.b		$80,$2
0010F9A5 E3                         	smpsReturn
0010F9A6                            
0010F9A6                            SCDMMPresent_PSG2_p19:
0010F9A6 AE04                       	dc.b		$ae,$4
0010F9A8 8002                       	dc.b		$80,$2
0010F9AA BD04                       	dc.b		$bd,$4
0010F9AC 8002                       	dc.b		$80,$2
0010F9AE BA04                       	dc.b		$ba,$4
0010F9B0 8002                       	dc.b		$80,$2
0010F9B2 AE04                       	dc.b		$ae,$4
0010F9B4 8002                       	dc.b		$80,$2
0010F9B6 C404                       	dc.b		$c4,$4
0010F9B8 8002                       	dc.b		$80,$2
0010F9BA BF04                       	dc.b		$bf,$4
0010F9BC 8002                       	dc.b		$80,$2
0010F9BE AE04                       	dc.b		$ae,$4
0010F9C0 8002                       	dc.b		$80,$2
0010F9C2 C004                       	dc.b		$c0,$4
0010F9C4 8002                       	dc.b		$80,$2
0010F9C6 AE04                       	dc.b		$ae,$4
0010F9C8 8002                       	dc.b		$80,$2
0010F9CA BA04                       	dc.b		$ba,$4
0010F9CC 8002                       	dc.b		$80,$2
0010F9CE BF04                       	dc.b		$bf,$4
0010F9D0 8002                       	dc.b		$80,$2
0010F9D2 BD04                       	dc.b		$bd,$4
0010F9D4 8002                       	dc.b		$80,$2
0010F9D6 AE04                       	dc.b		$ae,$4
0010F9D8 8002                       	dc.b		$80,$2
0010F9DA BF04                       	dc.b		$bf,$4
0010F9DC 8002                       	dc.b		$80,$2
0010F9DE BA04                       	dc.b		$ba,$4
0010F9E0 8002                       	dc.b		$80,$2
0010F9E2 BD04                       	dc.b		$bd,$4
0010F9E4 8002                       	dc.b		$80,$2
0010F9E6 E3                         	smpsReturn
0010F9E7                            
0010F9E7                            SCDMMPresent_PSG2_p1a:
0010F9E7 800C                       	dc.b		$80,$c
0010F9E9 AE04                       	dc.b		$ae,$4
0010F9EB 8002                       	dc.b		$80,$2
0010F9ED B804                       	dc.b		$b8,$4
0010F9EF 8002                       	dc.b		$80,$2
0010F9F1 C404                       	dc.b		$c4,$4
0010F9F3 8002                       	dc.b		$80,$2
0010F9F5 AE04                       	dc.b		$ae,$4
0010F9F7 8002                       	dc.b		$80,$2
0010F9F9 B504                       	dc.b		$b5,$4
0010F9FB 8002                       	dc.b		$80,$2
0010F9FD BA04                       	dc.b		$ba,$4
0010F9FF 8002                       	dc.b		$80,$2
0010FA01 BD04                       	dc.b		$bd,$4
0010FA03 8002                       	dc.b		$80,$2
0010FA05 C104                       	dc.b		$c1,$4
0010FA07 8002                       	dc.b		$80,$2
0010FA09 AE04                       	dc.b		$ae,$4
0010FA0B 8002                       	dc.b		$80,$2
0010FA0D B804                       	dc.b		$b8,$4
0010FA0F 8002                       	dc.b		$80,$2
0010FA11 C104                       	dc.b		$c1,$4
0010FA13 8002                       	dc.b		$80,$2
0010FA15 C404                       	dc.b		$c4,$4
0010FA17 8002                       	dc.b		$80,$2
0010FA19 BD04                       	dc.b		$bd,$4
0010FA1B 8002                       	dc.b		$80,$2
0010FA1D B804                       	dc.b		$b8,$4
0010FA1F 8002                       	dc.b		$80,$2
0010FA21 E3                         	smpsReturn
0010FA22                            
0010FA22                            SCDMMPresent_PSG2_p1e:
0010FA22 E70C                       	dc.b		$e7,$c
0010FA24 F500                       	smpsPSGvoice	$0
0010FA26 AE04                       	dc.b		$ae,$4
0010FA28 8002                       	dc.b		$80,$2
0010FA2A B804                       	dc.b		$b8,$4
0010FA2C 8002                       	dc.b		$80,$2
0010FA2E C404                       	dc.b		$c4,$4
0010FA30 8002                       	dc.b		$80,$2
0010FA32 AE04                       	dc.b		$ae,$4
0010FA34 8002                       	dc.b		$80,$2
0010FA36 B504                       	dc.b		$b5,$4
0010FA38 8002                       	dc.b		$80,$2
0010FA3A BA04                       	dc.b		$ba,$4
0010FA3C 8002                       	dc.b		$80,$2
0010FA3E BD04                       	dc.b		$bd,$4
0010FA40 8002                       	dc.b		$80,$2
0010FA42 C104                       	dc.b		$c1,$4
0010FA44 8002                       	dc.b		$80,$2
0010FA46 AE04                       	dc.b		$ae,$4
0010FA48 8002                       	dc.b		$80,$2
0010FA4A B804                       	dc.b		$b8,$4
0010FA4C 8002                       	dc.b		$80,$2
0010FA4E C104                       	dc.b		$c1,$4
0010FA50 8002                       	dc.b		$80,$2
0010FA52 C404                       	dc.b		$c4,$4
0010FA54 8002                       	dc.b		$80,$2
0010FA56 BD04                       	dc.b		$bd,$4
0010FA58 8002                       	dc.b		$80,$2
0010FA5A B804                       	dc.b		$b8,$4
0010FA5C 8002                       	dc.b		$80,$2
0010FA5E E3                         	smpsReturn
0010FA5F                            
0010FA5F                            ; Pattern data for PSG3 (Noise)
0010FA5F                            SCDMMPresent_PSG3_p0:
0010FA5F F502                       	smpsPSGvoice	$2
0010FA61 8206                       	dc.b		$82,$6
0010FA63 82                         	dc.b		$82
0010FA64 F501                       	smpsPSGvoice	$1
0010FA66 82                         	dc.b		$82
0010FA67 80                         	dc.b		$80
0010FA68 F502                       	smpsPSGvoice	$2
0010FA6A 82                         	dc.b		$82
0010FA6B 82                         	dc.b		$82
0010FA6C F501                       	smpsPSGvoice	$1
0010FA6E 82                         	dc.b		$82
0010FA6F 80                         	dc.b		$80
0010FA70 F502                       	smpsPSGvoice	$2
0010FA72 82                         	dc.b		$82
0010FA73 82                         	dc.b		$82
0010FA74 F501                       	smpsPSGvoice	$1
0010FA76 82                         	dc.b		$82
0010FA77 80                         	dc.b		$80
0010FA78 F502                       	smpsPSGvoice	$2
0010FA7A 82                         	dc.b		$82
0010FA7B 82                         	dc.b		$82
0010FA7C F501                       	smpsPSGvoice	$1
0010FA7E 82                         	dc.b		$82
0010FA7F 80                         	dc.b		$80
0010FA80 E3                         	smpsReturn
0010FA81                            
0010FA81                            SCDMMPresent_PSG3_p3:
0010FA81 F502                       	smpsPSGvoice	$2
0010FA83 8206                       	dc.b		$82,$6
0010FA85 82                         	dc.b		$82
0010FA86 F501                       	smpsPSGvoice	$1
0010FA88 82                         	dc.b		$82
0010FA89 F502                       	smpsPSGvoice	$2
0010FA8B 82                         	dc.b		$82
0010FA8C 82                         	dc.b		$82
0010FA8D 82                         	dc.b		$82
0010FA8E F501                       	smpsPSGvoice	$1
0010FA90 82                         	dc.b		$82
0010FA91 80                         	dc.b		$80
0010FA92 F502                       	smpsPSGvoice	$2
0010FA94 82                         	dc.b		$82
0010FA95 82                         	dc.b		$82
0010FA96 F501                       	smpsPSGvoice	$1
0010FA98 82                         	dc.b		$82
0010FA99 80                         	dc.b		$80
0010FA9A F502                       	smpsPSGvoice	$2
0010FA9C 82                         	dc.b		$82
0010FA9D 82                         	dc.b		$82
0010FA9E F501                       	smpsPSGvoice	$1
0010FAA0 82                         	dc.b		$82
0010FAA1 80                         	dc.b		$80
0010FAA2 E3                         	smpsReturn
0010FAA3                            
0010FAA3                            SCDMMPresent_PSG3_pf:
0010FAA3 F502                       	smpsPSGvoice	$2
0010FAA5 8206                       	dc.b		$82,$6
0010FAA7 82                         	dc.b		$82
0010FAA8 F501                       	smpsPSGvoice	$1
0010FAAA 820C                       	dc.b		$82,$c
0010FAAC F502                       	smpsPSGvoice	$2
0010FAAE 06                         	dc.b		$6
0010FAAF 82                         	dc.b		$82
0010FAB0 F501                       	smpsPSGvoice	$1
0010FAB2 82                         	dc.b		$82
0010FAB3 80                         	dc.b		$80
0010FAB4 F502                       	smpsPSGvoice	$2
0010FAB6 82                         	dc.b		$82
0010FAB7 82                         	dc.b		$82
0010FAB8 F501                       	smpsPSGvoice	$1
0010FABA 82                         	dc.b		$82
0010FABB 80                         	dc.b		$80
0010FABC F502                       	smpsPSGvoice	$2
0010FABE 82                         	dc.b		$82
0010FABF 82                         	dc.b		$82
0010FAC0 F501                       	smpsPSGvoice	$1
0010FAC2 82                         	dc.b		$82
0010FAC3 80                         	dc.b		$80
0010FAC4 E3                         	smpsReturn
0010FAC5                            
0010FAC5                            SCDMMPresent_PSG3_p19:
0010FAC5 E760                       	dc.b		$e7,$60
0010FAC7 E3                         	smpsReturn
0010FAC8                            
0010FAC8                            ; Pattern data for DAC
0010FAC8                            SCDMMPresent_DAC_p0:
0010FAC8 8060                       	dc.b		$80,$60
0010FACA E3                         	smpsReturn
0010FACB                            
0010FACB                            SCDMMPresent_DAC_p1:
0010FACB 9318                       	dc.b		$93,$18
0010FACD 93                         	dc.b		$93
0010FACE 9309                       	dc.b		$93,$9
0010FAD0 9403                       	dc.b		$94,$3
0010FAD2 94                         	dc.b		$94
0010FAD3 94                         	dc.b		$94
0010FAD4 94                         	dc.b		$94
0010FAD5 94                         	dc.b		$94
0010FAD6 9506                       	dc.b		$95,$6
0010FAD8 940C                       	dc.b		$94,$c
0010FADA 06                         	dc.b		$6
0010FADB E3                         	smpsReturn
0010FADC                            
0010FADC                            SCDMMPresent_DAC_p2:
0010FADC 9312                       	dc.b		$93,$12
0010FADE 06                         	dc.b		$6
0010FADF 9412                       	dc.b		$94,$12
0010FAE1 06                         	dc.b		$6
0010FAE2 9312                       	dc.b		$93,$12
0010FAE4 06                         	dc.b		$6
0010FAE5 9418                       	dc.b		$94,$18
0010FAE7 E3                         	smpsReturn
0010FAE8                            
0010FAE8                            SCDMMPresent_DAC_p3:
0010FAE8 9312                       	dc.b		$93,$12
0010FAEA 8006                       	dc.b		$80,$6
0010FAEC 941E                       	dc.b		$94,$1e
0010FAEE 950C                       	dc.b		$95,$c
0010FAF0 9306                       	dc.b		$93,$6
0010FAF2 940C                       	dc.b		$94,$c
0010FAF4 9506                       	dc.b		$95,$6
0010FAF6 94                         	dc.b		$94
0010FAF7 E3                         	smpsReturn
0010FAF8                            
0010FAF8                            SCDMMPresent_DAC_p5:
0010FAF8 9306                       	dc.b		$93,$6
0010FAFA 940C                       	dc.b		$94,$c
0010FAFC 9306                       	dc.b		$93,$6
0010FAFE 94                         	dc.b		$94
0010FAFF 9412                       	dc.b		$94,$12
0010FB01 06                         	dc.b		$6
0010FB02 95                         	dc.b		$95
0010FB03 9405                       	dc.b		$94,$5
0010FB05 9507                       	dc.b		$95,$7
0010FB07 940C                       	dc.b		$94,$c
0010FB09 9506                       	dc.b		$95,$6
0010FB0B 94                         	dc.b		$94
0010FB0C E3                         	smpsReturn
0010FB0D                            
0010FB0D                            SCDMMPresent_DAC_p7:
0010FB0D 9312                       	dc.b		$93,$12
0010FB0F 06                         	dc.b		$6
0010FB10 941E                       	dc.b		$94,$1e
0010FB12 950C                       	dc.b		$95,$c
0010FB14 9306                       	dc.b		$93,$6
0010FB16 940C                       	dc.b		$94,$c
0010FB18 9506                       	dc.b		$95,$6
0010FB1A 94                         	dc.b		$94
0010FB1B E3                         	smpsReturn
0010FB1C                            
0010FB1C                            SCDMMPresent_DAC_p9:
0010FB1C 950C                       	dc.b		$95,$c
0010FB1E 9406                       	dc.b		$94,$6
0010FB20 93                         	dc.b		$93
0010FB21 940C                       	dc.b		$94,$c
0010FB23 94                         	dc.b		$94
0010FB24 9406                       	dc.b		$94,$6
0010FB26 93                         	dc.b		$93
0010FB27 94                         	dc.b		$94
0010FB28 93                         	dc.b		$93
0010FB29 94                         	dc.b		$94
0010FB2A 94                         	dc.b		$94
0010FB2B 930C                       	dc.b		$93,$c
0010FB2D E3                         	smpsReturn
0010FB2E                            
0010FB2E                            SCDMMPresent_DAC_pa:
0010FB2E 9312                       	dc.b		$93,$12
0010FB30 06                         	dc.b		$6
0010FB31 9418                       	dc.b		$94,$18
0010FB33 9312                       	dc.b		$93,$12
0010FB35 06                         	dc.b		$6
0010FB36 9418                       	dc.b		$94,$18
0010FB38 E3                         	smpsReturn
0010FB39                            
0010FB39                            SCDMMPresent_DAC_p12:
0010FB39 9318                       	dc.b		$93,$18
0010FB3B 940C                       	dc.b		$94,$c
0010FB3D 9313                       	dc.b		$93,$13
0010FB3F 05                         	dc.b		$5
0010FB40 0C                         	dc.b		$c
0010FB41 9418                       	dc.b		$94,$18
0010FB43 E3                         	smpsReturn
0010FB44                            
0010FB44                            SCDMMPresent_DAC_p14:
0010FB44 9306                       	dc.b		$93,$6
0010FB46 E040                       	smpspan	panright,0
0010FB48 8E                         	dc.b		$8e
0010FB49 920C                       	dc.b		$92,$c
0010FB4B E0C0                       	smpspan	pancentre,0
0010FB4D 9406                       	dc.b		$94,$6
0010FB4F E040                       	smpspan	panright,0
0010FB51 8E                         	dc.b		$8e
0010FB52 9212                       	dc.b		$92,$12
0010FB54 8E06                       	dc.b		$8e,$6
0010FB56 920C                       	dc.b		$92,$c
0010FB58 9406                       	dc.b		$94,$6
0010FB5A 8E                         	dc.b		$8e
0010FB5B 920C                       	dc.b		$92,$c
0010FB5D E3                         	smpsReturn
0010FB5E                            
0010FB5E                            SCDMMPresent_DAC_p15:
0010FB5E E080                       	smpspan	panleft,0
0010FB60 8E06                       	dc.b		$8e,$6
0010FB62 E040                       	smpspan	panright,0
0010FB64 92                         	dc.b		$92
0010FB65 E080                       	smpspan	panleft,0
0010FB67 8E                         	dc.b		$8e
0010FB68 E040                       	smpspan	panright,0
0010FB6A 92                         	dc.b		$92
0010FB6B E080                       	smpspan	panleft,0
0010FB6D 8E                         	dc.b		$8e
0010FB6E E040                       	smpspan	panright,0
0010FB70 92                         	dc.b		$92
0010FB71 E080                       	smpspan	panleft,0
0010FB73 8E                         	dc.b		$8e
0010FB74 E040                       	smpspan	panright,0
0010FB76 92                         	dc.b		$92
0010FB77 E080                       	smpspan	panleft,0
0010FB79 8E0C                       	dc.b		$8e,$c
0010FB7B E040                       	smpspan	panright,0
0010FB7D 92                         	dc.b		$92
0010FB7E E080                       	smpspan	panleft,0
0010FB80 8E                         	dc.b		$8e
0010FB81 E040                       	smpspan	panright,0
0010FB83 92                         	dc.b		$92
0010FB84 E0C0                       	smpspan	pancentre,0
0010FB86 E3                         	smpsReturn
0010FB87                            
0010FB87                            SCDMMPresent_DAC_p16:
0010FB87 9312                       	dc.b		$93,$12
0010FB89 06                         	dc.b		$6
0010FB8A 9412                       	dc.b		$94,$12
0010FB8C 9306                       	dc.b		$93,$6
0010FB8E 12                         	dc.b		$12
0010FB8F 06                         	dc.b		$6
0010FB90 9418                       	dc.b		$94,$18
0010FB92 E3                         	smpsReturn
0010FB93                            
0010FB93                            SCDMMPresent_DAC_p17:
0010FB93 930C                       	dc.b		$93,$c
0010FB95 93                         	dc.b		$93
0010FB96 9406                       	dc.b		$94,$6
0010FB98 9312                       	dc.b		$93,$12
0010FB9A 93                         	dc.b		$93
0010FB9B 9306                       	dc.b		$93,$6
0010FB9D 9412                       	dc.b		$94,$12
0010FB9F 9306                       	dc.b		$93,$6
0010FBA1 E3                         	smpsReturn
0010FBA2                            
0010FBA2                            SCDMMPresent_DAC_p18:
0010FBA2 940C                       	dc.b		$94,$c
0010FBA4 93                         	dc.b		$93
0010FBA5 94                         	dc.b		$94
0010FBA6 9313                       	dc.b		$93,$13
0010FBA8 05                         	dc.b		$5
0010FBA9 0C                         	dc.b		$c
0010FBAA 9418                       	dc.b		$94,$18
0010FBAC E3                         	smpsReturn
0010FBAD                            
0010FBAD                            SCDMMPresent_DAC_p19:
0010FBAD 8060                       	dc.b		$80,$60
0010FBAF E3                         	smpsReturn
0010FBB0                            
0010FBB0                            SCDMMPresent_DAC_p1d:
0010FBB0 9306                       	dc.b		$93,$6
0010FBB2 940C                       	dc.b		$94,$c
0010FBB4 9306                       	dc.b		$93,$6
0010FBB6 94                         	dc.b		$94
0010FBB7 9412                       	dc.b		$94,$12
0010FBB9 06                         	dc.b		$6
0010FBBA 95                         	dc.b		$95
0010FBBB 94                         	dc.b		$94
0010FBBC 95                         	dc.b		$95
0010FBBD 940C                       	dc.b		$94,$c
0010FBBF 9506                       	dc.b		$95,$6
0010FBC1 94                         	dc.b		$94
0010FBC2 E3                         	smpsReturn
0010FBC3                            
0010FBC3                            SCDMMPresent_DAC_p2b:
0010FBC3 9312                       	dc.b		$93,$12
0010FBC5 06                         	dc.b		$6
0010FBC6 9418                       	dc.b		$94,$18
0010FBC8 9312                       	dc.b		$93,$12
0010FBCA 06                         	dc.b		$6
0010FBCB 940C                       	dc.b		$94,$c
0010FBCD 93                         	dc.b		$93
0010FBCE E3                         	smpsReturn
0010FBCF                            
0010FBCF                            SCDMMPresent_DAC_p31:
0010FBCF 9506                       	dc.b		$95,$6
0010FBD1 94                         	dc.b		$94
0010FBD2 94                         	dc.b		$94
0010FBD3 95                         	dc.b		$95
0010FBD4 94                         	dc.b		$94
0010FBD5 94                         	dc.b		$94
0010FBD6 94                         	dc.b		$94
0010FBD7 94                         	dc.b		$94
0010FBD8 930C                       	dc.b		$93,$c
0010FBDA 9406                       	dc.b		$94,$6
0010FBDC 95                         	dc.b		$95
0010FBDD 940C                       	dc.b		$94,$c
0010FBDF 9506                       	dc.b		$95,$6
0010FBE1 94                         	dc.b		$94
0010FBE2 E3                         	smpsReturn
0010FBE3                            
0010FBE3                            SCDMMPresent_Voices:
0010FBE3 2066 6560 61DF DF9F 9F07+  	dc.b	$20,$66,$65,$60,$61,$df,$df,$9f,$9f,$7,$6,$9,$6,$7,$6,$6
0010FBF3 0820 1010 F819 3713 09     	dc.b	$8,$20,$10,$10,$f8,$19,$37,$13,$9	; Voice 0 (Standard Bass)
0010FBFC 2C64 6434 341F 121F 1F00+  	dc.b	$2c,$64,$64,$34,$34,$1f,$12,$1f,$1f,$0,$0,$0,$0,$0,$1,$0
0010FC0C 010F 3F0F 3F16 0017 00     	dc.b	$1,$f,$3f,$f,$3f,$16,$0,$17,$0	; Voice 1 (Standard Strings)
0010FC15 3875 1371 11DF 5F1F 1F0C+  	dc.b	$38,$75,$13,$71,$11,$df,$5f,$1f,$1f,$c,$d,$1,$1,$0,$0,$0
0010FC25 00FF FFFF FF1E 1E1E 81     	dc.b	$0,$ff,$ff,$ff,$ff,$1e,$1e,$1e,$81	; Voice 0 (Voice 1 ripped from Sandopolis_1.bin)
0010FC2E 3D24 21F4 F65B 5B5B 5B09+  	dc.b	$3d,$24,$21,$f4,$f6,$5b,$5b,$5b,$5b,$9,$9,$9,$9,$9,$9,$9
0010FC3E 08B7 A777 3721 1522 19     	dc.b	$8,$b7,$a7,$77,$37,$21,$15,$22,$19	; Voice 3 (3_0.tfi)
0010FC47 2744 6021 125C 5C5C 5C00+  	dc.b	$27,$44,$60,$21,$12,$5c,$5c,$5c,$5c,$0,$0,$0,$0,$4,$1b,$4
0010FC57 04FA F8F8 FA0F 0F0F 0F     	dc.b	$4,$fa,$f8,$f8,$fa,$f,$f,$f,$f	; Voice 4 (Pipe Organ)
0010FC60                            	even
0010FC60                            	even
0010FC60                            		even
0010FC60                            Music92:	incbin	sound\music92.bin
001106BC                            		even
001106BC                            Music93:	incbin	sound\music93.bin
001109AE 00                         		even
001109AE                            ; Vladikcomper:	Here goes extra music slots to fit 3 different songs per zone
001109AE                            Music94:	incbin	sound\music94.bin
00110E5E 00                         		even
00110E5E                            Music95:	incbin	sound\music95.bin
00110F78 00                         		even	
00110F78                            Music96:	incbin	sound\music96.bin
00111046                            		even
00111046                            Music97:	incbin	sound\music97.bin
001112E0                            		even	
001112E0                            Music98:	incbin	sound\music98.bin
00111790 00                         		even	
00111790                            Music99:	incbin	sound\music99.bin
00111A10                            		even	
00111A10                            Music9A:	incbin	sound\music9A.bin
00111B3A                            		even	
00111B3A                            Music9B:	incbin	sound\music9B.bin
00113228                            		even	
00113228                            Music9C:	incbin	sound\music9C.bin
00113882 00                         		even	
00113882                            Music9D:	incbin	sound\music9D.bin
00116BD8                            		even	
00116BD8                            Music9E:	incbin	sound\music9E.bin
00117C6A 00                         		even		
00117C6A                            Music9F:	incbin	sound\music9F.bin
00117D58                            		even		
00117D58                            
00117D58                            ; ---------------------------------------------------------------------------
00117D58                            ; Sound	effect pointers
00117D58                            ; ---------------------------------------------------------------------------
00117D58 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
00117D64 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
00117D70 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
00117D7C 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
00117D88 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
00117D94 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
00117DA0 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
00117DAC 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
00117DB8 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
00117DC4 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
00117DD0 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
00117DDC 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
00117DE8 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
00117DF4 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
00117E00 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
00117E0C 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
00117E18 0000 0000 0000 0000 0000+  		dc.l SoundD1, SoundD2, SoundD3
00117E24 0000 0000                  SoundD0Index:	dc.l SoundD0
00117E28                            SoundA0:	incbin	sound\soundA0.bin
00117E5C 00                         		even
00117E5C                            SoundA1:	incbin	sound\soundA1.bin
00117E86                            		even
00117E86                            SoundA2:	incbin	sound\soundA2.bin
00117EA6                            		even
00117EA6                            SoundA3:	incbin	sound\soundA3.bin
00117ED8                            		even
00117ED8                            SoundA4:	incbin	sound\soundA4.bin
00117F0E                            		even
00117F0E                            SoundA5:	incbin	sound\soundA5.bin
00117F3A                            		even
00117F3A                            SoundA6:	incbin	sound\soundA6.bin
00117F6A                            		even
00117F6A                            SoundA7:	incbin	sound\soundA7.bin
00117F9A                            		even
00117F9A                            SoundA8:	incbin	sound\soundA8.bin
00117FCE                            		even
00117FCE                            SoundA9:	incbin	sound\soundA9.bin
00117FE0                            		even
00117FE0                            SoundAA:	incbin	sound\soundAA.bin
00118022                            		even
00118022                            SoundAB:	incbin	sound\soundAB.bin
00118042                            		even
00118042                            SoundAC:	incbin	sound\soundAC.bin
00118076                            		even
00118076                            SoundAD:	incbin	sound\soundAD.bin
001180AC                            		even
001180AC                            SoundAE:	incbin	sound\soundAE.bin
001180F6                            		even
001180F6                            SoundAF:	incbin	sound\soundAF.bin
00118124                            		even
00118124                            SoundB0:	incbin	sound\soundB0.bin
00118156                            		even
00118156                            SoundB1:	incbin	sound\soundB1.bin
00118182                            		even
00118182                            SoundB2:	incbin	sound\soundB2.bin
001181D2                            		even
001181D2                            SoundB3:	incbin	sound\soundB3.bin
0011821C                            		even
0011821C                            SoundB4:	incbin	sound\soundB4.bin
00118278                            		even
00118278                            SoundB5:	incbin	sound\soundB5.bin
001182A6                            		even
001182A6                            SoundB6:	incbin	sound\soundB6.bin
001182C4                            		even
001182C4                            SoundB7:	incbin	sound\soundB7.bin
00118300                            		even
00118300                            SoundB8:	incbin	sound\soundB8.bin
0011831E                            		even
0011831E                            SoundB9:	incbin	sound\soundB9.bin
00118382                            		even
00118382                            SoundBA:	incbin	sound\soundBA.bin
001183AA                            		even
001183AA                            SoundBB:	incbin	sound\soundBB.bin
001183D6                            		even
001183D6                            SoundBC:	incbin	sound\soundBC.bin
00118418                            		even
00118418                            SoundBD:	incbin	sound\soundBD.bin
0011846C                            		even
0011846C                            SoundBE:	incbin	sound\soundBE.bin
001184A6                            		even
001184A6                            SoundBF:	incbin	sound\soundBF.bin
00118518                            		even
00118518                            SoundC0:	incbin	sound\soundC0.bin
00118546                            		even
00118546                            SoundC1:	incbin	sound\soundC1.bin
00118580                            		even
00118580                            SoundC2:	incbin	sound\soundC2.bin
001185AA                            		even
001185AA                            SoundC3:	incbin	sound\soundC3.bin
00118624                            		even
00118624                            SoundC4:	incbin	sound\soundC4.bin
0011864C                            		even
0011864C                            SoundC5:	incbin	sound\soundC5.bin
001186B4                            		even
001186B4                            SoundC6:	incbin	sound\soundC6.bin
001186F6                            		even
001186F6                            SoundC7:	incbin	sound\soundC7.bin
00118724                            		even
00118724                            SoundC8:	incbin	sound\soundC8.bin
00118736                            		even
00118736                            SoundC9:	incbin	sound\soundC9.bin
00118764                            		even
00118764                            SoundCA:	incbin	sound\soundCA.bin
00118792                            		even
00118792                            SoundCB:	incbin	sound\soundCB.bin
001187DE                            		even
001187DE                            SoundCC:	incbin	sound\soundCC.bin
00118818                            		even
00118818                            SoundCD:	incbin	sound\soundCD.bin
00118826                            		even
00118826                            SoundCE:	incbin	sound\soundCE.bin
00118854                            		even
00118854                            SoundCF:	incbin	sound\soundCF.bin
0011888C                            		even
0011888C                            SoundD0:	incbin	sound\soundD0.bin
001188C6                            		even
001188C6                            SoundD1:	incbin	sound\soundD1.bin
00118902                            		even
00118902                            SoundD2:        incbin  sound\81.bin
0011894E 00                                         even
0011894E                            SoundD3:        incbin  sound\98.bin
0011899A                                            even
0011899A                            SegaPCM:	incbin	sound\segapcm.bin
0011F312                            		even
0011F312                            Art_Dust	incbin	artunc\spindust.bin
00120C52                            
00120C52                            ; ---------------------------------------------------------------------------
00120C52                            ; Subroutine to    do Super Speel Out
00120C52                            ; ---------------------------------------------------------------------------
00120C52                            Sonic_PeelOut:
00120C52 0C38 0000 FF8C                     cmpi.b	#0,($FFFFFF8C).w       
00120C58 6600 0000                          bne.w   Sonic_PeelOut_Rts
00120C5C 0828 0000 002B                     btst.b  #0,$2B(a0)    ; is already Peel Outing?
00120C62 6600                               bne.s   Sonic_SO_Launch    ; if so, branch
00120C64 0C28 0007 001C                     cmp.b    #7,$1C(a0)    ; is anim look up?
00120C6A 6600 0000                          bne.w   Sonic_PeelOut_Rts; if not, branch
00120C6E 0838 0000 F602                     btst    #0,($FFFFF602).w; is Up is being held?
00120C74 6700 0000                          beq.w    Sonic_PeelOut_Rts; if no, branch
00120C78 1038 F603                          move.b    ($FFFFF603).w,d0
00120C7C 0200 0070                          and.b    #$70,d0        ; check if ABC is pressed
00120C80 6700                               beq.s    Sonic_PeelOut_Rts
00120C82 303C 0FD1                          move.w    #$FD1,d0
00120C86 4EB9 0000 12D0                     jsr    (PlaySound_Special).l
00120C8C 08E8 0000 002B                     bset.b    #0,$2B(a0)    ; set Peel Out flag
00120C92 31FC 0060 F73E                     move.w    #$60,($FFFFF73E).w; reset looking up/down
00120C98 317C 0000 003A                     move.w    #0,$3A(a0)    ; clear SO speed
00120C9E                                    
00120C9E                            Sonic_SO_Launch:
00120C9E 588F                               addq.l    #4,sp        ; increase stack ptr to avoid jumping
00120CA0 0C38 0003 FF8C                     cmpi.b	#3,($FFFFFF8C).w       
00120CA6 6700 0000                          beq.w   Tikal_PeelOut
00120CAA 117C 0020 001C                     move.b    #$20,$1C(a0)    ; launch SO ani
00120CB0 0838 0000 F602                     btst    #0,($FFFFF602).w; is Up is being held?
00120CB6 6600                               bne.s    Sonic_PeelOut_Rts; if yes, branch
00120CB8 0C28 000F 001B                     cmp.b    #$F,$1B(a0)    ; is SO enough powerful?
00120CBE 6D00                               blt.s   Sonic_So_Release; if no, branch
00120CC0 303C 00BC                          move.w    #$BC,d0        ; play SO release sound
00120CC4 4EB9 0000 12D0                     jsr    (PlaySound_Special).l ;
00120CCA 317C 0C00 0014                     move.w    #$C00,$14(a0)    ; set speed
00120CD0 6000                               bra.s     Sonic_SO_Animate
00120CD2                            
00120CD2                            Tikal_Peelout:
00120CD2 303C 00BC                          move.w    #$BC,d0        ; play SO release sound
00120CD6 4EB9 0000 12D0                     jsr    (PlaySound_Special).l ;
00120CDC 317C 0900 0014                     move.w    #$900,$14(a0)    ; set speed
00120CE2                            
00120CE2                            Sonic_SO_Animate:
00120CE2 117C 0001 001C                     move.b    #1,$1C(a0)    ; use walking animation (in fact, outing animation)
00120CE8 0828 0000 0022                     btst    #0,$22(a0)    ; is sonic facing left?
00120CEE 6700                               beq.s    Sonic_So_Release; if yes, branch
00120CF0 4468 0014                          neg.w    $14(a0)
00120CF4                            
00120CF4                            Sonic_So_Release:
00120CF4 08A8 0000 002B                     bclr.b    #0,$2B(a0)    ; clear SO flag
00120CFA                            
00120CFA                            Sonic_PeelOut_Rts:
00120CFA 4E75                               rts
00120CFC                            
00120CFC                            ; ---------------------------------------------------------------------------
00120CFC                            ; Subroutine to do Double Jump
00120CFC                            ; ------------------------------------------------------------------------
00120CFC                            Sonic_DoubleJump: 
00120CFC                            ; by Sonic2010
00120CFC 0C38 0000 FF8C                             cmpi.b	#0,($FFFFFF8C).w	; is Sonic?
00120D02 6700 0000                                  beq.w   Sonic_DoubleJump_Rts    ; if yes, branch  
00120D06 0C38 0002 FF8C                             cmpi.b	#2,($FFFFFF8C).w	; is Metal?
00120D0C 6700 0000                                  beq.w   Sonic_DoubleJump_Rts    ; if yes, branch     
00120D10 0C38 0003 FF8C                             cmpi.b	#3,($FFFFFF8C).w	; is Tikal?
00120D16 6700 0000                                  beq.w   Sonic_DoubleJump_Rts    ; if yes, branch  
00120D1A 0C38 0004 FF8C                             cmpi.b	#4,($FFFFFF8C).w	; is Shadow?
00120D20 6700 0000                                  beq.w   Sonic_DoubleJump_Rts    ; if yes, branch       
00120D24 0C28 0002 001C             		cmpi.b	#2,$1C(a0)    		; is Sonic rolling?
00120D2A 6600                       		bne.s	Sonic_DoubleJump_Rts		; if no, branch
00120D2C 1038 F603                                  move.b  ($FFFFF603).w,d0        ; read conroller
00120D30 1038 F603 0200 0070        		tpress	A+B+C,(SonicControl)	; is A pressed?           
00120D38 6700 0000                  		beq.w	Sonic_DoubleJump_Rts		; if not, branch
00120D3C 0C38 0005 FF8C                             cmpi.b	#5,($FFFFFF8C).w	; is Shadow?
00120D42 6700 0000                                  beq.w   EspioWhirling           ; if yes, branch 
00120D46 6000                                       bra.s   Doublejumpcont
00120D48                            
00120D48                            EspioWhirling:
00120D48 117C 0025 001C                             move.b	#$25,$1C(a0)    		; use rolling anim
00120D4E 303C 00A2                  		move.w	#$A2,d0			; JD sound (A2)
00120D52 4EB9 0000 12D0             		jsr	(PlaySound_Special).l   ; play jump dash sound
00120D58 317C FB00 0012             		move.w	#-$500,$12(a0)		; set Jump Dash speed
00120D5E 6000                                       bra.s   Sonic_DoubleJump_Rts
00120D60                            
00120D60                            Doublejumpcont:
00120D60 117C 0010 001C             		move.b	#$10,$1C(a0)    		; use rolling anim
00120D66 303C 00A2                  		move.w	#$A2,d0			; JD sound (A2)
00120D6A 4EB9 0000 12D0             		jsr	(PlaySound_Special).l   ; play jump dash sound
00120D70 317C F900 0012             		move.w	#-$700,$12(a0)		; set Jump Dash speed
00120D76                            
00120D76                            
00120D76                            Sonic_DoubleJump_Rts:
00120D76 4E75                                       rts
00120D78                            
00120D78                            ; ---------------------------------------------------------------------------
00120D78                            ; Subroutine to perform Spin Boost
00120D78                            ; ---------------------------------------------------------------------------
00120D78                            
00120D78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00120D78                            
00120D78                            Sonic_HighSpinDash:
00120D78 0C38 0000 FF8C                             cmpi.b	#0,($FFFFFF8C).w
00120D7E 6700 0000                                  beq.w   Sonic_HSD_Rts  
00120D82 0C38 0001 FF8C                             cmpi.b	#1,($FFFFFF8C).w	
00120D88 6700 0000                                  beq.w   Sonic_HSD_Rts
00120D8C 0C38 0002 FF8C                             cmpi.b	#2,($FFFFFF8C).w	
00120D92 6700 0000                                  beq.w   Sonic_HSD_Rts
00120D96 0C28 0007 001C                             cmp.b    #7,$1C(a0)    ; is anim look up?
00120D9C 6600 0000                          bne.w   Sonic_HSD_Rts; if not, branch
00120DA0 0838 0000 F602                     btst    #0,($FFFFF602).w; is Up is being held?
00120DA6 6700 0000                          beq.w    Sonic_HSD_Rts; if no, branch
00120DAA 1038 F603                                  move.b  ($FFFFF603).w,d0                  ; read controller
00120DAE 1038 F603 0200 0040                        tpress  A,(SonicControl)                  ; is A pressed?
00120DB6 6700 0000                                  beq.w   Sonic_HSD_rts                     ; if not, branch
00120DBA 0C28 0001 001C                             cmp.b	#1,$1C(a0)		          ; is animation walking/running?
00120DC0 6700 0000                                  beq.w   Sonic_HSD_Super_Action            ; if yes, branch
00120DC4                            
00120DC4                            Sonic_HSD_Action:
00120DC4 303C 00D1                                  move.w  #$D1,d0                           ; spin sound ($E0 in s2) 
00120DC8 4EB9 0000 12D0                             jsr     (PlaySound_Special).l             ; play spin sound
00120DCE 588F                                       addq.l	#4,sp			          ; avoid Sonic_Jump call
00120DD0 117C 0001 0028                             move.b  #1,$28(a0)                        ; set spindash flag
00120DD6                            
00120DD6                            Sonic_HSD_Super_Action:
00120DD6 303C 00D1                                  move.w  #$D1,d0                           ; spin sound ($E0 in s2) 
00120DDA 4EB9 0000 12D0                             jsr     (PlaySound_Special).l             ; play spin sound
00120DE0 588F                                       addq.l	#4,sp			          ; avoid Sonic_Jump call
00120DE2 117C 0001 0039                             move.b  #1,$39(a0)                        ; set spindash flag
00120DE8 317C 0007 003A                             move.w  #7,$3A(a0)                        ; set charge count to 7
00120DEE                            
00120DEE                            Sonic_HSD_rts:
00120DEE 4E75                                       rts
00120DF0                            
00120DF0                            Nem_LevSel:		incbin	"LS_BG/GFX.bin"
001218EE                                                    even
001218EE                            Eni_LevSel:		incbin	"LS_BG/Map.bin"
00121956                                                    even
00121956                            Nem_SplScr:		incbin	"#Splashscreen/GFX.bin"
001224E6                                                    even
001224E6                            Eni_SplScr:		incbin	"#Splashscreen/Map.bin"
0012259C                                                    even
0012259C                            Nem_TtlScr:		incbin	"#Titlescreen/GFX.bin"
00123B66                                                    even
00123B66                            Eni_TtlScr:		incbin	"#Titlescreen/Map.bin"
00123C10                                                    even
00123C10                            Nem_DiaryGHZ:		incbin	"#DearDiary/GFX1.bin"
0012661A                                                    even
0012661A                            Eni_DiaryGHZ:		incbin	"#DearDiary/Map1.bin"
0012668E                                                    even
0012668E                            Nem_DiaryMZ:		incbin	"#DearDiary/GFX2.bin"
0012824C                                                    even
0012824C                            Eni_DiaryMZ:		incbin	"#DearDiary/Map2.bin"
001282CA                                                    even
001282CA                            Nem_DiarySYZ:		incbin	"#DearDiary/GFX3.bin"
0012A7D6                                                    even
0012A7D6                            Eni_DiarySYZ:		incbin	"#DearDiary/Map3.bin"
0012A866                                                    even
0012A866                            Nem_DiarySLZ:		incbin	"#DearDiary/GFX4.bin"
0012C64C                                                    even
0012C64C                            Eni_DiarySLZ:		incbin	"#DearDiary/Map4.bin"
0012C6E6                                                    even
0012C6E6                            Nem_DiarySBZ:		incbin	"#DearDiary/GFX5.bin"
0012E13C                                                    even
0012E13C                            Eni_DiarySBZ:		incbin	"#DearDiary/Map5.bin"
0012E224                                                    even
0012E224                            Nem_DiaryFZ:		incbin	"#DearDiary/GFX6.bin"
001305A8                                                    even
001305A8                            Eni_DiaryFZ:		incbin	"#DearDiary/Map6.bin"
00130614                                                    even
00130614                            Nem_CredScr1:		incbin	"#Credits/GFX1.bin"
00131790                                                    even
00131790                            Eni_CredScr1:		incbin	"#Credits/Map1.bin"
001317FE                                                    even
001317FE                            Nem_CredScr2:		incbin	"#Credits/GFX2.bin"
001324DA                                                    even
001324DA                            Eni_CredScr2:		incbin	"#Credits/Map2.bin"
001325A4                                                    even
001325A4                            s2_menuasm:
001325A4                            			   include 's2_menu.asm'
001325A4                            ;===============================================================================
001325A4                            ; Menu do Sonic 2 No Sonic 1 reprogramado por Esrael L. G. Neto
001325A4                            ; [ Início ]
001325A4                            ;
001325A4                            ; O código deste menu foi desenvolvido para funcionar com
001325A4                            ; o disassembly do Sonic 1 feito por -> drx (www.hacking-cult.org)
001325A4                            ; 
001325A4                            ; Se estiver usando um disassembly diferente modifique os jumps no final do 
001325A4                            ; código para que aponte para as rotinas equivalentes.
001325A4                            ; 
001325A4                            ; Para pode utilizar este menu basta fazer a seguinte modificação no código 
001325A4                            ; original:
001325A4                            ; Localize o label  -> loc_3242 adicione -> jmp     Level_Select_Menu
001325A4                            ; O código deve ficar como abaixo
001325A4                            ;               ......................
001325A4                            ; loc_3242:
001325A4                            ;		tst.b	($FFFFFFE0).w
001325A4                            ;		beq.w	PlayLevel	
001325A4                            ;		btst	#6,($FFFFF604).w 
001325A4                            ;		beq.w	PlayLevel	  		
001325A4                            ;		jmp     Level_Select_Menu ; <- Carrega o Menu do Sonic 2	
001325A4                            ;		moveq	#2,d0		
001325A4                            ;		bsr.w	PalLoad		 
001325A4                            ;               ...............
001325A4                            ;
001325A4                            ; Não esqueça de incluir este asm em seu código com a diretiva include:
001325A4                            ;               include 's2_menu.asm'
001325A4                            ;===============================================================================  
001325A4 =FFFFFFE1                  Slow_Motion_Flag      equ $FFFFFFE1
001325A4 =FFFFFFE2                  Debug_Mode_Flag       equ $FFFFFFE2
001325A4                            
001325A4 =00000092                  Level_Select_Menu_snd   = $0092
001325A4 =00000093                  Emerald_Snd             = $0093
001325A4 =000000B5                  Ring_Snd                = $00B5
001325A4 =000000E0                  Volume_Down             = $00E0
001325A4 =000000E4                  Stop_Sound              = $00E4
001325A4                            ;-------------------------------------------------------------------------------
001325A4                            Level_Select_Menu:
001325A4 103C 00E4                                  move.b  #Stop_Sound, D0
001325A8 6100 0000                                  bsr     Menu_Play_Music
001325AC 6100 0000                                  bsr     Menu_Pal_FadeFrom
001325B0 31FC 0000 FF82             		move.w  #$0000,($FFFFFF82).w
001325B6 46FC 2700                                  move    #$2700, SR
001325BA 3038 F60C                                  move.w  ($FFFFF60C).w, D0
001325BE 0200 00BF                                  andi.b  #$BF, D0
001325C2 33C0 00C0 0004                             move.w  D0, ($00C00004)
001325C8 6100 0000                                  bsr     Menu_ClearScreen
001325CC 4DF9 00C0 0004                             lea     ($00C00004), A6
001325D2 3CBC 8004                                  move.w  #$8004, (A6)
001325D6 3CBC 8230                                  move.w  #$8230, (A6)
001325DA 3CBC 8407                                  move.w  #$8407, (A6)
001325DE 3CBC 8230                                  move.w  #$8230, (A6)
001325E2 3CBC 8700                                  move.w  #$8700, (A6)
001325E6 3CBC 8C81                                  move.w  #$8C81, (A6)
001325EA 3CBC 9001                                  move.w  #$9001, (A6)
001325EE 43F8 AC00                                  lea     ($FFFFAC00).w, A1
001325F2 7000                                       moveq   #$00, D0
001325F4 323C 00FF                                  move.w  #$00FF, D1
001325F8                            Offset_0x026ACA:
001325F8 22C0                                       move.l  D0, (A1)+
001325FA 51C9 FFFC                                  dbra    D1, Offset_0x026ACA
001325FE 43F8 B000                                  lea     ($FFFFB000).w, A1
00132602 7000                                       moveq   #$00, D0
00132604 323C 07FF                                  move.w  #$07FF, D1
00132608                            Offset_0x026ADA:
00132608 22C0                                       move.l  D0, (A1)+
0013260A 51C9 FFFC                                  dbra    D1, Offset_0x026ADA
0013260E 4278 DC00                                  clr.w   ($FFFFDC00).w
00132612 21FC FFFF DC00 DCFC                        move.l  #$FFFFDC00, ($FFFFDCFC).w
0013261A 23FC 4200 0000 00C0 0004                   move.l  #$42000000, ($00C00004)
00132624 41F9 0000 0000                             lea     (Menu_Font), A0
0013262A 6100 0000                                  bsr     Menu_NemesisDec
0013262E 23FC 5200 0000 00C0 0004                   move.l  #$52000000, ($00C00004)
00132638 41F9 0000 0000                             lea     (Level_Icons), A0
0013263E 4EB9 0000 0000                             jsr     Menu_NemesisDec
00132644                            ;-------------------------------------------------------------------------------                
00132644                            ; Carrega o Mapeamento do Fundo Sonic/Miles               
00132644                            ;-------------------------------------------------------------------------------
00132644 43F9 FFFF 0000                             lea     ($FFFF0000), A1 ;îáðàùàåìñÿ ê àäðåñó, ãäå çàãðóæàþöà 256õ256 ìàïïèíãè
0013264A 41F9 0000 0000                             lea     (Menu_Mappings), A0 ;çàãðóæàåì èõ (ñîáñíà, ýòî ôîí ìåíþ)
00132650 303C 6000                                  move.w  #$6000, D0
00132654 6100 0000                                  bsr     Menu_EnigmaDec ;ðàçæèìàåì èõ
00132658 43F9 FFFF 0000                             lea     ($FFFF0000), A1
0013265E 203C 6000 0003                             move.l  #$60000003, D0
00132664 7227                                       moveq   #$27, D1 ;cols
00132666 741B                                       moveq   #$1B, D2 ;rows
00132668 6100 0000                                  bsr     Menu_ShowVDPGraphics ;ïîêàçûâàåì
0013266C                            ;-------------------------------------------------------------------------------                
0013266C                            ; Carrega o Texto do Menu de Seleção de Fases               
0013266C                            ;-------------------------------------------------------------------------------
0013266C 47F9 FFFF 0000                             lea     ($FFFF0000), A3
00132672 323C 045F                                  move.w  #$045F, D1
00132676                            Offset_0x026B4E:
00132676 36FC 0000                                  move.w  #$0000, (A3)+
0013267A 51C9 FFFA                                  dbra    D1, Offset_0x026B4E
0013267E 47F9 FFFF 0000                             lea     ($FFFF0000), A3
00132684 43F9 0000 0000                             lea     (Menu_Level_Select_Text), A1
0013268A 4BF9 0000 0000                             lea     (Menu_Text_Positions), A5
00132690 7000                                       moveq   #$00, D0
00132692 323C 0009                                  move.w  #$0009, D1  ; Quantidade de textos a ser carregada e posição do Sound Test
00132696                            Menu_Loop_Load_Text:
00132696 361D                                       move.w  (A5)+, D3
00132698 45F3 3000                                  lea     $00(A3, D3), A2
0013269C 7400                                       moveq   #$00, D2
0013269E 1419                                       move.b  (A1)+, D2
001326A0 3602                                       move.w  D2, D3
001326A2                            Offset_0x026B7A:
001326A2 1019                                       move.b  (A1)+, D0
001326A4 34C0                                       move.w  D0, (A2)+
001326A6 51CA FFFA                                  dbra    D2, Offset_0x026B7A
001326AA 343C 000D                                  move.w  #$000D, D2
001326AE 9443                                       sub.w   D3, D2
001326B0 6500                                       bcs.s   Offset_0x026B92
001326B2                            Offset_0x026B8A:
001326B2 34FC 0000                                  move.w  #$0000, (A2)+
001326B6 51CA FFFA                                  dbra    D2, Offset_0x026B8A
001326BA                            Offset_0x026B92:
001326BA 34BC 0011                                  move.w  #$0011, (A2)       ; Load "1"
001326BE 45EA 0050                                  lea     $0050(A2), A2
001326C2 34BC 0012                                  move.w  #$0012, (A2)       ; Load "2"
001326C6 45EA 0050                                  lea     $0050(A2), A2
001326CA 34BC 0013                                  move.w  #$0013, (A2)       ; Load "3"
001326CE 51C9 FFC6                                  dbra    D1, Menu_Loop_Load_Text
001326D2                            ;-------------------------------------------------------------------------------                
001326D2                            Menu_Clear_Act_x:                                               ; Limpa os números dos acts não usados e carrega o "*" do Sound Test
001326D2 34BC 0000                                  move.w  #$0000, (A2)                            ; Load " "
001326D6 45EA 0050                                  lea     $0050(A2), A2
001326DA 51C9 FFF6                                  dbra    D1, Menu_Clear_Act_x
001326DE                            ;                lea     $FF10(A2), A2
001326DE                            ;                move.w  #$001A, (A2)          ; Load "*"
001326DE                            ;-------------------------------------------------------------------------------
001326DE                            ; Carrega o Mapeamento das Asas onde são mostrados os ícones
001326DE                            ;------------------------------------------------------------------------------- 
001326DE 41F9 0000 0000                             lea     (Wings_Mappings), A0
001326E4 43F9 FFFF 0670                             lea     ($FFFF0670), A1
001326EA 323C 0006                                  move     #$06, D1
001326EE                            Menu_Loop_Next_Line:
001326EE 303C 0009                                  move     #$09, D0
001326F2                            Menu_Loop_Load_Wings:
001326F2 32D8                                       move.w   (A0)+, (A1)+
001326F4 51C8 FFFC                                  dbra     D0, Menu_Loop_Load_Wings
001326F8 D2FC 003C                                  add.w    #$3C, A1
001326FC 51C9 FFF0                                  dbra     D1, Menu_Loop_Next_Line
00132700                            ;-------------------------------------------------------------------------------                
00132700                            ; Carrega o Mapeamento dos ícones               
00132700                            ;-------------------------------------------------------------------------------                                    
00132700 43F9 FFFF 08C0                             lea     ($FFFF08C0), A1
00132706 41F9 0000 0000                             lea     (Icons_Mappings), A0
0013270C 303C 0090                                  move.w  #$0090, D0
00132710 6100 0000                                  bsr     Menu_EnigmaDec
00132714 43F9 FFFF 0000                             lea     ($FFFF0000), A1
0013271A 203C 4000 0003                             move.l  #$40000003, D0
00132720 7227                                       moveq   #$27, D1
00132722 741B                                       moveq   #$1B, D2
00132724 6100 0000                                  bsr     Menu_ShowVDPGraphics
00132728                            ;-------------------------------------------------------------------------------                
00132728 7600                                       moveq   #$00, D3
0013272A 6100 0000                                  bsr     Offset_0x027040
0013272E 4278 FF70                                  clr.w   ($FFFFFF70).w
00132732 4278 FE40                                  clr.w   ($FFFFFE40).w
00132736 4238 F711                                  clr.b   ($FFFFF711).w
0013273A 4278 F7F0                                  clr.w   ($FFFFF7F0).w
0013273E                            ;------------------------------------------------------------------------------- 
0013273E 11FC 0000 F7B8                             move.b  #$0000, ($FFFFF7B8).w  ; Inicializa os quadros das animações do menu
00132744 11FC 0000 F7B9                             move.b  #$0000, ($FFFFF7B9).w  ; Inicializa o contador das animações do menu 
0013274A 4EB9 0000 0000                             jsr     Dynamic_Menu           ; Chama a rotina de animação
00132750                            ;-------------------------------------------------------------------------------
00132750                            
00132750 7017                                       moveq   #$17, D0
00132752 6100 0000                                  bsr     Menu_PalLoad1
00132756 43F8 FB40                                  lea     ($FFFFFB40).w, A1
0013275A 45F8 FBC0                                  lea     ($FFFFFBC0).w, A2
0013275E 7207                                       moveq   #$07, D1
00132760                            Offset_0x026C26:
00132760 24D1                                       move.l  (A1), (A2)+
00132762 4299                                       clr.l   (A1)+
00132764 51C9 FFFA                                  dbra    D1, Offset_0x026C26
00132768 103C 0092                                  move.b  #Level_Select_Menu_snd, D0
0013276C 6100 0000                                  bsr     Menu_Play_Music
00132770 7000                                       moveq   #$00, D0
00132772 4EB9 0000 0000                             jsr     Menu_LoadPLC2
00132778 31FC 0707 F614                             move.w  #$0707, ($FFFFF614).w
0013277E 4278 FFDC                                  clr.w   ($FFFFFFDC).w
00132782 42B8 EE00                                  clr.l   ($FFFFEE00).w
00132786 42B8 EE04                                  clr.l   ($FFFFEE04).w
0013278A 4278 FF0C                                  clr.w   ($FFFFFF0C).w
0013278E 4278 FF0E                                  clr.w   ($FFFFFF0E).w
00132792 11FC 0018 F62A                             move.b  #$18, ($FFFFF62A).w
00132798 6100 0000                                  bsr     Menu_DelayProgram
0013279C 3038 F60C                                  move.w  ($FFFFF60C).w, D0
001327A0 0000 0040                                  ori.b   #$40, D0
001327A4 33C0 00C0 0004                             move.w  D0, ($00C00004)
001327AA 6100 0000                                  bsr     Menu_Pal_FadeTo
001327AE                            Menu_Main_Loop:
001327AE 11FC 0018 F62A                             move.b  #$18, ($FFFFF62A).w
001327B4 6100 0000                                  bsr     Menu_DelayProgram
001327B8 46FC 2700                                  move    #$2700, SR
001327BC 7600                                       moveq   #$00, D3
001327BE 6100 0000                                  bsr     Offset_0x026ED8
001327C2 6100 0000                                  bsr     Offset_0x026DEC
001327C6 363C 6000                                  move.w  #$6000, D3
001327CA 6100 0000                                  bsr     Offset_0x027048
001327CE 46FC 2300                                  move    #$2300, SR
001327D2 4EB9 0000 0000                             jsr     Dynamic_Menu
001327D8 6100 0000                                  bsr     Menu_RunPLC
001327DC 0838 0004 F604                             btst    #$04, ($FFFFF604).w
001327E2 6700                                       beq.s   Offset_0x026CC6
001327E4 31FC 0001 FFD8                             move.w  #$0001, ($FFFFFFD8).w
001327EA                            Offset_0x026CC6:
001327EA 1038 F605                                  move.b  ($FFFFF605).w, D0
001327EE 8038 F607                                  or.b    ($FFFFF607).w, D0
001327F2 0200 0080                                  andi.b  #$80, D0
001327F6 6600                                       bne.s   Offset_0x026CD8
001327F8 60B4                                       bra     Menu_Main_Loop
001327FA                            Offset_0x026CD8:
001327FA 3038 FF82                                  move.w  ($FFFFFF82).w, D0
001327FE D040                                       add.w   D0, D0
00132800 303B 0000                                  move.w  Menu_Level_Select_Array(PC, D0), D0
00132804 6B00 0000                                  bmi     Menu_Game_Reset
00132808 0C40 0600                                  cmpi.w  #$0600, D0
0013280C 6700 0000                                  beq     Menu_Ending_Sequence
00132810 0C40 5555                                  cmpi.w  #$5555, D0
00132814 6798                                       beq     Menu_Main_Loop
00132816 0C40 4000                                  cmpi.w  #$4000, D0
0013281A 6600 0000                                  bne     Menu_Load_Level
0013281E 11FC 0010 F600                             move.b  #$10, ($FFFFF600).w
00132824 4278 FE10                                  clr.w   ($FFFFFE10).w
00132828 11FC 0003 FE12                             move.b  #$03, ($FFFFFE12).w
0013282E 11FC 0003 FEC6                             move.b  #$03, ($FFFFFEC6).w
00132834 7000                                       moveq   #$00, D0
00132836 31C0 FE20                                  move.w  D0, ($FFFFFE20).w
0013283A 21C0 FE22                                  move.l  D0, ($FFFFFE22).w
0013283E 21C0 FE26                                  move.l  D0, ($FFFFFE26).w
00132842 31C0 FED0                                  move.w  D0, ($FFFFFED0).w
00132846 21C0 FED2                                  move.l  D0, ($FFFFFED2).w
0013284A 21C0 FED6                                  move.l  D0, ($FFFFFED6).w
0013284E 21FC 0000 1388 FFC0                        move.l  #$00001388, ($FFFFFFC0).w
00132856 21FC 0000 1388 FFC4                        move.l  #$00001388, ($FFFFFFC4).w
0013285E 31F8 FF72 FF70                             move.w  ($FFFFFF72).w, ($FFFFFF70).w
00132864 4E75                                       rts
00132866                            Menu_Game_Reset:
00132866 11FC 0000 F600                             move.b  #$0000, ($FFFFF600).w
0013286C 4E75                                       rts
0013286E                            Menu_Ending_Sequence:
0013286E 11FC 0018 F600                             move.b	#$0018,($FFFFF600).w
00132874 31FC 0600 FE10             		move.w	#$0600,($FFFFFE10).w
0013287A 4E75                       		rts
0013287C                            Menu_Level_Select_Array:
0013287C 0000 0001 0002                             dc.w    $0000, $0001, $0002
00132882 0100 0101 0102                             dc.w    $0100, $0101, $0102
00132888 0200 0201 0202                             dc.w    $0200, $0201, $0202
0013288E 0300 0301 0302                             dc.w    $0300, $0301, $0302
00132894 0400 0401 0402                             dc.w    $0400, $0401, $0402
0013289A 0500 0501 0103                             dc.w    $0500, $0501, $0103
001328A0 0502 4000 0600                             dc.w    $0502, $4000, $0600
001328A6 FFFF                                       dc.w    $FFFF
001328A8                            Menu_Load_Level:
001328A8 0240 3FFF                                  andi.w  #$3FFF, D0
001328AC 31C0 FE10                                  move.w  D0, ($FFFFFE10).w
001328B0 11FC 000C F600                             move.b  #$0C, ($FFFFF600).w
001328B6 11FC 0003 FE12                             move.b  #$03, ($FFFFFE12).w
001328BC 11FC 0003 FEC6                             move.b  #$03, ($FFFFFEC6).w
001328C2 7000                                       moveq   #$00, D0
001328C4 31C0 FE20                                  move.w  D0, ($FFFFFE20).w
001328C8 21C0 FE22                                  move.l  D0, ($FFFFFE22).w
001328CC 21C0 FE26                                  move.l  D0, ($FFFFFE26).w
001328D0 31C0 FED0                                  move.w  D0, ($FFFFFED0).w
001328D4 21C0 FED2                                  move.l  D0, ($FFFFFED2).w
001328D8 21C0 FED6                                  move.l  D0, ($FFFFFED6).w
001328DC 4E71                                       nop
001328DE 4E71                                       nop
001328E0 21FC 0000 1388 FFC0                        move.l  #$00001388, ($FFFFFFC0).w
001328E8 21FC 0000 1388 FFC4                        move.l  #$00001388, ($FFFFFFC4).w
001328F0 103C 00E0                                  move.b  #Volume_Down, D0
001328F4 6100 0000                                  bsr     Menu_Play_Music     
001328F8 7000                                       moveq   #$00, D0
001328FA 31C0 FF8A                                  move.w  D0, ($FFFFFF8A).w
001328FE 31C0 FFDC                                  move.w  D0, ($FFFFFFDC).w
00132902                            ;                cmpi.b	#$01,($FFFFFF8C).w
00132902                            ;                beq.s   MightyLoadingSub
00132902                            ;                cmpi.b	#$02,($FFFFFF8C).w
00132902                            ;                beq.s   MetalLoadingSub
00132902                            ;                cmpi.b	#$03,($FFFFFF8C).w
00132902                            ;                beq.s   TikalLoadingSub
00132902                            ;                cmpi.b	#$04,($FFFFFF8C).w
00132902                            ;                beq.s   ShadowLoadingSub
00132902                            ;                cmpi.b	#$05,($FFFFFF8C).w
00132902                            ;                beq.s   EspioLoadingSub
00132902                            ;                move.b	#$00,($FFFFFF82).w
00132902                            ;                bra.s   Menu_Load_Level_Rts
00132902                            
00132902                            ;MightyLoadingSub:
00132902                            ;                move.b	#$01,($FFFFFF8B).w
00132902                            ;                bra.w   Menu_Load_Level_Rts
00132902                            
00132902                            ;MetalLoadingSub:
00132902                            ;                move.b  #$02,($FFFFFF8B).w
00132902                            ;                bra.w   Menu_Load_Level_Rts
00132902                            
00132902                            ;TikalLoadingSub:
00132902                            ;                move.b  #$03,($FFFFFF8B).w
00132902                            ;                bra.w   Menu_Load_Level_Rts
00132902                            
00132902                            ;ShadowLoadingSub:
00132902                            ;                move.b  #$04,($FFFFFF8B).w
00132902                            ;                bra.w   Menu_Load_Level_Rts
00132902                            
00132902                            ;EspioLoadingSub:
00132902                            ;                move.b  #$05,($FFFFFF8B).w
00132902                            ;
00132902                            Menu_Load_Level_Rts:
00132902 4E75                                       rts
00132904                            
00132904                            Offset_0x026DEC:
00132904 1238 F605                                  move.b  ($FFFFF605).w, D1
00132908 0201 0003                                  andi.b  #$03, D1
0013290C 6600                                       bne.s   Offset_0x026DFC
0013290E 5378 FF80                                  subq.w  #$01, ($FFFFFF80).w
00132912 6A00                                       bpl.s   Offset_0x026E32
00132914                            Offset_0x026DFC:
00132914 31FC 000B FF80                             move.w  #$000B, ($FFFFFF80).w
0013291A 1238 F604                                  move.b  ($FFFFF604).w, D1
0013291E 0201 0003                                  andi.b  #$03, D1
00132922 6700                                       beq.s   Offset_0x026E32
00132924 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00132928 0801 0000                                  btst    #$00, D1
0013292C 6700                                       beq.s   Offset_0x026E1C
0013292E 5340                                       subq.w  #$01, D0
00132930 6400                                       bcc.s   Offset_0x026E1C
00132932 7015                                       moveq   #$15, D0     ; Último item após apertar para cima
00132934                            Offset_0x026E1C:
00132934 0801 0001                                  btst    #$01, D1
00132938 6700                                       beq.s   Offset_0x026E2C
0013293A 5240                                       addq.w  #$01, D0
0013293C 0C40 0016                                  cmpi.w  #$0016, D0   ; Verifica qual o último item da lista
00132940 6500                                       bcs.s   Offset_0x026E2C
00132942 7000                                       moveq   #$00, D0
00132944                            Offset_0x026E2C:
00132944 31C0 FF82                                  move.w  D0, ($FFFFFF82).w
00132948 4E75                                       rts
0013294A                            Offset_0x026E32:
0013294A 0C78 0015 FF82                             cmpi.w  #$0015, ($FFFFFF82).w ; se o item for igual muda as funções de esquerda e direita 
00132950 6600                                       bne.s   Offset_0x026E9C
00132952 3038 FF84                                  move.w  ($FFFFFF84).w, D0
00132956 1238 F605                                  move.b  ($FFFFF605).w, D1
0013295A 0801 0002                                  btst    #$02, D1
0013295E 6700                                       beq.s   Offset_0x026E4E
00132960 5300                                       subq.b  #$01, D0
00132962 6400                                       bcc.s   Offset_0x026E4E
00132964 707F                                       moveq   #$7F, D0
00132966                            Offset_0x026E4E:
00132966 0801 0003                                  btst    #$03, D1
0013296A 6700                                       beq.s   Offset_0x026E5E
0013296C 5200                                       addq.b  #$01, D0
0013296E 0C40 0080                                  cmpi.w  #$0080, D0
00132972 6500                                       bcs.s   Offset_0x026E5E
00132974 7000                                       moveq   #$00, D0
00132976                            Offset_0x026E5E:
00132976 0801 0006                                  btst    #$06, D1
0013297A 6700                                       beq.s   Offset_0x026E6C
0013297C 0600 0010                                  addi.b  #$10, D0
00132980 0200 007F                                  andi.b  #$7F, D0
00132984                            Offset_0x026E6C:
00132984 31C0 FF84                                  move.w  D0, ($FFFFFF84).w
00132988 0241 0030                                  andi.w  #$0030, D1
0013298C 6700                                       beq.s   Offset_0x026E9A
0013298E 3038 FF84                                  move.w  ($FFFFFF84).w, D0
00132992 0640 0080                                  addi.w  #$0080, D0
00132996 6100 0000                                  bsr     Menu_Play_Music 
0013299A 41F9 0000 0000                             lea     (Code_Debug_Mode), A0   
001329A0 45F9 0000 0000                             lea     (Code_All_Emeralds), A2 
001329A6 43F8 FF0A                                  lea     ($FFFFFF0A).w, A1
001329AA 7401                                       moveq   #$01, D2
001329AC 6100 0000                                  bsr     Menu_Code_Test 
001329B0                            Offset_0x026E9A:
001329B0 4E75                                       rts
001329B2                            Offset_0x026E9C:
001329B2 1238 F605                                  move.b  ($FFFFF605).w, D1
001329B6 0201 000C                                  andi.b  #$0C, D1
001329BA 6700                                       beq.s   Offset_0x026EB2
001329BC 3038 FF82                                  move.w  ($FFFFFF82).w, D0
001329C0 103B 0000                                  move.b  Menu_Left_Right_Select(PC, D0), D0
001329C4 31C0 FF82                                  move.w  D0, ($FFFFFF82).w
001329C8                            Offset_0x026EB2:
001329C8 4E75                                       rts
001329CA                            Menu_Left_Right_Select:                   
001329CA 0F10 1112 1212 1313 1314+                  dc.b    $0F, $10, $11, $12, $12, $12, $13, $13, $13, $14, $14, $14, $15, $15, $15
001329D9 0001 0203 0609 0C                          dc.b    $00, $01, $02, $03, $06, $09, $0C
001329E0                            Offset_0x026ED8:
001329E0 49F9 FFFF 0000                             lea     ($FFFF0000), A4
001329E6 4BF9 0000 0000                             lea     (Menu_Text_Highlight), A5
001329EC 4DF9 00C0 0000                             lea     ($00C00000), A6
001329F2 7000                                       moveq   #$00, D0
001329F4 3038 FF82                                  move.w  ($FFFFFF82).w, D0
001329F8 E548                                       lsl.w   #$02, D0
001329FA 47F5 0000                                  lea     $00(A5, D0), A3
001329FE 7000                                       moveq   #$00, D0
00132A00 1013                                       move.b  (A3), D0
00132A02 C0FC 0050                                  mulu.w  #$0050, D0
00132A06 7200                                       moveq   #$00, D1
00132A08 122B 0001                                  move.b  $0001(A3), D1
00132A0C D041                                       add.w   D1, D0
00132A0E 43F4 0000                                  lea     $00(A4, D0), A1
00132A12 7200                                       moveq   #$00, D1
00132A14 1213                                       move.b  (A3), D1
00132A16 EF49                                       lsl.w   #$07, D1
00132A18 D22B 0001                                  add.b   $0001(A3), D1
00132A1C 0641 C000                                  addi.w  #$C000, D1
00132A20 E589                                       lsl.l   #$02, D1
00132A22 E449                                       lsr.w   #$02, D1
00132A24 0041 4000                                  ori.w   #$4000, D1
00132A28 4841                                       swap.w  D1
00132A2A 2D41 0004                                  move.l  D1, $0004(A6)
00132A2E 740E                                       moveq   #$0E, D2    ; Quantidade de letras a selecionar (Highlight)
00132A30                            Offset_0x026F28:                
00132A30 3019                                       move.w  (A1)+, D0
00132A32 D043                                       add.w   D3, D0
00132A34 3C80                                       move.w  D0, (A6)
00132A36 51CA FFF8                                  dbra    D2, Offset_0x026F28
00132A3A 544B                                       addq.w  #$02, A3
00132A3C 7000                                       moveq   #$00, D0
00132A3E 1013                                       move.b  (A3), D0
00132A40 6700                                       beq.s   Offset_0x026F6C
00132A42 C0FC 0050                                  mulu.w  #$0050, D0
00132A46 7200                                       moveq   #$00, D1
00132A48 122B 0001                                  move.b  $0001(A3), D1
00132A4C D041                                       add.w   D1, D0
00132A4E 43F4 0000                                  lea     $00(A4, D0), A1
00132A52 7200                                       moveq   #$00, D1
00132A54 1213                                       move.b  (A3), D1
00132A56 EF49                                       lsl.w   #$07, D1
00132A58 D22B 0001                                  add.b   $0001(A3), D1
00132A5C 0641 C000                                  addi.w  #$C000, D1
00132A60 E589                                       lsl.l   #$02, D1
00132A62 E449                                       lsr.w   #$02, D1
00132A64 0041 4000                                  ori.w   #$4000, D1
00132A68 4841                                       swap.w  D1
00132A6A 2D41 0004                                  move.l  D1, $0004(A6)
00132A6E 3019                                       move.w  (A1)+, D0
00132A70 D043                                       add.w   D3, D0
00132A72 3C80                                       move.w  D0, (A6)
00132A74                            Offset_0x026F6C:
00132A74 0C78 0015 FF82                             cmpi.w  #$0015, ($FFFFFF82).w  ; Se for igual seleciona o número do Sound Test
00132A7A 6600                                       bne.s   Offset_0x026F78
00132A7C 6100 0000                                  bsr     Offset_0x026F7A
00132A80                            Offset_0x026F78:
00132A80 4E75                                       rts
00132A82                            Offset_0x026F7A:
00132A82 23FC 49C6 0003 00C0 0004                   move.l  #$49C60003, ($00C00004) ; Posição dos números do Sound Test
00132A8C 3038 FF84                                  move.w  ($FFFFFF84).w, D0
00132A90 1400                                       move.b  D0, D2
00132A92 E808                                       lsr.b   #$04, D0
00132A94 6100                                       bsr.s   Offset_0x026F90
00132A96 1002                                       move.b  D2, D0
00132A98                            Offset_0x026F90:
00132A98 0240 000F                                  andi.w  #$000F, D0
00132A9C 0C00 000A                                  cmpi.b  #$0A, D0
00132AA0 6500                                       bcs.s   Offset_0x026F9E
00132AA2 5800                                       addi.b  #$04, D0
00132AA4                            Offset_0x026F9E:
00132AA4 0600 0010                                  addi.b  #$10, D0
00132AA8 D043                                       add.w   D3, D0
00132AAA 3C80                                       move.w  D0, (A6)
00132AAC 4E75                                       rts
00132AAE                            ;-------------------------------------------------------------------------------                
00132AAE                            Menu_Code_Test: 
00132AAE 3038 FF0C                                  move.w  ($FFFFFF0C).w, D0
00132AB2 D0C0                                       adda.w  D0, A0
00132AB4 3038 FF84                                  move.w  ($FFFFFF84).w, D0
00132AB8 B010                                       cmp.b   (A0), D0
00132ABA 6600                                       bne.s   Menu_Reset_Debug_Mode_Code_Counter
00132ABC 5278 FF0C                                  addq.w  #$01, ($FFFFFF0C).w
00132AC0 4A28 0001                                  tst.b   $0001(A0)
00132AC4 6A00                                       bpl.s   Menu_All_Emeralds_Code_Test 
00132AC6 32BC 0101                                  move.w  #$0101, (A1)
00132ACA 6000 0000                                  bra     Menu_Set_Debug_Flag 
00132ACE                            Menu_Reset_Debug_Mode_Code_Counter: 
00132ACE 31FC 0000 FF0C                             move.w  #$0000, ($FFFFFF0C).w
00132AD4                            Menu_All_Emeralds_Code_Test: 
00132AD4 3038 FF0E                                  move.w  ($FFFFFF0E).w, D0
00132AD8 D4C0                                       adda.w  D0, A2
00132ADA 3038 FF84                                  move.w  ($FFFFFF84).w, D0
00132ADE B012                                       cmp.b   (A2), D0
00132AE0 6600                                       bne.s   Menu_Reset_All_Emerald_Code_Counter 
00132AE2 5278 FF0E                                  addq.w  #$01, ($FFFFFF0E).w
00132AE6 4A2A 0001                                  tst.b   $0001(A2)
00132AEA 6A00                                       bpl.s   Menu_Code_Not_0xFF 
00132AEC 4A42                                       tst.w   D2
00132AEE 6600                                       bne.s   Menu_Set_All_Emeralds 
00132AF0                            Menu_Set_Debug_Flag: 
00132AF0 11FC 0001 FFE1                             move.b  #$01, (Slow_Motion_Flag).w
00132AF6 11FC 0001 FFE2                             move.b  #$01, (Debug_Mode_Flag).w
00132AFC 103C 00B5                                  move.b  #Ring_Snd, D0
00132B00 6100 0000                                  bsr     Menu_Play_Music 
00132B04 6000                                       bra.s   Menu_Reset_All_Emerald_Code_Counter 
00132B06                            Menu_Set_All_Emeralds: 
00132B06 31FC 0006 FE56                             move.w  #$0006, ($FFFFFE56).w
00132B0C 103C 0093                                  move.b  #Emerald_Snd, D0
00132B10 6100 0000                                  bsr     Menu_Play_Music 
00132B14                            Menu_Reset_All_Emerald_Code_Counter: 
00132B14 31FC 0000 FF0E                             move.w  #$0000, ($FFFFFF0E).w
00132B1A                            Menu_Code_Not_0xFF: 
00132B1A 4E75                                       rts               
00132B1C                            Code_Debug_Mode: 
00132B1C 0109 0902 0101 0204 FF                     dc.b    $01, $09, $09, $02, $01, $01, $02, $04, $FF
00132B25                            Code_All_Emeralds: 
00132B25 0401 0206 FF                               dc.b    $04, $01, $02, $06, $FF
00132B2A                            ;-------------------------------------------------------------------------------                 
00132B2A                            Offset_0x027040:
00132B2A 6100 FF56                                  bsr     Offset_0x026F7A
00132B2E 6000 0000                                  bra     Offset_0x027050
00132B32                            Offset_0x027048:
00132B32 6100 FEAC                                  bsr     Offset_0x026ED8
00132B36 6000 0000                                  bra     Offset_0x027050
00132B3A                            Offset_0x027050:
00132B3A 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00132B3E 47F9 0000 0000                             lea     (Menu_Icon_List), A3
00132B44 47F3 0000                                  lea     $00(A3, D0), A3
00132B48 43F9 FFFF 08C0                             lea     ($FFFF08C0), A1
00132B4E 7000                                       moveq   #$00, D0
00132B50 1013                                       move.b  (A3), D0
00132B52 E748                                       lsl.w   #$03, D0
00132B54 3200                                       move.w  D0, D1
00132B56 D040                                       add.w   D0, D0
00132B58 D041                                       add.w   D1, D0
00132B5A 43F1 0000                                  lea     $00(A1, D0), A1
00132B5E 203C 4B36 0003                             move.l  #$4B360003, D0        ; Posição Horizontal dos Ícones
00132B64 7203                                       moveq   #$03, D1
00132B66 7402                                       moveq   #$02, D2
00132B68 6100 0000                                  bsr     Menu_ShowVDPGraphics 
00132B6C 43F9 0000 0000                             lea     (Icon_Palettes), A1  
00132B72 7000                                       moveq   #$00, D0
00132B74 1013                                       move.b  (A3), D0
00132B76 EB48                                       lsl.w   #$05, D0
00132B78 43F1 0000                                  lea     $00(A1, D0), A1
00132B7C 45F8 FB40                                  lea     ($FFFFFB40).w, A2
00132B80 7207                                       moveq   #$07, D1
00132B82                            Offset_0x027098:                
00132B82 24D9                                       move.l  (A1)+, (A2)+
00132B84 51C9 FFFC                                  dbra    D1, Offset_0x027098
00132B88 4E75                                       rts
00132B8A                            ;-------------------------------------------------------------------------------                            
00132B8A                            Dynamic_Menu:                           
00132B8A 5338 F7B9                                  subq.b  #$01, ($FFFFF7B9).w          ; Decrementa em 1 o Tempo
00132B8E 6A00                                       bpl.s   Exit_Dinamic_Menu            ; Se for maior ou igual a 0 sai da função
00132B90 11FC 0007 F7B9                             move.b  #$07, ($FFFFF7B9).w          ; Inicializa o tempo de duração de cada frame
00132B96 1038 F7B8                                  move.b  ($FFFFF7B8).w, D0            ; Carrega o Id do Frame Atual em D0
00132B9A 5238 F7B8                                  addq.b  #$01, ($FFFFF7B8).w          ; Carrega o próximo frame em $FFFFFFB8
00132B9E 0240 001F                                  andi.w  #$001F, D0
00132BA2 103B 0000                                  move.b  Sonic_Miles_Frame_Select(PC, D0), D0  ; Carrega o Id do frame em D0
00132BA6                                          ; muls.w  #$0140, D0                   ; Multiplica o Id pelo tamanho em bytes de cada frame
00132BA6 ED48                                       lsl.w   #$06, D0
00132BA8 4DF9 00C0 0000                             lea     ($00C00000), A6
00132BAE 2D7C 4020 0000 0004                        move.l  #$40200000, $0004(A6)
00132BB6 43F9 0000 0000                             lea     (Sonic_Miles_Spr), A1
00132BBC 43F1 0000                                  lea     $00(A1, D0), A1
00132BC0 303C 0009                                  move.w  #$0009, D0                   ; Tiles-1 a serem carregados por vez 
00132BC4                            Menu_Loop_Load_Tiles:
00132BC4 2C99                                       move.l  (A1)+, (A6)
00132BC6 2C99                                       move.l  (A1)+, (A6)     
00132BC8 2C99                                       move.l  (A1)+, (A6)     
00132BCA 2C99                                       move.l  (A1)+, (A6)     
00132BCC 2C99                                       move.l  (A1)+, (A6)     
00132BCE 2C99                                       move.l  (A1)+, (A6)
00132BD0 2C99                                       move.l  (A1)+, (A6)
00132BD2 2C99                                       move.l  (A1)+, (A6)
00132BD4 51C8 FFEE                                  dbra    D0, Menu_Loop_Load_Tiles
00132BD8                            Exit_Dinamic_Menu:                
00132BD8 4E75                                       rts              
00132BDA                            Sonic_Miles_Frame_Select:     
00132BDA 0000 0000 0000 0000 0000+                  dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
00132BE8 050A                                       dc.b    $05, $0A
00132BEA 0F0F 0F0F 0F0F 0F0F 0F0F+                  dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F
00132BF8 0A05                                       dc.b    $0A, $05   
00132BFA                                            ; 0 = 0000000000  ; 1 = 0101000000  ; 2 = 1010000000 ; 3 = 1111000000
00132BFA                            ;------------------------------------------------------------------------------                  
00132BFA =00000000                  __ = $00
00132BFA =0000001E                  _A = $1E
00132BFA =0000001F                  _B = $1F
00132BFA =00000020                  _C = $20
00132BFA =00000021                  _D = $21
00132BFA =00000022                  _E = $22    
00132BFA =00000023                  _F = $23
00132BFA =00000024                  _G = $24
00132BFA =00000025                  _H = $25
00132BFA =00000026                  _I = $26
00132BFA =00000027                  _J = $27
00132BFA =00000028                  _K = $28
00132BFA =00000029                  _L = $29
00132BFA =0000002A                  _M = $2A
00132BFA =0000002B                  _N = $2B
00132BFA =0000002C                  _O = $2C
00132BFA =0000002D                  _P = $2D
00132BFA =0000002E                  _Q = $2E
00132BFA =0000002F                  _R = $2F
00132BFA =00000030                  _S = $30
00132BFA =00000031                  _T = $31
00132BFA =00000032                  _U = $32
00132BFA =00000033                  _V = $33
00132BFA =00000034                  _W = $34
00132BFA =00000035                  _X = $35
00132BFA =00000036                  _Y = $36
00132BFA =00000037                  _Z = $37
00132BFA =0000001A                  _st = $1A
00132BFA                            ;-------------------------------------------------------------------------------  
00132BFA                            Icon_Palettes: 
00132BFA 0000 0000 0048 006A 008E+                  dc.w    $0000, $0000, $0048, $006A, $008E, $00CE, $0EEE, $00E0
00132C0A 00A4 0082 0062 0000 0E86+                  dc.w    $00A4, $0082, $0062, $0000, $0E86, $0026, $0E42, $0C00
00132C1A 0000 0000 0420 0820 0C00+                  dc.w    $0000, $0000, $0420, $0820, $0C00, $0E60, $0A00, $0000
00132C2A 0E00 0000 0000 0000 0444+                  dc.w    $0E00, $0000, $0000, $0000, $0444, $0666, $0AAA, $0EEE
00132C3A 0000 0204 0026 0248 046A+                  dc.w    $0000, $0204, $0026, $0248, $046A, $048C, $06CE, $0002
00132C4A 0000 0220 0040 0060 0080+                  dc.w    $0000, $0220, $0040, $0060, $0080, $02A0, $06E0, $0A0C
00132C5A 0000 0000 0A00 0660 0C80+                  dc.w    $0000, $0000, $0A00, $0660, $0C80, $0EC0, $006A, $0008
00132C6A 028A 00AE 004C 006E 0060+                  dc.w    $028A, $00AE, $004C, $006E, $0060, $0066, $00C0, $00CA
00132C7A 0000 0000 0CE2 0000 0480+                  dc.w    $0000, $0000, $0CE2, $0000, $0480, $0240, $0EEE, $04AC
00132C8A 006A 0026 0842 0620 0400+                  dc.w    $006A, $0026, $0842, $0620, $0400, $0000, $0000, $0000
00132C9A 0000 0000 0EEE 0ECA 0E86+                  dc.w    $0000, $0000, $0EEE, $0ECA, $0E86, $0E64, $0E42, $06AE
00132CAA 048A 0268 0246 0024 0888+                  dc.w    $048A, $0268, $0246, $0024, $0888, $0444, $000E, $0008
00132CBA 0000 0000 0A26 0C48 0E8C+                  dc.w    $0000, $0000, $0A26, $0C48, $0E8C, $00CE, $00C4, $0080
00132CCA 0C00 0000 0EEE 0EEA 0EC8+                  dc.w    $0C00, $0000, $0EEE, $0EEA, $0EC8, $006E, $004A, $0028
00132CDA 0000 0000 0048 006A 008E+                  dc.w    $0000, $0000, $0048, $006A, $008E, $00CE, $0EEE, $00E0
00132CEA 00A4 0082 0062 0808 0A4A+                  dc.w    $00A4, $0082, $0062, $0808, $0A4A, $0026, $0626, $0404
00132CFA 0000 0000 0EEE 0ECA 0E86+                  dc.w    $0000, $0000, $0EEE, $0ECA, $0E86, $0E64, $0E42, $06AE
00132D0A 048A 0268 0246 0024 0888+                  dc.w    $048A, $0268, $0246, $0024, $0888, $0444, $000E, $0008
00132D1A 0000 0000 0048 006A 008E+                  dc.w    $0000, $0000, $0048, $006A, $008E, $00CE, $0EEE, $00E0
00132D2A 00A4 0082 0062 0400 0E86+                  dc.w    $00A4, $0082, $0062, $0400, $0E86, $006E, $0E42, $0C00
00132D3A 0000 0000 0CE2 08C0 0480+                  dc.w    $0000, $0000, $0CE2, $08C0, $0480, $0240, $0EEE, $02AC
00132D4A 006A 0026 0AA6 0000 060A+                  dc.w    $006A, $0026, $0AA6, $0000, $060A, $0408, $0204, $0000
00132D5A 0000 0000 0C06 0C0A 0C6E+                  dc.w    $0000, $0000, $0C06, $0C0A, $0C6E, $0068, $008A, $0000
00132D6A 02CE 00EC 00AE 006E 0EEE+                  dc.w    $02CE, $00EC, $00AE, $006E, $0EEE, $0000, $000E, $00C4
00132D7A 0000 0000 0EEE 0AAA 0000+                  dc.w    $0000, $0000, $0EEE, $0AAA, $0000, $0666, $0444, $0E40
00132D8A 0C00 0800 00CE 028E 000E+                  dc.w    $0C00, $0800, $00CE, $028E, $000E, $0084, $0062, $0020
00132D9A 0000 0000 0004 0044 0084+                  dc.w    $0000, $0000, $0004, $0044, $0084, $0088, $00A8, $00AC
00132DAA 006C 002C 0028 0006 0666+                  dc.w    $006C, $002C, $0028, $0006, $0666, $0888, $0CCC, $0EEE
00132DBA 0000 0000 06CE 04AC 028A+                  dc.w    $0000, $0000, $06CE, $04AC, $028A, $0068, $0046, $00E8
00132DCA 00C4 0080 0040 0EEE 0C00+                  dc.w    $00C4, $0080, $0040, $0EEE, $0C00, $0EC0, $0860, $0000
00132DDA 0000 0000 0E64 0E86 0EA8+                  dc.w    $0000, $0000, $0E64, $0E86, $0EA8, $0ECA, $0EEE, $0000
00132DEA 00AE 006E 0E22 00E0 0000+                  dc.w    $00AE, $006E, $0E22, $00E0, $0000, $0000, $0000, $0000
00132DFA 0000 0E20 004E 006E 0048+                  dc.w    $0000, $0E20, $004E, $006E, $0048, $008C, $00CE, $08EE
00132E0A 0800 0400 0000 0EE8 0E80+                  dc.w    $0800, $0400, $0000, $0EE8, $0E80, $0E60, $0000, $0000
00132E1A 0000 0000 0A22 0C42 0000+                  dc.w    $0000, $0000, $0A22, $0C42, $0000, $0E66, $0EEE, $0AAA
00132E2A 0888 0444 08AE 046A 000E+                  dc.w    $0888, $0444, $08AE, $046A, $000E, $0000, $00EE, $0000
00132E3A 0000 0000 0A22 0C42 0000+                  dc.w    $0000, $0000, $0A22, $0C42, $0000, $0E66, $0EEE, $0AAA
00132E4A 0888 0444 08AE 046A 000E+                  dc.w    $0888, $0444, $08AE, $046A, $000E, $0000, $00EE, $0000
00132E5A                            ;-------------------------------------------------------------------------------  
00132E5A                            Menu_Icon_List: 
00132E5A 0000 000E 0E0E 0606 060B+                  dc.b    $00, $00, $00, $0E, $0E, $0E, $06, $06, $06, $0B, $0B, $0B, $0D, $0D, $0D, $09
00132E6A 0909 0410 0F11                             dc.b    $09, $09, $04, $10, $0F, $11
00132E70                            ;-------------------------------------------------------------------------------                 
00132E70                            Menu_Text_Highlight:                  
00132E70 0306 0324 0306 0424 0306+                  dc.w    $0306, $0324, $0306, $0424, $0306, $0524, $0706, $0724
00132E80 0706 0824 0706 0924 0B06+                  dc.w    $0706, $0824, $0706, $0924, $0B06, $0B24, $0B06, $0C24
00132E90 0B06 0D24 0F06 0F24 0F06+                  dc.w    $0B06, $0D24, $0F06, $0F24, $0F06, $1024, $0F06, $1124
00132EA0 1306 1324 1306 1424 1306+                  dc.w    $1306, $1324, $1306, $1424, $1306, $1524, $032C, $034A
00132EB0 032C 044A 032C 054A 072C+                  dc.w    $032C, $044A, $032C, $054A, $072C, $0000, $0B2C, $0000
00132EC0 0F2C 0000 132C 134A                        dc.w    $0F2C, $0000, $132C, $134A
00132EC8                            ;-------------------------------------------------------------------------------                
00132EC8                            Menu_Text_Positions:                   
00132EC8 00F6 0236 0376 04B6 05F6+                  dc.w    $00F6, $0236, $0376, $04B6, $05F6, $011C, $025C, $039C
00132ED8 04DC 061C                                  dc.w    $04DC, $061C
00132EDC                            ;-------------------------------------------------------------------------------                          
00132EDC                            Menu_Level_Select_Text: 
00132EDC 0E31 2F2C 2D26 201E 2B1E+                  dc.b    $0E, _T, _R, _O, _P, _I, _C, _A, _N, _A, __, __, __, __, __, __
00132EEC 0E20 251E 2C30 0030 252F+                  dc.b    $0E, _C, _H, _A, _O, _S, __, _S, _H, _R, _I, _N, _E, __, __, __
00132EFC 0E2B 2220 2F2C 2D2C 2926+                  dc.b    $0E, _N, _E, _C, _R, _O, _P, _O, _L, _I, _S, __, __, __, __, __
00132F0C 0E2F 2C1F 2C31 2F2C 2D2C+                  dc.b    $0E, _R, _O, _B, _O, _T, _R, _O, _P, _O, _L, _I, _S, __, __, __
00132F1C 0E21 262F 2200 312F 2222+                  dc.b    $0E, _D, _I, _R, _E, __, _T, _R, _E, _E, _T, _O, _P, _S, __, __
00132F2C 0E25 3621 2F2C 3031 1E31+                  dc.b    $0E, _H, _Y, _D, _R, _O, _S, _T, _A, _T, _I, _O, _N, __, __, __
00132F3C 0E30 311E 3126 2C2B 0020+                  dc.b    $0E, _S, _T, _A, _T, _I, _O, _N, __, _C, _O, _R, _E, __, __, __   
00132F4C 0E30 2D22 2026 1E29 0030+                  dc.b    $0E, _S, _P, _E, _C, _I, _A, _L, __, _S, _T, _A, _G, _E, __, __
00132F5C 0E22 2B21 262B 2400 3022+                  dc.b    $0E, _E, _N, _D, _I, _N, _G, __, _S, _E, _Q, _U, _E, _N, _C, _E
00132F6C 0E30 2C32 2B21 0031 2230+                  dc.b    $0E, _S, _O, _U, _N, _D, __, _T, _E, _S, _T, __, __, _st,__, __                 
00132F7C                            ;-------------------------------------------------------------------------------
00132F7C                            Wings_Mappings: 
00132F7C 6000 6000 6000 604D 604E+                  dc.w    $6000, $6000, $6000, $604D, $604E, $684E, $684D, $6000, $6000, $6000   
00132F90                            ;Wings_Line_1:                 
00132F90 604F 6050 6051 6052 6053+                  dc.w    $604F, $6050, $6051, $6052, $6053, $6853, $6852, $6851, $6850, $684F
00132FA4                            ;Wings_Line_2:
00132FA4 6054 6055 6056 6057 6057+                  dc.w    $6054, $6055, $6056, $6057, $6057, $6057, $6057, $6856, $6855, $6854
00132FB8                            ;Wings_Line_3:
00132FB8 6058 6059 605A 6057 6057+                  dc.w    $6058, $6059, $605A, $6057, $6057, $6057, $6057, $685A, $6859, $6858
00132FCC                            ;Wings_Line_4:
00132FCC 605B 605C 605D 6057 6057+                  dc.w    $605B, $605C, $605D, $6057, $6057, $6057, $6057, $685D, $685C, $685B
00132FE0                            ;Wings_Line_5:
00132FE0 6000 605E 605F 6060 6061+                  dc.w    $6000, $605E, $605F, $6060, $6061, $6062, $6063, $6064, $685E, $6000
00132FF4                            ;Wings_Line_6:
00132FF4 6000 6000 6065 6066 6067+                  dc.w    $6000, $6000, $6065, $6066, $6067, $6867, $6866, $6865, $6000, $6000 
00133008                            ;-------------------------------------------------------------------------------    
00133008                            Menu_Palette:
00133008                                            incbin  'data\menu\menu.pal'            
00133088                            Menu_ClearScreen:
00133088 4EF8 11F6                                  jmp     ClearScreen
0013308C                            Menu_ShowVDPGraphics:                
0013308C 4EF8 134E                                  jmp     ShowVDPGraphics                
00133090                            Menu_NemesisDec: 
00133090 4EF8 13FE                                  jmp     NemDec  
00133094                            Menu_LoadPLC2:      
00133094 4EF8 1570                                  jmp     LoadPLC2
00133098                            Menu_RunPLC:                    
00133098 4EF8 15AA                                  jmp     RunPLC_RAM                           
0013309C                            Menu_EnigmaDec
0013309C 4EF8 16DC                                  jmp     EniDec
001330A0                            Menu_Pal_FadeTo:
001330A0 4EF8 1D1A                                  jmp     Pal_FadeTo
001330A4                            Menu_Pal_FadeFrom:
001330A4 4EF8 1DC0                                  jmp     Pal_FadeFrom     
001330A8                            Menu_Play_Music:
001330A8 4EF8 12CA                                  jmp     PlaySound  
001330AC                            Menu_PalLoad1:
001330AC 4EF8 206A                                  jmp     PalLoad1
001330B0                            Menu_DelayProgram:
001330B0 4EF8 2C96                                  jmp     DelayProgram
001330B4                            ;-------------------------------------------------------------------------------
001330B4                            Menu_Font:
001330B4                                            incbin  'data\menu\menufont.nem' 
00133628                            Level_Icons:
00133628                                            incbin  'data\menu\levelico.nem'   
00134924                            Menu_Mappings:
00134924                                            incbin  'data\menu\menubg.eni'
00134AD0                            Icons_Mappings:
00134AD0                                            incbin  'data\menu\iconsmap.eni'
00134AE6                            Sonic_Miles_Spr:                                         
00134AE6                                            incbin  'data\menu\soncmils.dat'   
00134FE6                            ;===============================================================================
00134FE6                            ; Menu do Sonic 2 No Sonic 1 reprogramado por Esrael L. G. Neto
00134FE6                            ; [ Fim ]
00134FE6                            ;===============================================================================
00134FE6                            ;===============================================================================
00134FE6                            
00134FE6                            ; end of 'ROM'
00134FE6                            EndOfRom:
00134FE6                            
00134FE6                            
